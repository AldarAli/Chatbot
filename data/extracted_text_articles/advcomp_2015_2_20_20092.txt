Preference Elicitation in Decision Making Prioritisation Problems by Evolutionary 
Computing 
Ludmil Mikhailov 
Manchester Business School, University of Manchester 
Manchester, United Kingdom 
Email: ludi.mikhailov@manchester.ac.uk 
 
 
Abstract—The 
paper 
investigates 
the 
application 
of 
evolutionary algorithms (EA) for solving a two-objective 
prioritisation 
problem. 
We 
propose 
two 
evolutionary 
computing approaches, based on single-objective and multi-
objective EA. Our preliminary results from a Monte-Carlo 
simulation show that the multi-objective EA outperforms the 
single-objective solution approach with respect to accuracy 
and computational efficiency.  
Keywords- evolutionary computing, genetic algorithms, 
multiobjective optimisation, prioritisation methods. 
I. 
 INTRODUCTION  
The assessment of weights of criteria and scores of 
alternatives is one of the most important tasks in the 
multicriteria decision-making. In the Analytical Hierarchy 
Process (AHP), proposed by Saaty [1], the values of weights 
and scores are assessed indirectly from comparison 
judgments. The elicitation process for both weights and 
scores is the same, so they are often called priorities.  
The pairwise comparison process in the AHP assumes 
that the decision-maker can compare any two elements at a 
given hierarchical level and to provide a numerical value of 
the ratio of their importance. Comparing any two elements 
iE  and 
j
E , the decision-maker assigns a ratio 
ij
a , which 
represents a judgment concerning the relative importance of 
preference of the decision element 
iE  over 
j
E . If 
iE  is 
preferred to 
j
E  then 
ij
a >1, otherwise 
1
0
≤
<
ija
. 
A full set of ratio-scale judgments for a level with n 
elements requires n(n-1)/2 comparisons. In order to derive a 
priority vector from a given set of judgments, Saaty 
constructs a positive reciprocal matrix 
}
{
ija
A =
 of the type 












=
1
...
1/
/
1
...
...
...
...
...
1
1/
...
1
2
1
2
12
1
12
n
n
n
n
a
a
a
a
a
a
A
 
and proposes the Eigenvector of this matrix as an 
estimation of the priority vector 
wn T
w w
w
)
,...,
,
(
2
1
=
.  
With the exception of the traditional Eigenvector 
prioritization method, all other methods for deriving 
priorities in the AHP are based on some optimization 
approach. The optimal prioritization methods, as the Goal 
programming, the Direct Least Squares, the Logarithmic 
Least Squares and the Fuzzy Preference Programming 
introduce an objective function, which measures the degree 
of approximation or the distance between the initial 
judgments and the solution ratios [2]. Thus, the problem of 
priority derivation is formulated as an optimization task of 
minimizing the objective function, subject to normalization 
and some additional constraints.  
Despite the multicriteria nature of the requirements, 
regarding the properties of their solutions, all optimal 
prioritization methods optimize a single objective function. 
However, a single objective function cannot encompass and 
satisfy all requirements about the quality of solutions.   
A new two-objective prioritization (TOP) method was 
proposed recently by the author [3], where the prioritisation 
problem is formulated as an optimization task for 
minimization of the Euclidean norm and the number of rank 
violations. The TOP method derives Pareto optimal 
solutions, which requires the application of efficient 
computational algorithms.  
The paper investigates the application of evolutionary 
computing for solving the TOP problem. In order to 
eliminate the drawbacks of the numerical methods, we 
propose two evolutionary computing approaches. In the first 
one, the TOP problem is transformed into a single-objective 
one, which is then solved by a standard single-objective EA. 
The second approach applies a multi-objective EA for 
solving the TOP problem without such transformation.  
In order to compare the solution approaches, we perform 
Monte-Carlo 
simulation 
experiments, 
by 
randomly 
generating a large number of pairwise comparison matrices. 
The paper presents some initial results from this simulation.  
Both computational approaches are also illustrated also by a 
numerical example.   
The paper is organized as follows: Section II formulates 
the TOP problem; Section III discusses computational 
approaches to solving the problem; Sections IV  and V 
provide some initial results from the simulation experiments, 
and Section VI concludes the paper. 
II. 
THE TWO OBJECTIVE PRIORITISATION PROBLEM 
Let 
{
}i
j
a
S
ij
>
=
 be a set of pairwise comparison 
judgments. The feasible set Q is defined as the set of all 
priority 
vectors 
wn T
w
w
)
,...,
(
1
=
, 
which 
satisfy 
the 
normalization and non-negativity constraints: 
 






=
>
=
∑
=
n
i
i
i
n
w
w
w
w
Q
1
1
1
,0
)
,...,
(
  
(1) 
24
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-419-0
ADVCOMP 2015 : The Ninth International Conference on Advanced Engineering Computing and Applications in Sciences

The accuracy of the each priority vector 
w∈Q
, 
approximately satisfying the comparison judgments can be 
measured by the Total deviation criterion: 
 
2
1
1
1
)
(
)
(
j
i
n
i
n
i
j
ij
w
w
a
T w
−
=∑∑
−
=
= +
. 
(2) 
This criterion is equivalent to the squared Euclidean 
distance for the upper triangular part of a Saaty’s reciprocal 
comparison matrix. 
The rank preservation properties of the solutions can be 
measured by the Number of Violations criterion [2]: 
 
∑∑
−
=
= +
=
1
1
1
n
i
n
i
j
ijv
NV
,. 
(3) 
where  
.
,1
,1
,1
,1
,0
/ ,2
1
,1
otherwise
w and a
or w
w and a
w
if
w and a
or w
w and a
w
if
v
ij
j
i
ij
j
i
ij
j
i
ij
j
i
ij
=
≠
≠
=
>
<
<
>



=
 
The Number of Violations criterion (3) can be represented in 
the following compact form: 
∑∑
−
=
= +
−
−
−
=
1
1
1
)1
(
)1
(
2
1
)
(
n
i
n
j i
j
j
ij
w
signum w
signum a
V w
, 
where the signum function is defined as: 



<
−
=
>
=
.1
,1
0
,0
1
,1
)
(
b
if
b
if
b
if
b
signum
 
 
The TOP problem is to find a feasible priority vector that 
‘simultaneously’ minimizes the Total deviation and the 
Number of violations: 
 
Minimize (T(w), V(w)) 
 (4) 
subject to
w∈Q
, 
where 
1
:
R
R
T
n →
 and 
1
:
R
R
V
n →
 are real-valued objective 
functions.  
Each feasible vector 
w∈Q
 determines a unique value of 
the objective function vector 
( ))
( ( ),
V w
y = T w
. Therefore, the 
feasible set Q  in the space of decision variables can be 
transformed into a payoff set Y in the two-dimensional 
objective space. The payoff set represents a feasible region 
of the admissible values of 
T(w)
 and 
V (w)
, and can be 
considered as the image of the feasible set Q in the objective 
space.  
The payoff set Y of the TOP problem consists in parallel 
line segments, as the function 
V (w)
 takes non-negative 
discrete values in some range, and the function 
T(w)
 is 
bounded.  
III. 
COMPUTATIONAL APPROACHES FOR SOLVING THE 
TOP PROBLEM  
A. Multiobjective Numerical Algorithms 
Some classical multi-objective optimization (MOO) 
methods, which can be applied for finding Pareto optimal 
solutions to the TOP problem are the Weighting Method, the 
ε-Constraint Method, the Goal Programming Method or the 
Proper Equality Constraints method [4]. Generally, the main 
strength of classical MOO methods is their efficiency and 
ability to generate strong Pareto optimal solutions. However, 
these methods have some weaknesses in generating the 
Pareto optimal solutions, when specific problem knowledge 
is not available. Additionally, they cannot generate all Pareto 
optimal 
solutions 
with 
non-convex 
surfaces. 
From 
computational point of view, many optimization runs are 
required to obtain an approximation set of the Pareto optimal 
solutions [5]. 
Recently, the evolutionary algorithms have become an 
alternative to the classical methods for generating Pareto 
optimal solutions; since they can eliminate some of the 
drawbacks of the classical MOO methods.  
B. Single-Objective Evolutionary Algorithms 
Taking into account the specific properties of the TOP 
problem (4), we can transform it into a single-objective 
optimisation problem, which is easily solved by standard 
single-objective EA.  
By associating weights k and (1-k) to both objective 
functions in (4), we obtain  
J(w)
=
kT(w)
+
) ( )
1(
− k V w
, 
which is used as a fitness function of a single-objective EA. 
The value of the weight coefficient k is given by the user. 
This value represents his/her preferences with respect to the 
relative importance of those two objectives.  
C. Multi-Objective Evolutionary Algorithms 
Some multi-objective EA, as the Vector Evaluated 
Genetic Algorithm (VEGA), the Non-dominated Sorting 
Genetic Algorithm (NSGA), the Niched Pareto GA (NPGA), 
the Multi-objective Genetic Algorithm (MOGA) [5] and the 
Pareto Envelope-based Selection Algorithm (PESA II) [6]. 
However, it is well known that the presence of constraints 
scientifically affects the performance of multi-objective EA. 
Additionally, as opposed to the single objective case, the 
ranking of a population in the multi-objective case is not 
unique [7].  
In order to assess the applicability of EA for solving the 
TOP problem, we perform a series of computational 
experiments by Monte-Carlo simulation. In our study we use 
the PESA-II, which has some advantages compared to other 
EA. PESA-II follows the standard procedures of an EA, but 
with the difference that two populations of solutions are 
maintained: an internal population (IP) of fixed size, and an 
external population (EP) of non-fixed but limited size. The 
internal population's job is to explore new solutions, and it 
achieves this by the standard EA processes of reproduction 
25
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-419-0
ADVCOMP 2015 : The Ninth International Conference on Advanced Engineering Computing and Applications in Sciences

and variation (i.e., recombination and mutation). The 
purpose of the external population is to store and exploit 
good solutions; it does this by maintaining a large and 
diverse set of the non-dominated solutions discovered during 
search [8]. 
An important advantage of PESA-II is that its niching 
policy uses an adaptive range equalization and normalization 
of the objective function values. This means that difficult 
parameter tuning is avoided, and objective functions that 
have very different ranges can be readily used. 
IV. 
MONTE-CARLO SIMULATION  
Monte-Carlo simulation experiments have been carried 
out, consisting in generation of comparison matrices with 
different dimensions and applying the single-objective and 
multi-objective evolutionary approaches. Initially random 
consistent pairwise matrices are generated; then they are 
perturbed by a user-driven parameter, denoted as p, which 
determines the degree of inconsistency.  
The matrices for this comparison study are of dimensions 
n=3, 4, 5, 6, 7, 8 and 9. For every value of n, the parameter p 
takes 9 values, p=10, 20,…, 90 and each combination of {n, 
p} is replicated 30 times, which gives a total number of 810 
n-dimensional 
matrices 
with 
different 
degrees 
of 
inconsistency. The overall number of generated random 
matrices is 5670. 
The single-objective EA (a standard Genetic Algorithm) 
and PESA-II have been applied for solving the TOP problem 
for each pairwise comparison matrix, using the jMetal toolkit 
[9]. In the single-objective EA each chromosome is 
represented by a string of n components, associated with the 
n-dimensional priority vector w. The EA performs the basic 
genetic operators, which are roulette wheel selection, 
crossover with random mating and simple mutation.  
Elitism has also been applied as an additional selection 
strategy, to make sure that the best performing chromosome 
always survives. The elitism has been realized by comparing 
the fitness of chromosomes from the current population and 
the fitness of the corresponding offspring. The fittest 
chromosome from the initial population survives for the next 
generation.  
At the beginning of each cycle, all chromosomes are 
normalised, so that the values of their genes sum up to one. 
The stopping condition is the number of generations, which 
is selected to be equal to 100. The experimental results show 
that the single-objective EA converges to the optimal 
solution for less than 50 generation cycles. 
The high-level pseudocode, showing the main steps in 
the PESA-II algorithm, is given in [8]. 
 
V. 
NUMERICAL RESULTS 
Consider a problem with 5 comparison elements [8], 
where the DM provides the following pairwise comparison 
matrix A: 
5
4
3
2
1
5
4
3
2
1
1
3
4
1/ 4
3/ 2
1/ 3
1
2
2
1/ 7
1/ 4
1/ 2
1
1/ 2
3
4
1/ 2
2
1
1/ 5
2 / 3
7
1/ 3
5
1
E
E
E
E
E
A
E
E
E
E
E
















=
 
 
The TOP problem is formulated as a single-objective one 
by the Weighting method and solved by the single-objective 
EA. The parameters of the EA are selected as follows: 
- Population size = 100; 
- Crossover probability=0.9; 
- Mutation probability=0.01. 
In this example, we have 5 Pareto optimal solutions, 
which are obtained by the EA. Due to the non-transitivity of 
the pairwise comparison problem, there are no priority 
vectors with less than two violations.  
The results are given in Table 1.  
TABLE I.  
PARETO OPTIMAL SOLUTIONS OBTAINED BY A SINGLE-
OBJECTIVE EVOLUTIONARY ALGORITHM 
1
w  
2
w  
3
w  
4
w  
5
w  
T 
V 
0.309 
0.113 
0.096 
0.135 
0.347 
50.048 
2 
0.344 
0.075 
0.109 
0.111 
0.361 
39.806 
3 
0.345 
0.058 
0.140 
0.071 
0.386 
29.717 
4 
0.363 
0.067 
0.146 
0.058 
0.367 
26.962 
5 
0.381 
0.076 
0.139 
0.062 
0.342 
26.720 
6 
 
PESA-II was applied for solving the same problem. A 
30-bit Gray code was used to represent each of the five 
weights, giving a 150-bit binary chromosome. Uniform 
crossover was applied with probability 0.2 and a bit-flip per-
gene mutation rate of 0.01 was used. It was found that 
PESA-II is not sensitive to these parameters, and other 
values give similar performance.  
The values of the PESA-II parameter settings are:  
IPsize=10; 
EPsize=100; 
Generations=50; 
pm=0.01; 
Pc=0.2; #grid-cells (niches)=100; representation=30-bits per 
weight. 
The best values of the priority vectors obtained from 20 
runs of PESA-II are shown in Table 2.  
TABLE II.  
PARETO OPTIMAL SOLUTIONS OBTAINED BY PESA II 
1
w  
2
w  
3
w  
4
w  
5
w  
T 
V 
0.356 
0.096 
0.096 
0.096 
0.356 
39.469 
2 
0.362 
0.078 
0.099 
0.100 
0.362 
38.631 
3 
0.358 
0.065 
0.149 
0.065 
0.363 
27.438 
4 
0.361 
0.074 
0.144 
0.060 
0.361 
26.622 
5 
0.398 
0.083 
0.158 
0.065 
0.296 
26.479 
6 
 
By comparing the values of T for each value of V, it is 
seen that PESA-II solutions outperform those obtained by 
the single-objective EA, with respect to the accuracy.  
Regarding the computational efficiency, the average 
processing time of the single-objective EA for this example 
26
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-419-0
ADVCOMP 2015 : The Ninth International Conference on Advanced Engineering Computing and Applications in Sciences

is 1325 milliseconds, while the PESA II algorithm requires 
622 milliseconds to find the optimal solution.   
The performance comparison was obtained using an 
Intel-based PC with a Core2Duo T5500 CPU running at 
1.66GHz and 2GB of physical memory. The tests were 
executed on Windows 7 with Java NetBeans IDE running in 
parallel.  
The preliminary results from the Monte-Carlo simulation 
show that the multi-objective EA gives better accuracy than 
the single-objective EA, especially for high-dimensional and 
rather inconsistent pairwise comparison matrices.  
Regarding the computation time, both approaches have 
rather similar performance for pairwise comparison matrices 
of lower dimension, n=3 and n=4. When the size of the 
matrices increases, PESA–II strongly outperforms the single-
objective EA. The single-objective EA is particularly slower 
in inconsistent and non-transitive problems with many Pareto 
optimal solutions.   
VI. 
CONCLUSIONS 
The paper investigates the application of evolutionary 
algorithms for solving the TOP problem and shows that they 
are very good alternatives to the numerical multi-objective 
optimization methods. Two evolutionary approaches are 
applied for obtaining Pareto optimal solutions to the 
problem.  
The numerical example and the preliminary results from 
a Monte-Carlo simulation experiment show that the multi-
objective EA outperforms the single-objective EA with 
respect to the computational efficiency and accuracy of 
solutions.  
 
 
 
REFERENCES 
[1] T. Saaty, “A calling method for priorities in hierarchical 
structures,” Journal of Mathematical Psychology, vol. 15, 
pp.234-281, 1977. 
[2] B. Golany and M. Kress, “A multicriteria evaluation of 
methods for obtaining weights from ratio-scale matrices”, 
European Journal of Operational Research,  vol. 69, pp.:210-
220, 1993. 
[3] L. 
Mikhailov, 
“Deriving 
priorities 
from 
ratio-scale 
comparison judgements: A multiple objective approach”, In 
Proceedings of the 17th International Conference on Multiple 
Criteria Decision Making MCDM’2004, August 2004, 
Whistler, Canada. 
[4] Y. Sawaragi, H. Nakyama, and T. Tanino, Theory of 
multiobjective optimization.  Academic Press, Orlando, 1985. 
[5] K. 
Deb, 
Evolutionary 
algorithms 
for 
multi-criterion 
optimization in engineering design. John Wiley & Sons, 
Chichester, UK, 1999. 
[6] D. Corne, N. Jerram, J. Knowles, and M. Oates, “PESA-II: 
Region-based Selection in Evolutionary Multiobjective 
Optimization”, Proceedings of the Genetic and Evolutionary 
Computation Conference (GECCO’2001), 2001, pp. 283-290. 
[7] C. Fonseca and P. Fleming,  “Multiobjective optimization and 
multiple constraints handling with evolutionary algorithms, 
part 1: A unified formulation”,  IEEE Transactions on SMC 
vol. 28, pp. 26-37, 1998. 
[8] L. Mikhailov and J. Knowles, “Priority Elicitation in the AHP 
by a Pareto Envelope-based Selection Algorithm”. In Multiple 
Criteria Decision Making for Sustainable Energy and 
Transportation Systems. (M Ehrgott, B Naujoks, T Stewart, 
and J Wallenius eds.), Springer's Lecture Notes in Economics 
and Mathematical Systems, vol. 634, pp. 249-258, Springer-
Verlag, London 2010. 
[9] J. Durillo, A. Nebro, F. Luna, B. Dorronsoro, and E. Alba, 
“jMetal: A Java Framework for Developing Multi-Objective 
Optimization Metaheuristics”, Tech. Rep. ITI-2006-10, 
Departamento de Lenguajes y Ciencias de la Computación, 
University of Málaga, December 2006. Available from 
http://jmetal.sourceforge.net (last accessed May 2015). 
 
 
27
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-419-0
ADVCOMP 2015 : The Ninth International Conference on Advanced Engineering Computing and Applications in Sciences

