First Steps towards Automated Synthesis of
Tableau Systems for Interval Temporal Logics
Dario Della Monica∗, Angelo Montanari†, Guido Sciavicco‡ and Dmitri Tishkovsky§
∗ ICE-TCS, School of Computer Science, Reykjavik University, Iceland
† Department of Mathematics and Computer Science, University of Udine, Italy
‡ Department of Information Engineering and Communications, University of Murcia, Spain
§ School of Computer Science, University of Manchester
dariodm@ru.is, angelo.montanari@uniud.it, guido@um.es, dmitry@cs.man.ac.uk
Abstract—Interval temporal logics are difﬁcult to deal with in
many respects. In the last years, various meaningful fragments
of Halpern and Shoham’s modal logic of time intervals have
been shown to be decidable with complexities that range from
NP-complete to non-primitive recursive. However, even restricting
the attention to ﬁnite interval structures, the step from model-
theoretic decidability results to the actual implementations of
tableau-based decision procedures is quite challenging. In this
paper, we investigate the possibility of making use of automated
tableau generators. More precisely, we exploit the generator
METTEL2 to implement a tableau-based decision procedure for
the future fragment of the logic of temporal neighborhood over
ﬁnite linear orders. We explore and contrast two alternative
solutions: a concrete tableau system, that operates on a concrete
interval structure explicitly built over a ﬁnite, linearly-ordered
set of points, and an abstract one, that operates on an interval
frame which is forced to be isomorphic to a concrete interval
structure by suitably constraining its accessibility relation.
Keywords–Interval temporal logics; satisﬁability; tableau sys-
tems; automated tableau system generation.
I.
INTRODUCTION
In this paper, we make some initial steps towards the auto-
mated synthesis of tableau systems for interval temporal logics.
It is well-known that turning (optimal) declarative, tableau-
based systems for decidable temporal logics into effective
decision procedures is far from being trivial. Such a transition
turns out to be particularly complex in the case of interval
temporal logics. In the last years, it has been experimented
for two speciﬁc logics, namely, the temporal logic of sub-
intervals D, interpreted over dense linear orders [1], and the
future fragment of the logic of temporal neighborhood A,
interpreted over ﬁnite linear orders [2]. However, in both
cases the proposed solution is tailored to the logic under
consideration, and thus it lacks generality. In this paper, we
explore the possibility of exploiting a general tool for the
automated synthesis of tableau systems, namely, the generator
METTEL2, to deal with interval temporal logics. Even though
we will apply the proposed solution to the logic A only (as
Bresolin et al. did in [2]), there is no any limitation that
prevents its application to other interval temporal logics.
Propositional interval temporal logics play a signiﬁcant
role in computer science, as they provide a natural framework
for representing and reasoning about temporal properties in
a number of application domains [3]. This is the case, for in-
stance, of computational linguistics, where signiﬁcant interval-
based logical formalisms have been developed to represent
and reason about tenses and temporal prepositions [4]. As
another example, the possibility of encoding and reasoning
about various constructs of imperative programming in in-
terval temporal logic has been systematically explored by
Moszkowski in [5]. Other meaningful applications of interval
temporal logics can be found in knowledge representation,
systems for temporal planning and maintenance, qualitative
reasoning, theories of action and change, speciﬁcation and de-
sign of hardware components, concurrent real-time processes,
event modeling, and temporal databases. Modalities of interval
temporal logics correspond to binary relations between time
intervals. In particular, Halpern and Shoham’s modal logic of
time intervals HS [6] features one modality for each Allen
interval relation [7]. In [6], the authors showed that HS is
undecidable over all meaningful classes of linear orders. Since
then, a lot of work has been devoted to the study of HS
fragments, mainly to disclose their computational properties
and relative expressiveness. The classiﬁcation of HS fragments
with respect to the status (decidable/undecidable) of their
satisﬁability problem is now almost completed. In this paper,
we focus our attention on the class of ﬁnite linear orders, which
comes into play in a variety of application domains, e.g., in
planning problems. A complete classiﬁcation of HS fragments
over ﬁnite linear orders is given in [8]. It shows that there are
62 non-equivalent (with respect to expressiveness) decidable
HS fragments, which can be partitioned into four complexity
classes, ranging from NP-complete to non-primitive recursive.
For each decidable fragment, an optimal, tableau-based de-
cision procedure has been devised. However, since each of
such procedures has been given a declarative formulation, no
one of them is available as a working system, apart from the
tableau-based decision procedure for the fragment A reported
in [2]. The only attempt to apply a generic theorem prover to
an interval temporal logic can be found in [1], where a tableau-
based decision procedure for the fragment D, interpreted over
dense linear orders, has been developed in LoTREC [9][10].
LoTREC is a generic prover for modal and description logics
that can be used to prove validity and satisﬁability of formulas.
Whenever a formula is satisﬁable, it returns a model for it;
whenever a formula is not valid, it returns a counter-model
for it. In LoTREC, a tableau is a special kind of labeled
graph that is built, and possibly revised, according to a set
of user-deﬁned rules. Every node of the graph is labeled with
32
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

a set of formulae and can be enriched by auxiliary markings,
if needed. Unfortunately, LoTREC, as well as most generic
theorem provers, cannot be exploited to deal with other interval
temporal logics because (i) it does not support an explicit treat-
ment of world labels, and (ii) it manages closing conditions
based on loop checks, but it does not allow explicit checks
on the number of worlds generated during the construction
of a tentative model. Such limitations are overcome by the
current version of METTEL2 [11], which provides the user with
a ﬂexible language for specifying propositional syntaxes and
tableau calculi.
In the following, we make use of METTEL2 to implement
a tableau-based decision procedure for A over ﬁnite linear
orders. We explore and contrast two alternative solutions: a
concrete tableau system, that operates on a concrete interval
structure explicitly built over a ﬁnite, linearly-ordered set
of points, and an abstract one, that operates on an interval
frame which is forced to be isomorphic to a concrete interval
structure by suitably constraining its accessibility relation
(using the speciﬁcation language provided by METTEL2). The
main contributions of the paper can be summarized as follows:
(i) it can be viewed as the ﬁrst general attempt of using an
automated generator to synthesize a tableau system for an
interval temporal logic(D over dense linear orders is a very
special case because, due to its properties, it bears strong
resemblance to standard modal logic); (ii) while METTEL2
works perfectly on a variety of other logics (see, e.g., [12]
and Section III), it required a small, but not trivial, change to
make it possible to formulate closing conditions for A; (iii) the
abstract version of the tableau system, based on a suitable
representation theorem, gives new insigths into the role of
temporal knowledge representation and reasoning technique,
and representation theorems [7][13][14].
The paper is structured as follows. In the next section, we
introduce the logic A. In Section III, we provide an necessary
overview of the system METTEL2. In Section IV, we describe
the proposed A-prover. Section V given an account of the
experimental results. Section VI concludes the paper.
II.
THE INTERVAL TEMPORAL LOGIC A
Given a linearly ordered set D = ⟨D, <⟩, a (strict) interval
is a pair [a, b], with a, b ∈ D and a < b. There are 12 different
relations (excluding the identity) between two intervals on a
linear order, often referred to as Allen’s relations [7]: the six re-
lations depicted in Fig. 1, namely RA, RL, RB, RE, RD, RO,
and the inverse ones, deﬁned in the standard way, that is,
RX = (RX)−1, for each X ∈ {A, L, B, E, D, O}. Intuitively,
an interval structure over a linear order D consists of the set
of all intervals over D, together with a set of Allen’s relations.
We treat interval structures as Kripke structures [15], where
Allen’s relations play the role of accessibility relations, and
we associate a modality ⟨X⟩ with each Allen relation RX.
Given a modality ⟨X⟩ associated with the relation RX, with
X ∈ {A, L, B, E, D, O}, its transpose is the modality ⟨X⟩,
corresponding to the inverse relation RX.
Syntax and (Concrete) Semantics. Halpern and Shoham’s
logic HS [6] is a multi-modal logic with formulae built
from a ﬁnite, non-empty set AP of atomic propositions, the
propositional connectives ∨ and ¬, and the complete set of
Modality
⟨A⟩
⟨L⟩
⟨B⟩
⟨E⟩
⟨D⟩
⟨O⟩
Relation
[a, b]RA[c, d] ⇔ b = c
[a, b]RL[c, d] ⇔ b < c
[a, b]RB[c, d] ⇔ a = c, d < b
[a, b]RE[c, d] ⇔ b = d, a < c
[a, b]RD[c, d] ⇔ a < c, d < b
[a, b]RO[c, d] ⇔ a < c < b < d
Representation
a
b
c
d
c
d
c d
c d
c
d
c
d
Figure 1.
Allen’s interval relations and the corresponding HS modalities.
modalities associated with all Allen’s relations. With each
subset {RX1, . . . , RXk} of this set of relations, we associate
the fragment X1X2 . . . Xk of HS, whose formulae are deﬁned
by the grammar:
ϕ ::= p | ¬ϕ | ϕ ∨ ϕ | ⟨X1⟩ϕ | . . . | ⟨Xk⟩ϕ, with p ∈ AP.
The other propositional connectives and logical constants, e.g.,
∧, →, and ⊤, can be derived in the standard way, as well as
the dual modalities, e.g., [A]ϕ ≡ ¬⟨A⟩¬ϕ. In this paper, we
focus our attention on the fragment A, whose formulae are
generated by the following restricted grammar:
ϕ ::= p | ¬ϕ | ϕ ∨ ϕ | ⟨A⟩ϕ, with p ∈ AP.
The concrete semantics of HS is given in terms of concrete
interval models.
Deﬁnition 1: Let D be a linearly ordered set and I(D) be
the set of all (strict) intervals over D (called concrete interval
structure). A concrete interval model is a pair M = ⟨I(D), V ⟩,
where V is a valuation function V : AP → 2I(D) that assigns
to every atomic proposition p ∈ AP the set of intervals V (p)
on which p holds.
The truth of a formula is deﬁned with respect to a concrete
interval model M and an interval [a, b] on it by structural
induction on formulae as follows:
• M, [a, b] ⊩ p iff [a, b] ∈ V (p), for each p ∈ AP;
• M, [a, b] ⊩ ¬ψ iff it is not the case that M, [a, b] ⊩ ψ;
• M, [a, b] ⊩ ϕ ∨ ψ iff M, [a, b] ⊩ ϕ or M, [a, b] ⊩ ψ;
• M, [a, b] ⊩ ⟨X⟩ψ iff there is an interval [c, d] such that
[a, b]RX[c, d] and M, [c, d] ⊩ ψ, for each modality ⟨X⟩.
In the case of modality ⟨A⟩, the last semantic clause can be
instantiated as follows:
M, [a, b] ⊩ ⟨A⟩ϕ iff there is c > b such that M, [b, c] ⊩ ϕ.
Formulae of HS can be interpreted in various interesting
classes of concrete interval models, depending on the speciﬁc
class of linear orders over which the models are built. As for
the class of (concrete interval models built over) ﬁnite linear
orders, the following small model theorem holds [16].
Theorem 1: Let ϕ be an A-formula. Then, ϕ is ﬁnitely
satisﬁable if and only if it is satisﬁable on a model whose
domain has cardinality strictly less than 2m · m + 1, where m
is the number of diamonds and boxes in ϕ.
The above result immediately provides a termination condition
that can be used to implement a fair procedure that exhaus-
tively searches for a model of size smaller than the bound.
33
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Abstract Semantics. As we already pointed out, METTEL2 is
ﬂexible enough to allow one to provide an alternative, abstract
version of the tableau system for A, based on a different,
but equivalent, set of semantic conditions. To this end, we
ﬁrst deﬁne a suitable class of interval frames for A, called
ﬁnite abstract interval A-structures, whose distinctive features
are expressed by a set of ﬁrst-order conditions, and then we
show that any such frame is isomorphic to a concrete interval
structure. It is worth noticing that such an abstract semantics,
that takes intervals as ﬁrst-class citizens, is quite common
in the ﬁeld of interval temporal logics, but not in those of
modal and point-based temporal logics. In AI, the coexistence
of concrete and abstract interval structures is well known since
the early stages of interval-based temporal reasoning. The
variety of binary relations between intervals in a linear order
was ﬁrst studied systematically by Allen, Hayes, and Fergu-
son [7][13][14], who explored their use in systems for time
management and planning. The work by Allen and colleagues
was based on the assumption that time can be represented as
a dense line, and that points are excluded from the semantics.
Both Allen and Hayes [17] and van Benthem [18] showed that
interval temporal reasoning can be formalized as an extension
of ﬁrst-order logic with equality with one or more relations.
As pointed out in [19], the characteristics of the proposed
formalizations depend on basic choices about fundamental
semantic parameters, such as the class of linear orders on
which the interval structure is based (all dense linear orders,
the rational numbers, etc.), and the set of interval relations
added to the ﬁrst-order language.
Given the dual nature of time intervals, that can be rep-
resented either as ordered pairs of time points over a linear
order or as suitably-constrained, ﬁrst-order individual objects,
representation theorems have an important role in interval
temporal logics. They can be described as follows (with respect
to a speciﬁc class of linear orders). Given an extension of ﬁrst-
order logic with a set of interval relations, such as, for instance,
{meets, during}, is there a set of axioms which constrain
abstract models in this signature to be isomorphic to concrete
ones? The problem can be alternatively stated as follows: can
we deﬁne an isomorphism into concrete models whose domain
is the set of intervals over the considered linear order and
whose relations are the concrete interval relations? A number
of representation theorems for interval logics can be found in
the literature, including van Benthem [18], who considers the
order of rational numbers and the interval relations during and
before; Allen and Hayes [17], which refer to unbounded, dense
linear orders, devoid of point intervals, and to the interval
relation meets only; Ladkin [20], who takes into consideration
point-based temporal structures with a 4-argument relation
that encodes the interval relation meets; Venema [21], who
considers dense linear orders with the interval relations starts
and ﬁnishes; Goranko, Montanari, and Sciavicco [22], which
deal with dense linear orders with the interval relations meets
and met-by; and Coetzee [23], who refers to dense linear orders
with the interval relations overlaps and meets.
In the present work, we focus our attention on the class
of ﬁnite linear orders and the interval relation meets (denoted
by RA), and we provide a representation theorem that forces
any ﬁnite, suitably-constrained Kripke frame ⟨W, RA⟩ to be
isomorphic to a ﬁnite, concrete interval structure. As a matter
of fact, some frame conditions will be explicitly forced by
introducing speciﬁc ﬁrst-order constrains (this is the case with
irreﬂexivity, antisymmetry, composition, and linearity); other
ones will be embedded into the deﬁnition of the tableau rules
(this is the case with ﬁniteness and connectedness).
Deﬁnition 2: Let W be a ﬁnite nonempty set and let RA ⊆
W × W be such that for all x, y ∈ W, x = y or xRAy or
xRAy or xRLy or xRLy, and so on (connectedness)1. The
pair S = ⟨W, RA⟩ is a ﬁnite and connected, abstract interval
A-structure if and only if the following conditions are satisﬁed:
1) ∀x¬(xRAx) (irreﬂexivity);
2) ∀x, y(xRAy ∧ yRAx → x = y) (antisymmetry);
3) ∀x, y(xRAy → ∃z(∀t(tRAz ↔ tRAx) ∧ ∀t(zRAt ↔
yRAt))) (composition);
4) ∀x, y, z, t((xRAy ∧ yRAt ∧ xRAz ∧ zRAt) → y = z)
(linearity).
The next representation theorem shows that the above condi-
tions sufﬁce to force any ﬁnite and connected, abstract interval
A-structure to be isomorphic to a ﬁnite concrete one. For
the sake of readability, we introduce the relation RA as an
additional component of concrete interval structures, that is,
we substitute S = ⟨I(D), RA⟩ for I(D), Proving that any ﬁnite,
concrete interval structure satisﬁes conditions 1–4, as well as
connectedness, is trivial; proving that any ﬁnite and connected,
abstract interval A-structure is isomorphic to a ﬁnite, concrete
interval structure is deﬁnitely more involved. Such a result
is formally stated by the following theorem, whose proof is
omitted for space reasons.
Theorem 2: Every ﬁnite and connected, abstract interval
A-structure is isomorphic to a ﬁnite, concrete interval structure.
Thanks to Theorem 2, we can interpret the logic A on ﬁnite and
connected, abstract interval A-structures. To this end, we adapt
the notion of model for A by deﬁning it as a pair M = ⟨S, V ⟩,
where S is a ﬁnite and connected, abstract interval A-structure
and V : AP 7→ 2W . Moreover, we accordingly revise the
semantic clause for ⟨A⟩ as follows:
M, i ⊩ ⟨A⟩ψ iff there is j such that iRAj and M, j ⊩ ψ.
In the following, we will show that one actually needs to
explicitly encode conditions 1–4 only. As for ﬁniteness, it
can be forced by imposing a suitable cardinality constraint,
that is, by providing an interval counterpart (that applies to
S) of the constraint coming from Theorem 1 (that applies
to concrete models). As for connectedness, it is guaraanteed
by construction: all generated world are directly or indirectly
connected to the initial one (no incomparable world is ever
introduced).
III.
AUTOMATED SYNTHESIS OF TABLEAU CALCULI AND
METTEL2
Tableau reasoning methods are powerful tools to reason
about logical formalisms. They have been extensively used
to develop decision procedures for description and modal
logics [24][25], as well as for intuitionistic logics, condi-
tional logics, metric and topological logics, and hybrid logics.
1In [17], Allen and Hayes showed that all Allen’s relations are ﬁrst-order
deﬁnable in terms of the interval relation RA (meets) only. As a matter of fact,
the proof assumes the temporal domain to be dense and unbounded; however,
it can be shown that such an assumption is not necessary.
34
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Schmidt and Tishkovsky [26] devise a method for automati-
cally generating tableau calculi from a ﬁrst-order speciﬁcation
of the formal semantics of a logic. The idea is that of turning
such a speciﬁcation into a set of inference rules giving rise to
a sound, complete, and terminating deduction calculus for the
logic, provided that the logic has the ﬁnite model property.
The tableau synthesis method works as follows [26]. The
user deﬁnes the formal semantics of the given logic in a many-
sorted ﬁrst-order language so that certain well-deﬁnedness
conditions hold. The semantic speciﬁcation of the logic is
then automatically reduced to Skolemised implicational forms,
which are subsequently transformed into tableau inference
rules. Combined with a set of default closure and equality
rules, the generated rules provide a sound and complete
calculus for the logic. Under certain conditions, the generated
set of rules can be further reﬁned [27]. If the logic has the ﬁnite
model property, the generated calculus can be automatically
turned into a terminating calculus by adding a suitable blocking
mechanism.
The tableau prover generator METTEL2 [11] has been
implemented to complement the theoretical tableau synthesis
framework given in [26]. METTEL2 produces Java code of
a tableau prover from speciﬁcations of a logical syntax and
a tableau calculus for a given logic. It aims at providing an
easy-to-use system for non-technical users and it allows tech-
nical users to improve/extend the implementation of generated
provers. METTEL2 has been successfully employed to produce
tableau provers for modal logics, description logics, epistemic
logics, and temporal logics with cardinality constraints. It is
worth pointing out that prior implementations of systems for
automated synthesis of tableau calculi already existed. Among
them, we would like to mention LoTREC [9], [10] and The
Tableau Work Bench (TWB) [28], which are the prover engi-
neering platforms most closely related to METTEL2. Although
METTEL2 does not give the user the same possibilities for
programming and controlling derivations as these systems, its
speciﬁcation language is more expressive. As an example,
Skolem terms are allowed both in premises and conclusions
of rules. The expressive speciﬁcation language also allows one
to specify the syntax of arbitrary propositional logics and it
makes METTEL2 able to deal with the interval temporal logic
A (which we focus on in this paper) and possibly with most
of the other fragments of HS.
IV.
TABLEAU PROVERS FOR A
In this section, we describe the speciﬁcations of two tableau
provers for the logic A, which are based on the concrete and
the abstract semantics, respectively.
The steps for obtaining the speciﬁcations are common to
both provers. They can be summarized as follows. First, we
apply the tableau synthesis framework [26] to the semantics
of A. Since both concrete and abstract semantics for A consist
of connective deﬁnitions and the background theory, the well-
deﬁnedness conditions given in [26] are trivially fulﬁlled for
both of them. Therefore, the generated calculi are automat-
ically sound and (constructively) complete for the logic A.
Next, we apply the atomic reﬁnement [27] to the rules of the
obtained calculi by moving negated atomic formulae in the
rule conclusions to its premises while changing their signs.
While retaining soundness and (constructive) completeness of
the calculi, this reduces branching factor of the rules and makes
tableau algorithms based on the calculi more efﬁcient. Finally,
we extend the tableau languages with additional constructs
which replace the ﬁrst-order predicates in the original calculi.
This further simpliﬁes the calculi, making them more readable
and speciﬁable in METTEL2.
The tableau speciﬁcations for the concrete and abstract
semantics of A in METTEL2 speciﬁcation language are listed
in Fig. 2. The symbol / separates premises of a rule from its
conclusions and the symbol || separates branches of the rule.
A priority value is assigned to each rule with the keyword
priority. The less the value the more eagerly the rule is applied
during derivation.
The tableau speciﬁcation for the concrete semantics of A
is based on two logical sorts: the sort of points and the sort
of logical formulae. Disjunction p ∨ q is represented in the
speciﬁcation as p|q, negation ¬p is represented as ~p, and <A>
represents the modal operator ⟨A⟩. Constructs which extend
the language of the logic are the ordering predicate < on the
sort of points (a < b is represented as {a<b}), the equality
predicate ({{a=b}} stands for a = b), a Skolem function f, to
generate new terms of the sort of points, and expressions of the
form [a, b] : ϕ, which are formulae ϕ of A labeled by intervals
[a, b], where a and b are points. The rules at lines 1–8 of the
concrete tableau enforce < to be a strict linear ordering. The
rule at line 10 ensures that all the intervals are not degenerative.
The remaining rules are standard rules for modal-like logics.
It is worth pointing out that the rules at lines 1–8 and at line
15 are obtained by atomic reﬁnement from the rules generated
by the tableau synthesis framework. As an example, the rule
[a,b]:~(<A>p) {b < c} / [b,c]:~p is obtained by the reﬁnement
from the generated rule [a,b]:~(<A>p) / ~{b < c} || [b,c]:~p. As
a consequence of the results in [27], the calculus is sound and
(constructively) complete for the standard interval semantics
of the fragment A.
The tableau speciﬁcation for the abstract semantics is also
based on two sorts: the sort of intervals and the sort of logical
formulae. The additional constructs are two Skolem functions
f and g, the equality predicate, and a binary relational symbol
R on the sort of intervals (for the sake of simplicity, we use
R for RA). The tableau operates on labeled formulae @iϕ
(@i p in the speciﬁcation), where ϕ is a formula of A and i
is an interval. The lines 1–7 of the abstract tableau deﬁne the
theory of the relation R and correspond to the conditions 1–4 in
Deﬁnition 2. While the rest of the rules are similar to standard
rules for modal-like logics and they can be speciﬁed in tableau
development platforms like LoTREC and TWB, the four rules
listed at lines 3–6 are special. All the four rules make use of
the same Skolem function g; moreover, the rules at lines 3
and 5 have the Skolem function g in their premises. Allowing
speciﬁcations of tableau rules where Skolem functions occur
in the rule premises is a distinctive feature of METTEL2
prover generator, which demonstrate the expressiveness of the
METTEL2 speciﬁcation language. Similarly to the case of the
concrete tableau, the rules at lines 1–7 and at line 13 are
obtained by atomic reﬁnement. Therefore, the calculus is sound
and (constructively) complete for the relational semantics of
the fragment A.
Termination of both provers is achieved by a modiﬁcation
35
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

1
{a < a} / priority 0;
2
{a < b} {b < c} / {a < c} priority 3;
3
{a < b} {c < d} /
4
{{c = a}} || {c < a} || {a < c} {c < b} ||
5
{{c = b}} || {b < c} priority 7;
6
{a < b} {c < d} /
7
{{d = a}} || {d < a} || {a < d} {d < b} ||
8
{{d = b}} || {b < d} priority 7;
9
[a,b]:p [a,b]:~p / priority 0;
10
[a,b]:p / {a < b} priority 1;
11
[a,b]:~(~p) / [a,b]:p priority 1;
12
[a,b]:(p|q) / [a,b]:p || [a,b]:q priority 5;
13
[a,b]:~(p|q) / [a,b]:~p [a,b]:~q priority 3;
14
[a,b]:<A>p / [b,f(b,p)]:p priority 9;
15
[a,b]:~(<A>p) {b < c} / [b,c]:~p priority 4;
1
R i i / priority 0;
2
R i j R j i / priority 0;
3
R i j R k g(i,j) / R k i priority 4;
4
R i j R k i / R k g(i,j) priority 10;
5
R i j R g(i,j) k / R j k priority 4;
6
R i j R j k / R g(i,j) k priority 10;
7
R i j R j k R i l R l k / {{ j = l }} priority 6;
8
@i p @i ~p / priority 0;
9
@i ~(~p) / @i p priority 1;
10
@i (p|q) / @i p || @i q priority 5;
11
@i ~(p|q) / @i ~p @i ~q priority 3;
12
@i <A>p / R i f(i,p) @f(i,p) p priority 9;
13
@i ~(<A>p) R i j / @j ~p priority 4;
Figure 2.
Tableau speciﬁcations for concrete (left) and abstract (right) semantics.
to the generated Java code to ignore branches which exceed
the allowed limit of points or intervals (see Theorem 1).
V.
TESTING AND RESULTS
We have tested our implementations against the same
benchmark of problems used in [2], although the absolute
speed results cannot be immediately compared since the two
experiments used a different hardware. These problems are
divided into two classes. First, we tested the scalability of the
implementation with respect to a set of combinatorial problems
of increasing complexity (COMBINATORICS), where the n-
th combinatorial problem is deﬁned as the problem of ﬁnding
a model for a formula that contains n conjuncts, each one
of the form ⟨A⟩pi (0 ≤ i ≤ n), plus
n(n+1)
2
conjuncts
of the form [A]¬(pi ∧ pj), with i ̸= j. (Notice that there
are n(n + 1) different conjuncts of the pointed out form.
However, a conjunct with indices i, j is equivalent to another
one with indices j, i. This is why
n(n+1)
2
is posed.) Then,
we considered the set of 72 purely randomized formulas
used in [29] to evaluate an evolutionary algorithm for the
same fragment (RANDOMIZED). Table I summarizes the
outcomes of the experiments. For each class of problems,
the corresponding table shows, for each instance n, the time
(in milliseconds) necessary to solve the problem taking into
account, when appropriate, the speciﬁc policy that has been
used. In particular, the concrete version has been run under
both the ‘breadth ﬁrst’ and the ‘depth ﬁrst’ (left branch ﬁrst)
policies. A time-out of 1 minute was used to stop instances
running for too long.
At ﬁrst sight, the relational (abstract) version of the tableau
system looks more (time) efﬁcient than the standard (concrete)
one. However, the number of instances that generated a mem-
ory error indicates that the latter uses less memory, which
can be considered an interesting result on its own. All the
experiments were executed on Java 1.7.0 25 OpenJDK 64-Bit
Server VM under the Java heap size limit of 3Gb on a hardware
based on Intel R⃝ CoreTM i7-880 CPU (3.07GHz, 8Mb), with
a total memory of 8Gb (1333MHz), under the 64-bit Fedora
Linux 17 operating system.
VI.
CONCLUSIONS AND FUTURE WORK
In this paper, we illustrated the outcomes of a ﬁrst ex-
periment in automated generation of tableau-based decision
procedures for interval temporal logics using the automatic
prover generator METTEL2. Thanks to its expressive power
and ﬂexibility, we explored and contrasted two alternative im-
plementations: a concrete and an abstract one (at the best of our
knowledge, this is the ﬁrst tableau-based decision procedure
for interval temporal logics based on an abstract frame seman-
tics). Even though the performance of the developed systems is
not particularly exciting, the use of generators like METTEL2
provides a general and effective way of implementing tableau
systems for interval temporal logics. We believe it possible
to make the concrete tableau system more efﬁcient, provided
that we represent the linear order by a list of points. This
would remedy the exponential blow-up of inequality formulae
in the tableau derivation, but, unfortunately, lists cannot be
represented in the language of METTEL2 yet. The addition of
such a feature to METTEL2 and the analysis of its actual impact
are left for future work. As for the abstract tableau system, in
principle, it allows us to compare alternative, but equivalent,
formulations of the ﬁrst-order constraints for a given fragment.
Last but not least, we are going to validate the proposed
approach on other, more expressive HS fragments.
ACKNOWLEDGEMENTS
The authors acknowledge the support from the Spanish
fellowship program ‘Ramon y Cajal’ RYC-2011-07821 (G.
Sciavicco), the projects Processes and Modal Logics (project
nr. 100048021) and Decidability and Expressiveness for Inter-
val Temporal Logics (project nr. 130802-051) of the Icelandic
Research Fund (D. Della Monica), the Italian GNCS project
Automata, games, and temporal logics for veriﬁcation and syn-
thesis of controllers in safety-critical systems (A. Montanari),
and the research grant EP/H043748/1 of the UK EPSRC (D.
Tishkovsky).
REFERENCES
[1]
D. Bresolin, V. Goranko, A. Montanari, and P. Sala, “Tableaux for
logics of subinterval structures over dense orderings,” J. of Logic and
Computation, vol. 20, no. 1, 2010, pp. 133–166.
[2]
D. Bresolin, D. Della Monica, A. Montanari, and G. Sciavicco, “A
tableau system for Right Propositional Neighborhood Logic over ﬁnite
linear orders: an implementation,” in Proc. of the 22nd TABLEAUX,
ser. LNCS, vol. 8123, 2013, pp. 74–80.
[3]
V. Goranko, A. Montanari, and G. Sciavicco, “A road map of interval
temporal logics and duration calculi,” J. of Applied Non-Classical
Logics, vol. 14, no. 1–2, 2004, pp. 9–54.
36
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Table I.
EXPERIMENTAL RESULTS (IN MILLISECONDS; ‘-’: “OUT OF TIME”; ‘M’: “OUT OF MEMORY”; ‘Y’: “SATISFIABLE”; ‘N’: “UNSATISFIABLE”).
COMBINATORICS
CON
ABS
n
DF
BF
sat
1
10
10
0
y
2
60
100
0
y
3
270
420
10
y
4
920
1360
30
y
5 2930 4010
70
y
CON
ABS
n
DF
BF
sat
6
7890
9850
150
y
7
19420 23670
300
y
8
47220 51220
560
y
9
-
-
1000
y
10
-
-
1790
y
CON
ABS
n DF BF
sat
11
-
-
3440
y
12
-
-
4660
y
13
-
-
7600
y
14
-
-
11560
y
15
-
-
17170
y
CON
ABS
n DF BF
sat
16
-
-
25160
y
17
-
-
35610
y
18
-
-
50740
y
19
-
-
-
-
20
-
-
-
-
RANDOMIZED
CON
ABS
n DF BF
sat
1
-
-
-
-
2
0
0
0
y
3
10
0
0
y
4
0
10
0
y
5
-
-
-
-
6
0
10
0
y
7
-
-
-
-
8
10
10
0
y
9
20
20
10
y
10 10
10
0
y
11
-
-
-
-
12 10
10
0
y
13 10
10
0
y
14 10
10
0
y
15
-
-
-
-
16 10
20
0
y
17 30
50
10
y
18
-
-
-
-
CON
ABS
n DF BF
sat
19 30
50
0
y
20
-
-
-
-
21 20
50
10
y
22
-
-
-
-
23
-
-
-
-
24 20
20
0
y
25
-
-
-
-
26
-
-
-
-
27
-
-
-
-
28
-
-
-
-
29
-
-
-
-
30
-
-
-
-
31 10
10
10
n
32
-
-
-
-
33
-
-
M
-
34 60
70
10
y
35
-
-
-
-
36
-
-
-
-
CON
ABS
n DF BF
sat
37
-
-
M
-
38
-
-
M
-
39
-
-
M
-
40
-
-
M
-
41
-
-
-
-
42
-
-
-
-
43
-
-
-
-
44
-
-
-
-
45
-
-
M
-
46
-
-
-
-
47
-
-
-
-
48
-
-
-
-
49
-
-
-
-
50
-
-
M
-
51
-
-
M
-
52
-
-
-
-
53
-
-
M
-
54
-
-
-
-
CON
ABS
n DF BF
sat
55
-
-
M
-
56
-
-
M
-
57
-
-
M
-
58
-
-
-
-
59
-
-
M
-
60
-
-
M
-
61
-
M
M
-
62
-
-
-
-
63 M
-
-
-
64
-
-
-
-
65
-
-
M
-
66
-
-
-
-
67 M
-
-
-
68
-
-
-
-
69 M
-
-
-
70
-
-
M
-
71 M
M
M
-
72
-
-
-
-
[4]
I. Pratt-Hartmann, “Temporal prepositions and their logic,” Artiﬁcial
Intelligence, vol. 166, no. 1-2, 2005, pp. 1–36.
[5]
B. Moszkowski, “Reasoning about digital circuits,” Tech. Rep. STAN-
CS-83-970, Dept. of Computer Science, Stanford University, Stanford,
CA, 1983.
[6]
J. Halpern and Y. Shoham, “A propositional modal logic of time
intervals,” J. of the ACM, vol. 38, no. 4, 1991, pp. 935–962.
[7]
J. Allen, “Maintaining knowledge about temporal intervals,” Commu-
nications of the ACM, vol. 26, no. 11, 1983, pp. 832–843.
[8]
D. Bresolin, D. Della Monica, A. Montanari, P. Sala, and G. Sciavicco,
“Interval temporal logics over ﬁnite linear orders: the complete picture,”
in Proc. of the 20th ECAI, 2012, pp. 199–204.
[9]
F. del Cerro et al., “LoTREC: the generic tableau prover for modal and
description logics,” in Proc. of the 1st IJCAR, ser. LNCS, vol. 2083.
Springer, 2001, pp. 453–458.
[10]
O. Gasquet, A. Herzig, D. Longin, and M. Sahade, “LoTREC: Logical
Tableaux Research Engineering Companion,” in Proc. of the 14th
TABLEAUX, ser. LNCS, vol. 3702, 2005, pp. 318–322.
[11]
D. Tishkovsky, R. A. Schmidt, and M. Khodadadi, “The tableau prover
generator METTEL2,” in Proc. of the 13th JELIA, 2012, pp. 492–495.
[12]
M. Khodadadi, R. A. Schmidt, D. Tishkovsky, and M. Zawidzki,
“Terminating tableau calculi for modal logic K with global counting op-
erators,” 2012, technical report. Available at http://www.mettel-prover.
org/papers/KEn12.pdf.
[13]
P. J. Hayes and J. F. Allen, “Short time periods,” in Proc. of the 10th
IJCAI, Milano, Italy, 1987, pp. 981–983.
[14]
J. F. Allen and G. Ferguson, “Actions and events in interval temporal
logic,” J. Log. Comput., vol. 4, no. 5, 1994, pp. 531–579.
[15]
P. Blackburn, M. de Rijke, and Y. Venema, Modal Logic.
Cambridge
University Press, 2002.
[16]
D. Bresolin, A. Montanari, and G. Sciavicco, “An optimal decision pro-
cedure for Right Propositional Neighborhood Logic,” J. of Automated
Reasoning, vol. 38, no. 1-3, 2007, pp. 173–199.
[17]
J. F. Allen and P. J. Hayes, “A common-sense theory of time,” in Proc.
of the 9th IJCAI, Los Angeles, CA, USA, 1985, pp. 528–531.
[18]
J. Benthem, The Logic of Time, 2nd ed.
Kluwer Academic Press,
1991.
[19]
W. Conradie and G. Sciavicco, “On the expressive power of ﬁrst order
logic extended with allen ˜Os relations in the strict case,” in Proc. of the
14th CAEPIA, ser. LNAI, vol. 7023.
Springer, 2011, pp. 173–182.
[20]
P. Ladkin, “The logic of time representation,” Ph.D. dissertation, Uni-
versity of California, Berkeley, 1987.
[21]
Y. Venema, “A modal logic for chopping intervals,” Journal of Logic
and Computation, vol. 1, no. 4, 1991, pp. 453–476.
[22]
V. Goranko, A. Montanari, and G. Sciavicco, “Propositional interval
neighborhood temporal logics,” J. of Universal Computer Science,
vol. 9, no. 9, 2003, pp. 1137–1167.
[23]
C. J. Coetzee, “Representation theorems for classes of interval struc-
tures,” Master’s thesis, Department of Mathematics, University of
Johannesburg, 2009.
[24]
F. Baader and U. Sattler, “An overview of tableau algorithms for
description logics,” Studia Logica, vol. 69, no. 1, 2001, pp. 5–40.
[25]
R. Gor´e, “Tableau methods for modal and temporal logics,” in Hand-
book of Tableau Methods.
Springer Netherlands, 1999, pp. 297–396.
[26]
R. A. Schmidt and D. Tishkovsky, “Automated synthesis of tableau
calculi,” Logical Methods in Computer Science, vol. 7, no. 2:6, 2011,
pp. 1–32. [Online]. Available: http://arxiv.org/abs/1104.4131
[27]
D. Tishkovsky and R. A. Schmidt, “Reﬁnement in the tableau synthesis
framework,” CoRR, vol. abs/1305.3131, 2013.
[28]
P. Abate and R. Gor´e, “The Tableau Workbench,” Electronic Notes in
Theoretical Computer Science, vol. 231, 2009, pp. 55 – 67.
[29]
D. Bresolin, F. Jim´enez, G. S´anchez, and G. Sciavicco, “Finite satis-
ﬁability of propositional interval logic formulas with multi-objective
evolutionary algorithms,” in Proc. of the 12th FOGA, 2013, pp. 25–36.
37
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-344-5
COMPUTATION TOOLS 2014 : The Fifth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

