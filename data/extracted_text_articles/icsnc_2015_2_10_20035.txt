Adaptive Bitstream Prioritization for Dual TCP/UDP Streaming of HD Video
Arul Dhamodaran, Mohammed Sinky, and Ben Lee
School of Electrical and Computer Science
Oregon State University
Corvallis, Oregon 97331
Email: {dhamodar, sinky, benl}@eecs.orst.edu
Abstract—Flexible Dual-TCP/UDP Streaming Protocol with Bit-
stream Prioritization (FDSP-BP) is a new method for streaming
H.264-encoded High-deﬁnition (HD) video over wireless networks.
This paper presents a novel technique to adaptively modify
the Bitstream prioritization (BP) parameter based on network
conditions. This technique selects the maximum BP value that
satisﬁes the Transmission Control Protocol (TCP) rebuffering and
User Datagram Protocol (UDP) packet loss rate constraints for
each substream. This is achieved by passively estimating the UDP
packet loss ratio and TCP rebuffering time on the sender side
based on parameters, such as TCP Roundtrip Time (RTT), queue
dispersal rate, peak delay, etc. Our simulation results show that
FDSP with Adaptive-BP is able to signiﬁcantly outperform FDSP-
BP with static BP values and pure-TCP in terms of rebuffering
time, and FDSP-BP with ﬁxed BP values and pure-UDP in
terms of packet loss. The end result is a better overall viewing
experience during network congestion.
Keywords–Bitstream Prioritization; HD Video Streaming; TCP;
UDP.
I.
INTRODUCTION
HD video streaming applications can be broadly classiﬁed
into Client-Server and Peer-to-Peer streaming services, which
rely on either TCP or UDP protocol. Popular Client-Server
streaming applications, such as Apple’s Hypertext Transfer
Protocol (HTTP) Live Streaming (HLS) [1] and Microsoft’s
Smooth Streaming [2], use HTTP-based streaming techniques
that rely on TCP.
TCP is a reliable protocol and thus it guarantees perfect
video frame quality. However, when network congestion oc-
curs, TCP retransmissions cause delay leading to (re)buffering.
A signiﬁcant amount of work has been done to reduce the
delay caused by TCP [3][4], but this issue still remains a major
problem for video streaming. Figure 1 illustrates the effect of
rebuffering caused by TCP packet delay, which occurs when
TCP packets arrive at the receiver after the playout deadline.
This delay causes the receiver to freeze frame and wait for
enough TCP packets to arrive before resuming playback. In
contrast, UDP minimizes delay but does not guarantee packet
delivery. These lost packets, in turn, cause errors that propagate
to subsequent frames. Figure 2 illustrates the detrimental
effects of UDP packet loss on video quality.
Both TCP rebuffering and UDP packet loss affect the Qual-
ity of Experience (QoE) perceived by users. In our previous
work, a new streaming technique called FDSP was proposed
to exploit the beneﬁts of both TCP and UDP protocols for
streaming H.264 HD videos [5]. This is done by sending
packets containing important information, such as Sequence
Parameter Set (SPS), Picture Parameter Set (PPS), and slice
Rebuffering due to TCP late packets 
Playback
t
Rebuffering
Late TCP packets
Figure 1. Rebuffering due to late TCP packets.
Frame distortion due to UDP packet loss 
Error propagation
Playback
t
UDP packet loss
Figure 2. Frame distortion due to UDP packet loss. Note that packet loss
also causes frame distortion in subsequent frames due to error propagation.
headers via TCP for guaranteed delivery and the rest of slice
data packets via UDP. By utilizing both TCP and UDP streams,
FDSP adds reliability to UDP while reducing the latency
caused by TCP. FDSP was enhanced in [6] with the goal of
reducing the impact of UDP packet loss during video stream
using Bitstream Prioritization (BP). This method statically
chooses the BP metric to classify select packets from an H.264
bitstream as high priority, which are then transported over
TCP for guaranteed delivery. Our analysis of the BP parameter
in [6] showed that an increase in BP resulted in a monotonic
decrease in packet loss. However, an increase BP also increases
TCP rebuffering time and instances due to the increase in
the number of packets that are sent over TCP. Therefore, this
paper proposes an Adaptive-BP technique to further improve
the effectiveness of FDSP-BP based video streaming. This
is achieved by dynamically adjusting the BP parameter in
response to network conditions as well as QoE thresholds with
the goal of minimizing both TCP rebuffering and UDP packet
loss. Our simulation study shows that the proposed Adaptive-
BP technique signiﬁcantly reduces the TCP rebuffering time
and UDP packet loss rate as compared to pure-TCP, pure-UDP,
and static FDSP-BP streaming.
This paper is organized as follows. Section II discusses
other TCP and UDP streaming techniques. An overview of the
35
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

FDSP-BP method is shown in Section III. Section IV presents
the proposed Adaptive BP technique. Sections V goes over
the experimental setup and Section VI discusses the results of
Adaptive BP as compared to that of FDSP BP, pure-UDP and
pure-TCP. Finally, Section VII concludes the paper.
II.
RELATED WORK
UDP is generally accepted to be more suitable than TCP
for real-time video streaming since it offers low end-to-end
delay for video playout [7]. UDP performance can be further
improved by employing Error Concealment (EC) techniques
to reduce the impact of data loss [8]. However, if important
data, such as SPS, PPS, and slice headers are lost, the
decoder simply cannot reconstruct the video even with the
aid of EC. UDP packet loss can be tolerated by employing
Unequal Error Protection (UEP), which prioritizes important
data [7][9]. More advanced UEP methods incorporate Forward
Error Correction (FEC) [9]. These methods are orthogonal to
the proposed FDSP with Adaptive-BP technique, and thus, they
can be used together.
Despite the latency issue with TCP, a signiﬁcant fraction
of commercial video streaming applications are based on
TCP [10]. TCP provides guaranteed service so the transmit-
ted packets are always preserved. Nevertheless, TCP’s re-
transmission and rate control mechanisms incur delay, which
can cause packets to arrive after their playout deadline. Much
work has been done to minimize TCP rebuffering. Once such
example is Progressive Download, which is widely used in
HTTP streaming services such as Apple’s HTTP live stream-
ing (HLS) [1], HTTP Dynamic Streaming (HDS) [11], and
Microsoft Smooth Streaming [2]. These techniques employ
adaptive bitrate throttling based on available bandwidth to
reduce TCP rebufﬁng.
Another approach to ensure proper delivery of important
data to the destination is bitstream prioritization. In [12],
a cross-layer packetization and retransmission strategy is
proposed, where a video bitstream is prioritized based on
distortion impact, delay constraints, and changing channel
conditions. However, these parameters are heavily dependent
on accurate feedback information, which incurs additional
overhead on the bandwidth requirement. A modiﬁed slicing
scheme that provides in-frame packet prioritization is proposed
in [13], which exploits the unequal importance of different re-
gions within a frame. These prioritization techniques, however,
do not consider SPS, PPS, and slice header information for
prioritization and hence are prone to slice and frame losses.
Furthermore, authors in [12] do not consider H.264 videos,
while authors in [13] employ custom modiﬁcations to H.264
slicing making it unsuitable for any H.264-encoded videos.
This paper expands the scope of our prior research on
FDSP-BP [6] (see Section III) by dynamically modifying
the bitstream prioritization (BP) parameter. The proposed
Adaptive-BP technique passively estimates the network con-
ditions and adaptively modiﬁes the BP parameter to minimize
TCP rebuffering time and UDP packet loss.
III.
FDSP OVERVIEW
This section provides a brief overview of the underlying
details of FDSP for completeness (see [5] and [6] for details).
Basic FDSP architecture is shown in Figure 3 [5]. Here,
the FDSP sender consists of ﬁve main components: (1) H.264
H.264&
Syntax&
Parser&&
H.264&
Video&
RTP&
Packe9zer&
DEMUX&
TCP&
UDP&
SPS,&PPS,&SH&&&
Priori9zed&Data&
Rest&of&data&
Dual&Tunneling&
TCP&
UDP&
Dual&Tunneling&
Network&
SPS,&PPS,&SH&&&
Priori9zed&Data&
Rest&of&data&
H.264&&
Decoder&
Display&
Sender 
Receiver 
BP&Selec9on&
Packet/
Slice&
UDP Buffer 
Merge&
Packets&
MUX&
Figure 3. Flexible Dual-tunnel Streaming Protocol (FDSP) Architecture [5]
augmented with modiﬁed MUX and DEMUX modules for FDSP-BP.
SPS PPS
IDR Slice
Slice Slice
Slice
PPS
Slice
hdr
Payload
hdr
Payload
hdr
Payload
hdr
Payload
hdr
Payload
1450 B
< 1450 B
new slice
ﬁrst slice
NAL Units
RTP Packets
. . .
Figure 4. IETF RFC 6184 RTP packetization of H.264 NAL Units modiﬁed
to allow parameter set NAL Units to be grouped with VCL NAL Units
(slices). RTP packets that hold H.264 slice headers are shown in orange. [6]
Syntax Parser, (2) RTP Packetizer, (3) Demultiplexer (DE-
MUX), (4) the BP selection module, and (5) Dual Tunneling
(UDP+TCP). The H.264 Syntax Parser is responsible for
identifying SPS, PPS, and slice headers (SH). It also works
with the RTP Packetizer to generate the RTP payload format
containing Network Abstraction Layer (NAL) units for H.264
video [14] as illustrated in Figure 4 . This allows SPS and PPS
information to be combined with the slices. The Demultiplexer
splits the RTP packets into the TCP or UDP stream based
on the packet contents. The BP Selection module sets the BP
parameter. Dual Tunneling is employed to keep both TCP and
UDP sessions active during video streaming.
The FDSP receiver comprises of three modules: (1) Dual
Tunneling (TCP+UDP), (2) Multiplexer (MUX), and (3) H.264
decoder. The Dual Tunneling is employed to receive the TCP
and UDP packets. The Multiplexer is responsible for rear-
ranging the packets and discarding late UDP packets. It also
combines the TCP and UDP packets based on the timestamp
information to reassemble the frames.
The FDSP sender ﬁrst segments a video into 10 sec.
substreams, as done in HLS [1]. Then, all the TCP packets
containing SPS, PPS, and slice headers are sent prior to
sending UDP packets containing slice data. Thus, the receiver
must wait for its respective TCP data to arrive before playback.
To avoid frequent rebuffering caused by TCP packet delay,
the transmission of UDP packets for the current substream is
overlapped with the transmission of TCP packets for the next
substream.
A. FDSP-BP
FDSP-BP assigns the BP parameter statically to further
reduce packet loss by sending additional high priority data,
such as I-frame packets, over TCP. FDSP-BP can be applied
to any types of frames, or even to all the frame types. However,
BP is only applied to packets containing I-frame data because
they serve as reference frames and any loss in I-frame data
leads to error propagation to the entire Group Of Picture (GOP)
sequence.
36
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

H.264 GOP 
sequence 
… 
I
B
P
B
I
Slice headers - covered by default FDSP protection (BP = 0%)
Slice data to be prioritized (BP = 25%)
Figure 5. BP applied to a 4-slice H.264 video sequence. When BP is
applied, packets are selected sequentially from the start of the frame.
H.264 GOP 
sequence 
… 
I
B
P
B
I
Slice headers - covered by default FDSP protection (BP = 0%)
Slice data to be prioritized (BP = 25%)
Figure 5. BP applied to a 4-slice H.264 video sequence. When BP is
applied, packets are selected sequentially from the start of the frame.
1: procedure ADAPTIVE-BP(i)
2: BP_ﬂag = 0
3: NBP_ﬂag = 0
4:
for each BP do; where BP = 0.0, 0.1, 0.2, ..., 1.0
5:
Calculate E[RBT T CP
i
]BP and E[PLRUDP
i
]BP
6:
end for
7:
for each BP do; where BP = 0.0, 0.1, 0.2, ..., 1.0
8:
if
E[RBT T CP
i
]BP

RBTth
&&
E[PLRUDP
i
]BP  PLRth then
9:
BPi = BP
10:
BP_ﬂag = 1
11:
end if
12:
end for
13:
if BP_ﬂag == 0 then
14:
BPi = 1.0
15:
for each BP do; where BP = 0.0, 0.1, 0.2, ..., 1.0
16:
if E[PLRUDP
i
]BP  PLRth && BPi > BP
then
17:
BPi = BP
18:
NBP_Flag = 1
19:
end if
20:
end for
21:
end if
22:
if BP_ﬂag == 0 && NBP_ﬂag == 0 then
23:
BPi = 0.0
24:
end if
25: return BPi
26: end procedure
Figure 6. Adaptive-BP algorithm.
they serve as reference frames and any loss in I-frame data
leads to error propagation to the entire Group Of Picture (GOP)
sequence.
Figure 5 illustrates how the BP parameter is employed
to prioritize the I-frame packets. If the BP parameter is set
to zero, then it defaults to FDSP and SPS, PPS, and slice
headers are the only packets that will be sent over TCP. If BP
is 25% then a quarter of all I-frame packets would be sent via
TCP. Increasing BP results in increasing the number of TCP
packets, thus increasing the probability of TCP rebuffering, but
it reduces UDP packet loss and error propagation due to the
proportional reduction in the number of UDP packets.
IV.
ADAPTIVE BITSTREAM PRIORITIZATION
The procedure for the proposed Adaptive-BP algorithm is
shown in Algorithm 6, which consists of four parts. In the
ﬁrst part (lines 4-6), the estimated TCP rebuffering time for
substream i, E[RBT T CP
i
], and the estimated UDP packet
loss rate for substream i, E[PLRUDP
i
], are calculated for
each BP, where BP = 0%, 10%, ..., 100%, for i ≥ 2. BP
increments of 10% was chosen based on our experiments,
which showed that it provides the right balance between
computational requirement and its effect on QoE. Note that
Algorithm 6 is executed after the completion of transmission
of the TCP portion for substream i − 1 so that information on
rebuffering time and packet loss can be gathered. The calcula-
tions of E[RBT T CP
i
] and E[PLRUDP
i
] will be discussed in
Secs. IV-A and IV-B, respectively. By default, the BP value
for the ﬁrst substream, BP1, is set to 100%, which is done to
reduce the possibility of UDP packet loss in case the network
is congested when streaming starts.
In
the
second
part
(lines
7-12),
a
check
is
made
for each BP value to determine if E[RBT T CP
i
]BP and
E[PLRUDP
i
]BP are less than equal to the TCP rebuffering
time threshold, RBTth, and the UDP Packet Loss Rate (PLR)
threshold, PLRth, respectively, which are the adjustable QoE
thresholds. If both these conditions are satisﬁed, then the BP
value for the ith substream, BPi, is set to BP and BP_ﬂag is
set to 1 to indicate that both threshold conditions were satisﬁed
and BPi has been set. Since this is done for all the BP values
starting with BP equal to 0%, the for-loop will select the
highest value of BP that satisﬁes both QoE thresholds. This
is because packet loss is more detrimental to video quality
as it also leads to error propagation. Therefore, the proposed
Adaptive-BP algorithm is more sensitive to packet loss over
rebuffering.
The third part of the algorithm (lines 13-21) is executed
only when none of the BP values satisfy both QoE require-
ments. If so, BPi is initially set to 100% and then a check is
made to determine if E[PLRUDP
i
] satisﬁes PLRth and BPi
is greater than BP for each BP value. For each iteration, if
both of these conditions are satisﬁed, then BPi is set to BP
and the NBP_ﬂag is set 1 to indicate that PLRth was satisﬁed
and BPi was set. Note that this for-loop will select the lowest
value of BP that satisﬁes these two conditions. This is because
as BP increases within the range of acceptable BP values,
the improvement in video quality is marginal compared to the
increase in rebuffering time.
Finally, the fourth part of the algorithm (lines 22-24) is
executed if none of the BP values satisfy any of the QoE
thresholds. In this case, the visual quality of a given substream
is considered bad because the PLRth constraint cannot be met
resulting in excessive frame distortion and error propagation.
In addition, since none of the BP values satisfy PLRth, there
is no reason to increase BP as this will increase rebuffering
time. Therefore BPi is set to 0% to minimize TCP rebuffering
time.
A. Estimating TCP Rebuffering Time
E[RBT T CP
i
] for i ≥ 2 can be calculated as
E[RBT T CP
i
] =
⇢E[T T CP
i
] − Pi,
if E[T T CP
i
] > Pi
0
otherwise,
(1)
where E[T T CP
i
] represents the estimated TCP transmission
time for substream i and Pi is the playout time for the ith
Figure 6. Adaptive-BP algorithm.
The prioritization of I-frame packets using the BP param-
eter is shown in Figure 5. Here, if BP parameter is set to zero,
then it defaults to basic FDSP, where SPS, PPS, and slice
headers are the only packets that will be sent via TCP. If BP
is 25% then a quarter of all I-frame packets would be sent via
TCP. Although it is possible to select any distribution of the I-
frame to be sent via TCP, a sequential order of I-frame packets
are selected to be sent via TCP to achieve QoE. Increasing
BP results in increasing the number of TCP packets, thus
increasing the probability of TCP rebuffering, but it reduces
UDP packet loss and error propagation due to the proportional
reduction in the number of UDP packets.
IV.
ADAPTIVE BITSTREAM PRIORITIZATION
The procedure of the proposed Adaptive-BP algorithm is
shown in Figure 6, which consists of four parts. In the ﬁrst part
(lines 4-6), the estimated TCP rebuffering time for substream
i, E[RBT T CP
i
], and the estimated UDP packet loss rate for
substream i, E[PLRUDP
i
], are calculated for each BP, where
BP = 0%, 10%, ..., 100%, for i ≥ 2. BP increments of 10%
was chosen based on our experiments, which showed that it
provides the right balance between computational requirement
and its effect on QoE. Note that Figure 6 is executed after the
completion of transmission of the TCP portion for substream
i − 1 so that information on rebuffering time and packet
loss can be gathered. The calculations of E[RBT T CP
i
] and
E[PLRUDP
i
] will be discussed in Secions. IV-A and IV-B,
respectively. By default, the BP value for the ﬁrst substream,
BP1, is set to 100%, which is done to reduce the possibility
of UDP packet loss in case the network is congested when
streaming starts.
In
the
second
part
(lines
7-12),
a
check
is
made
for each BP value to determine if E[RBT T CP
i
]BP and
E[PLRUDP
i
]BP are less than equal to the TCP rebuffering
time threshold, RBTth, and the UDP Packet Loss Rate (PLR)
threshold, PLRth, respectively, which are the adjustable QoE
thresholds. If both these conditions are satisﬁed, then the BP
value for the ith substream, BPi, is set to BP and BP_ﬂag is
set to 1 to indicate that both threshold conditions were satisﬁed
and BPi has been set. Since this is done for all the BP values
starting with BP equal to 0%, the for-loop will select the
highest value of BP that satisﬁes both QoE thresholds. This
is because packet loss is more detrimental to video quality
as it also leads to error propagation. Therefore, the proposed
Adaptive-BP algorithm is more sensitive to packet loss over
rebuffering.
The third part of the algorithm (lines 13-21) is executed
only when none of the BP values satisfy both QoE require-
ments. If so, BPi is initially set to 100% and then a check is
made to determine if E[PLRUDP
i
] satisﬁes PLRth and BPi
is greater than BP for each BP value. For each iteration, if
both of these conditions are satisﬁed, then BPi is set to BP
and the NBP_ﬂag is set 1 to indicate that PLRth was satisﬁed
and BPi was set. Note that this for-loop will select the lowest
value of BP that satisﬁes these two conditions. This is because
as BP increases within the range of acceptable BP values,
the improvement in video quality is marginal compared to the
increase in rebuffering time.
Finally, the fourth part of the algorithm (lines 22-24) is
executed if none of the BP values satisfy any of the QoE
thresholds. In this case, the visual quality of a given substream
is considered bad because the PLRth constraint cannot be met
resulting in excessive frame distortion and error propagation. In
addition, since none of the BP values satisfy PLRth, there is
no reason to increase BP as this will increase rebuffering time.
Therefore, BPi is set to 0% to minimize TCP rebuffering time.
The only drawback of the estimation algorithm is the accuracy
of UDP packet loss estimation at the sender. However, since
BP selection is dependent on both TCP rebuffering estimate
and UDP PLR estimate, the impact of UDP PLR estimation
errors is marginal.
A. Estimating TCP Rebuffering Time
E[RBT T CP
i
] for i ≥ 2 can be calculated as
E[RBT T CP
i
] =
E[T T CP
i
] − Pi,
if E[T T CP
i
] > Pi
0
otherwise,
(1)
where E[T T CP
i
] represents the estimated TCP transmission
time for substream i and Pi is the playout time for the
ith substream. Here, rebuffering occurs whenever E[T T CP
i
]
exceeds Pi as shown in (1).
E[T T CP
i
] is represented using the following equation:
E[T T CP
i
] = RTTavgi−1
2
×[N T CPD
i
+(BPi ×N I
i )+N UDP
i−1 ],
(2)
where RTTavgi−1 represents the average round trip time of
TCP packets for substream i − 1, N T CPD
i
is the default
number of TCP packets sent for SPS, PPS and slice headers
37
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

for substream i, N I
i is the total number of I-frame packets for
substream i, and N UDP
i−1
is the number of UDP packets for
substream i − 1. Note that the N UDP
i−1
term in (2) takes into
consideration that all the UDP packets of substream i − 1, as
well as all the TCP packets for substream i need to be trans-
mitted before UDP packets for substream i can be transmitted.
Equation (2) also shows that increasing or decreasing the BP
parameter will result in proportional increase or decrease in
the number of TCP packets, which in turn determines the total
TCP transmission time for a substream.
Pi can be calculated using the equation below:
Pi = Tsl + E[RBT T CP
i−1 ],
(3)
where
Tsl
refers
to
the
ﬁxed
substream
length
and
E[RBT T CP
i−1 ] refers to the estimated rebufﬁng time of sub-
stream i − 1 that reﬂects the shift in playout time due to
rebuffering. In our implementation, Tsl is set to be 10 sec.
B. Estimating UDP Packet Loss Ratio
E[PLRUDP
i
] is represented by the following equation:
E[PLRUDP
i
] = E[PLRUDP
i−1 ] × N UDP
i
N T
i
,
(4)
where E[PLRUDP
i−1 ] represents the estimated UDP PLR for
substream i−1, N UDP
i
represents the total number of packets
to be sent through UDP for stream i, and N T
i
is the total
number of packets for substream i. Since FDSP sends both
TCP and UDP packets, N UDP
i
/N T
i
is used to estimate UDP
PLR based on the total number of packets in substream i.
N UDP
i
can be calculated using the following equation:
N UDP
i
= N T
i − [N T CPD
i
+ (BPi × N I
i )].
(5)
Equation (5) shows that the number of UDP packets depends
on the number of TCP packets, which is a function of BPi.
On the other hand, E[PLRUDP
i−1 ] can be calculated based on
the number of UDP packets lost in during substream i − 1,
which is given by
E[PLRUDP
i−1 ] =
1
N UDP
i−1
N UDP
i−1
X
k=1
1{λki−1=Dth},
(6)
where N UDP
i−1
represents the total number of UDP packets in
substream i − 1. 1{.} is the indicator function, λki−1 is the
average time the kth UDP packet for substream i − 1 spent in
the IP queue, Dth is the queue delay threshold, and λki−1 =
Dth indicates that the packet was lost [15]. Dth is the time
spent by the last packet in the IP queue when it becomes full
for the ﬁrst time.
C. An Example
The results of applying Adaptive-BP algorithm for three
sample substreams (Case 1, Case 2, and Case 3) is shown in
Figure 7, which are derived from the example video clip used
in our analysis (see Section V). After obtaining E[RBT T CP
i
]
and E[PLRUDP
i
] for all BP values, the Adaptive-BP algo-
rithm narrows the possible BP values that satisfy both RBTth
and PLRth thresholds. For these experiments, RBTth and
PLRth are assumed to be 1 sec. and 0.05, respectively (see
Section V).
In Case 1, the BP values that satisfy both thresholds are
BP = 0% and BP = 10%. BP = 0% results in estimated
rebufﬁng time of 0.38 sec. and estimated UDP PLR of 0.05. On
the other hand, BP = 10% results in estimated rebufﬁng time
of 0.57 sec. and estimated UDP PLR of 0.04. Although both
BP values can be used, BPi is chosen to be 10% because in
terms of QoE a 1% increase in UDP PLR is more detrimental
to video quality than 0.11 sec. increase in rebuffering time. In
Case 2, none of the BP values satisfy both thresholds, hence
BPi is set the minimum BP value that satisﬁes the UDP PLR
threshold, i.e., BPi = 60%. This is because any increase in BP
results in signiﬁcant increase in rebuffering time with minimal
improvement in video quality. On the other hand, decreasing
BP reduces rebuffering time but it leads to PLR greater than
0.05, which is considered bad video quality [16].
In Case 3, none of the BP values satisﬁes any of the
QoE thresholds indicating bad visual quality [16]. Here, any
increase in BP leads to a signiﬁcant increase in rebufﬁng time
but its improvement in video quality is negligible, thus BPi
is set 0% by default to minimize rebuffering time.
V.
EXPERIMENTAL SETUP
Our simulation environment is Open Evaluation Frame-
work For Multimedia Over Networks (OEFMON) [17], which
is composed of a multimedia framework DirectShow, and a
network simulator QualNet. OEFMON allows a raw video to
be encoded and redirected to a simulated network to gather
statistics on the received video.
The simulated network is an 802.11g ad-hoc network with
a bandwidth of 54 Mbp. Note, the version of the qualnet
simulator used for our study only supports the IEEE 802.11g
standard. However, the simulation study can easily adopted
to 802.11n by having more background trafﬁc to saturate the
network. The network scenario used is an 8-node conﬁguration
shown in Figure 8. The distance between the source and
the destination is set to be 5 m and the distance between
the streaming node pairs is set to be 10 m. These distances
were chosen to represent the proximity of multiple streaming
devices that exist in a modern household. The primary test
video is being streamed between nodes 1 and 2, while the
remaining nodes are used to generate an aggregate Constant
Bit Rate (CBR) background trafﬁc of 50 Mbps to fully saturate
the network.
The test video used for our simulation is the video from
"The Hobbit" movie trailer, which contains 146 seconds of full
HD video (1920×1080 @30fps, 4354 frames). The video is
encoded using the x264 encoder with an average bit rate of 4
Mbps and four slices per frame.
The threshold parameters RBTth and PLRth are chosen
based on recommendations from industry and literature studies.
A recent study done by Conviva, which is a company that
monitors Internet video delivery, reports that users react nega-
tively when (re)buffering time exceeds 2% of the total length
of the viewing session [18]. However, since FDSP reduces
rebuffering by employing both TCP and UDP protocols, a
more relaxed RBTth of 1 sec. (10% per substream) is used.
On the other hand, a QoE study conducted in [16] showed that
a PLR of less than 5% is considered acceptable video, hence
PLRth is set to 0.05.
38
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

Instances
Rebuf. Time
Packets
Pure-UDP
0
0 sec.
12046
17.04%
FDSP BP=0%
1
4.21 sec.
4436
6.4%
FDSP BP=100%
10
25 sec.
943
1.3%
FDSP Adap.-BP
2
7.21 sec.
982
1.4%
Pure-TCP
16
98 sec.
0
0%
TABLE I
SUMMARY OF PERFORMANCE FOR THE SECOND 276 SEC. TEST VIDEO.
UDP
PLR
BP
(%)
TCP Rebuf.
(sec)
0.05
0
0.38
0.04
10
0.57
0.04
20
1.29
0.04
30
1.67
0.04
40
2.15
0.04
50
2.40
0.04
60
3.43
0.04
70
4.07
0.03
80
4.28
0.03
90
4.42
0.03
100
4.61
TABLE II
ADAPTIVE BP FDSP PERFORMANCE IN A FULLY CONGESTED NETWORK
WITH CBR FOR VIDEO OF LENGTH 276 SEC.
instances with a total rebuffering time of 7.2 sec. and PLR of
1.4%. In contrast, FDSP with BP=100% incurs 10 instances
of rebuffering with a total rebuffering time of 25 secs and
PLR of 1.3%. Although FDSP with BP=0% has only 1
instance of rebuffering that lasts for 4.21 sec., its PLR is
signiﬁcantly higher at 6.4%. In comparison, pure-UDP incurs
no rebuffering but the PLR is 17.04%, and pure-TCP has no
packet loss but incurs 16 instances of rebuffering with a total
rebuffering time of 98 seconds. These results clearly show
that FDSP with Adaptive-BP results in better QoE compared
to FDSP with static BP values, pure-TCP, and pure-UDP based
streaming.
VII. CONCLUSION
This paper proposed the Adaptive-BP technique that dy-
namically adjusts the proportion of packets sent over TCP
versus UDP for Flexible DualTCP/UDP Streaming Protocol
(FDSP) presented in [5], [6]. The proposed method adaptively
selects the BP parameter for each substream based on the
estimated rebuffering time and UDP packet loss rate. For each
substream the Adaptive-BP algorithm selects the BP value that
satisﬁes the T rb
th and the PLRth thresholds. Our results show
that the proposed method reduces both rebuffering time and
packet loss ratio leading to a more favorable overall video
streaming experience.{(BL): I am not thrilled about the way
this is written but...}{(AD): I could not come up with a better
alternative, but will keep working on it. }
As future work, FDSP with Adaptive-BP will be extended
to include active bandwidth aware, dynamic streaming sys-
tem{(BL): What do you mean by this?}. Another area of
interest is to dynamically modify the substream length and
study it’s impact on FDSP-based video streaming.
REFERENCES
[1] T. Kim and M. H. Ammar, “Receiver Buffer Requirement for Video
Streaming over TCP,” in Proceedings of Visual Communications and
Image Processing Conference, 2006, pp. 422–431.
[2] X. Shen, A. Wonfor, R. Penty, and I. White, “Receiver playout buffer
requirement for tcp video streaming in the presence of burst packet
drops,” in London Communications Symposium, vol. 2009, 2009.
[3] E. Brosh, S. A. Baset, V. Misra, D. Rubenstein, and H. Schulzrinne,
“The Delay-Friendliness of TCP,” ACM SIGMETRICS Performance
Evaluation Review, vol. 36, no. 1, pp. 49–60, Jun. 2008. [Online].
Available: http://doi.acm.org/10.1145/1384529.1375464
[4] W.-F. Alliance. Wi-ﬁ certiﬁed miracastTM: Extending the wi-ﬁ experi-
ence to seamless video display wi-ﬁ alliance.
[5] J. Zhao, B. Lee, T.-W. Lee, C.-G. Kim, J.-K. Shin, and J. Cho, “Flexible
dual tcp/udp streaming for h.264 hd video over wlans,” in Proc. of the 7th
International Conference on Ubiquitous Information Management and
Communication (ICUIMC ’13).
New York, NY, USA: ACM, 2013, pp.
34:1–34:9.
[6] M. Sinky, A. Dhamodaran, B. Lee, and J. Zhao, “Analysis of H.264
bitstream prioritization for dual TCP/UDP streaming of HD video
over WLANs,” in 2015 IEEE 12th Consumer Communications and
Networking Conference (CCNC) (CCNC 2015), Las Vegas, USA, Jan.
2015.
[7] S. Wenger, “H.264/AVC over IP,” IEEE Trans. Circuits Syst. Video
Technol., vol. 13, no. 7, pp. 645–656, Jul. 2003.
[8] D. Wu, Y. Hou, W. Zhu, Y.-Q. Zhang, and J. Peha, “Streaming video
over the internet: approaches and directions,” IEEE Trans. Circuits Syst.
Video Technol., vol. 11, no. 3, pp. 282–300, Mar. 2001.
[9] Y. Wang and Q.-F. Zhu, “Error control and concealment for video
communication: a review,” Proc. IEEE, vol. 86, no. 5, pp. 974–997,
May 1998.
[10] Y. Xu and Y. Zhou, “H.264 video communication based reﬁned error
concealment schemes,” IEEE Trans. Consum. Electron., vol. 50, no. 4,
pp. 1135–1141, Nov. 2004.
[11] A. Nafaa, T. Taleb, and L. Murphy, “Forward error correction strategies
for media streaming over wireless networks,” IEEE Commun. Mag.,
vol. 46, no. 1, pp. 72–79, Jan. 2008.
[12] J. Kim, R. M. Mersereau, and Y. Altunbasak, “Distributed video stream-
ing using multiple description coding and unequal error protection,”
IEEE Trans. Image Process., vol. 14, no. 7, pp. 849–861, Jul. 2005.
[13] B. Wang, J. Kurose, P. Shenoy, and D. Towsley, “Multimedia streaming
via TCP: An analytic performance study,” ACM Trans. Multimedia
Comput. Commun. Appl., vol. 4, no. 2, pp. 16:1–16:22, May 2008.
[14] R. Pantos and W. May, “HTTP Live Streaming,” Apr. 2014, iETF Draft,
[Accessed May 26, 2014].
[15] L. Borg, K. Streeter, and G. Eguchi, “HTTP Dynamic Streaming
Speciﬁcation Version 3.0 FINAL,” Aug. 2013, [Accessed May 26, 2014].
[16] Microsoft Smooth Streaming. Microsoft. [Accessed May 26, 2014].
[Online].
Available:
http://www.iis.net/downloads/microsoft/smooth-
streaming
[17] M. van der Schaar and D. Turaga, “Cross-layer packetization and retrans-
mission strategies for delay-sensitive wireless multimedia transmission,”
IEEE Trans. Multimedia, vol. 9, no. 1, pp. 185–197, Jan. 2007.
[18] I. Ali, M. Fleury, S. Moiron, and M. Ghanbari, “Enhanced prioritization
for video streaming over QoS-enabled wireless networks,” in Wireless
Advanced (WiAd’11), Jun. 2011, pp. 268–272.
[19] Y.-K. Wang, R. Even, T. Kristensen, and R. Jesup, “RTP Payload Format
for H.264 Video,” RFC 6184 (Proposed Standard), Internet Engineering
Task Force, May 2011.
[20] K. Ishibashi, M. Aida, and S.-i. Kuribayashi, “Global telecommunica-
tions conference, 2003. globecom ’03. ieee,” in Estimating packet loss-
rate by using delay information and combined with change-of-measure
framework, vol. 7, 2003, pp. 3878–3882.
[21] C. Lee, M. Kim, S. Hyun, S. Lee, B. Lee, and K. Lee, “OEFMON:
An open evaluation framework for multimedia over networks,” IEEE
Commun. Mag., vol. 49, no. 9, pp. 153–161, Sep. 2011.
[22] QualNet 5.0.2 User’s Guide, Scalable Network Technologies, Inc., 2010.
[23] “http://www.videolan.org/developers/x264.html.”
[24] Conviva SanMateo California, Tech. Rep. Feb 2013. The conviva
viewer experience report. [Online]. Available: http://www.conviva.com/
vxr-home/vxr2013/
UDP PLR 
Threshold 
(0.05) 
TCP Rebuf. 
Threshold 
(1 sec.) 
(a) Case 1: Both RBTth and PLRth constraints are 
satisfied  
(a) Case 1: Both RBTth and PLRth
are satisﬁed.
UDP PLR 
Threshold 
(0.05) 
TCP Rebuf. 
Threshold 
(1 sec.) 
Pure-UDP
0
0 sec.
12046
17.04%
FDSP BP=0%
1
4.21 sec.
4436
6.4%
FDSP BP=100%
10
25 sec.
943
1.3%
FDSP Adap.-BP
2
7.21 sec.
982
1.4%
Pure-TCP
16
98 sec.
0
0%
TABLE I
SUMMARY OF PERFORMANCE FOR THE SECOND 276 SEC. TEST VIDEO.
UDP
PLR
BP
(%)
TCP Rebuf.
(sec)
0.07
0
0.57
0.07
10
1.28
0.06
20
1.79
0.06
30
2.47
0.06
40
3.21
0.06
50
3.48
0.05
60
4.12
0.05
70
4.55
0.05
80
5.07
0.04
90
5.22
0.04
100
5.49
TABLE II
ADAPTIVE BP FDSP PERFORMANCE IN A FULLY CONGESTED NETWORK
WITH CBR FOR VIDEO OF LENGTH 276 SEC.
instances with a total rebuffering time of 7.2 sec. and PLR of
1.4%. In contrast, FDSP with BP=100% incurs 10 instances
of rebuffering with a total rebuffering time of 25 secs and
PLR of 1.3%. Although FDSP with BP=0% has only 1
instance of rebuffering that lasts for 4.21 sec., its PLR is
signiﬁcantly higher at 6.4%. In comparison, pure-UDP incurs
no rebuffering but the PLR is 17.04%, and pure-TCP has no
packet loss but incurs 16 instances of rebuffering with a total
rebuffering time of 98 seconds. These results clearly show
that FDSP with Adaptive-BP results in better QoE compared
to FDSP with static BP values, pure-TCP, and pure-UDP based
streaming.
VII. CONCLUSION
This paper proposed the Adaptive-BP technique that dy-
namically adjusts the proportion of packets sent over TCP
versus UDP for Flexible DualTCP/UDP Streaming Protocol
(FDSP) presented in [5], [6]. The proposed method adaptively
selects the BP parameter for each substream based on the
estimated rebuffering time and UDP packet loss rate. For each
substream the Adaptive-BP algorithm selects the BP value that
satisﬁes the T rb
th and the PLRth thresholds. Our results show
that the proposed method reduces both rebuffering time and
packet loss ratio leading to a more favorable overall video
streaming experience.{(BL): I am not thrilled about the way
this is written but...}{(AD): I could not come up with a better
alternative, but will keep working on it. }
As future work, FDSP with Adaptive-BP will be extended
to include active bandwidth aware, dynamic streaming sys-
tem{(BL): What do you mean by this?}. Another area of
interest is to dynamically modify the substream length and
study it’s impact on FDSP-based video streaming.
[1] T. Kim and M. H. Ammar, “Receiver Buffer Requirement for Video
Streaming over TCP,” in Proceedings of Visual Communications and
Image Processing Conference, 2006, pp. 422–431.
[2] X. Shen, A. Wonfor, R. Penty, and I. White, “Receiver playout buffer
requirement for tcp video streaming in the presence of burst packet
drops,” in London Communications Symposium, vol. 2009, 2009.
[3] E. Brosh, S. A. Baset, V. Misra, D. Rubenstein, and H. Schulzrinne,
“The Delay-Friendliness of TCP,” ACM SIGMETRICS Performance
Evaluation Review, vol. 36, no. 1, pp. 49–60, Jun. 2008. [Online].
Available: http://doi.acm.org/10.1145/1384529.1375464
[4] W.-F. Alliance. Wi-ﬁ certiﬁed miracastTM: Extending the wi-ﬁ experi-
ence to seamless video display wi-ﬁ alliance.
[5] J. Zhao, B. Lee, T.-W. Lee, C.-G. Kim, J.-K. Shin, and J. Cho, “Flexible
dual tcp/udp streaming for h.264 hd video over wlans,” in Proc. of the 7th
International Conference on Ubiquitous Information Management and
Communication (ICUIMC ’13).
New York, NY, USA: ACM, 2013, pp.
34:1–34:9.
[6] M. Sinky, A. Dhamodaran, B. Lee, and J. Zhao, “Analysis of H.264
bitstream prioritization for dual TCP/UDP streaming of HD video
over WLANs,” in 2015 IEEE 12th Consumer Communications and
Networking Conference (CCNC) (CCNC 2015), Las Vegas, USA, Jan.
2015.
[7] S. Wenger, “H.264/AVC over IP,” IEEE Trans. Circuits Syst. Video
Technol., vol. 13, no. 7, pp. 645–656, Jul. 2003.
[8] D. Wu, Y. Hou, W. Zhu, Y.-Q. Zhang, and J. Peha, “Streaming video
over the internet: approaches and directions,” IEEE Trans. Circuits Syst.
Video Technol., vol. 11, no. 3, pp. 282–300, Mar. 2001.
[9] Y. Wang and Q.-F. Zhu, “Error control and concealment for video
communication: a review,” Proc. IEEE, vol. 86, no. 5, pp. 974–997,
May 1998.
[10] Y. Xu and Y. Zhou, “H.264 video communication based reﬁned error
concealment schemes,” IEEE Trans. Consum. Electron., vol. 50, no. 4,
pp. 1135–1141, Nov. 2004.
[11] A. Nafaa, T. Taleb, and L. Murphy, “Forward error correction strategies
for media streaming over wireless networks,” IEEE Commun. Mag.,
vol. 46, no. 1, pp. 72–79, Jan. 2008.
[12] J. Kim, R. M. Mersereau, and Y. Altunbasak, “Distributed video stream-
ing using multiple description coding and unequal error protection,”
IEEE Trans. Image Process., vol. 14, no. 7, pp. 849–861, Jul. 2005.
[13] B. Wang, J. Kurose, P. Shenoy, and D. Towsley, “Multimedia streaming
via TCP: An analytic performance study,” ACM Trans. Multimedia
Comput. Commun. Appl., vol. 4, no. 2, pp. 16:1–16:22, May 2008.
[14] R. Pantos and W. May, “HTTP Live Streaming,” Apr. 2014, iETF Draft,
[Accessed May 26, 2014].
[15] L. Borg, K. Streeter, and G. Eguchi, “HTTP Dynamic Streaming
Speciﬁcation Version 3.0 FINAL,” Aug. 2013, [Accessed May 26, 2014].
[16] Microsoft Smooth Streaming. Microsoft. [Accessed May 26, 2014].
[Online].
Available:
http://www.iis.net/downloads/microsoft/smooth-
streaming
[17] M. van der Schaar and D. Turaga, “Cross-layer packetization and retrans-
mission strategies for delay-sensitive wireless multimedia transmission,”
IEEE Trans. Multimedia, vol. 9, no. 1, pp. 185–197, Jan. 2007.
[18] I. Ali, M. Fleury, S. Moiron, and M. Ghanbari, “Enhanced prioritization
for video streaming over QoS-enabled wireless networks,” in Wireless
Advanced (WiAd’11), Jun. 2011, pp. 268–272.
[19] Y.-K. Wang, R. Even, T. Kristensen, and R. Jesup, “RTP Payload Format
for H.264 Video,” RFC 6184 (Proposed Standard), Internet Engineering
Task Force, May 2011.
[20] K. Ishibashi, M. Aida, and S.-i. Kuribayashi, “Global telecommunica-
tions conference, 2003. globecom ’03. ieee,” in Estimating packet loss-
rate by using delay information and combined with change-of-measure
framework, vol. 7, 2003, pp. 3878–3882.
[21] C. Lee, M. Kim, S. Hyun, S. Lee, B. Lee, and K. Lee, “OEFMON:
An open evaluation framework for multimedia over networks,” IEEE
Commun. Mag., vol. 49, no. 9, pp. 153–161, Sep. 2011.
[22] QualNet 5.0.2 User’s Guide, Scalable Network Technologies, Inc., 2010.
[23] “http://www.videolan.org/developers/x264.html.”
[24] Conviva SanMateo California, Tech. Rep. Feb 2013. The conviva
viewer experience report. [Online]. Available: http://www.conviva.com/
vxr-home/vxr2013/
(b) Case 2: Only PLRth constraints is satisfied  
(b) Case 2: Only PLRth is satisﬁed.
(c) PSNR for FDSP with Adaptive-BP.
Fig. 10. PSNR plots for the 145 sec. Hobbit video. The green line at 37dB
represents the PSNR threshold above which the human eye cannot perceive
any quality difference.
UDP
PLR
BP
(%)
TCP Rebuf.
(sec)
0.29
0
1.57
0.27
10
2.28
0.25
20
3.76
0.23
30
4.47
0.21
40
5.21
0.20
50
6.46
0.18
60
7.12
0.17
70
7.56
0.15
80
8.07
0.12
90
9.22
0.10
100
10.49
TABLE II
ADAPTIVE BP FDSP PERFORMANCE IN A FULLY CONGESTED NETWORK
WITH CBR FOR VIDEO OF LENGTH 276 SEC.
the proposed method reduces both rebuffering time and packet
2015.
[9] S. Wenger
Technol., v
[10] D. Wu, Y.
over the in
Video Tech
[11] Y. Wang a
communica
May 1998.
[12] Y. Xu and
concealmen
pp. 1135–1
[13] A. Nafaa, T
for media
vol. 46, no
[14] J. Kim, R.
ing using
IEEE Tran
[15] B. Wang, J
via TCP:
Comput. C
[16] L. Borg,
Speciﬁcatio
[17] M. van der
mission str
IEEE Tran
[18] I. Ali, M. F
for video s
Advanced
[19] Y.-K. Wang
for H.264 V
Task Force
(c) Case 3: None of the threshold constraints are 
satisfied  
(c) Case 3: None of the thresholds are
satisﬁed.
Figure 7. Examples of Adaptive-BP selection.
Es.ma.ng(TCP(Rebuﬀering(Probability(
Primary(video(stream(
FDSPbBP(
Background(Traﬃc(
CBR(=(20Mbps(
Background(Traﬃc(
Background(Traﬃc(
CBR(=(20Mbps(
CBR(=(10Mbps(
(10(m)(
(10(m)(
(10(m)(
(5(m)(
Figure 8. Simulated Network Scenario.
Substream Number
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Rebuffering Time (sec)
0
2
4
6
8
10
Rebuffering Comparison
Pure-TCP
BP=0%
BP=100%
Adaptive-BP
Substream Number
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Packet Loss Rate (%)
0
0.2
0.4
0.6
0.8
1
PLR Comparison
Pure-UDP
BP=0%
BP=100%
Adaptive-BP
(a) Rebuffering comparison.
Substream Number
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Rebuffering Time (sec)
0
2
4
6
8
10
Rebuffering Comparison
Pure-TCP
BP=0%
BP=100%
Adaptive-BP
Substream Number
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Packet Loss Rate (%)
0
0.2
0.4
0.6
0.8
1
PLR Comparison
Pure-UDP
BP=0%
BP=100%
Adaptive-BP
(b) PLR comparison.
Figure 9. Comparison of TCP rebuffering time and UDP PLR for pure-TCP,
FDSP-BP with BP=0%, FDSP-BP with BP=100% and FDSP-BP with
Adaptive-BP for the 146 sec. Hobbit video.
VI.
RESULTS
The changes in rebuffering time by adaptively adjusting
the BP parameter as compared to pure-TCP, FDSP-BP with
BP=0%, and FDSP-BP with BP=100% is shown in Figure 9a.
Pure-TCP based video streaming incurs a total of 10 instances
of rebuffering with a total rebuffering time of 75.06 sec.
FDSP-BP with BP=100% incurs 8 instances of rebuffering
with a total rebuffering time of 14 sec. However, FDSP with
Adaptive-BP only incurs 2 instances rebuffering with a total
rebuffering time of 1.1 sec. In addition, Figure 9a shows that
FDSP-BP with BP=0% does not incur any rebuffering, but this
is achieved at the cost of increased PLR.
PLR reduction by Adaptive-BP as compared to pure-UDP,
Adaptive BP adjustment based on PLR and RBT
 0
 20
 40
 60
 80
 100
BP (%)
BP
0.05
 0
 0.02
 0.04
 0.06
 0.08
 0.1
 0.12
 0.14
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
 13
 14
 15
 0
 0.5
 1
 1.5
 2
 2.5
 3
 3.5
Packet Loss Ratio (PLR)
Rebuffering Time - RBT (s)
Substream Number
PLR
RBT
UDP PLR Threshold
TCP Rebuffering Threshold
Figure 10. Adaptive BP selection for the 146 sec. Hobbit video.
FDSP-BP with BP=0%, and FDSP-BP with BP=100% is as
shown in Figure 9b. Pure-UDP based video streaming incurs
a total loss of 9136 packets with PLR of 0.27. FDSP-BP
with BP=0% incurs a loss of 7084 packets with PLR of 0.16.
However, FDSP with Adaptive-BP only incurs a loss of 152
packets with PLR of 0.004. Note that FDSP-BP with BP=100%
incurs a loss of 97 packets with a PLR of 0.003, but this
marginal gain in PLR is achieved at the cost of increased
rebuffering time.
FDSP with Adaptive-BP in action and its impact on packet
loss and rebuffering is shown in Figure 10. The graph in
the upper portion of the ﬁgure shows how BPi changes,
while the graphs in the lower portion of the ﬁgure show the
actual RBT T CP
i
and PLRUDP
i
for each substream. The TCP
rebuffering (RBTth) and the UDP PLR (PLRth) thresholds
are indicated as a dashed pink line and a dashed blue line,
respectively. Initially, the BP value for the ﬁrst substream
starts at 100% by default. Afterwards, the BP values change
based on E[RBT T CP
i
] and E[PLRUDP
i
]. For substreams 2
to 8, Adaptive-BP efﬁciently adjusts the BP value so that
no packet loss occurs. For substreams 9, UDP PLR is 0.04,
but signiﬁcantly outperforms pure-UDP and FDSP-BP with
BP=0% with PLR of 0.4 and 0.24, respectively, as shown in
Figure 9b. The two instances of TCP rebufﬁng that occur for
substream 8 and 10 result in total rebuffering time of 1.1 sec.
A. PSNR Comparison
The PSNR results of FDSP with Adaptive-BP against pure-
UDP, FDSP with BP=0%, and FDSP with BP=100% is shown
in Figure 11. Note that PSNR of 37 dB for a given frame
39
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 0
 500
 1000
 1500
 2000
 2500
 3000
 3500
 4000
 4500
PSNR
Frame
UDP
FDSP-BP 0%
(a) FDSP with BP=0%.
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 0
 500
 1000
 1500
 2000
 2500
 3000
 3500
 4000
 4500
PSNR
Frame
UDP
FDSP-BP 100%
(b) FDSP with BP=100%.
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 0
 500
 1000
 1500
 2000
 2500
 3000
 3500
 4000
 4500
PSNR
Frame
UDP
FDSP-BP Adaptive%
(c) FDSP with Adaptive-BP.
Figure 11. PSNR plots for the 146 sec. Hobbit video. The green line at 37 dB represents the PSNR threshold above which the human eye cannot perceive any
quality difference.
is considered excellent quality [19]. Therefore, our results
saturate at 40 dB representing a perfect frame reconstruction.
Figure 11 shows that the average PSNR values for FDSP with
BP=0%, BP=100%, and Adaptive-BP are 35.6 dB, 39.8 dB,
and 39.7 dB, respectively. Therefore, the video quality for
FDSP with Adaptive-BP is for the most part identical to FDSP
with BP=100% except for a dip in PSNR for frames 2566-2587
corresponding to the UDP packet loss shown in Figure 9b at
substream 9. Visually this shows up as a glitch during video
playback and lasts for 0.4 seconds. In contrast, the proposed
Adaptive-BP more than makes up for slight reduction in PSNR
by signiﬁcantly reducing TCP buffering with just 2 instances
of rebuffering and a total rebuffering time 1.1 seconds. In
comparison, pure-UDP streaming is extremely lossy and yields
an average PSNR of just 32.76 dB.
These results clearly show that FDSP with Adaptive-BP
results in better QoE compared to FDSP with static BP values,
pure-TCP, and pure-UDP based streaming.
VII.
CONCLUSION
This paper proposed the Adaptive-BP technique that dy-
namically adjusts the proportion of packets sent over TCP
versus UDP for FDSP, as presented in [5][6]. The proposed
method adaptively selects the BP parameter for each substream
based on the estimated rebuffering time and UDP packet loss
rate. For each substream the Adaptive-BP algorithm selects the
BP value that satisﬁes the rebuffering time and the packet loss
ratio thresholds. Our results show that the proposed method
reduces both rebuffering time and packet loss ratio leading to
a more favorable overall video streaming experience. As future
work, FDSP with Adaptive-BP will be extended to include real
time video streaming and further improve the accuracy of the
estimation algorithm.
REFERENCES
[1]
R. Pantos and W. May, “HTTP Live Streaming,” Apr. 2014, iETF Draft,
URL: https://developer.apple.com/streaming/ [Accessed: 2015-09-20].
[2]
“Microsoft Smooth Streaming,” Microsoft, [Accessed: 2015-09-20].
[Online].
Available:
http://www.iis.net/downloads/microsoft/smooth-
streaming
[3]
T. Kim and M. H. Ammar, “Receiver Buffer Requirement for Video
Streaming over TCP,” in Proceedings of Visual Communications and
Image Processing Conference, January 2006, pp. 422–431.
[4]
X. Shen, A. Wonfor, R. Penty, and I. White, “Receiver playout buffer
requirement for tcp video streaming in the presence of burst packet
drops,” in London Communications Symposium, 2009.
[5]
J. Zhao, B. Lee, T.-W. Lee, C.-G. Kim, J.-K. Shin, and J. Cho, “Flexible
dual tcp/udp streaming for h.264 hd video over wlans,” in Proc. of the
7th International Conference on Ubiquitous Information Management
and Communication (ICUIMC ’13). New York, NY, USA: ACM, 2013,
pp. 34:1–34:9.
[6]
M. Sinky, A. Dhamodaran, B. Lee, and J. Zhao, “Analysis of H.264
bitstream prioritization for dual TCP/UDP streaming of HD video
over WLANs,” in 2015 IEEE 12th Consumer Communications and
Networking Conference (CCNC 2015), Las Vegas, USA, Jan. 2015, pp.
576–581.
[7]
S. Wenger, “H.264/AVC over IP,” IEEE Transactions on Circuits and
Systems for Video Technology, vol. 13, no. 7, pp. 645–656, Jul. 2003.
[8]
Y. Xu and Y. Zhou, “H.264 video communication based reﬁned error
concealment schemes,” IEEE Transactions on Consumer Electronics,
vol. 50, no. 4, pp. 1135–1141, Nov. 2004.
[9]
A. Nafaa, T. Taleb, and L. Murphy, “Forward error correction strategies
for media streaming over wireless networks,” Communications Maga-
zine, IEEE, vol. 46, no. 1, pp. 72–79, Jan. 2008.
[10]
B. Wang, J. Kurose, P. Shenoy, and D. Towsley, “Multimedia streaming
via TCP: An analytic performance study,” ACM Trans. Multimedia
Comput. Commun. Appl., vol. 4, no. 2, pp. 16:1–16:22, May 2008.
[11]
L.
Borg,
K.
Streeter,
and
G.
Eguchi,
“HTTP
Dynamic
Streaming Speciﬁcation Version 3.0 FINAL,” Aug. 2013, URL:
http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/hds/pdfs/
adobe-hds-speciﬁcation.pdf[Accessed: 2015-09-20].
[12]
M. van der Schaar and D. Turaga, “Cross-layer packetization and
retransmission strategies for delay-sensitive wireless multimedia trans-
mission,” IEEE Transactions on Multimedia, vol. 9, no. 1, pp. 185–197,
Jan. 2007.
[13]
I. Ali, M. Fleury, S. Moiron, and M. Ghanbari, “Enhanced prioritization
for video streaming over QoS-enabled wireless networks,” in Wireless
Advanced (WiAd’11), Jun. 2011, pp. 268–272.
[14]
Y.-K. Wang, R. Even, T. Kristensen, and R. Jesup, “RTP Payload Format
for H.264 Video,” RFC 6184 (Proposed Standard), Internet Engineering
Task Force, May 2011.
[15]
K. Ishibashi, M. Aida, and S.-i. Kuribayashi, “Estimating packet loss-
rate by using delay information and combined with change-of-measure
framework,” in Global Telecommunications Conference, 2003. GLOBE-
COM ’03. IEEE, vol. 7, Dec 2003, pp. 3878–3882.
[16]
Qin Dai and Lehnert, R., “Impact of Packet Loss on the Perceived Video
Quality,” in Evolving Internet (INTERNET), 2010 Second International
Conference on, Sept 2010, pp. 206–209.
[17]
C. Lee, M. Kim, S. Hyun, S. Lee, B. Lee, and K. Lee, “OEFMON: An
open evaluation framework for multimedia over networks,” Communi-
cations Magazine, IEEE, vol. 49, no. 9, pp. 153–161, Sep. 2011.
[18]
Conviva SanMateo California, Tech. Rep. Feb 2013, “The conviva
viewer experience report,” Conviva, URL: http://www.conviva.com/vxr-
home/vxr2013/[Accessed: 2015-09-20].
[19]
J. Gross, J. Klaue, H. Karl, and A. Wolisz, “Cross-layer optimization of
OFDM transmission systems for mpeg-4 video streaming,” Computer
Communications, vol. 27, no. 11, pp. 1044 – 1055, Jul. 2004.
40
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

