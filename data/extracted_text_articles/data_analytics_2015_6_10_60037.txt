Predicting the Next Executions Using High-Frequency Data
Ko Sugiura
Graduate School of Economics
Keio University
Tokyo, Japan
Email: ko.sugiura.0720@gmail.com
Teruo Nakatsuma
Faculty of Economics
Keio University
Tokyo, Japan
Email: nakatuma@econ.keio.ac.jp
Kenichiro McAlinn
Department of Statistical Science
Duke University
Durham, USA
Email: kenmcalinn@gmail.com
Abstract—With the progression of computer technology, the term
“big data” has become more and more popular in the ﬁnancial
markets. In the literature of ﬁnance, this term, in many cases,
means high-frequency data, whose size almost reaches as much
as 10 GB per day. High-frequency trading (HFT) is, now, widely
practiced in the ﬁnancial markets and has become one of the
most important factors in price formulation of ﬁnancial assets.
At the same time, a huge amount of data on high-frequency
transactions, so-called tick data, became accessible to both market
participants as well as academic researchers, which paved the way
for studies on the efﬁcacy of the high-frequency trading and the
microstructure of the ﬁnancial markets. The tick data contain all
the information of all trades and are recorded in a thousands of
a second, or a millisecond. Nevertheless there have been a great
deal of works on investigating the features of HFT, and there
have been a few works on application of them in forecast. In this
paper, we try to develop a new time series model to capture the
characteristics in tick data and use it to predict executions in
high-frequency trading.
Keywords–High-Frequency Trading; Tick Data; Executions;
Duration Models; Bid-Ask Clustering.
I.
INTRODUCTION
With the progression of computer technology, the term “big
data” has become more and more popular in the ﬁnancial
markets. In the literature of ﬁnance, that word, in many cases,
means high-frequency data, whose size almost reach as much
as 10 GB per day. High-frequency trading is, now, widely
practiced in the ﬁnancial markets and has become one of the
most important factors in price formulation of ﬁnancial assets.
At the same time, a huge amount of data on high-frequency
transactions, so-called tick data, became accessible to both
market participants as well as academic researchers, which
paved the way for studies on the efﬁcacy of the high-frequency
trading and the microstructure of the ﬁnancial markets. The
tick data contain all the information of all trades and are
recorded in a thousands of a second, or a millisecond. HFT
is used not only in the stock markets but also in the markets
for stock options and futures. Increased number of attention
has been paid to this data, because it may help the mechanism
of price formulation for ﬁnancial assets. In fact, since the end
of twentieth century, many researchers have worked on the
practical study using tick data, and a lot of characteristics about
high-frequency data have been reported.
One of the most famous series of study in tick data is
the study on durations. Naturally, when the next execution
occurs or when the price moves is the prime interest for
market participants, particularly for specialists. It has long been
known that there are largely two difﬁculties in duration data:
discreteness of duration data and the sparsity in duration data.
In other words, transaction data arrives with irregularly spaced
intervals. However, [2] tackled these problems by proposing a
new time-series model. Their model succeeded capturing the
feature of clustering of durations. Afterwards, many papers
have been devoted to their model and the model has a lot of
variations and extensions ([1], [6], [8], etc.).
Another fact which is most frequently documented and
stylized on high-frequency transaction data is bid-ask bounce.
Bid-ask bounce is a phenomenon that execution prices tend
to move back and forth between the best-ask and the best-
bid. But, it is also pointed that, particularly in much shorter
periods, after an execution at best-ask (best-bid), the next
execution occurs more likely at best-ask (best-bid). That is, we
can observe the runs of executions, which we named bid-ask
clustering. The histogram of the runs appears to be more fat-
tailed than a fair coin toss suggests. This means that executions
don’t occur completely at random. Despite a vast amount of
literature [5][9] on reproducing the bid-ask clustering, there is
little literature on application of this feature into forecast of
executions.
In this paper, we try to develop a new time series model
with combining the duration models and the feature of bid-ask
clustering for forecasting executions in stock markets in the
context of tick data. Our contribution is that we take explicitely
the bid-ask clustering into consideration and that we focus on
the best ask/bid pries themselves, not on the spreads or the
price movements. From a practical point of view, we need to
specify simultaneously the time and the price for the execution.
Since these two pieces of information can fortunately be
assumed to be independent, we can identify the probability on
these two pieces of information separately. Then, our model
comprises two parts and is intuitively understandable.
II.
MARKET MICROSTRUCTURE
A. Principles of Financial Market
In general, a market is the platform where people trade
something they want. At that place, transactions are made
based on the agreement between prospective buyers and
prospective sellers. Particularly in the modern ﬁnancial market,
buyers and sellers are matched through electronic servers,
and they haggle over the price at a place called the order
book. Following certain rules, all actions that take place in the
ﬁnancial market are recorded in order books. As an example
of order book, Table I shows a snapshot of the order book
95
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

for the stock of Toyota Motor Corporation on 31 April, 2012.
In this table, the column labeled “Volume (Ask)” shows how
many stocks are on sale and the corresponding price in the
middle column is the price at which these stocks will be sold.
Such a price is called an ask price. In the same table, the
column labeled “Volume (Bid)” shows how many stocks they
are willing to buy and the corresponding price in the middle
column is the price at which these stocks will be bought. Such
a price is called a bid price. The best ask price is the lowest
among ask prices while the best bid price is the highest among
bid prices. The difference between the best ask price and the
best bid price is called the bid-ask spread. Since no one wants
to buy stocks at a price above the best ask price or to sell at a
price below the best bid price, cells above the best ask price in
the left column and those below the best bid price in the right
column are empty by construction. Therefore, if they want to
sell some of their stocks, they need to look at bid prices. If
they want to buy some stocks, on the other hand, they have to
consider ask prices.
When it comes to order processing method, two types
of method are used; one is a call market and the other is
continuous trading. In the former, orders are collected without
execution until the certain time, and when the market is called,
they start to be simultaneously matched. This style is used in
the beginning and the ending of the trading session. In the
latter, on the other hand, orders can be executed intermittently
while the market is open. This method is mostly used during
the trading hours excepting for the opening and closing of the
market.
TABLE I. Order Book (31 April, 2012)
Volume
Price
Volume
(Bid)
(Yen)
(Ask)
...
...
2822
23400
2821
4200
2820
17200
2819
10600
2818
3000
2817
2100
2816
2000
2815
15400
4700
2814
4400
2813
5300
2812
7300
2811
2100
2810
8600
2809
2200
2808
8300
2807
...
...
Since 1970’s, a great deal of attention have been paid to
the question how difference in a trading mechanism affects
on a price discovery process in ﬁnancial markets. Studies on
this topic caught on especially after 1980’s and the ﬁeld has
gained its own name: market microstructure. [7] provides a
comprehensive overview of this topic. Although there are a
tremendous amount of researches on market microstructure,
the characteristics of order executions in a market tend to be
translated into three aspects of transactions; prices, volumes
and durations. In this section, we review some of the prominent
works relating to these variables.
B. Tick Data
Table II shows a typical format of tick data. They are
excerpts from by the Nikkei NEEDS database which will be
used for our empirical study. As shown in Table II, the data
are composed of snapshots of order books. For example, the
best ask price is in
3⃝ and seven ask prices are in
4⃝ ∼
10⃝
above the best one while the best bid price is in
12⃝ and seven
bid prices are in
13⃝ ∼
19⃝ bellow the best one. Additionally,
the data also have the information of executions ( 2⃝). Each
line contains a variety of information. A full description of
the information is given in Table III.
TABLE II. Tick Data
1⃝ 150020120131111 11 7203 0953333002+00000000197 0+0001031200128
2⃝ 110020120131111 11 7203 0953 03003+00002814 16 0+0000000400
0
3⃝ 120020120131111 11 7203 0953333004+00002815
0 0+0000015400128
4⃝ 150020120131111 11 7203 0953333004+00002816
1 0+0000002000128
5⃝ 150020120131111 11 7203 0953333004+00002817
2 0+0000002100128
6⃝ 150020120131111 11 7203 0953333004+00002818
3 0+0000003000128
7⃝ 150020120131111 11 7203 0953333004+00002819
4 0+0000010600128
8⃝ 150020120131111 11 7203 0953333004+00002820
5 0+0000017200128
9⃝ 150020120131111 11 7203 0953333004+00002821
6 0+0000004200128
10
⃝ 150020120131111 11 7203 0953333004+00002822
7 0+0000023400128
11
⃝ 150020120131111 11 7203 0953333004+00000000 97 0+0001237300128
12
⃝ 120020120131111 11 7203 0953333005+00002814128 0+0000004700128
13
⃝ 150020120131111 11 7203 0953333005+00002813129 0+0000004400128
14
⃝ 150020120131111 11 7203 0953333005+00002812130 0+0000005300128
15
⃝ 150020120131111 11 7203 0953333005+00002811131 0+0000007300128
16
⃝ 150020120131111 11 7203 0953333005+00002810132 0+0000002100128
17
⃝ 150020120131111 11 7203 0953333005+00002809133 0+0000008600128
18
⃝ 150020120131111 11 7203 0953333005+00002808134 0+0000002200128
19
⃝ 150020120131111 11 7203 0953333005+00002807135 0+0000008300128
20
⃝ 150020120131111 11 7203 0953333005+00000000197 0+0001031200128
21
⃝ 120020120131111 11 7203 0953333006+00002815
0 0+0000015400128
TABLE III. Deﬁnition of Items in Tick Data
1200 20120131
|
{z
}
(I)
11111 7203
| {z }
(II)
0953
| {z }
(III)
33
|{z}
(IV )
30
|{z}
(V )
06
|{z}
(V I)
+ 00002815
|
{z
}
(V II)
0
|{z}
(V III)
0 + 0000015400
|
{z
}
(IX)
128
Number
Item Name
Defenition
(I)
Date of Data
YYYYMMDD (Y: Year, M: Month, D: Day)
(II)
Companies’ Codes
Four-digit numbers for companies
(III)
Time 1
HHMM (H: Hour, M: Minute)
(IV)
Classiﬁcation of Records
“0”: Executed
“1”: Not executed
(V)
Time 2
SS (S: Second)
(VI)
Consecutive Numbers
Consecutive Numbers in the same times
(VII)
Prices
Unit: Yen
(VIII)
Classiﬁcation of Orders
“16”: Executed at the best ask price
“48”: Executed at the best bid price
“0”: Other cases
(IX)
Volumes
Unit: Stocks
III.
NON-RANDOMNESS OF EXECUTIONS
A. Bid-Ask Clustering
Despite the fact that the sample size of tick data is large
enough to justify the use of the law of large number in the
standard situation, it is recognized among researchers that the
variance of a tick-data-based estimator such as realized volatil-
ity tends to be extremely high and difﬁcult to obtain a stable
estimate. Many researchers proposed possible explanations of
this phenomena. One promising answer to this question is that
high-frequency tick-by-tick price series we observe contain
96
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

some kinds of observation error. One of the most inﬂuential
component of the error is called bid-ask bounce, which stems
from back and forth movements of prices between bid and ask
prices. There are many works treating this phenomena. Among
them, [3] analyzes the mechanism of bid-ask bounce from the
perspective of bid-ask spread, and gives an intuitively simple
explanation about the cause. Here we shall brieﬂy review his
work.
Another well-known phenomenon found in tick data is
bid-ask clustering. This term refers to the stylized fact that
an execution at the best ask (bid) price tends to be followed
by another execution at the best ask (bid). Figure 1 shows a
histogram of the length of runs in executions1. As the length of
a run increases, the number of runs are observed more than the
geometric distribution (fair-coin toss) implies. This tendency
of serial correlation has been analyzed in a number of works.
Particularly, many have been devoted for elucidating nature of
this feature, or reproducing the phenomena using the agent-
based simulations. For example, [9] pointed that the investors’
order submissions were exactly inﬂuenced by the state of the
order book, and this fact indeed generated serial correlation in
volume, volatility and order signs. Moreover, [5] considered
an order splitting strategy of traders, which split their large
orders into smaller ones. Although this strategy was originated
from minimization of market impacts, they showed that the
minimization strategy leads to the serial correlation.
As we have seen here, there have been a tremendous
amount of works on market microstructure. However, there
exist only a few number of papers which studied price move-
ments in terms of best ask and bid prices, not bid-ask spreads
or execution prices. In our proposed model, we explicitly treat
whether execution occurs at the best ask or the best bid.
We also incorporate bid-ask clustering into our model and
try to take advantage of it in forecasting price movements
and making investment strategies. In the next chapter, we
will further elaborate these points and lay our framework for
prediction of the future execution.
0
5
10
15
20
25
30
35
0
500
1000
1500
2000
2500
3000
3500
4000
The Length of Runs
The Number of Runs
The Histogram of Runs
 
 
Observations
Geometric Distribution
Figure 1. Histogram of Runs (Executions at Best Ask)
IV.
DURATION MODELS
A. Autoregressive Conditional Duration (ACD) Model
Although econometricians have traditionally worked on
analyzing regularly spaced data, i.e. daily, monthly and yearly
data, duration data have some difﬁculties in modeling. First
of all, the data are recorded inherently in irregular time
intervals. In order to address this matter, [2] assumed that
the arrival times are random variables which follow a point
1In fact, this series of data reject the null hypothesis in run test.
process. The second problem in duration data is that they
are necessarily non-negative. Traditionally in the context of
ﬁnance, the random variables we are interested in may take
both negative and positive values. When it comes to duration,
however, it is essential to pose a restriction of no-negative on
the model. Lastly, it is a well known fact that clusterings can
be seen in duration data. This phenomena is thought to stem
from a simple causality: the more active a market become,
the more transactions we observe. Since the same feature
was recognized in volatility and it was modeled by GARCH
models, [2] introduced the similar method in duration models.
For the sake of tackling the problems just mentioned above,
[2] introduced Autoregressive Conditional Duration (ACD)
models. As its name suggests, the ACD models are speciﬁed in
terms of the conditional density of the durations. Although we
recall here its simplest version for simplicity, the discussion
can be generalized into higher orders. Letting δn = ti − ti−1
and ψi be the interval between two arrival times and the
conditional expectation of the i-th duration, respectively, we
have:
ψi = Ei−1(δi|xi−1, θ),
(1)
where θ is the other parameters. The ACD models consists of
this parameterizations and the following assumption:
δi = ψiϵi,
(2)
where {ϵi} is a sequence of i.i.d. random variables with
positive support. Although the general form of ACD models
can be written by the combination of (1) and (2), there are
proposed a number of variations on the assumption of {ϵi}.
Engle and Russell, in their paper, introduced the EACD model
in which the “E” represented the exponential assumption on
the innovation terms. They mentioned the ﬁrst order one of
the EACD models is often the very successful and this is
represented as:
ψi = ω + ϕδi−1 + κψi−1
δi = ψiϵi,
where {ϵi} follows Exponential(λ), ω > 0, and ϕ, κ ≥ 0.
B. Stochastic Conditional Duration (SCD) Model
About ﬁfteen years after the appearance of ACD models,
[1] introduced a state-space class of parametric models for
durations, which they called stochastic conditional duration
(SCD) models. In their models, a latent variable cause the
evolution of the duration, and equally it capture the information
which cannot be observed directly. Then, SCD models are
composed of two stochastic equations, namely state equa-
tion and observation equation, whereas ACD models have
a stochastic equation and a deterministic equation. In SCD
models, the conditional expected duration of ACD model
become a random variable. In terms of shapes of models, ACD
models and SCD models are similar to GARCH models and
SV models, respectively. The simplest version of SCD models
is expressed as
ψi = ω + θψi−1 + ui
δi = exp(ψi)ϵi,
where {ui} follows a Gaussian distribution and {ϵi} a distribu-
tion with positive support. The innovation term of the observa-
tion equation can take some form, and [1] mentioned the case
97
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

of Weibull distribution and gamma distribution. Although [1]
used the combination of quasi-maximum likelihood estimation
and Kalman ﬁlter in parameter estimation, we employed a
more general method called particle ﬁlter.
C. Parameter Estimation: Particle Filter
When it comes to the parameter estimation of state-space
models, there arise two problems: ﬁltering hidden state vari-
ables and estimating model parameters. After the development
of Kalman ﬁlter, these problems have been discussed in
Bayesian framework, which is called particle ﬁlter. Take a
general form of non-Gaussian nonlinear state-space model for
time series yt, for example;
xt = f(xt−1, vt)
yt = h(xt, wt),
where xt is a hidden state variable, and vt and wt are both
noise terms. This model implies the information about two
types of distribution: the distribution of xt conditioned to xt−1,
p(xt|xt−1, θ), and the distribution of yt conditioned on xt,
p(yt|xt, θ), where θ represents model parameters. Besides, let
the distribution of x0 and the distribution of θ be p(x0|θ) and
p(θ), respectively. Thus, the state-space model can be denoted
by
xt|xt−1 ∼ p(xt|xt−1, θ)
yt|xt ∼ p(yt|xt, θ)
x0 ∼ p(x0|θ)
θ ∼ p(θ),
for t = 1, · · · , T.
Ordinary particle ﬁlter is interested in only hidden state vari-
ables given the model parameters, and its procedure consists
prediction step and ﬁltering step. Prediction distribution at
t − 1 is given by ﬁltering distribution at t − 1 and prediction
distribution at t − 1.
p(xt|y1:t−1)
=
∫
p(xt, xt−1|y1:t−1)dxt−1
=
∫
p(xt|xt−1, y1:t−1)p(xt−1|y1:t−1)dxt−1
=
∫
p(xt|xt−1)p(xt−1|y1:t−1)dxt−1
Filtering distribution at time t is obtained by observation
distribution at t and prediction distribution at t − 1.
p(xt|y1:t)
=
p(xt|y1:t−1, yt)
=
p(xt, yt|y1:t−1)
p(yt|y1:t−1)
=
p(yt|xt, y1:t−1)p(xt|y1:t−1)
p(yt|y1:t−1)
=
p(yt|xt)p(xt|y1:t−1)
p(yt|y1:t−1)
=
p(yt|xt)p(xt|y1:t−1)
∫
p(yt, xt|y1:t−1)dxt
=
∫ p(yt|xt)p(xt|y1:t−1)
p(yt|xt)p(xt|y1:t−1)dxt
.
Naturally, this equation is nothing but Bayes’ theorem2. As
is often the case with non-linear and non-Gaussian state-
2P(A|B) = P (B|A)P (A)
P (B)
space models, these computations, especially integrations are
too complicated for analytical implementation. Then, Markov
Chain Monte Carlo (MCMC) method started to be used rapidly
to accomplish the integration calculus in wide range of the
research area at the end of twentieth century, thanks to a
remarkable development in computer technology that helps to
simulate a good amount of calculation. Particle ﬁlter is also
a feat of MCMC method3, and is always implemented by a
numerical way. The merit of particle ﬁlter is that it enables us
to make a on-line estimation of parameters and predictions. In
order to estimate hidden states variables and model parameters
jointly, [4] proposes the application of extended state vector
for parameter estimation, which he calls it self-organiged state-
space model. We employed his method in our research.
Algorithm 1 Algorithm for Particle Filter
(1) Give an initial set of particles {x(i)
0|0}m
i=1, where m is the
number of particles.
(2) Repeat the following steps for t = 1, · · · , T, where T
is the length of data.
a. Generate a random numbers which represent state
noise v(i)
t
∼ q(vt),
for i = 1, · · · , m.
b. Compute x(i)
t|t−1
=
f(x(i)
t−1|t−1, v(i)
t ), for i
=
1, · · · , m.
c. Compute λ(i)
t
= p(yt|x(i)
t|t−1), for i = 1, · · · , m.
d. Compute β(i)
t
= λ(i)
t /
m
∑
i=1
λ(i)
t , for i = 1, · · · , m.
e. Resample particles {x(i)
t|t}m
i=1 from {x(i)
t|t−1}m
i=1 with
the weight β(i)
t .
V.
EMPIRICAL ANALYSIS
A. Model Description
We introduced some notations: n, τ, δ, r, and X. Let t
be the time measured in millisecond, and n be the number of
execution observed by time t. And τn is a random variable for
representing the time when the n-th execution is observed, and
the duration in our interest is represented by δn+1, satisfying
δn+1 = τn+1 − τn.
(3)
We deﬁned Xn as a random variable representing at which
price the next execution occurs. That is, Xn equals to −1
when we observe the n-th execution at best ask price, and to
1 when we observe the n-th execution at best bid price:
Xn =
{
−1
if best ask
1
if best bid.
Since we highlight the continuity of executions in our research,
we deﬁne rn as the length of the last run including Xn, and
we count it up as follow;
rn =
{
1
if Xn ̸= Xn−1
rn−1 + 1
if Xn = Xn−1.
From the practical view point, we need to know two pieces
of information: when the next execution will occur and at
3In fact, some articles call particle ﬁlter as Monte Carlo ﬁlter.
98
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

which price the execution will occur. For this purpose, we
set the target probability as bellow:
P(Xn+1 = k, τn+1 ∈ (t, t + ∆t]|Xn, τn, rn)
k = −1, 1
where ∆t denotes a time window which will be ﬁxed before
simulation4. Under the condition of independence on Xn+1
and τn+1, the target probability can be decomposed into two
parts by the law of conditional probability:
P(Xn+1 = k, τn+1 ∈ (t, t + ∆t]|Xn, τn, rn)
= P(τn+1 ∈ (t, t + ∆t]|τn, rn)P(Xn+1 = k|Xn, rn),
and they were estimated separately: P(τn+1
∈
(t, t +
∆t]|τn, rn) was estimated by duration models and P(Xn+1 =
k|Xn, rn) was by historical frequency.
For the sake of applying the duration models, we rewrite
P(τn+1 ∈ (t, t + ∆t]|τn, rn) in the context of durations using
the equation (3). Substituting it, we obtain a following duration
representation:
P(τn+1 ∈ (t, t + ∆t]|τn, rn)
= P(t < τn+1 ≤ t + ∆t|τn, rn)
= P(t < τn + δn+1 ≤ t + ∆t|τn, rn)
= P(t − τn < δn+1 ≤ t − τn + ∆t|τn, rn).
We estimated this by the ACD model and the SCD model.
The parameter estimation of both models were conducted
through particle ﬁlter, because it enables us to update on line
the parameter estimates. Although particle ﬁlter is usable in
continuous time, we, in the process of particle ﬁlter, update
this probability as we observe a new order or execution.
When we observe an execution, we update the probability
with recalculating a predictive distribution. On the other hand,
when we observe an order, we update the probability without
recalculating a predictive distribution. Calibrations of the prob-
ability were conducted by moving a time window, ∆t, on the
predictive distribution. Thus, when we observe an execution,
the probability is calculated as
P(τn+1 ∈ (t, t + ∆t]|τn, rn)
= P(0 < δn+1 ≤ ∆t|τn, rn)
=
∆t
∫
0
f(δn+1|τn)dδn+1
∞∫
0
f(δn+1||τn)dδn+1
=
∆t
∫
0
f(δn+1|τn)dδn+1
∆t
∫
0
f(δn+1||τn)dδn+1 +
∞∫
∆t
f(δn+1||τn)dδn+1
=
∆t
∫
0
f(δn+1|τn)dδn+1,
where f(·) denotes a predictive distribution. Similarly, when
we observe an order, the probability is given by
P(τn+1 ∈ (t, t + ∆t]|τn, rn)
= P(t − τn < δn+1 ≤ t − τn + ∆t|τn, rn)
4Note that a trivial fact:
P(Xn+1 = −k, τn+1 ∈ (t, t + ∆t]|Xn, τn, rn)
= 1 − P(Xn+1 = k, τn+1 ∈ (t, t + ∆t]|Xn, τn, rn).
=
t−τn+∆t
∫
t−τn
f(δn+1|τn)dδn+1
∞∫
t−τn
f(δn+1||τn)dδn+1
=
t−τn+∆t
∫
t−τn
f(δn+1|τn)dδn+1
t−τn+∆t
∫
t−τn
f(δn+1||τn)dδn+1 +
∞∫
t−τn+∆t
f(δn+1||τn)dδn+1
.
After estimating the duration, we calculate the probability
P(Xn+1 = k|Xn, rn) using the histogram of length of runs.
When we observed Xn = k and a run of executions whose
length was ¯r, the probability we wanted to know was given
by
P (Xn+1 = k|Xn = k, rn = ¯r)
=
∞
Σ
i=n+1
P (Xi+1 = k|Xi = k, ri = ¯r + i − n)
P (Xn+1 ̸= k|Xn = k, rn = ¯r) +
∞
Σ
i=n+1
P (Xi+1 = k|Xi = k, ri = ¯r + i − n).
B. Algorithms
In order to compare the performance of our model, we
introduced 5 types of algorithms. The difference comes from
the estimation method of two probabilities we divided. In
Model 1 and Model 2, P(τn+1 ∈ (t, t + ∆t]|τn, rn) of both
models were estimated by the SCD models. But P(Xn+1 =
k|Xn, rn) of the former model was given by the “bid-ask
clustering” or the histogram of length of runs, while that
of the latter was by a completely random method, namely
a fair coin toss. Similarly in Model 3 and Model 4, the
P(τn+1 ∈ (t, t + ∆t]|τn, rn) in both models were calculated
through the ACD models, whereas P(Xn+1 = k|Xn, rn) of
the former was by the “bid-ask clustering” and that of the
latter was by a fair coin toss. Lastly, Model 5 was comprise of
completely and totally random method, that is, both probability
P(τn+1 ∈ (t, t + ∆t]|τn, rn) and P(Xn+1 = k|Xn, rn) were
given by fair coin tosses. Since it is reported that the SCD
model ﬁt better than the ACD model, we expected the Model
1 to show the best performance. Using these algorithms, we
made predictions about executions: whether execution occurs
in ∆t or not, and if does, at which best prices the execution
occurs. Then, our prediction was categorized into three types:
no execution, execution at best ask price and execution at best
bid price. The algorithms of the Model 1 is stated bellow as
an example:
Algorithm 2 Model 1
(Step 1) Execution or No Execution
We estimate P(τn+1 ∈ (t, t+∆t]|τn, rn) by the SCD model,
and we predict
{
No Execution
if P(τn+1 ∈ (t, t + ∆t]|τn, rn) < 0.5
Execution
if P(τn+1 ∈ (t, t + ∆t]|τn, rn) > 0.5
(Step 2) Best Ask or Best Bid
If we predict Execution, we predict
Xn+1 =
{1
if P(Xn+1|Xn, τn) > 0.5
−1
if P(Xn+1|Xn, τn) < 0.5
99
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

C. Data Description
We applied the proposed model into the real stock data of
Toyota Motor Corporation which contained the signs of every
order and execution. We used the data of 4th-18th January,
2012 (10 trading days) as a learning period and the data of
19th-31st January, 2012 (9 trading days) as a prediction period.
And we omitted the ﬁrst 30 minutes, because we intended
to eliminate the inﬂuence of call market method adopted just
before opening of the market. Then, the time of the data ranges
from 9:30 to 11:30 and from 13:00 to 15:00.
TABLE IV. Statistical Information of the Data Used
4th-18th Jan
19th-31st Jan
Number of Observations
301517
367320
Best Ask (%)
5.50%
6.54%
No Execution (%)
88.86%
87.74%
Best Bid (%)
5.64%
5.72%
D. Empirical Results
For the sake of summarizing the results, we broke the
observations down into the following table, which was used
in [10]:
Actual
Best Ask
No Execution
Best Bid
Predicted
Best Ask
N11
N12
N13
N1.
No Execution
N21
N22
N23
N2.
Best Bid
N31
N32
N33
N3.
N.1
N.2
N.3
N
In the empirical analysis, we made a forecast about executions
as we observed an order and/or execution. And ∆t after,
we examined whether the forecasts were right or wrong. For
example, if we forecast there will be a execution at best ask
price in ∆t at time s, and actually there is a execution at best
ask between time s and s+∆t, we count this prediction adding
one to N11. In order to summarize this table, we deﬁned some
measures to compare the performance:
•
α = N11 + N22 + N33
N
•
β = N11 + N33
N.1 + N.3
•
γ =
N11 + N33
(N11 + N13) + (N31 + N33)
•
δ1 = N11
N.1, δ2 = N22
N.2, δ3 = N33
N.3
α is the ratio of correct predictions among all the predictions.
β is the ratio of correct predictions when we observe execu-
tions. γ is the ratio of correct predictions when we predicted
executions. δ1, δ2 and δ3 are the ratio of correct predictions
when we predicted executions at best ask, when we predicted
no executions and when we predicted executions at best bid,
respectively.
The simulation results are summarized in the TABLE V,
using the measures mentioned above. As for the case with
∆t = 1, Model 5 performed best in β, δ1 and δ3. Model 2
was the best model for δ2. The remaining measures α and γ
are takes the highest in Model 1, which shows the second best
performance in terms of the other measures. Regarding the
case with ∆t = 2, Model 1 outperformed all the other models
in all measures.
TABLE V. Performance Measures for the Five Models
Model 1
Model 2
Model 3
Model 4
Model 5
α
0.5612
0.5174
0.4815
0.4702
0.3675
β
0.2322
0.1458
0.1091
0.0854
0.2500
γ
0.7696
0.4985
0.6314
0.4943
0.5011
δ1
0.2288
0.1409
0.1087
0.0844
0.2511
δ2
0.9331
0.9373
0.9026
0.9052
0.5002
δ3
0.2360
0.1513
0.1096
0.0866
0.2488
Model 1
Model 2
Model 3
Model 4
Model 5
α
0.5292
0.4557
0.4542
0.4004
0.3403
β
0.4435
0.3301
0.4022
0.3217
0.2505
γ
0.6726
0.4998
0.6308
0.5006
0.5002
δ1
0.4402
0.3260
0.4006
0.3140
0.2515
δ2
0.6808
0.6775
0.5460
0.5396
0.4988
δ3
0.4472
0.3348
0.4041
0.3305
0.2495
∗ The above table is for the case with ∆t = 1
and the bellow one is for the case with ∆t = 2
VI.
CONCLUSION & DISCUSSION
In our model, we take the feature of bid-ask clustering ex-
plicitly into consideration. This arrangement makes it possible
to forecast next executions more precisely. Despite the good
performance of our model, this doesn’t immediately suggest
that people can make money from the ﬁnancial markets,
because there is a general rule of price-priority and time-
priority in the markets. However, it may bring us an insight
about formation of market trends. Moreover, with further
studies on the bid-ask clustering, the accuracy of the model
can be improved. For example, it might be useful if we take
not only the length of runs but also volumes and prices into
consideration.
ACKNOWLEDGMENT
This work is supported in part by a Grant-in-Aid for
the Leading Graduate School program for “Science for De-
velopment of Super Mature Society” from the Ministry of
Education, Culture, Sport, Science, and Technology in Japan.
REFERENCES
[1]
Bauwens, L., and Veredas, D. (2004), The Stochastic Conditional
Duration Model: A Latent Variable Model for the Analysis of Financial
Durations, Journal of Econometrics, 119(2), 381-482.
[2]
Engle, R.F., and Russell, J.E. (1998a), Autoregressive Conditional Dura-
tion: a new model for irregularly spaced transaction data, Econometrica,
66, 1127- 1162.
[3]
Harris, L. (2002) Trading and Exchanges: Market Microstrucuture for
Practitioners, Oxford University Press
[4]
Kitagawa, G. (1998) A Self-Organizing State-Space Model, Journal of
the American Statistical Association, 93, 443.
[5]
Lillo, F. and Farmer, D. (2004) The Long Memory of the Efﬁcient
Market, Studies in Nonlinear Dynamics & Econometrics, 8(3), 1.
[6]
Ng, K. H, Allen, D. E, and Peiris, S. (2009) Fitting Weibull ACD
Models to High Frequency Transactions Data: A Semi-parametric
Approach based on Estimating Functions, Working paper of the School
of Accounting, Finance and Economics, Edith Cowan University.
[7]
O’Hara, M. (1995) Market Microstructure Theory, Blackwall.
[8]
Vuorenmaa, T. A. (2011) A q-Weibull Autoregressive Conditional
Duration Model with an Application to NYSE and HSE Data, SSRN
Working Paper Series.
[9]
Yamamoto, R. (2010) Order Aggressiveness, Pre-Trade Transparency,
and Long Memory in an Order-Driven Market, Journal of Economic
Dynamics and Control, 35, 1938-1963.
[10]
Zuccolotto, P. (2004), Forecasting tick-by-tick price movements, Statis-
tica & Applicazioni, II, 1.
100
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-423-7
DATA ANALYTICS 2015 : The Fourth International Conference on Data Analytics

