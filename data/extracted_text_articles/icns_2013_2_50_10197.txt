Performance of Cloud-based P2P Game Architecture 
 
Victor Clincy and Brandon Wilgor 
Computer Science Department 
Kennesaw State University 
Kennesaw, GA, USA 
 
 
Abstract 
- 
The 
traditional 
multiplayer 
video 
game 
architecture requires costly investment in physical game 
servers and network infrastructure. The peer-to-peer 
network model alleviates some of these concerns, but makes 
cheat prevention, software updates, and system monitoring 
far 
more 
difficult 
for 
the 
game 
publisher. 
Recent 
advancements in Infrastructure as a Service (IaaS) cloud 
platform providers such as Amazon Web Services and 
Microsoft Azure offers video game companies the option to 
host virtual game servers in the cloud. These services now 
allow gamers to build custom game servers in the cloud. This 
paper explores the performance of a cloud-based First Person 
Shooter game server compared to established performance 
metrics.  
 
Keywords – Cloud; Gaming; Game Architecture; Network 
Performance. 
 
I. 
INTRODUCTION 
Traditional game server models utilize the familiar 
client-server architecture to host multiplayer games. This 
model represents the majority of multiplayer game systems 
and supports millions of game sessions every day. Here, 
the server is responsible for maintaining game state 
information 
between 
clients, 
synchronization, 
and 
communications [1].  This model is popular for many 
reasons such as cheating and piracy prevention, reliability 
and performance, and centralized control. However, the 
client-server architecture does suffer from high bandwidth 
requirements and infrastructure cost and scalability 
problems.  
Conversely, 
the 
Peer-to-Peer 
(P2P) 
model 
synchronizes games states directly between hosts without 
necessarily requiring a central game server. Although this 
approach has excellent scalability and extremely low costs 
associated with the Client-Server model, the lack of an 
authoritative central server introduces a number of key 
problems [2]. Among these are poor access control, limited 
cheat prevention, and non-uniform state synchronization.  
However, many game studios are turning to the cloud 
to reduce some of the costs associated with the client-
server model. For example, Microsoft’s 343 Industries [10] 
recently utilized the Microsoft Azure [9] cloud computing 
platform to support the release of “Halo 4,” the latest 
release in Microsoft’s tremendously popular video game 
franchise [3]. 343 cited cost and scalability as one of the 
key factors in deciding to host the multiplayer game on the 
cloud. Previously, game studios were forced to make a 
massive investment in server and network infrastructure to 
support the huge spike in players associated with a game’s 
release. However, as games age, the player population 
typically drops rapidly, leaving a high number of 
unutilized servers. However, Azure allows 343 to 
dynamically and efficiently adjust server capacity to 
support the player base at a significant cost savings [3].  
The cloud model also offers advantages to P2P game 
architectures. Gamers can now host 24x7 “peer servers” on 
the cloud, rather than locally on their machine or by 
renting commercial game server space. This offers great 
advantages in reliability, performance, security, and most 
of all, excellent cost savings. Gamers have long hosted 
games on their own computer, acting as a de facto game 
server. This enables the gamer maintain high levels of 
control over game parameters, access control, performance, 
and other factors. However, the huge associated bandwidth 
and security vulnerabilities put this method out-of-reach 
for many casual gamers. Cloud-based service providers 
such as Amazon Web Services now offer these gamers the 
option of building custom game servers on the cloud.  
Iosup, et al., [4] explored the performance variability 
of cloud service providers, such as Amazon’s web services 
(called 
AWS), 
through 
the 
use 
of 
“performance 
indicators.” One example of said indicator is the response 
time of a “resource acquisition operation” provided by the 
Amazon EC2 Service. Iosup, et al. also investigated 
various performance metrics associated with so-called 
“social games” such as Farm Town and Mafia Wars. 
However, the study did not include First-Person Shooters.  
A First-Person Shooter (FPS) is a prominent type of 
game in which gameplay generally focuses on weapon-
based combat from a first-person perspective. Popular 
examples of FPS include the Doom, Half-Life, Halo, and 
the Call of Duty series. Players of FPS games have been 
shown to be especially sensitive to network conditions 
relative to other genres such as role playing games (RPG) 
or real-time strategy (RTS) games. For example, one study 
finds that while online RTS games are unaffected by 
latencies as high as 1000ms, the relatively faster-paced 
FPS requires a latency of less than 100ms [5]. 
Barker and Shenoy performed a gamer server case 
study wherein a popular First Person Shooter (Quake 3) 
dedicated server was installed and tested in a lab-based 
virtual machine [6]. The test included an evaluation of both 
map loading times and server latency metrics. However, 
44
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-256-1
ICNS 2013 : The Ninth International Conference on Networking and Services

there are no known studies evaluating the performance of 
an FPS game server hosted by a cloud provider.  
This study will explore performance parameters of a 
cloud-based FPS game server compared to established 
performance requirements of traditional client-server 
architecture.   
Section two of this paper will describe the setup of the 
study and the various configurations.  Section two will also 
present some response time results.  The third section will 
present the analysis of the results. Sections four and five 
will cover future work and the conclusion, respectively. 
 
 
II. 
THE STUDY 
Response time is a widely recognized measure of 
performance in a First Person Shooter [5]. Response times 
of 200 milliseconds or less are generally considered the 
benchmark for acceptable Quality of Experience in a FPS 
game [7]. For this study, a client-side response time will be 
measured by a player of a popular FPS game. Specifically, 
the virtual game server will be hosted on a cloud-based 
service provider. Client-side response times will be 
measured in a single-player (light server load), 8-player 
(moderate load), and 16-player (high server load) death 
match games.  
The first step was to configure a game server on a 
cloud environment. The Source Dedicated Server platform 
functions as a dedicated virtual game server for Source-
Engine games, such as the popular First Person Shooter 
“Half-Life” [8]. For this study, a Half-Life srdcs Game 
Server was configured on an Amazon EC2 instance. The 
server was installed on a “free usage tier” 32-bit Amazon 
Linux-based machine instance. The specific game server 
installed in this study can host up to 16 AI “bots” or human 
players.  
The game server is initially configured for a single-
player “deathmatch” game against fifteen AI-controlled 
bots. This will ensure data throughput consistent with a 
typical free-for-all type game session. However, the server 
load, with respect to network traffic, will be minimal. The 
client side response times are shown in Figure 1 below.  
 
 
Figure 1. 1 Player Game Response Times 
The next test session will simultaneously host 8 clients 
in a death match game. The remaining eight players will 
consist of AI bots. This test session will represent a 
moderate level of server network load. Response time 
measurements will again be taken client-side. These 
measurements are shown below in Figure 2.  
 
 
Figure 2.  Eight Player Game Response Times 
The final test session will consist of sixteen human 
players. This represents a maximum level of network load 
under typical death match conditions. Response time 
measurements will again be taken client-side. These 
measurements are shown below in Figure 3.  
 
 
Figure 3. Sixteen Player Game Response Times 
 
III. 
ANALYSIS 
A single player game session showed response times 
well within established acceptable limits. As seen in Figure 
1, this session saw a maximum response time of 
approximately 164 ms, with a vast majority of response 
within 90-150 ms. Figure 2, representing an eight-player 
game, also shows very good performance. However, the 
higher network traffic associated with an increase in 
human players shows a general increase in response times.  
Figure 3 above represents relatively high server and 
network 
loads, 
featuring 
a 
maximum 
of 
sixteen 
simultaneous human players. During this test session, the 
client-side response times increased significantly from the 
45
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-256-1
ICNS 2013 : The Ninth International Conference on Networking and Services

single player baseline test. Compared to the single player 
game, average response times increased by well over 10%. 
In fact, approximately 25 responses exceeded the 
established threshold of 200 ms ideal for FPS games. The 
occurrence of these instances was relatively low however, 
accounting for approximately 1% of all traffic.  
Although the sixteen-player test showed a significant 
increase in client-side response times from the single-
player baseline test, approximately 99% of server 
responses were 200 ms or less. This represents an 
acceptable user Quality of Experience according to typical 
measures of FPS game performance. It is unclear whether 
the increased network activity of 16 simultaneous network 
connections, or the associated increase in server processing 
requirements, caused the increase in response times.  
 
IV. 
FUTURE WORK 
This study utilized a simple Source Dedicated Server 
hosted on an Amazon free usage tier EC2 instance. 
Although performance was acceptable up to full (sixteen-
player) server and network loads, a general increase in 
response times was seen as the number of human players 
was increased. Future work may investigate the effects of 
thirty-two-player games of even Massively-Multiplayer 
Online (MMO) games to further explore the capabilities of 
cloud-based game servers. More advanced FPS games, 
such as Call of Duty or Crysis, will also increase the 
processing requirements of the server. Finally, network 
analysis or application performance monitoring may be 
used server-side in order to truly gauge game performance 
across multiple clients.  
 
V. 
CONCLUSION 
Traditionally, the client–server multiplayer video 
game architecture requires costly investment in physical 
game servers and network infrastructure. The peer-to-peer 
network model alleviates some of these concerns, but 
makes cheat prevention, software updates, and system 
monitoring far more difficult for the game publisher. 
However, modern cloud platform providers such as 
Amazon Web Services and Microsoft Azure offers video 
game companies the option to host virtual game servers in 
the cloud. These providers also give individual gamers the 
option to build and maintain custom game servers in the 
cloud. This study established the viability of a cloud-based 
FPS game server with respect to established performance 
parameters. 
 
REFERENCES 
 
 [1]  A. M. Khan, I. Arsov, M. Preda, S. Chabridon, and A. 
Beugnard. “Adaptable client-server architecture for mobile 
multiplayer games,” Proceedings of the 3rd International 
ICST 
Conference 
on 
Simulation 
Tools 
and 
Techniques (SIMUTools 
'10). 
Institute 
for 
Computer 
Sciences, 
Social-Informatics 
and 
Telecommunications 
Engineering), Brussels, Belgium, Article 11 , 2010. 
DOI=10.4108/ICST.SIMUTOOLS2010.8704 
http://dx.doi.org/10.4108/ICST.SIMUTOOLS2010.8704 
[retrieved: October, 2012] 
 [2] T. Hampel, T. Bopp, and R. Hinn. “A peer-to-peer 
architecture for massive multiplayer online games,”  
Proceedings of 5th ACM SIGCOMM workshop on Network 
and system support for games (NetGames '06). ACM, New 
York, 
NY, 
USA, 
, 
Article 
48, 
2006 
. 
DOI=10.1145/1230040.1230058 
http://doi.acm.org/10.1145/1230040.1230058 
[retrieved: 
October, 2012] 
 [3]  Microsoft. “Meet the ‘Plumbers’ Powering ‘Halo 4’ Infinity 
Multiplayer,” [Press Release]. October, 31, 2012. Retrieved 
from 
http://www.microsoft.com/en-
us/news/features/2012/oct12/10-31halo4.aspx. 
[retrieved: 
September, 2012] 
 [4]  A. Iosup, N. Yigitbasi, and D. Epema. “On the Performance 
Variability of Production Cloud Services,” Proceedings of 
the 2011 11th IEEE/ACM International Symposium on 
Cluster, Cloud and Grid Computing (CCGRID '11). IEEE 
Computer Society, Washington, DC, USA, 2011, pp. 104-
113.  
 [5]  M. Claypool and K. Claypool. “Latency and player actions 
in online games,” Communications ACM 49, November 11, 
2006, pp. 40-45.  
 [6]  S. K. Barker and P. Shenoy. “Empirical evaluation of 
latency-sensitive application performance in the cloud,” 
Proceedings of the first annual ACM SIGMM conference on 
Multimedia systems (MMSys '10). ACM, New York, NY, 
USA, 2010, pp. 35-46. DOI=10.1145/1730836.1730842 
http://doi.acm.org/10.1145/1730836.1730842 
[retrieved: 
September, 2012] 
 [7] W. Wu, A. Arefin, R. Rivas, K. Nahrstedt, R. Sheppard, and 
Z. Yang. “Quality of experience in distributed interactive 
multimedia environments: toward a theoretical framework,” 
Proceedings of the 17th ACM international conference on 
Multimedia (MM '09). ACM, New York, NY, USA, 2009, 
pp. 481-490.  
 [8]  "Source Dedicated Server Resource for Source-Engine 
Games," Source Dedicated Server (srcds). N.p., n.d. Web. 30 
November 
2012. 
<http://www.srcds.com/>. 
[retrieved: 
November, 2012] 
[9] Microsoft Azure is Microsoft’s cloud computing platform 
for building and managing applications and services. 2013. 
http://www.windowsazure.com/en-us/ [retrieved: January, 
2013] 
[10] 343 Industries is a video game development company 
headquartered in Kirkland, Washington. 343 Industries’ 
parent 
company 
is 
Microsoft 
Studios. 
2013. 
http://www.halowaypoint.com/en-US/. [retrieved: January, 
2013] 
 
46
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-256-1
ICNS 2013 : The Ninth International Conference on Networking and Services

