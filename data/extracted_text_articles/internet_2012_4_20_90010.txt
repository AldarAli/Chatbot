State-of-the-art in Chaotic Iterations-based Pseudorandom Numbers Generators
Application in Information Hiding
Jacques M. Bahi, Xiaole Fang, and Christophe Guyeux
FEMTO-ST Institute, UMR 6174 CNRS
University of Franche-Comt´e, Besanc¸on, France
Email:{jacques.bahi, xiaole.fang, christophe.guyeux}@univ-fcomte.fr
Abstract—The
conﬁdentiality
of
information
transmitted
through the Internet requires an intensive use of pseudorandom
number generators having strong security properties. For in-
stance, these generators are used to produce encryption keys, to
encrypt data with a one-time pad process, or to dissimulate infor-
mation into cover media. In our previous work, we have proposed
the use of discrete chaotic iterations to build pseudorandom
number generators that receive two inputted possibly deﬁcient
generators, and mix them to produce pseudorandom numbers
with high statistical qualities. In this article, we summarize
these contributions and we propose simple applications of these
generators for encryption and information hiding. For each
application, ﬁrst experimental evaluations are given, showing
that an attacker using these statistics as detection tools cannot
infer the presence of an hidden message into given cover
documents.
Keywords-Internet Security; Pseudorandom Number Genera-
tors; Information Hiding; Discrete Chaotic Iterations.
I. INTRODUCTION
Since pseudorandom sequences are easy to be generated
and processed, and due to their need in almost all crypto-
graphic protocols and information hiding schemes, PRNGs
(Pseudo Random Number Generators) are widely used for
a secure Internet use. Among other things, they are part of
the keys generation of any asymmetric cryptosystem, they
produce keystreams in symmetric cryptosystems, they deter-
mine which bits will receive the secret message in information
hiding, and so on. However, a lot of existing pseudorandom
number generators (PRNGs) used in numerical simulations
are eliminated for such applications, due to the requirements
of speed, statistical quality, and security in that context.
Recent years, some researchers have investigated with
success the use of chaotic dynamical systems to generate
pseudorandom sequences [1], [2]. Indeed, chaotic systems
have many advantages as unpredictability or disorder-like,
which are needed when producing complex sequences. They
are extremely sensitive to the initial states too: a minute
difference can cause a signiﬁcant change in output. All these
features ﬁt well the requirements of PRNGs, thus explaining
the proposal of such dynamics to secure exchanges. However,
chaotic systems using real numbers on inﬁnite bit representa-
tion, realized in ﬁnite computing precision, lead to short cycle
length, non-ideal distribution, and other deﬂation of this kind.
This is why chaotic systems on a inﬁnite space of integers
have been dig for these years, leading to the proposition to
use chaotic iterations (CIs) techniques to reach the desired
goals [3].
Having these goals in mind, we have investigated the propo-
sition to mix secure and fast PRNGs, to take beneﬁts from
their respective qualities [4], [5]. In [5], CIs have been proven
to be a suitable tool for fast computing iterative algorithms on
integers satisfying the topological chaotic property, as it has
been deﬁned by Devaney [6]. The way that mix two given
generators by using these chaotic iterations has been ﬁrstly
presented in Internet 2009 [3]. It was called “Old CIPRNG”.
Then, further investigations have been proposed in [7], [5],
[8]. These generators were chaotic and able to pass the most
stringent batteries of tests, even if the inputted PRNGs were
defective. This claim has been veriﬁed experimentally, by
evaluating the scores of the logistic map, XORshift, and
ISAAC generators through these batteries, when considering
them alone or after chaotic iterations. Then, in [9], a new
version of this family has been expressed. This so-called “New
CIPRNG” family uses a decimation of strategies leading to the
improvement of both speed and statistical qualities. Finally,
most recently, efﬁcient implementations on GPU (Graphics
Processing Unit) using a last family named XOR CIPRNG,
have been designed in [10], showing that a very large quantity
of pseudorandom numbers can be generated per second (about
20 Gsamples/s).
The objective of this article is to make a state-of-the-art
of chaotic iterations-based PRNGs, and to propose a possible
use of them in the ﬁeld of secrecy preservation through the
Internet, by using information hiding techniques. Random
binary sequences will be generated by the three methods
mentioned above and a XORshift generator. The application
of these pseudorandom bits for information hiding will be
carried out systematically, and results will be discussed in
order to verify that an attacker, who has only access to some
elementary statistical tests, cannot determine whether hidden
information are embedded into cover documents or not.
The remainder of this paper is organized in the following
way. In Section II, some basic deﬁnitions concerning chaotic
iterations and XORshift are recalled. Their use to produce
three new families of generators is recalled in the next section.
Section IV contains the proposed applications of the PRNGs
for information hiding. This summary of our previous works
in the ﬁeld of PRNGs and their applications ends by a
conclusion section, where our contribution is summarized and
intended future work is presented.
II. BASIC REMAINDERS
In this section, notations used in this document are intro-
duced, chaotic iterations embedded in the proposed pseudo-
random number generators (PRNGs) are deﬁned, and the well-
known XORshift generator is recalled.
90
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-204-2
INTERNET 2012 : The Fourth International Conference on Evolving Internet

(a)
(b)
0
2000
4000
6000
8000
10000
12000
14000
16000
18000
0
50
100
150
200
250
(c)
(d)
Figure 1: (a) The original image. (b) The hidden image. (c) Correlation distribution of the original image. (d) Histogram of
the original image.
A. Notations
Sn
→ the nth term of a sequence S = (S1, S2, . . .)
vi
→ the ith component of a vector v = (v1, . . . , vn)
f k
→ kth composition of a function f
Ja; bK
→ the interval {a, a + 1, . . . b} of integers
XN
→ the set of sequences belonging into X
strategy → a sequence of J1; NKN
S
→ the set of all strategies
Ck
n
→ the binomial coefﬁcient

0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
(d)
Figure 2: (a) Histogram of pixel values when LSBs are replaced by Old CI. (b) Histogram of pixel values when LBSs are an
hidden message xored with Old CI. (c) Correlation distribution of two adjacent pixels in Fig.(a). (d) Correlation distribution
of two adjacent pixels in Fig.(b).
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
(d)
Figure 3: (a) Histogram of pixel values when LSBs are replaced by New CI. (b) Histogram of pixel values when LBSs are an
hidden message xored with New CI. (c) Correlation distribution of two adjacent pixels in Fig.(a). (d) Correlation distribution
of two adjacent pixels in Fig.(b).
this new version of our PRNG is able to pass the famous
DieHARD statistical battery of tests [13]. Its security has been
improved compared to XORshift alone, and to our former
PRNG. However, this latter cannot pass the TestU01 [14]
battery, widely considered as the most comprehensive and
stringent battery of tests. This goal is achieved by using
XORshift and ISAAC as PRNG1 and PRNG2 in [8].
B. New CIPRNG
The New CI generator is designed by the following pro-
cess [9]. First of all, some chaotic iterations have to be done to
generate a sequence (xn)n∈N ∈

(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
Figure 4: (a) The encrypted Lena (one-time pad using Old CI). (b) Histogram of Fig.(a). (c) Correlation distribution of two
adjacent pixels in Fig.(a)
(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
Figure 5: (a) The encrypted Lena (one-time pad using New CI). (b) Histogram of Fig.(a). (c) Correlation distribution of two
adjacent pixels in Fig.(a)
published in [9]. It was initially using two XORshifts, showing
better speed and statistical performance while preserving
chaotic properties of the Old CIPRNG. For more information,
the reader is referred to [9].
C. XOR CIPRNG
Instead of updating only one cell at each iteration as Old
CI and New CI, we can try to choose a subset of components
and to update them together. Such an attempt leads to a kind
of merger of the two random sequences. When the updating
function is the vectorial negation, this algorithm can be simply
rewritten as follows [10]:

x0 ∈ J0, 2N − 1K, S ∈ J0, 2N − 1KN
∀n ∈ N∗, xn = xn−1 ⊕ Sn,
(2)
The single basic component presented in Eq. 2 is of
ordinary use as a good elementary brick in various PRNGs.
It corresponds to the discrete dynamical system in chaotic
iterations.
IV. APPLICATION EVALUATION
In this section, the application of PRNGs using CI methods
for information hiding is given.
A. The Proposed Information Hiding Method
Suppose that the size of the image is M × N. The steps of
the proposed information hiding algorithm using the CIPRNG
family are summed up below.
1) Generate a pseudorandom sequence S of length M ×N
using the above CI methods respectively.
2) Transform the image into a M × N integer sequence.
3) The LSBs (Least Signiﬁcant Bits) of the image integer
sequence are replaced by the generated random bits S.
These random LSBs will be treated as a keystream.
4) The information (text or picture) to hide is transformed
into a binary sequence.
5) The binary message is hiding into the random LSBs of
the image sequence, by using the bitwise exclusive or
operation between the two sequences, starting from a
selected position acting as part of the secret key.
Pseudorandom sequences generated by the three CI meth-
ods mentioned in the previous section, with two XORshift
generators and a given image, are used in this application to
process to an evaluation of the scheme.
B. First Experimental Evaluation of the Proposed Scheme
1) The context: The original image of size 713 × 713,
probably the most widely used test image for all kind of
processing algorithms (such as compression and encryption),
is depicted in Fig. 1-a. Fig. 1-c presents its histogram, and
Fig. 1-d shows the correlation distribution of two horizontal
adjacent pixels in this original image. Finally, information that
must be hidden into it is the picture of Fig. 1-b, which has
89 × 89 pixels.
2) Histogram and Horizontal Correlation: Two XORshift
generators are used to generate a random sequence based on
the old CI method. Results are shown in Fig. 2. Histograms
and correlation distributions (Fig. 2-a,b,c,d) are very closed to
each other, leading to the assumption that such a method can
well protect the hidden information when facing statistical
attacks. The same experimental validation has been applied
to the New CI method using two XORshift generators. Such
93
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-204-2
INTERNET 2012 : The Fourth International Conference on Evolving Internet

(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
Figure 6: (a) The encrypted Lena (one-time pad using XOR CI). (b) Histogram of Fig.(a). (c) Correlation distribution of two
adjacent pixels in Fig.(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(a)
0
2000
4000
6000
8000
10000
12000
14000
16000
0
50
100
150
200
250
(b)
(c)
(d)
Figure 7: (a) Histogram of pixel values when LSBs are replaced by XOR CI. (b) Histogram of pixel values when LBSs are a
hidden message xored with XOR CI. (c) Correlation distribution of two adjacent pixels in Fig.(a). (d) Correlation distribution
of two adjacent pixels in Fig.(b).
experiments lead to results that are shown in Fig. 3. These ﬁrst
results are encouraging and conﬁrm that simple histogram and
correlation evaluations cannot detect the presence of hidden
messages. The same conclusion can be claimed when using
the XOR CI generator, as it is depicted in Fig. 7.
3) All directions correlation coefﬁcients analysis: Using an
identical experimental evaluation than in [15], the correlation
coefﬁcients of the horizontal, vertical, and diagonal directions
of all the concerned images (original, with random as LSBs,
and with secret information in these LSBs) are shown in
Table I. It can be experimentally deduced that the correlation
properties of these images are very similar to each other. So
an attacker, whose intention is to analyze these coefﬁcients
in order to detect possible information hiding, cannot attain
his/her goal by such a simple experiment.
4) Initial condition sensitivity: One of the most important
properties of the chaotic sequences is that they are very
sensitive to their initial conditions. This property can help
to face an attacker who has access to the whole algorithm
and to an approximation of the secret key. His/her intention,
in this attack scenario, is to ﬁnd the exact secret key (the
seed of the keystream and the position of the message), by
making small changes on this key. If the keystream and the
position do not change a lot when the key is slightly updated,
then the attacker can converge by small changes to the used
secret key. In the experiments of Figure 8, we slightly alter
the keys and try to extract the hidden information from the
image. We can conclude that such optimistic attempts always
fail in recovering the message.
C. A small evaluation of Encryption
The dissimulation has been obtained in this paper by
using the CIPRNGs recalled previously as stream cyphers:
encryption is the result of the use of the bitwise exclusive
or (XOR) between the given message and pseudorandom
sequences generated from various CIPRNGs. We can wonder
whether an attacker, who has access to the histogram of LSBs,
can infer what can of CIPRNG has been used as keystream.
For obvious reasons, these histograms should at least be
uniform for each PRNG.
For illustration purpose, Lena has been encrypted by such
method using each of the three kind of CIPRNGs, and
histogram and correlation distribution of the encrypted image
have been computed. The resulting images are depicted in
Fig. 4 when using the Old CI method, in Fig. 5 for the New
CI one, and in Fig. 6 for the last PRNG recalled here. We
can show that this ﬁrst reasonable requirement seems to be
respected, even if this illustration is not a proof.
V. CONCLUSION
We have summarized in this paper our previous contribu-
tions in the ﬁeld of pseudorandom generators, and we have
proposed simple illustrative examples of use for information
hiding. The three family of CIPRNGs recalled here are namely
the Old CI, the New CI, and the XOR CI PRNGs. For each
generator, ﬁrsts experimental evaluations of a simple informa-
tion hiding scheme have been realized, to illustrate that that an
attacker using simple statistics cannot determine easily, only
by regarding the form of histograms or correlation distribu-
tions, the presence of an hidden message into a given doc-
ument. No evidence of dissimulation appears at ﬁrst glance,
when comparing histograms, correlation distribution, or all
94
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-204-2
INTERNET 2012 : The Fourth International Conference on Evolving Internet

(a)
(b)
(c)
Figure 8: (a) The difference of two random LSBs image using Old CI PRNG with slight change in initial condition. (b) The
difference of two random LSBs image using New CI PRNG with slight change in initial condition (c) The difference of two
random LSBs image using XOR CI PRNG with slight change in initial condition
Table I: Correlation coefﬁcients of two adjacent pixels in all directions in the original image, random LSBs images and
infomation intergraded random LSBs images
`````````
Image
Direction
Horizontal
Vertical
Diagonal
Original image
0.9793
0.9686
0.9488
Old CI
no info
0.9792
0.9686
0.9488
intergrading info
0.9792
0.9686
0.9488
New CI
no info
0.9793
0.9686
0.9488
intergrading info
0.9793
0.9686
0.9488
XOR CI
no info
0.9793
0.9686
0.9487
intergrading info
0.9793
0.9686
0.9487
directions’ correlation coefﬁcients. Furthermore, experiments
have illustrated high sensitivity to the secret parameters. These
simple evaluations do not imply the security of the proposed
scheme, they only illustrate that the use of the recalled PRNGs
for information hiding can be further investigated by more
stringent tools as steganalyzers and mathematical proofs.
REFERENCES
[1] Y. Hu, X. Liao, K. wo Wong, and Q. Zhou, “A true random
number generator based on mouse movement and chaotic
cryptography,” Chaos, Solitons & Fractals, vol. 40, no. 5,
pp. 2286–2293, 2009.
[2] L. D. Micco, C. Gonzaez, H. Larrondo, M. Martin, A. Plastino,
and O. Rosso, “Randomizing nonlinear maps via symbolic dy-
namics,” Physica A: Statistical Mechanics and its Applications,
vol. 387, no. 14, pp. 3373–3383, 2008.
[3] Q. Wang, C. Guyeux, and J. M. Bahi, “A novel pseudo-random
generator based on discrete chaotic iterations for cryptographic
applications,” INTERNET ’09, pp. 71–76, 2009.
[4] J. M. Bahi and C. Guyeux, “A new chaos-based watermarking
algorithm,” in SECRYPT 2010, International conference on
security and cryptography, (Athens, Greece), pp. 1–4, July
2010.
[5] J. M. Bahi and C. Guyeux, “Topological chaos and chaotic
iterations, application to hash functions,” in WCCI’10, IEEE
World Congress on Computational Intelligence, (Barcelona,
Spain), pp. 1–7, July 2010. Best paper award.
[6] R. L. Devaney, An Introduction to Chaotic Dynamical Systems.
Redwood City: Addison-Wesley, 2nd ed., 1989.
[7] J. Bahi, C. Guyeux, and Q. Wang, “A pseudo random numbers
generator based on chaotic iterations. application to watermark-
ing,” in WISM 2010, Int. Conf. on Web Information Systems and
Mining, vol. 6318 of LNCS, (Sanya, China), pp. 202–211, Oct.
2010.
[8] J. M. Bahi, C. Guyeux, and Q. Wang, “Improving random
number generators by chaotic iterations. application in data
hiding,” in ICCASM 2010, Int. Conf. on Computer Application
and System Modeling, (Taiyuan, China), pp. V13–643 – V13–
647, Oct. 2010.
[9] Q. Wang, J. Bahi, C. Guyeux, and X. Fang, “Randomness qual-
ity of CI chaotic generators. application to internet security,”
in INTERNET’2010. The 2nd Int. Conf. on Evolving Internet,
(Valencia, Spain), pp. 125–130, IEEE Computer Society Press,
Sept. 2010. Best Paper award.
[10] J. M. Bahi, R. Couturier, C. Guyeux, and P.-C. H´eam, “Efﬁcient
and cryptographically secure generation of chaotic pseudoran-
dom numbers on gpu,” CoRR, vol. abs/1112.5239, 2011.
[11] G. Marsaglia, “Xorshift rngs,” Journal of Statistical Software,
vol. 8(14), pp. 1–6, 2003.
[12] A. Rukhin, J. Soto, J. Nechvatal, M. Smid, E. Barker, S. Leigh,
M. Levenson, M. Vangel, D. Banks, A. Heckert, J. Dray, and
S. Vo, “A statistical test suite for the validation of random
number generators and pseudo random number generators for
cryptographic applications,” NIST Special Publication 800-22,
2010.
[13] G. Marsaglia, “Diehard: a battery of tests of randomness.”
http://www.stat.fsu.edu/pub/diehard/ [retrieved: July,2011].
[14] P. L’ecuyer and R. Simard, “Testu01: A software library in ansi
c for empirical testing of random number generators,” Labora-
toire de simulation et doptimisation. Universit de Montral IRO,
2009.
[15] G. Chen, Y. Mao, and C. K. Chui, “A symmetric image
encryption scheme based on 3d chaotic cat maps,” Chaos,
Solitons and Fractals, vol. 21, no. 3, pp. 749 – 761, 2004.
95
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-204-2
INTERNET 2012 : The Fourth International Conference on Evolving Internet

