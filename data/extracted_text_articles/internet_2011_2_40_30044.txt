Performance Analysis of a Keyed Hash Function based on Discrete and Chaotic
Proven Iterations
Jacques M. Bahi, Jean-François Couchot, and Christophe Guyeux*
University of Franche-Comté, Computer Science Laboratory (LIFC)
Belfort, France
Email: {jacques.bahi, jean-francois.couchot, christophe.guyeux}@univ-fcomte.fr
Abstract—Security of information transmitted through the
Internet is an international concern. This security is guaranteed
by tools like hash functions. However, as security ﬂaws have
been recently identiﬁed in the current standard in this domain,
new ways to hash digital media must be investigated. In this
document an original keyed hash function is evaluated. It is
based on chaotic iterations and thus possesses various topological
properties as uniform repartition and sensibility to its initial
condition. These properties make our hash function satisfy the
requirements in this ﬁeld. This claim is veriﬁed qualitatively
and experimentally in this research work, among other things
by realizing simulations of diffusion and confusion.
Keywords-Keyed Hash Function; Internet Security; Mathe-
matical Theory of Chaos; Topology.
I. INTRODUCTION
Hash functions are fundamental tools to guarantee the
quality and security of data exchanges through the Internet.
For instance, they allow to store passwords in a secure manner
or to check whether a download has occurred without any
error. SHA-1 is probably the most widely used hash functions.
It is present in a large panel of security applications and
protocols through the Internet. However, in the last decade,
security ﬂaws have been detected in SHA-1. As the SHA-
2 variants are algorithmically close to SHA-1 and produce
ﬁnally message digests on principles similar to the MD4 and
MD5 message digest algorithms, a new hash standard based
on original approaches is then eagerly awaited. In this context,
we have proposed a new hash function in [1]. Based on
chaotic iterations, this function behaves completely different
from approaches followed until now.
However chaos insertion to produce hash functions is
sometimes disputed [2], [3]. Indeed existing chaos-based hash
functions only include “somewhere” some chaotic functions
of real variables like logistic, tent, or Arnold’s cat maps.
It is then supposed that the ﬁnal hash function preserves
these properties [4], [5], [6], [7]. But, in our opinion, this
claim is not so evident. Moreover, even if these algorithms
are themselves proven to be chaotic, their implementations
on ﬁnite machines can result to lost of chaos property.
Among other things, the main reason is that chaotic functions
(embedded in these researches) only manipulate real numbers,
which do not exist in a computer. In [1], the hash function
we have proposed does not simply integrate chaotic maps into
algorithms hoping that the result remains chaotic; we have
conceived an algorithm and have mathematically proven that
it is chaotic. To do both our theory and our implementation
are based on ﬁnite integer domains and chaotic iterations.
* Authors in alphabetic order
Chaotic iterations (CIs) were formerly a way to formalize
distributed algorithms through mathematical tools [8]. Thanks
to these CIs, it was thus possible to study the convergence
of synchronous or asynchronous programs over parallel, dis-
tributed, P2P, grid, or GPU platforms, in a view to solve
linear and non-linear systems. CIs have recently revealed
numerous interesting properties of disorder formalized into
the mathematical topology framework. These studies lead to
the conclusion that the chaos of CIs is very intense and
that chaos class can tackle the computer science security
ﬁeld [9]. As CIs only manipulate binary digits or integers, we
have shown that they are amenable to produce truly chaotic
computer programs. Among other things, CIs have been
applied to pseudo-random number generators [10] and to an
information hiding scheme [11] in the previous sessions of the
International Conference on Evolving Internet. In this paper,
the complete unpredictable behavior of chaotic iterations is
capitalized to produce a truly chaotic keyed hash function.
The remainder of this research work is organized in the
following way. In Section II, basic recalls concerning chaotic
iterations and Devaney’s chaos are recalled. Our keyed hash
function is presented, reformulated, and improved in Sec-
tion III. Performance analyses are presented in the next two
sections: in the ﬁrst one a qualitative evaluation of this
function is outlined, whereas in the second one it is evaluated
experimentally. This research work ends by a conclusion
section, where our contribution is summarized and intended
future work is given.
II. DISCRETE AND CHAOTIC PROVEN ITERATIONS
This section gives some recalls on topological chaotic
iterations. Let us ﬁrstly discuss about domain of iterated
functions. As far as we know, no result rules that the chaotic
behavior of a function that has been theoretically proven
on R remains valid on the ﬂoating-point numbers, which
is the implementation domain. Thus, to avoid loss of chaos
this research work presents an alternative, namely to iterate
boolean maps: results that are theoretically obtained in that
domain are preserved during implementations.
Let us denote by Ja; bK the following interval of integers:
{a, a + 1, . . . , b}. A system under consideration iteratively
modiﬁes a collection of n components. Each component
i ∈ J1; nK takes its value xi among the domain B = {0, 1}.
A conﬁguration of the system at discrete time t (also said
at iteration t) is the vector xt = (xt
1, . . . , xt
n) ∈ Bn. In
what follows, the dynamics of the system is particularized
with the negation function ¬ : Bn → Bn such that ¬(x) =
(xi, . . . , xn) where xi is the negation of xi.
52
INTERNET 2011 : The Third International Conference on Evolving Internet
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-141-0

In the sequel, the strategy S = (St)t∈N is the sequence
deﬁning which component is updated at time t and St denotes
its t−th term. We introduce the function F¬ that is deﬁned
for the negation function by:
F¬ : J1; nK × Bn
→
Bn
F¬(s, x)j
=
 xj if j = s
xj otherwise.
With such a notation, conﬁgurations are deﬁned for times
t = 0, 1, 2, . . . by:
 x0 ∈ Bn and
xt+1 = F¬(St, xt) .
(1)
Finally, iterations deﬁned in (1), called “chaotic itera-
tions” [8], can be described by the following system
 X0
=
((St)t∈N, x0) ∈ J1; nKN × Bn
Xk+1
=
G¬(Xk)
,
(2)
such that
G¬

10110100 11100111 11010011 10111011 00001110
11000100 00011101 00110010 11111000 11101001
11110001.
The whole string is copied, but in the opposite direction:
10101001 10100011 00101010 00001101 11111100
10110100 11100111 11010011 10111011 00001110
11000100 00011101 00110010 11111000 11101001
11110001 00011111 00101110 00111110 10011001
01110000 01000110 11100001 10111011 10010111
11001110 01011010 01111111 01100000 10101001
10001011 0010101.
The string whose length is a multiple of 512 is obtained,
by duplicating enough this string and truncating at the next
multiple of 512. This string, in which the whole original text
is contained, is denoted by D. Finally, we split our obtained
string into blocks of 256 bits and apply to them the exclusive-
or function, from the ﬁrst two blocks to the last one. It results
a 256 bits sequence, that is in our example:
11111010 11100101 01111110 00010110 00000101
11011101 00101000 01110100 11001101 00010011
01001100 00100111 01010111 00001001 00111010
00010011 00100001 01110010 01000011 10101011
10010000 11001011 00100010 11001100 10111000
01010010 11101110 10000001 10100001 11111010
10011101 01111101.
The conﬁguration x0 is the result of this pre-treatment and is
a sequence of n = 256 bits. Notice that some distinct texts
lead to the same string.
Let us build now the strategy (St)t∈N that depends on both
the original message and a given key.
C. Computing (St)t∈N
To obtain the strategy S, an intermediate sequence (ut)t∈N
is constructed from D, as follows:
1) D is split into blocks of 8 bits. Let (ut)t∈N be the ﬁnite
sequence where ut is the decimal value of the tth block.
2) A circular rotation of one bit to the left is applied to
D (the ﬁrst bit of D is put on the end of D). Then the
new string is split into blocks of 8 bits another time.
The decimal values of those blocks are added to (ut).
3) This operation is repeated again 6 times.
Because of the function θ 7−→ 2θ (mod 1) is known to be
chaotic in the sense of Devaney [12], we deﬁne the strategy
(St)t∈N with:
St = (ut + 2 × St−1 + t)
mod 256,
which is then highly sensitive to initial conditions and then to
changes of the original text. On the one hand, when a keyed
hash function is desired, this sequence (St)t∈N is initialized
with the given key k (i.e., S0 = k). On the other hand, it is
initialized to u0 if the hash function is unkeyed.
D. Computing the digest
To construct the digest, chaotic iterations of G¬ are realized
with initial state X0 = ((St)t∈N, x0) as deﬁned above.
The result of these iterations is a n = 256 bits vector.
Its components are taken 4 per 4 bits and translated into
hexadecimal numbers, to obtain the hash value:
63A88CB6AF0B18E3BE828F9BDA4596A6
A13DFE38440AB9557DA1C0C6B1EDBDBD.
As a comparison if we replace “The original text” by “the
original text”, the hash function returns:
33E0DFB5BB1D88C924D2AF80B14FF5A7
B1A3DEF9D0E831194BD814C8A3B948B3.
We then investigate qualitative properties of this algorithm.
IV. QUALITATIVE ANALYSIS
We show in this section that, as a consequence of recalled
theoretical results, this hash function tends to verify desired
informal properties of a secure keyed one-way hash function.
A. The avalanche criteria
Let us ﬁrst focus on the avalanche criteria, which means
that a difference of one bit between two given medias has
to lead to completely different digest. In our opinion, this
criteria is implied by the topological properties of sensitive
dependence to the initial conditions, expansivity, and Lya-
punov exponent. These notions are recalled below.
First, a function f has a constant of expansivity equal to ε
if an arbitrarily small error on any initial condition is always
magniﬁed till ε. In our iteration context and more formally,
the function G¬ veriﬁes the expansivity property if there exists
some constant ε > 0 such that for any X and Y in X, X ̸= Y ,
we can ﬁnd a k ∈ N s.t. d(Gk
¬(X), Gk
¬(Y )) ⩾ ε. We have
proven in [16] that, (X, G¬) is an expansive chaotic system.
Its constant of expansivity is equal to 1.
Next, some dynamical systems are highly sensitive to small
ﬂuctuations into their initial conditions. The constants of
sensibility and expansivity have been historically deﬁned to
illustrate this fact. However, in some cases, these variations
can become enormous, can grow in an exponential manner
in a few iterations, and neither sensitivity nor expansivity
are able to measure such a situation. This is why Alexander
Lyapunov has proposed a new notion being able to evaluate
the ampliﬁcation speed of these ﬂuctuations we now recall:
Deﬁnition 2 (Lyapunov Exponent) Let be given an itera-
tive system x0 ∈ X and xt+1 = f(xt). Its Lyapunov exponent
is deﬁned by:
lim
t→+∞
1
t
t
X
i=1
ln
 f ′ 
reason (among many) why this property is important is that
on most computer systems user passwords are stored as
the cryptographic hash of the password instead of just the
plaintext password. Thus an attacker who gains access to the
password ﬁle cannot use it to then gain access to the system,
unless it is able to invert target message digest of the hash
function.
We now explain why, topologically speaking, our hash
function is resistant to preimage attacks. Let m be the message
to hash, (S, x0) its normalized version (i.e., the initial state
of our chaotic iterations), and M = h(m) the digest of m by
using our method. So chaotic iterations with initial condition
(S, M) and iterate function G¬ have x0 as ﬁnal state. Thus
it is impossible to invert the hash process with a view to
obtain the normalized message by using the digest. Such an
attempt is equivalent to try to forecast the future evolution
of chaotic iterations by only using a partial knowledge of
its initial condition. Indeed, as M is known but not S, the
attacker has an incertitude on the initial condition. he only
knows that this value is into an open ball of radius 1 centered
at the point M, and the number of terms of such a ball is
inﬁnite.
With such an incertitude on the initial condition, and due
to the numerous chaos properties possessed by the chaotic
iterations (as these stated in Section IV-A), this prediction is
impossible. Furthermore, due to the transitivity property, it is
possible to reach all of the normalized medias, when starting
to iterate into this open ball. Indeed, it is possible to establish
that, all of these possible normalized medias can be obtained
in at most 256 iterations, and we iterate at least 519 times
to obtain our hash value (c.f. Proposition 2 below). Finally,
to ﬁnd the normalized media does not imply the discovery of
the original plain-text.
V. QUANTITATIVE AND EXPERIMENTAL EVALUATIONS
Let us ﬁrst give some examples of hash values before
discussing about the algorithm complexity.
A. Hash values
Let us now consider our hash function with n = 128. To
give illustration of the confusion and diffusion properties, we
will use this function to generate hash values in the following
cases:
Case 1. The original text message is the poem Ulalume
(E.A.Poe), which is constituted by 104 lines, 667
words, and 3754 characters.
Case 2. We change serious by nervous in the verse “Our
talk had been serious and sober”
Case 3. We replace the last point ‘.’ with a coma ‘,’.
Case 4. In “The skies they were ashen and sober”, skies
becomes Skies.
Case 5. The new original text is the binary value of the
Figure 1.
Case 6. We add 1 to the gray value of the pixel located in
position (123,27).
Case 7. We substract 1 to the gray value of the pixel located
in position (23,127).
The corresponding hash values in hexadecimal format are:
Case 1.C0EA2325BBF956D27C3561977E48B3E1,
Case 2.6C4AC2F8579BCAB95BAD68468ED102D6,
Case 3.A538A76E6E38905DA0D35057F1DC1B14,
Figure 1: The original plain-image.
Case 4.01530A057B6A994FBD3887AF240F849E,
Case 5.DE188603CFE139864092C7ABCD21AE50,
Case 6.FF855E5A626532A4AED99BACECC498B1,
Case 7.65DB95737EFA994DF37C7A6F420E3D07.
These simulation results are coherent with the topological
properties of sensitive dependence to the initial condition,
expansivity, and Lyapunov exponent: any alteration in the
message causes a substantial difference in the ﬁnal hash value.
B. Algorithm Complexity
In this section is evaluated the complexity of the above hash
function for a size l of the media (in bits).
Proposition 1 The stages of initialization (Sections III-B
and III-C) need O(l) elementary operations to be achieved.
Proof: In this stage only linear operations over binary
tables are achieved, such as: copy, circular shift, or inversion.
Let us consider the digest computation stage (Section III-D).
Proposition 2 The digest computation stage requires less
than 2l + 2 log2(l + 1) + 515 elementary operations.
Proof: The cost of an iteration is reduced to the negation
operation on a bit, which is an elementary operation. Thus,
the second stage is realized in t elementary operations, where
t is the number of terms into the sequence S. But S has the
same number of terms than u, and u and D have the same
size (indeed, to build u, D has been copied 8 times, and bits
of this sequence have been regrouped 8 per 8 to obtain the
terms of u). To sum up, the size of D is equal to the total
number of elementary operations of the digest computation
stage.
The following operations are realized to obtain D.
1) The digit 1 is added: D has l + 1 bits.
2) The
binary
value
of
the
size
is
added,
followed
by
another
bit:
D
has
l + 2 + log2(l + 1) bits.
3) This string is copied after inversion: D has now
2 × (l + 2 + log2(l + 1)) bits.
4) Lastly, this string is copied until the next multiple of
512: in the worst situation, 511 bits have been added,
so D has in the worst situation 2l + 2 log2(l + 1) + 515
bits.
We can thus conclude that:
Theorem 1 The computation of an hash value is linear with
the hash function presented in this research work.
55
INTERNET 2011 : The Third International Conference on Evolving Internet
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-141-0

0
500
1000
1500
2000
2500
3000
3500
4000
20
40
60
80
100
120
(a) Original text (ASCII)
0
10
20
30
40
50
60
70
0
2
4
6
8
10
12
14
16
(b) Digest (Hexadecimal)
Figure 2: Values repartition of Ulalume poem
C. Experimental Evaluation
We focus now on the illustration of the diffusion and
confusion properties [17]. Let us recall that confusion refers
to the desire to make the relationship between the key and the
ciphertext as complex and involved as possible, whereas diffu-
sion means that the redundancy in the statistics of the plaintext
must be "dissipated" in the statistics of the ciphertext. Indeed,
the avalanche criterion is a modern form of the diffusion, as
this term means that the output bits should depend on the
input bits in a very complex way.
1) Uniform repartition for hash values:
To show the
diffusion and confusion properties veriﬁed by our scheme,
we ﬁrst give an illustration of the difference of characters
repartition between a plain-text and its hash value when the
original message is again the Ulalume poem. In Figure 2a,
the ASCII codes are localized within a small area, whereas
in Figure 2b the hexadecimal numbers of the hash value are
uniformly distributed.
A similar experiment has been realized with a message
having the same size, but which is only constituted by the
character “0”. The contrast between the plain-text message
and its digest are respectively presented in Figures 3a and 3b.
Even under this very extreme condition, the distribution of the
digest still remains uniform. To conclude, these simulations
0
500
1000
1500
2000
2500
3000
3500
4000
45
46
47
48
49
50
51
(a) Original text (ASCII)
0
10
20
30
40
50
60
70
0
2
4
6
8
10
12
14
16
(b) Digest (Hexadecimal)
Figure 3: Values repartition of the “00000000” message
1 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90
0
100
200
300
Figure 4: Histogram
tend to indicate that no information concerning the original
message can be found into its hash value, as it is recom-
mended by the Shannon’s diffusion and confusion.
2) Behavior through small random changes:
We now
consider the following experiment. A ﬁrst message of 100
bits is randomly generated, and its hash value of size 80
bits is computed. Then one bit is randomly toggled into
this message and the digest of the new message is obtained.
These two hash values are compared by using the hamming
distance, to compute the number Bi of changed bits. This test
is reproduced 10000 times. The corresponding distribution of
Bi is presented in Figure 4.
As desired, Figure 4 show that the distribution is centered
around 40, which reinforces the conﬁdence put into the good
capabilities of diffusion and confusion of the proposed hash
algorithm.
3) Statistic analysis of diffusion and confusion: Finally, we
generate 1000 sequences of 1000 bits, and for each of these
sequences, we toggle one bit, thus obtaining a sequence of
1000 couples of 1000 bits. As previously, the two digests of
each couple i are obtained, and the hamming distance Bi
56
INTERNET 2011 : The Third International Conference on Evolving Internet
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-141-0

Bmin
Bmax
B
P(%)
∆B
∆P(%)
N = 256
50
92
67.57
52.78
8.89
6.95
N = 512
47
82
65.13
51.11
7.65
5.87
N = 1024
47
81
63.01
52.10
7.51
5.71
Table I: Statistical performance of the proposed hash function
between these digests are computed. To analyse these results,
the following common statistics are used.
• Mean changed bit number B = 1
N
PN
i=1 Bi.
• Mean changed probability P =
B
128.
• ∆B =
r
1
N − 1
PN
i=1(Bi − B)2.
• ∆P =
r
1
N − 1
PN
i=1( Bi
128 − P)2.
The obtained statistics are listed in Table I. Obviously,
both the mean changed bit number B and the mean changed
probability P are close to the ideal values (64 bits and 50%,
respectively), which illustrates the diffusion and confusion
capability of our algorithm. Lastly, as ∆B and ∆P are very
small, these capabilities are very stable.
VI. CONCLUSION
MD5 and SHA-0 have been broken in 2004. An attack
over SHA-1 has been achieved with only 269 operations
(CRYPTO-2005), that is, 2000 times faster than a brute force
attack (that requires 280 operations). Even if 269 operations
still remains impossible to realize on common computers,
such a result based on a previous attack on SHA-0 is a very
important one: it leads to the conclusion that SHA-2 is not as
secure as it is required for the Internet applications. So new
original hash functions must be found.
In this research work, a new hash function has been
presented. The security in this case has been guaranteed by the
unpredictability of the behavior of the proposed algorithms.
The algorithms derived from our approach satisfy important
properties of topological chaos such as sensitivity to initial
conditions, uniform repartition (as a result of the transitivity),
unpredictability, and expansivity. Moreover, its Lyapunov ex-
ponent can be as great as needed. The results expected in our
study have been experimentally checked. The choices made in
this ﬁrst study are simple: compression function inspired by
SHA-1, negation function for the iteration function, etc. The
aim was not to ﬁnd the best hash function, but to give simple
illustrated examples to prove the feasibility in using the new
kind of chaotic algorithms in computer science. Finally, we
have shown how the mathematical framework of topological
chaos offers interesting qualitative and qualitative tools to
study the algorithms based on our approach.
In future work, we will investigate other choices of iteration
functions and chaotic strategies. We will try to characterize
topologically the diffusion and confusion capabilities. Other
properties induced by topological chaos will be explored and
their interest for the realization of hash functions will be
deepened.
REFERENCES
[1] J. M. Bahi and C. Guyeux, “Hash functions using chaotic it-
erations,” Journal of Algorithms & Computational Technology,
vol. 4, no. 2, pp. 167–181, 2010.
[2] C. song Zhou and T. lun Chen, “Extracting information masked
by chaos and contaminated with noise: Some considerations
on the security of communication approaches using chaos,”
Physics Letters A, vol. 234, no. 6, pp. 429 – 435, 1997.
[3] W. Guo, X. Wang, D. He, and Y. Cao, “Cryptanalysis on a
parallel keyed hash function based on chaotic maps,” Physics
Letters A, vol. 373, no. 36, pp. 3201 – 3206, 2009.
[4] X. M. Wang, J. S. Zhang, and W. F. Zhang, “One-way hash
function construction based on the extended chaotic maps
switch,” Acta Phys. Sinici., vol. 52, No. 11, pp. 2737–2742,
2003.
[5] D. Xiao, X. Liao, and Y. Wang, “Improving the security of a
parallel keyed hash function based on chaotic maps,” Physics
Letters A, vol. 373, no. 47, pp. 4346 – 4353, 2009.
[6] ——, “Parallel keyed hash function construction based on
chaotic neural network,” Neurocomputing, vol. 72, no. 10-12,
pp. 2288 – 2296, 2009, lattice Computing and Natural Com-
puting (JCIS 2007) / Neural Networks in Intelligent Systems
Designn (ISDA 2007).
[7] D. Xiao, F. Y. Shih, and X. Liao, “A chaos-based hash function
with both modiﬁcation detection and localization capabilities,”
Communications in Nonlinear Science and Numerical Simula-
tion, vol. 15, no. 9, pp. 2254 – 2261, 2010.
[8] D. Chazan and W. Miranker, “Chaotic relaxation,” Linear
algebra and its applications, pp. 199–222, 1969.
[9] C. Guyeux, “Le désordre des itérations chaotiques et leur utilité
en sécurité informatique,” Ph.D. dissertation, Université de
Franche-Comté, 2010.
[10] Q. Wang, J. Bahi, C. Guyeux, and X. Fang, “Randomness qual-
ity of CI chaotic generators. application to internet security,”
in INTERNET’2010. The 2nd Int. Conf. on Evolving Internet.
Valencia, Spain: IEEE Computer Society Press, Sep. 2010, pp.
125–130, best Paper award.
[11] C. Guyeux and J. Bahi, “An improved watermarking algorithm
for internet applications,” in INTERNET’2010. The 2nd Int.
Conf. on Evolving Internet, Valencia, Spain, Sep. 2010, pp.
119–124.
[12] R. L. Devaney, An Introduction to Chaotic Dynamical Systems,
2nd ed.
Redwood City, CA: Addison-Wesley, 1989.
[13] Knudsen,
“Chaos
without
nonperiodicity,”
Amer.
Math.
Monthly, vol. 101, 1994.
[14] S. Bakhtiari, R. Safavi-Naini, and J. Pieprzyk, “Keyed hash
functions,” in Cryptography: Policy and Algorithms, ser. Lec-
ture Notes in Computer Science, E. Dawson and J. Golic, Eds.
Springer Berlin / Heidelberg, 1996, vol. 1029, pp. 201–214.
[15] J. Zhang, X. Wang, and W. Zhang, “Chaotic keyed hash func-
tion based on feedforward-feedback nonlinear digital ﬁlter,”
Physics Letters A, vol. 362, pp. 439–448, 2007.
[16] C. Guyeux, N. Friot, and J. Bahi, “Chaotic iterations versus
spread-spectrum: chaos and stego security,” in IIH-MSP’10, 6-
th Int. Conf. on Intelligent Information Hiding and Multimedia
Signal Processing, Darmstadt, Germany, Oct. 2010, pp. 208–
211.
[17] C. E. Shannon, “Communication theory of secrecy systems,”
Bell Systems Technical Journal, vol. 28, pp. 656–715, 1949.
57
INTERNET 2011 : The Third International Conference on Evolving Internet
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-141-0

