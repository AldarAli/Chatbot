Automatic Floor Map Construction for Indoor Localization
Xin Luo, Albert Kai-sun Wong, Mu Zhou, Xuning Zhang, and Chin-Tau Lea
Electronic and Computer Engineering Department
The Hong Kong University of Science and Technology
Clear Water Bay, Kowloon, Hong Kong
Emails: xluo@connect.ust.hk, eealbert@ust.hk, zhoumu@cqupt.edu.cn, eexuning@ust.hk, and eelea@ece.ust.hk.
Abstract—Existing indoor localization systems based on Wi-Fi
Received Signal Strength (RSS) ﬁngerprinting often assume the
knowledge of a map of the coverage area and involve a tedious
manual survey process at a set of sample locations along this
map. In this paper, we describe an automatic graphical ﬂoor map
and radio ﬁngerprints generation system, called the Intelligent
Mobility Mapping System (IMMS), which applies the concepts
of crowd-sourcing and Simultaneous Localization and Mapping
(SLAM) to construct a ﬂoor map in support of indoor people
localization and tracking. IMMS makes use of high similar
patterns in crowd-sourced traces of RSS measurements to identify
location segments in the coverage area and to construct a
graphical ﬂoor map. With IMMS, the elaborate off-line manual
data collection process is eliminated.
Keywords–Wi-Fi SLAM; Indoor Localizations; Graph Theory;
Mobility Mapping.
I.
INTRODUCTION
Indoor localization based on radio signals has been a
focus of research for over 10 years. Kong et al. [1] study
the use of CDMA2000 pilot signals to record the ﬁngerprints
for radio map construction. The ﬁngerprinting approach for
indoor localization typically requires a time consuming off-
line survey process for building a radio map. Various proposals
have been made to reduce the complexity of this process.
Ouyang et al. [2], proposed to use unlabeled Wi-Fi Received
Signal Strength (RSS) data to enhance the radio map created
by labeled survey data. Zhang et al. [3], used a pedestrian
mobility model based on knowledge of the physical indoor
map to enhance localization.
Recently, the new concept of Simultaneous Localization
and Mapping (SLAM) has been developed with the objec-
tive of minimizing the off-line survey effort [4]. A SLAM
system gathers location and mapping information at the same
time, and requires only a very short time for off-line survey.
Typically, SLAM records a user’s ’footprint’ using Microelec-
tromechanical System (MEMS) devices such as accelerometer,
gyroscopes and magnetometers on a mobile device, and labels
the RSS measurements with this footprint information to
construct the mobility maps. Then, the system can locate
users on this constructed indoor map in the on-line stage. For
example, the system proposed by Shin et al. [5] constructs a
ﬂoor plan of a building by integrating the number of walking
steps (from pedometer), the walking orientation (from magne-
tometer), and the RSS values recorded with user movements.
Zhou et al. [6] use only Wi-Fi RSS measurements from one
or multiple individuals walking around the coverage. Similar
RSS measurements are clustered and aligned to construct a
map for the coverage area.
A. Main contributions
In this paper, we present a system called the Intelligent
Mobility Mapping System (IMMS), which is a crowd-sourced
system that sporadically collects traces of RSS measurements
from users moving around the indoor coverage area as they
carry on their daily routines. IMMS automatically creates
graphical ﬂoor maps to support Wi-Fi RSS-based indoor local-
ization and tracking. There are three modules in IMMS. The
ﬁrst module is designed to facilitate the subsequent processes
by various data pre-processing methods. The second module
is designed to ﬁnd the highly similar pieces of measurements
in traces. IMMS estimates similarities of measurements in
different traces by correlations. Then, the resemblant measure-
ments in different RSS traces are clustered as High Cross-
Trace Correlation Patterns (HCP), and the intersections of
these HCPs are used to segment traces into Atomic Location
Segments (ALSs). The third module is designed to construct
the draft graphical ﬂoor map and radio map. The ﬂoor map
is a simple planar embedding of a drawing that represents the
interconnections of ALSs.
Section II overviews the system framework. Section III de-
scribes the location segment recognition algorithm and Section
IV explains the graph drawing procedures.
B. Notations
Notations to be used in this paper are ﬁrst summarized in
Table I.
TABLE I. IMPORTANT NOTATIONS
Symbol
Meaning
Rl
lth trace
νl
i
ith measurement in lth trace
S
Raw data matrix
N
Number of Traces in S
Υ
Number of measurements in S
M
Number of hearable APs in the target area
C
Cross-Trace Correlation (CTC) matrix
C{f,g}
Submatrix of CTC matrix corresponds to Rf and Rg
C{f,g}
i,j
A element in C{f,g}
Q
Quantized matrix of C
xi
Row breaking points
yi
Column breaking points
G
Geometric map
U
Set of unique vertices/ALS of graph G
E
Set of unique edges of graph G
d(∗)
Direction of an edge
I
Indication matrix of endpoints
II.
SYSTEM OVERVIEW
During the data collection phase, traces of RSS measure-
ments are recorded from mobile phones when users move
around the coverage area as they conduct their daily activities
155
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

indoors. For a user, the RSS measurements are collected at a
regular time interval (1 read/sec by default) when movement is
detected. Data collection stops when the user ceases moving.
Each measurement is a sample vector that contains the mea-
sured RSSs from a set of hearable Wi-Fi APs. The recorded
traces are uploaded to IMMS in cloud.
IMMS
Data Pre-processing
Missing Values Imputation
Dimension Reduction
Traces Segmentation and Locations 
Recognition
Cross-Trace Correlation Calculation
Noisy Data Flattening
High CTC Pattern Recognition
Traces Segmentation and Identiﬁcation
Unique Vertices and Edges Identiﬁcation
Floor Map Construction/Visualization
Depth First Block Search
Path-Finding 
Planar Embedding
Figure 1. The System Framework
IMMS compares the unlabeled measurements in each pair
of traces to see if there are highly similar ones. It is expected
that measurements in two traces would exhibit similar distribu-
tions if they were collected at nearby places. A string of similar
measurements between two traces form what we call a High
Correlation Pattern (HCP). Intersecting the HCPs form by a
given trace with all other traces allows us to segment HCPs into
what we call ALS, which we expect would represent corridor
sections between intersections in the physical environment. By
observing how the ALSs are connected in the traces, we can
then construct a 2D graphical ﬂoor map. The architecture of
IMMS is shown in Fig.1. It contains three modules: data pre-
processing, traces segmentation and locations recognition, and
ﬂoor map.
The data pre-processing module includes missing value
imputation and dimension reduction. Because of the limited
coverage of each AP and the random variation of the RSS
signals, most of the recorded RSS values are zero. In order
to insure the accuracy of the similarity evaluation, we need
to ﬁnd a way to impute these zero, or missing values. Based
on recommendation provided by Ouyang et al. [7], we impute
missing values with a number that is smaller than the minimum
collected RSS measurements. Moreover, because the total
number of APs in the coverage area can be very large [6], it
is desirable to reduce the data dimensionality to reduce com-
putation complexity. We apply Principal Component Analysis
(PCA) [8] to reduce the measurement dimensionality.
The details of the second module ,traces segmentation and
locations recognition module, and the third module, ﬂoor map
construction module, will be given in Section III and Section
IV, respectively.
III.
TRACES SEGMENTATION AND LOCATIONS
RECOGNITION
Our approach is based on the premise that the physical
space can be modeled as an interconnection of corridor seg-
ments that we call ALSs. Users tend to traverse an ALS in its
entirety, and in one of two directions. Each recorded trace of
Trace 1: 
Trace 2:
Trace 3:
Trace 4:
Trace 5:
HCP2
ALS2
ALS3
ALS1
HCP1
93 m
21m
Figure 2. Example of Traces, HCPs and ALSs
Wi-Fi measurements reﬂects the movement of a user through
a number of ALSs.
The objective of traces segmentation is to identify all ALSs
in the physical environment using traces from crowdsourcing.
The traces segmentation process starts with the recognition of
any high similarity pattern, which we call High Cross Trace
Correlation (CTC) Pattern, that may exist in any given pair
of traces. A High CTC Pattern (HCP) reﬂects a sequence of
overlapping ALSs between two traces. From the starting points
and ending points of all HCPs found in many trace pairs, we
can identify all the Breaking Points (BPs) which separate the
ALSs in all the traces. In other words, we identify all the
individual ALSs by intersecting all the HCPs. An example is
shown in Fig. 2. Computation of similarity is based on the
dimension-reduced measurements after data pre-processing.
A. Cross-Trace Correlation (CTC)
We measure the Cross-Trace Correlation (CTC) by the
Pearson product-moment [9] correlation coefﬁcient between
measurements in two different traces. Assume N traces are
collected. Let ℜf = (νf
1 , ..., νf
nf ) be the f th (f = 1, ..., N)
trace, where νf
i is the ith(i = 1, ..., nf) measurement in trace
ℜf, and nf is the number of measurements in the trace. Each
measurement is a row vector νf
i = [νf
i,1...νf
i,M], where νf
i,j
is the signal strength from the jth(j = 1, ..., M) AP. The
raw data of all N traces can be kept in a Υ × M matrix
S = [ℜ1ℜ2...ℜN ]T , where Υ = PN
f=1 nf is the total num-
ber of measurements in the data. After dimension reduction,
each measurement is reduced to k dimension, denoted as
µl
i (k−dimension row vector). The dimension reduced data
matrix is S = [R1R2...RN ]T (Υ × k matrix). We deﬁne
CTC matrix, C, as the matrix containing the sub-matrices
C{f,g}, where f, g = {1, ..., N}. C{f,g} contains CTC values
of measurements in trace Rf and Rg, denoted as C{f,g}
i,j
.
Deﬁnition 1: The CTC value of measurements µf
i ∈ Rf
and µg
j ∈ Rg is
C{f,g}
i,j
= corr(µf
i , µg
j ) =
1
σf
i σg
j
E[(µf
i − m)(µg
j − m)].
(1)
The column mean of the dimension reduced sample matrix
S is m = [m1...mk]. Then, mj =
PN
f=1
Pnf
i=1 µf
i,j
Υ
. σf
i , σg
j are
156
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

!"#$%&'
!"#$%&(
!"######!$###########!%########&&#
!"!
!!"
#!""""""""!
#!!!"!!!"!!!"!!!"!!!"!
HCP
Horizontal/col BPs
Missing value
Index Y
Index X
High CTC 
points
Vertical/row BPs
Figure 3. Examples of data structure and HCP
the standard derivation of measurements µf
i and µg
j , calculated
as σf
i =
qP
jϵk(µf
i,j − mj)2.
B. High CTC Pattern Recognition (HCPR)
The High CTC Pattern Recognition (HCPR) algorithm is
used to identify groups of correlated measurements in each
pair of traces. If two measurements, µf
i ∈ Rf and µg
j ∈ Rg
have high CTC value, we assume they are collected at nearby
physical locations in the two traces and we expect that:
•
µf
{i+1} and µg
{j+1} will continue to be a high CTC
point if the two users are traversing an ALS in the
same direction;
•
µf
{i+1} and µg
{j−1} will continue to be a high CTC
point if the two users are traversing an ALS in
opposite directions.
Thus, the high CTC points should continue in either the
southeasterly direction or southwesterly direction until trace
Rf and trace Rg diverge to two distinct ALSs. We call the
point that breaks the continuity of the high CTC points a
breaking point (BPs), shown in Fig. 3.
The HCPR algorithm ﬁrst quantizes all the CTC points
in the evaluated submatrix to two quantization levels, setting
all CTC values bigger than a given threshold thres as 1 and
all CTC values lower than thres as 0. The resulting matrix
is denoted as Q{f,g}. Then, HCRP groups a contiguous set
of high CTC points in the quantized matrix into a high CTC
Pattern (HCP).
Missing values and random variations in the raw mea-
surement may lead to unwanted breaks in the high CTC
pattern. Additionally, the walking speeds of different users
are different, and so the height and width of a HCP may
be different. We apply the following criteria to determine the
boundary of an HCP:
1) HCPR amounts to ﬁnding the row indexes and column
indexes of each submatrix in Q that encloses a continuous
cluster of 1s.
2) There should be a sufﬁciently large gap between two
different HCPs.
3) Small HCPs should be discarded as noise.
Our algorithm for ﬁnding HCPs works as follow. We start
from the top row of each sub-matrix Q{f,g} and scan from
left to the right for 1s. If none is found, we move to the next
Index X
Index Y
S1
S2
Low CTC 
point
High CTC 
point
(a)
Index X
Index Y
S1
S3
Low CTC 
point
High CTC 
point
(b)
Figure 4. Example of sub-matrices s1, s2, s3
row below and scan from left to right again. Once a 1, or a
high CTC point, is found, we mark the column and row index
of this point as (x, y), and keep searching in the southeasterly
or southwesterly direction for 1s. After an HCP is identiﬁed,
we resume the search for new HCP on the row we left off
from. Points covered in a search will be precluded from future
search. Starting from a 1, if the point to the southeast is also
a 1, then HCPR continues to look for a 1 in the southeast.
If a 0 appears, then HCPR calculates the sums of the three
sub-matrices indicated in Fig. 4. It compares s1 and s2, and
s1 and s3. If s2 = s1, it means that there are no new high
CTC points is added when the row number is increased (Fig.
4(a)), then the row gap counter: rowgap = rowgap + 1. If
s2 > s1, then one or more new high CTC points are added
when the row number is increased. In a similar way, if s3 = s1,
the column gap counter: colgap = colgap + 1. If s3 > s1,
then one or more new high CTC points is added because of
when the column number is increased (Fig. 4(b)). Once rowgap
or colgap reaches the deﬁned gap threshold gapthres, HCPR
stores the row/column end point of the current HCP, and stops
the search of 1s in the southeasterly direction. Next, HCPR
starts searching for 1s in the southwesterly direction, using the
same search and stop logic as above. Finally, HCPR labels the
current HCP using the smallest stored row index and smallest
stored column index as well as the largest stored row index
and the largest stored column index. The smallest and largest
row indexes represent the BPs in trace Rf and the smallest
and largest column indexes represent the BPs in trace Rg.
For any possible new HCP between trace Rf and Rg, HCPR
starts searching on row x ﬁve entries to the right of the largest
column index of the current HCP. The details of HCPR are
speciﬁed in Algorithm 1.
C. Traces Segmentation and Identiﬁcation Algorithm
From HCPR, we determine the end points of all HCPs.
These end points are the BPs in physical paths at which user
paths may diverge. Let {x1
1, ..., x1
n1, xf
1, ..., xf
nf xN
1 , ..., xN
nN }
be the set of row indexes in increasing order which are marked
as BPs in the vertical direction of Q, where xf
i is the i-th
BP marked for trace Rf and nf the number of BPs marked
for trace Rf. Likewise, let {y1
1, ..., y1
n1, yf
1 , ..., yf
nf yN
1 , ..., yN
nN }
be the set of column indexes in increasing order which are
marked as BPs in the horizontal direction of Q. Although Q is
symmetric, because of the way we identify the BPs in HCPR,
some xf
i and yf
i can become different (empirically most of
them are the same).
Our algorithm partitions all the traces using the BPs
identiﬁed and assigns a unique label (ALS ID) to segments
157
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

Figure 5. High Correlation Patterns Recognition Algorithm
in different traces that recognized as the same ALS. The
algorithm is described by the pseudo-code in Algorithm 2 and
Algorithm 3. In Algorithm 2, each trace Rf is considered
as a sequence of ALSs. Each segment, ef
i , is a cluster of
RSS measurements between two row BPs xf
i and xf
i + 1. If
a segment has not yet been labelled, we label it with a new
ALS ID, and then consider different traces Rg (for g > f) and
check whether if any ALSs eg
j in Rg forms an HCP with ef
i .
This checking is via the test function TestHCP as described
in Algorithm 2. Basically, the algorithm checks whether the
average number of ”1”s in the submatrix of Q formed by
ef
i and eg
j is greater than a given threshold. TestHCP also
determines whether eg
j is in the same or opposite direction
as ef
i , based on whether the column indexes and row indexes
of the ”1”s within the sub-matrix is positively or negatively
correlated.
As result, we derive from each trace a sequence of ALSs.
Each ef
i is identiﬁed with an ALS ID l(ef
i ) = r and marked
with directionality d(ef
i ) = ±1. A sample of labeled ALSs is
shown in Fig. 6.
D. Unique Vertices and Edges Identiﬁcation Algorithm
Next, we proceed to identify and label all the unique
vertices that connect the ALS’s. Let sr represent the starting
vertex and tr the terminating vertex of ALS r in the reference
direction. Then, we can represent each segment ef
i in a trace
by a tuple of two vertices as follow:
Assume l(ef
i ) = r. If d(ef
i ) = +1, then ef
i = (sr, tr); if
d(ef
i ) = −1, then ef
i = (tr, sr).
Then, we can identify vertices that are the same by exam-
ining the sequence of segments in all traces, using an indicator
I to record the result as follows: For trace Rf, if l(ef
i ) = r,
l(ef
i+1) = r′, we set:
Figure 7. Trace Segmentation Algorithm
Figure 8. TestHCP function









I(tr, sr′) = 1
if
d(ef
i ) = +1, d(ef
i+1) = +1;
I(tr, tr′) = 1
if
d(ef
i ) = +1, d(ef
i+1) = −1;
I(sr, sr′) = 1
if
d(ef
i ) = −1, d(ef
i+1) = +1;
I(sr, tr′) = 1
if
d(ef
i ) = −1, d(ef
i+1) = −1.
(2)
Assume all traces contain a total of N a segments. That
means there are 2N a vertices and the indicator matrix I is
a 2N a × 2N a. As described in Algorithm 4, we examine
the 2N a vertices one by one. If a vertex i has not yet
been labelled, we label it as well as all other vertices with
I(i, j) = 1 with a new vertex ID. The result is a set of
unique vertices U = {U1, ..., UN u}. Knowing the set of unique
vertices, we can further verify an unique edge as the edge
connecting two distinct unique vertices. The set of unique
edges is E = {E1, ..., EN e}.
158
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

Index X
Index Y
!"#
!"#!!!!!!!
!"#
ALS1
ALS1
ALS1
ALS1
ALS1
ALS 2
ALS3
ALS4
ALS5
ALS6
ALS7 ALS7
ALS7
ALS8
x1,1
x1,2
x1,4
x1,5
x3,2
x2,5
x2,2
x3,1
x2,4
x2,3
x2,1
x1,3
y2,1 y2,2 y3,1
y3,2
y6,1
y5,1
y4,4
y6,2y6,3
y5,2
y4,2y4,3
y5,3
y4,1
y5,4
y7,1
y7,2y8,1
y6,4
y8,2 y8,3 y8,4
y8,5 y9,1
y9,2
y4,5
e1,1
e1,2
e1,3
e1,4
e2,1
e2,2
e2,3
e2,4
e3,1
e2,1 e3,1
e4,1
e4,2
e4,3
e5,1
e5,2
e6,1
e6,2 e7,1
e8,1
e9,1
Figure 6. Relationship of BPs of HCPs and Trace Segments
Figure 9. Unique Vertices Identiﬁcation Algorithm
IV.
FLOOR MAP CONSTRUCTION/VISUALIZATION
With the set of vertices U and the set of unique edges E,
we create graph G = (E, U). The graph is described by an
adjacency matrix A. The draft ﬂoor map is an embedding of
G which is drawn according to the adjacency matrix.
The ﬂoor map construction algorithm aims to embed the
graph G on a plane in a way that is visually more intuitive to
a human observer. Three steps are involved: Depth First Block
Search (DFBS), path ﬁnding, and straight-line embedding.
A. Depth First Block Search
This step is based on Tarjan’s DFS block search algorithm
[10]. The purpose is to label each vertex with a DFS number
DFSN(v), create a spanning tree, and identify blocks and
fronds in the graph in order to enable path ﬁnding. DFS starts
from the vertex with the highest node degree, and iteratively
searches for unexplored descendants. Each new vertex is num-
bered by a DFS number according to the order in which it is
explored. DFS stops when all the edges are explored. As result,
the edges are separated into a set of arcs making up a spanning
tree T = v → w, where DFSN(v) < DFSN(w), and a
set of fronds F = E − T = v 99K w, where DFSN(v) >
DFSN(w). In addition, DFS assigns an important parameter
called the low point value to each vertex, and identiﬁes the
”blocks”, which are the biconnected components of the graph.
For vertex v, its low point value is deﬁned as LPV (v) =
min({DFSN(v)}∪{LPV (w)|v → w}∪{DFSN(w)|v 99K
w}) where initially all low point values are set to be the
corresponding DFS number: LPV (v) = DFSN(v). After the
1
3
8
5
2
12
7
10
9
11
4
6
1/0
2/1
3/1
4/4
5/1
6/6
8/1
10/1
9/9
12/1
11/1
7/1 
Fronds
Arcs
1/0
DFSN/LPV
Figure 10. A sample of spanning tree
low point values are calculated, we look for all vertices such
that DFSN(v) ⩽ LPV (v). The edge leading to such a vertex
v is a bridge, which is an edge whose deletion would partition
the graph. The bridge and all edges whose connectivity to the
graph depends on this bridge are grouped into a sub-graph
called a block. All remaining edges are also grouped into a
block. An example of a spanning tree is shown in Fig. 10.
The numbers next to each node are the nodes DFS number
and low point value respectively. There are four blocks in the
example, and the largest block is the set of edges that exclude
edges (3, 6), (2, 4), (5, 11).
B. Path-Finding Algorithm
This algorithm searches for circle paths block-by-block,
starting from the largest block. Initially, all vertices and edges
in the block are marked as unexplored. We start from the
vertex with the smallest DFS number in the block, which
is the root vertex in the subgraph and mark it as explored.
In each iteration, we extend the path to a neighbor vertex
with unexplored edges. If the neighbor contains an unexplored
frond, the path is outputted as a circle path. We repeat until all
vertexes and edges in the block are explored. If there is only
one edge which is in T in the block, we also output the edge
as a path.
C. Planar Embedding Algorithm
This algorithm is based on a straight-line planar drawing
algorithm [11]. Two main constraints are considered: i) Each
edge must be a straight-line; ii) The angle between edges
159
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

must have good angle resolution. The path-ﬁnding algorithm
produces a set of distinct circle paths. The direction of the
paths is ignored. We ﬁrst draw the circle paths with four edges,
followed by those with three and then ﬁve or more edges.
Finally, the non-circle paths are drawn. The ﬁnal result is a
draft ﬂoor map, which would enable us to visualize the logical
relationship of the vertices and edges on a plane.
V.
EXPERIMENT AND RESULTS
The experiment took place at the lab area on the third
ﬂoor of our academic building. The actual ﬂoor map of the
area is shown in Fig. 2. The total survey area is 93 meters
by 21 meters. In the experiment, a student is equipped with
SAMSUNG GALAXY Tab 2 (7.0 version) and walks at a
relatively constant speed around the area. A total of 20 traces
are recorded with a total of 1468 measurements containing
RSS values from 267 APs.
Following the framework of IMMS (shown in Fig. 1), the
dimension of the measurement is reduced to 28. The traces
segmentation and locations recognition algorithm identiﬁes
38 ALSs in total. Then, the unique vertices identiﬁcation
algorithm produces 11 unique vertices and 13 unique edges.
Fig. 11 is the resulting draft ﬂoor map, and Table II shows
the relationship of unique edges and ALSs. The two numbers
next to the edge index are the number of times the edge appears
in different traces and the total number of measurements
corresponding to the edge. The black solid arrows are edges
that appear more frequently and they match the corridors in
the physical ﬂoor map quite well. The dash arrows are noise
vertices and edges, which do not match the physical ﬂoor
map. They apparently arise because of variability in the RSS
signals of the APs. In the future, we may need to conduct more
extensive experiments to determine how we may eliminate the
noise vertices and edges or how we may merge them with
those that match the physical map.
1
3
8
5
2
12
7
10
9
11
4
E12
1(7)
E1   
24(310)
E2   2(18)
E3    
7(96)
E4   3(15)
E5   1(5)
E6   
1(9)
E7    5(77)
E8  2(8)
E9   2(23)
E10   1(4)
E11   1(7)
E13   2(40)
E14    4(63)
E15   1(4)
6
Noise edges
True edges
1
True vertices
6
Noise vertices
Figure 11. The resulting graphical ﬂoor map
VI.
CONCLUSION AND FUTURE WORK
In this paper, an automatic ﬂoor mapping system, IMMS,
for draft ﬂoor map construction was presented. IMMS uses
unlabeled crowd-sourced RSS measurements to construct the
ﬂoor map of a building. Unlike existing ﬁngerprinting methods,
no elaborate manual off-line data collection process at ﬁxed
TABLE II. ADJACENCY LIST OF UNIQUE VERTICES
Vertex Inx.
Incident Edges
ALS Inx.
Node U1
E1
1,
3,
22,
24
E4
21
E8
4
E7
6
E10
14
Node U2
E2
17
E14
10
E3
11,
18
E12
12
Node U3
E13
29
E9
2
E5
24
Node U5
E15
32
Node U8
E6
35
Node U9
E11
13
location is required. Accelerometers or other MEMS devices
for measuring heading directions and distances are also not
used. IMMS is an unsupervised system and is time efﬁcient.
The frequently found ALSs can be correctly correlated to
corridor segments in the physical environment. Some noise
vertices and edges are produced because of variability in the
RSS signals. We need to conduct more extensive experiments
and to enhance our algorithms so that these noise vertices and
edges can be eliminated or merged with other ones.
The next step of our work is to construct a radio map on
top of the draft ﬂoor map. The radio map can then be used in
on-line localization and tracking application of individuals.
REFERENCES
[1]
Y. Kong, Z. Zhong, G. Yang, X. Luo, A. K. S. Wong, and H. Zhai,
“A non-parametric kernel method for CDMA2000 network indoor
localization using multiple observations,” in Proc. Int. Conf. Inform
Netwrking., 2012, pp. 97–101.
[2]
R. W. Ouyang, A. K. Wong, C. T. Lea, and M. Chiang, “Indoor
location estimation with reduced calibration exploiting unlabeled data
via hybrid generative discriminative learning,” IEEE Trans. Mobile
Comput., vol. 11, Sep. 2011, pp. 1613–1626.
[3]
V. Y. Zhang, A. K. Wong, and K. T. Woo, “Histogram based particle
ﬁltering with online adaptation for indoor tracking in WLANs,” Int. J.
Wireless Inform. Networks, vol. 19, no. 3, 2012, pp. 239–253.
[4]
M. Panzarino. What exactly Wi-Fi SLAM is, and why apple
acquired
it.
URL:
http://thenextweb.com/apple/2013/03/26/
what-exactly-wiﬁslam-is-and-why-apple-acquired-it/#!p5wMH
[accessed: 2014-05-20]. (Mar. 2013)
[5]
H. Shin, Y. Chon, and H. Cha, “Unsupervised construction of an
indoor ﬂoor plan using a smartphone,” IEEE Trans. Systems, Man, and
Cybernetics-Part C: Applications andReviews, vol. 42, no. 6, Nov. 2012,
pp. 889–898.
[6]
M. Zhou, A. K. S. Wong, Z. Tian, Y. Zhang, X. Yu, and X. Luo,
“Adaptive mobility mapping for people tracking using unlabelled Wi-Fi
shotgun reads,” IEEE Commun. Lett., vol. 17, no. 1, 2013, pp. 87–90.
[7]
R. W. T. Ouyang, A. K. S. Wong, M. Chiang, K. T. Woo, V. Y.
Zhang, H. S. Kim, and X. M. Xiao, “Energy efﬁcient assisted GPS
measurement and path reconstruction for people tracking,” in Proc.
IEEE GLOBECOM, 2010, pp. 1–5.
[8]
E. Alpaydin, Introduction to Machine Learning, 2nd ed.
Cambridge,
Massachusetts, London, England: The MIT Press, 2010.
[9]
K. Pearson, “Notes on regression and inheritance in the case of two
parents,” in the Royal Society of London, vol. 58, Jun. 1895, p. 240?242.
[10]
R. Tarjan, “Depth-ﬁrst search and linear graph algorithms,” SIAM J.
Comput., vol. 1, Jun. 1972, pp. 146–160.
[11]
P. Rosenstiehl and R. E. Tarjan, “Rectilinear planar layouts and bipolar
orientations of planar graphs,” Discrete Comput. Geom, vol. 1, 1986,
pp. 343–353.
160
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-360-5
AICT2014 : The Tenth Advanced International Conference on Telecommunications

