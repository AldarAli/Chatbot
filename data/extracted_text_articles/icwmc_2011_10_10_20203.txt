Hybrid Log-MAP Algorithm for Turbo Decoding
Over AWGN Channel
Li Li Lim
Faculty of Engineering
The University of Nottingham
Selangor, Malaysia
Email:keyx7lll@nottingham.edu.my
David Wee Gin Lim
Faculty of Engineering
The University of Nottingham
Selangor, Malaysia
Email:lim.wee-gin@nottingham.edu.my
Abstract—In Log-MAP turbo decoding, the complicated log
exponential sum is often simpliﬁed with the Jacobian logarithm
which consists of the max operation along with an exponen-
tial correction function. Although the Max-Log-MAP reduces
the complexity of the Jacobian logarithm implementation by
omitting the correction function, its performance is inferior to
the exact Log-MAP algorithm. Hence, a simple approximation
to the correction function is needed to complement the Max-
Log-MAP algorithm. In this paper, a new suboptimal hybrid
Log-MAP algorithm for decoding turbo code is proposed. It
approximates the exact Log-MAP accurately and is simple for
hardware implementation. The performance of the hybrid Log-
MAP algorithm is shown to have the closest performance to the
exact Log-MAP solution especially at low SNR. The result of
other Log-MAP based algorithm are also presented.
Index Terms—Log-MAP, turbo codes, correction function,
Jacobian logarithm.
I. INTRODUCTION
Turbo codes were ﬁrst introduced by Berrou et al [1] and
is among the most powerful error correcting codes. The MAP
decoder is often operated in the log domain in order to reduce
computational complexity [2]. However, the computation for
state metrics and log likelihood ratio (LLR) is still burdened by
the log exponential sum calculation. The Jacobian logarithm
is used to simplify the log exponential sum by employing a
correction function along with the maximum operator in the
log domain [3]. Although simpliﬁed, the correction function
remains a nonlinear exponential function. The manner in
which the correction function is calculated is critical to the
performance and complexity of the decoder. Several methods
have been proposed to simplify its computation which gives a
tradeoff between complexity and performance [4]–[6].
This paper presents a simpliﬁed hybrid algorithm for sub
optimal Log-MAP. The algorithm employs linear ﬁtting meth-
ods as well as minimal bitwise shift operations to compute the
correction function that will be used in the calculations of state
metrics and ultimately the LLR. In this algorithm, only linear
multiplication, addition, comparator, and minimal number of
bit shifts are required to obtain near Log-MAP performance.
The rest of the paper is organized as follows: in Section II,
a brief review of the original MAP, Log-MAP as well as Max-
Log-MAP algorithm are presented. Section III reviews existing
methods for the approximation of the correction function.
Next, we present the novel hybrid approximation in Section
IV. In Section V, the simulation results of the hybrid Log-MAP
in comparison with other approximation methods is presented.
The paper is ﬁnally concluded in Section VI.
II. THE MAP, LOG-MAP, AND MAX-LOG-MAP
ALGORITHMS
In this section, the derivation of the MAP algorithm will
not be detailed but the results of the algorithm will be stated.
For details on the derivation, see [1] and [2]. Following this,
a review of the Log-MAP as well as the introduction to the
max∗ operator in the Log-MAP algorithm and the Max-Log-
MAP algorithm will be presented.
A. The Encoder
The MAP algorithm operates in blocks of binary input
(information) data sequence represented by −→d = (d1, ..., dN).
The encoder consists of two identical recursive systematic
convolutional (RSC) encoders with M memory elements. We
will assume that each of the RSC encoder has a rate of
1/2 with two outputs, which is the sequence of systematic
bits −→
xs = (xs
1, ..., xs
N), and the parity bit sequence, −→
xp =
(xp
1, ..., xp
N). The outputs are punctured and transmitted over
the channel. The corresponding received sequences are −→
ys and
−→
yp or for brevity, −→y = (−→
ys, −→
yp) which refers to the pair of
received systematic and parity bit received.
B. Maximum A Posteriori (MAP) Algorithm
Let the state of the encoder at time k be Sk, where it can
take on values between 0 and 2M −1. The bit dk represents the
transition from step k−1 to k. The goal of the MAP algorithm
is to provide the LLR, Λ(dk) of the a posteriori probability
(APP) of dk = 1 to the APP of dk = 0 as follows:
Λ(dk) = ln
P
Sk
P
Sk−1
γ1(yk, Sk−1, Sk) · αk−1(Sk−1) · βk(Sk)
P
Sk
P
Sk−1
γ0(yk, Sk−1, Sk) · αk−1(Sk−1) · βk(Sk).
(1)
211
ICWMC 2011 : The Seventh International Conference on Wireless and Mobile Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-140-3

The forward state metric αk can be expressed as:
αk(Sk) =
P
Sk−1
1P
i=0
γi(yk, Sk−1, Sk) · αk−1(Sk−1)
P
Sk
P
Sk−1
1P
i=0
γi(yk, Sk−1, Sk) · αk−1(Sk−1)
(2)
and the backward state metric βk is given as:
βk(Sk) =
P
Sk+1
1P
i=0
γi(yk+1, Sk, Sk+1) · βk+1(Sk+1)
P
Sk
P
Sk+1
1P
i=0
γi(yk+1, Sk, Sk+1) · αk(Sk)
.
(3)
The branch transition probabilities, γi are given as:
γi((ys
k, yp
k), Sk−1, Sk) = exp[1
2xs
k(Le(xs
k)+Lcys
k)+Lcyp
kxp
k];
(4)
where the channel reliability value, Lc =
2
σ2 with σ2 being
the noise variance and Le is the extrinsic information which
serves as the a priori information.
C. Log-MAP Algorithm
The MAP algorithm is too complex for practical implemen-
tation in a real system. To avoid complicated operations, the
entire MAP algorithm can be computed in the log domain.
By taking the logarithm of αk(Sk), βk(Sk) and γk(Sk−1, Sk),
the MAP algorithm reduces to addition and multiplication
operations. However, the computation of forward state metric,
˜
αk(Sk) = lnαk(Sk) involves the log exponential sum which
is complicated to implement in hardware:
˜
αk(Sk) = ln(
X
Sk−1
1
X
i=0
elnγi((ys
k,yp
k),Sk−1,Sk)+lnαk−1(Sk−1))
−ln(
X
Sk
X
Sk−1
1
X
i=0
elnγi((ys
k,yp
k),Sk−1,Sk)+lnαk−1(Sk−1));
(5)
Simplifying (5) gives the general form:
F(x1, x2, ..., xn) = ln(
n
X
i=1
exi);
(6)
where n is a function of the encoder states. Consider the
Jacobian logarithm for two variables given as:
max∗(x1, x2)=ln(ex1 + ex2)
=max(x1, x2) + ln(1 + e−|x1−x2|)
=max(x1, x2) + fc(x)
(7)
where fc(x) is the correction function, and max(x1, x2) is the
maximum of the function’s two arguments. The computation
of the exponential term of fc(x) in max∗(x1, x2) greatly
increases the complexity of the Log-MAP algorithm. A simple
way to obtain (6) with n > 2 is to recursively perform the
max∗ operator as follows [6]:
F(x1, x2, ..., xn) = max∗(xn, max∗(xn−1, ...,
max∗(x3, max∗(x2, x1)))...).
(8)
Similar forms of the log-exponential-sum occurs for the cal-
culation of the backward state metric, βk(Sk) and the LLR,
Λ(dk). It is clear that in order to improve the performance
of the Log-MAP algorithm, a simpler implementation to
the correction function must be found. One of the earliest
signiﬁcant ﬁnding is to present the correction function as a
single dimension look up table [3]. However, table sequences
require storage, and additional memory units will have to be
added to the Log-MAP decoder rendering the increase in area,
power, and a drop in the overall speed [5]. Hence, another sub-
optimal solution to this would be to implement the correction
function with a simpler approximate as will be detailed in
Section III.
D. Max-Log-MAP Algorithm
With the Max-Log-MAP algorithm the max∗ operation is
loosely approximated using
max∗(x1, x2) ≈ max(x1, x2).
(9)
The Max-Log-MAP simpliﬁes the Log-MAP algorithm by
simply omitting the correction function fc(x) altogether. The
performance for the Max-Log-MAP algorithm gives up to a
10% performance drop [7] when compared to the Log-MAP.
The Max-Log-MAP algorithm is the least complex of all the
existing methods but offers the worst BER performance. This
creates a need to complement the Max-Log-MAP algorithm
with a simple implementation of the correction function in
order to improve performance.
III. SUB OPTIMAL LOG-MAP ALGORITHMS:
APPROXIMATION TO THE CORRECTION FUNCTION.
This section gives a brief review of existing algorithms
which approximates the correction function in order to achieve
a simple implementation yet improved performance as com-
pared to Max-Log-MAP.
A. Constant Log-MAP Algorithm.
In this algorithm proposed by [4] , the correction function
fc(x) is approximated with the following rule:
fc(x) =
(
3
8,
−2 ≤ x < 2
0,
otherwise
(10)
The constant Log-MAP algorithm offers a simple implemen-
tation in hardware but with trade off in performance.
B. Linear Log-MAP Algorithm.
In [5], the author suggests a linear approximation to the
correction function by employing the MacLaurin Series ex-
pansion. It is observed that the correction function is effective
when fc(x) is around zero. Therefore, the Maclaurin series
can be exploited to approximate the correction function about
zero. By neglecting Maclaurin’s series order two and above,
the approximation for the correction term is given as:
fc(x) ≈ max(0, ln2 − 1
2x).
(11)
212
ICWMC 2011 : The Seventh International Conference on Wireless and Mobile Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-140-3

This approximation offers better performance than the Con-
stant Log-MAP algorithm and requires only a simple linear
implementation.
C. Multistep Log-MAP Algorithm.
A more accurate and elegant solution to approximate the
correction function is given by [6]. The approximation to the
correction term as suggested by [6] is given as:
fc(x) ≈
ln2
2⌊x+0.5⌋ .
(12)
Where ⌊x + 0.5⌋ denotes the largest integer that is smaller or
equal to x + 0.5. The correction term given here is a more
accurate yet simple approximation to the correction function.
Note that division by 2 can be easily done in digital systems
by implementing ⌊x + 0.5⌋ number of binary shifts. The
algorithm employs shift registers storing the constant ln(2)
to perform the division in [8]. However, in order to facilitate
fast computation, a high speed shift register is needed for this
algorithm.
IV. NOVEL HYBRID LOG-MAP APPROXIMATION
In our novel development, our approximation has the advan-
tage over the linear and multistep Log-MAP algorithm in [5]
and [6] respectively in terms of accuracy as well as hardware
simplicity. The hybrid approximation is proposed as:
fc(x) ≈
(
0.6512 − 0.3251x
for x < 1.5
0.1635
2⌊0.5x⌋
otherwise
(13)
When plotted against the exact correction function in Fig.
1, the hybrid approximation proves to be a better ﬁt to the
correction term than [5] and [6]. The hybrid approximation is
divided into two regions i.e., |x| < 1.5 and |x| ≥ 1.5.
In the region of |x| < 1.5 the hybrid algorithm employs
a linear polynomial ﬁt. The accuracy of the approximation
is veriﬁed through the goodness of ﬁt test against the exact
Log-MAP curve with parameters of SSE: 0.05058, R-square:
0.9836, Adjusted R-square: 0.9835, and RMSE: 0.01842. The
polynomial ﬁt is acceptably accurate as indicated with a
conﬁdence interval of 95%.
Inspired by [6], a good approximation can be achieved
by adjusting Equ. (12). The constant ln2 is replaced with
the constant 0.1635 where it is the corresponding value for
|x| = 1.5 for the linear region. The replacement gives a double
advantage. The replacement with the constant 0.1635 requires
lesser number of bitwise shifts for larger values of |x| and
this reduces the number of shift operations needed to perform
computation for fc(x ≥ 1.5). It is observed that fc(x) can be
approximated to zero for values of |x| > 4. With this adjust-
ment, only a maximum number of 3 shifts (i.e., 3 extra shift
operations) would sufﬁce to give a good approximation and
thus reducing the number of shift operations as compared to
[8]. A good approximation using the multistep approximation
can continue to be achieved by adjusting the number of integer
shifts to ⌊0.5x⌋ to accommodate the change in the replacement
of the constant 0.1635 in the multistep region. Note that the
Fig. 1.
Approximations to the correction function in Equ. (1).
Fig. 2.
BER performances for 16 states Turbo decoder with different
correction functions.
calculation for ⌊0.5x⌋ can be easily achieved by bit shifting
as well. To facilitate fast computation, the value of 0.5x can
be performed by implementing a dedicated logic circuit to
readout values of 0.5x which provides a fast combinational
logic solution as compared to the shift register method where
it is sequential.
V. SIMULATION PARAMETERS AND RESULTS
Two 16 state parallel concatenated Log-MAP turbo decoder
with generator polynomial g[23, 33], implemented in 5 itera-
tions, with overall rate of 1/2, and a random interleaver of size
1000 bits was used in the simulation over the AWGN channel
for 10,000 bits modulated using BPSK.
The BER performance for the HLM algorithm including
Log-MAP, Max-Log-MAP, Linear Log-MAP, and Multistep
Log-MAP are presented in Fig. 2. The HLM algorithm is
shown to have the closest performance to the exact Log-MAP
solution. The HLM algorithm outperforms other algorithm
especially in lower SNRs shown in Fig. 3. This is because the
Log-MAP algorithm is sensitive to the SNR [8]. At high SNR,
213
ICWMC 2011 : The Seventh International Conference on Wireless and Mobile Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-140-3

Fig. 3.
BER performances at low Eb/N0.
the performance of the turbo code approaches the Max-Log-
MAP performance and does not rely heavily on the correction
function. However, if the SNR is low, the decoder considers
the a priori or extrinsic information from the previous decoder
more. The a priori is Gaussian distributed with increased
number of iteration [9] which causes an increased distribution
of argument |x| in the correction function to regions close to
zero where it is most effective. Due to the good ﬁt of the HLM
for smaller arguments of |x|, the HLM algorithm performs
better than other approximations in low SNR. The sensitivity
of the Log-MAP algorithm to SNR is also more pronounced
in encoders with more memory elements [8].
VI. CONCLUSION
The exact Log-MAP algorithm involves computationally
intensive operations in order to attain the ideal performance.
Neglecting the correction function, the Log-MAP algorithm
reduces to the simple Max-Log-MAP algorithm. However,
this rough approximation gives a capacity loss, and hence
the correction term will have to be included or approximated
which gives us the suboptimal Log-MAP algorithm. The
novel HLM algorithm is a suboptimal Log-MAP solution that
achieves nearly identical performance to the Log-MAP algo-
rithm. The hybrid approximation offers a simple implemen-
tation on hardware involving shift registers, multiplications,
comparators, and addition operations. In addition, we also
show that the hybrid algorithm outperforms existing Log-MAP
based algorithm.
ACKNOWLEDGMENT
The authors would like to thank Tunku Abdul Rahman
College and its staff for useful discussion and feedback.
REFERENCES
[1] C. Berrou, A. Glavieux, and P. Thitimajshima, “Near shannon limit
error-correcting coding and decoding: Turbo-codes,” IEEE International
Conference on Communications, May 1993.
[2] L. Bahl, J. Cocke, F. Jelinek, and J. Raviv, “Optimal decoding of linear
codes for minimizing symbol error rate,” IEEE Trans. Information Theory,
vol. 20, pp. 284 – 287, Mar 1974.
[3] P. Robertson, E. Villebrun, and P. Hoeher, “A comparison of optimal and
sub-optimal MAP decoding algorithms operating in the log domain,”
IEEE International Conference on Communications, vol. 2, pp. 1009–
1013, Jun 1995.
[4] W. J. Gross and P. G. Gulak, “Simpliﬁed MAP algorithm suitable
for implementation of turbo decoders,” Electronic Letters, IET Journal,
vol. 34, pp. 1577 – 1578, Aug 1998.
[5] S. Talakoub, L. Sabeti, B. Shahrrava, and M. Ahmadi, “A linear log-MAP
algorithm for turbo decoding and turbo equalization,” IEEE International
Conference on Wireless And Mobile Computing, Networking And Com-
munications, vol. 1, pp. 182 – 186, Aug 2005.
[6] Hao Wang, Hongwen Yang, and Dacheng Yang, “Improved log-MAP
decoding algorithm for turbo-like codes,” IEEE Communications Letters,
vol. 10, pp. 186 – 188, Mar 2006.
[7] Lin Zhang and Shun-Zheng Yu, “A simpliﬁed log-MAP turbo decoder
by ﬁtting method,” IEEE International Conference on Advanced Commu-
nication Technology, vol. 2, pp. 854–857, Jul 2005.
[8] M. A. Khalighi, “Effect of mismatched SNR on the performance of log-
MAP turbo detector,” IEEE Trans. Vehicular Technology, vol. 52, pp.
1386 – 1397, Sept 2003.
[9] M. Fu, “Stochastic analysis of turbo decoding,” IEEE Trans. Information
Theory, vol. 51, pp. 81 – 100, Jan 2005.
214
ICWMC 2011 : The Seventh International Conference on Wireless and Mobile Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-140-3

