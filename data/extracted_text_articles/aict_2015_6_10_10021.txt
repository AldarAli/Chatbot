An Efﬁcient Buffer Delay Correction Algorithm to VoIP
Fabio Sakuray
Computer Science Department
University of Londrina
Londrina, Brazil
Email: sakuray@uel.br
Robinson S. V. Hoto
Mathematics Department
University of Londrina
Londrina, Brazil
Email: hoto@uel.br
Gean D. Breda
and Leonardo S. Mendes
Faculty of Electrical and Computing Engineering
University of Campinas
Campinas, Brazil
Email: gdbreda@gmail.com lmendes61@gmail.com
Abstract—Audio applications are widely used on the Internet
today. In these applications, packets are considered lost if received
after their playout time. Such applications require a playout
buffer in the receiver for smoothing network delay variations to
enable the reconstruction of a periodic form of the transmitted
packets. The objective of buffer delay adjustment algorithms
(BDA) is to control the packet loss rate using minimum buffer
size to jitter smooth. However, current algorithms fail to obtain a
particular packet loss percentage. This paper presents a deﬁnition
of Optimum Buffer Delay (OBD), used to remove jitter and a
technique to correct the buffer delay from any BDA applied
between talkspurts, with the purpose of bring the packet loss
percentage closer to the value deﬁned by audio applications.
This new technique is called Buffer Delay Correction Algorithm
(BDCA).
Keywords–Playout Delay; VoIP; Buffer Delay; MOS.
I.
INTRODUCTION
Nowadays, the Internet has been broadly used for voice
applications, this can be explained by increase in Voice over
Internet Protocol (VoIP) applications efﬁciency and best net-
work bandwidth to users. Unlike of other applications, VoIP
can tolerate some packet loss, but none jitter is allowed [1].
In receiver side of VoIP systems, the audio samples must be
played as a continuous stream. This is a challenging process
because IP present delay variation (or jitter), this phenomenon
results in increase on packet loss rate whenever a packet
is received after your playout time [2]. The receiver audio
application uses a de-jitter buffer that insert an artiﬁcial delay
(called Buffer Delay) to reduce this effects, resulting in a
controlled packet loss rate that enable a greater communication
quality. But long buffer delays can reduce the voice quality in
interactive audio applications.
To adapt to network delay variations, the buffer delay needs
to be continuously changed in order to reduce packet loss rate.
The buffer delay control has been studied in many previous
works and several Buffer Delay Algorithms (BDA) have been
proposed.
However, these BDAs do not produce the packet loss rate
as user requested. This paper presents the formal deﬁnition of
Optimum Buffer Delay (OBD) to jitter remove, and explain
how to use this result in Buffer Delay Correction Algorithm
(BDCA), a technique to adjust the buffer delay produced by
others BDAs. The BDCA has its focus on shaping the packet
loss percentage to follow the one deﬁned by voice service
while bringing down one-way delay. This work considers only
packet loss caused by jitter.
The remainder of this paper is as follows: Section II
presents a review of BDAs, Section III details the features
of de-jitter buffer, Section IV presents a deﬁnition of optimum
buffer delay and the BDC) and Section V demonstrates perfor-
mance comparisons between BDAs. Concluding remarks and
future directions are presented in Section VI.
II.
BACKGROUND
Figure 1 shows packets sent between two remote VoIP
applications in a regular call, where talkspurts are periods
with packets transmission and silence are periods without
transmission. In a talkspurt k with nk packets, a packet i is
sent at instant tk
i , received at instant ak
i and executed in pk
i
(playout time) [3].
Arrival
Time 
Playout 
Time
talkspurt k
talkspurt k-1
silence
tk
1
tk
nk
tk-1
1
tk-1
nk-1
Lost
Packets
ak-1
1
Buﬀer
Delay
Playout
Delay
Network
Delay
pk
1
ak-1
nk-1
Transmission
Time 
pk-1
1
pk-1
nk-1
∆p
∆t
ak
nk
ak
1
i
2
k-1
k-1
Figure 1. Timings of Packet Audio Transmission.
In the receiver side of VoIP applications, the audio packets
must be scheduled to playout with the same temporal spacing
used in transmission (∆tk
i = ∆pk
i ). However, jitter makes
packets arrive after its playout time and are considered lost
because they can not be used when pk
i < ak
i . To avoid this,
most applications use a buffer delay that can be inserted at
beginning of each talkspurt (see talkspurt k in Figure 1), which
is referred to as ”inter-talkspurt” technique, or inserted inside
a talkspurt, which is referred to as ”intra-talkspurt”. This work
analyses only algorithms that act in silence periods, since they
represent the most of BDA solutions in literature [4].
Lobina in [5], present an important classiﬁcation of BDAs,
as:
1)
Packet Loss Intolerant: Algorithms that use high
buffer delay values, avoiding packet loss. The sim-
107
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-411-4
AICT 2015 : The Eleventh Advanced International Conference on Telecommunications

plicity of implementation is the main advantage of
these algorithms;
2)
Packet Loss Tolerant: audio applications can lose a
certain number of packets without affecting audio
quality. This class of algorithms adjusts buffer delay
to control the packet loss rate;
3)
Quality Based: this algorithm class monitors the call
quality parameters to adjust the buffer delay.
Another element of voice call is the phenomenon called
spike [6], deﬁned as a sudden and large increase in the end-
to-end delay. As result the receiver have an interval without
packets followed by a series of packets arriving almost simul-
taneously. Delay spikes represent a serious problem for VoIP
applications, since they lead BDAs to overrated buffer delay
values. A BDA must react adequately to the spike by changing
your behavior.
Several BDAs has been developed with most of them
trying to foresee network delay to set the buffer delay. Now
let us consider some examples. The next two algorithms are
packet loss intolerant. Ramjee in [7] presents four algorithms
to measure the delay variance and estimate the average end-to-
end delay, the fourth can detect spike and change the algorithm
behavior. Barreto and Arago in [8] present an algorithm based
on the standard (Box-Jenkins) linear auto-regressive (AR)
model. The playout delay estimated ( ˆdk) of talkspurts k can
be write by:
ˆdk = θµ
1 µ(Ak−1)+θσ
1 σ(Ak−1)+θµ
2 µ(Ak−2)+...+θσ
nσ(Ak−n)
(1)
where Ak is network delay of k-th talkspurt; θµ
i and θσ
i are
weights associated with mean (µ(Ak)) and standard deviation
(σ(Ak)), n is the sliding window size with last talkspurts
received.
In a call with M talkspurts, (1) can rewrite by d = Xθ,
where matrix X ∈ RM×2n is deﬁned as:
X =


µ(An)
σ(An)
..
µ(A1)
σ(A1)
µ(An−1)
σ(An−1)
..
µ(A2)
σ(A2)
...
...
...
...
...
µ(AM−2)
σ(AM−2)
..
µ(AM−n−1)
σ(AM−n−1)
µ(AM−1)
σ(AM−1)
..
µ(AM−n)
σ(AM−n)


The vectors θ
∈
R2n and d
∈
RM
are: θ
=
[θµ
1 θσ
1 ...θµ
n θσ
n]T , d = [dn+1 dn+2...dM−1 dM]T with the
superscript T denoting matrix transposition.
The estimate of θ is given by ˆθ =

XT X
−1 XT d.
However, the matrix

XT X

may be non-invertible, in which
case Barreto and Aragao replace it by its regularized version:
ˆθ =

XT X + λI
−1 XT d
(2)
where I ∈ R2n×2n is the identity matrix and 0 < λ ≪ 1. The
values used by the authors are λ = 0.01 or λ = 0.001.
The next three algorithms are packet loss tolerant. Moon et
al. [3] use the network delay distribution in the last w received
packets and a desired packet loss rate. This algorithm can
detect spike. Fujimoto et al. [9] uses the same idea, but focused
on the tail of the network delay probability distribution func-
tion. Assuming Pareto distribution for the tail, this approach
presents better results when compared with algorithms that
use a complete network delay distribution. In [10], Ramos et
al. present the Move Average Algorithm (MA) to adjusts the
playout delay at each new talkspurt given a desired target of
average loss percentage (ρ). The authors compute the optimal
playout delay (Dk) at the beginning of talkspurt k as:
Dk = SORT

Zk
i
	
with i = round(1 − ρ)Nk
with N k the number of audio packets received during k-th
talkspurt and Zk
i the variable portion of the end-to-end delay
of i-th packet.
The predicted value of Dk+1, denoted by ˆDk+1, is given
by
ˆDk+1 =
M
X
l=1
alDk−l+1
The coefﬁcients al must minimize the mean square error
between Dk+1 and ˆDk+1. They can by found from solving
the equation:
M
X
m=0
am+1rD(m − l) = rD(l + 1) with l = 0, 1, ..., M − 1.
Suppose that it is known the last K values of rD,
rD(r) ≃
1
K − |r|
K−|r|
X
k=1
DkDk+|r|
with r = 0, ±1, ±2, ..., ±(K − 1). The model’s order M is
computed as follow: starting with M = 1, compute all values
of ˆDk and estimate E
h
(Dk − ˆDk)2i
, increase M and repeat
the process. The model’s order is taken equal to the lowest
value of M preceding an increase in mean square error.
The next algorithms are quality based. Fujimoto et al. [11]
shows that jitter, packet loss rate, codec and other parameters
can affect call quality. Most solutions only allow packet loss
rate setup. The algorithm presented in [11], called E-MOS,
utilizes Mean Opinion Score (MOS [1], [12]) classiﬁcation as
input to buffer delay adjust. MOS values are 1 to 5, where 1
is the worst and 5 the best.
Valle et al. in [13] present the Dynamic Management of
Dejitter Buffer Algorithm (DMDB), that uses MOS rating as
input to control the followings algorithms:
1)
OpenH323: an open source and packet loss intolerant
algorithm, used in CallGen323 application;
2)
Window: histogram based algorithm with spike de-
tection, presented in [3];
3)
Adaptive: algorithm proposed by [14], which is also
reactive and quality based, that tries to maximize the
end-user perceiving quality.
III.
THEORETICAL ASPECTS OF BUFFER DELAY
In the next Sections, consider nk the set of packets
belonging to k-th talkspurt and pk
i , ak
i and tk
i , respectively,
the playout, receiver and transmission time. Using de-jitter
buffer (or buffer delay - BD) in receiver side, with dynamic
adjustment to each talkspurt, the playout time of i-th packet
is:
pk
i = ak
1 + BDk + (i − 1)∆tk
i
(3)
where ∆tk
i = tk
i − tk
(i−1).
108
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-411-4
AICT 2015 : The Eleventh Advanced International Conference on Telecommunications

A packet will be lost when it does not meet the jitter
restriction [15] [16], i.e., BD is not enough to jitter removal
in packet i, then:
pk
i > ak
1 + BDk + (i − 1)∆tk
i
(4)
Theorem 1 presents a buffer delay value to prevent packet
loss by jitter.
Theorem 1: In a talkspurt k, with buffer delay BDk, no
packet is lost by jitter restriction violation if and only if
BDk
≥ maxi∈{1,2,...,nk}{δk
i − (i − 1)∆tk
i }
where δk
i = ak
i − ak
1 for every i ∈ {1, 2, ..., nk}.
Proof: Since there is no packets loss in talkspurt, this is
equivalent to: pk
i − ak
i ≥ 0 for every i ∈ {1, 2, ..., nk} ⇔
ak
i ≤ pk
i ⇔ ak
i ≤ ak
1 + BDk + (i − 1)∆tk
i ⇔ ak
i − ak
1 ≤
BDk +(i−1)∆tk
i ⇔ BDk ≥ (ak
i −ak
1)−(i−1)∆tk
i ⇔ BDk ≥
maxi∈{1,2,...,nk}{δk
i −(i−1)∆tk
i }, for every i ∈ {1, 2, ..., nk}.
Notice that:
BDk ≥ BDk
npl =
max
i∈{1,2,...,nk}{δk
i − (i − 1)∆tk
i }
where BDk
npl is the buffer delay which does not present packet
loss.
Thus, we introduce the notion of limiting due to jitter.
In the next deﬁnitions consider N = {1, 2, ..., nk} all packet
indexes of the k-th talkspurt.
Deﬁnition 1: The BDk
c is c-th limiting due to jitter, i.e.,
the value that remove jitter in a set Ωc of packets of talkspurt
k is deﬁned by
BDk
c = max
i∈Ωc{δk
i − (i − 1)∆tk
i },
where Ω0 = N, and Ωc = N −(u0 ∪ u1 ∪ ... ∪ uc−2 ∪ uc−1)
for c > 0, and uc = {r1
c, ..., rwc
c } are the wc packets where
pk
i = ak
1 + BDk
c + (i − 1)∆tk
i with i ∈ uc.
Lemma 1: There is a ﬁnite number of jitter limiting values
in a talkspurt.
Proof: The ﬁrst jitter limiting value is: BDk
0
=
max{i∈Ω0=N}{δk
i − (i − 1)∆tk
i }, used by set of packets
u0 ⊂ Ω0 = N. Consider Ω1 = N − u0 ⊆ Ω0, if Ω1 = ∅, the
proof is completed, otherwise it is possible to calculate other
jitter limiting value: BDk
1 = max{i∈Ω1}{δk
i −(i−1)∆tk
i } for
which there is a non-empty set u1 ⊆ Ω1 ⊂ Ω0 of packets. This
reasoning is applied until one is found Ωm+1 = ∅, then the last
jitter limiting value is BDk
m = max{i∈Ωm}{δk
i −(i−1)∆tk
i },
where m ≤ n and, exist ∅ ̸= um ⊆ Ωm ⊂ Ωm−1 ⊂ ... ⊂ Ω0
of packets that use that value to remove jitter. Thus, we obtain
a ﬁnite number of jitter limiting value.
Lemma 2: The jitter limiting values are presented in the
format BDk
j < BDk
j−1 to j = 1, ..., m.
Proof: Considering BDk
j < BDk
j−1, then:
BDk
j = max
{i∈Ωj}

δk
i − (i − 1)∆tk
i
	
BDk
j−1 = max{i∈Ωj−1}

δk
i − (i − 1)∆tk
i
	
Packets
Loss
Buﬀer Delay to 
Jitter Smoth
BDm<BDm-1<...<BDj+2<BDj+1<BDj<...<BD2<BD1<BD0=BDnpl
w0+w1
w0+w1+...+wj
w0
w0+w1+...+w(m-1)
Pm
P(m-1)
Pj
P1
P0
⌊ nk⌋
....
....
w0+w1+...+wm
w0+w1+...+w(j+1)
Pj+1
w
k
k
k
k
k
k
k
k
k
Figure 2. Steps due to jitter in a talkspurt.
where Ωj = N − (u0 ∪ ... ∪ uj−2 ∪ uj−1) and Ωj−1 = N −
(u0 ⊂ ∪... ∪ uj−2), so Ωj ⊂ Ωj−1, then BDk
j < BDk
j−1. If
BDk
j = BDk
j−1 then uj∩ < uj−1 ̸= ∅
In a talkspurt, we have the following ordering BDk
m
<
BDk
m−1 < ... < BDk
0.
Deﬁnition 2: Intervals of type Pm =

0, BDk
m

, Pm−1 =

BDk
m, BDk
m−1

, ..., P0 =

BDk
1, BDk
0

will be referenced
as steps due to jitter.
Deﬁnition 3: At each step, due to jitter we have associated
a number named degree, given by:
degree(Pj) =
j
X
c=0
wc
where BDk
m+1 = 0, and j = 0, ..., m.
Each degree is unique by deﬁnition. Besides wc ≥ 1 for
each c, from what we can conclude that:
0 < degree(P0) < ... < degree(Pm)
The lemma 3 allows monitoring the packet loss behaviour
with each BDk value used to jitter remove.
Lemma 3: Using BDk in a talkspurt, then the number of
lost packets is equal to the degree to which the step belongs.
Proof: In a talkspurt, we have the degrees Pj, with j =
0, ..., m, due to lemma 2 we have that 0 = BDk
m+1 < BDk
m <
... < BDk
j+1 ≤ BDk < BDk
j < ... < BDk
1 < BDk
0.
Then, max{i∈Ωj+1}

δk
i − (i − 1)∆tk
i
	
= BDk
j+1 ≤ BDk <
BDk
j < ... < BDk
0 and:
BDk
j
=
δk
r − (r − 1)∆tk
r, r ∈ uj
BDk
j−1
=
δk
r − (r − 1)∆tk
r, r ∈ uj−1
...
BDk
0
=
δk
r − (r − 1)∆tk
r, r ∈ u0
Assuming that BDk < (ar − a1) − (r − 1)∆tk
r for all r ∈
u0 ∪ ... ∪ uj, thus we have, a1 + BDk + (r − 1)∆tk
r < ar,
for r ∈ u0 ∪ ... ∪ uj, i.e., the jitter restriction is broken for
all r ∈ u0 ∪ ... ∪ uj, then packets rj, ..., r0 are lost. On the
109
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-411-4
AICT 2015 : The Eleventh Advanced International Conference on Telecommunications

other hand, with BDk ≥ (ar − a1) − (r − 1)∆tk
r, for all
r ∈ Ωj+1 ⊃ Ωj+2 ⊃ ... ⊃ Ωm ⊃ Ωm+1.Then pr ≥ ar for all
r ∈ Ωj, and r ∈ Ωj+2, so on for all r ∈ Ωm. With uj+1 ⊆
Ωj+1, ..., um ⊆ Ωm, the packets rj+1, ..., rm not be lost, and
{u0, ..., um} a subset of N, the total number of packets is
w0 + ... + wj = Pj
c=0 wc = degree(Pj).
IV.
BUFFER DELAY CORRECTION ALGORITHM
Prior to present the BDCA, an important deﬁnition is
presented that relates buffer delay and target packet loss. This
value is named OBD. In the previous Section, we can see
that there is a certain limit to Buffer Delay (BDk), and above
this level there is no packet loss. On the other hand, the good
quality of voice communication admits a certain limit of packet
loss. Therefore, let us suppose a λ ∈ (0, 1) of packets loss in
a talkspurt, i.e., at most ⌊λnk⌋ packets can be lost (see Figure
2) where ⌊x⌋ is the ﬂoor function (greater integer smaller than
or equal to x). In this case we are interested in solving (5)
bellow.
min

f(BDk) = BDk |Ψ(BDk) ≤ ⌊λnk⌋, BDk ∈ [0, +∞)
	
(5)
That is the optimum buffer delay (OBDk
λ), which repre-
sents a minimum delay value inserted in a talkspurt k, with
target loss factor λ.
Theorem 2: In a talkspurt that use BDk, n′ packets will
be lost, if and only if, BDk belongs to degree of with step n′.
Proof: When n′ = 0, i.e., no packet is lost, the theorem
1 assure this proof. If n′ > 0, consider W = {w0, w0 +
w1, ..., w0 + ... + wm} a set of all packets lost by jitter, if
n′ ∈ W with n′ = w0+w1+...+wj for any j, then BDk ∈ Pj.
If BDk ∈ Ph for 0 ≤ h < j, less than n′ packets would be
lost, on other hand, if j ≤ h < m, more than n′ would be
lost. With degree(Pj) = w0 + ... + wj, the BDk belongs to a
degree, with step n′.
Looking for theorem 2 and BDk ⊂ {Pm, ..., P0} with Pi ∈
[0, +∞) we can write (5) as follow:
min

min{f(BDk) = BDk|Ψ(BDk) ≤ ⌊λnk⌋, BDk ∈ I}
	
(6)
where
I
∈
{Pm, ..., P0}
and
min{f(BDk)
=
BDk | Ψ(BDk)
≤
⌊λnk⌋, BDk
∈
I} can be solved
by Weierstrass Theorem, because in this case, I is compact
and f is continuous.
The BDCA is a method to adjust the value presented by
one BDA, i.e., approaching BDk
BDA to OBDk
λ, with packet
loss rate in λ. To apply BDCA over talkspurt k, the Adjust
Factor (AF) is computed as:
AF(k) = 1
Z ∗
i=(k−1)
X
i=(k−1−Z)
OBDi
λ
BDi
BDA
(7)
The window size (Z) has the last 40 received talkspurts to
reduce computational costs, values greater than 40 do not
change signiﬁcantly the results. To ﬁnd OBDi
λ, the following
elements are needed:
•
Packets transmitted until talkspurt (i − 1);
Ni−2 =
i−2
X
j=1
nj
(8)
•
Number of packets lost from talkspurts 1 to (i − 1);
•
Target Packet loss rate (λ).
The OBDi
λ should be used in i-th talkspurt to bring the
packet loss closer to λ. The BDi
BDA is the value computed
by selected BDA. Equation (9) shows Buffer Delay adjusted:
BDk
BDCA = BDk
BDA ∗ AF(k)
(9)
Then, the adjusted playout time (ˆpk
i ) is deﬁned by:
ˆpk
i = ak
1 + BDk
BDCA + (i − 1)(∆ti)
(10)
Consider the talkspurt (k − 1) received, the BDCA to playout
time adjust of talkspurt k is showed in Figure 3.
BDk
OBDk-1
FA 
BDk
BDCA
BDA
λ
pk
^
i
{ak, ak, ..., ak  ,
tk, tk, ..., tk  }
1
1
2
2
nk
nk
Figure 3. BDCA.
The OBD algorithm presents linear time and can run in
parallel with BDCA, this makes BDCA deﬁned by BDA’s
computational complexity.
V.
IMPLEMENTATION AND RESULTS
In this Section, a performance analysis of the proposed
algorithm is presented. The BDAs used for comparison are:
•
Move Average Algorithm (MA) [10] a loss-tolerant
technique;
•
Algorithm from Barreto and Aragao (BA) presented
in [8], classiﬁed as loss-intolerant technique;
•
Dynamic Management of Dejitter Buffer (DMDB)
presented in [13], considered a quality based tech-
nique.
For the tests, we consider the traces described in [3].
The traces contain the sender and receiver timestamps of
transmitted packets. One 160 bytes audio packet is generated
approximately at every 20 ms when there is speech activity
[17]. The number of concurrent applications, network proto-
cols or other elements of network environment may change
the packet delay, but do not affect the BDCA. This enable the
use of traces in simulation tests. A description of the traces is
depicted in Table I.
TABLE I. TRACES DESCRIPTION.
trace
Talkspurts
Packets
Length (s)
A
536
37104
165.696
B
540
52296
174.604
To assess the performance of BDCA, we focus in packet
loss rate, buffer delay average and quality of call (MOS).
Considering N packets in a session, M the number of talk-
spurts, nk the number of packets in talkspurt k, rk
i the success
indicator with values rk
i = 0 when the packet is lost (pk
i < ak
i )
or rk
i = 1 when packet is available in receiver on playout time
110
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-411-4
AICT 2015 : The Eleventh Advanced International Conference on Telecommunications

0
0.5
1
1.5
2
2.5
3
3.5
x 10
4
10
0
10
1
Packet
Packet Loss Rate
 
 
OBD (λ = 0.01)
Move Average (MA)
MA with BDCA
Barreto&Aragao (BA)
BA with BDCA
DMDB
DMDB with BDCA
(a) Trace A
0
1
2
3
4
5
x 10
4
10
−1
10
0
10
1
Packet
Packet Loss Rate
 
 
OBD (λ = 0.01)
Move Average (MA)
MA with BDCA
Barreto&Aragao (BA)
BA with BDCA
DMDB
DMDB with BDCA
(b) Trace B
Figure 4. Traces A and B with λ = 0.01
(pk
i ≥ ak
i ). The total number of packets played out in an audio
session is given by
Υ =
M
X
k=1
nk
X
i=1
rk
i
(11)
We consider in this work the average buffer delay to
remove jitter (BDav), shown in (12).
BDav = 1
Υ
M
X
k=1
nk
X
i=1
rk
i

The Table II shows the results of packet loss target per-
centage (1%), the columns ω and BDav are expressed in per-
centage of transmitted packets and milliseconds, respectively.
The MOS column present an average value computed using
PESQ algorithm [20], on blocks of 3000 packets, with shift of
500 packets to next window. The tests were made in Matlab
[21].
VI.
CONCLUSION
In this paper, we presented the Buffer Delay Correction
Algorithm (BDCA) to reduce the difference between packet
loss rate of any BDA and the Optimum Buffer Delay (OBD).
We have compared the BDA with and without BDCA using
1% of packet loss rate.
Figures 4(a) and 4(b) show that packet loss percentage (ω)
with BDCA are closer to values from OBD than running only
BDA. But any greater buffer delay is able to produce a reduced
packet loss rate. The BDCA uses only the necessary buffer
delay to regulate the packet loss rate to closer to target value.
This can be viewed in Table II and graphics of Figure 5, call
quality is best or equal the results ”without BDCA” (or only
BDA) in most parts of calls.
We are currently expanding the deﬁnitions of Buffer Delay
Adjustment to reach packet loss caused by latency, i.e., includ-
ing the sum of packet discarded with playout time greater than
the maximum threshold (L). To reach this new restriction, we
are working in a new formulation of Adjust Factor.
REFERENCES
[1]
W. C. Hardy, VoIP Service Quality: Measuring and Evaluating Packet-
Switched Voice).
McGraw-Hill, 2003.
[2]
Z. Qiao, R. K. Venkatasubramanian, L. Sun, and E. C. Ifeachor, “A
new buffer algorithm for speech quality improvement in voip systems,”
Wirel. Pers. Commun., vol. 45, no. 2, apr 2008, pp. 189–207. [Online].
Available: http://dx.doi.org/10.1007/s11277-007-9408-7
[3]
S. B. Moon, J. Kurose, and D.Towsley, “Packet audio playout
adjustment:
performance
bounds
and
algorithms,”
ACM/Springer
Multimedia Systems, vol. 6, no. 1, january 1998, pp. 17–28. [Online].
Available: http://dx.doi.org/10.1007/s005300050073
[4]
Y. Zhang, D. Fay, L. Kilmartin, and A. W. Moore, “A garch-based
adaptive playout delay algorithm for voip,” Computer Networks:
The International Journal of Computer and Telecommunications
Networking, vol. 54, no. 17, dec 2010, pp. 3108–3122. [Online].
Available: http://dx.doi.org/10.1016/j.comnet.2010.06.006
[5]
L. Atzori and M. L. Lobina, “Playout buffering in ip telephony: a
survey discussing problems and approaches,” Communications Surveys
Tutorials, IEEE, vol. 8, no. 3, 2006, pp. 36–46. [Online]. Available:
http://dx.doi.org/10.1109/COMST.2006.253269
[6]
C. Perkins, RTP: Audio and Video For The Internet.
Addison Wesley,
2012.
[7]
R. Ramjee, J. Kurose, D. Towsley, and H. Shulzrinne, “Adaptive
Playout Mechanisms for Packetized Audio Applications in Wide-
Area
Networks,”
in
Proceedings
of
IEEE
Infocom,
vol.
2,
Montreal,
Canada,
1994,
pp.
680–688.
[Online].
Available:
http://citeseer.nj.nec.com/ramjee94adaptive.html
[8]
J.
B.
A.
Jr.
and
G.
A.
Barreto,
“Novel
approaches
for
online
playout
delay
prediction
in
voip
applications
using
time
series
models,”
Computers
and
Electrical
Engineering,
vol.
36,
no.
3,
2010,
pp.
536
–
544.
[Online].
Available:
http://www.sciencedirect.com/science/article/pii/S004579060900113X
[9]
K. Fujimoto, S. Ata, and M. Murata, “Statistical analysis of packet
delays in the internet and its application to playout control for
streaming applications,” IEICE Transactions on Communications,
vol. E84-B, no. 6, june 2001, pp. 1504–1512. [Online]. Avail-
able: http://www-ana.ist.osaka-u.ac.jp/achievements/web2001/papers/k-
fujimo01ieice-ModelingPlayout.pdf
[10]
V. M. R. Ramos, C. Barakat, and E. Altman, “A moving average
predictor for playout control in voip,” in Proceedings of the 11th
international conference on Quality of service, ser. IWQoS’03, vol.
2707.
Berlin Heidelberg: Springer-Verlag, June 2003, pp. 155–173.
[Online]. Available: http://dl.acm.org/citation.cfm?id=1784037.1784049
[11]
K. Fujimoto, S. Ata, and M. Murata, “Adaptive playout buffer algorithm
for enhancing perceived quality of streaming applications,” Telecommu-
nication Systems, vol. 25, no. 3-4, april 2004, pp. 259–271.
[12]
ITU-T
P.800,
Recommendation
ITU-T
P.800
-
Methods
for
subjective determination of transmission quality, Telecommunication
Standardization Sector of International Telecommunication Union
(ITU), august 1996. [Online]. Available: http://www.itu.int/rec/T-REC-
P.800
[13]
R. F. Valle, L. S. G. de Carvalho, R. B. Aguiar, E. S. Mota,
and D. Freitas, “Dynamical management of dejitter buffers based
on speech quality,” in Proceedings of the The IEEE symposium on
Computers and Communications, ser. ISCC ’10.
Washington, DC,
USA: IEEE Computer Society, 2010, pp. 56–61. [Online]. Available:
http://dx.doi.org/10.1109/ISCC.2010.5546799
[14]
L. Sun and E. C. Ifeachor, “Prediction of perceived conversational
speech quality and effects of playout buffer algorithms,” in Commu-
nications, 2003. ICC ’03. IEEE International Conference on, vol. 1,
2003, pp. 1–6.
[15]
F.
Sakuray,
R.
S.
V.
Hoto,
and
L.
S.
Mendes,
“Analysis
and
estimation
of
playout
delay
in
voip
communications,”
International Journal of Computer Science and Network Security,
vol.
8,
no.
3,
March
2008,
pp.
98–105.
[Online].
Available:
http://paper.ijcsns.org/07 book/200803/20080315.pdf
[16]
D.
Florencio
and
L.-W.
He,
“Enhanced
adaptive
playout
scheduling
and
loss
concealment
techniques
for
voice
over
ip
networks,”
in
Circuits
and
Systems
(ISCAS),
2011
IEEE
International Symposium on, 2011, pp. 129–132. [Online]. Available:
http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=5937518
[17]
H.
Schulzrinne,
“Voice
communication
across
the
internet:
a
network voice terminal,” Tech. Rep., july 1992. [Online]. Available:
http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.1343
[18]
S. Nagireddi, VoIP Voice and Fax Signal Processing, 1st ed.
Wiley
Publishing, 2008.
[19]
TIA/EIA 116A, Telecommunications-IP Telephony Equipment - Voice
Quality Recommendation for IP Telephony, Telecommunication Indus-
try Association, 2006.
[20]
ITU-T P.862, Recommendation ITU-T P.862 - Perceptual evaluation
of
speech
quality
(PESQ):
An
objective
method
for
end-to-
end speechquality assessment of narrow-band telephone networks
and speech codecs, Telecommunication Standardization Sector of
International Telecommunication Union (ITU), february 2001. [Online].
Available: http://www.itu.int/rec/T-REC-P.862
[21]
MATLAB, MATLAB and Statistics Toolbox Release 2012b.
Natick,
Massachusetts: The MathWorks Inc., 2012.
112
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-411-4
AICT 2015 : The Eleventh Advanced International Conference on Telecommunications

