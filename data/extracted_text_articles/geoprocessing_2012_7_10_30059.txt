Computationally Feasible Query Answering over Spatio-thematic Ontologies
¨Ozg¨ur L¨utf¨u ¨Ozc¸ep and Ralf M¨oller
Institute for Software Systems (STS)
Hamburg University of Technology
Hamburg, Germany
Email: {oezguer.oezcep,moeller}@tu-harburg.de
Abstract—Providing query answering facilities at the con-
ceptual level of a geographic data model requires deduction,
and deduction in geographical information systems (GIS) is a
demanding task due to the size of the data that are stored
in secondary memory. In particular, this is the case for
deductive query answering w.r.t. spatio-thematic ontologies,
which provide a logical conceptualization of an application
domain involving geographic data. For speciﬁc logics (so-
called lightweight description logics) and query languages
(conjunctive queries) the query answering problem can be
solved by compiling the ontology-based query into an SQL
query that is posed to the database. Thus, ontology-based query
answering becomes as feasible as standard database query
answering. In the literature, this kind of query answering by
compilation is formalized using the notion of ﬁrst-order logic
(FOL) rewritability. In this paper we show that lightweight
description logics such as DL-Lite can be combined with spatial
calculi such as the region connection calculus such that FOL
rewritability is retained and the expressive power is sufﬁcient
for modeling important aspects of GIS data.
Keywords-description logics; qualitative spatial reasoning;
deductive query answering; FOL rewritability
I. INTRODUCTION
In almost any area in which geographical information sys-
tems (GIS for short) are used, e.g., damage classiﬁcation for
ﬂooding scenarios, development of eco systems in forestry,
analysis of sociological and demoscopic aspects in urban
areas, or semantic web applications over GIS data [1] there
is a need to formalize relevant concepts and relations in
a conceptual data model in order to answer queries. The
preferred technical tool for providing a conceptualization is
an ontology. Ontologies are represented in some logical lan-
guage (e.g., a description logic) that has a formal semantics
and allows for automated reasoning, in particular deductive
query answering. The idea of exploiting a conceptualization
over the domain is to provide a convenient query language
for building applications, given some mappings of basic
concepts and relations to expressive database queries are
deﬁned in terms of SQL. Mappings to SQL are required
because the encodings of spatial information in databases
might vary and might be rather cumbersome in practice. This
holds in particular for GIS databases. As we will show in this
paper, the conceptualization can be used to ﬁnd GIS database
queries (views) relevant for complete query answering.
For example, think of a planning problem for additional
parks in New York, say. An engineering ofﬁce responsible
for this task uses geographical data, such as, e.g., the
TIGER/Line R
⃝ data—a well known free set of geographic
data from the US Census Bureau. Among many others, the
engineering consultants have declared concepts such as (i) a
park that covers a lake (Park+Lake for short), and (ii) a park
Park4Playing intended to denote all parks covering playing
areas. Imagine the ofﬁce has deﬁned mappings from these
concepts to SQL queries possibly involving GIS extensions
in order to ﬁnd instances of these concepts. Quite a large
library of similar concepts and relations with mappings
will emerge pretty soon. Moreover, assume that for quality
assurance purposes the engineering ofﬁce would like to
formulate queries for identifying objects with certain design
ﬂaws, e.g., a park with a lake such that inside the lake there
is a playing area. Intuitively, the query searches for parks
except those for which there are objects on the righthand
side of tuples in the relation hasLake and hasPlayingArea
such that the locations of the objects are related by the proper
containment relation. Note that hasLake and hasPlayingArea
are relations declared in the conceptual domain model (see
below for a more formal account).
We argue that despite the fact that it is not syntactically
apparent, in order to ﬁnd all parks that contain this type of
design ﬂaw (for being complete, that is) one also has to take
into consideration the mappings that produce instances of
Park+Lake and Park4Playing. The query rewriting process
ensures that query answering w.r.t. the semantics of the
ontology is implemented by answering a properly rewritten
query using a standard SQL query (see [2] for details).
The goal of this paper is to demonstrate that the SQL
queries relevant for complete query answering in our spatial
domain can be automatically determined as well, and that
qualitative spatial reasoning is required to achieve this. The
only additional effort for ﬁnding relevant mappings is a
very weak axiomatization for spatio-thematic concepts such
as Park+Lake and Park4Playing in the form of necessary
conditions that approximate the intended meanings. The
axiomatization is part of the conceptual domain model.
For example, in case of Park+Lake we have a Park that
contains a Lake such that the Lake touches the Park from
within. The formalization of these notions is done with an
198
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

ontology language, and the details of the formalization and
its application to the sample scenario are given in this paper.
The query is automatically compiled into a GIS database
query, and the mappings are considered appropriately. Note
that query compilation (or rewriting) is a method that cannot
be reduced to simple macro expansion but requires reasoning
over the axiomatization as demonstrated by the perfect
rewriting algorithm of [2].
The contribution of our paper is the result that query
rewriting can also be used in GIS scenarios, but rewriting
has to be signiﬁcantly enhanced because the logical language
in which the ontology is represented has to be expressive
enough in order to represent spatio-thematic concepts. We
identify DL-Lite(RCC8) (Section IV) as an appropriate com-
bined logic and show that it allows for the compilation of the
ontology into the query, i.e., in technical terms, allows for
FOL rewritability of query answering. The query language
deﬁned in Section IV and GeoSPARQL (see OGC draft
speciﬁcation, http://www.w3.org/2011/02/GeoSPARQL.pdf)
have common features. But in contrast, DL-Lite(RCC8)
allows for the controlled use of RCC8 relations in the
ontology. Preparing the results of Section IV, Section II
introduces the logical components of DL-Lite(RCC8) and
Section III describes the obstacles in ﬁnding a combination.
II. LOGICAL PRELIMINARIES
The logic DL-Lite(RCC8) to be introduced in this paper
is a combination of two logics described in the following
subsections: the region connection calculus RCC8, which
can model topological relations like that of containment;
and a member of the family of lightweight description
logics DL-Lite, which is well suited for reasoning over
large databases and which can model many elements of the
Uniﬁed Modeling Language (UML).
A. RCC8-calculus
The Region Connection Calculus (RCC) [3] is one of
the most widely known qualitative spatial reasoning calculi
that take regions and not points as the basic entities for
representing spatial knowledge and reasoning about it. In
the axiomatic representation of RCC [3], a primitive binary
relation C is intended to model the connectedness relation
between regions; C is therefore axiomatically restricted to
be reﬂexive and symmetric. C is used to deﬁne different
relations between regions that are termed base relations. One
family of base relations, denoted BRCC8 = {dc (discon-
nected), ec (externally connected), eq (equal), po (partially
overlapping), ntpp (non-tangential proper part), tpp (tangen-
tial proper part), ntppi (inverse of ntpp), tppi (inverse of
tpp)} henceforth, is the building block of RCC8. Further
calculi of RCC can be deﬁned by considering other sets of
base relations. The base relation dc is intended to model dis-
connectedness and is deﬁned by dc(x, y) iff ¬C(x, y). The
other base relations are deﬁned similarly [3]. The axioms
imply that the eight base relations are jointly exhaustive and
pairwise exclusive (JEPD property).
With the help of the base relations, real-world spatial
conﬁgurations can be represented in the form of constraint
networks, which can be efﬁciently processed by constraint
satisfaction procedures. A network is deﬁned by a set
of formulas that have the form r1(a, b) ∨ · · · ∨ rk(a, b)
where a, b are constants and r1, . . . , rk are base relations
from BRCC8. These sentences are presented in the more
succinct algebraic notation as {r1, . . . , rk}(a, b). The set
of all possible disjunctions of base relations Pot(BRCC8)
is denoted RelRCC8. With disjunctions of base relations,
indeﬁnite knowledge on spatial relations of regions can be
expressed. The networks are labelled graphs derived from
the formulas such that the vertices of the network are the
constants used in the formulas, and edges (a, b) labelled
{r1, . . . , rk} are derived iff {r1, . . . , rk}(a, b) is contained
in the set of formulas.
A practically relevant question is whether a constraint
network is satisﬁable with respect to the RCC8 axioms.
Testing satisﬁability of networks can be carried out on the
basis of path consistency algorithms [4]. These algorithms
are based on composition tables. For every pair of base
relations r1, r2 they contain an entry for the composition
r1 ◦r2. In general, the composition ◦ of two relations r1 and
r2 is deﬁned as r1 ◦ r2 = {(x, y) | ∃z.r1(x, z) ∧ r2(z, y)}.
The composition table for RCC8 [5, p. 45] is in fact a
table of weak compositions. For two relations r1, r2 the
weak composition r1; r2 is the minimal disjunction of base
relations that cover their composition r1 ◦ r2, i.e., r1 ◦ r2 ⊆
r1; r2. For example the weak composition table entry for the
pair (tpp, tppi) is tpp; tppi = {dc, ec, po, tpp, tppi, eq}. This
composition table entry can be described by the following
(implicitly universally quantiﬁed) FOL sentence:
tpp(x, y) ∧ tppi(y, z) → {dc, ec, po, tpp, tppi, eq}(x, z)
The (weak) composition relation ; is deﬁned for non-
base relations r1 = {r1
1, . . . rk
1} and r2 = {r1
2, . . . , rl
2} in
the usual way by pairwise composing the contained base
relations: r1; r2 = S
1≤i≤k;1≤j≤l ri
1; rj
2.
Testing the satisﬁability of arbitrary RCC8 networks is
NP-complete and thus computationally intensive [6] [7].
Rather than using the axioms of [3], which are based on
the relation C, we use axioms that directly state that the
eight base relations BRCC8 have the JEPD property, together
with axioms corresponding to the composition table and the
axiom ∀x.eq(x, x). This theory is named AxRCC8 and is
shown in Figure 1. Adapting the term of an ω-admissible
domain [8], we call AxRCC8 an ω-admissible theory.
B. DL-Lite + UNA
DL-Lite denotes a family of lightweight description logics
that are tailored towards reasoning over ontologies with large
sets of data descriptions. We will focus on the member of
199
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

• {W
r∈BRCC8 r(x, y)} ∪
(joint exhaustivity)
• {V
r1,r2∈BRCC8,r1̸=r2 r1(x, y) → ¬r2(x, y)} ∪
(pairwise disjointness)
• r1(x, y) ∧ r2(y, z) → r1
3(x, z) ∨ · · · ∨ rk
r(x, z) | r; s =
{r1
3, . . . , rk
3}} ∪
(weak composition axioms)
• {eq(x, x)}
(reﬂexivity of eq)
Figure 1.
AxRCC8. Formulas are implicitly universally quantiﬁed
the DL-Lite family allowing functional roles, role hierar-
chies and role inverses. The syntax of concept descriptions,
axioms (a set of axioms is called TBox), and assertions for
describing data (a set of assertions is called ABox) is given
in Figure 2. Here P is a role symbol, A a concept symbol
and a, b are constants. Moreover, in order to keep query
answering complexity low, the interplay of functionality and
inclusion axioms is restricted in the following way: If R
occurs in a functionality assertion, then R and its inverse
do not occur on the right-hand side of a role inclusion
axiom. The semantics of the logic is deﬁned in the usual
ﬁrst-order logic style in terms of relational structures, or
interpretations I, that satisfy axioms and assertions, with the
additional constraint of the unique name assumption (UNA):
Different constants are mapped to different elements in the
domain of the interpretations. The UNA is needed for FOL
rewritability [2, Theorem 6.6].
An ontology O is a tuple (Sig, T , A), with a signature
Sig (i.e., set of concept symbols, role symbols and con-
stants), with a TBox T , and with an ABox A. An ontology
is satisﬁable iff there exists an interpretation satisfying T and
A. Given an interpretation I, checking whether I satisﬁes
T and A is called model checking (and I is called a model
if satisﬁability is given).
Given an ontology, query answering is a decision problem
directly relevant for practical applications. An FOL query
Q = ψ(⃗x) is a ﬁrst-order logic formula ψ(⃗x) whose free
variables are the ones in the n-ary vector of variables ⃗x;
the variables in ⃗x are called distinguished variables. If ⃗x is
empty, the query is called boolean.
Logics of the DL-Lite family have the remarkable prop-
erty that checking the satisﬁability of ontologies as well
as answering queries w.r.t. ontologies can be reduced to
model checking. Since in the logical perspective a relational
database is nothing else than an interpretation (or a ﬁnite
part of the canonical model, aka Herbrand model, to be
more precise), DL-Lite thus offers the possibility to keep
data descriptions as a virtual ABox in a relational database
and reduce consistency checks and query answering to SQL
queries (ﬁrst-order logic formulas) w.r.t. the database. These
properties of DL-Lite are formally described by the term
ﬁrst-order logic rewritability or FOL rewritability for short.
Some deﬁnitions are required to explain this in detail. Let
⃗a be a vector of constants from the signature of the ontology.
The semantics of n-ary FOL queries with respect to an
R
−→
P | P −
B
−→
A | ∃R
C
−→
B | ¬B
TBox:
B ⊑ C, (funct R), R1 ⊑ R2
ABox:
A(a), R(a, b)
Figure 2.
DL-Lite
interpretation I is given by the set QI of n-ary tuples ⃗d over
the domain ∆I such that I[⃗x7→⃗d] |= ψ(⃗x). The semantics of
FOL queries w.r.t. an ontology T ∪ A is given by the set
of certain answers cert(Q, T ∪ A). This set consists of n-
ary tuples of constants ⃗a from Sig such that ψ[⃗x/⃗a] (i.e. the
formula resulting from ψ(⃗x) by applying the substitution
[⃗x/⃗a]) follows from the ontology.
cert(ψ(⃗x), T ∪ A)
=
{⃗a | T ∪ A |= ψ[⃗x/⃗a]}
Two well investigated subclasses of FOL queries are
conjunctive queries (CQ) and unions of conjunctive queries
(UCQ). A CQ is a FOL query in which ψ(⃗x) is an ex-
istentially quantiﬁed conjunction of atomic formulas at(·),
ψ(⃗x) = ∃⃗y V
i ati(⃗x, ⃗y). The UCQs allow disjunctions of
CQs, i.e., ψ(⃗x) can have the form ∃⃗y1
V
i1 ati1(⃗x, ⃗y1)∨· · ·∨
∃ ⃗yn
V
in atin(⃗x, ⃗yn). We conceive a UCQ as a set of CQs.
The existential quantiﬁers in UCQs are interpreted in the
same way as for FOL formulas (natural domain semantics)
and not with respect to a given set of constants mentioned
in the signature (active domain semantics).
With the technical notions introduced so far we are in a
position to give the deﬁnition for FOL rewritability. In the
following, let the canonical model of an ABox A, denoted
DB(A), be the minimal Herbrand model of A. Checking
the satisﬁability of ontologies is FOL rewritable iff for all
TBoxes T there is a boolean FOL query QT such that for
all ABoxes A it is the case that the ontology T ∪ A is
satisﬁable just in case the query QT evaluates to false in
the model DB(A). Answering queries from a subclass C of
FOL queries w.r.t. to ontologies is FOL rewritable iff for
all TBoxes T and queries Q = ψ(⃗x) in C there is a FOL
query QT such that for all ABoxes A it is the case that
cert(Q, T ∪ A) = QDB(A)
T
.
For DL-Lite it can be shown [2] that the satisﬁability
check is FOL rewritable. Let T
= {A ⊑ ¬B} and
A = {A(a), B(a)}, then the satisﬁability test is carried
out by answering the query QT = ∃x.A(x) ∧ B(x) w.r.t.
DB(A), resulting in the answer yes and indicating that T ∪A
is unsatisﬁable. Moreover, answering UCQs in DL-Lite can
be shown to be FOL rewritable [2]. FOL rewritability of
satisﬁability is a prerequisite for answering queries because
in case the ontology is not satisﬁable the set of certain
answers is identical to all tuples of constants in the signature.
200
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

The main technical tool for proving the rewritability
results is the chase construction known from database theory.
The idea is to “repair” the ABox with respect to the con-
straints formulated by the positive inclusion axioms Tp. The
essential property of the canonical model can(O) resulting
from the chasing process is that it is a universal model of
Tp ∪ A with respect to homomorphisms, i.e., can(O) |=
Tp ∪ A and can(O) can be mapped homomorphically to
all models of Tp ∪ A. As existentially quantiﬁed positive
sentences are invariant under homomorphisms, this property
has the consequence that every UCQ Q posed to Tp ∪A can
be answered by computing Qcan(O).
The idea of introducing the concept of FOL rewritability is
motivated by the demand to enable computationally feasible
reasoning services over large ABoxes. Because the size of
the TBox (and the queries) is small with respect to the size
of the ABoxes, computational feasibility is measured with
respect to the size of the ABox alone, thereby ﬁxing all
other parameters (TBox, query respectively). The resulting
type of complexity is called data complexity. Aiming at
FOL rewritability is indeed a successful venture with respect
to computational feasibility. This is due to the fact that
the data complexity of answering FOL queries w.r.t. DL-
Lite ontologies is in the low boolean circuits complexity
class AC0, which, roughly, is the class of problems that
can be decided instantly (in constant time) with the help
of polynomially many processors.
III. OBSTACLES FOR COMBINING DL-LITE AND RCC8
The NP-completeness of satisﬁability tests for RCC8-
constraint networks poses a severe problem when trying to
deﬁne tractable or—even stronger—FOL rewritable spatio-
thematic description logics that use the RCC8-calculus as
the spatial domain. The main challenge in constructing a
computationally tractable logic is to restrict the way the
spatial domain can be accessed from within the logic; one
has to control the “ﬂow of information” from the spatial
domain to the thematic domain of the underlying lightweight
logic. For example, reducing the thematical component of
the logic ALC(RCC8) of [8] to DL-Lite is not enough to
deﬁne a combined logic that allows for FOL rewritability.
As testing the satisﬁability of arbitrary RCC8 constraint
networks is not FOL rewritable, the envisioned combination
of some lightweight DL with the RCC8 domain cannot be
expected to be FOL rewritable in the standard sense of
FOL rewritability as recapitulated in Sect. II-B. Consider,
e.g., the simple boolean query Q = ntpp(a∗, b∗), which
asks whether regions a∗, b∗ in the database are related
such that a∗ is a non-tangential proper part of b∗. The
composition axiom for the pair (ntpp, ntpp) states that
ntpp is a transitive relation; but the transitiveness condition
can not be compiled into a ﬁnite FOL query. Intuitively,
at least one would have to take into account all ntpp-
paths from a∗ to b∗, i.e., one would have to query the
database for all n ∈ N with queries Qn of the form
Qn = ∃x∗
1 . . . ∃x∗
n.ntpp(a∗, x∗
1)∧· · ·∧ntpp(x∗
n, b∗), because
the database may be of the form {ntpp(a∗, c∗
1), ntpp(c∗
1, b∗)}
or of the form {ntpp(a∗, c∗
1), ntpp(c∗
1, c∗
2), ntpp(c∗
2, b∗)} etc.
Therefore, we deﬁne the following completeness and con-
sistency condition for ABoxes and weaken the notion of
FOL rewritability of satisﬁability to FOL rewritability of
satisﬁability with respect to these ABoxes. An ABox A is
called spatially complete iff the constraint network contained
in A is a complete and satisﬁable constraint network. A
special case is a network in which there are no disjunctions
but only base relations used for labeling edges. In practice,
these networks can be computed from (consistent) quantita-
tive geometric data.
Another obstacle for FOL rewritability with respect to
query answering is the expressiveness of the query language.
Though conjunctive queries are weaker than FOL queries,
they allow for querying unnamed objects and building joins
that are not treelike. We will therefore consider a weaker
query language (GCQ+ queries below) that is similar to
the language of grounded conjunctive queries.
IV. COMBINATIONS OF LIGHTWEIGHT DLS WITH RCC8
ALLOWING FOR FOL REWRITABILITY
We consider the following extension of DL-Lite, denoted
DL-Lite(RCC8), in which concepts of the form ∃U1, U2.r
may appear on the right-hand side of TBox axioms and in
which only the attribute loc is allowed to be functional. The
semantics U I of role chains U = R ◦ loc with respect to
an interpretation I is given by role composition of RI and
locI. The interpretation CI of concepts of the form C =
∃U1, U2.{r1, . . . rk} for ri ∈ BRCC8 (1 ≤ i ≤ k) is given
as follows:
CI
=
{d ∈ ∆I | There are e1, e2 with
(d, e1) ∈ U I
1 and (d, e2) ∈ U I
2
such that (e1, e2) ∈ rI
1 or . . . or (e1, e2) ∈ rI
k }
The restriction for concepts of the form ∃U1, U2.r in Figure
R
−→
P | P −
U
−→
loc | R ◦ loc
B
−→
A | ∃R | ∃loc
C
−→
B | ¬B | ∃U1, U2.r for r ∈ RelRCC8
and not (U1 = U2 = loc and eq /∈ r)
TBox:
B ⊑ C, (funct loc), R1 ⊑ R2
Tω
=
AxRCC8
Figure 3.
The combined logic DL-Lite(RCC8)
3 assures that we do not get empty concepts from the begin-
ning (without any interesting deduction); clearly, ∃loc, loc.r
denotes an empty concept with respect to AxRCC8 if r does
not contain the relation eq. We could also handle empty
201
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

concepts in the rewriting algorithms, but deciding to exclude
empty concepts facilitates the rewriting process.
Excluding the special case that U1 = U2 = loc, one
can see that concepts of the form ∃U1, U2.r on the right
side of TBoxes are not relevant for satisﬁability checks;
the reason is that at least one of U1 or U2 will contain a
role symbol that leads to totally new regions, which cannot
be identiﬁed by regions already taken into consideration. In
short, DL-Lite(RCC8) does not essentially generate new po-
tential inconsistencies with ABoxes in comparison with the
potential inconsistencies of the pure DL-Lite part because
DL-Lite(RCC8) offers only a weak means for restricting
the models of the ABox. Therefore it is possible to use the
satisﬁability check of pure DL-Lite ontologies. The resulting
proposition, which states that checking the satisﬁability of
DL-Lite(RCC8)-ontologies with spatially complete ABoxes
is FOL rewritable is a corollary of [2, Theorem 4.14].
Proposition 1: Checking
the
satisﬁability
of
DL-
Lite(RCC8)-ontologies whose ABox is spatially complete
is FOL rewritable. (Proofs of the propositions can be found
in the accompanying technical report [9].)
Proposition 1 provides a prerequisite for rewriting queries
with respect to ontologies in DL-Lite(RCC8). The query
language for which the rewriting is going to be implemented
is derived from grounded conjunctive queries and will
be denoted by GCQ+. This query language is explicitly
constructed for use with DL-Lite(RCC8) and so provides
only means for qualitative spatial queries. But it could be
extended to allow also for quantitative spatial queries.
Deﬁnition 1: A GCQ+ atom w.r.t. DL-Lite(RCC8) is a
formula of one of the following forms:
• C(x), where C is a DL-Lite(RCC8) concept without
the negation symbol and x is a variable or a constant.
• (∃R1 . . . Rn.C)(x) for role symbols or inverses of role
symbols Ri, a DL-Lite(RCC8) concept C without the
negation symbol, and a variable or a constant x
• R(x, y) for a role symbol R or an inverse thereof
• loc(x, y∗), where x is a variable or constant and y∗ is
a variable or constant intended to denote elements of
the ω-admissible theory AxRCC8
• r(x∗, y∗), where r ∈ RelRCC8 and x∗, y∗ are variables
or constants intended to denote elements of AxRCC8
A GCQ+ query w.r.t. DL-Lite(RCC8) is a query of the
form ˜∃⃗y⃗z∗ V Ci(⃗x, ⃗w∗, ⃗y, ⃗z∗) where all Ci(⃗x, ⃗w∗, ⃗y,⃗z∗) are
GCQ+ atoms and ˜∃⃗y⃗z∗ = ˜∃y1 . . . ˜∃yn˜∃z∗
1 . . . ˜∃z∗
m is a
sequence of existential quantiﬁers that have to be interpreted
w.r.t. the active domain semantics.
With respect to this query language it is possible to show
that a TBox in the combined logic DL-Lite(RCC8) can
indeed be compiled into a UCQ and thus into an SQL
query—if one presumes that the ABox is spatially complete.
Proposition 2: Answering GCQ+ queries with respect to
DL-Lite(RCC8)-ontologies whose ABox is spatially com-
plete is FOL rewritable.
This proposition can be proved by extending the proof of
Theorem 5.15 in [2]. The main component of our proof is a
reformulation algorithm that is an adaption of the algorithm
PerfectRef [2, Fig. 13] for reformulating UCQs w.r.t. DL-
Lite ontologies to our setting in which GCQ+ queries are
issued to DL-Lite(RCC8) ontologies.
The original algorithm PerfectRef operates on the positive
inclusion axioms of a DL-Lite ontology by using them as
rewriting aids for the atomic formulas in the UCQ. For
example, if the TBox contains the positive inclusion axiom
A1 ⊑ A2 (A1 is a subconcept of A2), and the UCQ contains
the atom A2(x) in a CQ, then, among the CQ with A2(x),
the rewritten UCQ query contains a CQ in which A2(x)
is substituted by A1(x). In our adaption of PerfectRef, we
integrate GCQ+ atoms of the form ∃U1, U2.r(x) into the
overall reformulation process. The relevant implications of
GCQ+ atoms of the form ∃U1, U2.r(x) that we have to
account for are the following:
• The conjunction of concept ∃R1 ◦ loc, loc.r1 and
∃loc, R2◦loc.r2 is a subconcept of ∃R1◦loc, R2◦loc.r3
where r3 ∈ RelRCC8 is a superset of composition table
entries ri
1; rj
2 for ri
1 ∈ r1 as left and rj
2 ∈ r2 as right
argument. I.e., if the formula ∃R1 ◦ loc, R2 ◦ loc.r3(x)
occurs as a conjunct during the rewriting of a CQ, then
it can be replaced by a conjunct of ∃R1 ◦loc, loc.r1(x)
and ∃loc, R2 ◦ loc.r2(x) in a new CQ for all r1, r2 ∈
RelRCC8 such that r1; r2 ⊆ r3.
• If ∃U1, U2.r1(x) occurs as conjunct in the query and
B ⊑ ∃U1, U2.r2(x) with r2 ⊆ r1 is in the TBox, then
create a new CQ in which ∃U1, U2.r1(x) is substituted
by B(x).
• If ∃U1, U2.r1(x) occurs as conjunct in the query and
B ⊑ ∃U2, U1.r2(x) with r−1
2
⊆ r1 is in the TBox, then
create a new CQ in which ∃U1, U2.r1(x) is substituted
by B(x).
• If ∃R1 ◦ loc, U1.r(x) occurs as a conjunct in the query
and R2 ⊑ R1 is in the TBox, then create a new CQ by
substituting ∃R1 ◦loc, U1.r(x) with ∃R2 ◦loc, U1.r(x).
As query answering in DL-Lite(RCC8) is FOL rewritable,
queries like those from the scenario of the engineering
ofﬁce can be answered in a complete way by transforming
them into SQL queries and getting the answers from the
underlying database. The TBox of the engineering ofﬁce
may contain the following axioms, which formalize the
necessary conditions for parks with lakes and playing areas,
respectively, within DL-Lite(RCC8).
Park+Lake
⊑
Park
Park4Playing
⊑
Park
Park+Lake
⊑
∃hasLake ◦ loc, loc.tpp
Park4Playing
⊑
∃hasPlAr ◦ loc, loc.tpp
The ABox A is derived virtually by mappings from GIS
data in a database; think of mappings for Park+Lake and
202
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

!"#$%&"$'(
)"*&"$'(
)"*!+,#(
+-.(
+-.(
+-.(
/00(
/00(
/001(
2(3.4('.4(0-4(/004(/0014('5(6(⊆((
!"#$(
!"#$7!+"819:(
Figure 4.
Interpretation satisfying the queries Q, Q′, and Q′′.
Park4Playing that produce an object a as instance of
Park+Lake, Park4Playing, respectively. That is, assume the
following: {Park+Lake(a), Park4Playing(a)} ⊆ A.
The query asking for all parks with lakes and playing
areas such that the playing area is not contained as island
in the lake can be expressed as the following GCQ+
(see Figure 4):
Q
=
Park(x) ∧
∃hasLake ◦ loc, hasPlAr ◦ loc.(BRCC8 \ {ntpp})(x)
The reformulation algorithm introduced above produces a
UCQ that contains, among Q and others, the following
CQ according to the ﬁrst rewriting rule in the extended
reformulation algorithm presented above
Q′
=
(∃hasLake ◦ loc, loc.tpp)(x) ∧
(∃loc, hasPlAr ◦ loc.tppi)(x)
Due to the RCC composition table the relation between
the location of the lake and the location of the playing
area referred to in Q′ is {dc, ec, po, tpp, tppi, eq} (see Sec-
tion II-A), which implies a relation BRCC8\{ntpp} between
the lake and the playing area as stated in Q. Thus, using
the fact that ∃loc, hasPlAr ◦ loc.tppi can be rewritten to
∃hasPlAr ◦ loc, loc.tpp in combination with the subconcept
rewriting rule for A1 ⊑ A2 (see above) we get another CQ
Q′′ = Park+Lake(x) ∧ Park4Playing(x)
Using the mappings of Park+Lake and Park4Playing to
SQL, the ﬁnal query to be posed to the database is obtained.
This query captures the object a mentioned above such that
query answering is complete and all objects with design
ﬂaws are found by taking the complement of Park w.r.t. the
result set of Q.
V. CONCLUSION
The query language GCQ+ allows for the SQL compi-
lation of queries w.r.t. a DL-Lite(RCC8) conceptualization
(TBox) for a geographic application domain (Propositions 1
and 2). In order to ﬁnd all relevant mappings to SQL, the
TBox is used to provide an axiomatization of the concepts
used in the domain. In order to provide for complete query
answering this formalization needs only to be quite weak
as shown in the example. DL-Lite(RCC8) is not expressive
enough to deﬁne sufﬁcient conditions for concepts like that
of a park containing a lake in terms of quantitative data.
However, as we have argued, given the mappings of concepts
(relations) to SQL, only necessary conditions on spatio-
thematic concepts need to be formulated in order to automat-
ically construct SQL queries that provide for complete query
answering. The process of query rewriting requires reasoning
w.r.t. the TBox and the axioms AxRCC8, and reasoning
algorithms are indeed combinatorial w.r.t. query and TBox
size (but we have small TBoxes and queries). However,
given a compiled query, query answering is tractable in data
complexity, and hence feasibility of ontology-based query
answering in GIS applications is achieved.
REFERENCES
[1] R. Gr¨utter, I. Helming, S. Speich, and A. Bernstein, “Rewrit-
ing queries for web searches that use local expressions,” in
Proceedings of the 5th International Symposium on Rule-
Based Reasoning, Programming, and Applications (RuleML-
2011 – Europe), ser. LNCS, N. Bassiliades, G. Governatori,
and A. Paschke, Eds., vol. 6826, 2011, pp. 345–359.
[2] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini,
A. Poggi, M. Rodr´ıguez-Muro, and R. Rosati, “Ontologies and
databases: The DL-Lite approach,” in Semantic Technologies
for Informations Systems – 5th Int. Reasoning Web Summer
School (RW-2009), ser. LNCS, S. Tessaris and E. Franconi,
Eds.
Springer, 2009, vol. 5689, pp. 255–356.
[3] D. A. Randell, Z. Cui, and A. G. Cohn, “A spatial logic
based on regions and connection,” in Proceedings of the 3rd
International Conferecence on Knowledge Representation and
Reasoning, 1992, pp. 165–176.
[4] A. K. Mackworth, “Consistency in networks of relations,” Artif.
Intell., pp. 99–118, 1977.
[5] J. Renz, Qualitative Spatial Reasoning with Topological Infor-
mation, ser. Lecture Notes in Computer Science.
Springer,
2002, vol. 2293.
[6] B. Bennett, “Modal logics for qualitative spatial reasoning,”
Logic Journal of the IGPL, vol. 4, no. 1, pp. 23–45, 1996.
[7] J. Renz and B. Nebel, “On the complexity of qualitative
spatial reasoning: a maximal tractable fragment of the region
connection calculus,” Artif. Intell., vol. 108, no. 1-2, pp. 69–
123, 1999.
[8] C. Lutz and M. Miliˇci´c, “A tableau algorithm for description
logics with concrete domains and general TBoxes,” J. Autom.
Reasoning, vol. 38, no. 1-3, pp. 227–259, 2007.
[9] ¨O. L. ¨Ozc¸ep and R. M¨oller, “Combining lightweight descrip-
tion logics with the region connection calculus,” Institute for
Softwaresystems (STS), Hamburg University of Technology,
Tech. Rep., 2011, available online at http://www.sts.tu-harburg.
de/tech-reports/papers.html.
203
Copyright (c) IARIA, 2012.     ISBN: 978-1-61208-178-6
GEOProcessing 2012 : The Fourth International Conference on Advanced Geographic Information Systems, Applications, and Services

