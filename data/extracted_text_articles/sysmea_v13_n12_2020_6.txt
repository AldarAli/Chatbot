56
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Two Models for Hard Braking Vehicles and Collision Avoiding Trajectories
Fynn Terhar
BMW Group / FernUniversit¨at in Hagen
Department for Fleet Intelligence
Munich, Germany
Email: fynn.terhar@bmw.de
Christian Icking
FernUniversit¨at in Hagen
Department for Cooperative Systems
Hagen, Germany
Email: christian.icking@fernuni-hagen.de
Abstract—In this paper, we describe two models that describe
vehicle dynamics in full braking situations with collision avoiding
motions. By combining the equations of the classic Ackermann-
Model with conditions that ensure a stable vehicle movement
during simultaneous heavy braking and turning motions, we
derive two models that describe the set of controllable trajec-
tories by compound equations in the x, y plane. We describe
a simpliﬁed model ﬁrst and compare its performance to the
well known Constant-Turn-Rate-And-Acceleration-Model, which
is computationally more expensive and less precise. We discuss
the simpliﬁed model regarding uncertainties and their effect on
reachability estimation of vehicles in admissible scenarios, to show
the feasibility of our solution. By considering uncertainties of
the parameters used in the Basic Model, we show a way to
estimate the reachable area of a hard braking vehicle in different
starting constellations. We extend this Basic Model to handle
much more dynamic situations and starting conditions. In the
new Extended Model, the initial yaw rate is an input, as well
as the maximum steering angle change rate. The vehicle length
and steering direction are also considered. By these additions,
we are able to describe trajectories in much more realistic
detail than with the Basic Model. We derive and present all
necessary equations required for computing these trajectories.
Furthermore, we analyze and demonstrate all possible types of
trajectories that directly follow from our deﬁnitions.
Keywords–Reachability; Trajectory; Dynamic Vehicle Model;
Safety; Collision Avoidance; Braking; Trajectory Types.
I.
INTRODUCTION
Many functions in Highly Automated Driving (HAD) and
Advanced Driving Assistance Systems (ADAS) are discussed
regarding their safety towards events caused by other trafﬁc
participants, whose behavior is not well predictable. In case
of an unforeseen event, vehicles need to avoid a collision by
a suitable trajectory. In literature, these trajectories are often
referred to as Fail-Safe-Trajectories. These trajectories can
either be evasive and try to ﬁnd a solution around an obstacle
or bring the vehicle to an emergency stop. The vehicle is then
forced to ﬁnd a trajectory till full stop within an area in front
of the vehicle, which is deﬁned by its physical properties and
speed vector.
A. Motivation
In this paper, we call this area the Braking Area, which
is important to know in many different applications and
situations, such as in Figure 1, in which two vehicles are
unexpectedly confronted with each other. Also, when deﬁning
the set up of on-board sensors, it can be useful to have a
good knowledge of the braking area. Another example is the
v2
v1
v2
v1
Figure 1.
Left, two vehicles v1, v2 approach a crossing. Right, at sudden
confrontation, v1 can beneﬁt from its reachable area for emergency braking.
search for fail-safe trajectories, such as shown in Figure 2,
where the knowledge of the reachable set of vehicle states
can signiﬁcantly accelerate the computation, as it reduces the
search space and can therefore save valuable time in emergency
situations.
0
5
10
15
20
x[m]
−2.5
0.0
2.5
5.0
7.5
y[m]
Figure 2.
A set of 20 braking trajectories computed by the Extended Model
introduced in this paper. Advanced dynamics at the start state are incorporated.
B. Literature overview
This paper is based on our previous work introduced in [1],
where we introduce a new model to compute trajectories of
hard braking and collision avoiding vehicles. This task is
related to ﬁnding fail-safe trajectories. Methods for avoiding
obstacles are numerous, see for example Werling et al. [2],
where the authors address dynamic street scenarios by an
optimal control approach. The method generates trajectories
that are optimal in terms of jerk minimization and following a
previously computed trajectory. Another approach is explained
by Ziegler et al. [3]. They use a cost function to plan obstacle
avoiding paths in unstructured environments, but not on the

57
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
description of fail-safe trajectories. Several approaches towards
ﬁnding fail safe trajectories for road vehicles exist. Pek and
Althoff [4] describe a method to generate fail-safe trajectories
for dynamic trafﬁc scenarios in a computationally efﬁcient
manner. Their solution approximates the set of reachable
states of the ego vehicle and other trafﬁc participants and
can therefore guarantee collision free trajectories. A motion
planner for fail-safe trajectories is shown by Magdici and
Althoff [5]. A related application is presented in [6], where
a safety framework is demonstrated that can test a planned
trajectory for possible future collisions. A complete motion
planning system is described by Heinrich [7]. The presented
sampling based approach consists of three cyclic, elementary
steps. State Space Exploration uses vehicle surround view
sensors. Based on the explored state space, trajectory samples
are generated during Trajectory Generation phase. The last
step consists in Optimization, which means ﬁnding an optimal
trajectory from the previously generated trajectories.
Mitchell et al. [8] discuss different approaches of reacha-
bility analysis of dynamic systems for the safety assessment of
trajectories. Asarin et al. [9] present an approach for reacha-
bility approximation of partially linearized systems in general.
An often applied technique to approximate the state space
efﬁciently is by zonotopes, see, e.g., the paper of Girad [10].
Koschi et al. [11] introduce an open source software solution
which predicts road occupancy by trafﬁc participants within a
given time horizon. By overestimating the occupancy by the
union of several object models, the authors ensure to ﬁnd all
possible trafﬁc conﬁgurations. Potential braking and turning is
overestimated by a circle of lateral and longitudinal maximum
and minimum accelerations. The physical interaction between
velocity and admissible lateral accelerations are therefore over-
estimated. Althoff [12] describes many underlying concepts of
reachability analysis for road vehicles. In contrast to formal
veriﬁcation, ByeoungDo et al. [13] propose a Recurrent Neural
Net for predicting trafﬁc participants. Explicit braking and
turning motions and their interrelation are not in the focus.
Both of our models provide a more detailed and accurate
description of this interaction in order to reduce the overes-
timation towards a more realistic model.
The interrelation of braking and turning is, e.g., discussed
by Giovannini et al. [14] where the authors describe the last
point in time when a collision can be avoided by swerving. The
authors explicitly focus their work on two-wheeled vehicles.
Ackermann et al.[15] present control strategies for braking
and swerving motions. Choi et al. [16] propose an additional
strategy based on model predictive control.
C. Contribution
In this paper, we present two different models for calculat-
ing feasible trajectories for braking while turning. In the ﬁrst
part, we describe a Basic Model that can quickly calculate
motion primitives for estimating the reachable area of a vehicle
while simultaneously braking and turning, further on called
Braking Area. This Basic Model is simpliﬁed in two essential
points. Firstly, the yaw rate at time t = 0, which is the change
in direction a vehicle is pointing, was implicitly assumed to be
zero. Secondly, the rate at which the yaw rate ˙ψ can change,
was assumed to be ∞. In order to estimate the Braking Area,
these assumptions are valid as they include all trajectories with
more realistic properties, and hence lead to an acceptable over-
estimation of the breaking area. However, when calculating
feasible braking trajectories in scenarios that deviate much
from the aforementioned assumptions, a more realistic model
is to be preferred. Therefore, we extend the Basic Model
towards an Extended Model by including the yaw rate at time
t = 0 as ˙ψ0, as well as a new model parameter ˆ˙δ, which
limits the change rate of ˙ψ by changing the steering angle
δ. See Figure 2 for an example in which a set of Extended
Model trajectories are shown. Furthermore, we extend the
Basic Model by the turning direction s, which determines
the sign of a trajectory’s curvature. With these extensions, we
drastically raise the applicability towards being able to:
1)
Calculate realistic trajectories, also for dynamic situ-
ations at t = 0.
2)
Call the model recursively, as all produced outputs
my be fed back as inputs.
3)
Use the model to calculate motion primitives for any
start state of moving vehicles which is in a stable
state, e.g., is not sliding over the road uncontrollably.
4)
Search for feasible and yet complex emergency tra-
jectories by concatenating motion primitives.
With these two models, we contribute equations that can be
used to calculate trajectories for automated vehicles or to
estimate the reachable area in emergency braking situations.
With respect to the work of Heinrich [7], our equations
contribute trajectories for the Trajectory Generation step of
vehicle motion planning for automated driving.
In Section II, we describe underlying assumptions that
hold for both models and outline the major differences. Used
symbols and notations are also described. In Section III we
derive the Basic Model, which directly calculates vehicle
trajectories towards a full stop while simultaneously braking
and steering under simpliﬁed assumptions. Section III-A intro-
duces all equations of the Basic Model. Braking and steering
always needs to be performed in a balanced way, as both
inﬂuence the controllability of the vehicle on the road. We
therefore introduce a parameter that describes the ratio of
this compromise. Furthermore, the friction between different
road surfaces and tires is considered. A comparison of the
introduced Basic Model and the CTRA-Model is given in
Section III-B. The inﬂuence that uncertain model inputs and
parameters have are discussed in Section III-C. The Extended
Model is introduced in Section IV. The model equations of
the Extended Model are derived in Section IV-A, which takes
the change rate of steering angle into account, as well as
the turning direction of the vehicle and the initial yaw rate
and the maximum change in steering angle combined with
the vehicle length. Subsequently, Section IV-B analyzes and
determines all possible types of trajectories that directly follow
from our equations. Each trajectory is characterized formally
and demonstrated by example trajectories. At last, Section V
discusses the applicability and further research regarding the
models deﬁned in this paper.
II.
DEFINITIONS FOR THE TWO MODELS AND THEIR
DIFFERENCES
In this section, we describe all symbols of the two models
and common assumptions.

58
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Physical model values are denoted as regular latin letters,
while angles are denoted as greek letters. Symbols used in this
paper are summarized in the following Table I.
TABLE I.
SYMBOLS AND NOTATION USED IN THIS PAPER.
Symbol
Description
Unit
Xi
Model state at time i
–
p
Position ∈ R2
m
Xstop
Stop state, v = 0
–
ψ
Yaw Angle
rad
˙ψ
Yaw Rate
rad/s
s
Direction of steering as sign ±1
–
ˆ˙δ
Maximal steering angle change
rad/s
δ
Steering angle
rad
b
Braking Factor
–
ˆa
Maximum admissible acceleration
m/s2
rturn
Minimum turning radius
m
L
Length of a vehicle
m
I•
Interval of admissible values for •
–
•min, •max
Extreme values of I•
–
fT(t), fF(t), fR(t)
Part of f(t) limited by Turning, Friction, Radius
–
e
F (t)
Integral without constant: e
F (t)=
R
f(t)dt−CF
–
f(t)
Linearized version of f(t)
–
fx = f(tx)
Abbreviating function values of f at times tx
–
S(t), C(t)
Sine and Cosine Fresnel Function[17]
–
Both models assume an ordered priority, on which the
trajectory calculations are based upon:
1)
The vehicle needs to be brought into a state with
velocity v = 0 quickly.
2)
Steering dynamics may be used to avoid obstacles or
to reduce unavoidable impact.
In Figure 3, the main difference of the two models can
be seen. The Extended Model takes the initial yaw rate ˙ψ0
into consideration, which leads to three additional model pa-
rameters compared to the Basic Model, namely the maximum
steering angle change rate ˆ˙δ, the direction of steering as sign
s and the vehicle length L.
Basic
Model
p0
v0
ψ0
pt
vt
ψt
˙ψt
rturn
b
ˆa
(a) Basic Model without initial yaw
rate and steering dynamics.
Extended
Model
p0
v0
ψ0
˙ψ0
pt
vt
ψt
˙ψt
ˆ˙δ s ˆa
b rturnL
(b) Extension with one additional
input and three additional parameters.
Figure 3.
A comparison of both model’s parameters (top) and state inputs
(left). Note that model outputs (right) are the same in both models.
III.
BASIC MODEL
This section describes the Basic Model, in which no initial
yaw rate
˙ψ0 is incorporated, however a maximal steering
angle change rate ˆ˙δ of ∞ is assumed, which is sufﬁcient
for reachability estimation. A black box view of the model
is shown in Figure 3a.
A. Equations of the Basic Model
The Basic Model is based on the so called Friction Circle,
e.g., described by Pacejka [18]. As the modeled vehicle is
braking in order to come to a full stop quickly, it will always be
located near the boundary of this circle, either due to braking
only, or by braking and turning in combination, as shown in
Figure 4. The circle deﬁnes controllability when Equation (1)
holds, where ⃗alon is the longitudinal acceleration component
and ⃗acen the centripetal component, respectively.
ˆa ≥ ∥⃗ares∥ = ∥⃗alon + ⃗acen∥
(1)
alon
acen
ares
r = ˆa
Figure 4.
Friction Circle in the ax, ay-plane. Radius r is equal to the
maximally applicable acceleration ˆa between vehicle and road surface.
As the acceleration ares results from a combination of brak-
ing and steering, the ratio alon/ˆa causes different trajectories. We
deﬁne this ratio by the factor b, as declared in Equation (2),
further on called Braking Factor. We call b Braking Factor,
as it describes the percentage of ˆa that is applied for braking
rather than turning. A b value of −0.5 means that 50% of the
applicable acceleration is applied for braking. Note that ˆa is
positive, but when braking alon is negative, hence we choose
b ∈ [−1, 0].
b := alon
ˆa
(2)
The Basic Model provides a formal description of vehicle
position p(t) = [x, y]T which is generally deﬁned by the
following integral:
p(t) =

x(t)
y(t)

=
Z
v(t)

cos(ψ(t))
sin(ψ(t))

dt
(3)
where
v(t) = alont + v0
(4)
A deﬁnition of ψ(t) can be found by integrating the yaw
rate
˙ψ(t) over time t. In this Basic Model, the yaw rate
is constrained by two different limits. The ﬁrst limit is the
Friction Circle, which does not allow higher yaw rates due
to an otherwise resulting instable trajectory. This yaw rate is
called ˙ψF. The second limit for the yaw rate is caused by the
minimum turning radius rturn. We call it ˙ψR. We thus deﬁne
the yaw rate stepwise as given in Equation (5).
˙ψ(t) =
( ˙ψF(t) = ˆa
√
1−b2
v(t)
,
0 ≤ t ≤ tFR
˙ψR(t) = v(t)
rturn ,
tFR < t ≤ tstop
, ∀t ≥ 0
(5)
where tFR is deﬁned as the time of intersection between ˙ψF(t)
and ˙ψR(t) as can be seen in Equation (6) and tstop is the time
when v = 0 (see Equation (7)).
tFR = max

a−1
lon
q
rturnˆa
p
1 − b2 − v0

, 0

(6)
tstop = −v0a−1
lon
(7)

59
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
The yaw angle over time is then simply the time integral
over ˙ψ(t), as shown in Equation (8).
ψ(t) =
Z
˙ψ(t)dt =
ψF(t),
0 ≤ t ≤ tFR
ψR(t),
tFR < t ≤ tstop
, ∀t ≥ 0
(8)
where
ψF(t) = z(ln (v(t)) − ln (v0)) + ψ0
(9)
ψR(t) =
1
2alont2 + v0t

r−1
turn + Cψ,R
(10)
z = b−1p
1 − b2
(11)
Cψ,R = ψF(tFR) −
1
2alont2 − v0t

r−1
turn
(12)
Here, Cψ,R is the constant of integration. With these equations,
a solution for the positional integrals x(t) and y(t) can be
found as shown in Equations (15) and (20). The x-Position
can be calculated by Equations (13) and (14):
xF(t) = v(t)2 (z sin(ψ(t)) + 2 cos(ψ(t)))
alon (z2 + 4)
+ Cx,F
(13)
xR(t) = rturn sin(ψ(t)) + Cx,R
(14)
These equations describe position over time x(t) and y(t). See
stepwise Equation (15) for x(t).
x(t) =
xF(t),
0 ≤ t ≤ tFR
xR(t),
tFR < t ≤ tstop
(15)
The constant Cx,F is bound by the conditions x(0) = x0, which
means the vehicle must be at the starting position at time
t0. The constant for xF, Cx,F, is bound to hold the condition
xR(tFR) = xF(tFR), which means that xF(t) must seamlessly
– e.g., in value and gradient – be continued by xR(t) at tFR.
The result for both constants is described by Equations (16)
and (17).
Cx,F = x0 − v2
0 (z sin(ψ0) + 2 cos(ψ0))
alon(z2 + 4)
(16)
Cx,R = x(tFR) − rturn sin(ψ(tFR))
(17)
The general description for y(t) is shown below in Equa-
tion (20), while the step wise segments of all y-positions are
shown in Equations (18) and (19):
yF(t) = −v(t)2 (z cos(ψ(t)) − 2 sin(ψ(t)))
alon (z2 + 4)
+ Cy,F
(18)
yR(t) = −rturn cos(ψ(t)) + Cy,R
(19)
y(t) =
yF(t),
0 ≤ t ≤ tFR
yR(t),
tFR < t ≤ tstop
(20)
The result for both constants to ensure seamlessness is de-
scribed by Equations (21) and (22).
Cy,F = y0 − v2
0 (z cos(ψ0) − 2 sin(ψ0))
alon(z2 + 4)
(21)
Cy,R = y(tFR) + rturn cos(ψ(tFR))
(22)
The trajectory of a braking and turning vehicle is described
as p(t), by the compound x- and y-position in Cartesian
coordinates over time t.
Before introducing the model extension, we discuss the
Basic Model and compare it with the CTRA Model in Sec-
tion III-B, in order to understand the implications of the
approximations and model parameters ﬁrst.
B. Comparison of Our Basic Model Against CTRA Model
To evaluate the Basic Model’s performance with respect to
calculation time and to show its correctness, we compare it to
a CTRA-Model [19] (Constant Turn Rate and Acceleration)
in a simulation. The CTRA simulation iteratively moves a
vehicle, such that our condition in (1) is fulﬁlled, and the
assumptions introduced in Section II hold. The simulation
therefore calculates effectively the same maneuvers as our
Basic Model, but in a very different way. We choose the
CTRA-Model, as it is well known, allows the vehicle to follow
a spiral shape and has the same state space representation as
our model. The turn rate and acceleration is assumed to be
constant within one of many consecutive time steps ∆t.
0
10
20
x[m]
−10
0
10
y[m]
Our model
(a) Our basic braking model.
0
10
20
x[m]
−10
0
10
y[m]
CTRA
(b) CTRA-Model, ∆t = 0.0075s.
Figure 5. Comparison of our Basic Model to the CTRA-Model for 40 vehicle
trajectories with linearly sampled b values and equal start state.
The result in Figure 5 shows that our model matches
the shape of the CTRA-Model well, without introducing lin-
earization errors as the CTRA-Model does. Both results from
Figure 5 show a very similar structure. The starting conditions
for both tests are v0
=
16.67m/s, ˆa
=
10m/s2, rturn
=
12.5m, ψ0 = 0 rad. Note that the CTRA-Model (Figure 5b)
has slightly longer trajectories, especially in the outer arms of
the structure. This is caused by the CTRA-Model’s assumption
of a constant turn rate ˙ψ, which is not correct in this kind
of non-linear maneuver. In our model (Figure 5a), the only
assumption is that of a constant acceleration, as introduced in
Section II.
The main advantage of our model is the fact that we can
directly compute certain vehicle positions straight from the
formulas derived in Section III-A such that time intensive
calculations are not necessary. A comparison of computation
times tcalc in seconds, and their deviation σtcalc over 10 runs is
shown in Table II. In the ﬁrst test, only the stop states where

60
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
computed of 1000 different b values. In the second test, a whole
pearl chain of positions from start to stop was computed, with
250 points per b value.
TABLE II.
COMPARISON TO THE CTRA MODEL.
Calculate 1000 possible stop states, ∆t = 0.01112s
v0
5 m/s
10 m/s
20 m/s
Mean
tcalc[s]
σtcalc
Mean
tcalc
σtcalc
Mean
tcalc
σtcalc
CTRA
1.0715
0.0137
2.1975
0.0052
4.9310
0.1073
Our model
0.2059
0.0053
0.2078
0.0017
0.2144
0.0075
Calculate 1000 trajectories, 250 samples per trajectory, ∆t = 0.01112s
v0
5 m/s
10 m/s
20 m/s
Mean
tcalc
σtcalc
Mean
tcalc
σtcalc
Mean
tcalc
σtcalc
CTRA
1.0870
0.0207
2.2335
0.0096
4.9761
0.0814
Our model
0.2310
0.0017
0.2326
0.0021
0.2320
0.0011
The table shows that our model is up to 20 times faster in
terms of computing time than the CTRA-Model, especially for
high initial velocities v0. This is caused by the fact that CTRA
must iteratively compute time steps until the stop position is
found, whereas our model can directly compute the stop state.
C. Discussion of Model Uncertainties
In this section, we discuss the effect of individual uncer-
tainties in the model parameters rturn, ˆa and the initial vehicle
state X0 = [x0, y0, v0, ψ0]T . We model the uncertainties as
intervals IΘ,IX0 that contain all possible values. As the param-
eters are also contained in the Extended Model in Section IV,
this discussion is valid for both models.
1) Highest possible deceleration ˆa: The highest possible
deceleration heavily depends on the road and tire conditions,
which are often uncertain. The interval Iˆa therefore covers
the most slippery and most rough road condition possible.
Calculating different stop states Xstop with different values for
ˆa reveals an almost linear behavior within expectable values
of ˆa ∈ Iˆa.
The resulting shape of 50 different ˆa ∈ Iˆa can be seen in
Figure 6a, where lower values of ˆa lead to a farther vehicle
trajectory with an almost linear behavior. A line segment shows
the extending effect of the parameter uncertainties on the top
half.
0
20
40
x[m]
−20
0
20
y[m]
(a) Resulting trajectories at interval
Iˆa = [4, 12] m
s2 .
0
25
50
x[m]
−20
0
20
y[m]
(b) Resulting trajectories at intervals
Iˆa = [4, 12] m
s2 , Iv0 = [15.3, 18.1] m
s
Figure 6.
Two sets of trajectories with a b value of −0.6. Left, only
considering Iˆa. Right, considering Iˆa and Iv0.
2) Smallest possible turning radius rturn: The smallest pos-
sible turning radius rturn is a vehicle inherent parameter which
inﬂuences the trajectory after tFR and also deﬁnes the value
of tFR itself. Although there are certain legal requirements for
rturn depending on vehicle class, the exact value is uncertain,
especially when considering other trafﬁc participants.
Any rturn ∈ Irturn causes a different stopping position.
Unfortunately, neither the lowest nor the highest rturn neces-
sarily leads to the outmost stopping position. By observing
the stopping positions depending on rturn, one can see that the
shape of all stopping positions with different rturn ∈ Irturn forms
a spiral with a rising radius. Let A be the stopping position of
the lowest rturn, A = Xstop|rturn,min, and B = Xstop|rturn,max. The
circle with radius r = dist(A, B) at center A then includes all
points of the spiral, which means all stopping positions can be
overestimated by such a circle. By describing this distance as
function d = f(ˆa, v0), it can be shown that the maximum
distance is at dmax = f(ˆamin, v0,max). Figure 7 shows an
example of such a circle.
5
6
7
8
x[m]
2.5
3.0
3.5
4.0
y[m]
rturn,min
rturn,max
Figure 7. Effect of Irturn on Xstop. The ﬁgure shows how a circle can surround
all stopping positions caused by different rturn ∈ Irturn =[1e−7, 13]m.
In order to show the spiral effect in Figure 7, we assumed
Irturn = [1e−7, 13]m and v0 = 10m/s, which results in a circle
radius of ≈ 2.4m. For a more realistic scenario of Irturn =
[7, 13]m and v0 = 10m/s, the radius of the circle is ≈ 1.3m.
3) Initial velocity v0: The uncertainty in the initial velocity
Iv0 determines the stopping distance similarly to Iˆa, as it
stretches the possibly reachable positions farther from the
start. This means the closest reachable position is deﬁned by
v0,min and ˆamax, which stands for a very rough road-to-tire
surface. In contrast, the farthest reachable stopping position
is deﬁned by the highest velocity v0,max on the most slippery
road ˆamin possible. An example of the resulting shape is shown
in Figure 6b.
4) Initial position: The initial position of the vehicle will
always be uncertain, as no perfect localization is possible. The
effect of an uncertain starting position (x0, y0) is however not
complex, as a different starting position of ∆x, ∆y simply
causes a translation of the complete reachable area of ∆x, ∆y.
5) Initial yaw angle: The initial yaw angle rotates the
complete reachable area around the starting position of the
vehicle. Figure 8a shows an example of this effect, where
Iψ0 = [−π/32, π/32].
6) Combination of all uncertainties: So far, we discussed
the uncertainty of parameters separately. To describe and
overestimate all system states that can potentially be reached
under all uncertainties is not in the scope of this paper. In order
to do so, a formal reachability analysis must be performed,
compare for example [6][8][12][20].
By sampling all parameters from I and calculating all
combinations, we can estimate the reachable area non formally
by the union of the resulting shapes.

61
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
In Figure 8b we show such a result, where Iˆa=[7, 11],
Irturn =[7, 13],
Iv0 =[15.3, 18.1],
Iψ0 =[−π/32,
π/32],
Ix0 =Iy0 =[−1, 1].
We
sample
3
parameters
of
each
interval. The above section show how the Basic Model of this
paper can be used to estimate the Braking Area. To take into
account the physics of a limited change rate, we extend the
Basic Model by introducing the additional parameters s, L, ˆ˙δ
and the new model input of ˙ψ0 as shown in Figure 3b.
0
10
x[m]
−10
−5
0
5
10
y[m]
(a) Trajectories at interval
Iψ0 =[−π/32, π/32].
Other parameters, b= − 0.6,
ˆa=4m/s2, v0 =15.3m/s,
rturn =12.5m.
(b) Trajectories at interval
Iˆa =[7, 11]m/s2, Irturn =[7, 13]m,
Iv0 =[15.3, 18.1]m/s,
Iψ0 =[−π/32, π/32]rad,
Ix0 =Iy0 =[−1, 1]m.
Figure 8.
The effect of uncertain parameters. Left, only Iψ0 is considered.
Right, all parameters are assumed uncertain.
IV.
EXTENDED MODEL
The missing yaw rate at t = 0 permits estimating the
reachable area of the vehicle, however, leads to inaccurate
trajectory results in situations in which a vehicle has an initial
yaw rate ˙ψ0 not close or equal to 0, especially when steering
is slow.
For the Extended Model, the general positional integrals
remain the same as in Equation (3) introduced in the Basic
Model. The difference lies in the calculation of yaw angle ψ(t).
Instead of directly applying the highest yaw rate permitted by
the Friction Circle ˙ψF, we instead start from the current yaw
rate at t = 0, called ˙ψ0. From this point forward, the yaw
rate is computed by steering, until the vehicle either reaches
its stopping position, or until another limitation is reached.
A. Equations of the Extended Model
This yields three different descriptions of the current yaw
rate. In general, the yaw rate is deﬁned in Equation (23) as:
˙ψ(t) = v(t)
r(t) = v(t)κ(t)
(23)
where r(t) is the radius of the trajectory and κ(t) the respective
curvature. An advantage of curvature over radius is that a
straight curve has a radius of ∞, but a curvature of 0, which
is much easier for computations.
Hence, the difference between the trajectory segments
lies in the different descriptions of curvatures, which can be
computed trivially.
Figure 9 shows an example of the different curvatures.
In the following, all different curvature types κT(t), κF(t)
and κR(t) will be described in detail.
t0
tstop
tTF
tFT
tTR
t[s]
0.00
0.02
0.04
0.06
0.08
κ[m−1]
κT
κF
κR
Figure 9.
The 3 curvatures κT, κF, κR. The minimum of all curves deﬁnes
the biggest possible curvature in each point in time between t=0 and t=tstop.
Curvature Deﬁned by Change of Steering Angle: The
curvature of road vehicles is determined by the steering angle
δ, which is set by the steering wheel and is deﬁned by the
angle of vehicle longitudinal axis and the direction the wheels
are pointing. Because of mechanical and physical limits, the
steering wheel cannot be moved arbitrarily fast. To incorporate
this property in our Extended Model, we introduce the new
parameter ˆ˙δ, which describes the maximum steering angle
change rate. The resulting curvature deﬁnition based on the
steering angle δ and maximum change rate ˆ˙δ is shown in
Equation (24):
κT,l(t) = δ(t)
L
= sˆ˙δt + δ0
L
(24)
where the steering angle at t = 0, δ0, is deﬁned in Equa-
tion (25) as:
δ0 =
˙ψ0L
v0
(25)
However, the description of κT,l(t) is not sufﬁcient to describe
κT(t) completely. The reason can be seen in Figure 9 in
the appearance of κT, speciﬁcally in the jump that the curve
performs at tFT. The maximum change rate of steering angle,
ˆ˙δ, not only becomes effective from t = 0 onwards, but also
at any other times. However, the only situation of such kind,
in the model, is when the Friction Circle allows for change
in curvature which is greater than ˆ˙δ. In that case, it must be
limited by a differently deﬁned segment of κT(t), called κT,r(t).
This segment κT,r(t) is deﬁned as shown in Equation (26),
which means that the original curve κT,l is shifted by an offset
oT along the y-axis.
κT,r = κT,l + oT
(26)
The offset oT must ensure that the gradient of κF(t) does not
exceed the gradient of κT(t). It is deﬁned in Equation (27) as:
oT = κF(tFT) − κT,l(tFT)
(27)
where
tFT = −alon
−1


3p
2ˆa2bL
√
1 − b2
3q
ˆ˙δ
+ v0


(28)
With this, a complete description of κT(t) can be formulated
as Equation (29):
κT(t) = min (κT,l(t), κT,lr(t))
(29)

62
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
where
κT,lr(t) =
κT,l(t),
0 ≤ t ≤ tFT
κT,r(t),
tFT < t < tstop
(30)
In words, the above Equation (29) means that if κT,l
does not intersect κF, there is no second segment of κT.
However, if it does intersect, the two-segmented description
from Equation (30) shall be used.
The yaw rate based on the initial yaw rate ˙ψ0 is hence
deﬁned as shown in Equation (31).
˙ψT(t) = v(t)κT
(31)
˙ψT(t) describes the yaw rate of a vehicle that is constantly
turning as quickly as the mechanical system allows it.
As can be seen in Equation (31), the yaw rate described
by constantly changing the steering angle results in a second
order polynomial.
If this polynomial was used to further ﬁnd a description of
position, a computationally too expensive intermediate result
emerges. The reason for that can be found in ψT(t), which
naturally is a third order polynomial, see Equation (32).
ψT(t) =
Z
˙ψT(t)dt = At3 + Bt2 + Ct + D
(32)
where
A = ˆabˆ˙δs
3L
B = 3ˆabδ0 + 3ˆ˙δsv0
6L
C = δ0v0
L
D = const.
As the position is deﬁned as Equation (33), it means that
an integral in the form of
R
t cos(t3)dt must be solved.
pT(t) =

xT(t)
yT(t)

=
Z
v(t)

cos(ψT(t))
sin(ψT(t))

dt
(33)
The integral of Equation (33) leads to a large combina-
tion of Incomplete Gamma Functions as described, e.g., by
Paris [21, 8]. Though several asymptotic approximations exist,
see [21, 8.25], the computational complexity is expected to
overrule the resulting gain in accuracy. Hence, we introduce
an approximation earlier in the position calculation. Instead
of applying the parabolic shape of ˙ψT(t), we approximate the
relevant parabola segment by straight line segments. See the
ﬁrst bold line segment in Figure 10 for an example.
Note that the approximation always under-estimates the
actually possible yaw rate and is hence feasible. The formal
deﬁnition of any approximative line from t1 to t2 is shown in
Equation (34).
˙ψT(t|t1, t2) =
˙ψ(t2) − ˙ψ(t1)
t2 − t1
t + t2 ˙ψ(t1) − t1 ˙ψ(t2)
t2 − t1
(34)
t0
tstop
tTF
tFT
tTR
tAX
t[s]
0.00
0.25
0.50
0.75
1.00
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψT
Figure 10.
An example of linearizing
˙ψT(t). Two parabola segments are
approximated, the ﬁrst from 0 to tTF. The second one from tFT to tTR.
where ˙ψ(t1,2) ∈ ˙ψT. Note that even though the chosen yaw
rates at t1,2 must be ∈ ˙ψT, they can also be computed with
another yaw rate description, as t1,2 are intersection times of
yaw rates, and hence the yaw rates of at least one other segment
of ˙ψ(t) are identical at these times.
The second line segment from tFT to tTR in Figure 10 shows
a special case that must be considered when linearizing ˙ψT.
The parabola segment spans across the parabola’s Apex at tAX.
See Figure 11 for a more detailed example. If unconsidered,
this case could cause large errors.
t0
tstop
tAX
t[s]
0.0
0.5
1.0
˙ψ[ rad
s ]
˙ψT
˙ψT,l
˙ψT,r
Figure 11.
Linearization of ˙ψT(t) by two line segments ˙ψT,l and ˙ψT,r in the
special case that the line segment spans across the Apex Point at time tAX.
The Apex Point is deﬁned in Equation (35), where oT is
the offset of the second segment of κT,lr, as introduced in
Equation (30).
tAX = −ˆab (δ0 + LoT) + ˆ˙δv0
2ˆabˆ˙δ
(35)
With these descriptions of approximated yaw rates ˙ψT, a
resulting description for the yaw angle ψT can be formulated,
now as a second order polynomial as shown in Equation (36).
ψT(t|t1, t2) = ∆ ˙ψ
2∆tt2 +
˙ψ(t1)t2 − ˙ψ(t1)t1
∆t
t + ψ(t1)
(36)
where
∆t = t2 − t1
∆ ˙ψ = ˙ψ(t2) − ˙ψ(t1)

63
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
The compound position Equation (37) is then
pT(t|t1, t2) =
(37)
=

xT(t)
yT(t)

=
Z
v(t)

cos(ψT(t))
sin(ψT(t))

dt
=

+σ0 sin(ξ0)+σ1(sin(ξ1)S+cos(ξ1)C)
−σ0 cos(ξ0)+σ1(cos(ξ1)S−sin(ξ1)C)

σ2+Cp,T
where
σ1 =
√
π∆t

∆ ˙ψv0 + alon

˙ψ2t1 − ˙ψ1t2

σ0 =
q
∆ ˙ψalon∆t
σ2 = ∆ ˙ψ
− 3
2
ξ0 =
1
2∆ ˙ψt2 +

˙ψ1t2 − ˙ψ2t1

t + ψ1t2 − ˙ψ1t1
∆t
ξ1 =
˙ψ2
1t2
2 + ˙ψ2
2t2
1 − 2t2

∆ ˙ψψ1 + ˙ψ1 ˙ψ2t1

+ 2∆ ˙ψψ1t1
2∆ ˙ψ∆t
C = C (σ3)
S = S (σ3)
σ3 = ∆ ˙ψt + ˙ψ1t2 − ˙ψ2t1
q
π∆ ˙ψ∆t
The constant Cp,T must be calculated speciﬁc to the type of
trajectory, see Section IV-B for more. Once turning reaches
the boundary of the Friction Circle, another set of equations
limits the yaw rate and hence deﬁnes the yaw angle and the
position.
Curvature Deﬁned by Friction Circle: The equations are
very similar to the Basic Model, as the Physics are the
same. The curvature deﬁned by the Friction Circle is more
complex than the linear relation of κT(t), as can be seen in
Equation (38).
κT = sˆa
√
1 − b2
v(t)2
(38)
Note that in addition to the Basic Model, the extended
version includes the Steering Direction s. The yaw angle is
less complex, as one of the v(t) terms gets removed, see
Equation (39).
˙ψF(t) = sˆa
√
1 − b2
v(t)
(39)
Respectively, the yaw angle ψF(t) in the Extended Model
is shown in Equation (40).
ψF(t) = sz(ln (v(t)) − ln (v0)) + C ˙ψ,F
(40)
The position calculation is shown in Equation (41):
pF(t|t1) =

xF(t)
yF(t)

=
Z
v(t)

cos(ψF(t))
sin(ψF(t))

dt
(41)
= σ0

sz

+ sin(ψ1)
− cos(ψ1)

+ 2

+ cos(ψ1)
− sin(ψ1)

+ Cp,F
where
σ0 = v(t)2 
64
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
0.0
1.0
2.0
3.0
tstop
t[s]
−0.5
0.0
0.5
1.0
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
Figure 12. The 3 different yaw rate characteristics ˙ψT, ˙ψF, ˙ψR. The Extended
Model assumes the minimum of all yaw rates at each point in time.
All yaw rate descriptions have in common that they de-
scribe the maximal yaw rate possible. That means that at all
times t, the yaw rate is limited by all three descriptions.
As shown in the Basic Model, the yaw angle ψ(t) is
the integral over the yaw rate
˙ψ(t) over time. In order to
integrate
˙ψ(t), a step wise deﬁnition is helpful, similar to
Equation (5) of the Basic Model. We thus deﬁne ˙ψ(t) as shown
in Equation (48).
˙ψ(t) =



˙ψT(t),
0 ≤ t ≤ tTF
˙ψF(t),
tTF < t ≤ tFR
˙ψR(t),
tFR < t < tstop
, ∀t ≥ 0
(48)
where
˙ψT(t) = v(t)(sˆ˙δt + δ0)L−1
(49)
˙ψF(t) = sˆa
p
1 − b2 v−1(t)
(50)
˙ψR(t) = sv(t)r−1
turn
(51)
where s is the direction of steering and only deﬁnes a positive
or negative sign, positive meaning turning left and negative
turning right.
From Figure 12 and Equation (48) follows that the model
behavior is deﬁned by the positions of intersections of the dif-
ferent yaw rate descriptions, and all limit the vehicle movement
in their own way. Therefore, the deﬁnition of these times is
very important. Simply put, these times are the times at which
the different curvatures intersect.
The intersections of κT and κF ∈ R can be found by
applying Cardano’s formula [22] to the Cubic Equation (52):
At3 + Bt2 + Ct + D = 0
(52)
where
A = salon
2ˆ˙δ
(53)
B = alon
2δ0 + 2salonv0ˆ˙δ
(54)
C = 2alonv0δ0 + sˆ˙δv0
2
(55)
D = δ0v0
2 − sLˆa
p
1 − b2
(56)
The determinant is deﬁned as Equation (57):
∆ :=
q
2
2
+
p
3
3
(57)
where
p = β − α2
3
(58)
q = 2α3
27 − αβ
3 + γ
(59)
u =
3
r
−q
2 +
√
∆
(60)
v =
3
r
−q
2 −
√
∆
(61)
with α = A/D, β = B/D and γ = C/D.
If ∆ > 0, there is only one intersection ∈ R at
tT,F,0 = u + v − B
3A
(62)
If ∆ = 0 and p = 0, there is a triple intersection ∈ R at
tT,F,0,1,2 = − B
3A
(63)
If ∆ = 0 but p ̸= 0, there are three solutions ∈ R at
tT,F,0 = 3q
p − B
3A
(64)
tT,F,1,2 = −3q
2p − B
3A
(65)
If ∆ < 0, there are also three solutions ∈ R, which may be
calculated by
tT,F,0 =
r
−4
3p cos (σT,F) − B
3A
(66)
tT,F,1 =
r
−4
3p cos

σT,F + π
3

− B
3A
(67)
tT,F,2 =
r
−4
3p cos

σT,F − π
3

− B
3A
(68)
where
σT,F = 1
3 arccos

−q
2
r
−27
p3

The other intersection times can be calculated generally as:
tF,R,0 = −v0 +
p
ˆarturn
√
1 − b2
alon
(69)
tF,R,1 = −v0 −
p
ˆarturn
√
1 − b2
alon
(70)
tT,R,0 = − v0
alon
= tstop
(71)
tT,R,1 = −sL + δ0rturn
ˆs ˙δrturn
(72)
Equations (62) to (72) describe all possible intersection
times between the different yaw rate limits. Because the
curvature deﬁned by the Friction Circle κF is strictly increasing
or decreasing in [0, tstop] (depending on s), the linear function
κF(t) intersects κT(t) possibly at two times in the interval
[0, tstop]. Also, note that ˙ψT intersects ˙ψR also in tstop, even
though the curvatures are not equal, because the equality
condition only holds for v(t) ̸= 0, which however is the case
at tstop. See Figure 12 for an example.

65
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
B. Different Trajectory Types of the Extended Model
As shown above, the positions of yaw rate intersection
deﬁne the course of a trajectory. An intersection time is called
relevant, when at this time, the calculation changes from one
of the yaw rate description of ˙ψT(t), ˙ψF(t), ˙ψR(t) to another
one.
In Figure 13, all intersection times are shown. The relevant
times for this example are written in bold.
t0
tstop
tTF
tFT
tFR
tTR
t[s]
0.0
0.1
0.2
κ[m−1]
κT
κF
κR
Figure 13.
An example of relevant curvature intersections. All relevant
intersections are marked in bold.
Depending on the input parameters, different types of
trajectories evolve. In this paper, we distinguish between 9 dif-
ferent types. In Figure 14, we show all possible sub-elements
of a trajectory and interpret the calculation of a trajectory as
one of 9 different possible combinations of subsequent state
changes.
Driving
at v0, κ0
Turning
rate ˆ˙δ
limits κ(t)
Friction
circle
limits κ(t)
rmin limits
κ(t)
Vehicle
standing
t0,T
t0,R
t0,F
tFT
tTF
tTR
tFR
tstop,T
tstop,R
Figure 14.
State diagram of all possible sub-elements of a trajectory. State
changes occurs at intersections of curvatures and at t0 and tstop
Figure 14 shows which intersection times are relevant in
each state. It also serves as a reference to ﬁnd all possible
combinations of states, and therefore all trajectory types that
follow from the Extended Model.
Trajectory Type A: The state changes for Type A Trajec-
tories are deﬁned by the sequence t0,T → tTF → tFR → tstop,R
in Figure 14.
Figure 15 shows the yaw rates of a Type A Trajectory.
The effective yaw rate is always deﬁned by the minimum of
all yaw rates when turning left (s = +). This is marked by a
thick line.
t0
tstop
tFR
tTF
t[s]
0.0
0.2
0.4
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 15.
The yaw rates of a Type A trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type A trajectories is
deﬁned as Equation (73):
ψ(t) =





ψT(t) = f
ψT(t) + Cψ,T ,
0 ≤ t ≤ tTF
ψF(t) = f
ψF(t) + Cψ,F ,
tTF < t ≤ tFR
ψR(t) = f
ψR(t) + Cψ,R,
tFR < t < tstop
(73)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (74) to (76):
Cψ,T = ψ0
(74)
Cψ,F = ψT(tTF) − f
ψF(tTF)
(75)
Cψ,R = ψF(tFR) − f
ψR(tFR)
(76)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (77):
p(t) =



pT(t) = epT(t) + Cp,T,
0 ≤ t ≤ tTF
pF(t) = epF(t) + Cp,F,
tTF < t ≤ tFR
pR(t) = f
pR(t) + Cp,R,
tFR < t < tstop
(77)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (78) to (80):
Cp,T = p0 − epT(0)
(78)
Cp,F = pT(tTF) − epF(tTF)
(79)
Cp,R = pR(tFR) − f
pR(tFR)
(80)
See Figure 16a for a set of different Type A Trajectories.
The model parameters and inputs are equal in all examples of
Type A, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type A Trajectories.
Note that these trajectories are parametrized in a way that
demonstrates the differences well.
Trajectory Type B: These trajectories are the most complex
ones that can be described by the Extended Model, as it
has the most different segment types. Examples are shown
in Figure 16b. The resulting yaw rate segments are deﬁned by
the state change sequence t0,T → tTF → tFT → tTR → tstop,R
in Figure 14. Figure 17 shows the yaw rates of a Type B
Trajectory, where the effective yaw rate is marked by a thick
line.

66
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
0
20
40
x[m]
0
10
20
30
40
y[m]
A
tTF
tFR
tS
(a) Eight Type A Trajectories.
0
20
40
x[m]
0
20
40
y[m]
B
tTF
tFT
tTR
tS
(b) Eight Type B Trajectories.
Figure 16.
Type A and Type B trajectories. Both types are shown in rather
theoretic situations for demonstration purposes.
t0
tstop
tTF
tFT
tTR
tAX
t[s]
0.0
0.5
1.0
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 17.
The yaw rates of a Type B trajectory. The ﬁve effective yaw rate
segments are drawn bold, including the Apex Point of ˙ψT.
The yaw angle function for all Type B trajectories is
deﬁned as Equation (81):
ψ(t) =











ψT,0(t) = f
ψT(t) + Cψ,T,0,
0 ≤ t ≤ tTF
ψF(t) = f
ψF(t) + Cψ,F ,
tTF < t ≤ tFT
ψT,1(t) = f
ψT(t) + Cψ,T,1,
tFT < t ≤ tTR
ψR(t) = f
ψR(t) + Cψ,R,
tTR < t < tstop
(81)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (82) to (85):
Cψ,T,0 = ψ0
(82)
Cψ,F = ψT(tTF) − f
ψF(tTF)
(83)
Cψ,T,1 = ψF(tFT) − f
ψT(tFT)
(84)
Cψ,R = ψT(tTR) − f
ψR(tTR)
(85)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (77):
p(t) =







pT,0(t) = epT(t) + Cp,T,0,
0 ≤ t ≤ tTF
pF(t) = epF(t) + Cp,F,
tTF < t ≤ tFT
pT,1(t) = epT(t) + Cp,T,1,
tFT < t ≤ tTR
pR(t) = f
pR(t) + Cp,R,
tTR < t < tstop
(86)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (87) to (90):
Cp,T,0 = p0 − epT(0)
(87)
Cp,F = pT,0(tTF) − epF(tTF)
(88)
Cp,T,1 = pF(tFT) − g
pT,1(tFT)
(89)
Cp,R = pT,1(tTR) − f
pR(tTR)
(90)
See Figure 16b for a set of different Type B Trajectories.
The model parameters and inputs are equal in all examples of
Type B, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type B Trajectories.
Trajectory Type C: The state changes for Type C Trajec-
tories are deﬁned by the sequence t0,T → tTR → tstop,R in
Figure 14.
Figure 18 shows the yaw rates of a Type C Trajectory. The
effective yaw rate is marked by a thick line.
t0
tAX
tTR
tstop
t[s]
0.00
0.25
0.50
0.75
1.00
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 18.
The yaw rates of a Type C trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type C trajectories is
deﬁned as Equation (91):
ψ(t) =
(
ψT(t) = f
ψT(t) + Cψ,T ,
0 ≤ t ≤ tTR
ψR(t) = f
ψR(t) + Cψ,R,
tTR < t < tstop
(91)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (92) and (93):
Cψ,T = ψ0
(92)
Cψ,R = ψT(tTR) − f
ψR(tTR)
(93)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (94):
p(t) =
pT(t) = epT(t) + Cp,T,
0 ≤ t ≤ tTR
pR(t) = f
pR(t) + Cp,R,
tTR < t < tstop
(94)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (95) and (96):
Cp,T = p0 − epT(0)
(95)
Cp,R = pR(tTR) − f
pR(tTR)
(96)
See Figure 19a for a set of different Type C Trajectories.
The model parameters and inputs are equal in all examples of
Type C, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type C Trajectories. It
can be seen that all trajectories are on top of each other, which

67
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
makes sense, because the braking factor only has inﬂuence on
the actual direction when the Friction Circle is involved in the
calculation. In Type C trajectories, this is not the case.
0
10
x[m]
0
5
10
15
20
y[m]
C
tAX
tTR
tS
(a) Eight Type C Trajectories.
0
20
40
x[m]
0
20
40
y[m]
D
tFT
tTR
tS
(b) Eight Type D Trajectories.
Figure 19.
Different trajectories of both Type C and Type D.
Trajectory Type D: The state changes for Type D Trajec-
tories are deﬁned by the sequence t0,F → tFT → tTR → tstop,R
in Figure 14. Hence, Type D Trajectories are like Type B but
are limited by the Friction Circle from the beginning on.
Figure 20 shows the yaw rates of a Type D Trajectory. The
effective yaw rate is always deﬁned by the minimum of all yaw
rates when turning left (s = +). This is marked by a thick line
in Figure 20.
t0
tFT
tAX
tTR
tstop
t[s]
0.0
0.2
0.4
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 20.
The yaw rates of a Type D trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type D trajectories is
deﬁned as Equation (97):
ψ(t) =





ψF(t) = f
ψF(t) + Cψ,F ,
0 < t ≤ tFT
ψT(t) = f
ψT(t) + Cψ,T ,
tFT < t ≤ tTR
ψR(t) = f
ψR(t) + Cψ,R,
tTR < t < tstop
(97)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (98) to (100):
Cψ,F = ψ0
(98)
Cψ,T = ψF(tTF) − f
ψF(tTF)
(99)
Cψ,R = ψT(tTR) − f
ψR(tTR)
(100)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (101):
p(t) =



pF(t) = epF(t) + Cp,F,
0 ≤ t ≤ tFT
pT(t) = epT(t) + Cp,T,
tFT < t ≤ tTR
pR(t) = f
pR(t) + Cp,R,
tTR < t < tstop
(101)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (102) to (104):
Cp,F = p0 − epF(0)
(102)
Cp,T = pT(tFT) − epT(tFT)
(103)
Cp,R = pR(tTR) − f
pR(tTR)
(104)
See Figure 19b for a set of different Type D Trajectories.
The model parameters and inputs are equal in all examples of
Type D, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type D Trajectories.
Trajectory Type E: The state changes for Type E Trajec-
tories are deﬁned by the sequence t0,F → tFR → tstop,R in
Figure 14.
Figure 21 shows the yaw rates of a Type E Trajectory. The
effective yaw rate is marked by a thick line.
t0
tFR
tstop
t[s]
0.0
0.2
0.4
0.6
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
Figure 21.
The yaw rates of a Type E trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type E trajectories is deﬁned
as Equation (105):
ψ(t) =
(
ψF(t) = f
ψF(t) + Cψ,F ,
0 ≤ t ≤ tFR
ψR(t) = f
ψR(t) + Cψ,R,
tFR < t < tstop
(105)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (106) and (107):
Cψ,F = ψ0
(106)
Cψ,R = ψF(tFR) − f
ψR(tFR)
(107)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (108):
p(t) =
pF(t) = epF(t) + Cp,F,
0 ≤ t ≤ tFR
pR(t) = f
pR(t) + Cp,R,
tFR < t < tstop
(108)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (109) and (110):
Cp,F = p0 − epF(0)
(109)
Cp,R = pR(tFR) − f
pR(tFR)
(110)

68
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
See Figure 22a for a set of different Type E Trajectories.
The model parameters and inputs are equal in all examples of
Type E, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type E Trajectories.
20
40
60
x[m]
10
20
30
40
50
y[m]
E
tFR
tS
(a) Eight Type E Trajectories.
0
10
x[m]
0
5
10
y[m]
F
tS
(b) Eight Type F Trajectories.
Figure 22.
Different trajectories of both Type E and Type F.
Trajectory Type F: The state changes for Type F Trajec-
tories are deﬁned by the simple sequence t0,R → tstop,R in
Figure 14. Figure 23 shows the yaw rate of a Type F Trajectory.
The effective yaw rate is marked by a thick line to underline
the simplicity of Type F trajectories.
t0
tstop
t[s]
0.0
0.2
0.4
0.6
0.8
˙ψ[ rad
s ]
˙ψT
˙ψR
˙ψ
Figure 23.
The yaw rates of a Type F trajectory. The effective yaw rate is
drawn bold. Note that in this Type ˙ψ and
˙ψR are identical.
The yaw angle function for all Type F trajectories is deﬁned
as Equation (111):
ψ(t) = ψR(t) = f
ψR(t) + Cψ,R,
t0 ≤ t < tstop
(111)
where the constant of integration must be chosen speciﬁc to
this trajectory type as shown in Equation (112):
Cψ,R = ψ0 − f
ψR(t0)
(112)
The constant for Ψ(t) is chosen in a way that the trajectory
starts correctly with ψ0.
The positions are calculated respectively in the same time
intervals as in Equation (113):
p(t) = pR(t) = f
pR(t) + Cp,R,
t0 ≤ t < tstop
(113)
where the constant of integration must be chosen in a way that
the trajectory starts correctly at p0, as noted in Equation (114):
Cp,R = p0 − f
pR(t0)
(114)
See Figure 22b for a set of different Type F Trajectories.
The model parameters and inputs are equal in all examples of
Type F, except for the Braking Factor b, which is chosen to be
in an admissible range to result in Type F Trajectories. It can
be seen that all trajectories are on top of each other, which
makes sense, because the braking factor only has inﬂuence on
the actual direction when the Friction Circle is involved in the
calculation. In Type F trajectories this is not the case.
Trajectory Type G: Type G Trajectories are similar to Type
B Trajectories, but in contrast they end before reaching rturn.
The segments are deﬁned by the state change sequence t0,T →
tTF → tFT → tstop,T in Figure 14. Figure 24 shows the yaw
rates of a Type G Trajectory. The effective yaw rate is marked
by a thick line in Figure 24.
t0
tstop
tTF
tFT tAX
t[s]
0.0
0.2
0.4
0.6
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 24.
The yaw rates of a Type G trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type G trajectories is
deﬁned as Equation (115):
ψ(t) =





ψT,0(t) = f
ψT(t) + Cψ,T,0,
0 ≤ t ≤ tTF
ψF(t) = f
ψF(t) + Cψ,F ,
tTF < t ≤ tFT
ψT,1(t) = f
ψT(t) + Cψ,T,1,
tFT < t ≤ tstop
(115)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (116) to (118):
Cψ,T,0 = ψ0
(116)
Cψ,F = ψT(tTF) − f
ψF(tTF)
(117)
Cψ,T,1 = ψF(tFT) − f
ψT(tFT)
(118)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (119):
p(t) =



pT,0(t) = epT(t) + Cp,T,0,
0 ≤ t ≤ tTF
pF(t) = epF(t) + Cp,F,
tTF < t ≤ tFT
pT,1(t) = epT(t) + Cp,T,1,
tFT < t ≤ tstop
(119)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (120) to (122):
Cp,T,0 = p0 − epT(0)
(120)
Cp,F = pT,0(tTF) − epF(tTF)
(121)
Cp,T,1 = pF(tFT) − g
pT,1(tFT)
(122)
See Figure 25a for a set of different Type G Trajectories.
The model parameters and inputs are equal in all examples of
Type G, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type G Trajectories.

69
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
0
50
x[m]
0
20
40
60
80
y[m]
G
tTF
tFT
tAX
tS
(a) Eight Type G Trajectories.
0
25
50
x[m]
0
20
40
60
y[m]
H
tFT
tAX
tS
(b) Eight Type H Trajectories.
Figure 25.
Different trajectories of both Type G and Type H.
Trajectory Type H: The state changes for Type H Trajec-
tories are deﬁned by the sequence t0,F → tFT → tstop,R in
Figure 14.
Figure 26 shows the yaw rates of a Type H Trajectory. The
effective yaw rate is marked by a thick line.
t0
tstop
tFT tAX
t[s]
0.0
0.2
0.4
0.6
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 26.
The yaw rates of a Type H trajectory. The effective yaw rate is
drawn bold. Notice the similarity to Type G Trajectories as shown in Figure 24
The yaw angle function for all Type H trajectories is
deﬁned as Equation (123):
ψ(t) =
(
ψF(t) = f
ψF(t) + Cψ,F ,
0 ≤ t ≤ tFT
ψT(t) = f
ψT(t) + Cψ,T ,
tFT < t < tstop
(123)
where the constants of integration must be chosen speciﬁc to
this trajectory type as shown in Equations (124) and (125):
Cψ,F = ψ0
(124)
Cψ,T = ψF(tFT) − f
ψR(tFT)
(125)
The constants for Ψ(t) are chosen in a way that all trajectory
segments continue seamlessly.
The positions are calculated respectively in the same time
intervals as in Equation (126):
p(t) =
pF(t) = epF(t) + Cp,F,
0 ≤ t ≤ tFT
pT(t) = epT(t) + Cp,T,
tFT < t < tstop
(126)
where the constants of integration must be chosen in a way
that all trajectory segments ﬁt together seamlessly, as noted in
Equations (127) and (128):
Cp,F = p0 − epF(0)
(127)
Cp,T = pT(tFT) − f
pR(tFT)
(128)
See Figure 25b for a set of different Type H Trajectories.
The model parameters and inputs are equal in all examples of
Type H, except for the Braking Factor b, which is chosen to
be in an admissible range to result in Type H Trajectories.
Trajectory Type I: The state changes for Type I Trajectories
are deﬁned by the simple sequence t0,T → tstop,R in Figure 14.
Figure 27 shows the yaw rate of a Type I Trajectory. The
effective yaw rate is marked by a thick line to underline the
simplicity of Type I trajectories.
t0
tstop
tAX
t[s]
−0.1
0.0
0.1
0.2
˙ψ[ rad
s ]
˙ψT
˙ψF
˙ψR
˙ψ
Figure 27.
The yaw rates of a Type I trajectory. The effective yaw rate is
marked by a thick line style.
The yaw angle function for all Type I trajectories is deﬁned
as Equation (129):
ψ(t) = ψT(t) = f
ψT(t) + Cψ,T ,
t0 ≤ t < tstop
(129)
where the constant of integration must be chosen speciﬁc to
this trajectory type as shown in Equation (130):
Cψ,T = ψ0 − f
ψT(t0)
(130)
The constant for Ψ(t) is chosen in a way that the trajectory
starts correctly with ψ0.
The positions are calculated respectively in the same time
intervals as in Equation (131):
p(t) = pT(t) = epT(t) + Cp,T,
t0 ≤ t < tstop
(131)
where the constant of integration must be chosen in a way that
the trajectory starts correctly at p0, as noted in Equation (132):
Cp,T = p0 − epT(t0)
(132)
See Figure 28 for a set of different Type I Trajectories.
The model parameters and inputs are equal in all examples of
Type I, except for the Braking Factor b, which is chosen to be
in an admissible range to result in Type I Trajectories. It can
be seen that all trajectories are on top of each other, which
makes sense, because the braking factor only has inﬂuence on
the actual direction when the Friction Circle is involved in the
calculation. In Type I trajectories this is not the case.
V.
CONCLUSION
In this paper, we present two models for hard brak-
ing and collision avoiding vehicle trajectories. In the Ba-
sic Model, we take into account the maximally applicable
acceleration/deceleration between tires and road surface, the
minimal turning radius, the vehicle velocity, as well as starting
position and heading. We explain our approach in detail and
compare our model equations with an iterative CTRA-Model

70
International Journal on Advances in Systems and Measurements, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/systems_and_measurements/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
0
5
x[m]
0
2
4
6
y[m]
I
tAX
tS
Figure 28.
Eight trajectories of Type I. Note that since the Friction Circle
has no inﬂuence in these trajectories, they are all located along the same path.
simulation, which ﬁnds very similar solutions. However, in
tests we could show that our Basic Model computes stopping
positions and trajectories up to 20 times faster than CTRA.
The Extended Model furthermore take into account the initial
yaw rate of a vehicle, as well as its ability to change the
steering angle. In order to translate the steering angle into
a yaw rate, we introduce the length of a vehicle and its
turning direction. The increased complexity leads to 9 different
trajectory types, which we explore in depth. By solving the
compound differential equations of both models for position
in x, y-plane, we describe the complete vehicle motion till full
stop, while also turning and still respecting the Friction Circle.
With the derived equations, we can directly compute possible
positions that a vehicle will reach in a braking and collision
avoiding scenario. This might be used to generate braking and
collision avoiding trajectories, by sampling feasible motion
primitives, which can be computed in very short time.
We contribute a Basic Model, which can aid in solving
reachability problems for hard braking vehicles in an accurate
and yet overapproximative way. Furthermore we contribute
a second, Extended Model, which takes into account initial
vehicle dynamics and respects further physical constraints. The
second model is therefore much better suited for calculating
motion primitives of actual emergency trajectories.
As next steps, the proposed models for vehicle motion
can be compared to the trajectories of real vehicles under the
same assumptions given. Another next step might be the usage
of our model for fast generation of braking trajectories by
sampling motion primitives and a comparison to other state
of the art methods. We suggest to search a tree structure
of connected motion primitives sampled from the Extended
Model for feasible and yet complex evasive trajectories. As
we can directly compute motion primitives for the highly
non linear motions in braking and collision avoidance, the
proposed model can signiﬁcantly reduce valuable calculation
time. Another application is the application of both models
in a formal reachability analysis for risk assessment in hard
braking trafﬁc scenarios and compare the solution to other
contributions in the ﬁeld of reachability analysis.
REFERENCES
[1]
F. Terhar and C. Icking, “A New Model for Hard Braking Vehicles
and Collision Avoiding Trajectories,” in Proceedings of the 8th Inter-
national Conference on Advances in Vehicular Systems, Technologies
and Applications, June 2019, pp. 28–33.
[2]
M. Werling, J. Ziegler, S. Kammel, and S. Thrun, “Optimal trajectory
generation for dynamic street scenarios in a frenet frame,” in Proceed-
ings - IEEE International Conference on Robotics and Automation, 06
2010, pp. 987 – 993.
[3]
J. Ziegler, M. Werling, and J. Schr¨oder, “Navigating car-like robots in
unstructured environments using an obstacle sensitive cost function,” in
IEEE Intelligent Vehicles Symposium, Proceedings, 07 2008, pp. 787 –
791.
[4]
C. Pek and M. Althoff, “Computationally efﬁcient fail-safe trajec-
tory planning for self-driving vehicles using convex optimization,”
in Proceedings of the IEEE International Conference on Intelligent
Transportation Systems, 2018, pp. 1447–1454.
[5]
S. Magdici and M. Althoff, “Fail-safe motion planning of autonomous
vehicles,” in 2016 IEEE 19th International Conference on Intelligent
Transportation Systems (ITSC), Nov 2016, pp. 452–458.
[6]
C. Pek, M. Koschi, and M. Althoff, “An online veriﬁcation framework
for motion planning of self-driving vehicles with safety guarantees,” in
AAET - Automatisiertes und vernetztes Fahren, 01 2019, pp. 260–274.
[7]
S. Heinrich, “Planning Universal On-Road Driving Strategies for Auto-
mated Vehicles.”
”Springer Fachmedien Wiesbaden”, 2018, ch. 4, pp.
33–47.
[8]
I. M. Mitchell, “Comparing forward and backward reachability as tools
for safety analysis,” in Hybrid Systems: Computation and Control,
A. Bemporad, A. Bicchi, and G. Buttazzo, Eds., 2007, pp. 428–443.
[9]
E. Asarin, T. Dang, and A. Girard, “Reachability analysis of nonlinear
systems using conservative approximation,” in Hybrid Systems: Com-
putation and Control, O. Maler and A. Pnueli, Eds., 2003, pp. 20–35.
[10]
A. Girard, “Reachability of uncertain linear systems using zonotopes,”
in Hybrid Systems: Computation and Control, M. Morari and L. Thiele,
Eds., 2005, pp. 291–305.
[11]
M. Koschi and M. Althoff, “SPOT: A tool for set-based prediction of
trafﬁc participants,” in 2017 IEEE Intelligent Vehicles Symposium (IV),
June 2017, pp. 1686–1693.
[12]
M. Althoff, “Reachability analysis and its application to the safety
assessment of autonomous cars,” Dissertation, Technische Universit¨at
M¨unchen, M¨unchen, 2010.
[13]
B. Kim et al., “Probabilistic vehicle trajectory prediction over
occupancy grid map via recurrent neural network,” CoRR, vol.
abs/1704.07049, 2017.
[14]
F. Giovannini, G. Savino, and M. Pierini, “Inﬂuence of the minimum
swerving distance on the development of powered two wheeler active
braking,” in 22nd ESV Conference, June 2011, paper 11-0258.
[15]
C. Ackermann, J. Bechtloff, and R. Isermann, “Collision avoidance with
combined braking and steering,” in 6th International Munich Chassis
Symposium 2015, P. Pfeffer, Ed., 2015, pp. 199–213.
[16]
C. Choi and Y. Kang, “Simultaneous braking and steering control
method based on nonlinear model predictive control for emergency
driving support,” International Journal of Control, Automation and
Systems, vol. 15, no. 1, pp. 345–353, Feb 2017.
[17]
J. Stewart, “Calculus: Early transcendentals,” L. Covello, Ed. Thomson
Brooks/Cole, 2010, ch. 5.
[18]
H. B. Pacejka, “Chapter 1 - Tire characteristics and vehicle handling and
stability,” in Tire and Vehicle Dynamics (Third edition), H. B. Pacejka,
Ed., 2012.
[19]
R. Schubert, E. Richter, and G. Wanielik, “Comparison and evaluation
of advanced motion models for vehicle tracking,” in 11th International
Conference on Information Fusion, June 2008, pp. 1–6.
[20]
S. S¨ontges and M. Althoff, “Computing the drivable area of autonomous
road vehicles in dynamic road scenes,” IEEE Transactions on Intelligent
Transportation Systems, vol. 19, no. 6, pp. 1855–1866, June 2018.
[21]
“NIST Digital Library of Mathematical Functions,” http://dlmf.nist.gov/,
Release 1.0.25 of 2019-12-15, f. W. J. Olver, A. B. Olde Daalhuis, D. W.
Lozier, B. I. Schneider, R. F. Boisvert, C. W. Clark, B. R. Miller, B. V.
Saunders, H. S. Cohl, and M. A. McClain, eds.
[22]
I. Stewart, “Taming the Inﬁnite: The Story of Mathematics from the
First Numbers to Chaos Theory.”
Quercus, 2008, ch. 4.

