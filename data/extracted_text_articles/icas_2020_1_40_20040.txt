On Metabolic Complex Networks
for Entropic Robust Autonomy
Chris Nowak
Defence Science & Technology Group
Sydney, Australia
e-mail: chris.nowak.5@gmail.com
Darryn Reid
Defence Science & Technology Group
Adelaide, Australia
e-mail: darryn.reid@dst.defence.gov.au
Abstract—Autonomous systems are expected to be robust: they
should be resilient to perturbations arising both from the ex-
ternal environment and from within the system itself. In other
words, they should maintain a state of dynamic equilibrium, or
homeostasis, within known limitations. By framing autonomous
systems as metabolic systems, which can be understood as
systems with ﬂows and transformations that are capable of
functioning well in a complex environment, it is demonstrated
how a homeostatic control mechanism could be designed to
enable such systems to self-adapt to the changing environment. To
illustrate these ideas, they are applied to the problem of designing
robust autonomous supply networks; their homeostatic control
mechanisms and catalysts are identiﬁed.
Keywords–Robust
Autonomy;
Resilience
to
Perturbations;
Metabolism; Homeostasis & Allostasis; Transformations; Capabil-
ity, Function & Behaviour; Self-adaptation; Curvature; Entropy.
I.
INTRODUCTION
This paper is concerned with achieving robustness of
autonomous systems, meaning the ability to absorb perturba-
tions arising both exogenously—from the environment—and
endogenously—from the system itself—within known limits.
Using supply networks as an example for analysis, we frame
the problem of robustness as “metabolic” complex networks
to obtain a set of homeostatic control mechanisms. Illustrating
the generality of this approach, this set of homeostatic controls
should be capable of scaling irrespective of the complexity of
any supply network instance.
Complex networks [1][2] are understood as networks that
exhibit complex behaviours; complex networks are neither
regular, nor random—and these networks behave in interesting
(not regular, not random) ways. The real world, both natural
and man-made, creates complex networks—and they either
behave and function well, or get replaced by new versions
which work better. The Internet is a complex network where
new computers connect themselves (neither regularly, nor ran-
domly) to the already existing network. It is debatable whether
the Internet is a scale-free network [3], but the Internet does
build itself up using the preferential attachment [2] mechanism
(used to explain scale-free networks): new nodes prefer to
attach themselves to hubs, i.e., nodes which are already well
connected. Naturally, networks with hubs form. And they
have one important advantage of being resilient to random
attacks, and one important disadvantage of being vulnerable
to targeted attacks. The following question presents itself: how
can networks function well?
The question of functioning well implies a range of more
speciﬁc questions. How is the network supposed to function?
Can we measure how well it is functioning now? Can we
predict how well it will be functioning in the future? Does
the network need to be adaptive, situation-aware (of the
environment and self), autonomous? Should the network be
self-modifying, and given the library of plans that the network
has, should it be able to modify the plans, or create new ones?
But also: is it that the ability to manage and execute plans
is the most important capability of the network? This paper
suggests that it is not.
This paper suggests that plans are secondary—and per-
turbations are primary concerns. The functioning of a bi-
ological organism is primarily about handling perturbations,
such as changes of temperature, sugar or pH level—it is the
perturbations which dictate which plans are to be selected
and executed. It is claimed here that complex systems with
non-trivial behaviours should be metabolic: they should detect
perturbations and employ homeostatic control mechanisms in
order to maintain a dynamic equilibrium state (in which they
can function well). The recommended “metabolic perspective”
facilitates a conceptual shift from “plans ﬁrst” to “perturbations
ﬁrst” and indicates that a complex system should: detect and
measure perturbations, evaluate their effects on the way the
system itself functions and whether it has been pushed out
of the equilibrium state, and select and employ appropriate
homeostatic (or allostatic) control mechanisms to return to
the previous stable state (or move to a new stable state,
respectively). This approach suggests that, given a complex
system, to understand the system we should focus not on plans
(or mechanisms of functioning), but on how the system handles
perturbations and maintains homeostasis—because not only
biological organisms do that, but so do infrastructure systems,
cities, ecosystems, and a variety of other complex systems.
Given this stance, the long term goal is to analyse complex
networks (which are discrete models of real-world systems)
from the metabolic perspective by mapping perturbations to
homeostatic and allostatic control mechanisms that can exe-
cute plans ensuring that the dynamic equilibrium states are
maintained (as in these states the networks function well).
Such a research program would be applicable to many complex
systems domains—it just adds the metabolic perspective to the
complex networks research program. Given that our models
would be complex networks, both problems and solutions
could be formulated in abstract ways, namely in terms of
network topology, node and link attributes, and ﬂows (all of
23
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

them dynamic). One would expect that multiple real-world
problems would share the same abstract problem and its
solution. It is also important to be able to measure how well
the given network functions; recent complex network research
indicates that curvature based measures [4]–[5] seem to pro-
vide appropriate and powerful tools. The framework requires
a conceptual—or ontological—shift; the ontology sketched in
Section VII (and Appendix B) provides a step in this direction.
The contribution of this paper is mostly conceptual: it proposes
an ontology emphasising perturbations and homeostasis, it
provides a discussion on measuring the health of networks,
and it employs a supply network example to demonstrate the
applicability of metabolic notions to non-biological systems. It
should be noted that socio-technical systems have been seen as
“metabolic systems” before, for instance in the case of urban
systems [6][7]—however, metabolism there is being associated
with the management of resource ﬂows, and not explicitly with
perturbations and homeostatic control.
A discussion on robust autonomy is presented in Section II,
with robustness understood as resilience to perturbations.
Section III considers communities, health and functions, in-
dicating that, in a simple case, a community can be healthy
and functioning well when it is well-connected. In such a
case, it is also clear what the meaning and nature of network
curvature is: well connected networks (such as cliques) have
positive curvature, while other networks (such as trees) have
negative curvatures, and, hence, making the network better
connected would increase its curvature [8][5]. Metabolic Com-
plex Networks (MCN) are described in Section IV, starting
with metabolic cycles, and extending to metabolic pathways
(networks of connecting transformations) which explain what
functions the system can perform. Subsection IV-A focuses
on two component systems, analysing them from two per-
spectives: ﬁrstly, by associating the health of the network
(understood as its ability to function well) with the number
of arrows connecting the network’s nodes, and secondly, by
considering the presence of sinks and sources as attributes of
the network (and using the Formal Concept Analysis (FCA)
framework [9] to construct a lattice ordering on networks).
Then, a supply network scenario is analysed in Section V,
and evacuation scenarios are (brieﬂy) discussed in Section VI.
The importance of Section VI comes from the fact that an
evacuation network should be seen as composed of multiple
interdependent supply networks (and, in general, networks
can consist of many interdependent networks). Ontologies for
robotics are considered in Section VII; this section explicitly
states that Dennett’s intentional stance [10] should be ex-
tended by adding the metabolic level above Dennet’s physical,
design and intentional levels. Further work is described in
Section VIII and Section IX concludes this work.
II.
ROBUST AUTONOMY
The problem of robustness for autonomous systems as
addressed herein consists of the following features:
•
an autonomous system ω has an (overall) capability
cω to perform its (overall) function fω; we will say
that the system is functioning when it is performing
its function fω;
•
for the system to be functioning, it must maintain its
dynamic equilibrium, i.e., homeostasis or allostasis,
because outside of the equilibrium state the system’s
functioning is either difﬁcult or impossible.
Thus, we distinguish two fundamental behavioural regimes,
homeostasis and allostasis; the ability to manifest both with
respect to various kinds of perturbations yields the desired
robustness, while the limitations of allostasis provide explicit
bounds on robustness:
•
homeostasis, when understood in a less restrictive way,
allows moving to an alternative dynamic equilibrium
state rather than returning to the original equilibrium
state; this is referred to as allostasis;
•
homeostatic and allostatic control mechanisms allow
the system—in the presence of perturbations—to con-
tinue performing its original function, or switch to
performing an alternative function, respectively;
•
homeostatic/allostatic control mechanisms are trig-
gered by perturbations; however, it is beneﬁcial for
the system to detect the perturbations as early as possi-
ble, and even to predict the potential for perturbations
of various kinds; perturbations need to be handled,
i.e., processed after being detected or predicted.
Regarding systems’ capabilities, we distinguish the following:
1)
capability to perform normal functions;
2)
capability to maintain homeostasis and allostasis;
3)
capability to handle perturbations;
4)
capability to handle plans.
The above constitutes a description of robust autonomy as
“functioning + handling perturbations.” Note that plan moni-
toring (related to performing function fω, with possible slight
homeostatic variations) and plan modifying (switching from
f
′
ω = fω to an allostatic f
′′
ω ̸= fω) can be continuously per-
formed while executing functions related to capabilities (1–3);
therefore, (4) can be seen as a meta-level homeostatic/allostatic
control mechanism. [Plan monitoring is not the focus here.]
It is also of importance to assess how well systems
function. One way of achieving this is through curvature-
based methods [11], cf. Section III. Robustness, curvature
and entropy have been linked [4], and so entropic curvature-
based measures could be applied to assess systems’ robustness.
Hence, when entropy (and related notions) are applied to
autonomous systems, we could talk about Entropic Robust
Autonomy (ERA).
We suggest introducing entropy and related concepts along
the following lines. The assessment of the robustness of a
system in terms of its ability within known limits to absorb
various kinds of perturbations implies the need for an order
parameter or set of order parameters: an order parameter
provides a mechanism of abstraction from the myriad of
details and thereby yields distinction between different modes
in the environment and, correspondingly, different regimes
of autonomous system behaviour. Here, we are concerned
especially with distinguishing homeostatic and allostatic be-
havioural regimes in response to various kinds of perturbation.
Entropy and related notions provide order parameters that
promise to provide robust stable measures or estimates to
determine these change points. Moreover, such estimates do
not imply detailed predictions about system or environment
state evolution; as a means of abstraction, we may rely on
24
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

predictions about bounds on overall behaviour. Note that it is
argued in [12] that the heart of the problem with autonomy is
its need to deal with uncertainty.
III.
COMMUNITIES, HEALTH AND FUNCTIONS
If a network represents a society—or a social group—
then one might want to detect communities within the society,
where the communities are strongly connected subgroups.
Communities are often being detected in order to perform
sentiment analysis [8]; however, we can also associate com-
munities with functionalities. If a society (a social group) is
to perform some functions, it might need to delegate sub-
functions to specialised communities (sub-groups of the whole
social group). Given that communities are strongly connected
sub-groups, we can associate “strong connectedness” with
“health” and say that what is being detected are “healthy sub-
groups.” Then, forming healthy communities is a part of main-
taining a healthy society, where “health” can be understood as
“capability”—communities have capabilities to perform their
functions, in this way building up the total capability of the
society. Topological graph theory based methods allow us to
detect communities (assess sub-groups’ health), but entropic
curvature-based (geometric) methods are also used [5][8]
(ﬁgures presented in [8] show how the geometric (curvature)
transformation of the network can be performed). It should be
noted that a community might start to deteriorate by losing
connections, which could create sink-only and source-only
nodes—this leads to the analysis of Section IV-A.
Using an entropic measure essentially means mapping the
raw system model with all of its full complexities into a
different, smaller model, where what comes out are regimes
of behaviour rather than masses of possible behaviour. That
is, the simpliﬁcation is through functional abstraction, rather
than component abstraction by merely grouping components
together. In essence, this is what a method of using the entropic
curvatures would give us here: the abstraction amounts to
a mapping between the problem space into a smaller one
whereby the many details are collapsed down into the regimes
of behaviour with respect to the kinds of perturbations the
environment or the autonomous system itself can impose on
the autonomous system.
IV.
METABOLIC COMPLEX NETWORKS
Complex networks are networks that are neither regular, nor
random [1]–[3][14][15]. Metabolic networks are networks that
ENERGY
METABOLISM
CARBOHYDRATE
METABOLISM
AMINO ACID
METABOLISM
Figure 1. Metabolic pathways (FIGURE 15–1 in [13], page 570).
can handle metabolic ﬂows; Figure 1 shows some biological
metabolic pathways [13][16].
In a simple case, the system accepts an input pattern and
transforms it to an output pattern. For instance, Figure 2
shows a metabolic cycle: a system that accepts the recurring
(a, b, c, d) input patterns and transforms them—using the ap-
propriate recurring patterns (t1, t2, t3, t4) of transformations—
into the recurring output patterns (e, f, g, h). Metabolic cycles
are simple examples of metabolic pathways which are, in
general, sequences of connecting transformations (in the case
of biological systems, transformations can take the form of
chemical reactions). Figure 1 shows the metabolic pathways
of a eukaryotic cell (further information on pathways can be
found in [13] (FIGURE 15–1), [16] and on the websites [17]–
[18]).
c
b
d
a
a
d
b
c
t3
t2
t4
t1
t1
t4
t2
t3
g
f
h
e
e
h
f
g
Figure 2. Metabolic cycles.
Assuming that a metabolic system ω is a complex network,
the following sets need to be considered:
Θ
nodes (they accept inputs and produce outputs)
I
inputs (they are accepted by nodes)
O
outputs (they are produced by nodes)
∆
transformations (transf. a node’s inputs to outputs)
Φ
ﬂows (a ﬂow is an output connecting to an input)
Σ
streams (selections of metabolic inputs/outputs)
Υ
pathways (ﬂow sequences associated with functions)
Γ
catalysts (facilitate transformations; not consumed)
Ψ
homeostatic control mechanisms (ensure stability)
Λ
allostatic control (alternative equilibrium states)
Ξ
interdependent networks (sources of perturbations)
Π
perturbations (coming from env. or other systems)
Hence, if we analysed a metabolic network ω, we would
analyse it as ω(Θ, I, O, ∆, Φ, Σ, Υ, Γ, Ψ, Λ, Ξ, Π)—which is
more than G = (V, E) = (Θ, Φ)—i.e., we would analyse
its: nodes, inputs, outputs, transformations, ﬂows, streams,
pathways, catalysts, homeostatic and allostatic control mecha-
nisms, related interdependent networks, and perturbations. The
ultimate goal of metabolic analysis is to understand ω as a
metabolic system (with the elements just listed) capable of
functioning and handling perturbations by self-adapting to the
environment. We are interested in knowing the limits of self-
adaptation, where we expect to be able to characterise these
limits in terms of the appropriate entropy measure.
Recall that a node has inputs and outputs; a single input is
accepted by a speciﬁc node; a single output is produced by a
speciﬁc node;
a node transforms its inputs into its outputs
(and, therefore, a transformation (of a node) is an (inputs,
outputs (of the node)) pair);
a single ﬂow (from ϑa to ϑb)
is a single output (from ϑa) connecting to (or “becoming”)
a single input (to ϑb).
Further, catalysts are expected to be
25
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

associated with homeostatic and allostatic control mechanisms;
homeostatic control mechanisms ensure that the system returns
to its stable state;
allostatic control mechanisms move the
system to stable but possibly new states.
Further, a stream
can be an arbitrary selection of inputs and outputs, but would
normally be considered as a starting point to a pathway
investigation;
pathways are the goals of the analysis—they
identify functionalities and ensure functioning (corresponding
to the identiﬁed functionalities) while maintaining a state of
dynamic equilibrium and, therefore, functioning while han-
dling perturbations.
Finally, (external) perturbations come
from the system’s environment, i.e., from systems external
to the system in question (but internal perturbations are also
possible). As each perturbation must have its source, we claim
that the sources of the perturbations are other networks, namely
interdependent networks.
ω3
ω2
ω1
b
c
d
a
e
f
ob.c
ic.b
oc.e
ie.c
ob.d
id.b
od.e
ie.d
oa.b
ib.a
oe.f
if.e
Figure 3. Metabolic systems ω1, ω2 and ω3.
Figure 3 shows systems ω1, ω2 and ω3. We can list
these systems’ nodes, inputs and outputs: ω3(Θ3, I3, O3) =
ω3({a, b, c, d, e, f}, {ib.a, ic.b, id.b, ie.c, ie.d, if.e}, {oa.b, ob.c,
ob.d, oc.e, od.e, oe.f});
ω2(Θ2, I2, O2) = ω2({b, c, d, e}, {ib,
ic.b, id.b, ie.c, ie.d}, {ob.c, ob.d, oc.e, od.e, oe});
ω1(Θ1, I1, O1)
= ω1({b, c, d}, {ic.b, id.b}, {ob.c, ob.d}). System ω3 is isolated:
it has neither inputs, nor outputs connecting it to the environ-
ment (or systems immersed in the environment); all inputs
and outputs of ω3 are internal. We also note that node a is a
source-only node, and that node f is a sink-only node. But ω3
has ﬂows and transformations: a ﬂow from node a to node b,
denoted ϕa.b, is the output oa.b connecting to the input ib.a,
i.e., ϕa.b = oa.b.ib.a; and a transformation of node b, denoted
δb, is the pair, with the ﬁrst element of the pair being the
inputs Ib of b and the second element being the output Ob
of b; given that Ib = {ib.a} and Ob = {ob.c, ob,d} we have
that δb = Ib.Ob = {ib.a}.{ob.c, ob,d}. Regarding system ω2
(which has, comparing to ω3, lost some nodes and their inputs
and outputs), it has one input (to ω2) from the environment,
namely ib (rather than ib.a, as we have dropped node a), and
one ouput (from ω2) to the environment, namely oe (rather
than oe,f, as we have dropped node f). This allows us to
say that the stream ﬂowing through ω2 is the input ib (to ω2)
transformed (by ω2) to the output oe (from ω2). Regarding
system ω1, it has lost (comparing to ω2) only one node e, but
we set ω1 boundaries in such a way that we only consider
ﬂows from b to c and from b to d—consequently, we consider
neither inputs to b, nor outputs from c or d, and thus also do
not consider the nodes’ transformations. We will analyse ω1
network—as a supply network—in Section V.
A. Two component systems
This section considers a system with two components
A and B; in the environment, there are also other systems
C, D, E and F which can connect to A and B, cf. Figure 4.
If all the arrows shown in Figure 4 are present, then the binary
code for this network will consist of six 1s representing that
all six arrows j1–j6 are present; the code for this network
can be found in row (1), column (a) of Table I. [It should be
noted that neither one component systems, nor three component
systems are considered here. The case of a one component
system is trivial, as there would only be two possible arrows
and four (22) possible networks: a system that receives an
input from the environment and produces an output to the
environment, a system that is a sink only system, a system that
is a source only system, and an isolated system (without any
arrows). The case of a three component systems would require
considering twelve arrows (six arrows between the three nodes,
and two arrows between each of the three nodes and the
environment) and 212 possible networks (although multiple
networks would be have the same topology). Although such
three (or more) component networks could be analysed in an
analogous way to two component systems discussed in this
section, a multi-component system would probably be initially
partitioned into two subsystems (and therefore treated as a
two component system), with simple interdependence between
the components. For a speciﬁc multi-component network, the
connectivity between the components could be simple, and
given the network, in many cases there would only be a
limited number of alternative topologies to which the network
could transform. Multiple case studies should allow building
a library of functioning complex networks, with different real
world networks sharing the same abstract model; for instance,
a particular food distribution network could be functioning in
an exactly the same way as a particular information distribution
network.]
Different connection topologies are determined by subsets
of the set (of arrows) J = {j1, . . ., j6}. Table I shows binary
codes (indicating presence and absence of arrows in the given
network) for systems with different subsets of J (and Figure 5
shows the corresponding systems). It is straightforward to
order the resulting systems by the subset relation on the sets
of directed edges present in the systems’ topologies.
C
E
A
B
D
F
j3
j5
j1
j2
j4
j6
Figure 4. Sa1 = S111111 with code ca1 = 111111 indicating {j1, . . ., j6}.
Table I consists of cells (a, 1), . . ., (h, 6) corresponding to
the systems of Figure 5 and, therefore, these systems could be
named a1, . . ., h6. Hence, in Figure 5, the top system could be
labelled a1, the bottom system could be labelled h6, and so
on.
Only some of these labels are used in Figure 5, but all
labels can easily be derived from the correspondence between
the nodes of Figure 5 and the cells of Table I (we will also use
26
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

a1
c3
g4
h6
from: codes c111111, . . ., c000000
(subgraphs of {j1, . . ., j6})
to:
cells / labels a1, . . ., h6
(topologies Sa1, . . ., Sh6)
Figure 5. Ordering on SJ = {Sa1, . . ., Sh6} with codes of Table I (the systems’ labels—only a1, c3, g4, h6 are shown here—can be derived from Table I).
these labels for the systems presented in Figure 6). The ordered
set (P(J), ⊆)) induces, in an obvious way, the order on SJ =
{Sa1, . . ., Sh6}, as shown in Figure 5. It is the ordering of
Figure 5 which places, for instance, the network a1 (the best
connected network which has the code 111111 indicating that
all arrows are present) at the top of the ordered set, and the
network h6 (the least connected network which has two codes
100000 and 010000 indicating that the network topology is
the topology of exactly one arrow between the components A
and B of Figure 4; the topology with an arrow from A to B
is equivalent to the topology with an arrow from B to A) at
the bottom of the ordered set. This is why the code 111111
has been placed at the topmost row (row 1) of Table I and
the codes 100000 and 010000 have been placed at the bottom-
most row (row 6—or more precisely, rows 6a and 6b): it is
the ordering of Figure 5 that has been used when placing the
network codes in Table I.
SJ is the set of all posssible connection topologies (for
a two component system). An alternative way of ordering
SJ
can be produced if we treat the systems in SJ
as
“objects” and consider some “properties” these systems
have, rejecting the idea (which induced the ordering of
Figure 5) that adding arrows makes the network “better”
(cf. the paragraph below which discusses g4↑). Using the
framework of Formal Concept Analysis (FCA) [9], we can
form an FCA context K in which the systems in SJ are FCA
objects, and some properties are used as FCA properties.
Note that the FCA objects are (listing all FCA object): SJ =
{Sa1, Sa2, Sb2, Sh2, Sa3, Sb3, Sc3, Sd3, Se3, Sf3, Sg3, Sh3, Sa4,
TABLE I. CODES 111111, . . ., 010000 AND CELLS (LABELS) a1, . . ., h6.
(a)
(b)
(c)
(d)
(e)
(f)
(g)
(h)
(1)
11 11 11
(2a)
11 11 01
11 11 10
10 11 11
(2b)
11 01 11
11 10 11
01 11 11
(3a)
11 01 01
11 11 00
11 10 01
11 10 10
10 01 11
10 11 01
10 11 10
10 10 11
(3b)
11 00 11
11 01 10
01 11 01
01 01 11
01 10 11
01 11 10
(4a)
11 01 00
11 10 00
10 01 01
10 01 10
10 11 00
10 00 11
10 10 01
10 10 10
(4b)
11 00 01
11 00 10
01 01 01
01 10 01
01 00 11
01 11 00
01 01 10
01 10 10
(5a)
11 00 00
10 01 00
10 00 01
10 00 10
10 10 00
(5b)
01 00 01
01 01 00
01 10 00
01 00 10
(6a)
10 00 00
(6b)
01 00 00
Sb4, Sc4, Sd4, Se4, Sf4, Sg4, Sh4, Sa5, Se5, Sf5, Sg5, Sh5, Sh6},
i.e., card(SJ) = 26.
We need to determine what properties
of systems in SJ should be considered.
We introduce the following deﬁnitions (note that we as-
sume that there is at least one connection between the (two)
components of the system).
Deﬁnition 1:
(sink/source systems)
Let M be a two component system,
•
if a component of M has only inputs, then this
component is a sink-only system;
•
if a component of M has only outputs, then this
component is a source-only system;
•
if M has a component that is a sink-only system, then
27
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

g4
h6
Lb
Lc
Figure 6. FCA concept lattice L = (SF , ⩽) for context K of Table II (labels are collected in Table III; further comments are at the end of Section IV-A).
M is a partial sink system;
•
if M has a component that is a source-only system,
then M is a partial source system;
•
if M—w.r.t. the environment—has only inputs, then
M is a total sink system;
•
if M—w.r.t. the environment—has only outputs, then
M is a total source system;
•
if a component of M is disconnected from the envi-
ronment, then M is a partially closed system;
•
if M—w.r.t. the environment—has neither inputs nor
outputs, then M is a totally closed system.
TABLE II. AN FCA CONTEXT K.
n◦
n•
r◦
r•
c◦
g4
b3
×
a3
×
d3
×
a4
×
×
b4
×
×
a5
×
×
×
e3
×
g3
×
c4
×
×
d4
×
×
e4
×
×
f4
×
×
h4
×
×
e5
×
×
f5
×
×
×
g5
×
×
h5
×
×
×
h6
×
×
×
×
×
Using the symbols n◦, n•, r◦, r•, c◦, c•, for the predicates
partial sink, total sink, partial source, total source, partially
closed, totally closed, respectively, we have that c•(S) ↔
n•(S) ∧ r•(S) (i.e., c• can be expressed using n• and r•).
Hence, we use n◦, n•, r◦, r• and c◦ as properties of systems
and, therefore, employ the set {n◦, n•, r◦, r•, c◦} as the set of
FCA properties. The FCA context K of Table II associates the
elements of SJ with properties in {n◦, n•, r◦, r•, c◦}.
Given the FCA context K of Table II, the corresponding
FCA concept lattice L can be derived, and provides an ordering
on FCA concepts—and, therefore, also an ordering on FCA
objects, i.e., on systems of SJ. The lattice L is shown in Fig-
ure 6 (given an FCA context, its FCA lattice can be constructed
using the portal latviz.loria.fr). As mentioned before,
we could use the labels a1, . . ., h6 (corresponding to cells
(a, 1), . . ., (h, 6) of Table I), to label the systems presented
in Figure 6; these labels being collected in Table III.
[Note
that Table III provides labels for the nodes of the lattice of
Figure 6 in a similar way as Table I provides labels for the
nodes of the ordering of Figure 5.]
TABLE III. LABELS FOR THE FCA CONCEPT LATTICE OF FIGURE 6.
g4
a3
e3
b3
g3
d3
c4
a4
f4
e5
d4
g5
e4
b4
h4
f5
a5
h5
h6
Notice (cf. Figure 5) that g4↑ = {x | x ≥ g4} =
{g4, f3, h3, h2, c3, a2, b2, a1} and all the corresponding sys-
tems have none of the properties in {n◦, n•, r◦, r•, c◦} (i.e.,
they are all good w.r.t. {n◦, n•, r◦, r•, c◦}) and, therefore, g4
28
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

is included in Table II as the only representative of g4↑—this
is why the set of systems reduced from card(SJ) = 26 to
19 = card(SF ), where SF = SJ \ {Sj | j ∈ g4↑ \ {g4}}.
Figure 6 presents an FCA concept lattice L (for context K
of Table II) with nodes being metabolic systems, and links in-
dicating the health ordering, where the health of system ω is re-
lated to the set of its FCA properties Aω ⊆ {n◦, n•, r◦, r•, c◦}
(see Table II and Figure 6). Alternative sets of FCA properties
and contexts could be used—consider the following contexts:
(a) Aa = {n◦, n•, r◦, r•, c◦} and context Ka = K of Table II;
(b) Ab = Aa but Kb conforms to n• → n◦ and r• → r◦;
(c) Ac = {n◦ ∨ r◦, n• ∨ r•, c◦} with Kc a modiﬁcation of Kb.
Note that Figure 6 shows the concept lattice La = L for
Ka = K, while the small inset lattices show FCA concept lat-
tices Lb and Lc for the contexts Kb and Kc, respectively. The
FCA objects SF = {Sg4, . . ., Sh6} form a lattice L = (SF , ⩽),
with “⩽” being the ordering relation. We expect the following:
if S1 ⩽ S2 then µ(S1) ≤ µ(S2), where “µ” is a numeric
(entropic, curvature based) measure on SF .
[For additional
information on FCA analysis of SF , cf. Appendix A.]
V.
SUPPLY NETWORKS AS METABOLIC NETWORKS
We consider a small supply network {b, c, d} (which could
be seen as a part of a larger network {a, b, c, d, f, g}); this sup-
ply network is shown in Figure 7, its self-adapting behaviour
in Figure 8, and the list of nodes’ attitudes in Table IV.
It will be demonstrated that the supply network of Figure 7
will, while adapting to the changing environment, exhibit a
complex behaviour—note that it is the complex behaviour of
the network that should be associated with the word “complex”
in the term “complex network.” For some research on using
complex networks for supply chains, see [19][20].
We have speciﬁc values for the sets Θ, I, O, ∆, Φ, Σ,
Υ, Γ, Ψ, Λ, Ξ, Π. We have Θ
=
{ϑb, ϑc, ϑd} or simply
Θ = {b, c, d}. I = {ic.b, id.b}. O = {ob.c, ob.d}. ∆ = ∅∆ = ∅
(because for node b we only consider its outputs (but not
inputs), and for c and d we only consider their inputs (but
not outputs)). Φ = {ϕb.c, ϕb.d}. Λ = ∅Λ = ∅ (it seems we
will not have allostatic control mechanisms—but we will have
some homeostatic ones). Σ and Υ would not be considered,
given that all we have is ﬂows from b to c and from b to
d—however, if the system ω2 of Figure 3 was considered, we
could take Σ = {ib.oe} and search for pathways Υ associated
with the streams of Σ.
Then, Ξ = ∅Ξ = ∅
(because
no interdependent networks are considered;
but we would
have interdependent networks, if we modeled evacuation sce-
narios, cf. Section VI). Π could be taken to be the ﬂows
Φ = {ϕb.c, ϕb.d}—imposed by b on c and d (but earlier,
possibly imposed on b by a).
Γ (catalysts) and Ψ (homeostatic control mechanisms)—
omitted above—are the interesting ones, and we now analyse
ω’s homeostatic control mechanisms and catalysts. Figure 8
is almost self-explanatory: it demonstrates that both c and d
will need to split (forming {c1, c2} and {d1, d2}, respectively);
then, c2 and d2 will need to merge in order to maximise
efﬁciency while maintaining effectiveness.
Table IV shows (at lines 05–11) how nodes c and d
calculate their effectiveness and efﬁciency. At line 13, c splits
an ineffective node (namely, node c), and d splits an inefﬁcient
node (namely, node d). After the splits, we get (apart from
ω
b
c
d
a
f
g
ob.c
ic.b
oc.f
if.c
ob.d
id.b
od.f
if.d
oa.b
ib.a
of.g
ig.f
Figure 7. A metabolic supply network ω with nodes {b, c, d}.
effective and efﬁcient nodes c1 and d1) an ineffective node
c2 (with 0 capability) and an inefﬁcient node d2 (with 0
ﬂow). At line 25 (after a short negotiation) nodes c2 and
d2 decide to merge, forming node e. It happens that e is
both effective and efﬁcient (if it was not, it would act in
a way analogous to either c or d, and we would be left
with an unmatched node with either 0 capability, or 0 ﬂow,
respectively); therefore, e accepts the ﬂow of 2—the resulting
system is, in this case, effective and efﬁcient. The discussion
demonstrates that the supply network can handle perturbations
by using homeostatic control mechanisms of split and merge.
Namely, we get the following. Ψ = {ψsplit, ψmerge} (more
precisely, we get two types of splits: ψineﬀect
split
(splitting an
ineffective node), and ψineﬃc
split
(splitting an inefﬁcient node);
regarding the merge operation ψmerge = ψc0f0
merge ineffective
nodes with 0 capability are merged with inefﬁcient nodes with
0 flow). Regarding the catalyst, we have Γ = {γee}, and
γee should be understood as an effectiveness and efﬁciency
ﬁlter that triggers the split and merge homeostatic control
mechanisms. What the nodes believe, intend, and what (split
and merge) operations they perform is shown in Table IV;
however, some details—such as those related to controlling,
commanding, delegating, inﬂuencing and reporting—are not
included. Brieﬂy: node c can inﬂuence node d by making d
aware of c’s beliefs or intentions; it can command node d
by explicitly issuing a command (cf. line 23 in Table IV); or,
ﬁnally, it can control other nodes (cf. lines 02–04 in Table IV).
Work is underway on large scale supply networks self-adapting
to perturbations, as described here.
Regarding pathways Υ, for ω of Figure 7, we have Υ = ∅
(or rather Υ = {ω}).
However, for large supply networks,
it could easily be the case that pathways—corresponding to
speciﬁc functionalities—could be identiﬁed (for instance, in
food supply networks, we could identify pathways of refrig-
erated supplies). Regarding interdependent networks Ξ and
perturbations Π we have Ξ = ∅ and Π = ∅. However, when
evacuation scenarios are considered, they bring interdependent
networks, cf. Section VI.
VI.
EVACUATION SCENARIOS
A simple evacuation scenario involving people, buses and
fuel is presented in Figure 9.
The scenario of Figure 9 involves three interdependent
networks:
ωP
is a network consisting of three nodes,
ΘP = {ϑb
P , ϑc
P , ϑd
P } with ﬂows of people;
ωB is a net-
work consisting of three nodes, ΘB = {ϑb
B, ϑc
B, ϑd
B} with
29
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

Θ′ = {b, c, d}
0 → 10
8
c
10
b
16 → 0
16
6
d
0 → 6
8
Θ′′ = {b, c1, c2, d1, d2}
0 → 8
8
c1
8
2
b
16 → 0
16
0
6
c2
d2
d1
0 → 2
0
0 → 0
2
0 → 6
6
Θ′′′ = {b, c1, d1, e}
0 → 8
8
c1
8
2
b
16 → 0
16
6
e
d1
0 → 2
2
0 → 6
6
ψsplit
ψmerge
Figure 8. Self-adapting metabolic complex network ω(Θ, I, O) with Θ′ = {b, c, d}, Θ′′ = {b, c1, c2, d1, d2} and Θ′′′ = {b, c1, d1, e}.
ﬂows of buses;
ωF is a network consisting of three nodes,
ΘF = {ϑb
F , ϑc
F , ϑd
F } with ﬂows of fuel.
The network ωP
can request services from ωB—in order to evacute people, ωP
needs services that ωB can provide; however, what is important
is that the request for services obtained by ωB can be seen as
perturbations that ωB has to handle. Similarly, the network
ωB can request services from ωF —in order to run buses, ωB
needs services (namely: fuel) that ωF can provide; again, it is
important to note that the request for services obtained by ωF
can be seen as perturbations that ωF has to handle.
This scenario will be further analysed in our future work—
but the point we can make now is that we can see perturbations
as interactions between interdependent networks.
requests(ωB, ωF )
requests(ωP , ωB)
ϑc
F
ϑd
F
ϑb
F
ϑc
B
ϑd
B
ϑb
B
ϑc
P
ϑd
P
ϑb
P
network ωF
network ωB
network ωP
F = fuel
B = buses
P = people
Figure 9. Evacuation scenario.
VII.
ONTOLOGIES FOR ROBOTICS
There is a push for building autonomous systems, and
autonomous robots. Given that autonomous robots’ capabilities
are becoming more complex, there is an urgent need to clarify
such concepts as capability, function, behaviour and structure.
Such analysis, however, could be performed at different levels,
with capabilities (and the related functions and behaviours)
being associated with some identiﬁed conceptual levels. Den-
nett [10] suggested the intentional stance, explaining that when
conceptualising and analysing the world we might do so at
different levels; he suggested a physical level, a design (or
functional) level, and an intentional level. At the physical
level, we use physics and physical properties (such as colour
and size) to describe and understand the world. At the design
level, we abstract away from physics and use such relations as
transform, move, attach, emit, sense, interpret and inform (such
relations have been employed in the Consensus system [21]).
Using intentional level we ascribe beliefs (and other attitudes)
to systems, for instance, we might say that a thermostat-
controlled air-conditionning system has a belief “it’s too hot
in here” [22] (we should see such a system as an autonomous
system capable of handling the temperature perturbations).
Dennett has also mentioned a “person level”—but maybe
“autonomy level” would be more appropriate, with metabolic
autonomy understood as the capability to handle (various types
of) perturbations. If Dennett’s scheme was extended by adding
the metabolic autonomy level, then the required concepts
would include pathways, homeostasis and perturbations. Such
an extension might be necessary if we want our robots to be
robustly autonomous (i.e., resilient to perturbations).
The metabolic approach provides the highest level of the
conceptualisation: we could consider a metaphysical level for
space, time, matter (without physical boundaries), then Den-
nett’s physical, design and intentional level. At the intentional
level, we can have beliefs and intentions of single agents,
but we can also have attitudes—and transfers of attitudes
(including inﬂuences and delegations)—at the social level (of
groups of agents). Finally, we have a metabolic autonomy
level (with pathways, homeostatic control and perturbations).
The following list provides some conceptual relations at those
levels:
1)
metaphysical:
spatially / temp. connects, orients;
2)
physical:
temperature, size, rigidity, toxicity;
3)
design:
senses, moves, transforms, interprets;
30
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

TABLE IV. SELF-ADAPTING METABOLIC COMPLEX NETWORK ω(Θ, I, O) MODIFYING ITS NODES AND FLOWS.
intends(a,
intends(b,
flow([b,{c,d}], [t1,t2], 16)))
-1
[t1,t2]
00
intends(b,
flow([b,{c,d}], [t1,t2], 16))
02
intends(b,
intends(c, flow([b,c], [t1,t2], 10))) % .................................... push([b,c], 10)
03
intends(b,
intends(d, flow([b,d], [t1,t2],
6))) % .................................... push([b,d],
6)
04
intends(c, flow([b,c], [t1,t2], 10))
intends(d, flow([b,d], [t1,t2], 6))
05
believes(c, capability(c, 8))
believes(d, capability(d, 8))
05
06
believes(c, state-curr(c, t1, 0))
believes(d, state-curr(d, t1, 0))
06
07
believes(c, state-next-flw(c, t2, 10))
believes(d, state-next-flw(d, t2, 6))
07
08
believes(c, state-next-cap(c, t2,
8))
believes(d, state-next-cap(d, t2, 6))
08
09
believes(c, state-next-max(c, t2,
8))
believes(d, state-next-max(d, t2, 8))
09
10
believes(c, effective(c, [t1,t2], 8/10))
believes(d, effective(d, [t1,t2], 6/6))
10
11
believes(c, efficient(c, [t1,t2], 8/8))
believes(d, efficient(d, [t1,t2], 6/8))
11
12
believes(c, ineffective(c, [t1,t2]))
believes(d, inefficient(d, [t1,t2]))
12
13
splits-ineffective-node(c, [c, [c1, c2]])
splits-inefficient-node(d, [d, [d1, d2]])
13
14
intends(c,
flow([b,c1], [t1,t2], 8))
intends(d, flow([b,d1], [t1,t2], 6))
14
15
intends(c,
flow([b,c2], [t1,t2], 2))
intends(d, flow([b,d2], [t1,t2], 0))
16
believes(c1, effective-efficient(c1)*)
believes(d1, effective-efficient(d1)*) % pull([c1,b], 8)
17
believes(c2, ineffective(c2, [t1,t2]))
believes(d2, inefficient(d2, [t1,t2])) % pull([d1,b], 6)
18
believes(c2, capability(c2, 0))
believes(d2, capability(d2, 2)
19
intends(c2,
flow([b,c2], [t1,t2], 2))
intends(d2, flow([b,d2], [t1,t2], 0))
19
20
believes(c2,t1,effective(c2,[t1,t2],0))
believes(d2, t1, effective(d2, [t1,t2], 1))
20
21
believes(c2,t1,efficient(c2,[t1,t2],1))
believes(d2, t1, efficient(d2, [t1,t2], 0))
21
22
believes(c2,t1,ineffective-w0c(c2,[t1,t2])) believes(d2, t1, inefficient-w0f(d2, [t1,t2]))
22
23
commands(c2,d2,offer(flow(c2,d2,t*,2)))
23
24
accepts (d2, c2, offer(flow(c2,d2,t*,2)))
24
25
agrees(c2, t1, merge([c2,d2],e,[t1,t2]))
agrees(d2, t1, merge([c2,d2],e[t1,t2]))
25
26
merges-0-cap-nodes-with-0-flw-nodes([c2,d2], [[c2, d2], e])
26
27
believes(e, capability(e,
2))
28
intends(e,
flow([b,e, [t1,t2], 2)) ...........................................% pull([e,b],
2)
4)
intentional:
believes, intends, obligates, inﬂuences;
5)
metabolic:
perturbs, homeo-allostatically controls.
[For information on the conceptualisation cf. Appendix B.]
We could consider the following examples of metabolic
streams at the above ﬁve levels: (1) streams of gravitational
forces; (2) ﬂows of water through a city; (3) streams of air-
craft’s radar readings transformed into movement maneuvers;
(4) streams of beliefs, intentions, inﬂuences and obligations
during a country’s elections; (5) streams of modiﬁcations to
city’s infrastructure systems’ homeostatic control mechanisms.
It should be noted that many conceptual relations can be found
at multiple levels in the above conceptualisation—consider
e.g., connects, senses or strikes (with a weapon). It should
also be noted that a metabolic system, in order to keep
functioning (or keep living) should be continuously monitoring
the environment in order to detect and handle all perturbations
that have the potential to push the system out of the equilibrium
state—it seems that this process of monitoring and handling
perturbations constitutes the system’s top-level goal. To test,
verify and progress with such a framework, multiple case
studies should be performed (such case studies could vary
widely w.r.t. both domains and scale).
We are also interested in non-monotonic ontology evolu-
tion, cf. the last paragraph of Section VIII.
VIII.
FUTURE WORK
There is a growing need to design and build robust
autonomous systems;
some domains, research areas and
mathematical tools related to autonomy are listed in Table V.
TABLE V. DOMAINS AND TOOLS FOR AUTONOMY.
curvature
Forman-Ricci
d←c
←−
Ricci curvature
& entropy
Ollivier-Ricci
(on manifolds)
maths
geometry
geometry
measures
generic entropy/curvature-based measures
↓
speciﬁc performance measures (cf. generic meas.)
↑
concepts
robustness resil. to pert.
?
←−
robustness
↕ perturbations
≡
↕ perturbations
self-adaptation
≡
self-adaptation
autonomy
≡
autonomy
maths
graph th. & topology
diff. equations
sub-area
complex networks
appr
−→
complex dyn. sys.
area
networks
dynamical systems
domain
discrete
continuous
However, there is no consensus on the concepts of autonomy
or robustness; sometimes robustness is considered to be a
property that a system is said to possess if it does not
fail some proposed performance tests. Autonomy is usually
understood as ability to function without external control—
but it has to be added that this ability should survive certain
changes (perturbations) occurring in the complex (dynamic,
uncertain) environment. Robustness, understood as resilience
to perturbations, is closely related to self-adaptation; and
it is the notion of perturbations that links robustness with
adaptation—as indicated in the concept rows of Table V.
31
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

TABLE VI. TWO COMPONENT SYSTEMS: LABELS, CODES, GRAPHS AND TOPOLOGIES (PART 1 OF 3).
(1)
(2)
(3)
(4)
(5)
(6)
label l
code c
graph Jc (⊆ J)
topology Tl
topology T c
l
topology T m
l
g4
10 10 01
01 01 10
a3
11 01 01
e3
10 01 11
01 11 01
b3
11 11 00
11 00 11
g3
10 11 10
01 10 11
d3
11 10 10
c4
10 01 01
01 01 01
Given a functioning system ω, it seems appropriate to
say that: autonomous(ω) ↔ self-adaptable(ω) ↔ robust(ω).
Furthermore, robustness has been linked to curvature and
entropy [4]; therefore, entropic curvature-based measures could
be applied to assess systems’ robustness. It should be noted
that curvatures are geometric notions; they have been recently
considered appropriate for quantifying functionality and ro-
bustness of networks [4]. The top part of Table V shows
that discretisations (changing from continuous to discrete)
have been applied to Ricci curvature to produce (discrete)
Forman-Ricci and Ollivier-Ricci curvatures. The second line
of Table V, labelled measures, indicates that a promising line
of research should investigate: (a) entropy/curvature based
measures that should apply to systems in general; (b) per-
formance/functionality related measures for speciﬁc systems
(such as supply networks); (c) relating general entropic mea-
sures (of (a)) to speciﬁc performance measures (of (b)) for
selected classes of systems.
We also have work underway looking at non-monotonic on-
tology evolution. Ontologies have traditionally been developed
monotonically in the sense of them being built by additively
including additional concepts. This assumes that the problem
is ﬁxed and we can build, eventually, a full and correct account
of the universe of discourse. This does not sufﬁce for a
changing problem environment where we have to adapt. The
insight is that what is required is a set of bounding conditions
within which we allow non-monotonic ontology change; these
bounding conditions would be related to regimes of behaviour
picked out by order parameters as mechanisms of abstraction.
IX.
CONCLUSION
This paper provides a description of the Metabolic Com-
plex Networks (MCN) framework and an analysis of sup-
ply networks from the perspective of the MCN framework;
the obtained set of homeostatic control mechanisms Ψ =
{ψsplit, ψmerge} is appropriate. Research on adaptive supply
networks [7][19][20][23]–[24] and large scale implementation
(using Python and NetworkX) are underway.
The essential components of the framework are:
32
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

TABLE VII. TWO COMPONENT SYSTEMS: LABELS, CODES, GRAPHS AND TOPOLOGIES (PART 2 OF 3).
(1)
(2)
(3)
(4)
(5)
(6)
label l
code c
graph Jc (⊆ J)
topology Tl
topology T c
l
topology T m
l
a4
11 01 00
11 00 01
f4
10 00 11
01 11 00
e5
10 01 00
01 00 01
d4
10 01 10
01 10 01
g5
10 00 10
01 10 00
e4
10 11 00
01 00 11
b4
11 10 00
11 00 10
I.
ONTOLOGY:
conceptual understanding of the domain;
II. METABOLISM: homeostatic handling of perturbations;
III. CURVATURE:
entropic quantifying of robustness.
Future work—sketched in Section VIII—will focus on a
metabolic analysis of evacuation operations expanded by an
entropic analysis of robustness of the selected systems.
ACKNOWLEDGMENT
La d´emarche de chercher `a comprendre les r´eseaux com-
plexes comme des syst`emes m´etaboliques est n´ee lors du s´ejour
du premier auteur `a Rouen, en France, en d´ecembre 2018 et
janvier 2019. Merci `a Th´er`ese et Daniel Caillemet pour la
cr´eation d’un environnement m´etabolique excellent, impossible
`a trouver ailleurs.
APPENDIX
A. FCA analysis of two component systems
This appendix provides details on the FCA analysis of Sec-
tion IV-A. Tables VI–VIII show labels, codes and ways to vi-
sualise the systems and facilitate the construction of FCA con-
texts (colours magenta/orange/cyan indicate sink/source/closed
(n◦/r◦/c◦), respectively).
In Tables VI, VII and VIII, the
following columns are used: (1) label l, with labels a1, . . ., h6
corresponding to the cells (a, 1), . . ., (h, 6) of Table I;
(2)
code c, identifying the subset Jc of J—these codes have been
collected in Table I; (3) graph Jc (⊆ J), showing input–output
connections between the two components of the system and
the environment—note that Figure 4 shows the graph J111111
(of system S111111) for code c = 111111;
(4) topology Tl,
representing the connection topology of graph Jc, with the
association between the label l and the code c provided in
Table I (note that multiple codes can be associated with a
single label, as multiple graphs can have the same connection
topology); these topologies have been shown in Figures 5
and 6;
(5) topology T c
l , visualising topology Tl differently,
using colour; (6) topology T m
l , a modiﬁcation of T c
l .
The contexts Kb and Kc mentioned in Section IV-A are
provided in Tables IX and X; their concept lattices Lb and Lc
were provided in Figure 6.
33
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

TABLE VIII. TWO COMPONENT SYSTEMS: LABELS, CODES, GRAPHS AND TOPOLOGIES (PART 3 OF 3).
(1)
(2)
(3)
(4)
(5)
(6)
label l
code c
graph Jc (⊆ J)
topology Tl
topology T c
l
topology T m
l
h4
10 10 10
01 10 10
f5
10 00 01
01 01 00
a5
11 00 00
h5
10 10 00
01 00 10
h6
10 00 00
01 00 00
TABLE IX. AN FCA CONTEXT Kb.
n◦
n•
r◦
r•
c◦
g4
b3
×
a3
×
×
d3
×
×
a4
×
×
×
b4
×
×
×
a5
×
×
×
×
×
e3
×
g3
×
c4
×
×
d4
×
×
e4
×
×
f4
×
×
h4
×
×
e5
×
×
×
×
f5
×
×
×
g5
×
×
×
×
h5
×
×
×
h6
×
×
×
×
×
B. Conceptualising metabolic systems
Regarding the conceptualisation, the following list of con-
ceptual relations was presented in Section VII.
1. metaphysical:
spatially / temporally connects, orients;
2. physical:
temperature, colour, weight, rigidity, toxicity;
3. design:
senses, moves, transforms, interprets, informs;
4. intentional:
believes, intends, obligates, inﬂuences;
5. metabolic:
perturbs, homeo-allostatically controls.
TABLE X. AN FCA CONTEXT Kc.
n◦ ∨ r◦
n• ∨ r•
c◦
g4
b3
×
a3
×
×
d3
×
×
a4
×
×
×
b4
×
×
×
a5
×
×
×
e3
×
g3
×
c4
×
×
d4
×
e4
×
×
f4
×
×
h4
×
×
e5
×
×
×
f5
×
×
×
g5
×
×
×
h5
×
×
×
h6
×
×
×
We list selected concepts and relations for the above ﬁve levels.
1)
metaphysical level
a)
process, spatial, temporal
b)
connects, meets
c)
distance, between
2)
physical level
a)
temperature
(+ physical props/rels)
b)
toxicity
(+ chemical props/rels)
34
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

3)
design level
a)
transforms
b)
damages, repairs, enables
c)
attaches, moves
d)
emits, senses
e)
interprets, informs
4)
intentional level
a)
believes, desires, intends
b)
permits, obligates
c)
influences, controls
d)
delegates
5)
metabolic level
a)
perturbs
b)
detects-perturbation
c)
handles-perturbation
d)
homeostatically-controls
e)
allostatically-controls
In the remainder of this appendix, we provide further
comments on the above ontological concepts and relations by
listing some frameworks and examples.
For instance, (1b)
clariﬁes that connects and meets are the primitive relations of
the Region Connection Calculus (RCC) framework [25] and
of Allen’s interval algebra [26], respectively, while (3a) lists
three examples of transformation: biological metamorphosis,
cellular respiration (→) & photosynthesis (←), and transfor-
mation of mercury (Hg) into gold (Au).
Metaphysical level (1)—existence, space, time
(1b) connects [25] and meets [26]
(1c) qualitative distance (e.g., near and far) [27]
(1c) between: cf. [Paris/1915, Berlin/1910, Moscow/1905]
Physical level (2)—the domain of physics and chemistry
(2a) physical properties: temperat., colour, mass, size, texture
(2b) chemical properties: toxicity, ﬂammability, chem. stabil.
Design level (3)—above the level of physics and chemistry
(3a) transforms: metamorph., C6H12O6↔CO2, Hg→Au
Intentional level (4)—attitudes (information, pro, normative)
(4a) believes, intends: cf. Bi¬α ∧ BiIjBiα [28]
(4b) permits: cf. Pk,i [protects(i, i)] ← Ij [kills(j, i)]
(4c) influences: “Ann inﬂuences Ben to control Craig”
Metabolic level (5)—functioning despite perturbations
(5a) perturbs: cf. earthquake, ﬂood, socio-techn. systems
(5b) detects perturb.: cf. earthquake warning system
(5c) handles perturb.: cf. ﬂood mitigation dams
(5d) homeostatically controls: cf. air-cond. system
(5e) allostatically controls: social adaptation [29].
REFERENCES
[1] S. H. Strogatz, “Exploring complex networks,” Nature, vol. 410,
pp. 268–276, 2001.
[2] X. F. Wang and G. Chen, “Complex Networks: Small-World,
Scale-Free and Beyond,” IEEE Circuits and Systems Magazine,
pp. 6–20, 2003.
[3] A.-L. Barab´asi and E. Bonabeau, “Scale-free networks,” Scien-
tiﬁc American, vol. 288, pp. 50–59, 2003.
[4] A. R. Tannenbaum et al., “Graph curvature and the robustness
of cancer networks,” 2015, arXiv 1502.04512.
[5] J. Sia, E. Jonckheere, and P. Bogdan, “Ollivier-Ricci curvature-
based method to community detection in complex networks,”
Scientiﬁc Reports, vol. 9, pp. 1–12, 2019.
[6] M. Magoni, “Resilience thinking and urban metabolism in
spatial planning: which possible integrations,” City, Territory
and Architecture, vol. 4, pp. 1–8, 2017.
[7] P. G. Flikkema and M. Vigil-Hayes, “Self-adaptive and re-
silient urban networking infrastructure for disasters and smart
city services,” in IEEE International Conference on Big Data,
pp. 4074–4079, 2017.
[8] C.-C. Ni, Y.-Y. Lin, F. Luo, and J. Gao, “Community Detection
on Networks with Ricci Flow,” Scientiﬁc Reports, vol. 9, pp. 1–
12, 2019.
[9] B. Ganter and R. Wille, Formal Concept Analysis. Mathematical
Foundations. Springer, 1996.
[10] D. C. Dennett, The Intentional Stance. The MIT Press, 1987.
[11] A. Samal et al., “Comparative analysis of two discretizations
of Ricci curvature for complex networks,” Scientiﬁc Reports,
vol. 8, pp. 1–16, 2018.
[12] D. J. Reid, “An Autonomy Interrogative,” in Foundations of
Trusted Autonomy (H. A. Abbass, J. Scholz, and D. J. Reid,
eds.), pp. 365–391, Springer, 2018.
[13] D. L. Nelson and M. M. Cox, Lehninger Principles of Biochem-
istry. W. H. Freeman and Company, 2008.
[14] A.-L. Barab´asi and R. Albert, “Emergence of scaling in random
networks,” Science, vol. 286, pp. 509–512, 1999.
[15] D. J. Watts and S. H. Strogatz, “Collective dynamics of “small-
world” networks,” Nature, vol. 393, pp. 440–442, 1998.
[16] S. Okuda et al., “KEGG Atlas mapping for global analysis of
metabolic pathways,” Nucleic Acids Research, vol. 36, no. 1,
pp. W423–W426, 2008.
[17] P. V. Sengbusch, Metabolic Pathways, 1998 (accessed January
26, 2020). https://s3.lite.msu.edu/res/msu/botonl/b online/ e19
1/metabol.htm.
[18] Biochemical
Pathways,
Part
1:
Metabolic
Pathways.
F. Hoffmann-La Roche AG, 2020 (accessed January 26, 2020).
http://biochemical-pathways.com/#/map/1.
[19] E. J. S. Hearnshaw and M. M. J. Wilson, “A complex network
approach to supply chain network theory,” International Journal
of Operations & Production Management, vol. 33, pp. 442–469,
2013.
[20] S. I. Mari, Y. H. Lee, and M. S. Memon, “Complex network
theory-based approach for designing resilient supply chain net-
works,” International Journal of Logistics Systems and Manage-
ment, vol. 21, pp. 365–384, 2015.
[21] D. A. Lambert, A. Saulwick, and K. Trentelman, “Consensus: A
comprehensive solution to the Grand Challenges of Information
Fusion,” in Proceedings of the 18th International Conference on
Information Fusion, pp. 908–915, 2015.
[22] J. Searle, Minds, brains and science. Harvard University Press,
1985.
[23] S. S. N. Perera, M. G. H. Bell, and M. C. J. Bliemer, “Modelling
supply chains as complex networks for investigating resilience:
an improved methodological framework,” in 37th Australasian
Transport Research Forum, pp. 1–16, 2015.
[24] A. Surana, S. Kumara, M. Greaves, and U. N. Raghavan,
“Supply-chain networks: a complex adaptive systems perspec-
tive,” International Journal of Production Research, vol. 43,
pp. 4235–4265, 2005.
[25] D. A. Randell, Z. Cui, and A. G. Cohn, “A spatial logic based on
regions and connection,” in 3rd Int. Conf. on Knowledge Repre-
sentation and Reasoning (B. Nebel, C. Rich, and W. Swartout,
eds.), pp. 165–176, Morgan Kaufmann, 1992.
[26] J. F. Allen, “Maintaining knowledge about temporal intervals,”
Communications of the ACM, vol. 26, no. 11, pp. 832–843,
1983.
[27] D. Hern´andez, E. Clementini, and P. D. Felice, “Qualitative
distances,” in Spatial Information Theory A Theoretical Basis
for GIS. COSIT 1995 (A. U. Frank and W. Kuhn, eds.), pp. 45–
57, Springer, 1995.
[28] W. van der Hoek and M. Wooldridge, “Towards a logic of
rational agency,” L. J. of the IGPL, vol. 11, pp. 133–157, 2003.
[29] J. Schulkin, “Social allostasis: Anticipatory regulation of the
internal milieu,” Frontiers in Evolutionary Neuroscience, vol. 2,
pp. 1–15, 2011.
35
Copyright (c) The Government of Australia, 2020. Used by permission to IARIA.     ISBN:  978-1-61208-787-0
ICAS 2020 : The Sixteenth International Conference on Autonomic and Autonomous Systems

