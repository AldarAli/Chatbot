Locating Zigbee Devices in a Cluster-Tree Wireless Sensor Network: an ESD-based
Integrated Solution
Stefano Tennina
WEST Aquila srl,
University of L’Aquila, Italy
tennina@westaquila.com
Marco Di Renzo
Laboratory of Signals and Systems (L2S)
Univ Paris-Sud (Paris), France
marco.direnzo@lss.supelec.fr
Abstract—Recent advances in the technology of wireless
electronic devices have made possible to build ad-hoc Wireless
Sensor Networks (WSNs) using inexpensive nodes consisting
of low power processors, a modest amount of memory and
simple wireless transceivers. Over the last years, many novel
applications have been envisaged for distributed WSNs in
the area of monitoring, communication and control. One
of the key enabling and indispensable services in WSNs is
localization (i.e., positioning), given that the availability of
nodes’ location may represent the fundamental support for
various protocols (e.g., routing) and applications (e.g., habitat
monitoring). Furthermore, WSNs are now being increasingly
used for real-time applications having stringent Quality-of-
Service (QoS) requirements, such as timeliness and reliability.
Towards this end, Zigbee/IEEE 802.15.4 and the Cluster-Tree
model are considered among the most promising candidates.
Building from (i) our proposed Enhanced Steepest Descent
(ESD) algorithm to solve positioning of nodes in a fully
distributed fashion, (ii) the mechanism to evaluate at run-time
the site-speciﬁc parameters for the correct operation of the ESD
(i.e., RSSI-based ranging) and (iii) the recent availability of
Zigbee/IEEE 802.15.4 implementations over TinyOS, the main
output of this paper is to outline how a positioning service can
be fully integrated into a communication protocol stack.
Keywords-positioning service; communication protocol; Zig-
Bee/IEEE 802.15.4; system integration.
I. INTRODUCTION
Wireless Sensor Networks (WSNs) have been emerging
as underlying infrastructures for new classes of large-scale
and dense networked embedded systems. While there has
been a plethora of scientiﬁc publications on WSNs, the
vast majority focuses on protocol design (e.g., medium
access control, routing, data aggregation) while only a scarce
number of papers report real(istic) applications [1]. This
might be due to the following facts: (i) WSN technology
is extremely expensive for large-scale systems and (ii) is
still very limited/unreliable, particularly in what concerns
communications; (iii) difﬁculty on ﬁnding “killer” applica-
tions with a good cost/beneﬁt trade-off; (iv) unavailability
of standard, application-adequate, mature and commercially
available technology; (v) lack of complete and ready-to-
use system architectures, able to fulﬁll both functional and
non-functional requirements. Despite relevant work on WSN
architectures proposed so far (e.g., [2], [3]), none of them
fulﬁlls all requirements for large-scale real-time monitoring.
Moreover, WSNs are required to possess self-organizing
capabilities, so that little or no human intervention for
network deployment and setup is required. A fundamental
component of self-organization is the ability of sensor nodes
to “sense” their location in space, i.e., determining where a
given node is physically located in a network [4].
In this work, we try to overcome the above limitations,
showing how our previously presented fully distributed
positioning service for WSNs [5] can be integrated into a
full network architecture, built upon the Zigbee Cluster-Tree
model [6] and IEEE 802.15.4 standard [7].
The remainder of this paper is as follows. Section II
outlines the Zigbee Cluster Tree network architecture. Sec-
tion III summarizes our proposed positioning service and
Section IV presents how it can be integrated into the archi-
tecture. Finally, Section V provides concluding remarks.
II. NETWORK ARCHITECTURE
To achieve efﬁciency, scalability and QoS in WSN-based
systems, a network architecture should have the following
common features: (i) being multi-tier; (ii) using a core IP-
based network for interconnecting heterogeneous elements
and (iii) the IEEE 802.15.4 protocol for short range com-
munications among sensor nodes. While the IP-based core
network and the IEEE 802.15.4 standard are natural choices,
thanks to their maturity, the use of a multi-tiered architecture,
although it offers the highest level of ﬂexibility, raises a
number of challenges: (i) how many tiers and therefore
how many communication technologies must be chosen, and
(ii) what kind of nodes are the most appropriate for each tier
(in terms of hardware features and power supply type)?
By focusing on the WSN portion, the devised architecture
can be detailed as in Fig. 1. Tier–0 consists of simple wire-
less sensor nodes (SN), performing sensing tasks and deliv-
ering data to the devices at the upper tier in the hierarchy
using the IEEE 802.15.4 protocol. SNs are cheap enough to
be deployed in large quantities, therefore they usually have
very limited computational, memory and energy capabilities.
Multiple SNs are grouped to form a WSN Cluster at Tier–1
1
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-171-7
UBICOMM 2011 : The Fifth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

Figure 1.
WSN multi–tiered architecture.
in a star topology, where a Cluster Head (CH, or router) is
responsible for local management (e.g., synchronizing the
nodes in the cluster, informing nodes about current duty-
cycle, GTS slots, etc.), upstream/downstream routing and
some data aggregation. CHs may be slightly more power-
ful than ordinary sensor nodes, in terms of computational
capabilities and energy reserves. Multiple CHs are grouped
to form a WSN Patch at Tier–2, where a gateway (GW) is
present. GWs have the highest computational capabilities in
the WSN and play the role of sinks/roots for their WSN
Patch. GWs are equipped with a secondary transceiver,
which enables their access to the IP core network.
WSN Patches adopt a Cluster-Tree model, with the GW
as root and the SNs as leaves, and the synchronous beacon-
enabled version of the IEEE 802.15.4 standard, where GW
and CHs are the beacon emitter nodes. This has the advan-
tages of (i) easily support time synchronization, (ii) improve
the coordination to save energy (reduce retransmissions, put
the nodes in sleep and wake them up in a synchronous fash-
ion) and (iii) guarantee a given level of QoS, provided that
a mechanism such as the Time Division Cluster Scheduling
(TDCS) algorithm [8] is used to preserve the coordination
and avoid intra-cluster collisions. TDCS involves the deﬁni-
tion of the StartTime value (IEEE 802.15.4), such that the
active portion of a cluster is scheduled during the inactive
period of all the others, that share the same collision domain.
Once clariﬁed that intra-clusters collisions within a WSN
Patch are avoided using a time-division approach, it is worth-
while to state that a frequency-division approach is exploited
to minimize the collision probability among nodes belonging
to different WSN Patches. Similarly to [2], neighboring
WSN Patches communicate over distinct radio channels, and
channel re-use is allowed for any two patches distant enough
from each other.
Overall, these two mechanisms are the key factors to
improve the scalability of the network architecture.
III. POSITIONING SERVICE
In this section, the ESD algorithm is brieﬂy introduced as
an enhancement of the well-known Steepest Descent (SD)
method. Then, we recall the method presented in [5], used
to enhance the accuracy of RSSI-based distance estimations.
A. Gradient-based Algorithms
Both SD and ESD are gradient descent methods [9]. This
means that the position of a node is computed through the
minimization of an appropriately deﬁned error cost function.
The following notation will be used here: (i) bold symbols
denote vectors and matrices, (ii) (·)T denotes transpose
operation, (iii) ∇ (·) is the gradient operator, (iv) ∥·∥ is
the Euclidean distance and |·| the absolute value, (v) ̸
(·, ·)
is the phase angle between two vectors, (vi) (·)−1 denotes
matrix inversion, (vii) ˆuj = [ˆuj,x, ˆuj,y, ˆuj,z]T denotes the
estimated position of the mobile node {uj}NU
j=1, (viii) uj =
[uj,x, uj,y, uj,z]T is the trial solution of the positioning algo-
rithm, (ix) ¯ui = [xi, yi, zi]T is the position of the reference
node {ai}NA
i=1, and (x) ˆdj,i denotes the estimated (via ranging
measurements) distance between reference node {ai}NA
i=1 and
blind node {uj}NU
j=1.
The position of a node uj is obtained by minimizing the
error cost function F (·) deﬁned as follows:
F (uj) =
NA
X
i=1

ˆdj,i − ∥uj − ¯ui∥
2
(1)
such that ˆuj = arg min
uj
{F (uj)}. The minimization of such
a function can be done using a variety of numerical optimiza-
tion techniques, each one having its own advantages and
disadvantages in terms of accuracy, robustness, convergence
speed, complexity, and storage requirements [9].
1) Classical Steepest Descent: The classical Steepest
Descent is an iterative line search method that allows to ﬁnd
the (local) minimum of the cost function in Equation (1) at
step k + 1 as follows [9, pp. 22, sec. 2.2]:
uj (k + 1) = uj (k) + αkp (k)
(2)
where αk is a step length factor, which can be chosen as
described in [9, pp. 36, ch. 3] and p (k) = −∇F (u1 (k))
is the search direction of the algorithm.
When the optimization problem is non-linear, small values
of αk are preferred to reduce the oscillatory effect when the
algorithm approaches the solution.
2) Enhanced Steepest Descent: The SD method usually
provides a good accuracy in estimating the ﬁnal solution.
However, it may require a large number of iterations, which
may result in an unacceptably slow convergence speed.
Then, the ESD has been proposed in order to improve such
speed. The basic idea is to continuously adjust the step
length value αk as a function of the current and previous
search directions p (k) and p (k − 1), respectively:
2
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-171-7
UBICOMM 2011 : The Fifth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies








αk = αk−1 + γ
if
θk < θmin
αk = αk−1/δ
if
θk > θmax
αk = αk−1
otherwise
(3)
where θk = ̸
(p (k) , p (k − 1)), 0 < γ < 1 is a linear
increment factor, δ > 1 is a multiplicative decrement factor,
and θmin and θmax are two angular threshold values, that
control the step length update.
By using the four degrees of freedom γ, δ, θmin and θmax,
both the convergence rate and the oscillatory phenomenon
when approaching the ﬁnal solution can be simultaneously
controlled, in a simple way and without appreciably increas-
ing the complexity of the original SD algorithm.
B. Ranging Model
The ESD goal is the minimization of the error cost as
deﬁned in Equation (1). This assumes there is a way to
estimate the distances ˆdj,i between pairs of nodes uj and
ai, i = 1, . . . , NA, j = 1, . . . , NU.
Usually, for low cost platforms the Received Signal
Strength (RSS)-based ranging method is preferred, since it
doesn’t require any extra hardware. However, this technique
assumes a model to convert a RSS measurement into a
distance, as e.g.:
d = 10[ RSS−A
10n
]
(4)
where d denotes the transmitter-to-receiver distance, n is
the propagation path-loss exponent, A is the RSS reference
value, measured by a receiver located at a distance d0 = 1 m
from the transmitter, and RSS is the actual measured value.
In order to use the model, the values of the parameters
A and n must be chosen. However, they are strongly
environment-dependent, as clearly evidenced in Fig. 2,
where A and n are shown as continuously updated during a
conference event [5]. The big ﬂuctuations suggest that using
any ﬁxed and outdated estimate certainly yields less accurate
distances and, thus, ﬁnal positions.
Hence, a new RSS-based anchor1-aided ranging method
has been proposed in [5]. It foresees that every anchor
node deployed in the area performs the following tasks:
(i) transmits a packet containing its own position data;
(ii) receives similar packets from other anchors in its radio
range; (iii) extracts the position data as well as the RSS from
the received packets, (iv) computes the Euclidean distance2;
(v) after having collected enough (RSS, distance) pairs,
estimates locally A and n via a linear least-square ﬁtting
using Equation (5)3, and (vi) broadcasts these estimated
parameters to the blind node. As far as the blind node is
1An anchor node is a node, which knows, by deﬁnition, a-priori its
position, or is able to estimate it, with high accuracy.
2Remember that each anchor knows its own position, hence, this com-
putation gives a distance which is not affected by measurement errors.
3y = RSS, x = 10·log (d) and m = number of available measurements.
0 10 21 32 42 53 64 74 85 96
117
138
160
181
202
224
30
35
40
45
50
Time [minutes]
Parameter A [dBm]
0 10 21 32 42 53 64 74 85 96
117
138
160
181
202
224
1.5
2
2.5
3
3.5
4
Time [minutes]
Parameter n
Ph1
Ph2
Ph3
Ph4
Figure 2.
Estimated propagation parameters in a dynamic environment
during a half-day conference [5].
concerned, it receives the (A, n) pairs from each anchor,
computes an average and uses them into Equation (4), to
estimate the distances. Finally, it runs the ESD algorithm to
compute its own position.
IV. INTEGRATION
In order to optimize the connectivity for Cluster-Tree-
based network models, it is often assumed to control the
deplyment of the CHs and the GWs. As a consequence, it is
straightforward to assume the local coordinators (i.e., CHs
and GWs) as anchors and SNs as blind nodes.
In the light of above, we are implementing on the CHs and
the GWs the described anchor-aided ranging mechanism.
Then, the network formation procedure is as follows. At
network setup, each GW starts by emitting its beacons using
a predeﬁned IEEE 802.15.4 channel, and all other nodes
are scanning the medium, searching for such beacons. As
soon as some CHs receive GW’s beacons, they start the
association process, in accordance with the IEEE 802.15.4
protocol and acting as normal nodes. Once associated with
the parent, they start a negotiation procedure [8] to get an
appropriate StartTime value, deﬁning a window where they
can transmit their own beacons, without interfering with
other CHs. Hence, this mechanism iteratively enables all
other nodes (SNs and other CHs) to join the network, upon
a successful association phase.
On top of the TinyOS ofﬁcial 802.15.4 MAC [10] a
Cluster-Tree model has been already implemented [11] as
an extension of [12]. In this approach, the beacon payloads
sent by every CH and GW are used to carry the positioning
data (setBeaconPayload), such as the node’s ID and its
coordinates, as well as the two locally computed parameters
A and n. As a matter of fact, since beacons are needed
for networking and communication purposes, using their
3
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-171-7
UBICOMM 2011 : The Fifth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

"
A
n
#
=
1
m
m
P
i=1
x2
i −
 m
P
i=1
xi
2


m
P
i=1
yi
m
P
i=1
x2
i −
m
P
i=1
xi
m
P
i=1
xiyi
m
m
P
i=1
xiyi −
m
P
i=1
xi
m
P
i=1
yi


(5)
payload as a conveyor of data greatly helps lowering the
energy costs: the overhead, that would be generated if the
same data were sent using speciﬁc IEEE 802.15.4 Data
frames, is simply avoided.
Finally, during the channel scan phase (MLME-Scan),
every SN is able to extract (i) from the beacon header
(parsePANDescriptor) the information needed to ac-
complish the IEEE 802.15.4 association with a parent, and
(ii) from the beacon payload (getBeaconPayload) the
positioning data needed to run the ESD algorithm, which
has already demonstrated good performance in terms of
accuracy, robustness, convergence speed, complexity, and
storage requirements [13].
V. CONCLUSION
Wireless Sensor Networks are now being increasingly
used for real-time embedded applications having stringent
Quality-of-Service requirements, in terms of timeliness and
reliability. Towards this end, Zigbee/IEEE 802.15.4 and the
Cluster-Tree WSN model are considered among the most
promising candidates. Moreover, one of the key enabling
and indispensable services in WSNs is localization, since
the availability of nodes’ location may represent the fun-
damental support for various protocols (e.g., routing) and
applications (e.g., habitat monitoring).
In this paper, building from (i) our proposed Enhanced
Steepest Descent algorithm to solve positioning of nodes in
a fully distributed fashion, (ii) the mechanism to evaluate at
run-time the site-speciﬁc parameters for the correct operation
of the ESD and (iii) the recent availability of Zigbee/IEEE
802.15.4 implementation over TinyOS, we outlined how a
fully distributed positioning service can be implemented into
a communication protocol stack, based on the Cluster-Tree
WSN model. In particular, we stressed the fact that the
peculiarities of the Cluster-Tree model (i.e., the presence
of the beacons and of their scheduling to avoid intra-
clusters collisions) can be exploited to implement an efﬁcient
localization system, with a very limited protocol overhead.
REFERENCES
[1] B. Raman and K. Chebrolu, “Censor Networks: a Critique of
”Sensor Networks” From a Systems Perspective,” SIGCOMM
Comput. Commun. Rev., vol. 38, pp. 75–78, July 2008.
[Online]. Available:
[2] C.-J. M. Liang, J. Liu, L. Luo, A. Terzis, and F. Zhao,
“Racnet: a High-Fidelity Data Center Sensing Network,”
in Proceedings of the 7th ACM Conference on Embedded
Networked Sensor Systems, ser. SenSys ’09.
New York,
NY, USA: ACM, 2009, pp. 15–28.
[3] Wirelessly Accessible Sensor Populations (wasp) project.
FP6-IST-2005-2.5.3 Embedded Systems, Contract Number
IST-034963. Duration: Sep 2006 to Oct 2010. [Online].
Available: http://www.wasp-project.org/
[4] C. Wang and L. Xiao, “Sensor Localization Under Limited
Measurement Capabilities,” Network, IEEE, vol. 21, no. 3,
pp. 16 –23, may-june 2007.
[5] S. Tennina, M. Di Renzo, F. Graziosi, and F. Santucci,
“Locating Zigbee Nodes Using the TI’s CC2431 Location
Engine: a Testbed Platform and New Solutions for Positioning
Estimation of WSNs in Dynamic Indoor Environments,”
in Proceedings of the ﬁrst ACM international workshop
on Mobile entity localization and tracking in GPS-less
environments, ser. MELT ’08.
New York, NY, USA: ACM,
2008, pp. 37–42.
[6] Zigbee Speciﬁcation, ZigBee Standards Organization Std.
053 474, Rev. 17, January 2008.
[7] IEEE Standard for Information Technology
Part 15.4:
Wireless Medium Access Control (MAC) and Physical Layer
(PHY) Speciﬁcations for Low Rate Wireless Personal Area
Networks (LR-WPANs), LAN/MAN Standards Committee of
the IEEE Computer Society Std., September 2006.
[8] P. Jurcik, R. Severino, A. Koubaa, M. Alves, and E. Tovar,
“Dimensioning and Worst-Case Analysis of Cluster-Tree Sen-
sor Networks,” ACM Transactions on Sensor Networks, vol. 7,
no. 2, August 2010.
[9] J. Nocedal and S. Wright, Numerical Optimization, 2nd ed.,
Springer, Ed.
Springer, 2006.
[10] J.-H. Hauer, R. Daidone, R. Severino, J. Busch, M. Tiloca,
and S. Tennina. (2011, February) An Open-Source IEEE
802.15.4 MAC Implementation for TinyOS 2.1. Poster
Session at 8th European Conference on Wireless Sensor
Networks.
[11] S. Tennina, M. Bouroche, P. Braga, M. Alves, R. Gomes,
M. Santos, F. Mirza, A. Garg, V. Cahill, G. Carrozza,
and V. Ciriello, “EMMON: a System Architecture for
Large-Scale, Dense and Real-Time WSNs,” in Poster Session
of the 8th European Conference on Wireless Sensor Networks
(EWSN 2011), Bonn, Germany, February 2011, pp. 59–60,
(invited poster).
[12] A. Koubaa. (2010, September) TinyOS Zigbee Working
Group. [Online]. Available: http://www.hurray.isep.ipp.pt/
activities/ZigBee WG
[13] S. Tennina, M. D. Renzo, F. Graziosi, and F. Santucci,
Distributed Localization Algorithms for Wireless Sensor Net-
works: From Design Methodology to Experimental Validation.
InTech, June 2011, ch. Wireless Sensor Networks, iSBN: 978-
953-307-325-5
4
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-171-7
UBICOMM 2011 : The Fifth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

