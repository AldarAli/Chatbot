A Hypergraph Approach for Logic-based Abduction
Qiancheng Ouyang
LISN, CNRS
Universit´e Paris-Saclay
email: oyqc@lisn.fr
Tianjiao Dai
LISN, CNRS
Universit´e Paris-Saclay
email: dai@lisn.fr
Yue Ma
LISN, CNRS
Universit´e Paris-Saclay
email: yue.ma@lisn.fr
Abstract—Abduction reasoning, which finds possible hypothe-
ses from existing observations, has been studied in many different
areas. We consider an abduction problem that takes into account
a user’s interest. We propose a new approach to solving such an
abduction problem based on a hypergraph representation of an
ontology and obtain a linear algorithm for a description logic.
Index Terms—Abduction; Hypergraph; Description Logic
I. INTRODUCTION
Abduction reasoning aims to generate a possible hypothesis
for a given observation. Abduction has been applied in many
artificial intelligence (AI) areas, such as machine learning,
logical programming, and statistical relational AI [7].
We focus on logical-based abduction [4] over description
logic ontologies. Here, ontologies consist of axioms that state
the relationship of different concepts and relationships over
a specific domain. Then, our abduction problem consists of
three parts: (i) a given background knowledge (i.e., an existing
ontology O); (ii) a set of hypotheses (i.e., a set of axioms
H) and (iii) a given conclusion (i.e., a single axiom). There
have been many studies of abduction over different ontologies,
such as the complexity of abduction over EL [2] and their
application to repairing ontologies [8], abduction over EL by
translation to first-order logic [5], forgetting-based abductive
reasoning over expressive ontology ALC [3], and signature-
based abduction over more expressive ALCOIµ [6].
We propose a new solution (section IV) of abduction over
a special EL-ontology (free of role restrictions) in Section
III, based on a hypergraph representation of ontologies.
II. PRELIMINARIES
An ontology O is a set of axioms of the form A1⊓· · ·⊓An ⊑
B, where Ai, B are called concepts. An interpretation I =
⟨∆I, ·I⟩ consists of a non-empty domain ∆I and a mapping
·I that maps each concept to a subset AI ⊆ ∆I. A model of O
is an interpretation that for each A1 ⊓ · · · ⊓ An ⊑ A ∈ O, we
have AI
1 ∩· · ·∩AI
n ⊆ AI. We say O |= A′
1⊓· · ·⊓A′
n ⊑ B′ iff
for any models I of O, we have (A′
1)I ∩· · ·∩(A′
n)I ⊆ (B′)I.
A (directed) hypergraph H
=
{V, E} consists of a
node set V = {v1, v2, · · ·, vn} and a hyperedge set E =
{e1, e2 · · · , em}, where ei = ⟨T(ei), f(ei)⟩ with T(ei) ⊆ V
being a subset and f(ei) ∈ V being a node. Note that a
classical hyperedge can have multiple nodes in its head, which
we require to be a singleton for computing abduction.
Definition 1 ( [1]). Given a hypergraph H = {V, E}, assume
S ⊆ V and v∈V. A hyperpath from S to v is a sequence
h = [e1, e2, · · · , en] of hyperedges such that (i) f(en) = {v};
(ii) for i = 1, · · ·, n, T(ei) ⊆ S ∪ {f(e1); · · · , f(ei−1)}; (iii)
for i = 1, · · ·, n, f(ei)∈ S
i<j≤n T(ej).
III. ABDUCTION PROBLEM
We consider an abduction problem that takes into account
a user’s interests represented by a set of concepts Σ.
Definition 2. An abduction problem is a tuple
⟨O, Σ, A1 ⊓ · · · ⊓ An ⊑ B⟩,
where Σ = {A′, B′, · · · } is a set of concept names. A solution
of this problem is a (minimal) ontology
H = {A′
1 ⊓ · · · ⊓ A′
n ⊑ B′ | A′
i, B′ ∈ Σ, n ≥ 0}
such that O ∪H |= A1 ⊓· · ·⊓An ⊑ B. A solution H is called
a hypothesis with respect to Σ.
Example 1. Let an ontology O0 be:
peopleWithDiploma ⊑ doctor
peopleHasPaper ⊑ researcher
doctor ⊓ employeeWithUniversityChair ⊑ professor
O0 can not derive the following axiom α0:
α0 : doctor⊓employeeWithUniversityChair ⊑ researcher
although
it
should
be
true.
Consider
Σ0
=
{professor, peopleHasPaper}. If we add a hypothesis
H0
=
{professor
⊑
peopleHasPaper},
we
have
O0 ∪ H0 |= α0. Therefore, H0 is a solution of the abduction
problem A0 = ⟨O0, Σ0, α0⟩. It is clear that H0 is also a
minimal solution to the abduction problem. But there is no
solution to A0 if Σ0 = {professor, peopleWithDiploma}.
IV. A HYPERGRAPH-BASED ALGORITHM
We now present a method of finding a (minimal) solution
to the abduction problem using hypergraphs.
Definition 3. For each set O of axioms, we define a hyper-
graph HO = (Nh, Eh), where Nh := {NA′ | A′∈NC} and
Eh := {{NA′
1, · · · , NA′n}→NA′ | A′
1 ⊓ · · · ⊓ A′
n⊑A′∈O}
Example 2 (Example 1 cont’d). By definition, the hypergraph
HO0 of O0 is shown in Figure. 1. Now, we add an edge
24
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-056-8
DBKDA 2023 : The Fifteenth International Conference on Advances in Databases, Knowledge, and Data Applications

N1: peopleWithDiploma
N2: doctor
N3: peopleHasPaper
N4: researcher
N5: employeeWithUniversityChair
N6: professor
N1
N2
N6
N3
N4
N5
Fig. 1: The hypergraph representation HO0 of O0 in Example 1
{N6}→N3 to the hypergraph HO0. Then, we can find a
hyperpath h from {N2, N5} to N4:
h = [{N2, N5}→N6, {N6}→N3, {N3}→N4]
Theorem 1. Given an ontology O and its associated hyper-
graph HO, an ontology H is a (minimal) solution to the
abduction problem ⟨O, Σ, A1 ⊓ · · · ⊓ An ⊑ B⟩ iff HH is a
(minimal) hypergraph such that (i) All nodes in HH are of
the form NA, A ∈ Σ, and (ii) There exists a hyperpath from
NA1, · · · , NAn to NB in HO ∪ HH.
Example 3 (Example 1 cont’d). By Theorem 1, to solve the
abduction problem A0, it is enough to find an HH such that
there exists a hyperpath from {N2, N5} to N4 in HO0 ∪ HH.
The hypergraph HH consists of a single edge {N6}→N3
satisfying the requirement, leading to the hyperpath given in
Example 2 as the minimal solution of the problem.
Before stating our main Algorithm 2, we define a property
of saturation for a hypergraph H = (V, E) and V ⊂ V. We
define U ⊂ V to be saturated (under V ) if there exists e ∈ E
such that T(e) = U and f(e) /∈ V . For example, in Fig. 1,
if we have V = {N1, N2, N5}, then {N1} and {N2, N5} are
saturated under V , while other subsets of V are not. Algorithm
1 finds all vertices approachable from V in run-time O(|E|).
Proposition 1. For a hypergraph H = (V, E) and V ⊂ V,
v ∈ Span(V, E, V ) iff. there is a hyperpath from V to v.
Algorithm 1: Span(V, E, V )
input : hypergraph H = (V, E), set V ⊂ V
output: W ⊂ V of all vertices spanned from V
1 W = V .
2 U = {U, U is saturated under V }.
3 while U ̸= ∅ do
4
choose U ∈ U,
5
while there exists v ∈ V \ W such that (W, v) ∈ E
do
6
put v into W;
7
put all saturated sets containing v into U.
8
end
9
remove U.
10 end
11 return W
In Algorithm 2, we first check if v can be directly reached
by V (Line 1-3). Then, we check if the aiming hypergraph
exists (Line 4-11). These 2 steps have run-time O(|E|). In the
minimizing step, for each e ∈ E′, we check only once if e can
be deleted. Hence, the total run-time is O(|Σ||E|).
Algorithm 2:
input : hypergraph H = (V, E), Σ ⊂ V, S ⊂ V, v ∈ V
output: hypergraph H on Σ
1 V = Span(V, E, S).
2 if v ∈ V then
3
return empty graph.
4 else
5
if Σ ⊂ V or Σ ∪ V = ∅ return non-existence.
6
Σ \ V = {v1, . . . , vm},
7
choose m hyper-edges E′ = {e1, . . . , em} where
T(ei) ⊂ Σ ∩ V and f(ei) = vi for 1 ≤ i ≤ m.
8
V = V ∪ Σ.
9 end
10 if v /∈ Span(V, E ∪ E′, V ) then
11
return non-existence.
12 else
13
minimize E′ (check if there exists e ∈ E′ such that
E′ − e satisfies until we get a minimal size).
14
return H = (Σ, E′).
15 end
We explain Algorithm 2 via the following example.
Solution of Example 3. (via Algorithm 2)
1) H = HO, Σ = {N3, N6}, S = {N2, N5}, v = N4.
2) Line 1: V = Span(V, E, S) = {N2, N5, N6}.
3) Line 7: E′ = {{N6} → N3}.
4) Line 10: v ∈ Span(V, E ∪ E′, V = V).
5) Line 13: we see {{N6} → N3} cannot be deleted. It
returns H = (Σ, E′).
Theorem 2. For Algorithm 2, the output H is a minimal
hypergraph satisfying the conditions (i) and (ii) in Theorem 1.
V. CONCLUSION
In this work, we introduce a hypergraph-based algorithm for
solving abduction problems over EL-ontologies that do not
have role restrictions, which have a linear time complexity
w.r.t. the size of the input ontology. As for future work,
we plan to implement our algorithm and extend it to handle
general EL-ontologies with role restrictions, as well as more
expressive ontologies such as ALC.
Acknowledgment. We thank Hui Yang for bringing our
attention to the topic and the discussion with us.
REFERENCES
[1] A. Giorgio and L. Luigi, “Directed hypergraphs: Introduction and
fundamental algorithms-a survey”, Theoretical Computer Science, vol.
658, pp. 293–306, 2017.
[2] M. Bienvenu, “Complexity of abduction in the EL family of lightweight
description logics”, Proc. of KR’08, 2008, pp. 220–230.
[3] W. Del-Pinto and R. A. Schmidt, “Abox abduction via forgetting in
ALC”, Proc. of AAAI’19, 2019, pp. 2768–2775.
[4] T. Eiter and G. Gottlob, “The complexity of logic-based abduction”, J.
ACM, vol. 42 (1), 1995, pp. 3–42.
[5] F. Haifani, P. Koopmann, S. Tourret, and C. Weidenbach, “Connection-
minimal abduction in EL via translation to FOL”, Proc. of IJCAR’22,
2022, pp. 188–207.
25
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-056-8
DBKDA 2023 : The Fifteenth International Conference on Advances in Databases, Knowledge, and Data Applications

[6] P. Koopmann, W. Del-Pinto, S. Tourret, and R. A. Schmidt “Signature-
based abduction for expressive description logics”, Proc. of KR’20,
2020, pp. 592–602.
[7] Sindhu V. Raghavan, “Bayesian Abductive Logic Programs: A Proba-
bilistic Logic for Abductive Reasoning”, Statistical Relational Artificial
Intelligence, Proc. of IJCAI’11, 2011, pp. 2840–2841.
[8] F. Wei-Kleiner, Z. Dragisic, and P. Lambrix, “Abduction framework for
repairing incomplete EL ontologies: Complexity results and algorithms”,
Proc. of AAAI’14, 2014, pp. 1120–1127.
26
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-056-8
DBKDA 2023 : The Fifteenth International Conference on Advances in Databases, Knowledge, and Data Applications

