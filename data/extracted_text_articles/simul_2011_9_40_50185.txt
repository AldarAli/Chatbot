Towards a SDL-DEVS Simulator 
Multiparadigm simulation 
 
Pau Fonseca i Casas 
Statistics and Operations Research Department 
Universitat Politècnica de Catalunya 
Barcelona, Catalunya, Spain 
pau@fib.upc.edu 
Josep Casanovas 
Statistics and Operations Research Department 
Universitat Politècnica de Catalunya 
Barcelona, Catalunya, Spain 
josepk@fib.upc.edu
 
 
Abstract— In this paper, we present the first version of a 
simulator that allows executing models defined using Discrete 
Event System Specification and models defined using 
Specification and Description Language. Specification and 
Description Language (SDL) is a graphical language, 
standardized under the ITU Z.100 recommendation, widely 
used to represent telecommunication systems, process control 
and real-time applications in general. Discrete Event System 
Specification (DEVS) is a formalism widely used on the 
simulation field to represent Discrete Event Systems. The 
execution of the DEVS models is based on a transformation of 
the simulation model DEVS representation to an equivalent 
SDL representation. To do this, we propose a XML 
representation 
for 
the 
DEVS 
models, 
and 
a 
XML 
representation for SDL models. Also, we implement an 
algorithm capable to perform this transformation. 
Keywords-simulation; formal language; SDL; DEVS 
 
 
I. 
INTRODUCTION 
The purpose of the paper is to present a simulator 
capable to understand and use SDL, or DEVS language, in a 
single simulation model. Several simulators capable to 
understand DEVS language exist, like DEVS++ [1], CD++ 
[2] or Galatea [3] among others; also, several tools work 
with SDL, like Cinderella [4] or IBM’s Tau Telelogic [5]. 
However, currently, there is no simulator capable to work 
with both languages. This capability improves the 
reusability of models and the combination of technologies in 
a single framework. The underline idea is to enable the use 
of several models in a bigger and detailed model composed 
by those models. Also, those models can be defined using 
different formal languages. In this paper, not only a 
simulator able to understand both languages is presented, 
but also a method that enables the translation from DEVS 
models to SDL, based on a proposed XML representation of 
DEVS models. 
This paper is organized as follows: first, we review both 
languages. Next, we present how we can describe both 
languages using XML, proposing a new representation for 
atomic DEVS models. From this representation and thanks 
to an algorithm that allows the transformation from DEVS 
to SDL, we present a mechanism that allows performing this 
transformation automatically. Lastly, we present a system 
that is capable of perform a simulation using DEVS or SDL 
models. 
II. 
SPECIFICATION AND DESCRIPTION LANGUAGE 
Specification and Description Language (SDL) is an 
object-oriented, 
formal 
language 
defined 
by 
the 
International 
Telecommunication 
Union 
– 
Telecommunication Standardization Sector (ITU–T). The 
recommendation that summarizes its use is Z.100.  The 
language is designed to specify complex, event-driven, real-
time, interactive applications involving many concurrent 
activities using discrete signals to enable communication 
[6]. The definition of the model is based on different 
components: 
 
 
Structure: 
system, 
blocks, 
processes 
and 
processes hierarchy. 
 
Communication: signals, with the parameters 
and channels that the signals use to travel. 
 
Behavior: 
defined 
through 
the 
different 
processes and procedures. 
 
Data: based on Abstract Data Types (ADT). 
 
Inheritances: to describe the relationships 
between, and specialization of, the model 
elements. 
 
The language has 4 levels (Figure 1): 
1. System. 
2. Blocks. 
3. Processes 
4. Procedures. 
 
To know more about the Specification and Description 
Language, [6][7][8] can be consulted. 
 
188
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

 
Figure 1. The figure shows the first level of an SDL model. Here, a 
system named “My_system” is shown. It is composed by a single block 
“My_block”, who receives a signal named “signal” from the environment 
through the channel named “channel”. 
 
III. 
SDL REPRESENTATIONS 
SDL have two ways to be represented, SDL PR and SDL 
GR. SDL-PR is conceived to be easily processed by 
computers, also allows a compact representation of a model. 
SDL-GR has some textual elements which are identical to 
SDL-PR (this is to allow specification of data and signals) 
but it is mainly graphical.  
Figure 2 shows an example of a textual and graphical 
representation of an SDL process.  We are not using the 
textual version of SDL only for one reason. Some different 
textual representations of DEVS based on XML format 
exist. Since we want to allow an automatic transformation 
from SDL to DEVS, the use of XML simplifies our 
programming code because now is easy to read and write 
structured text files that follow the XML syntax, and also, 
thanks to the XSD we can validate the correctness of its 
syntax. We are using the XML representation for SDL 
proposed in [9]. Since the more important aspects of an 
XML file can be represented, and validated, through an 
XSD file, in the next section some areas of the XSD file are 
shown. 
 
 
process P; 
  start; 
  nextstate idle; 
  state idle; 
    input s; 
      output t; 
      nextstate idle; 
  endstate idle; 
endprocess P; 
 
Figure 2. Textual and graphical SDL representation. 
 
A. XML representation of an SDL simulation model 
This representation was first presented on [10], no 
modifications have been done from this schema. We next 
describe the more important elements. For further details, 
please see [10], or download the complete schema from 
[11]. 
In Figure 3, we show the first level of the XSD schema 
we use to validate the structure of our XML. The first level 
of this schema represents the first level of the Specification 
and Description Language (system outmost block). Figure 4 
shows the process type that allows represent an SDL 
process. 
 
 
 
Figure 3. XSD schema, system view 
 
 
Figure 4. XSD schema, process view 
 
IV. 
DEVS FORMALISM 
Proposed by Bernard Zeigler in the 70’s [12], the main 
scope of Discrete Event System Specification (DEVS) is the 
idle
t
s
idle
idle
1(1)
process
P
189
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

representation of simulation models. A DEVS model is a 
tuple composed by the elements defined as follows: 
 
                              
                     
                     
                      
                                           
                                                 
  {(   )|          ( )}              
                               
                     
                        
       
 
 
 
DEVS distinguishes between an internal and external 
transition. An internal transition is a kind of transition that 
doesn’t need any external event to be launched. As an 
example, if in a “t” time, the system reach the state “s”, the 
system remains in this state the during the time defined on a 
“time advance” function “ta(s)” (if no external event is 
received). When the time reach the value defined in the 
“ta(s)” function an output event is produced (this output is 
defined on the “λ(s)” function) and the state changes to “s’ ”. 
This process is defined in the internal transition s’= δint(s). 
External transitions define the modifications in the model 
due to the reception of external events.  For example, before 
the model reach the state “s’ ”, in a time “t”, due to his 
internal transition, an external event, with value x, is 
processed. In this case the system reach state (s,e) where 
e<ta(s), the transition follows the external transition function, 
defined by s’= δext(s,e,x), and no exit event is produced. 
At this point, it is important to underline that “ta(s)” 
could be any real number, plus 0 and ∞, and: 
• 
If ta(s) is 0, “s” is a transitory state. 
• 
If ta(s)=∞, “s” is a passive state. 
In the next lines, we review two examples from [12]. We 
use these two models to transform them automatically to a 
SDL specification and then execute the models using SDLPS 
[9]. 
A. Processor example 
This example represents a single processor that receives 
different jobs. Each job has associated a processing time 
(represented by a real number). Once the time is over event 
“ready” is produced. When a new event reach the processor, 
if this is working with a job, this event is ignored. The DEVS 
formalization of this model is: 
 
                              
  {                  }
  {                  }        
  { (    )  (    )     (    )}
    (     )  (   )
    (         )  { (    ( )        
(       )          
 (     )   (   )
  (     )   
 
 
B. FIFO Queue example 
The queue represented in this example has the following 
characteristics: 
 
The queue has infinite capacity. 
 
Different jobs reach the queue to be stored, 
while the “ready” signals symbolize the 
necessity of transmit the first job of the queue. 
 
The transmission of this job is done through an 
output event. 
 
The queue spends 0 time units in the exit delay. 
 
The DEVS model is: 
 
                              
  {                  }  {       }
  {                  }        
  { (    )  (    )     (    )}
    (       )  (   )
    (         )  {(     )      
(   )          
 (       )     
  (     )   
 
 
V. 
DEVS COUPLED MODELS 
DEVS also allows formalizing simulation models 
without describing the behavior for each element belonging 
the model. It is possible to describe the structural relations 
that exist among identical elements. These models are named 
“coupled models”. In DEVS there are two main types of 
coupled models: 
 
Modular coupling. 
 
Non modular coupling. 
In modular coupling integration among different model 
components happens only across entries and exits defined in 
the components, while in non-modular coupling, interaction 
is produced across states. The literature established that is 
possible to pass from one kind of coupling model to the other 
[5], therefore in present paper we will focus on show the 
existing relation among SDL formalism and the DEVS 
modular formalism.  
For simplicity, the DEVS coupled model used in this 
paper is DEVS coupled model with ports. In this model a 
series of input and output ports are described. With this logic 
is possible to depict the following example, see Figure 5, 
190
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

representing the combination of the two models that have 
been defined previously (the queue and the processor).  
 
 
Figure 5. DEVS coupled model. 
  
The coupling model specification for this model is: 
 
N = (X, Y, D, {Md | d Î D}, EIC, EOC, IC, Select), on 
X=Jx{inport1} 
Y={y(Job) | Job ϵ J } x { outport1} 
D={P,Q} 
EIC{(N, inport1), (Q, inport1)} 
EOC{(P,outport1), (N, outport1)} 
IC{(P, outport2), (Q, outport2)} 
 
VI. 
XML REPRESENTATION OF DEVS MODELS 
Some attempts have been made to represent DEVS 
models using XML. As an example, in [13], a schema is 
presented that cannot characterize the programming logic, 
loops and if-then-else constructs. Our approach is going 
further and allows the representation of those elements. We 
propose to use ANSI C (since it is an ISO standard) to 
represent the code contained in model. Also this simplifies 
the representation of the model on SDL, using a variant 
named SDL-RT who uses ANSI C too. In our point of view 
the DEVS-XML representation that we present here can be 
considered as a good starting point for a robust and complete 
representation of DEVS models using XML. 
We follow some conventions to represent a DEVS model 
using XML syntax: 
 
All the code needed to fully define the 
simulation model is defined on the “values” xml 
section. 
 
The initial conditions of the model is defined in 
the XML as well, using a ”value” attribute 
related to all the variables that defines the state 
of an atomic DEVS model.  
 
Also, to represent the value ∞ used in the 
passive states we use ‘inf’ literal value. 
 
Some parts of the XML schema used to represent 
coupled and an atomic models is shown in Figure 6. 
 
 
Figure 6. DEVS XML schema. 
 
The complete definition of the DEVSmodel using XML is 
show next. In Figure 7 is represented the whole DEVS model 
using XML. In Figure 8 the definition of the states is shown. 
Figure 9 shows the definition of the input and the output 
elements. Figure 10 represents the external functions and in 
Figure 11 the time advance and output functions. 
 
 
Figure 7. GG1 DEVS model. 
 
191
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

 
Figure 8. States definition. 
 
 
Figure 9. Input and output elements. 
 
 
Figure 10. External an internal functions. 
 
 
Figure 11. Time advance and output functions. 
 
From this DEVS-XML representation, we can obtain an 
equivalent model described using Specification and 
Description Language, using again XML (SDL-XML). 
 
VII. TRANSFORMING FROM DEVS TO SDL 
The transformation algorithm is based on the theoretical 
proposal presented in [14]. In this infrastructure, we 
implement this proposal using the XML representation for 
the SDL and DEVS model (DEVS-XML and SDL-XML). 
This allows us to obtain a new XML file that represents a 
DEVS model. The schema used here to represent the SDL 
model is based on those presented on [10] we only show here 
the more important aspects of the resulting XML file that 
represents 
the 
new 
proposal 
for 
the 
DEVS-XML 
representation. 
 
 
Figure 12. XML representation of the SDL model. 
 
192
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

In Figure 12, we can see the whole representation of the 
DEVS-XML model, now transformed to a SDL-XML 
representation. We can see, as we can expect, that the model 
contains two processes, the queue and the procesor1. 
 
 
Figure 13. Process queue definition. 
 
In Figure 13 the XML representation using SDL for the 
DEVS queue element is shown. 
VIII. SIMULATING THE DEVS MODEL ON SDLPS 
Regarding the infrastructure used, it is remarkable that 
SDLPS has been build using C++ and C languages. The code 
related to the model is represented using a DLL, and the 
generation of the SDL-XML model is done through a plug-in 
on Microsoft Visio®.  
 
 
Figure 14. SDLPS system loading the DEVS model. 
 
In Figure 14, we can see the DEVS GG1 model on 
SDLPS. Note that it is not represented the DEVS model 
because the Microsoft Visio® plug-in we develop allows the 
generation of the SDL-XML from a SDL Microsoft Visio® 
diagram, but the inverse is not yet implemented (we cannot 
regenerate the diagram form a SDL-XML representation. 
On the left side, we can see the tree that contains all the 
elements that defines the model. 
IX. 
DISCUSSION 
Several formal languages exists that can be used to 
represent a simulation model, like SDL, DEVS, PetriNets 
[15], or SysML among others. The use of this kind of 
languages in a simulation project is very desirable, because 
clearly differentiates the model form the implementation that 
finally represents the model. Also helps in the understanding 
of the model and helps in the Validation and Verification 
process. However, only few simulators allow working with 
different formal languages in the same environment. 
In this paper, we presented a XML representation for 
atomic and coupled DEVS models with the main goal to 
serve as a starting point to achieve a complete representation 
of a DEVS model. This allows the construction of tools that 
works with DEVS. Also we shown that thanks this 
representation we can implement a transformation algorithm 
between DEVS and SDL, allowing that in a single model we 
can use both formalisms. This simplifies the reuse of 
simulation models, and the collaboration between different 
groups that can use the formal language they prefer to define 
the models. The first issue that is needed to be fixed is that 
only few of them have been standardized, this often implies 
that the XML representation of the models needs to assure 
the inclusion of new features to the language. Also the 
textual representation of these models, needed in order to be 
used in a computer simulator, sometimes does not exists.  
Also, we presented an infrastructure that allows the 
simulation of DEVS and SDL models. This combination of 
both languages can be done thanks the XML representation 
used for DEVS and SDL models. In this infrastructure we 
show that the final user can define the models using common 
simulation tools, like Microsoft Visio®, and thanks a plug-in 
the XML representation can be obtained. 
Now, this infrastructure is currently used in a production 
environment in real simulation projects for different well 
known industries. Those projects help us in the Verification 
of the tool and in the development of some missing plug-ins 
for some of the more common used computer programs in 
the industry. 
 
ACKNOWLEDGMENT 
Many thanks, for his support in the development of this 
project, to the Computing Laboratory of the Barcelona 
Informatics School. 
 
 
 
 
 
193
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

REFERENCES 
[1] 
M. Ho Hwang. (2009, April) DEVS++: C++ Open Source 
Library 
of 
DEVS 
Formalism. 
Document. 
[Online]. 
http://odevspp.sourceforge.net <retrieved: 10, 2011>  
[2] 
G. Wainer, "CD++: a toolkit to develop DEVS models," 
Software, Practice and Experience, vol. 32, no. 3, November 
2002, pp. 1261-1306. 
[3] 
J. Dávila, E. Gómez, K. Laffaille, K. Tucci, and M. Uzcátegui, 
"MultiAgent Distributed Simulation with GALATEA," in 
Procediings of the 9-th IEEE International Symposium on 
Distributed Simulation and Real Time Applications, Montreal, 
2005, pp. 165-170. 
[4] 
CINDERELLA 
SOFTWARE. 
(2007) 
Cinderella 
SDL. 
[Online]. http://www.cinderella.dk <retrieved: 10, 2011> 
[5] 
IBM. (2009) TELELOGIC. [Online]. http://www.telelogic.com/ 
<retrieved: 10, 2011> 
[6] 
Telecommunication standardization sector of ITU. (1999) 
Series Z: Languages and general software aspects for 
telecommunication systems. [Online]. http://www.itu.int/ITU-
T/studygroups/com17/languages/Z100.pdf 
<retrieved: 
10, 
2011> 
[7] 
L. Doldi, Validation of Communications Systems with SDL: 
The Art of SDL Simulation and Reachability Analysis.: John 
Wiley & Sons, Inc., 2003. 
[8] 
R. Reed, "SDL-2000 form New Millenium Systems," 
Telektronikk 4.2000, pp. 20-35. 
[9] 
P. Fonseca i Casas, "SDL distributed simulator," in Winter 
Simulation Conference 2008, Miami, 2008, pp. 2943-2943 
http://wintersim.org/abstracts08/POS.htm#fonsecaicasasp84590
. <retrieved: 10, 2011> 
[10] 
P. Fonseca i Casas, "Towards an automatic transformation from 
a DEVS to a SDL specification," in Procediings of the 2009 
Summer Simulation Multiconference, Istanbul, Turkey, 2009, 
pp. 348-353. 
[11] 
P. Fonseca i Casas. (2011) Pau Fonseca i Casas. [Online]. 
http://www-eio.upc.es/~pau/index.php?q=node/30 
<retrieved: 
10, 2011> 
[12] 
B.P. Zeigler, H. Praehofer, and D. Kim, Theory of Modeling 
and Simulation.: Academic Press, 2000. 
[13] 
J.L. Risco-Martín, S. Mittal, M.A. López-Peña, and J.M. De la 
Cruz, "A W3C XML Schema for DEVS Scenarios," in Spring 
Simulation Multiconference 2007, vol. DEVS Symposium, 
Norfork, Virginia, 2007, pp. 279-286. 
[14] 
P. Fonseca i Casas and Josep Casanovas Garcia, "Using SDL 
diagrams in a DEVS specification," in The Fifth IASTED 
International 
conference 
on 
Modeling 
Simulation 
and 
Optimization, 2005, pp. 67-72. 
[15] 
L Recalde, E Teruel, and E Silva, "Autonomous continuous P/T 
systems. Application and Theory of Petri Nets," Lecture Notes 
in Computer Science, 1999, pp. 107-126. 
 
 
194
Copyright (c) IARIA, 2011.     ISBN:  978-1-61208-169-4
SIMUL 2011 : The Third International Conference on Advances in System Simulation

