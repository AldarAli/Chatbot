On Delay-Aware Embedding of Virtual Networks
Michael Till Beck, Claudia Linnhoff-Popien
Ludwig Maximilian University of Munich
{michael.beck,linnhoff}@iﬁ.lmu.de
Abstract—Network Virtualization is seen as a key technology
for the Future Internet. In fact, today, Network Virtualization
is actively used by telecommunication providers. One of the key
challenges in this context is the embedding of virtual networks
into the substrate network topology: Virtual Network Embedding
algorithms aim to assign substrate nodes and substrate paths to
virtual nodes and links in an optimal way. Several embedding
algorithms have been proposed in literature, pursuing various
optimization goals. Most of them strive to increase cost-efﬁciency
of the embedding. This paper discusses communication delay in
the context of the Virtual Network Embedding problem. While
embedding cost has already been extensively discussed, queueing
delay has only sparsely been analyzed in this context. This paper
introduces a delay model that is based on queueing theory
and considers demands of virtual network requests. Based on
this model, optimization objectives for delay-aware embedding
algorithms are presented. Furthermore, delay related evaluation
metrics are introduced for analyzing the effectiveness of delay-
aware virtual network embedding approaches.
Index Terms—Virtual Network Embedding, Delay
I. INTRODUCTION
Network Virtualization is a promising approach to overcome
the ossiﬁcation of the current Internet infrastructure. Core
protocols of the Internet infrastructure are perceived as being
difﬁcult to change. This is widely known as the ”IP-waist”.
Network Virtualization enables infrastructure providers to sep-
arate network capacities into several isolated networks, each
capable of running its own communication protocols. First,
Network Virtualization has been actively used in the context
of Internet testbeds like G-Lab [1] and 4WARD [2]. Today,
Network Virtualization is seen as one of the most promis-
ing technologies to overcome the resistance of the Internet
infrastructure towards novel core protocols. In fact, Network
Virtualization is actively used by today’s telecommunication
providers as a tool to enhance the ﬂexibility of their network
infrastructures.
In Network Virtualiation, several virtual networks are de-
ployed on top of a substrate network topology [3]. From an
abstract point of view, substrate networks are a collection of
network nodes (representing, e.g., physical servers), connected
by network links (representing physical communication links,
e.g., Ethernet cables). Similarly, virtual networks consist of
virtual nodes and virtual links, both demanding network re-
sources (like CPU and bandwidth capacities) provided by the
substrate network.
This leads to the Virtual Network Embedding problem:
The objective of an embedding algorithm is to embed virtual
networks on top of a shared substrate network in an optimal
(or near-optimal) way.
Several Virtual Network Embedding approaches have been
discussed in literature so far. Many aim to reduce embedding
cost, i.e., the amount of substrate network resources that are
needed in order to embed the virtual networks. By keeping
embedding cost low, the infrastructure provider is able to al-
locate additional virtual network requests. Besides embedding
cost, another key objective in the context of telecommunication
networks is to keep network delay low. Despite of the fact
that several embedding approaches have been presented in
literature so far, delay is only sparsely discussed in this
context.
Therefore, this paper presents a delay model for future
virtual network embedding approaches that considers the
dynamic components of communication delay. The model
is based on queueing theory and takes into account both
transmission delay and queuing delay. Furthermore, delay-
aware optimization objectives are discussed in this context.
As discussed in this paper, embedding virtual networks in a
delay-sensitive way comes with additional embedding cost. On
the one hand, infrastructure providers usually aim to assign
network resources in a cost-efﬁcient way in order to increase
the amount of resources that are available for future virtual
network requests. On the other hand, a delay aware embedding
tends to consume additional network resources. Thus, there is
a tradeoff between delay-awareness and cost-efﬁciency. This
paper motivates why both aspects should be taken into account
when embedding virtual networks. Finally, evaluation metrics
are discussed for measuring the effectiveness of embedding
results.
II. BACKGROUND AND RELATED WORK
This section shortly motivates the virtual network embed-
ding problem and presents the network model used in this
work. Furthermore, related work is discussed.
A. The Virtual Network Embedding Problem
Figure 1 depicts the virtual network embedding problem.
Several virtual network requests (VNR) have to be assigned
to a shared substrate network. Substrate resources are limited:
E.g., substrate nodes provide CPU resources and substrate
links offer bandwidth resources that can be assigned to VNRs.
Virtual networks demand those resources. Virtual nodes de-
mand CPU resources and virtual links demand bandwidth
55
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-377-3
AFIN 2014 : The Sixth International Conference on Advances in Future Internet

Bandwidth capacity: 1GBit/s
Bandwidth demand: 50MBit/s
VNR 1
VNR 2
Fig. 1.
The Virtual Network Embedding Problem
resources. For the embedding, virtual nodes and links have to
be assigned to substrate resources offering sufﬁcient resources.
While a virtual node is assigned to just one single substrate
node, a virtual link can be embedded to multiple substrate
links, i.e., to a substrate path. The embedding algorithm has
to ensure that each segment of that substrate path provides
sufﬁcient bandwidth resources.
The problem of optimally embedding virtual networks to the
substrate network is NP-hard. Therefore, to reduce computa-
tional complexity, several heuristical embedding approaches
have been introduced, aiming to solve the embedding in a
nearly-optimal way [3].
B. Network Model
This subsection shortly describes the network model used
in this work. It is based on the one presented in [3].
Both the substrate network and virtual networks are mod-
eled as network graphs: A substrate network SN is represented
by a set of substrate nodes N connected by substrate links L.
A substrate node n ∈ N provides CPU resources rescpu(n);
a substrate link l ∈ L offers bandwidth resources resbw(l).
Similarly, the i-th virtual network request VNRi is a set of
virtual nodes N i and links Li. CPU demand of a virtual node
ni ∈ N i is modeled as demcpu(ni), and bandwidth demand
of a virtual link li ∈ Li is modeled as dembw(li). The virtual
network embedding problem is composed of the node mapping
problem and the link mapping problem. The node mapping
step is described as a function mnode : N i → N, and the link
mapping step as a function mlink : Li → L′ ⊆ L. For a more
readable representation, we will refer to Rtotal(l) as being the
total bandwidth of a substrate link l; Roccupied(l) represents
the amount of bandwidth resources that are allocated to virtual
links assigned to a substrate link l, and Ravailable(l) refers
to available bandwidth resources of that link that were not
allocated so far.
C. Related Work
Many embedding approaches have been discussed in litera-
ture so far [4]. Most of them aim to reduce embedding cost in
order to increase the number of networks that can be embedded
onto the substrate topology. Besides cost-efﬁcient algorithms,
several other embedding approaches aiming for other opti-
mization objectives have been proposed, focussing on energy
efﬁciency [5], workload distribution [4], [6], resilience, etc. An
extensive survey on virtual network embedding parameters and
optimization objectives is given in [3].
However, only few related work on delay-aware virtual
network embedding is available so far. To the best of our
knowledge, there are only two publications in that direction:
Karthikeswar et al. introduce an embedding algorithm that
considers the tradeoff between end-to-end delay and substrate
utilization [7]. The problem is formulated as a mixed integer
programming formulation and is based on a static delay model.
It is assumed that communication delay is a static property of
the communication links and does not depend on the utilization
of the link.
Liao et al present a multi-agent approach to solve the virtual
network embedding problem by considering link delay [8].
This approach aims to minimize bandwidth cost while keep-
ing delay constraints of communication paths within deﬁned
limits. The approach considers a linear delay model.
In contrast to related work, this paper introduces, based
on queueing theory, a non-linear delay model. Based on this
model, delay-aware optimization objectives are formulated and
several evaluation metrics are discussed.
III. DELAY-AWARE VIRTUAL NETWORK EMBEDDING
In this section, delay-awareness is discussed in the context
of the virtual network embedding problem. To this end, a delay
model for substrate links is presented. Delay is modeled as a
function that heavily depends on the utilization of network
links. Based on this model, optimization objectives are intro-
duced that aim to reduce network delay by avoiding highly
utilized communication paths.
First, the delay model is introduced. Then, optimization
objectives for future virtual network embedding algorithms are
formulated. Finally, evaluation metrics are presented for mea-
suring the effectiveness of delay-aware embedding approaches.
56
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-377-3
AFIN 2014 : The Sixth International Conference on Advances in Future Internet

0
10
20
30
40
50
60
70
80
90
100
0
0.2
0.4
0.6
0.8
1
Queued Packets
Traﬃc Intensity
Fig. 2.
The average number of queued packets rises if trafﬁc intensity
increases
A. Utilization-Aware Delay Model
In the following, various types of communication delay are
being discussed; then, a model is derived that is applicable in
the context of the virtual network embedding problem.
In telecommunication networks, there are four types of
delay inﬂuencing network speed [9]:
• Processing Delay dproc
Refers to the time needed for processing a packet, e.g.,
extracting header information, examining how a packet
has to be routed and checking whether bit-level errors
occurred during transmission. Processing delay is usually
in the bounds of nanoseconds and does not depend on the
utilization of the routers (unlike queueing delay).
• Transmission Delay dtrans
Time needed in order to transmit a packet of length L
from router A to router B. Depends on the transmission
rate R of the link. Transmission delay refers to the time
that is needed to transmit all bits of a packet from A to
B, thus, transmission delay is L/R.
• Propagation Delay dprop
Time needed to propagate a bit through the communi-
cation link. Propagation speed depends on the physical
medium and is, in general, nearly equal to the speed of
light.
• Queuing Delay dqueue
The time a packet remains in the router’s queue before it
can be processed. Queuing delay of a packet depends on
the number of other packets that arrived before. Queuing
delay can vary signiﬁcantly: If the queue is empty,
the router will handle the arriving packet immediately,
i.e., queuing delay is zero; if, however, many packets
are waiting for transmission, queuing delay contributes
heavily to the total end-to-end delay. While previous work
focuses on static delay models, this paper also considers
the utilization of routers in the embedding process. To
this end, transmission delay is considered for the as a
non-linear function.
In the following, a delay model that is applicable in the
A
C
60MBit/s
60MBit/s
B
60MBit/s
40MBit/s
VNR 1
20 MBit/s
VNR 2
Fig. 3.
Delay-Aware Virtual Network Embedding
virtual network embedding domain is discussed. As mentioned
before, transmission delay depends on bandwidth resources of
the substrate network. Furthermore, queuing delay depends
heavily on the utilization of the network link. The delay
model presented here is based on a well-known utilization-
aware queuing delay model: The model considers that queuing
delay increases signiﬁcantly when trafﬁc intensity i of a
communication link l increases. As shown in Figure 2, the
number of packets that have to be queued increases non-
linearly.
Figure 3 motivates delay-awareness for the virtual network
embedding problem: In this scenario, two virtual networks
are being embedded. It is assumed that, in this scenario, only
substrate nodes A and B offer sufﬁcient resources for hosting
the virtual nodes. If the virtual link of VNR 1 is assigned
to the substrate link between A and B, utilization increases
and, as such, also does queuing delay. Still, this link offers
sufﬁcient bandwidth resources to the virtual link of VNR2.
In fact, current virtual network embedding approaches that
do not consider delay as part of their optimization strategy,
tend to embed also the second virtual link to this substrate
link. However, as utilization is, in this case, 100%, this
would signiﬁcantly increase delay if trafﬁc intensity in virtual
networks increases.
Trafﬁc intensity is usually deﬁned as follows:
i = La
R
with packet length L, arrival rate a and bandwidth R.
Consistent with several other work presented in this area of
research, it is assumed that a ﬁxed amount of bandwidth
resources is assigned to virtual links. Thus, trafﬁc intensity
is calculated as
i(l) = Roccupied(l)
Rtotal(l)
with Rtotal denoting bandwidth resources of a link l and
Roccupied bandwidth resources that are allocated to virtual
links.
The average number of packets waiting for transmission is
calculated based on queuing theory; a substrate link is modeled
57
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-377-3
AFIN 2014 : The Sixth International Conference on Advances in Future Internet

as a M/M/1 queuing system; then, the average number of
packets waiting in the link’s queue is calculated as follows
(graph shown in Figure 2) [10]:
p(l) =
i(l)
1 − i(l)
Considering that queue size qs in real systems is limited,
queuing delay is then deﬁned as
dqueue(l) = min

Performance of embedding algorithms is usually evaluated
through extensive simulations in randomly generated network
topologies. Embedding cost signiﬁcantly depends on the kind
of virtual networks that are being embedded: Randomly gener-
ated network requests demanding few network resources tend
to be much easier to embed than those demanding many.
Therefore, the revenue metric is used in order to quantify
virtual network requests. Similar to cost, revenue is computed
as follows for a virtual network request VNRi:
Revenue(VNRi) =
X
ni∈N i
demcpu(ni) +
X
li∈li
dembw(li)
Thus, to put cost in relation to network requests, the revenue/-
cost metric is introduced:
Revenue-Cost(VNRi) = Revenue(VNRi)
Cost(VNRi)
Path Length: The path length metric reﬂects how many
substrate links were (on average/maximum) assigned to the
virtual links. Despite of the fact that communication delay of
a substrate path is the sum of the delay on each substrate link
segment of that path, long path lengths do not necessarily
reﬂect large delays. As an example, in the scenario depicted
in Figure 4, a delay-aware embedding algorithm would chose
a longer, but less delay-intense path.
Link Delay: Link delay is deﬁned as the average/maximum
delay of all substrate links. This metric is of interest to the
infrastructure provider, as it reﬂect the average/maximum
utilization of the substrate network. High link delay indicates
that either the infrastructure is not optimally used (e.g., as a
result of several non-optimal embeddings of virtual networks)
or additional hardware components should be integrated
into the substrate network in order to improve network
performance and to keep up with increasing virtual network
demands. Link delay is therefore also a good indicator for
estimating whether sufﬁcient substrate resources are available
in order to embed further virtual network requests.
Trafﬁc Intensity:
Trafﬁc intensity reﬂects how many
packets (on average/maximum) are being queued by the
substrate nodes. Similarly to the link delay metric, trafﬁc
intensity indicates which parts of the substrate network suffer
from high load and, thus, need to be reconﬁgured.
Path Delay: Path delay is deﬁned as the sum of the delay of
all substrate links that are part of a communication path. I.e.,
average/maximum path delay is the average/maximum delay
of all paths that were assigned to virtual links. This metric is
a key indicator to the virtual network operator, as it reﬂects
how well the virtual network has been embedded into the
substrate network and how the network performs with respect
to communication delay.
Concluding, embedding cost, path length, link delay, and
trafﬁc intensity are metrics that are related to the performance
of the substrate network. Path delay is a key metric indicating
how well a virtual network performs after it has been embed-
ded into the substrate infrastructure.
IV. CONCLUSION AND FUTURE WORK
As discussed in this paper, link utilization signiﬁcantly
inﬂuences queueing delay of routers; Delay-aware embed-
ding approaches should consider that delay increases non-
linearly; the embedding has to be performed in a way such
that communication delay is kept within reasonable bounds.
In general, infrastructure providers should avoid embedding
virtual links to paths such that trafﬁc intensity exceeds 80%.
For delay-sensitive applications, new virtual network embed-
ding approaches are needed with delay-aware optimization
objectives. As discussed in this paper, there is a tradeoff
between delay-awareness and cost-efﬁciency. Therefore, these
algorithms should also consider embedding cost as part of their
optimization strategy.
We are currently in the process of implementing a delay-
aware embedding algorithm based on the model presented
here. Furthermore, evaluation metrics discussed in this paper
are in the process of being integrated into the Alevin simula-
tion framework [11], [12] and will, as such, be published as
open source.
REFERENCES
[1] D. Schwerdel, D. G¨unther, R. Henjes, B. Reuther, and P. M¨uller,
“German-lab experimental facility,” Future Internet Symposium (FIS)
2010, 9 2010.
[2] J. Carapinha and J. Jim´enez, “Network virtualization: a view from
the bottom,” in Proceedings of the 1st ACM workshop on Virtualized
infrastructure systems and architectures, VISA ’09, (New York, NY,
USA), pp. 73–80, ACM, 2009.
[3] A. Fischer, J. F. Botero, M. Till Beck, H. De Meer, and X. Hesselbach,
“Virtual network embedding: A survey,” Communications Surveys &
Tutorials, IEEE, vol. 15, no. 4, pp. 1888–1906, 2013.
[4] M. T. Beck, J. F. Botero, A. Fischer, H. De Meer, and X. Hesselbach, “A
distributed, parallel, and generic virtual network embedding framework,”
in IEEE Int’l Conf. on Communications (ICC 2013), IEEE, 2013.
[5] A. Fischer, M. T. Beck, and H. De Meer, “An approach to energy-
efﬁcient virtual network embeddings,” in Proc. of the 5th Int’l Workshop
on Management of the Future Internet (ManFI 2013), IFIP, IEEE, 2013.
[6] M. T. Beck, A. Fischer, and H. De Meer, “Distributed virtual network
embedding,” in Proc. of the 7th GI/ITG KuVS Workshop on Future
Internet, University of Kaiserslautern, 2012.
[7] K. Ivaturi and T. Wolf, “Mapping of delay-sensitive virtual networks,”
in Computing, Networking and Communications (ICNC), 2014 Interna-
tional Conference on, pp. 341–347, IEEE, 2014.
[8] L. Shengquan, W. Chunming, Z. Min, and J. Ming, “An efﬁcient
virtual network embedding algorithm with delay constraints,” in Wireless
Personal Multimedia Communications (WPMC), 2013 16th International
Symposium on, pp. 1–6, June 2013.
[9] J. Kurose and K. Ross, “Computer networks: A top down approach
featuring the internet,” Peorsoim Addison Wesley, 2006.
[10] T. Robertazzi, Computer Networks and Systems: Queueing Theory and
Performance Evaluation. Telecommunication networks and computer
systems, Springer New York, 2000.
[11] M. T. Beck, A. Fischer, F. Kokot, C. Linnhoff-Popien, and H. De Meer,
“A simulation framework for virtual network embedding algorithms,” in
Proc. of the 16th International Telecommunications Network Strategy
and Planning Symposium, Networks, 2014.
[12] VNREAL, “ALEVIN2 – ALgorithms for Embedding VIrtual Networks.”
http://alevin.sf.net, May 2014.
59
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-377-3
AFIN 2014 : The Sixth International Conference on Advances in Future Internet

