Estimating Retransmission Timeouts in IP-Based Transport Protocols
Stan McClellan
Ingram School of Engineering
Texas State University
San Marcos, TX USA
stan.mcclellan@txstate.edu
Wuxu Peng
Dept. of Computer Science
Texas State University
San Marcos, TX USA
wuxu@txstate.edu
Abstract—This paper analyzes the algorithm used for es-
timating retransmission timeouts in connection-oriented IP-
based transport protocols, such as the Transmission Control
Protocol (TCP) and the Stream Control Transmission Protocol
(SCTP). The estimation algorithm uses historical values of
the round-trip time to estimate future round-trip delays,
and so creates a maximum waiting time before triggering
retransmission attempts. The purpose of the analysis is to
question / validate some of the fundamental assumptions used
in the estimation algorithm. The conclusion of the analysis is
that the algorithm is somewhat mismatched to the applica-
tion area. Alternative algorithms are discussed, and potential
modiﬁcations are presented.
Keywords-SCTP; retransmission timeout; round-trip time;
RTT; RTO; Jacobson algorithm; Chebyshev approximation;
parameter estimation; upper bound.
I. INTRODUCTION
IP-based transport protocols such as the Transmission
Control Protocol (TCP) [1] and the Stream Control Trans-
mission Protocol (SCTP) [2], [3] estimate maximum round-
trip times using data from prior successful transmissions.
The purpose of this estimation process is to create a
triggering mechanism for retransmission procedures when
transmissions are lost or seriously delayed. Estimation of
the maximum round-trip time is performed via the Jacobson
algorithm [4], which is codiﬁed in several IETF RFC’s,
including RFC 6298 [5]. The Jacobson algorithm has an
interesting basis in fundamental theory, but suffers from
some performance issues due to a mismatch between the
theory and the application area. Performance issues related
to the Jacobson algorithm and other retransmission proce-
dures have been noted and addressed in several alternative
approaches, including [6]–[11]. This paper discusses the
Jacobson algorithm, the theory which motivates it, and
several alternative algorithms including a new approach
which is a modiﬁed form of Jacobson. Section II describes
the estimation process and its use in establishing timeouts for
retransmission procedures. Related work in retransmission
optimization and timeout boundaries is also summarized.
In Section III, the parameters of the existing algorithm
are analyzed, and in Section IV an alternative approach
is presented based on similar theoretical concepts, and
achieving improved results. Performance results based on
implementation and simulation are summarized in Section
V, and Section VI concludes the paper. Note that much of
this work is presented in the context of SCTP, but is also
applicable to TCP since the timeout estimation processes are
identical.
II. RETRANSMISSION MECHANISMS
When an SCTP sender transmits a unit of data, called
a chunk, it also initializes a retransmission timer with an
estimated value of the round-trip time (RTT). The value of
this timer is the retransmission time-out (RTO). When an
acknowledgment arrives, the timer is cancelled. If the timer
expires before an acknowledgment arrives, the chunk may be
retransmitted. The value of RTO is calculated from observed
/ actual values of RTT using the Jacobson Algorithm, which
is detailed in Section III. A too optimistic retransmission
timer may expire prematurely, producing spurious timeouts
and spurious retransmissions, reducing a connection’s ef-
fective throughput. On the contrary, a retransmission timer
that is too conservative may cause long idle times before
lost packets are detected and retransmitted. This can also
degrade performance [6]. So, the difﬁculty lies in ﬁnding an
algorithm which has a solid theoretical basis, is not com-
putationally expensive, and can predict RTT with enough
bias to minimize retransmission events and waiting time
simultaneously.
Performance issues related to retransmission procedures,
including alternatives to the Jacobson Algorithm, have been
noted and addressed several times in the literature. Much
work has been focused on late retransmission and other opti-
mizations of the overall retransmission scenarios [12], [13].
Many authors approach this problem with a “holistic” or
overall perspective on the retransmission procedures where
RTT estimation contributes to triggering these procedures.
Other authors speciﬁcally address the estimation of RTT, and
propose completely new algorithms. However, the Jacobson
Algorithm is deeply rooted in the fabric of connection-
oriented IP transport protocols, and its basis in fundamental
theory is well-established. In following subsections, we
brieﬂy summarize several important approaches to retrans-
mission and RTO estimation.
26
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

A. Holistic approaches
Holistic or overall approaches to improving retransmission
performance typically address the state machines surround-
ing the retransmission process, including the estimation
algorithm which may be used to trigger these procedures.
Examples of holistic approaches include Early Fast Retrans-
mit (EFR) [10], Early Retransmit (ER) [11], and Window-
Based Retransmission (WB-RTO) [14] as well as protocol-
speciﬁc techniques such as Thin Streams [9], [10], [15].
Early Fast Retransmit (EFR) is an optional mechanism in
FreeBSD which is active whenever the congestion window
is larger than the number of unacknowledged packets, and
packets remain to be sent. When the RTO timer expires
and the entire congestion window is not used, EFR retrans-
mits all packets that could have been acknowledged [10].
The Early Retransmit (ER) algorithm [11] suggests that
a mechanism should be in place to recover lost segments
when there are too few unacknowledged packets to trigger
Fast Retransmit. The Early Retransmit algorithm reduces
waiting time in four speciﬁc situations [10]. The Window-
Based Retransmission Timeout (WB-RTO) [14] asserts that
timeout mechanisms based solely on RTT estimates lead to
unnecessary retransmissions and unfair resource allocation,
and proposes to schedule ﬂows on the basis of their contri-
bution to congestion. Thin Streams [9], [10], [15] optimizes
throughput for “thin streams” which are often used in con-
trol applications, and often depend on SCTP for transport.
When stream characterization is accurate, throughput can be
improved by adapting speciﬁc sections of the retransmission
procedures to match ﬂow characteristics.
B. Alternative estimation algorithms
Alternative estimation algorithms address speciﬁc per-
formance issues which have been noted in the Jacobson
Algorithm. These issues may be related to overshoot in the
estimated value, spurious behaviors for certain trafﬁc char-
acteristics, or inefﬁcient bounding computations. In some
cases, heuristic state-machine approaches are also included
because of complexities associated with the retransmission
process. Examples of alternative or modiﬁed RTT estimation
algorithms include Peak-Hopper [7], Eifel [6], and Weighted
Recursive Median (WRM) [8].
The Eifel approach [6] notes a particular style of erro-
neous performance in the Jacobson algorithm, and adapts
the algorithm in several ways to compensate for this per-
formance oddity. As a result, Eifel eliminates unnecessary
retransmissions which can result from spurious RTO viola-
tions. Similar to Eifel, the Peak-Hopper algorithm [7] also
observes that the Jacobson algorithm responds inappropri-
ately to certain ﬂuctuations in RTT. This behavior produces
“spikes” in RTO values because the algorithm does not
distinguish between positive and negative variations. The
modiﬁcation proposed in [7] reduces this effect for a wide
range of cases, and the ﬁndings in [9] concur. However,
150
200
250
300
350
400
450
0
500
1000
1500
2000
2500
3000
3500
4000
4500
Delay (milliseconds)
Packet Number
Figure 1.
Relative performance of RTO estimators to large discontinuities
in RTT. Estimators shown are the Jacobson Algorithm (dotted line), the
Eifel Algorithm (dashed line), and the Modiﬁed Jacobson Algorithm (dash-
dot line). The common RTT sequence driving all algorithms is shown as a
solid line.
this solution results in higher average RTO values than
the RFC approach [5], which can be a problem [10]. The
Weighted Recursive Median (WRM) algorithm [8] redeﬁnes
RTT estimation from a signal processing standpoint. WRM
is effective, but tends to be computationally expensive even
in a recursive form, which is a problem for per-packet
operations.
C. Other considerations
The remainder of this paper addresses the estimation
process for the maximum RTT, or the value which estab-
lishes the RTO timer. When the RTO timer has expired,
retransmission procedures commence, and may include var-
ious conditionally executed processes. We do not address
those processes, or the overall retransmission procedure.
In most cases, we use the Jacobson and Eifel estimation
algorithms for comparison because they are widely accepted
or implemented.
For reference, the performance of the Jacobson and Eifel
algorithms are shown in Figure 1 along with the modiﬁed
version of the Jacobson Algorithm which is discussed in de-
tail in Section IV. The traces in the ﬁgure are all driven by a
common RTT sequence created using our testbed of systems
with modiﬁed networking stacks, as described in more detail
in Section V. In the ﬁgure, the quiescent sections of the RTT
sequence (t < 170ms, 260ms < t < 430ms) have a fairly
low mean, with similarly low standard deviation. This is
typical of modern, high-speed networks. Also note that the
RTT sequence has abrupt increases (t ≈ 170ms, t ≈ 430ms)
followed by a stable period (170ms < t < 260ms), and then
an abrupt decrease (t ≈ 260ms). Note that Jacobson and
Eifel both “overshoot” after the abrupt positive discontinuity
in RTT. However, at the second discontinuity which is abrupt
but negative, Eifel corrects downward, whereas Jacobson
again corrects upward. This is a primary beneﬁcial feature
27
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

of the Eifel approach. Unfortunately, the tuning of the
algorithm creates a larger deviation or “upper bound” for
the RTT sequence than is available through the Jacobson
Algorithm.
Abrupt changes in RTT such as those shown in Figure 1
cause the RTO timer to expire, resulting in binary backoff of
the timer (BEBO) and retransmission procedures. The RTO
values associated with BEBO and retransmissions are not
shown, because they do not affect future estimated values
of RTO. Post-processing of the RTT estimate to enforce
minimum values for RTO is also not considered here.
In the RFCs for TCP and SCTP, a hard-coded minimum
value for RTO is speciﬁed as 1000 milliseconds [1]–[3],
[5], whereas the minimum value of the Eifel algorithm is
deﬁned as “RTT + 2 × ticks” (or 200 msec) [6]. The
deﬁnition of the minimum RTO in TCP-Lite is typically
2 times the clock granularity, which is often taken as 500
msec [3], [6]. This minimum procedure is secondary to
the estimation algorithm, and often completely replaces the
RTT estimate. For example, in a broadband network with
large minimum RTO, the RTT estimate can be orders of
magnitude below the minimum, resulting in long wait-times
for triggering retransmission. So, in all comparisons here we
disable the enforcement of a minimum RTO and focus on
the performance of the estimation algorithms.
III. THE JACOBSON ALGORITHM
The Jacobson Algorithm, originally proposed in [4], uses
the Chebyshev Bound [16] to produce a reasonable value
of RTO, or the maximum time the sender will wait for
an acknowledgement. After exceeding RTO, a transmission
is declared lost and retransmission procedures commence.
Interestingly, Jacobson noted the poor performance of the
algorithm, since loads higher than 30% resulted in retrans-
mission of packets that were only delayed in transit (i.e.,
not lost) [4]. This behavior is also noted in later literature,
including [6], [7], [15].
The speciﬁc computations for the bounding procedure
are driven by estimates of the mean (µ) and the standard
deviation (σ) of an assumed RTT distribution. The estimates
of µ and σ are not conventional parameter estimates, as iid
samples from a population. Rather, ˆµ and ˆσ are predicted
using prior RTT values. Jacobson estimates ˆµ and ˆσ from
observed values of RTT, and then computes an “overbound”
for RTO using Chebyshev. This is the same as saying “we
waited a reasonable time (ˆµ) and then some (Kˆσ), but the
ACK didn’t come back, so the packet must have gotten
lost”. This RTO calculation is invoked by the sender for
each unique transmission. As such, it is optimized for integer
arithmetic and all coefﬁcients are diadic.
Regardless of the speciﬁc assumptions or optimizations,
Jacobson computes the RTO threshold as
xthr = ˆµn+1|n + K · ˆσn+1|n
(1)
where xthr is the RTO threshold or “overbound” for RTT,
K is the number of “standard deviations past the mean,”
and ˆµn+1|n and ˆσn+1|n are the estimates (predictions) of
the mean and standard deviation of the RTT distribution for
the next iteration (subscript n + 1) given some data up to
the current time (subscript n).
A. Jacobson and Chebyshev
The Chebyshev bound (2) is a universal bound applicable
even for unknown distributions. Chebyshev shows that the
probability of the random variable occurring outside a range
around the mean (µ) depends on the standard deviation (σ).
Pr [|X − µ| ≥ ϵ] ≤ σ2
ϵ2
(2)
For RTT estimation, the Jacobson Algorithm uses a ﬁxed
offset from the mean (Kσ) [2], [3]. This simpliﬁes the
bound and allows a direct computation of the “violation
probability”. With ϵ = Kσ and K = 4 in (2),
Pr [|X − µ| ≥ Kσ] ≤
1
K2
(3)
and the ﬁxed, double-sided “violation probability” is
1
16 =
0.0625. However, the RTO timeout is single-sided because
the timeout algorithm is only concerned with the case where
X > µ. So for a symmetric distribution and K = 4, the RTO
timeout will be exceeded roughly 3% of the time, with the
assumption that the RTT values are reasonably iid.
B. Predicting µ and σ
Rather than using conventional parameter estimation al-
gorithms requiring storage of historical values and more
complex calculation, Jacobson estimates µ and σ using
simple prediction algorithms as in (4). These algorithms
rely on current values of the quantities (subscript n) as
well as the measured RTT value (xn). Interestingly, the
use of ﬁltered (predicted) values for µ and σ implicitly
contradicts the assumption of a valid distribution in (2).
However, this approach gains computational efﬁciency and
reﬂects the nonstationary nature of RTT values.
ˆµn+1|n = ˆµn + α(xn − ˆµn), and
ˆσn+1|n = ˆσn + β (|ˆµn − xn| − ˆσn) .
(4)
When viewed as a time-series prediction or ﬁltering algo-
rithm, it is clear that the relations in (4) are single-pole,
lowpass IIR ﬁlters (predictors).
IV. THE MODIFIED JACOBSON ALGORITHM
The use of Chebyshev to bound the retransmission timeout
is reasonable, since it provides a “target probability” for
the timeout calculation. However, the Markov bound [16]
is also applicable for RTT estimation since it explicitly uses
knowledge of the positivity of the random variable, as in (5)
which is valid when fX(x) = 0 for x < 0 and α > 0.
Pr [X ≥ α] ≤ µ
α.
(5)
28
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

Using α = µ + Kσ in (5) produces an expression similar to
(2). However, the Markov formulation results in a variable
probability for RTO violation. This concept is particularly
unappealing for small, relatively stable values of RTT,
since the overbound RTO might have a high probability of
violation, which would create spurious retransmissions and
a large amount of unwanted network trafﬁc. Recall that in
the Chebyshev case, the choice of ϵ = Kσ produced a ﬁxed
violation probability around 3%. The violation probability
of the Markov bound can also be ﬁxed as in (3) if α = 32µ:
Pr [X ≥ 32µ] ≤
µ
32µ = 1
32 =
1
2K2 .
(6)
Unfortunately, a bias of 32 times the mean would not
produce a viable estimate of RTT, and the overbound RTO
would be extremely loose. Therefore, the Markov bound
alone is not be a reasonable choice to estimate the RTO
timeout. However, a combination of Markov and Chebyshev
approaches seems to produce an effective estimator.
Combining an estimate of σ as in the Jacobson Algorithm
with a biased estimate of µ as in the Markov bound results
in a formulation that retains the Chebyshev structure but
improves certain performance aspects. So, we use a slightly
revised version of (1) and call this approach the Modiﬁed
Jacobson Algorithm,
xthr = A · ˆµn+1|n + B · ˆσn+1|n.
(7)
In (7), the standard deviation estimator ˆσn+1|n is identical to
the estimator (4) used in the Jacobson Algorithm. However,
the multiplier for ˆσn+1|n is reduced (i.e. B = 2 whereas
K = 4). Further, the mean estimator ˆµn+1|n is replaced with
the current value of RTT (xn), and is biased in the spirit of
a Markov estimator. In this case, we choose A = 1.25 as a
reasonable bias term, whereas Jacobson uses A = 1.0.
Note that the bias term A for ˆµn+1|n in (7) is not equiv-
alent to the use of gain in the prediction of ˆµn+1|n in (4).
The structure of the prediction ﬁlter for ˆµn+1|n causes delay
in the formulation of the overbound, which is problematic.
There are no coefﬁcients for the prediction ﬁlter which will
simultaneously improve delay and maintain stability in the
estimation of µ, and incorporating gain in the prediction
does not improve the estimate. These undesirable effects are
completely eliminated in the Modiﬁed approach with the use
of xn as the estimator of µ. This adjustment allows for the
use of a Markov-like bias term A and signiﬁcantly enhances
the performance of the Modiﬁed algorithm.
Several factors must be speciﬁcally noted for the Modiﬁed
Algorithm. First, dependence on the variance of the RTT
sequence is preserved via ˆσn+1|n and the Chebyshev-like
formulation. Some dependence on σ must be maintained in
the estimation procedure for cases where the RTT values
exhibit signiﬁcant variability. However, the multiplier B
can be different (smaller) than in Jacobson. This reduced
dependence on σ mediates undesirable “overshoot” which
is problematic in Jacobson, and has been addressed heuris-
tically in Eifel. Refer to abrupt changes in RTT as shown in
Figure 1 for examples.
Secondly, dependence on the mean of the RTT sequence
is preserved via the use of xn for ˆµn+1|n, and a bias
is incorporated via the Markov-like formulation for cases
where σ → 0. Some dependence on µ is important, since this
allows isolation of the variability. However, in cases where
σ → 0, Jacobson tends to “settle” directly onto RTT, leading
to heuristic modiﬁcations including static minimum values
which override the Jacobson estimates. This undesirable
behavior of Jacobson is clearly evident in Figure 1.
Thirdly, explicit dependence on both µ and σ is retained
via the hybrid Markov/Chebyshev formulation which biases
the estimate higher and reduces the need for secondary
minimum computations. Also, the prediction structure for
ˆµ and ˆσ is preserved, which is an important consideration.
Finally, the computational complexity of the Modiﬁed
Algorithm is essentially the same as the original Jacobson
Algorithm. Elimination of the prediction structure for ˆµ and
the use of a bias term along with a simpliﬁed multiplier for ˆσ
results in an algorithm with the same operational complexity
and no heuristic conditional logic steps.
V. PERFORMANCE RESULTS
To validate algorithm performance, we constructed a
“real-world” test environment which pairs client and server
computers with modiﬁed network stacks via a controllable
network infrastructure. In the network testbed, a client
system transmits data to a server system using a specially-
constructed user-space application which can vary overall
payload length and SCTP chunk size, as well as other param-
eters such as the number of test iterations. The network stack
of the client systems also implement user-selectable timeout
estimation algorithms and record important parameters for
each transmission. Parameters recorded by the client’s net-
work stack include the timestamped, per-chunk values of
the actual (measured) RTT, estimated RTO, ˆµ, ˆσ, and so on.
As described in Section II-C, post-processing of the RTO
estimate to enforce minimum values for RTO is disabled
since we are investigating the effect of estimation algorithms.
Additionally, the network devices and SCTP server are
modiﬁed to introduce algorithmically controllable delays
in acknowledgements of chunks and delays in delivery of
various classes of network trafﬁc. This feature results in an
ability to introduce speciﬁc “delay proﬁles” which duplicate
other known results (as in Figure 2 [6]) or randomize the
round-trip time of the network. Using trace data collected
directly from the network stacks of the client & server
computers, we were also able to create simulations of
system performance which have been cross-checked for
accuracy against the delay and estimation performance of
the actual systems. All performance data described in this
paper was produced using our “real-world” testbed, and has
29
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

Table I
ESTIMATION PERFORMANCE GATHERED USING NETWORK TESTBED
AND SIMULATION. PERFORMANCE IS MEASURED AS MEAN ABSOLUTE
ERROR (MAE) IN MILLISECONDS.
Delay proﬁle
Figure
Jacobson
Eifel
Modiﬁed
Eifel ramp
Figure 2
1731
2091
1577
Quiet/Spikes
Figure 3
39.81
140.7
43.29
Delay burst
Figure 4
11.31
41.79
2.00
Table II
ESTIMATION PERFORMANCE GATHERED USING NETWORK TESTBED
AND SIMULATION. PERFORMANCE IS MEASURED IN TERMS OF
TIMEOUT EVENTS (TO) PER 10,000 PACKETS TRANSMITTED.
Delay proﬁle
Figure
Jacobson
Eifel
Modiﬁed
Eifel ramp
Figure 2
1
1
1
Quiet/Spikes
Figure 3
99
51
79
Delay burst
Figure 4
378
82
12
been incorporated into accurate simulations of the estimation
algorithms.
The performance of the Modiﬁed Jacobson Algorithm is
shown in the context of various RTT sequence characteristics
or “delay proﬁles” in Figure 2, Figure 3, and Figure 4. Figure
2 reproduces an important delay proﬁle from literature
describing the Eifel algorithm (Fig. 6 of [6]). Figure 3
contains the delay proﬁle for a real, quiescent network with
100 msec average delay and short, artiﬁcially induced delay
spikes. Figure 4 contains the delay proﬁle for a long-term
delay burst on an otherwise quiescent network with 80 msec
average delay.
Quantitative assessment of algorithm performance gath-
ered from a large number of packet transmissions is shown in
Table I and Table II for each of the delay proﬁles described
by Figure 2, Figure 3, and Figure 4. The data in Table I
is presented in terms of Mean Absolute Error (MAE) in
milliseconds between the RTO estimate and the actual RTT
value for the same packet transmission, according to (8).
Table II shows the number of induced timeout events (TO)
for each estimation algorithm, and is measured in number
of events per 10,000 packets transmitted.
MAE = 1
N
X
N
|xthr − xn|
(8)
Using our network testbed, we duplicated the RTT se-
quence in Figure 2 from [6]. This “delay proﬁle” clearly
shows the improvement of Eifel over Jacobson, particu-
larly at the termination of the “ramp” sequences. Note
that Jacobson overshoots upward even though the RTT
sequence has rapidly declining values. Eifel compensates for
overshoot, but at the expense of slightly higher bias from
the RTT sequence. Note that the Modiﬁed approach mimics
Jacobson during ramp ascension, and also compensates for
the overshoot at ramp termination. Modiﬁed has a smaller
180
200
220
240
260
280
300
320
2000
3000
4000
5000
6000
7000
Delay (milliseconds)
Packet Number
Figure 2.
Performance of RTO estimators for the “ramp” RTT sequence
described in [6]. Jacobson (dotted), Eifel (dashed), and Modiﬁed (dash-dot).
The common RTT sequence driving all algorithms (solid).
6050
6100
6150
6200
6250
6300
6350
0  
100
200
300
400
500
Delay (milliseconds)
Packet Number
Figure 3.
Performance of RTO estimators for a quiescent network with
short, artiﬁcially induced delay spikes. Jacobson (dotted), Eifel (dashed),
and Modiﬁed (dash-dot). The common RTT sequence driving all estimation
algorithms (solid).
750
800
850
900
950
1000
1050
50
100
150
200
250
300
Delay (milliseconds)
Packet Number
Figure 4.
Performance of RTO estimators for a quiescent network with a
large, naturally-occurring multi-packet delay burst. Jacobson (dotted), Eifel
(dashed), and Modiﬁed (dash-dot). The common RTT sequence driving all
algorithms (solid).
30
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

bias than Eifel. Interestingly, each algorithm induces a single
timeout event, but the Modiﬁed Jacobson algorithm does so
with an MAE 154 msec smaller than Jacobson, and 514 msec
smaller than Eifel. Such a signiﬁcant difference in MAE can
translate to a smaller task-completion time in cases where a
small differential in timeouts is encountered.
A delay proﬁle from a relatively quiescent network with
artiﬁcially induced delay spikes is shown in Figure 3. The
network exhibits an average delay of around 100msec,
and has artiﬁcially induced delay spikes which are typical
of an unstable link. Note that with this network proﬁle,
delay spikes occur every 200 packets, forcing a timeout.
After each delay spike, the estimation algorithms recover in
very different manners: Modiﬁed and Jacobson fall quickly
toward the quiescent RTT sequence, while Eifel decays very
slowly, creating a relatively large wait-time for over 100
subsequent packets. As a result, the MAE for the Eifel
algorithm with this delay proﬁle is more than 3 times larger
than the other estimation algorithms while still creating
only 35% fewer timeout events. Regardless, each estimation
algorithm creates a very small proportion of timeout events
relative to the number of packets transmitted.
A delay proﬁle from another network test is shown in
Figure 4. In this ﬁgure, the network exhibits an average
delay during quiescent periods of around 80 msec. However,
between packets 750 and 850 a large, naturally occurring,
correlated delay burst is observed which disrupts the esti-
mation algorithms. Note that Modiﬁed and Jacobson both
fall quickly after individual, large delay spikes. However,
Modiﬁed maintains a larger offset during the quiescent
period between packets 900 and 1000 due to the speciﬁc
bias for ˆµ. The failure of Jacobson to maintain a bias during
periods of low RTT variance (σ → 0) is responsible for
many timeout events, with Jacobson inducing 30 times more
timeouts than Modiﬁed, and almost 5 times more than Eifel.
Eifel again exhibits a bias which is signiﬁcantly larger than
Jacobson or Modiﬁed, with an MAE 20 times larger than
Modiﬁed, and 4 times larger than Jacobson. Also note that
Jacobson tracks RTT fairly well, but has large, positive
overshoot when RTT drops suddenly. Modiﬁed compensates
for the Jacobson “overshoot” problem in cases where the
RTT sequence drops suddenly (cf. packet 800 & 840).
VI. CONCLUSION AND FUTURE WORK
This paper analyzes the methods for computing and using
RTT and RTO estimates in IP-based transport protocols such
as SCTP and TCP. The theoretical basis of the Jacobson
Algorithm is discussed, and an alternative approach is pre-
sented which retains the fundamentally sound theoretical ba-
sis and operational structure of the algorithm, but improves
the performance over other well-known techniques without
introducing heuristic modiﬁcations. Future work involves the
continued optimization of the modiﬁed algorithm as well as
investigation into the effects of variable minimum bound for
the RTO timer.
REFERENCES
[1] J. Postel, “Transmission control protocol,” RFC793, Sep.
1981.
[2] R. Stewart et al., “Stream control transmission protocol,” RFC
2960, Oct. 2000.
[3] R. Stewart, “Stream control transmission protocol,” RFC4960,
Sep. 2007.
[4] V. Jacobson, “Congestion avoidance and control,” in Proc.
Comput. Commun. Review, ser. SIGCOMM’88.
New York,
NY: ACM, Aug. 1988, pp. 314–329.
[5] V. Paxson, M. Allman, J. Chu, and M. Sargent, “Computing
TCP’s retransmission timer,” RFC6298, June 2011.
[6] R. Ludwig and K. Sklower, “The Eifel retransmission timer,”
Comput. Commun. Review (SIGCOMM), vol. 30, pp. 17–27,
July 2000.
[7] H. Ekstrom and R. Ludwig, “The Peak-Hopper: A new end-
to-end retransmission timer for reliable unicast transport,” in
Proc. 23rd Joint Conf. of the IEEE Computer & Communi-
cations Societies (INFOCOM 2004), vol. 4, Nov. 2004, pp.
2502–2513.
[8] L. Ma, G. Arce, and K. Barner, “TCP retransmission timeout
algorithm using weighted medians,” IEEE Sig. Proc. Letters,
vol. 11, pp. 569–572, June 2004.
[9] J. Pedersen, C. Griwodz, and P. Halvorsen, “Considerations
of SCTP retransmission delays for thin streams,” in Proc. 31st
IEEE Conf. on Local Computer Networks, Tampa, FL, Nov.
2006, pp. 135–142.
[10] A. Petlund, P. Beskow, J. Pedersen, E. S. Paaby, C. Griwodz,
and P. Halvorsen, “Improving SCTP retransmission delays for
time-dependent thin streams,” Multimedia Tools and Applica-
tions, vol. 45, pp. 33–60, Oct. 2009.
[11] M. Allman, K. Avrachenkov, U. Ayesta, J. Blanton, and
P. Hurtig, “Early retransmit for TCP and stream control
transmission protocol (SCTP),” RFC5827, Apr. 2010.
[12] M. Allman and V. Paxson, “On estimating end-to-end network
path properties,” in Proc. Conf. Appl., technol., arch., and
protocols for comput. commun., ser. SIGCOMM ’99.
New
York, NY, USA: ACM, 1999, pp. 263–274.
[13] L. Coene and J. Pastor-Balbas, “Telephony signaling transport
over stream control transmission protocol (SCTP) applicabil-
ity statement,” RFC4166, Feb. 2006.
[14] I. Psaras and V. Tsaoussidis, “Why TCP timers (still) don’t
work well,” Computer Networks, vol. 51, pp. 2033–2048,
Nov. 2007.
[15] J. Pedersen, “Evaluation of SCTP retransmission delays,”
Master’s thesis, University of Oslo Department of Informat-
ics, May 2006.
[16] A. Papoulis, Probability, Random Variables, and Stochastic
Processes, 3rd ed.
New York, NY: McGraw-Hill, 1991.
31
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-262-2
ICDT 2013 : The Eighth International Conference on Digital Telecommunications

