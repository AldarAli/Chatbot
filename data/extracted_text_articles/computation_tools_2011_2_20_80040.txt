JClassic+
δϵ: A Description Logic Reasoning Tool:
Application to Dynamic Access Control
Narhimene Boustia
Saad Dahlab University of Blida
Algeria
nboustia@gmail.com
Aicha Mokhtari
USTHB, Algeria
aissani mokhtari@yahoo.fr
Abstract—This
paper
presents
JClassic+
δϵ,
a
description
logic with default and exception that is expressive enough to
be of practical use, which can reason on default knowledge
and handle a ”weakened kind of disjunction”, allowing a
tractable subsumption computation. JClassic+
δϵ is an extension
of JClassicδϵ, with the connective lcs, which has the same
properties as the LCS external operation to compute the least
common subsumer of two concepts. JClassic+
δϵ is deﬁned with
an intensional semantics. We developp this reasoner to deﬁne an
access control model, where default and exception connectives
are used in representation of context to allow authorization.
Consideration of context in access control allows deﬁnition
of dynamic permissions, for example, permissions given to a
doctor in a normal context are not the same that we are in an
emergency context.
Index Terms—Description Logic; Defaults and Exceptions;
Reasoner; disjunction; access control.
I. INTRODUCTION
The purpose of access control models is to assign per-
missions to users. The most interesting would be to have
the ability to set dynamic permissions dynamic, i.e., context-
dependent.
Context may be unique, as it may be a relationship between
a number of situations such as emergency or epidemic risk.
For this, we need connectors that allow us to represent this
information. The reasoner JClassic+
δϵ has been developed for
this purpose. Unlike the work of Ventos et al. [1], [2], we did
not stay at the theoretical level, but rather we implemented the
reasoner.
Donini [3] shows that concept disjunction makes subsump-
tion computation co-NP-Complete. However, disjunction is
very useful for knowledge representation.
In this paper, we present a decription logic-based system,
named JClassic+
δϵ, whose set of connectives is the union of
JClassicδϵ connectives and the ”lcs” connective. The ”lcs”
connective is a kind of ”weakened disjunction” allowing us to
preserve a tractable subsumption computation (subsumption in
JClassicδϵ has been proved correct, complete and tractable
in [4]).
The ”lcs” connective has the same properties as the LCS
external operation introduced by Borgida et al. [5] which
computes the least common subsumer of two concepts. It was
introduced by Ventos et al. in Classic to allow disjunction with
a reasonable computation [1], [2].
Because of JClassicδϵ has been given an intensional se-
mantics, JClassic+
δϵ is provided with an intentional semantics
(called CL+
δϵ) based on an algebraic approach. For this, we
have ﬁrst to build an equational system which highlights the
main properties of the connectives. The equational system
allows to deﬁne axiomatically the notion of LCS.
In this paper, we ﬁrst present our system JClassic+
δϵ, we
give then deﬁnition of ”lcs”. We ﬁnally illustrate the use of
this tool for access control.
In access control, permission are given to user depending on
the actual context. The context can be that the default one in
our case represented by the default connector (δ), it can be an
exception to the current context represented by the connector
Exception (ϵ), as it can be a conjunction or a disjunction of
several contexts.
To this end, the reasoner JClassicδϵ has been enriched by
the operator of minimum disjontion in order to have a good
level of expressiveness with a polynomial complexity.
II. JClassic+
δϵ
JClassic+
δϵ is an non monotonic reasoner based on descrip-
tion logic with default and exception [6] which allows us to
deal with default and exceptional knowledge.
The set of connectives of JClassic+
δϵ is the union of the
set of connectives of ALδϵ [6] presented in [4], [7], [8] and
the connective ”lcs”.
The connective δ intuitively represents the common notion
of default. For instance, having δFly as a conjunct with
Animal in the deﬁnition of the concept Bird states that birds
generally ﬂy.
The connective ϵ is used to represent a property that is not
present in the description of the concept or of the instance
but that should be. For instance, the deﬁnition of Penguin in
JClassic+
δϵ is Penguin ≡ Bird ⊓ Flyϵ. The Flyϵ property
expresses the fact that ﬂy should be in the deﬁnition of Penguin
since it is a bird. The presence of Flyϵ in the deﬁnition
of Penguin makes it possible to classify Penguin under the
concept Bird.
Formally, the subsumption relation uses an algebraic se-
mantics. The main interest of this approach is the introduction
of the deﬁnitional point of view of default knowledge: from
the deﬁnitional point of view, default knowledge can be part
of concept deﬁnition whereas from the inheritance one it is
25
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

only considered as a weak implication. A map between the
deﬁnition of concept and its inherited properties is described.
This combinating of deﬁnitional and inheritance levels im-
proves the classiﬁcation process. Figure 1 describes the general
architecture of our system.
Fig. 1.
Architecture of JClassicδϵ
In this section, we ﬁrst present the syntax of our system, we
then give details about its algebraic semantic and we conclude
this section by presenting the mechanism of inference in our
tools.
A. Syntax of JClassic+
δϵ
The set of connectives of JClassic+
δϵ is the union of the
set of connectives of CLδϵ [6] and the connectives δ and ϵ.
JClassic+
δϵ is deﬁned using a set R of primitive roles, a set
P of primitive concepts, the constant ⊥ (Bottom) and ⊤ (Top)
and the following syntax rule (C and D are concepts, P is a
primitive concept, R is a primitive role).
C, D → ⊤
the most general concept
| ⊥
the most speciﬁc concept
| P
primitive concept
| C ⊓ D
concept conjunction
| ¬P
negation of primitive concept (This
restriction to primitive concept in the negation is a choice to
avoid the untractability)
| ∀r : C
C is a value restriction on all roles R
| δC
default concept
| Cϵ
exception to the concept
| ClcsD
concept disjunction
δ and ϵ are unary connectives, ⊓ is a binary conjunction
connective and ∀ enables universal quantiﬁcation on role
values.
B. Semantic of JClassic+
δϵ
We endow JClassic+
δϵ with an intentional algebraic seman-
tic denoted CL+
δϵ.
This framework covers the different aspects of the formal
deﬁnition of concepts and subsumption in our language. The
calculating of denotations of concepts in CL+
δϵ is used in
computing subsumption in the algorithm Subδϵ. CL+
δϵ allows
ﬁrst to show that Sub+
δϵ is correct and complete and secondly
to give a formal characterization of calculation of subsumption
used in the implementation of JClassic+
δϵ.
1) EQ: an equational system for JClassic+
δϵ: In order to
serve as the basis for the deﬁnition of an algebraic seman-
tics, an equational system EQ is deﬁned. From a descriptive
point of view, the calculation of subsumption consists on the
comparison of terms through the equational system EQ. This
system ﬁxes the main properties of the connectives and is used
to deﬁne an equivalence relation between terms and then to
formalize the subsumption relationship.
∀A, B, C ∈ JClassic+
δϵ:
01: (A ⊓ B) ⊓ C = A ⊓ (B ⊓ C)
02: A ⊓ B = B ⊓ A
03: A ⊓ A = A
04: ⊤ ⊓ A = A
05: ⊥ ⊓ A = ⊥
06: (∀R : A) ⊓ (∀R : B) = ∀R : (A ⊓ B)
07: ∀R : ⊤ = ⊤
08: (A lcs B) lcs C = A lcs (B lcs C)
09: A lcs B = B lcs A
10: A lcs A = A
11: A lcs ⊤ = ⊤
12: A lcs ⊥ = A
13: (δA)ϵ = Aϵ
14: δ(A ⊓ B) = (δA) ⊓ (δB)
15: A ⊓ δA = A
16: Aϵ ⊓ δA = Aϵ
17: δδA = δA
Axioms 01 to 07 are classical; they concern description
logic connectives properties [9], [10]. Axioms 08 to 12
concern the connective ”lcs”. The following ones correspond
to ALδϵ connectives properties[6], i.e., properties of δ and ϵ
connectives.
Descriptive Subsumption:
We denote ⊑d for descriptive subsumption. ⊑d is a partial
order relation on terms. Equality (modulo the axioms of EQ)
between two terms is denoted =EQ. =EQ is a congruence
relation which partitions the set of terms, i.e., =EQ allows
to form equivalence classes between terms. We deﬁne the
descriptive subsumption using the congruence relation and
conjunction of concepts as follow:
Deﬁnition 1: (Descriptive Subsumption)
Let C and D two terms of JClassic+
δϵ, C ⊑d D, i.e., D
subsume descriptively C, iff C ⊓ D =EQ C.
From an algorithmic point of view, terms are not eas-
ily manipulated through subsumption. We adopt a structural
point of view closer to the algorithmic aspect of computing
subsumption. This allows us to ﬁrst formalize calculation
of subsumption in the implementation of JClassic+
δϵ and
secondly to endow JClassic+
δϵ with an intensional semantics.
26
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

To deﬁne the subsumption relation between two concepts
using their description, we need to compare them. For this,
concepts are characterized by a normal form of their properties
rather than by the set of their instances.
2) Normal Form of concept: We present in this section the
structural point of view for the subsumption in JClassic+
δϵ.
This point of view has two main advantages: it is very close to
the algorithmic aspects and is a formal framework to validate
the algorithmic approach which is not the case description
graph.
We deﬁne a structural concept algebra CL+
δϵ which is used
to give an intensional semantic in which concepts are denoted
by the normal form of their set of properties. The structural
point of view of subsumption consist then to compare the
normal forms derived by applying a homomorphism from set
of terms of JClassic+
δϵ to elements of CL+
δϵ.
CL+
δϵ: an intensional semantic for JClassic+
δϵ
From the class of CL-algebra, we present a structural
algebra CL+
δϵ which allows to endow JClassic+
δϵ with an
intentional semantic.
Element of CL+
δϵ are the canonical intentional representation
of terms of JClassic+
δϵ (i.e., Normal form of the set of their
properties). We call an element of CL=
δϵ normal forms.
Deﬁnition of CL+
δϵ means deﬁnition of a homomorphism h
which allows to associate an element of CL+
δϵ to a term of
JClassic+
δϵ.
Using the equational system, we calculate for each concept
a structural denotation which is a single normal form of this
concept. The calculation of a normal form from a description
of a concept can be seen as a result of term “rewriting” based
on the equational system EQ.
The normal form of a concept deﬁned with description
T (noted nf(T)) is a couple ⟨tθ, tδ⟩ where tθ contains strict
properties of T and tδ the default properties of T.
tθ and tδ are 3-tuple of the form (π,r,ϵ) with:
π: is a set of primitive concepts in description T.
r: has the form ⟨R, c⟩ where :
R: is the name of Role.
c: is the normal form of C, if the description contains
the property ∀R : C.
ϵ: set of 3-tuple with the form (π, r, ϵ).
Example:
The normal form of concept A ≡ B ⊓ C ⊓ δD is:
nf (A) = (⟨{B, C} , ∅, ∅⟩ , ⟨{B, C, D} , ∅, ∅⟩).
Structural Subsumption:
Two terms C and D of JClassic+
δϵ are structurally equiv-
alent iff their normal forms are equal. We denote ⊑s for
structural subsumption. ⊑s is a partial order relation.
The structural equality of two terms of JClassic+
δϵ is noted
=CL. =CL is a congruence relation as EQ in descriptive
subsumption.
We deﬁne the structural subsumption using the congruence
relation and conjunction of concepts as follow:
Deﬁnition 2: (Structural Subsumption)
Let C and D two terms of JClassic+
δϵ, C ⊑s D; i.e., D
subsume structurally C, iff C ⊓ D =CL C.
Theorem 1: (Equivalency between descriptive subsump-
tion and structural subsumption)
Let C and D two terms of JClassic+
δϵ, C ⊑s D ⇔ C ⊑d D.
To infer new knowledge in this system, the susbsumption
relation is used. In the next section, we outline the subsump-
tion algorithm handling defaults and axceptions named Subδϵ.
III. INFERENCE IN JClassic+
δϵ
There are several reasoning services to be provided by
a DL- system. We concentrate our work on the following
basic ones, which are Classiﬁcation of concepts (TBox) and
instance checking (ABox). These two services basically use
the subsumption relation.
A. The Subsumption Relation
Borgida [5] deﬁnes the subsumption based on a set theoretic
interpretation as follow: “The concept C subsume D, if and
only if the set of instances of C include or is equal to a set of
instances of D”.
However, the general principle of computing subsumption
between two concepts is to compare their sets of properties,
not their sets of instances.
For this, we use an intensional semantics which is closer
to the algorithmic aspects of computing subsumption, and this
by deﬁning a normal form of description called descriptive
normal form.
Algorithm of Computing Subsumption Subδϵ
Subδϵ is an algorithm of computing subsumption of the
form Normalization- Comparison. It is consists of two steps,
ﬁrst, the normalization of description, and then a syntactic
comparison of the obtained normal forms.
Let C and D be two terms of JClassic+
δϵ. To answer the
question “Is C subsumed by D?” we apply the following
procedure. The normal forms of C and “C ⊓ D” are calculated
with the procedure of normalisation.
There are two steps in the comparison. We compare the
strict parts of the two concepts. If these are equal, then we
compare the default parts. If the two normal forms are equal,
the algorithm returns “Yes”. It returns “No” otherwise.
The completeness, correctenness and the polynomial com-
putation of JClassicδϵ have been proved in [4].
We detailed in the next section the connective ”lcs”.
IV. THE COMPUTATION OF ”LCS”
The least common subsumer has been introduced in de-
scription logic by Borgida et al. [5] as an external operation
to compute the LCS of two concepts.
The LCS of two concepts A and B belonging to a language
L is the most speciﬁc concept in L that subsumes both A and
B.
Deﬁnition 3: Let L a terminological language, ⊑ the nota-
tion of subsumption relation in L
27
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

LCS: L × L → L
LCS(A,B) → C ∈ L iff:
A ⊑ B and B ⊑ C (C subsume both A and B),
∄ D ∈ L such that A ⊑ D, B ⊑ D and D ⊆ C (i.e., there is
no common subsumers to A and B which is subsumed strictly
by C)
The next algorithm is to compute the LCS where input are
the normal form of two concepts A1 and A2 and the output
is the LCS of A1 and A2.
Let a and b two normal forms A and B with a and b ̸= b0
(b0 is the normal form of ⊥).
Algorithm 1 LCS
Require: a=≺ aθ,aθ ≻C and b=≺ bθ,bθ ≻C two normal forms
of A and B.
Ensure: c=≺ cθ,cθ ≻C the normal form of LCS(A,B)
cθπ ← aθπ ∩ bθπ
cθr ← ∅
for all ≺r, d ≻ ∈ aθr do
if ∃ ≺r, e ≻ ∈ bθr then
f ← LCS(d,e)
cθr ← cθr ∪ ≺r, f ≻
end if
end for
cθϵ ← aθϵ ∩ bθϵ
cδπ ← aδπ ∩ bδπ
cδr ← ∅
for all ≺r, d ≻ ∈ aδr do
if ∃ ≺r, e ≻ ∈ bδr then
f ← LCS(d,e)
cδr ← cδr ∪ ≺r, f ≻
end if
end for
cδϵ ← aδϵ ∩ bδϵ
Our system can be used in differents application; we choose
to use to model an access control model.
V. APPLICATION TO ACCESS CONTROL
To show how we can use our description logic-based
system and how we can infer a new knowledge, we deﬁne a
knowledge base adapted to formalize a dynamic access control
model.
In this model, authorization to subject are assigned depend-
ing on context. We consider ﬁrst that the context is by default
normal, and we represent it using the operator of default (δ).
Then, each change of context is considered as an exception to
the current context, this change is represented by the operator
of exception (ϵ). We give, as an example, one ABox of a
medical information system to show how authorization can be
deduced.
- Using the instances in Table 1, the system infers that in
organization X, each person who play the role of Patient is by
default permitted to consult his Med-rec and add this instance
to the ABox : δPermission(P1).
where:
δPermission(P1) ⊑ PermisionAv.Activity(Consult)⊓
PermissionR.Role(Patient)⊓PermissionV.V iew(Med−
rec) ⊓ PermissionOr.Organization(X)
Using the previous ABox, we show how deduction can be
done in differents contexts.
• Access control in a default context: Suppose that
user Marc wants to read Med-rec1; can he obtains that
privilege?
We know that:
-Marc plays role of Patient in organization X: Em-
ploy(E1);
-and, Med-rec1 is an object used in the view Med-rec:
Use(U1);
-and, Read is considered as a consultation activity: Con-
sider(C1);
-and ﬁnally, by default, in organization X, each per-
son who plays the role of Patient is permitted to con-
sult his Medical records, when Normal context is true:
δPermission(P1).
Formally, we write:
Employ(E1)
⊓
Use(U1)
⊓
Consider(C1)
⊓
δPermission(P1)
Using security rules, we can deduce that the preceding
proposition subsumes δIs − permitted(I1).
where:
Is
−
permitted(I1)
⊑
Is
−
permittedAc.Action(Read)
⊓
Is
−
permittedS.Subject(Marc)
⊓
Is
−
pemittedO.Object(Med − rec1)
And
because
Is − permitted(I1)
⊑
δIs −
permitted(I1), we can deduce that Marc is permitted
to read his medical records.
• Access control if context “Serious-disease” is true:
Suppose that Marc has a serious disease and he wants
to read his medical records; did he have this right?
In the context Serious-disease, the system deduce a new
instance P2 and we add to the ABox the next rule:
Permision(P1)ϵ ⊑ δPermission(P2)
We know that:
-Marc plays role of Patient in organization X: Em-
ploy(E1);
-and, Med-rec1 is an object used in the view Med-rec:
Use(U1);
-and, Read is considered as a consultation activity: Con-
sider(C1);
-and ﬁnally, by default, in organization X, each person
who plays the role of Patient is permitted to consult his
Medical records, when context Serious-disease is true:
δPermission(P2).
We obtain:
Employ(E1)
⊓
Use(U1)
⊓
Consider(C1)
⊓
δPermission(P2)
≡
Employ(E1) ⊓ Use(U3) ⊓ Consider(C1) ⊓
δPermission(P1)ϵ
28
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

ABox
Organization(X);
Role(Patient);
Subject(Marc);
View(Med-rec);
Object(Med-rec1);
Action(Read);
Activity(Consult);
Employ(E1) ⊑ EmployS.Subject(Marc) ⊓ EmployR.Role(Patient)
⊓EmployOr.Organization(X);
Use(U1) ⊑ UseO.Object(Med − rec1) ⊓ UseV.view(Med − rec)
⊓UseOr.Organization(X);
Consider(C1) ⊑ ConsiderAc.Action(Read) ⊓ ConsiderAv.Activity(Consult)
⊓ConsiderOr.Organization(X);
TABLE I
ABOX
We know that Aϵ ≡ δAϵ, we obtain:
≡
Employ(E1) ⊓ Use(U1) ⊓ Consider(C1) ⊓
Permission(P1)ϵ
Using security rules, we can deduce that the precedent
proposition subsumes Is − permitted(I1)ϵ.
And,
because
Is − permitted(I1)
̸⊑
Is −
permitted(I1)ϵ, we cannot deduce Is-permitted(I1).
Therefore Marc is not permitted to read his medical
records when he has a serious disease.
Our policy language allows us to have more than one
exception in a context. Exception at an even level cancel
the effects of exceptions and therefore infers the property by
default [6].
Supose that we have a disjunction of context, for example
”context default or context serious disease”, here we can use
the connective ”lcs” to deduce permission
• lcs(default context, context of serious disease): Suppose
that user Marc wants to read Med-rec1; can he obtain that
privilege?
We know that:
-Marc plays role of Patient in organization X: Em-
ploy(E1);
-and, Med-rec1 is an object used in the view Med-rec:
Use(U1);
-and, Read is considered as a consultation activity: Con-
sider(C1);
and we have the two previous permissions Permission(P1)
and Permission(P2), deﬁned respectively for the default
context and context of serious disease.
We obtain:
Employ(E1)
⊓
Use(U1)
⊓
Consider(C1)
⊓
lcs(δPermission(P1), δPermission(P2))
≡
Employ(E1) ⊓ Use(U3) ⊓ Consider(C1) ⊓
lcs(δPermission(P1), δPermission(P1)ϵ)
using lcs properties, we obtain:
≡
Employ(E1) ⊓ Use(U1) ⊓ Consider(C1) ⊓
δPermission(P1)
Using security rules, we can deduce that the precedent
proposition subsumes δIs − permitted(I1).
And,
because
Is − permitted(I1)
⊑
δIs −
permitted(I1), we can deduce Is-permitted(I1). There-
fore Marc is permitted to read his medical records when
he has a serious disease or when the context is normal.
VI. CONCLUSION
The work presented in this paper has led to the deﬁnition
of a new system based on description logic expressive enough
to be used as part of an application and to represent default
knowledge and exceptional knowledge. The JClassic+
δϵ high-
lights the interests and the relevance of defaults in conceptual
deﬁnition. For the JClassic+
δϵ language, we have given a set
of axioms outlining the essential properties of the connectives
from this deﬁnitional point of view: property links default
characteristics to exceptional or strict ones. This set of axioms
induces a class of CL+
δϵ-algebra of which the terms are concept
descriptions. Using the conjunction connectives ⊓ and ”lcs”,
the set of concept can be partially ordered w.r.t the equational
system (descriptive subsumption in free algebra). JClassic+
δϵ
is deﬁned with a universel algebraic corresponding to a deno-
tational semantic, where terms are denoted exactly by sets of
strict and default properties.
This system consists of three modules: a module for rep-
resenting knowledge, a module to use that knowledge and a
module to update knowledge. The module which allows to use
knowledge is endowed with a subsumption algorithm which
is correct, complete and polynomial.
In our work, the description logic is endowed with an
algebraic intensional semantics, in which concepts are denoted
by a normal form of all their properties. These normal forms
(i.e., elements of the intensional semantic) are used directly
as an input to the algorithm of subsumption and algorithm of
deductive inferences.
To show how we can use our system, we applied it to
access control. We developed a contextual access control
model in which authorization are assigned to users depending
on context. We represent this kind of authorization using the
two operators of default (δ) and exception (ϵ).
An interseting topic for future research is to extend our
tool to take into account spacial-temporal context to make our
system more expressive with keeping a reasonable complex-
29
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

ity. We also envisage to explore other appropriate and real
applications.
REFERENCES
[1] V. Ventos and P. Br´esellec. Least Common Subsumption as a connective.
In Proceeding of International Workshop on Description Logic, Paris,
France, 1997.
[2] V. Ventos, P. Br´esellec and H. Soldano.
Explicitly Using Default
Knowledge in Concept Learning: An Extended Description Logics Plus
Strict and Default Rules.
In Logic Programming and Nonmonotonic
Reasoning, 6th International Conference, LPNMR 2001, pp. 173-185,
Vienna, Austria, September 17-19, 2001.
[3] F.M. Donini, M. Lenzerini, D. Nardi, and W. Nutt.
The complexity
of concept languages.
In Principles of language representation and
reasoning: second international conference, pp. 151-162, 1991.
[4] N. Boustia and A. Mokhtari.
A dynamic access control model.
In
Applied Intelligence Journal, DOI 10.1007/s10489-010-0254-z, 2010,
To appear.
[5] A. Borgida and P.F. Patel-Schneider Complete algorithm for subsump-
tion in the CLASSIC description logic. Artiﬁcial Intelligence Research,
vol 1, pp. 278-308, 1994.
[6] F. Coupey and C. Fouquer´e.
Extending conceptual deﬁnitions with
default knowledge. Computational Intelligence, vol 13, no 2, pp. 258-
299 , 1997.
[7] N. Boustia and A. Mokhtari. Representation and reasoning on ORBAC:
Description Logic with Defaults and Exceptions Approach. In Workshop
on Privacy and Security - Artiﬁcial Intelligence (PSAI), pp. 1008-1012,
ARES’08, Spain, 2008.
[8] N. Boustia and A. Mokhtari. DLδϵ − OrBAC: Context based Access
Control. In WOSIS’09, pp. 111-118, Italy, 2009.
[9] R.J. Brachman, D.L. McGuinness, P.F. Patel-Schneider, L. Alperin
Resnick, and A. Borgida. Living with CLASSIC: When and How to Use
a KL-ONE-Like Language. In John Sowa, ed., Principles of Semantic
Networks: Explorations in the representation of knowledge, pp. 401-456,
Morgan-Kaufmann: San Mateo, California, 1991.
[10] R.J. Brachman, D.L. McGuinness, L. Alperin Resnick, and A. Borgida.
CLASSIC: A Structural Data Model for Objects. In Proceedings of the
1989 ACM SIGMOD International Conference on Management of Data,
pp. 59-67, June 1989.
30
COMPUTATION TOOLS 2011 : The Second International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-159-5

