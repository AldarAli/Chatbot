Anonymous Access to Trust Information Using k-anonymity Chord
Ahmet Burak Can
Department of Computer Engineering
Hacettepe University
06800 Ankara/Turkey
abc@hacettepe.edu.tr
Bharat Bhargava
Department of Computer Science
Purdue University
West Lafayette, IN 47907 USA
bb@cs.purdue.edu
Abstract—In a reputation based trust network, each peer
stores trust information of others and answers the trust queries,
in addition to providing services to others. We present a
cryptographic protocol on Chord, which provides anonymous
access to trust information. Peers form anonymity groups and
generate responses inside the group. Responder of a trust query
has k-anonymity protection against an adversary who can sniff
all communication on the network. Moreover, our encryption
scheme ensures that the initiator of a trust query can check
the validity of an anonymous reply.
Keywords-anonymity, trust management, peer-to-peer
I. INTRODUCTION
Trust is fundamental to achieve collaborative tasks in a
peer-to-peer system. When organizing, sharing, and search-
ing resources, trustworthy peers are identiﬁed based on the
trust information. Due to the large scale and distributed
nature of peer-to-peer systems, a centralized entity cannot
track a massive number of peer interactions and manage all
trust information. Consequently, the burden should be shared
among the peers, whereby each peer can become a trust
holder [1], [2]. A trust holder needs anonymity to protect
itself against malicious peers. Such protection motivates a
peer to perform the trust holding duty and may prevent
denial of service attacks, making information more available.
In peer-to-peer systems, several methods are studied to
protect anonymity: limitations on routing information ex-
change [3], probabilistic random path building [4], [5], and
ﬂooding [6], [7], [8]. These methods are vulnerable to global
passive adversaries who can sniff all the communication on
the network. Mix networks [9] or onion routers [10] might be
adapted for peer-to-peer systems. Trusted mix nodes encrypt
and shufﬂe the network trafﬁc so a global passive adversary
can not determine who is communicating with whom. In an
ideal solution, peers should organize themselves to protect
anonymity and should not depend on trusted nodes. This is
more adequate for the decentralized nature of peer-to-peer
systems.
We propose k-anonymity Chord [11] to protect the
anonymity of a trust holder when responding to trust queries.
As in most peer-to-peer systems [12], we assume the ex-
istence of a bootstrap peer, which is a connection point to
the network. Peers register their pseudonyms and encryption
keys to the bootstrap peer when joining the network for the
ﬁrst time. A new peer obtains some certiﬁcates during the
registration and then, joins two overlay networks: service
and trust networks. The service network can be any network
substrate, e.g., Gnutella[12], Freenet [6]. In a service request,
a peer queries the service network to ﬁnd a particular service
such as a ﬁle. Several service providers respond to the query
and send back their certiﬁcates to the requester. For each
service provider, the requester sends trust queries to the
trust network. This network must overlay on k-anonymity
Chord, which runs the oblivious reply protocol to protect
anonymity of trust holders. Peers form anonymity groups of
size k. Each peer in an anonymity group sends back a trust
reply after receiving a trust query. A peer’s reply can not
be distinguished from the replies of others. Thus, the real
responder has k-anonymity protection against global passive
adversaries. The requester can check the authenticity of trust
replies to identify fake replies of malicious peers.
Section II explains the related research. Section III
presents the encryption architecture, peer registration, and
communication during service and trust queries. Section
IV introduces k-anonymity Chord and the oblivious reply
protocol. Section V gives a discussion about performance
considerations and other issues. Section VI outlines the
conclusions and results of our work.
II. RELATED WORK
Various methods have been studied to protect anonymity
in computer networks. We outline some of the prominent
methods as follows.
Mix networks and onion routers. Mix networks are ﬁrst
proposed by Chaum [9] to protect anonymity of commu-
nicating parties for delay tolerant applications. Trusted mix
nodes use cover trafﬁc to shufﬂe messages so an adversary
can not determine who is communicating with whom. Onion
routers [10] form an overlay network to build anonymous,
bi-directional virtual circuits for real-time communication.
While mix networks are designed for delay tolerant applica-
tions, e.g., e-mail systems, onion routing is more feasible for
real-time applications such as HTTP. Tor [13] extends onion
routing with forward secrecy, congestion control, integrity
checking and conﬁgurable exit policies. Our approach aims
14
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

to protect anonymity without relying on a trusted mix nodes
or onion routers so it should be considered in a different
category of anonymity systems. In our approach, peers
register themselves to a trusted peer but this peer does not
participate in the anonymity protocol.
DC-Nets. Chaums dining cryptographer networks (DC-
net) [14], provide unconditional sender anonymity in a group
of participants. If the group size is N, this approach re-
quires O(N 2) message exchange for each message sending
operation. Furthermore, before sending a message, O(N 2)
encryption keys should be distributed among N participants
using a secure external method. This makes Chaums DC-net
impractical for real life scenarios.
Buses. In the bus [15] approach, synchronous message
tokens traverse in the network forever. When a peer receives
a bus, it ﬁlls some seats with encrypted messages or dummy
messages if it does not have any real message. When a bus
arrives to a receiver, all or some related seats are decrypted
to get the message. Ren et. al [16] applied this approach on
peer-to-peer networks and circulated bus tokens on overlay
rings. Although the bus approach can protect sender/receiver
anonymity, the bus must traverse the network forever even
the nodes do not have any real message.
Flooding. Freenet [6] and Freehaven [7] ﬂood the stor-
age requests in peer-to-peer storage systems to protect the
requester and responder anonymity. Since no peer on the
ﬂooding path knows the whole path, it is hard to determine
the requester and responder. Trustme [8], ﬂoods encrypted
trust queries to the network and trust holders send back
authenticated replies. Han and Liu [17] split a query into
n shares and send the shares to neighbors in a peer-to-
peer network. The peers who take t shares can decrypt
and ﬂood the query. The responder builds an onion path
to the requester and sends the response on this path. MuON
[18] uses a gossip protocol to reduce the trafﬁc caused by
query ﬂooding. In all of these approaches, ﬂooding protects
anonymity if the adversary can not sniff the whole network.
Additionally, excessive network trafﬁc caused by ﬂooding
reduces the scalability of these systems.
Random path building. In Crowds [4], nodes form
anonymity groups (crowds) and randomly forwards the
requests in the crowd to protect the requester anonymity.
Tarzan [5] establishes a random tunnel between a peer and
an Internet server to protect the peers anonymity. Since
none of the peers on a tunnel know the whole path, the
initiator of a request can not be determined. MorhpMix [19]
deﬁnes a peer-to-peer mix network where random mix nodes
are selected during an anonymous communication. These
approaches protect anonymity if the adversary can not sniff
the whole communication path.
Changing the routing method. Anonymity has been stud-
ied on Chord by using recursive, randomized, indirect,
split, bidirectional routing [20]. Achord [3] deﬁnes routing
limitations on Chord to provide censorship resistance. These
schemes offer anonymity protection in a local adversary
model and can not protect anonymity against a global
passive adversary.
III. ARCHITECTURE
We assume the existence of a bootstrap peer (bp), which
provides a connection point to the network for new peers.
There might be multiple bootstrap peers to provide tolerance
to failures and attacks. For simplicity of the notation, the
rest of the paper considers one bootstrap peer, which is a
basic certiﬁcation authority for pseudonyms and encryption
keys. It has a public/private key pair {Ubp, Rbp}. We assume
all peers learn Ubp in a secure way, e.g., through a secure
web site. A peer registers itself to the bootstrap peer when
joining the network for the ﬁrst time. During the registration,
the bootstrap peer issues some certiﬁcates for the new peer.
Pi
denotes the ith
peer. IDi
and TIDi
are the
pseudonyms of Pi in the service and trust networks respec-
tively. While IDi is selected by Pi before registration, TIDi
is assigned by the bootstrap peer during the registration. IDi
and TIDi have no relation with each other. {Ui, Ri} is Pi’s
public/private key pair for the service network operations.
For the trust network, it has {TUi, TRi} and {OUi, ORi}
key pairs. All key pairs are randomly selected by Pi and have
no relation with each other. We assume that peers have good
random number generators to prevent brute force guessing
attacks.
If K is a public key or a symmetric encryption key, K(M)
stands for the encryption of M with key K for message
conﬁdentiality. When K is a private key, the operation is
considered as signing of M. H[M] is the hash digest of M.
X|Y denotes the concatenation of X and Y .
A. Adversary Model
An adversary tries to learn the pseudonym (TID) or IP
number of a trust holder. It (we assume that an adversary
is a peer so we will use ”it”) might have passive attack
capability, e.g., snifﬁng the network communication. It may
collaborate with some peers and launch attacks by coordi-
nating with them. A local passive adversary can perform
passive attacks only in a limited number of networks links.
A global passive adversary can perform passive attacks on
all links of a network. It has polynomial time computational
capabilities and can not break cryptographic algorithms in
polynomial time. Semi-honest adversary model [21] means
that an adversary stays complaint with the protocols but may
observe the network communication to obtain information.
B. Peer Registration
To demonstrate registration operation, we assume that Pi
is joining the network for the ﬁrst time and registering itself
to the bootstrap peer as follows:
1) Pi sends Ubp(IDi|Ui|TUi|OUi|r1) to the bootstrap
peer as a registration request. r1 is a random value
15
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

2.Challenge-Response
1. Registration Request
4. Trust Certificate(s)
5.Trust Holder Certificate(s)
3.Service and Oblivious Reply Certificates
)
|
|
|
|
(
1r
OU
TU
ID U
U
i
i
i
i
bp
))
|
|
(
|)
|
|
(
(
TS
TID OU
R
TS
ID U
R
U
i
i
bp
i
i
bp
i
))
|
|
|
|
|
(
(
;
TS
THN
MTID
RID TU
ID
R
U
i
j
j
i
bp
i
))
|
|
(
(
TS
TU
RID
R
TU
j
i
bp
j
iP
jP
Bootstrap Peer
Figure 1.
Registration of Pi to the bootstrap peer
selected by Pi. Only the bootstrap peer can read the
contents due to the encryption. It decrypts the request
and stores IDi, Ui, TUi, OUi for future accountability.
2) The bootstrap peer runs a challenge-response protocol
to verify that Pi has Ui, TUi, OUi keys.
3) Assuming
Pi
passed
step
2,
the
bootstrap
peer
selects
TIDi
value
and
sends
back
Ui(Rbp(IDi|Ui|TS)|Rbp(TIDi|OUi|TS))
to
Pi.
Only Pi can decrypt the message and check if
TS value is same. Rbp(IDi|Ui|TS) is a service
certiﬁcate. Pi sends this certiﬁcate to peers who
request Pi’s services. It proves Pi’s registration to the
service requester. Rbp(TIDi|OUi|TS) is an oblivious
reply certiﬁcate, which is used during the oblivious
reply operations explained in Section IV-C. It also
informs Pi about its TIDi.
4) The bootstrap peer randomly selects Pi’s trust holders.
Let Pj be such a trust holder. The bootstrap peer
sends Ui(Rbp(IDi|RIDi|TUj|MTIDj|THNi|TS))
to
Pi.
The
inner
part,
Rbp(IDi|RIDi|TUj|MTIDj|THNi|TS),
is
the
trust certiﬁcate, which means that a peer associated
with MTIDj value and TUj key will store Pi’s
trust information. MTIDj, explained in Section IV,
is an anonymized value of TIDj and represents a
range of peers instead of a particular peer. Using this
certiﬁcate, Pi or another peer can send trust queries
destined to Pj, but can not learn Pj’s identity. RIDi
is a random value to hide Pi’s real identity from its
trust holder, Pj. THNi is the number of Pi’s trust
holders determined by the bootstrap peer.
5) The bootstrap peer sends a trust holder certiﬁcate
to each trust holder. For example, Pj’s trust holder
certiﬁcate is Rbp(RIDi|TUj|TS). This certiﬁcate in-
forms Pj about its trust holding duty on Pi’s trust
information. To protect Pi’s anonymity, IDi is not
added to the certiﬁcate. Pj does not know Pi’s identity
but it can answer trust queries by using RIDi value.
A service certiﬁcate and related trust certiﬁcates expire
according to TS ﬁeld. The owner of an expired service
certiﬁcate requests a new one from the bootstrap peer. Figure
1 brieﬂy explains the peer registration operation.
1. Service
request
Service 
Overlay
2. Service Certificate
1
5. Trust Query
5
6
4. Trust Certificate(s)
3. Challenge/Response
6. Trust Reply
Trust 
Overlay
)
|
|
(
TS
U
ID
R
i
i
bp
)
|
|
|
|
|
(
MTID THN TS
ID RID TU
R
i
j
j
j
i
bp
)
|
|
(
|
|
i
j
rj
j
j
RID
TU
K
TU
TS
MTID
′
iP
jP
rP
Figure 2.
Pr is searching for a service provider (Pi) and then, querying
its trust information
C. Searching a Service Provider and Sending a Trust Query
Assume that Pi is a service provider, Pj is a trust holder
of Pi, and Pr requests a service from Pi. Figure 2 shows
the message exchanges during a service request and a trust
query. In Step 1, Pr sends a query to the service network
to ﬁnd a service, e.g., a particular ﬁle. Assuming Pi has
the service, it sends back a reply message containing its
service certiﬁcate, Rbp(IDi|Ui|TS) (Step 2). Pr veriﬁes
the certiﬁcate using Ubp and runs a challenge/response
protocol to authenticate Pi (Step 3). Then, Pi sends its
trust certiﬁcates to Pr (Step 4). In our case, Pr receives
only Rbp(IDi|RIDi|TUj|MTIDj|THNi|TS), which is
the trust certiﬁcate for trust holder Pj. If IDi, TS values
match with the values from the service certiﬁcate, Pr ensures
that Pj is a legitimate trust holder. However, Pr can not learn
Pj’s identity. If there are other trust holders, THNi value
informs Pr about the existence of other trust holders and
forces Pi to send all certiﬁcates.
After verifying service and trust certiﬁcates, Pr sends
a trust query, MTIDj|TS′|TUj(Krj|TUj|RIDi), to the
trust network (Step 5). TS′ is a time-stamp and unique
among Pr’s queries. Krj is a random session key, which
can only be learned by Pj due to encryption with TUj.
The encrypted part, TUj(Krj|TUj|RIDi), includes TUj
and RIDi ﬁelds to prevent forgery of the content. Pj checks
these values and understands if the query is destined to itself.
In Step 6, Pj sends back a trust reply message. The details
of Step 5 and 6 will be explained in the next section.
IV. k-ANONYMITY CHORD
Chord [11] is a distributed hash table (DHT) designed
for peer-to-peer networks. Chord’s algorithm assigns each
resource to a particular peer. We use Chord to access trust
information efﬁciently. However, anonymity of a trust holder
can not be protected on Chord when responding to a trust
query. A responder can be identiﬁed since peers partially
learn the network structure using Chord’s ﬁnger tables.
Additionally, a peer may learn more about an arbitrary part
of the address space by sending excessive ﬁnger requests
[3]. This makes guessing a responder easier without having
global snifﬁng ability.
16
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

We propose the oblivious reply protocol on Chord to
provide k-anonymity protection for trust holders. This means
that a trust holder’s identity can not be distinguished from
k other peers when responding to trust queries. We call
this DHT structure k-anonymity Chord, which performs
peer join, leave, and ﬁnger table maintenance operations
like a normal Chord ring. However, the search operation is
modiﬁed to protect anonymity of the responder. In our case,
the trust network overlays on a k-anonymity Chord ring. A
peer joins the trust network with its TID value, e.g., Pj
joins with TIDj. For the rest of the section, we assume
that Pi is a service provider, Pj is a trust holder of Pi and
Pr wants to get a service from Pi.
A. Formation of Anonymity Groups
As explained in Section III-C, Pr obtains Pi’s service
and trust certiﬁcates during its service request and prepares
a trust query destined to Pj. However, Pr can not send the
query directly to Pj since it does not know TIDj. It sends
the query on the k-anonymity Chord by putting MTIDj
value to the query message. MTIDj is an anonymized
version of TIDj where the last m bits are set to zero. In
a trust query, MTIDj represents the range of pseudonyms
between MTIDj and MTIDj + 2m. We call this range
search range and the peers in the search range target peers.
The bootstrap peer decides the value of m so that the
expected number of target peers in a search range is equal to
k. Since the bootstrap peer registers all peers, it can compute
a precise m value. To explain MTIDj selection, we give a
numerical example.
Chord peers are located on a 2n circular address space
where n is the length of a TID. We assume that the
bootstrap peer uniformly distributes peers on this address
space. Suppose that n = 32, k = 64, TIDj = 12345678H
and there are 216 peers in the network. Let X be an indicator
random variable that represents if there is a peer on a
particular location (When X = 1, there is a peer on that
location). The probability of X = 1 is
P(x = 1) = 216
232 =
1
216
and the expected number of nodes on a particular location
is
E[X] =
∑
x
x · P(x) = 1 · P(x = 1) + 0 · P(x = 0) =
1
216
Let Y be a random variable representing the number of
peers that fall into a search range. The bootstrap peer selects
a search range that has Y ≥ k = 64 expected number of
peers. Let S be the number of locations in a search range.
Due to the uniformity of peer distribution, the expected
number of peers in the search range is
E[Y ] = E[X] · S =
1
216 · S ≥ 64
The bootstrap peer ﬁnds that S ≥ 224. This inequality
suggests us that m ≥ log2 S = log2 224 = 24.
Then,
the
bootstrap
peer
computes
MTIDj
as
MTIDj = 12345678H ∧ FF000000H = 12000000H.
This means that Pj has a TIDj value between 12000000H
and 12FFFFFFH. The expected number of peers in this
range is 64 due to our selection.
B. Routing a Trust Query
Let P0, P1 . . . Pk−1 be k target peers in MTIDj and
MTIDj + 2m range and Pj be one of the target peers. By
this deﬁnition, P0 is the owner of MTIDj value. We deﬁne
a two-phase routing method for trust queries. The ﬁrst phase
is a recursive Chord search to ﬁnd P0, the owner of MTIDj
value. Pr starts the ﬁrst phase by preparing a trust query,
MTIDj|TS′|TUj(Krj|TUj|RIDi), for Pj. It looks up its
ﬁnger table, sends the query to the closest peer preceding
P0. The receiving peer forwards the query to another one
by looking up MTIDj value in its ﬁnger table. Forwarding
operation continues until P0 receives the query. TS′ value
gives a hint for the expiration time. Each forwarding peer
caches the query to send the trust reply back to Pr.
After the query reaches to P0, the second phase starts and
the oblivious reply protocol runs to send the query to Pj and
get its reply anonymously. The following section explains
this protocol. In the attack scenarios, Pr tries to identify Pj
by snifﬁng the network or obtaining collaborators. Note that,
Pi may pretend to be Pr to learn Pj’s identity.
C. Oblivious Reply
Oblivious reply is a cryptographic protocol to protect
anonymity of a trust holder against a global passive adver-
sary. This protocol is secure against collaborating passive
adversaries in semi-honest adversary model [21]. The basic
idea is that each target peer generates a separate trust reply.
These replies can not be linked with the senders and Pj’s
reply can not be tracked during the operation of protocol.
The protocol has several assumptions:
• Each target peer knows its search range and the other
target peers in the search range. Additionally, each
target peer knows its exact location in the range, i.e,
the number of hops from P0 and Pk−1.
• All target peers exchange their Rbp(TIDi|OUi|TS)
certiﬁcates. Once the certiﬁcates are exchanged, they
can be used in many trust queries.
• The public key encryption scheme ensures semantic se-
curity [22]. This implies that the result of an encryption
depends on the message, key, and a sequence of coin
tosses. Thus, encryption of a message with the same
public key results in a different cipher text in each trial.
However, the decryptions of these cipher texts give the
same plain text.
• The public key encryption scheme is not commutative,
which means that A(B(M)) ̸= B(A(M)).
17
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

After P0 receives Pr’s query, each target peer forwards
the query until Pk−1 receives it. Pk−1 tries to decrypt the
contents of the query. If the decryption is successful, it
prepares Ok−1
k−2 as follows:
Ok−1
k−2
=
OUk−2(Ok−1
k−3)
Ok−1
k−3
=
OUk−3(Ok−1
k−4)
· · ·
Ok−1
1
=
OU1(Ok−1
0
)
Ok−1
0
=
OU0(Krj(TVi|RIDi|TS′)|AB)
Ok−1
k−2 denotes Pk−1’s oblivious reply, which is destined to
Pk−2. The last ﬁeld, AB, is the authenticity bit. It is set to
1 if the reply is authentic.
If the decryption fails, Pk−1 generates a false obliv-
ious
reply.
The
innermost
layer
of
Ok−1
k−2
contains
Krandom(RTV |RHID|TS′)|AB as the content. Krandom
is a randomly generated key. RTV and RHID are random
trust and hash values respectively. These random values
should have the same amount of bits as authentic values. AB
is set 0 to indicate that the reply is inauthentic. Due to the
layered encryption, only P0 can read AB ﬁeld. Therefore,
Pk−1’s oblivious reply will look same for other peers. For
the rest of the paper, we will use ”reply” and ”oblivious
reply” terms interchangeably. The protocol runs as follows:
1) Pk−1 sends MTIDj|TS′|Ok−1
k−2 to its predecessor,
Pk−2.
2) Pk−2 decrypts the top layer of Ok−1
k−2, which be-
comes Ok−1
k−3. Then, Pk−2 prepares Ok−2
k−3 and sends
MTIDj|TS′|(Ok−1
k−3 ∪ Ok−2
k−3) to Pk−3. The operation
∪ denotes the concatenation in random order. Since
Ok−1
k−3 and Ok−2
k−3 are encrypted and contain the same
number of bits, Pk−3 can not distinguish these replies
after the randomization of their order.
3) Pk−3 decrypts the top layers of Ok−1
k−3 and Ok−2
k−3. It
creates Ok−3
k−4 and sends MTIDj|TS′|(Ok−1
k−4∪Ok−2
k−4∪
Ok−3
k−4) to Pk−4.
4) This operation is repeated by all target peers until P0
receives MTIDj|TS′|(Ok−1
0
∪ . . . ∪ O2
0 ∪ O1
0). After
decrypting the last layers, it checks AB ﬁelds and
determines the authentic reply. P0 sends this reply to
the previous peer on Pr’s query path. All peers on the
path repeat the same operation until Pr receives the
reply. If there are multiple replies with AB = 1, all of
them are sent to Pr since only Pr can determine the
authentic one. If P0 = Pj, it ignores all replies and
generates its own reply and sends it to Pr.
5) Pr decrypts the reply using Krj. If the reply is
containing the correct RIDi and TS′ values, it is
authentic. A malicious peer can not forge an authentic
reply since it can not obtain Krj.
−1
kp
−2
kp
−3
kp
1p
0p
1
2
|
|
−
−
′
k
k
i
O
TS
MTID
)
(|
|
2
3
1
3
−
−
−
−
′
k
k
k
k
i
O
O
MTID TS
U
)
(|
|
2
1
3
1
2
1
1 1
O
O
O
O
TS
MTID
k
k
i
U
UKU
U
−
−
′
)
(|
|
1
0
2
0
3
0
2
0
0 1
O
O
O
O
O
TS
MTID
k
k
i
U
U
UKU
U
−
−
′
)
(|
|
3
4
2
4
1
4
−
−
−
−
−
−
′
k
k
k
k
k
k
i
O
O
O
MTID TS
U
U
M
Figure 3.
Message communication among target peers in the oblivious
reply protocol
Figure 3 shows the ﬂow of oblivious replies among
target peers. If Pr is a global passive adversary, it can
observe all the communication among target peers but it
can not identify the sender of any reply. Identical reply
sizes, semantic security assumption, layered encryption of
replies, and randomization of their order on each target peer
do not allow Pr to trace the replies. The oblivious reply
protocol provides k-anonymity protection for trust holders
as long as adversaries perform passive attacks. Due to space
limitations, we can not give the proofs of our claim in this
paper. Interested readers may refer to [23]. For a better
understanding of our encryption scheme, similar ideas in
[9], [14], [10] can be referred.
The oblivious reply protocol can not protect anonymity
if adversaries perform active attacks, e.g. forging replies,
dropping selected replies, skipping a target peer. If a target
peer can be forced to stay complaint with the rules of
oblivious reply protocol, these attacks can be prevented.
Goldreich [21] shows that semi-honest behavior can be
forced by compiling each instruction (message).
V. DISCUSSION
Performance Considerations. We consider the message
complexity to evaluate the performance of oblivious reply
protocol. A reply is forwarded up to O(k) times. For k
replies, O(k2) network packets are forwarded in phase 2.
More than one reply can be sent in the same network
packet for efﬁciency. Assuming η is the number of replies
in a network packet, phase 2 can be performed with up
to O(k2/η) network packets. Note that the size of a reply
decreases and η increases as replies are getting closer to P0.
Sending
trust
holder
certiﬁcates.
In
Section
III-B,
the bootstrap peer sends a separate certiﬁcate to each
trust
holder
in
step
6.
If
a
global
passive
adver-
sary observes the bootstrap peer during this step, it
18
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

can learn Pj’s identity. Therefore, the bootstrap peer
sends
a
special
message
containing
Pj’s
certiﬁcate,
MTIDj|TS′|TUj(RBS(H[IDi]|TUj|TS))|”Cert” to the
trust network like a normal trust query. The last ﬁeld in the
message indicates that this message is a certiﬁcate, not a
trust query. All target peers forward the message till the last
peer in the search range receives it. Due to the encryption
with TUj, only Pj can read the content of the message. No
peer can understand who is the receiver of the certiﬁcate.
VI. CONCLUSION
In a peer-to-peer system, defending anonymity against
only local attacks results in a weak anonymity protection.
An adversary with global passive attack capabilities or with
some collaborators may learn about the anonymous peer by
launching collaborative attacks. The oblivious reply protocol
provides k-anonymity protection for a trust holder against
global passive adversaries. The protocol requires O(k/η)
message exchanges where k is the group size and η is the
number of reply messages that can ﬁt into a network packet.
The oblivious reply protocol can be adapted to other DHT
structures or applications that need responder anonymity.
Moreover, our ideas can be used to support requester
anonymity. A group of peers may generate an anonymous
request so the identity of the requester is protected.
REFERENCES
[1] K. Aberer and Z. Despotovic, “Managing trust in a peer-2-
peer information system,” in Proceedings of the 10th Inter-
national Conference on Information and knowledge manage-
ment (CIKM), 2001.
[2] S. Kamvar, M. Schlosser, and H. Garcia-Molina, “The (eigen-
trust) algorithm for reputation management in P2P networks,”
in Proceedings of the 12th World Wide Web Conference
(WWW), 2003.
[3] S. Hazel and B. Wiley, “Achord: A variant of the chord lookup
service for use in censorship resistant peer-to-peer publishing
systems,” in Proceedings of the First International Workshop
on Peer-to-Peer Systems (IPTPS), 2002.
[4] M. Reiter and A. Rubin, “Crowds: Anonymity for web
transactions,” ACM Transactions on Information and System
Security, vol. 1, no. 1, pp. 66–92, 1998.
[5] M. J. Freedman and R. Morris, “Tarzan: A peer-to-peer
anonymizing network layer,” in Proceedings of the 9th
ACM Conference on Computer and Communications Security
(CCS), 2002.
[6] I. Clarke, O. Sandberg, B. Wiley, and T. Hong, “Freenet:
A distributed anonymous information storage and retrieval
system,” in Proceedings of the First Privacy Enhancing
Technologies Workshop (PET), ser. LNCS, vol. 2009, 2001.
[7] R. Dingledine, M. Freedman, and D. Molnar, “The Free
Haven project: Distributed anonymous storage service,” in
Proceedings of the First Privacy Enhancing Technologies
Workshop (PET), ser. LNCS, vol. 2009, 2001.
[8] A. Singh and L. Liu, “Trustme: Anonymous management of
trust relationships in decentralized P2P system,” in Proceed-
ings of the 3rd IEEE Conference on Peer-to-Peer Computing
(P2P), 2003.
[9] D. Chaum, “Untraceable electronic mail, return addresses,
and digital pseudonyms,” Communications of the ACM, vol. 4,
no. 2, 1981.
[10] P. F. Syverson, D. M. Goldschlag, and M. G. Reed, “Anony-
mous connections and onion routing,” in Proceedings of the
IEEE Symposium on Security and Privacy, 1997.
[11] I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Balakr-
ishnan, “Chord: A scalable peer-to-peer lookup service for
internet applications,” in Proceedings of the ACM SIGCOMM,
2001.
[12] Gnutella.
http://en.wikipedia.org/wiki/Gnutella.
[13] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The
second-generation onion router,” in Proceedings of the 13th
USENIX Security Symposium, 2004.
[14] D. Chaum, “The dining cryptographers problem: Uncondi-
tional sender and recipient untraceability,” Journal of Cryp-
tology, vol. 1, pp. 65–75, 1988.
[15] A. Beimel and S. Dolev, “Buses for anonymous message
delivery,” Journal of Cryptology, vol. 16, no. 1, pp. 25–39,
2003.
[16] J. Ren, T. Li, and Y. Li, “Anonymous communications in
overlay networks,” in Proceedings of IEEE International
Conference on Communications (ICC), 2008.
[17] J. Han and Y. Liu, “Mutual anonymity for mobile p2p
systems,” IEEE Transactions on Parallel and Distributed
Systems, vol. 19, no. 8, pp. 1009–1019, 2008.
[18] N. Bansod, A. Malgi, B. K. Choi, and J. Mayo, “Muon:
Epidemic based mutual anonymity in unstructured p2p net-
works,” Computer Networks, vol. 52, no. 5, pp. 915 – 934,
2008.
[19] M. Rennhard and B. Plattner, “Introducing morphmix: Peer-
to-peer based anonymous internet usage with collusion de-
tection,” in Proceedings of the Workshop on Privacy in the
Electronic Society (WPES), 2002.
[20] N. Borisov and J. Waddle, “Anonymity in structured peer-to-
peer networks,” EECS Department, University of California,
Berkeley, Tech. Rep. UCB/CSD-05-1390, 2005.
[21] O. Goldreich, Foundations of Cryptography.
Cambridge
University Press, 2001, vol. 1.
[22] S. Goldwasser and S. Micali, “Probabilistic encryption & how
to play mental poker keeping secret all partial information,”
in Proceedings of the 14th annual ACM symposium on Theory
of Computing, 1982.
[23] A. B. Can, “Trust and anonymity in peer-to-peer systems,”
Ph.D. dissertation, Department of Computer Science, Purdue
University, 2007.
19
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

