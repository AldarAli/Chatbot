Improving Special Purpose Machine User-Interfaces by Machine-Learning Algorithms
Valentin Plenk
Institute of Information Systems
Hof University of Applied Sciences
95028 Hof, Germany
Email: valentin.plenk@iisys.de
Abstract—This paper proposes to make complex production ma-
chines more user-friendly. Improved machines help the operator
in case of an error message or a process event by displaying
recommendations, such as “in the last 10 occurences of this
event the operators performed the following keystrokes”. The
messages are generated from statistical data on former user-
interaction and previous process-events. The data represents the
knowledge of all the machine operators. The data is gathered
by logging user-interaction and process-events during regular
operation of the production machine. This approach allows to
store the operators’ expert knowledge in the production machine
without human intervention.
Keywords–machine-learning;
human
machine
interfaces;
special-purpose machines; production machines
I.
INTRODUCTION
State of the art appliances (e.g., photocopiers) are equipped
with user interfaces that help the operator ﬁx problems (e.g.,
a paper jam). The implementation of the software driving the
interface contains structured knowledge about error scenarios
and step by step instructions on how to deal with them.
While this approach leads to very well usable appliances,
its proliferation is hampered by the engineering effort required
for the deﬁnition of the error scenarios. This effort is only
economically reasonable, if it can be reﬁnanced over a large
number of appliances. In the context of production machines,
particularily special purpose machines, where the usual lot size
is in a range below 10 similar machines per annum [1], a
different approach is needed.
To deal with that problem, the author proposes to use
machine-learning algorithms to generate situation-speciﬁc user
guidance information from former user interactions and pre-
vious process events. Figure 6 shows a screenshot of the
prototype displaying recommendations for ﬁxing an error.
Similar applications of machine learning algorithms are
commonly used to enhance user interfaces in smartphones or
other IT-systems [2], [3]. In the production-machine sector,
however, the application of machine learning algorithms is
apparently limited to applications dealing with pattern de-
tection in process data or distingushing different datasets
[4]–[7]. In these papers the authors use the output of the
algorithms to detect errors or problems with production quality.
This information is then presented to the production-machine
operator, requesting him to deal with the situation. While this
approach undoubtedly helps to make processes more stable, it
also demands ever more expertise of the operators.
In Section II, we describe how we model the production-
process to make machine-learning applicable and give an
stock material 
(granulates)
transport spindle
Heating 
nozzle
electric drive
vacuum pump
~ 2,5 meters
Figure 1. Working principle of an extruder
(courtesy: Hans Weber Maschinenfabrik, Kronach, Germany)
overview of the system structure and the test environment. In
Section III, we detail how we generate the events for the model
and present the mechanisms generating the recommendations.
In Section IV we evaluate the recommendations generated by
our algorithm. Section V brieﬂy summarizes our ﬁndings so
far and then gives an outlook on our work plan for the future.
II.
PROPOSED APPROACH AND TEST ENVIRONMENT
Machine-learning algorithms work on event sequences.
Therefore we need to model the production process as a
sequence of events. Such an event represents one out of a
limited number of conditions and the time when the condition
became true. Some events are generated by the process, i.e.,
error messages, and some events are generated by the operator,
i.e., commands.
By logging these events over a signiﬁcant amount of time,
we can build a map of event sequences and their frequency.
Once the production machine encounters an error condition
and prompts the operator for interaction, we use this map to
ﬁnd user interactions that were made in prior occurrences of
the error condition and display a list of these interactions as
recommended actions (Figure 6).
We develop the system on a simulated production machine.
The machine in question is a plastics extruder (see Figure 1).
The basic purpose of this machine is to transport and melt
plastic granulates by means of a threaded spindle towards a
nozzle. The main process parameters are the speed of the
spindle, the temperature of the extruded material and the
pressure of the material at the nozzle.
24
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-502-9
CENTRIC 2016 : The Ninth International Conference on Advances in Human-oriented and Personalized Mechanisms, Technologies, and Services

Graphical User Interface
(Windows application)
Special purpose machine
commands, 
setpoint values, ...
Guidance 
Display
guidance generator
Database 
with error 
messages
(see Figure 4)
Real time controller
(PLC)
Event list
Trigger 
Database 
with process 
values, 
setpoint 
values, ...
(see Figure 5)
machine learning 
algorithm
Simulation for Extrusion 
Process
Figure 2. Structure of the system
(solid lines: standard control system; dotted lines: additions for
recommendation mechanism)
Figure 2 shows the structure of the machine control system.
The user interface is running on windows and communicates
with the real time controller, a PLC, via two databases.
One database contains a log of all error-messages (Figure
4).
The other database contains a log of all PLC variables (Fig-
ure 5). Each row holds the values of all the variables at a given
time. Each column corresponds to a PLC variable. There are
variables representing process values, e.g., temperature values
(Loop1_PV) or the pressure at the nozzle (MP1_Value), and
variables representing parameters entered by the operator, e.g.,
temperature setpoints (Loop1_SP). The actual database has
approximately 100 columns.
For our development, the actual control system is coupled
to a simulation model of the extruder. An operator is running
the simulated machine, thereby generating and ﬁxing errors.
III.
GENERATION OF EVENTS AND USER GUIDANCE
Figure 2 shows that we added a guidance generator.
The generator is a separate application running in parallel
to the graphical user interface. This application is polling
the database with the PLC variables shown in Figure 5 and
processes it into an event list.
This processing is based on a description of the columns:
which columns contain parameters and which columns contain
process values.
For parameter columns the algorithm compares two con-
secutive rows and generates an event for each column that
differs. These events represent operator interactions. They are
coded as string values, e.g., Loop2_SP_170, containing the
name of the PLC variable and the value of the new setpoint.
For process variables we use a different approach to
represent the continuously variable values: First we calculate
the deviation from the setpoint of the variable
V arrel =

V arP rocess
V arSetpoint
· 100%

Then we sort V arrel into one of the classes shown in Table
I and generate an event every time the process value enters a
new class. These events are also coded as string values, e.g.,
Loop_1_2_PV_X.
TABLE I. CLASSES FOR PROCESS VARIABLES
V arrel
≤ 1.77%
≤ 3.16%
≤ 5.62%
≤ 10.0%
≤ 17.78%
Class
A
B
C
D
E
V arrel
≤ 31.62%
≤ 56.23%
≤ 100.0%
≤ 177.8%
> 177.8%
Class
F
G
H
I
X
When the machine needs operator assistance, i.e., it has
added a new row with an error message in the error message
database (Figure 4), our guidance generation algorithm is
triggered.
The algorithm then scans all past events in the event list to
generate an event sequence map of both process variables and
operator interactions that has led to the current error message.
The length of the generated event sequences has to be limited.
For now, we use all events that occurred in the ﬁve minutes
before the error message.
The event sequences are stored in a content addressable
memory, i.e., a Java map, where the events before the error
message are used as the key, whereas the value represents a
list of all operator interaction events between the time the error
condition became true and the time the error condition became
false again. For each of these sequences, the map also contains
the frequency of the respective sequence in the past.
Figure
3
shows
an
abbreviated
example
for
the
map.
The
key
Loop1_2_SP_0#
Loop1_3_SP_0#
Loop_1_2_PV_X#
Loop1_3_PV_X#1101
consists
of
a
concatenated
sequence
of
process
variable,
operator
interaction
and
error
events.
The
value
Loop1_2_SP_170#Loop1_3_SP_170# ==> 3 consists
of a concatenation of operator interaction events and their
frequency in the past.
Figure 3. One entry in the event-sequence map of the guidance generation
algorithm
The three most frequent interaction event sequences are
stored in the error database. Once the operator requests guid-
ance by selecting an error message in the error list on the right
of the user interface, shown in Figure 6, the modiﬁed user
interface of the machine reads this ﬁeld, decodes the coded
string and displays the guidance box shown on the left of
Figure 6.
25
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-502-9
CENTRIC 2016 : The Ninth International Conference on Advances in Human-oriented and Personalized Mechanisms, Technologies, and Services

Figure 4. Part of the error message database
(line 6 shows the error and the recommendation displayed in Figure 6)
Figure 5. Part of the PLC variable database
(the error shown in Figure 4 occurs in line 13)
Figure 6. An example user guidance screen
(list of error messages on the right side; selection of last error message in list displays recommendation for action on the left side)
26
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-502-9
CENTRIC 2016 : The Ninth International Conference on Advances in Human-oriented and Personalized Mechanisms, Technologies, and Services

IV.
QUALITY OF RECOMMENDATIONS
We simulated production and user interaction on the actual
user interface and PLC connected to the simulation model. The
resulting PLC variable database partly shown in Figure 5 now
contains 713.677 rows with approximately 100 process values.
The error message database partly shown in Figure 4 contains
1050 error messages. 163 of these messages were caused by
the error event 1101. During our operation of the simulated
machine we cleared 140 of these error events by performing
operations via the user interface. We cleared the remaining
error events by resetting the simulation model.
In these 163 occurrences our algorithm identiﬁed 40 dif-
ferent event-sequences that led to the error event 1101. Table
III shows a part of that event-sequence map. The key is shown
at the top of the row, sometimes spanning multiple lines. The
number to the left of the lines following the key represents the
number of cases (frequency) in which the user performed the
operation sequence shown in that line (value). In many cases
the operation-sequences in the map are identical, but tied to
different event-sequences.
Table II shows the 9 different operation sequences from
Table III. These operation sequences were derived solely from
logged process data.
TABLE II. OPERATION SEQUENCES FROM THE EVENT SEQUENCE
MAP SHOWN IN TABLE III
Operation sequence
Frequency
AOut1_1_27#
93
Loop1_2_SP_170# Loop1_3_SP_170#
38
Loop1_2_SP_170# Loop1_3_SP_170# Loop1_4_SP_170#
3
AOut1_1_27# AOut1_1_28# AOut1_1_27#
2
Loop1_2_SP_250# Loop1_3_SP_250#
2
AOut1_1_29#
1
AOut1_2_2# AOut1_2_3# AOut1_2_5# AOut1_2_7#
AOut1_2_8# AOut1_2_9#
1
Loop1_2_SP_200# Loop1_3_SP_200# Loop1_2_SP_250#
Loop1_3_SP_250#
1
Loop1_3_SP_170# Loop1_4_SP_170#
1
On that basis, we can provide the operator with different
recommendations for clearing the error event 1101. This is
signiﬁcantly better than tying a predeﬁned help message to
the error.
Table II also shows that some operation sequences were
performed much more frequently than others. The ﬁrst two
sequences cover 93 % of all occurences of the error event.
V.
CONCLUSION AND FUTURE WORK
One important result of our work so far is a structure
for interfacing a special-purpose machine with a guidance
generation mechanism. The interface requirements are fairly
easy to meet: (a) there must be a way to read all (relevant)
PLC-variables, (b) for each variable, we need to know whether
it represents a process variable or a process parameter, and (c)
we need a way to trigger the guidance generation. This allows
for a wide range of machines to be interfaced.
The way we convert changing process values and changed
process parameters into discrete events allows us to apply
machine-learning algorithms to the problem.
Our ﬁrst, quite simple approach, loosely based on Markov-
Chains, already shows a promising potential: We can generate
recommendations solely from logged process data. These
ﬁndings justify deeper research. We have therefore applied for
funding to continue our work.
For the near future, we plan to collect real data from
customers using the production machines in their companies.
We plan to equip these production machines with a “black
box” that contains the guidance generator and interfaces with
the machines. The display of the hints can either be done on
the machine user interface or on a separate user interface in
the “black box”.
Once we have collected a sufﬁcient number of interactions,
we will test a variety of machine learning algorithms. We see
two issues with the application of the algorithms:
First: We use the event sequence before the trigger as a
search criterion. Which / how many events should be included
in the search key?
Second: Because of the slow response time of the process
/ the machine there can be delays in the order of magnitude
of several minutes between a user interaction and a signiﬁcant
change in the process. This makes it possible that some user
interaction events occur between the time an error condition
has become true and false again (after user intervention). In
that case, it will be difﬁcult to distinguish between “helpful”
and “intermediate / time ﬁlling” interactions. Which events
should be included in the recommendation?
Current user feedback shows that it will also be necessary
to structure the results of the learning algorithms in a way that
allows a proﬁcient user to speciﬁy “nonsensical” interactions
and to remove them from the knowledge base. This require-
ment might be hard to meet, since statistics based learning
algorithms do not provide a way to tie outputs to one of the
many input sets.
As a long-term goal, we think about generating our own
trigger events by changing the way we search the event
database. By comparing the current event sequence to event
sequences stored before an error event, we can recommend an
interaction before the event occurs that triggered it in the past.
By coupling that approach with a function in the “black box”
allowing the operator to indicate why he interacted with the
machine, the operator can mark event sequences that require
intervention. On the basis of these marked sequences, we can
then recommend interactions for problems that the original
machine software cannot detect.
REFERENCES
[1]
V. Plenk, “A benchmark for embedded software processes used by
special-purpose machine manufacturers,” in Proceedings of the third
international Conference on Software Engineering Advances.
Los
Alamonitos: CPS, 2008, pp. 166 – 171.
[2]
H. J. C. et al., “Learning styles diagnosis based on user interface
behaviors for the customization of learning interfaces in an intelligent
tutoring system,” in Proceedings of the 8th International Conference on
Intelligent Tutoring Systems (ITS 2006).
Jhongli, Taiwan: Springer,
June 26-30 2006, pp. 513 – 524.
[3]
B. D. Davison and H. Hirsh, “Predicting sequences of user actions,” in
AAAI Technical Report WS-98-07, 1998, pp. 5 – 12.
[4]
P. K. Wonga, J. Zhonga, Z. Yanga, and C. M. Vong, “Sparse bayesian
extreme learning committee machine for engine simultaneous fault
diagnosis,” in Neurocomputing, 2016, pp. 331 – 343.
[5]
K. Zidek, A. Hosovsky, and J. Dubjak, “Diagnostics of surface errors
by embedded vision system and its classiﬁcation by machine learning
algorithms,” in Key Engineering Materials, 2015, pp. 459 – 466.
27
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-502-9
CENTRIC 2016 : The Ninth International Conference on Advances in Human-oriented and Personalized Mechanisms, Technologies, and Services

[6]
J. Luo, C.-M. Vong, and P.-K. Wong, “Sparse bayesian extreme learn-
ing machine for multi-classiﬁcation,” in IIEEE Transactions on Neural
Networks and Learning Systems, 2014, pp. 836 – 843.
[7]
A. Ziaja, I. Antoniadou, T. Barszcz, W. J. Staszewski, and K. Worden,
“Fault detection in rolling element bearings using wavelet-based variance
analysis and novelty detection,” Journal of Vibration and Control, vol. 22,
no. 2, February 2016, pp. 396–411.
[8]
J. Lunze, Ereignisdiskrete Systeme.
M¨unchen: Oldenbourg, 2006.
TABLE III. PART OF THE EVENT-SEQUENCE MAP FOR ERROR 1101
(To save space, we do not show all of the less frequent keys.)
Key
Freq.
Value
AOut1_1_27# MP1_99# AIn1_1_27# AIn1_2_46# AIn2_1_539# AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560#
1101
4
AOut1_1_27#
AIn1_2_46# MP1_100# MP1_101# 1101
3
Loop1_2_SP_170# Loop1_3_SP_170#
AOut1_1_28# MP1_101# AIn1_1_28# AIn1_2_46# AIn2_1_56# 1101
4
AOut1_1_27#
1
Loop1_2_SP_250# Loop1_3_SP_250#
Loop1_2_SP_0# Loop1_3_SP_0# Loop1_2_PV_X# Loop1_3_PV_X# MP1_99# AIn1_2_46# MP1_100# 1101
23
Loop1_2_SP_170# Loop1_3_SP_170#
Loop1_2_SP_0# Loop1_3_SP_0# Loop1_2_PV_X# Loop1_3_PV_X# MP1_100# MP1_101# 1101
2
Loop1_2_SP_170# Loop1_3_SP_170#
AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560# 1101
66
AOut1_1_27#
1
AOut1_1_29#
1
AOut1_1_27# AOut1_1_28# AOut1_1_27#
MP1_100# AIn2_1_544# AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560# 1101
1
AOut1_1_27#
Loop1_2_SP_0# Loop1_2_PV_X# Loop1_3_SP_0# Loop1_3_PV_X# MP1_99# AIn1_2_46# MP1_100# 1101
2
Loop1_2_SP_170# Loop1_3_SP_170#
MP1_100# Loop1_2_PV_B# Loop1_2_PV_C# Loop1_3_PV_A# Loop1_2_SP_0# Loop1_3_SP_0# Loop1_2_PV_X# Loop1_3_PV_X#
MP1_101# 1101
1
Loop1_2_SP_170# Loop1_3_SP_170#
Loop1_2_PV_A# MP1_100# Loop1_2_PV_B# Loop1_3_PV_A# Loop1_2_PV_C# Loop1_3_PV_B# Loop1_2_PV_D# Loop1_4_PV_A#
Loop1_3_PV_C# Loop1_4_PV_B# Loop1_2_PV_E# Loop1_2_SP_0# Loop1_3_SP_0# Loop1_4_SP_0# Loop1_2_PV_X# Loop1_3_PV_X#
Loop1_4_PV_X# MP1_101# 1101
1
Loop1_2_SP_170# Loop1_3_SP_170# Loop1_4_SP_170#
AIn2_1_555# AOut1_1_28# MP1_101# AIn1_1_28# AIn1_2_46# AIn2_1_560# AOut1_1_27# MP1_99# AIn1_1_27# AIn1_2_45#
AIn2_1_539# MP1_98# AOut1_1_28# MP1_101# AIn1_1_28# AIn1_2_46# AIn2_1_560# 1101
1
AOut1_1_27#
Loop1_2_PV_A# MP1_100# Loop1_2_PV_B# Loop1_3_PV_A# Loop1_2_SP_0# Loop1_3_SP_0# Loop1_2_PV_X# Loop1_3_PV_X#
MP1_101# 1101
1
Loop1_2_SP_170# Loop1_3_SP_170#
AIn1_4_97# AOut1_1_8# MP1_29# AIn1_1_8# AIn1_2_13# AIn2_1_16# AOut1_1_16# MP1_63# AIn1_1_16# AIn1_2_29#
AIn2_1_32# AOut1_1_24# MP1_96# AIn1_1_24# AIn1_2_44# AIn2_1_49# AOut1_1_27# MP1_109# AIn1_1_27# AIn1_2_50#
AIn2_1_53# 1101
1
AOut1_2_2# AOut1_2_3# AOut1_2_5# AOut1_2_7# AOut1_2_8# AOut1_2_9#
Loop1_2_PV_A# AIn2_1_555# AOut1_1_28# MP1_101# AIn1_1_28# AIn1_2_46# AIn2_1_560# 1101
1
AOut1_1_27# AOut1_1_28# AOut1_1_27#
AOut1_1_28# MP1_102# AIn1_1_28# AIn1_2_47# AIn2_1_560# MP1_103# 1101
4
AOut1_1_27#
AOut1_1_28# MP1_101# AIn1_1_28# AIn1_2_46# AIn2_1_560# 1101
1
Loop1_2_SP_250# Loop1_3_SP_250#
1
Loop1_2_SP_200# Loop1_3_SP_200# Loop1_2_SP_250# Loop1_3_SP_250#
AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560# AOut1_1_27# MP1_99# AIn1_1_27# AIn1_2_46# AIn2_1_539#
AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560# 1101
1
AOut1_1_27#
MP1_100# AIn2_1_541# AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47# AIn2_1_560# 1101
2
AOut1_1_27#
AOut1_1_27# MP1_100# AIn1_1_27# AIn1_2_46# AIn2_1_539# MP1_99# AOut1_1_28# MP1_103# AIn1_1_28# AIn1_2_47#
AIn2_1_560# 1101
2
AOut1_1_27#
MP1_100# Loop1_2_PV_B# Loop1_2_PV_C# Loop1_3_PV_A# Loop1_3_PV_B# Loop1_2_PV_D# Loop1_3_PV_C# Loop1_2_PV_E#
Loop1_2_SP_0# Loop1_3_SP_0# Loop1_2_PV_X# Loop1_3_PV_X# MP1_101# 1101
1
Loop1_2_SP_170# Loop1_3_SP_170#
AOut1_1_28# MP1_102# AIn1_1_28# AIn1_2_47# AIn2_1_560# 1101
1
AOut1_1_27#
Loop1_2_SP_60# Loop1_3_SP_60# Loop1_2_PV_I# Loop1_3_PV_I# Loop1_2_PV_H# Loop1_3_PV_H# MP1_99# AIn1_2_46#
Loop1_2_PV_G# Loop1_3_PV_G# MP1_100# 1101
1
Loop1_2_SP_170# Loop1_3_SP_170#
28
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-502-9
CENTRIC 2016 : The Ninth International Conference on Advances in Human-oriented and Personalized Mechanisms, Technologies, and Services

