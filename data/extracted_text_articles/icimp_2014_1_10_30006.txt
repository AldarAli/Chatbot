Classiﬁcation of TLS Applications
Chris Richter, Michael Finsterbusch, Klaus H¨anßgen
Faculty of Computer Science,
HTWK Leipzig, Germany
{richter|ﬁnster|haenssge}@imn.htwk-leipzig.de
Jean-Alexander M¨uller
Dept. of Communication and Computer Science,
Hochschule f¨ur Telekommunikation Leipzig, Germany
Jean-Alexander.Mueller@ieee.org
Abstract—Trafﬁc
monitoring,
trafﬁc
engineering,
quality
of
service applications, network intrusion detection systems, as well
as network management systems require the basic knowledge
of which trafﬁc is transmitted over a network. The increasing
number of applications which are using encryption techniques
such as TLS lower the ability to determine the applications
that are running within a network. In this paper, we propose
a method to detect applications in TLS encrypted connections.
Our method uses a hybrid approach which combines protocol
decoding to identify TLS trafﬁc and to gather reliable information
about the application data. Furthermore, a machine learning
algorithm is used to determine the application which is protected
by TLS. We describe our approach and compare it with other
related methods in theory and prove its advantages on network
measurements. The results show a signiﬁcant improvement on
classiﬁcation Recall and Precision.
Keywords–application classiﬁcation, TLS, Internet trafﬁc, ma-
chine learning.
I.
INTRODUCTION
An increasing number of network protocols and applica-
tions encrypt the payload to protect privacy and integrity of
the data. One popular way of doing this is to use the Transport
Layer Security (TLS) protocol [1], which is a further stage of
the Secure Socket Layer (SSL) protocol standardised by the
Internet Engineering Task Force (IETF). Thus, the acronyms
SSL and TLS are are often used as a synonym. An Internet
study [2] from 2013 revealed that 356 applications within
enterprises networks used SSL in some way, while 85 did not
use standard SSL ports.
In order to do their work properly network management
systems and security related systems such as ﬁrewalls or
Network Intrusion Detection Systems (NIDS) need to know
the kind of application. Therefore, these systems have to know
whether the trafﬁc is encrypted and which kind of application
is being transmitted. To solve this problem, our approach is to
use a hybrid method. First, we identify the TLS trafﬁc. Second,
the TLS data is analysed to determine the application. Due to
encryption, only statistical information can be used for the
second step.
The remainder of this paper is structured as follows: in
Section II the related work is outlined. This is followed by
Section III, which describes our approach for better TLS
application classiﬁcation, and Section IV which demonstrates
the beneﬁt of this approach on measurement results, Section
V concludes the paper.
II.
RELATED WORK
Most research on TLS application classiﬁcation has been
done merely with statistical analysis. In most cases different
kinds of well known machine learning algorithms were used.
In some papers the authors concentrate on a single statistical
parameter and use a dedicated method to evaluate the results.
There are two kinds of detecting applications for TLS
connections. The ﬁrst is to detect whether the network trafﬁc
is TLS or not. The second is to classify different applications,
e. g., Hypertext Transport Protocol Secure (HTTPS), Simple
Mail Transport Protocol Secure (SMTPS), etc., which are using
TLS encryption. The goal in [3] is to distinguish TLS from
non-TLS trafﬁc. The authors are using the machine learning
algorithms AdaBoost, C4.5, RIPPER and NaiveBayes and the
statistical parameters packet length, inter-arrival time, duration
and packet count. The detection rate varies between 70% and
98% for the different algorithms and different data sets.
The most work is related to the second approach which
tries to classify different applications on top of TLS. In [4]
the machine learning algorithm Random Forest as well as the
clustering algorithm K-Means were used to classify network
trafﬁc for an intrusion detection system. It was shown that the
approach is feasible for network monitoring, but the authors
do not give further information about the classiﬁcation rates.
The authors of [5] used only the statistical parameter packet
size for application classiﬁcation. Therefore, the packet size
of a packet is ranged to one of 30 bytes bins. The packet size
distribution for a packet ﬂow is compared with the Chi-square
test to the values of known applications. This approach has a
low classiﬁcation accuracy of 10% to 40% for most observed
applications.
Two statistical parameters – inter-arrival time and packet
length – were used in [6] in conjunction with one of the three
clustering algorithms DBSCAN, K-means and EM. On a data
set with the File Transport Protocol (FTP), Real-time Protocol
(RTP) and the Remote Framebuffer protocol (RFB), they could
reach an accuracy up to 99%. The same parameters were also
used by [7], but they used feature vectors containing several
sub-parameters of inter-arrival time and packet size such as
minimum, maximum, mean value and standard deviation. To
compare the vectors of the ongoing packets with the known
data set, the Euclidean distance or the Hamming distance are
used. With this approach the authors could classify 80% to
94% of the used network trafﬁc.
[8] is a PhD thesis about the identiﬁcation of applications
in encrypted tunnels, with the focus rests on HTTPS tunnels.
The packet size of network packets is ranged to one of 15
1
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-362-9
ICIMP 2014 : The Ninth International Conference on Internet Monitoring and Protection

bins. Several machine learning algorithms (Naive Bayes, C4.5,
Decision Tree, neural networks, Nearest Neighbour, OneR)
were used to classify the applications. The results vary between
30% and 100%.
Another paper [9] uses a bayesian machine learning
algorithm with some more statistical parameters: packet length
(min, max, mean), inter-arrival (min, max, mean), duration
and packet count. Therewith, TOR and HTTP trafﬁc could
be classiﬁed with 85% of Precision and Recall.
All the papers cited above use only machine learning
algorithms. The following two papers describe hybrid methods
with additional preprocessing. In [10], at ﬁrst a pattern based
TLS detection is used to ﬁlter all TLS trafﬁc. Only the TLS
trafﬁc is observed with the Naive Bayes machine learning
algorithm. With this method 93% to 96% of HTTP and TOR
trafﬁc can be classiﬁed. Later we refer this as ’method 1’. A
more advanced TLS preprocessing is done in [11]. The authors
also use a pattern based TLS detection, but they observe the
TLS session and using only application trafﬁc without TLS
handshake messages. Furthermore, they pay attention to the
offset added by the Keyed-Hash Message Authentication Code
(HMAC) and encryption. A statical offset of 21 bytes is used
in their per-packet approach. The classiﬁcation rate is between
81% to 100% for the ten observed applications. We refer to
this as ’method 2’ in the following sections.
Our own related work was on payload-based methods for
application classiﬁcation [12], with particular focus on protocol
decoding. The protocol decoding inspects the network trafﬁc
and tries to decode each packet. If the decoded values match
to the protocol description and if it fulﬁls all constraints of the
protocol, the protocol is detected. This method is reliable but
can only be used for unencrypted network trafﬁc.
Another related work [13] [14] was on machine learning
algorithms and investigated which kind of statistical informa-
tion is useful for application classiﬁcation. Furthermore, we
investigated 20 different machine learning algorithms to ﬁnd
out which algorithms are suitable for network trafﬁc analysis.
Besides TLS, other encryption techniques exist. [15] and
[16] investigated trafﬁc characteristic changes caused by
Internet Protocol Security (IPsec) and encrypted Point-to-Point
Tunneling Protocol (PPTP). The authors used the Naive Bayes,
Support Vector Machines and C4.5 decision tree as machine
learning algorithm for classiﬁcation, but used two strategies for
preprocessing the feature set. Either they split the trafﬁc into
encrypted and unencrypted trafﬁc, or they do a normalisation
of the feature set from encrypted trafﬁc. The ﬁrst strategy is
used to approximate the feature set of the unencrypted trafﬁc
carried by the encrypted tunnel, to use only one classiﬁcation
model for the whole trafﬁc. The second strategy use two
classiﬁcation models for each type of trafﬁc. Their results show
signiﬁcant improvements in classiﬁcation.
III.
HYBRID ANALYSIS METHOD
To identify TLS data in network trafﬁc and to classify its
content, we are using a hybrid method. First, to identify the
TLS data, protocol decoding is used. As described in [12] and
related papers, protocol decoding is a very reliable method for
detecting TLS trafﬁc. Additionally, some further information
from the decoded TLS record headers are extracted to provide
more precise statistical values regarding statistics gathered
from the Transport Control Protocol (TCP) ﬂow. The statistical
values are used in conjunction with a machine learning
algorithm to classify the protocol or application transmitted
within TLS.
The TLS protocol is divided into ﬁve sub-protocols: the
TLS Record Protocol, three handshaking protocols and the
Application Data Protocol [1]. Application data messages are
carried by the record layer protocol and are compressed,
fragmented and encrypted with the negotiated master secret. A
TLS session starts with a handshake. The handshake consists of
the negotiation of a cipher suite, the exchange of certiﬁcates
and keying material (e. g., Difﬁe Hellman). The application
messages are treated as transparent data to the record layer.
Depending on the client and server conﬁguration (e. g., us-
age and size of certiﬁcates), the number of packets exchanged
during connection establishment varies. Additionally, the con-
tents (except keying material) of the handshake messages of
client and server are identical, even if a TLS connection is used
by different applications. Thus, all the handshaking messages
should never be considered for application classiﬁcation.
After the TLS handshake, application data exchange starts.
The application data is processed by the TLS layer as outlined
in Figure 1. The application data can be compressed, but
this is optional. The integrity of the data is protected by a
HMAC, which is added to the application data. Then, the
data with HMAC is encrypted and a TLS record header is
added, which contains the TLS version, content length and
type of content (application data or handshaking protocols).
Due to TLS record header and HMAC, the payload of TLS is
smaller than it seems on TCP level. The TLS record header
has a constant size of 5 bytes, the length of the HMAC is
one of six values: 0, 8, 16, 20, 32 or 48 bytes [17]. The
used HMAC length depends on the used cipher suite which
is negotiated during the handshake and can be provided by the
protocol decoding. We propose considering this offset when
using statistical data of TLS trafﬁc. Compression was not used
in all investigated network trafﬁc and is frequently deactivated
in the most applications. This is due to a security issue called
CRIME. It was ﬁrst described by [18] and later published as
proof of concept exploit [19]. Thus, the compression has no
inﬂuence on our statistical calculation and the classiﬁcation
results.
With the above description of the related parts of TLS,
we can deﬁne four different methods for TLS application
classiﬁcation. The ﬁrst two methods were already described
in short at Section II. Method 1 [10] simply takes statistical
values on TCP level. The TLS handshake, which is in general
the same for all applications, is also included in the statistical
calculation as the data records. The offset of the TLS record
layer and HMAC is not removed. Large application data which
was fragmented into several TCP segments will be counted
as single application message, but a collection of small data
records will be counted as one application message.
Method 2, as described in [11], skips the TLS handshake
and starts evaluating the statistical data from the TLS stream
after it detects the ﬁrst data record by using packet inspection.
Beginning from this point, it expects that every TCP segment
2
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-362-9
ICIMP 2014 : The Ninth International Conference on Internet Monitoring and Protection


0%
20%
40%
60%
80%
100%
HTTP
SMTP
IRC
POP3
IMAP
Protocol
Recall
Precision
Method 1
Method 2
Method 3
Method 4
 
 
 
 
Figure 2: Classiﬁcation results for all methods and protocols
TABLE I: Overview of the test data
Protocol
Method 1
Method 2
Method 3
Method 4
HTTP
21311
18516
20269
20269
SMTP
63880
60958
20456
20456
IRC
5735
5552
20800
20800
POP3
21287
17146
19682
19682
IMAP
15644
15420
20354
20354
B. Test data
TLS is used to protect a lot of applications and protocols.
We decided to use the ﬁve protocols listed in Table I.
These protocols was chosen because there are many publicly
accessible servers to collect trafﬁc with different server
software and conﬁgurations. The HTTP trafﬁc contains only
ordinary HTML pages without Flash and video content. The
e-mail protocol traces were captured at our university mail
server as well as at our laboratory to capture conversations
to publicly accessible server (e.g., Gmail). For the Internet
Relay Chat (IRC) traces we also captured conversations to
public servers. To get a realistic chat, the IRC client connected
between ﬁve to ten minutes to a server which provides
well-frequented IRC channels (e.g., Ubuntu support channel)
without sending any chat message (only control messages). It
received only chat messages of the connected channel, so the
traces contain IRC talks between ﬁve to six hours for training
and test, respectively.
Table I contains the data records determined from the
trafﬁc traces. We used a uniform distribution of data records
(≈20.000) with respect to the data portions sent by the
applications. The deviation from this values at Method 1 and 2
for SMTP or IRC results from ignoring the TLS fragmentation.
Some TLS data records were split across up to ten TCP
segments and some TCP segments contained up to ten data
records. Table I shows only the test data. The training data for
the machine learning algorithm contains the same amount of
data records.
C. Classiﬁcation results
Figure 2 shows the classiﬁcation results of all applied
methods. The protocols of the used trafﬁc are placed on the
x-axis, where the Recall and Precision results were displayed
in percentage (y-axis) as bars. Each used method is represented
by an own colour.
Starting with HTTP, method 1 classiﬁes less then 50% of
the HTTP trafﬁc correctly with the Precision also lower than
25%, which implies that three out of four as HTTP classiﬁed
packets are non-HTTP trafﬁc. With method 2, Recall could
be improved to 83% but nevertheless the Precision reaches
only 36%. It is an improvement over method 1 but still two
of three as HTTP classiﬁed packets are non-HTTP trafﬁc. In
general, it is not hard to implement a classiﬁcation method
with a high Recall, e.g., an algorithm that classiﬁes each packet
as HTTP reaches a Recall of 100%, but the Precision will be
low according to the protocol distribution of the used trafﬁc. In
contrast, method 3 and method 4 gain a Recall of around 75%,
which is less than method 2, but the Precision is improved to
74%. Thus, only one out of four as HTTP classiﬁed packets
is non-HTTP trafﬁc. This implies a higher reliability on the
classiﬁcation decision.
For SMTP, the Recall is continuously improved from 43%
on method 1 up to 48% on method 2. Also, the Precision could
be increased from 84% on method 1 up to 92% on method 2.
The highest Precision could be realised with method 2 (99%).
On all methods, the false negatives — SMTP trafﬁc which
was not classiﬁed as SMTP — were nearly entirely classiﬁed
either as HTTP or Post Ofﬁce Protocol version 3 (POP3).
With a Recall between 95% (method 1) and 99% (method
3 and method 4) the IRC protocol has the best classiﬁcation
results. Besides the high values for the Recall also the
Precision with 82% (method 1) and 99% (method 3 and
method 4) on a high level. Method 3 and method 4 achieve
almost perfect classiﬁcation results. Only method 2 decreases
the classiﬁcation accuracy; nearly all false negatives were
classiﬁed as HTTP and Internet Mail Access Protocol (IMAP).
For POP3, the classiﬁcation accuracy could be increased
from method 1 to method 4. The recall could be enhanced
from 89% to 94% and the Precision was enhanced from 57%
to 71%. In contrast the Recall on IMAP was nearly constant
at 91%, but the Precision was decreased from 82% on method
1 to 77% on method 4.
D. Future trend
The similarity and the missing enhancements on the
classiﬁcation accuracy between method 3 and method 4
4
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-362-9
ICIMP 2014 : The Ninth International Conference on Internet Monitoring and Protection

are based on the applied cipher suites in the used trafﬁc,
respectively. The used trafﬁc contains 11 different cipher
suites, but only one cipher suite which is less than 1% of
the whole trafﬁc, uses a MD5 hash with a HMAC size of
16 bytes. All other cipher suites are using a Secure Hash
Algorithm version 1 (SHA1) with a HMAC size of 20 bytes.
Accordingly, nearly the entire trafﬁc, there is only a ﬁxed offset
in the data record length between method 3 and method 4. This
ﬁxed offset causes no differences for the machine learning
algorithm, and there is no improvement from method 3 to
method 4 according to our data set. However, the Internet
Assigned Numbers Authority (IANA) speciﬁed more than 300
cipher suites with the different HMAC sizes as described in
section III. In consideration of the current lack of security, it
can be supposed that stronger cipher suites will be used to
secure the data. In this case, there will be a larger distribution
of the used HMAC sizes and thereby the advantages of method
4 will be proved.
To determine if this assumption is right or not, we added
some TLS traces from servers which support SHA256 for
the HMAC to our test and training data set. Currently,
only a small subset of all TLS servers support HMAC
algorithms which are more secure than SHA1. Additionally,
the TLS client makes a suggestion of the cipher suites to
use, but only the newest versions support the stronger HMAC
algorithms. Currently, only the latest web-browsers support
TLS 1.2 with the new cipher suites [22]. Browsers take a
pioneering role, while other applications do not support these
cipher suites in the stable versions and providing support
only within development versions (e.g., e-mail user agent
Mozilla Thunderbird development version 30.0 beta 1 [23]).
Furthermore, the web-browsers use their own TLS libraries,
whereas other applications use the TLS libraries provided by
the operating system or the used programming language (e.g.,
Java, C#). Only the latest versions of the operating systems
and programming languages support TLS 1.2 [22] with the
appropriate cipher suites. Thus, we concentrate on HTTP and
IMAP. HTTP causes a signiﬁcant amount of trafﬁc in the
Internet and our results of IMAP showed no improvements
to the other methods.
To test the assumed enhancements of method 4 against
those in method 3, we applied a set of HTTP and IMAP ﬂows
with cipher suites which are using SHA256 for calculating
the HMAC with a length of 32 bytes. Due to the small set
of these ﬂows, the results can only give an indication of the
behaviour for method 3 and method 4 on trafﬁc with wider
distribution of more secure cipher suites. The classiﬁcation
results on the test set with these new ﬂows support our
assumptions that method 4 leads to better classiﬁcation results
than method 3 when the investigated trafﬁc includes different
cipher suites with different HMAC sizes. Method 4 has
achieved an enhancement between 2% and 3% on Recall
and on Precision according to method 3. Nevertheless, further
investigations with a well-balanced data set are required for a
ﬁnal conﬁrmation of the enhancements of method 4 compared
to method 3.
V.
CONCLUSION
We compared four approaches for TLS application classi-
ﬁcation, each with different depth of TLS investigation. As a
preparation for these methods, protocol decoding was used to
ﬁlter TLS trafﬁc from non-TLS trafﬁc — to focus the analysis
on dedicated applications — as part of our hybrid classiﬁcation
method. The results show an improvement of the classiﬁcation
accuracy according to Recall and Precision on the investigated
protocols. For most applications, the reliability, which is based
on Precision, could be increased from method 1 to method 4.
The advantages of method 4 in contrast to method 3 will be
shown on the deployment of other cipher suites on client site
and server site. No signiﬁcant differences could be determined
between both methods on the underlying trafﬁc. However, on
an exemplary data set, an enhancement between 2% and 3%
on Recall and on Precision could supported the assumption of
method 4 as compared with method 3 on more secure cipher
suites with larger HMACs.
As a result, method 3 and method 4 show a clear
enhancement on the classiﬁcation results according to Recall
and Precision when compared to method 1 and method
2, which are well-known and commonly used methods for
classifying TLS applications. Therefore, it is defenitly worth
making the additional effort to processing the detailed statistic
values for both methods. As other trafﬁc classiﬁcation methods
have shown, it is expensive to improve an approach to gain
the last remaining percentages which could achieve a perfect
classiﬁcation accuracy of nearly 100%.
In general, the used trafﬁc is the critical fact in such
evaluations, because the trafﬁc covers only a limited part
and is based on the underlying network. According to other
evaluations, our classiﬁcation results are in most cases not the
best, but when repeating other approaches with our trafﬁc, the
results are partially quite different from the announced results.
In conclusion, the stability of the statistical features strongly
depends on the used trafﬁc.
In future, the inﬂuence of the usage of compression
for the classiﬁcation accuracy has to be analysed, as well
as the detection of further applications which are using
TLS. Furthermore, the performance of other machine learning
algorithms should be inspected for our presented methods.
ACKNOWLEDGEMENTS
We thank the reviewers for their valuable comments which
helped to considerably improve the quality of the article. This
work is supported by the European Regional Development
Fund (ERDF) and the Free State of Saxony.
REFERENCES
[1]
T. Dierks and E. Rescorla, “The Transport Layer Security (TLS)
Protocol Version 1.2,” RFC 5246 (Proposed Standard), Internet
Engineering Task Force, Aug. 2008.
[2]
“The Application Usage and Threat Report – An Analysis of
Application Usage and Related Threats within the Enterprise,” Palo
Alto Networks, Tech. Rep. 10, Jan. 2013.
5
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-362-9
ICIMP 2014 : The Ninth International Conference on Internet Monitoring and Protection

[3]
C. McCarthy and A. Zincir-Heywood, “An investigation on identifying
SSL trafﬁc,” in Computational Intelligence for Security and Defense
Applications (CISDA), 2011 IEEE Symposium on, April 2011, pp.
115–122.
[4]
K. Ethala, R. Shesadri, and N. G. Renganathan, “The use of random
forest classiﬁcation and k-means clustering algorithm for detecting
time stamped signatures in the active networks,” Journal of Computer
Science, vol. 9, no. 7, 2013, pp. 875–882.
[5]
G. Mujtaba and D. Parish, “Detection of applications within encrypted
tunnels using packet size distributions,” in Internet Technology and
Secured Transactions, ICITST, Nov 2009, pp. 1–6.
[6]
M.-D. Wu and S. D. Wolthusen, “Network Forensics of Partial SSL/TLS
Encrypted Trafﬁc Classiﬁcation Using Clustering Algorithms.” in IT
Incident Managegent & IT Forensics, ser. LNI, vol. 140.
Gesellschaft
fuer Informatik, 2008, pp. 157–172.
[7]
H. Liu, Z. Wang, and Y. Wang, “Semi-supervised Encrypted Trafﬁc
Classiﬁcation Using Composite Features Set,” Journal of Networks,
vol. 7, no. 8, 2012, pp. 1195–1200.
[8]
G. Mujtaba, “Identiﬁcation of Networked Tunnelled Applications,”
Ph.D. dissertation, Loughborough University, May 2011.
[9]
G.-L. Sun, F. Lang, M. Yang, and J. Hua, “Application protocols
identiﬁcation using Non-parametric Estimation method,” in Strategic
Technology (IFOST), 2011 6th International Forum on, vol. 2, Aug
2011, pp. 765–768.
[10]
G.-L. Sun, Y. Xue, Y. Dong, D. Wang, and C. Li, “An Novel Hybrid
Method for Effectively Classifying Encrypted Trafﬁc,” in GLOBECOM,
IEEE, Dec 2010, pp. 1–5.
[11]
L. Bernaille and R. Teixeira, “Early Recognition of Encrypted
Applications,” in Proceedings of the 8th International Conference on
Passive and Active Network Measurement, ser. PAM’07, 2007, pp.
165–175.
[12]
M. Finsterbusch, C. Richter, E. Rocha, J.-A. M¨uller, and K. H¨anßgen,
“A Survey of Payload-Based Trafﬁc Classiﬁcation Approaches,”
Communications Surveys Tutorials, IEEE, vol. PP, no. 99, 2013, pp.
1–22.
[13]
M. Finsterbusch, C. Richter, and J.-A. M¨uller, “Parameter Estimation
for Heuristic Based Internet Trafﬁc Classiﬁcation,” in ICIMP 2012:
The Seventh International Conference on Internet Monitoring and
Protection, IARIA, Ed.
Stuttgart, Germany: IARIA, 2012, pp. 13–22,
ISBN: 978-1-61208-201-1 .
[14]
C. Richter, M. Finsterbusch, K. H¨anßgen, and J.-A. M¨uller, “Impact
of Asymmetry of Internet Trafﬁc for Heuristic Based Classiﬁcation,”
International Journal of Computer Networks (IJCN), vol. 4, no. 10,
2012, pp. 167–176.
[15]
Y. Okada, S. Ata, N. Nakamura, Y. Nakahira, and I. Oka, “Application
identiﬁcation from encrypted trafﬁc based on characteristic changes by
encryption,” in Communications Quality and Reliability (CQR), 2011
IEEE International Workshop Technical Committee on, May 2011, pp.
1–6.
[16]
——, “Comparisons of machine learning algorithms for application
identiﬁcation of encrypted trafﬁc,” in Machine Learning and Appli-
cations and Workshops (ICMLA), 2011 10th International Conference
on, vol. 2, Dec 2011, pp. 358–361.
[17]
E. Rescorla. Transport Layer Security (TLS) Parameters. Internet
Assigned Numbers Authority. [retrieved: Jan., 2014]
[18]
J. Kelsey, “Compression and Information Leakage of Plaintext,” in
Revised Papers from the 9th International Workshop on Fast Software
Encryption, ser. FSE ’02.
London, UK, UK: Springer-Verlag, 2002,
pp. 263–276.
[19]
J. Rizzo and T. Duong, “CRIME exploit – crime.py,” 2014, URL:
https://gist.github.com/stamparm/3698401 [accessed: 2014-05-11].
[20]
M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and I. H.
Witten, “The WEKA Data Mining Software: An Update,” SIGKDD
Explor. Newsl., vol. 11, no. 1, Nov. 2009, pp. 10–18.
[21]
T. Nguyen and G. Armitage, “A survey of techniques for Internet
trafﬁc classiﬁcation using machine learning,” Communications Surveys
Tutorials, IEEE, vol. 10, no. 4, 2008, pp. 56–76.
[22]
Java Platform Group, “JDK 8 will use TLS 1.2 as default ,” 2014, URL:
https://blogs.oracle.com/java-platform-group/entry/java 8 will use tls
[accessed: 2014-05-20].
[23]
Mozilla
Foundation,
“Thunderbird,”
2014,
URL:
www.mozilla.org/thunderbird [accessed: 2014-05-20].
6
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-362-9
ICIMP 2014 : The Ninth International Conference on Internet Monitoring and Protection

