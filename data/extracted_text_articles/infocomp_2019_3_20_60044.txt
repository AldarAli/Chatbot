A Knowledge-centric Computation Architecture
and the Case of Knowledge Mining
Claus-Peter R¨uckemann
Westf¨alische Wilhelms-Universit¨at M¨unster (WWU), Germany;
Knowledge in Motion, DIMF, Germany;
Leibniz Universit¨at Hannover, Germany
Email: ruckema@uni-muenster.de
Abstract—This paper presents a new architecture framework,
which is the research result of a series of practical problem
solving
implementations
and
further
developments
of
the
common knowledge base and integrated application components.
The
framework
is
considered
knowledge-centric,
based
on
the fundamental knowledge resources, which constitute the
fundamental base and imply the core of key assets. Besides
the
further
knowledge
development,
the
knowledge-centric
architecture ﬂexibly allows implementations of computation
components for many scenarios and the employment of available
computation
infrastructures.
An
important
quality
of
the
architecture framework is the intrinsic value to assign different
roles for the professional tasks in creation and development
cycles. These roles regards the major complements of knowledge,
including factual, conceptual, and procedural components as well
as documentation. This paper refers to a base excerpt of previous
implementations and illustrates the framework for an advanced
implementation case of knowledge mining. The main goal of this
research is to outline the new knowledge-centric architecture
and to provide a base for further long-term multi-disciplinary
implementations and realisations.
Keywords–Knowledge
Mining
and
Mapping;
Computation
Architecture; Context Creation; Universal Decimal Classiﬁcation;
Knowledge-centric Computing.
I.
INTRODUCTION
All implementations of mathematical machines, which we
call ‘computer systems’ today, can strictly only deal with
formal systems. Knowledge is a capability of a living organism
and can itself not be incorporated by formal systems. Neither
can intrinsic meaning, which is an essential characteristics
of real knowledge and a unique stronghold of knowledge be
a matter of formal systems nor can mathematical relations,
the theory of sets, exlusiveness or creating completeness be
applied to knowledge.
Solutions requiring a wide range of knowledge content
as well as implementations of algorithms and components
are often difﬁcult to handle, the more when it comes to
operating the resulting solutions for decades or even further
developing content and implementations for long-term. Over
time, the further developments and services are becoming more
complicated without a common, holistic frame for content and
implementation. When gathering a large number of indepen-
dent implementations, we experienced an increasing hetero-
geneity in content development but also in implementations of
computing components.
This background is the major motivation for the develop-
ment of an advanced framework based on long-term Knowl-
edge Resources and integrated application components provid-
ing a valuable means of tackling the challenges. Nevertheless,
in complex cases even such major component groups cannot
protect long-term challenges, if there is no basic framework
architecture caring for knowledge and computational imple-
mentation. The practice of creating solutions, which have to
deal with the complements of knowledge suggests that ﬂexi-
ble but nevertheless methodological, systematical approaches
are required. The goal of this research is to create such
knowledge-centric architecture, based on a wide range of
multi-disciplinary implementations and practical case studies
in different disciplines and dealing with different foci, for
many years. While further developing and updating the knowl-
edge related attributes, data, implementations, and solutions,
all of them had to be revisited over time, improving and where
necessary recreating implementation and content.
Knowledge Resources and originary resources cover the
complements of factual, conceptual, procedural, and metacog-
nitive complements, e.g., from collections and references re-
sources. The architecture presented here aims to seamlessly
integrating separate roles of contributing parties, e.g., scien-
tiﬁc staff creating research data, professional classiﬁcation
by experienced research library specialists, and developers of
application components as well as services. The guideline
was enabling to retain the knowledge required to resemble
the intrinsic complexity of realia situations, real and material
instead of abstract situations, while allowing lex parsimoniae
principles of William of Ockham for problem solving. The
overall outcome gained from the development of practical so-
lutions led to the creation of a knowledge-centric architecture,
which essentials are presented in the following sections.
This paper is organised as follows. Section II introduces
to fundaments and previous work, Section III presents the
architecture being result of this research. Sections IV and
V deliver an implementation case of two major use-cases,
including a discussion. Section VI summarises the results and
lessons learned, conclusions, and future work.
II.
FUNDAMENTS AND PREVIOUS WORK
With one of the best and most solid works, Aristotle outlined
the fundaments of terminology and of understanding knowl-
edge [1] being an essential part of ‘Ethics’ [2]. Information
sciences can very much beneﬁt from Aristotle’s fundaments
35
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

and a knowledge-centric approach, e.g., by Anderson and
Krathwohl [3], but for building holistic and sustainable so-
lutions they need to go beyond the available technology-based
approaches and hypothesis [4] as analysed in Platons’ Phaidon.
So far, there is no other practical advanced knowledge-centric
architectural speciﬁcation known, which implements these fun-
daments. Making a distinction and creating interfaces between
methods and applications [5], the principles are based on the
methodology of knowledge mapping [6]. The implementation
can make use of objects and conceptual knowledge [7] and
shows being able to build a base for applications scenarios like
associative processing [8] and advanced knowledge discovery
[9]. Based on this background, during the last decades, a
number of different case solutions were created, implemented,
and realised on this fundament, including: Dynamical visu-
alisation, knowledge mining, knowledge mapping, Content
Factor, phonetic algorithms, Geoscientiﬁc Information Systems
(GIS), Environmental Information Systems (EIS), cartographic
mapping, service design, service management, and High End
Computation. All such implementations include extensive use
of Knowledge Resources and computation algorithms. This pa-
per, presenting the new architecture, does not allow to illustrate
the details of any implementation. Therefore, an excerpt of
practical solutions is cited, which have been reimplemented
by the collaboration of the participated research groups and
published, creating a base for this architecture. Representa-
tive examples are a) integrated systems and supercomputing
resources used with phonetic algorithms and pattern matching
[10] for knowledge mining [11], b) multi-dimensional context
creation based on the methodology of Knowledge Mapping
[12], and c) an exemplary resulting, widely used conceptual
knowledge subset for geo-spatial scenarios [13]. The Knowl-
edge Resources cover the factual, conceptual, procedural, and
metacognitive complements in all cases, e.g., from collections
and references resources.
An understanding of the essence and complexity of univer-
sal, multi-disciplinary knowledge can be achieved by taking a
closer look on classiﬁcation. The state-of-the-art of classifying
‘universal knowledge’ is the Universal Decimal Classiﬁcation
(UDC) [14] and its solid background, ﬂexibility, and long
history. The LX Knowledge Resources’ structure and the
classiﬁcation references [15] based on UDC [16] are essential
means for the processing workﬂows and evaluation. Both pro-
vide strong multi-disciplinary and multi-lingual support. For
the research, all small unsorted excerpts of the Knowledge Re-
sources objects only refer to main UDC-based classes, which
for this publication are taken from the Multilingual Universal
Decimal Classiﬁcation Summary (UDCC Publication No. 088)
[17] released by the UDC Consortium under the Creative
Commons Attribution Share Alike 3.0 license [18] (ﬁrst release
2009, subsequent update 2012). These components and their
qualities are integrated in the resulting architecture with the
methodologies and systematic use.
III.
RESULTING KNOWLEDGE-CENTRIC ARCHITECTURE
As discussed above, the presented architecture is the result
based on a series of previously implemented problem solutions
and Knowledge Resources developments over the last years.
A. General Computation Architecture
The complements diagram of the implementation architec-
ture [19][20][21] is shown in Figure 1. The major components
Core Resources
Module Resources
Result Resources
(c) DIMF, 2019
(c) Rückemann, 2019
Figure 1. Complements diagram of the resources components architecture,
including the three main complements of core, module, and result resources.
are core resources and module resources. The result resources
include objects collections, which result from the application
of core and module resources in arbitrary scenarios. The
sizes of this ﬁgure and the associated complements diagrams
correspond, the following ﬁgures show complementary details
from this context. The core resources in this architecture com-
prise required resources. The complements diagram (Figure 2)
shows the essential detail.
Knowledge
Containers
Application
Originary
Resources
and
Components
Resources
and
Sources,
Resources
Referenced Resources
Collections
Integrated Resources
Data Sources
(c) DIMF, 2019
(c) Rückemann, 2019
Figure 2. Computation architecture: Complements diagram of general core
resources, from originary to knowledge and application resources.
The core resources can be divided into three categories: The
central Knowledge Resources, originary resources, and appli-
cation resources and components. The ﬁrst, the Knowledge
Resources, can include collections and containers as well as
integrated resources and references to resources. The second,
the originary resources, can include realia and original sources,
which in many cases may have instances in the Knowledge
Resources. The third, the application resources, can include
implementations of algorithms, workﬂows, and procedures,
which form applications and components. Instances of these
components can also be employable in solutions due to their
procedural nature, e.g., in module resources.
The complements diagram of general module resources is
shown in Figure 3. A general set of module resources consists
of input resources, modules, and output resources. The central
workﬂow module entities are accompanied by interface module
entities for input and output resources. For many architecture
36
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

Input Resources
Interface Module Entity
Workflow Module Entities
Output Resources
Interface Module Entity
(c) DIMF, 2019
(c) Rückemann, 2019
Figure 3. Computation architecture: Complements diagram of module
resources, from input, interfaces and workﬂow entities to output.
implementations, chains of module resources can be created,
which can, for example, be used in pipeline and in parallel.
B. Architecture Complements for Knowledge Mining
For the case of knowledge mining, the complements diagram
of the core resources is shown in Figure 4. Application re-
Knowledge
Application
Originary
Resources
and
Components
Resources
and
Sources, ...
Resources
Collections
Referenced Resources
Module implementations
Program components
Factual, Conceptual,
Procedural, Metacogn., ...
Realia
Reference Targets
Perl, Tcl, C, Fortran, ...
Algorithms, Doc.
UDC,
Data,
Scripts, Executables, ...
(c) DIMF, 2019
(c) Rückemann, 2019
Figure 4. Knowledge Mining: Complements diagram of the core resources
and examples of their contribution implementations.
sources and components are based on module implementations
and program components for the knowledge mining realisation.
Implementations employ scripting, high level languages, and
third party components. Knowledge Resources and originary
resources cover the complements of factual, conceptual, proce-
dural, and metacognitive complements, e.g., from collections
and references resources.
The respective complements diagram of a module resource
for a text based knowledge mining implementation consists
of several features (Figure 5). The input and output resources
Collection Text Instances
Perl Interface Modules Entity
C and Perl Workflow Module Entities
Resulting Text Objects
Perl Interface Modules Entity
(c) DIMF, 2019
(c) Rückemann, 2019
Figure 5. Knowledge Mining: Complements diagram of a module resource
used for creating module chains for text based knowledge mining.
consist of text object instances in text based cases of knowl-
edge mining. Here, the module entity implementations were
implemented in C and Perl [22] for the respective implemen-
tations. The interface module entities are implemented in Perl,
with the option to be on-the-ﬂy generated within a workﬂow.
The knowledge-centric architecture does focus on resources
and application scenarios, one of the most important is com-
putation cases. Large computation workﬂow chains can be
built with the architecture as was demonstrated with the
reimplemented solutions for different cases, which were above
referred to. An implementation sequence of module resources
can be considered an intermediate step in building a workﬂow.
Results within an implementation sequence can be considered
intermediate results and instances, e.g., from the integrated
mining of collection and container resources.
IV.
IMPLEMENTATION CASE AND DISCUSSION
The goal was to create a knowledge-centric computation
architecture, which allows a close integration of Knowledge
Resources with wide spectra of complementary knowledge and
ﬂexible, efﬁcient computational solutions, while being able to
specify practically required roles for creation and long-term
development. The knowledge-centric architecture can provide
a base for an arbitrary range of use-cases and associated
components. Two major groups of use-cases are
•
resources creation and development and
•
knowledge mining and selected associated methods.
A. Major use-case groups
Figure 6 shows an use-case diagram of the knowledge-
centric computation architecture. The excerpt illustrates an
uc knowledge mining
(c) R¨uckemann, 2019
(c) DIMF, 2019
Knowledge-centric Computational Architecture
Knowledge-centric Computational Architecture
≪include≫
≪include≫
≪include≫
≪extend≫
≪extend≫
≪extend≫
≪include≫
≪extend≫
≪extend≫
Knowledge
Mining
Knowledge
Mapping
Parallelisation
Edition
Management
Resource
Creation
Resource
Development
Phonetic
Selection
Knowledge
Resources
user 1
user 2
creator 1
creator 2
creator 3
creator 4
Result data
integration
Result data
integration
Instance
Instance
Persistent result
integration
Persistent result
integration
Factual
Factual
Conceptual
Conceptual
Procedural
Procedural
Metacognitive
Metacognitive
Figure 6. Use-case diagram of the knowledge-centric computation
architecture: Two major use-case groups with four creator roles.
integrated view on the two groups of knowledge mining
(blueish), which was implemented spanning knowledge mining
use-cases and knowledge creation and development use-cases
(greenish). In this widely deployed scenario, the implementa-
tion does have two main types of actors, namely creators and
users. The use-cases have different actors, two ‘user’ roles and
four ‘creator’ roles.
37
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

The selected system context is given by the grey box.
The selected use-cases (ellipses) can be distinguished in use-
cases for creators (greenish: resource creation, resource de-
velopment, edition management, parallelisation) and use-cases
for users (bluish: knowledge mining, knowledge mapping,
phonetic selection).
Knowledge mining is supported by and using the cases of
knowledge mapping and phonetic selection, which inherit to
the knowledge mining instance the implemented methods and
algorithms contributed by other user groups. For clearness, the
creator and other roles for these two cases are not included
in this diagram. Knowledge mining, mapping, and phonetic
selection include the use-case of Knowledge Resources. The
cases of this group are extended by parallelisation, respective
computation, here instance based workﬂow parallelisation,
which enables the computation-relevant optimisation for in-
dividual implementations and infrastructures.
The Knowledge Resources include the use-case of resource
creation, which allows to integrate persistently added results.
The use-case of resource creation itself is extended by the
use-cases of resource development and edition management,
which allows to deﬁne editions of resources for consistency in
advanced complex application scenarios.
The use-case scenario reﬂects the professional practice
of having separate roles for creating and developing fac-
tual, conceptual, procedural, and documentation, respective
metacognitive knowledge. In most cases, different specialists
are employed for creating and developing
•
factual knowledge, e.g., research data and its documen-
tation,
•
conceptual knowledge, e.g., classiﬁcation of knowledge
objects,
•
procedural knowledge, e.g., procedures, workﬂows, pro-
grams, and their respective documentation,
•
metacognitive knowledge, e.g., documentation of expe-
riences.
In practice, the creators are commonly represented by different
groups of experts, e.g., scientists, classiﬁcation experts in
scientiﬁc libraries, and designers of scientiﬁc algorithms and
workﬂows.
B. Main Components
The core components of a basic knowledge mining im-
plementation with the Knowledge Resources, based on the
knowledge-centric computation architecture, can be sum-
marised with a block diagram (Figure 7). The block diagram
shows the Knowledge Resources and two types of knowledge
object groups, namely object collections and containers. Each
type and implementation can have individual and specialised
interfaces. Knowledge mining is provided by an interface
with the Knowledge Resources. The diagram also contains
the interface block, due to the importance of the resource
creation use-case. The individual groups have ports, interaction
points, which can be used via interfaces, e.g., Knowledge
Resources Creation (KRC) port and Knowledge Resources
Mining (KRM) port. Components can have further interfaces,
with and without delegating ports. It is common that indepen-
dent resources are in many cases not necessarily orchestrated.
(c) R¨uckemann, 2019
(c) DIMF, 2019
Knowledge Resources Interface
Knowledge Resources Interface
Mining
Mining
Resource Creation
Resource Creation
Collection
Collection
Container
Container
≪delegate≫
≪delegate≫
Container Interface
Collection Interface
Collection Interface
Container Interface
KRM
KRC
Collection Interface
Collection Interface
Collection Interface
Collection Interface
Container Interface
Container Interface
Container Interface
Container Interface
Knowledge Resources
Mining Interface
Knowledge Resources
Mining Interface
KRC Port
KRC Port
KRM Port
KRM Port
Knowledge Resources
Creation Interface
Knowledge Resources
Creation Interface
Figure 7. Block diagram of respective knowledge-centric computation
architecture components: Excerpt of Knowledge Resources and interfaces.
C. Activity groups
A number of activities are associated with different com-
ponents. An important activity regarding the resource creation
is the creation-update (Figure 8). The resource creation com-
(c) R¨uckemann, 2019
(c) DIMF, 2019
Update Object
EXISTS?
Create Object Instance
Update Existing Object
no
yes
Figure 8. Activity diagram illustrating the essential object creation-update
activities in the knowledge-centric computation architecture.
ponent has to provide creation and update activities for the
different creator groups. A simple but important example for
resource creation and development is the creation of an object
instance and respective updating an existing object with a new
instance.
Start state is any state of the Knowledge Resources. End
state is a new state of the Knowledge Resources. Regard-
ing resource creation and development use-cases the start
and end states should be considered intermediate states. As
shown in the use-case diagram, professional practice affords
the implementation of according activities for all required,
specialised creator roles. A fundamental mining activity with
Knowledge Resources is a resource request targeting to create
an intermediate result (Figure 9). Start state is any state in a
knowledge mining workﬂow chain. End state is a new state
in a knowledge mining workﬂow chain. Regarding knowledge
mining use-cases the start and end states should be considered
intermediate states. If a resource is not available then an
38
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

(c) R¨uckemann, 2019
(c) DIMF, 2019
Resource Request
AVAILABLE?
Ignore-procedure
Create Intermediate Result
Select Interface
Explore Resource
Knowledge Mapping
Phonetic Selection
Create Resource Instance
no
yes
Figure 9. Activity diagram of a basic resource request for creating an
intermediate knowledge mining result.
ignore-procedure continues for creating an intermediate result.
The ignore-procedure can contribute its status to the workﬂow
chain. If the resource is available then an interface is selected
for the resource exploration. The exploration can use available
activities, e.g., knowledge mapping and phonetic selection,
in order to create a resource instance, which contributed
to creating an intermediate result for the workﬂow chain.
Examples of activities are multi-dimensional context creation
by knowledge mapping [6] and phonetic association, e.g.,
using Soundex [23][24][25]. Sample Soundex codes developed
[11] are used for names in various textual, contextual, and
linguistical situations, implemented in order to be integrated
in a large number of situations.
V.
DISCUSSION
The computation architecture provides the ﬂexibility that
workﬂow chain modules and whole workﬂow chains can be
employed sequential or parallel. The components in general
are not limited by the architecture to be implemented for
synchronous or asynchronous accesses if required for arbitrary
algorithms and workﬂows.
The implementations for practical case studies built upon
this architecture span different disciplines and deal with differ-
ent foci. The excerpted cases include general, simpliﬁed cases
of knowledge mining and practical knowledge development
scenarios from realisations, which were implemented for large
practical solutions. These cases are relevant because of the
professional background and practice required to deal with
development of resources and application components for
long-term tasks.
In complex scenarios, different disciplines contribute ful-
ﬁlling different tasks. In case of knowledge creation and
development and its valorisation different specialised expertise
is required. In general, content and applications are created
by different disciplines. Even different aspects of content may
require different specialists groups, different roles, e.g., natural
sciences research data and conceptual valorisation are often
done by scientists from a respective discipline and information
scientists. Many components have to be revisited and improved
over time as the results and facilities should be continued and
preserved and be available for long-term. In the implementa-
tion cases, factual, conceptual, procedural, and metacognitive
knowledge is cared for by different experts. The architecture
allows ﬂexible and efﬁcient separation of roles. For example,
research data can be created by a role and can at any time be
amended with classiﬁcation and procedural documentation by
experienced research library specialist and researcher roles.
The Knowledge Resources are containing a lot more content
and references than can be used at present time in most cases.
The architecture allowed to support retaining the associated
knowledge required to resemble the intrinsic complexity of
realia situations while implementing selected solutions for
isolated as well as complex situations. The development of
knowledge mining and the provisioning of services based
on these tasks can continuously be done by application de-
velopers, accessing the continuously extendable Knowledge
Resources.
VI.
CONCLUSION
The paper presented the research results of creating a
knowledge-centric computation architecture. The resulting ar-
chitecture was developed in continuous cross development
of multi-disciplinary, multi-lingual Knowledge Resources and
practical knowledge-centric solutions. This paper presented the
major qualities of the computation architecture. The practical
employment of the architecture was illustrated for advanced
knowledge mining and practical development uses-cases.
The contributing research collaboration achieved to create
a practical approach for a knowledge-centric computation
architecture, which allows the methodological and systemat-
ical development and employment of components, including
Knowledge Resources. The architecture covers the creation
of ﬂexible solutions, which allow to most widely employ the
complements of knowledge.
Computation architecture and use-cases proved in practice
to support both the seamless separation and integration of roles
for different disciplines and tasks while implementing and
realising solutions. In addition to the implemented and referred
case studies, we showed that major use-cases can be efﬁciently
be managed. Especially, on the one hand, knowledge creation
and development can be professionally dealt with by groups
from responsible disciplines. On the other hand, knowledge
mining relying on the resources can be based on the work of
these disciplines while service based use and implementation
can be given different roles.
Future research will concentrate on further extending and
developing Knowledge Resources in order to provide long-
term capacities and creating new advanced algorithms and
mining workﬂows for enabling fundaments for new insight,
participating different institutions and roles, based on the
knowledge-centric computation architecture.
39
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

ACKNOWLEDGEMENTS
We are grateful to the “Knowledge in Motion” (KiM)
long-term project, Unabh¨angiges Deutsches Institut f¨ur Multi-
disziplin¨are Forschung (DIMF), for partially funding im-
plementations, case studies, and publications under grants
D2016F5P04648, D2017F1P04812, and D2018F6P04938 and
to its senior scientiﬁc members and members of the per-
manent commission of the science council and the board
of trustees, especially to Dr. Friedrich H¨ulsmann, Gottfried
Wilhelm Leibniz Bibliothek (GWLB) Hannover, to Dipl.-Biol.
Birgit Gersbeck-Schierholz, Leibniz Universit¨at Hannover, to
Dipl.-Ing. Martin Hofmeister, Hannover, and to Olaf Lau, Han-
nover, Germany, for collaboration, practical multi-disciplinary
case studies, and the analysis and implementation of advanced
concepts. We are grateful to Dipl.-Ing. Hans-G¨unther M¨uller,
Cray, Germany, for his excellent contributions and assistance,
providing practical private cloud and storage solutions. We are
grateful to all national and international partners in the Geo
Exploration and Information cooperations for their constructive
and trans-disciplinary support. We are grateful to the Science
and High Performance Supercomputing Centre (SHPSC) for
long-term support and The International ARS Science and
History Network for providing multi-disciplinary application
scenarios and assistance. / DIMF-PIID-DF98 007.
REFERENCES
[1]
Aristotle, Nicomachean Ethics, 2008, (Written 350 B.C.E.), Translated
by W. D. Ross, Provided by The Internet Classics Archive, URL: http:
//classics.mit.edu/Aristotle/nicomachaen.html [accessed: 2019-03-24].
[2]
Aristotle, The Ethics of Aristotle, 2005, Project Gutenberg, eBook,
EBook-No.: 8438, Release Date: July, 2005, Digitised Version of the
Original Publication, Produced by Ted Garvin, David Widger, and
the DP Team, Edition 10, URL: http://www.gutenberg.org/ebooks/8438
[accessed: 2018-01-01].
[3]
L. W. Anderson and D. R. Krathwohl, Eds., A Taxonomy for Learning,
Teaching, and Assessing: A Revision of Bloom’s Taxonomy of Educa-
tional Objectives.
Allyn & Bacon, Boston, MA (Pearson Education
Group), USA, 2001, ISBN-13: 978-0801319037.
[4]
Plato, Phaedo, 2008, (Written 360 B.C.E.), Translated by Benjamin
Jowett, Provided by The Internet Classics Archive, URL: http://classics.
mit.edu/Plato/phaedo.html [accessed: 2019-03-24].
[5]
C.-P. R¨uckemann and F. H¨ulsmann, “Signiﬁcant Differences: Method-
ologies and Applications,” KiMrise, Knowledge in Motion Meeting,
November 27, 2017, Knowledge in Motion, Hannover, Germany, 2017.
[6]
C.-P. R¨uckemann, “Methodology of Knowledge Mapping for Arbitrary
Objects and Entities: Knowledge Mining and Spatial Representations
– Objects in Multi-dimensional Context,” in Proceedings of The
Tenth International Conference on Advanced Geographic Information
Systems, Applications, and Services (GEOProcessing 2018), March
25 – 29, 2018, Rome, Italy.
XPS Press, Wilmington, Delaware,
USA, 2018, pp. 40–45, ISSN: 2308-393X, ISBN-13: 978-1-61208-617-
0, URL: http://www.thinkmind.org/index.php?view=article&articleid=
geoprocessing 2018 3 20 30078 [accessed: 2019-03-24].
[7]
C.-P. R¨uckemann, “Creation of Objects and Concordances for Knowl-
edge Processing and Advanced Computing,” in Proceedings of The
Fifth International Conference on Advanced Communications and Com-
putation (INFOCOMP 2015), June 21–26, 2015, Brussels, Belgium.
XPS Press, 2015, ISSN: 2308-3484, ISBN-13: 978-1-61208-416-
9, URL: http://www.thinkmind.org/index.php?view=article&articleid=
infocomp 2015 4 30 60038 [accessed: 2019-03-24].
[8]
C.-P. R¨uckemann, “Advanced Association Processing and Computation
Facilities for Geoscientiﬁc and Archaeological Knowledge Resources
Components,” in Proceedings of The Eighth International Conference on
Advanced Geographic Information Systems, Applications, and Services
(GEOProcessing 2016), April 24 – 28, 2016, Venice, Italy. XPS Press,
2016, pages 69–75, ISSN: 2308-393X, ISBN-13: 978-1-61208-469-5.
[9]
C.-P. R¨uckemann, “Advanced Knowledge Discovery and Computing
based on Knowledge Resources, Concordances, and Classiﬁcation,”
International Journal On Advances in Intelligent Systems, vol. 9, no.
1&2, 2016, pp. 27–40, ISSN: 1942-2679.
[10]
“Perl Compatible Regular Expressions (PCRE),” 2019, URL: https://
www.pcre.org/ [accessed: 2019-03-24].
[11]
C.-P. R¨uckemann, “Archaeological and Geoscientiﬁc Objects used
with Integrated Systems and Scientiﬁc Supercomputing Resources,”
International
Journal
on
Advances
in
Systems
and
Measure-
ments,
vol.
6,
no.
1&2,
2013,
pp.
200–213,
ISSN:
1942-
261x, URL: http://www.iariajournals.org/systems and measurements/
sysmea v6 n12 2013 paged.pdf [accessed: 2019-03-24].
[12]
C.-P. R¨uckemann, “Multi-dimensional Context Creation Based on the
Methodology of Knowledge Mapping,” International Journal on Ad-
vances in Software, vol. 11, no. 3&4, 2018, pp. 286–298, ISSN: 1942-
2628, URL: http://www.iariajournals.org/software/soft v11 n34 2018
paged.pdf [accessed: 2019-03-24].
[13]
C.-P. R¨uckemann, “Superordinate Knowledge Based Comprehen-
sive Subset of Conceptual Knowledge for Practical Geo-spatial
Application Scenarios,” in Proceedings of The Eleventh Interna-
tional Conference on Advanced Geographic Information Systems,
Applications, and Services (GEOProcessing 2019), February 24 –
28, 2019, Athens, Greece.
XPS Press, Wilmington, Delaware,
USA, 2019, pp. 52–58, ISSN: 2308-393X, ISBN: 978-1-61208-687-
3, URL: http://www.thinkmind.org/index.php?view=article&articleid=
geoprocessing 2019 3 30 30039 [accessed: 2019-03-24].
[14]
UDC, Universal Decimal Classiﬁcation.
British Standards Institute
(BSI), 2005, complete Edition, ISBN: 0-580-45482-7, Vol. 1 and 2.
[15]
C.-P. R¨uckemann, “Enabling Dynamical Use of Integrated Systems and
Scientiﬁc Supercomputing Resources for Archaeological Information
Systems,” in Proc. INFOCOMP 2012, Oct. 21–26, 2012, Venice, Italy,
2012, pp. 36–41, ISBN: 978-1-61208-226-4.
[16]
“UDC Online,” 2018, URL: http://www.udc-hub.com [ac.: 2019-03-24].
[17]
“Multilingual Universal Decimal Classiﬁcation Summary,” 2012, UDC
Consortium, 2012, Web resource, v. 1.1. The Hague: UDC Consortium
(UDCC Publication No. 088), URL: http://www.udcc.org/udcsummary/
php/index.php [accessed: 2019-03-24].
[18]
“Creative Commons Attribution Share Alike 3.0 license,” 2012, URL:
http://creativecommons.org/licenses/by-sa/3.0/ [accessed: 2019-03-24].
[19]
B. Oestereich and A. Scheithauer, Analyse und Design mit der UML
2.5: Objektorientierte Softwareentwicklung, 11th ed.
De Gruyter
Oldenbourg, 2013, ISBN: 978-3486721409.
[20]
“Uniﬁed Modeling Language (UML),” 2019, URL: http://uml.org/ [ac-
cessed: 2019-03-24].
[21]
“About the Uniﬁed Modeling Language Speciﬁcation 2.5.1,” Dec. 2017,
OMG – Object Management Group, URL: https://www.omg.org/spec/
UML/ [accessed: 2019-03-24].
[22]
“The Perl Programming Language,” 2019, URL: https://www.perl.org/
[accessed: 2019-03-24].
[23]
R. C. Russel and M. K. Odell, “U.S. patent 1261167,” 1918, (Soundex
algorithm), patent issued 1918-04-02.
[24]
D. E. Knuth, The Art of Computer Programming: Sorting and Search-
ing. Addison-Wesley, 1973, vol. 3, ISBN: 978-0-201-03803-3, OCLC:
39472999.
[25]
National Archives and Records Administration (NARA), “The Soundex
Indexing System,” 2007, 2007-05-30, URL: http://www.archives.gov/
research/census/soundex.html [accessed: 2019-03-24].
40
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-732-0
INFOCOMP 2019 : The Ninth International Conference on Advanced Communications and Computation

