Parameter Estimation for Heuristic-based Internet Trafﬁc Classiﬁcation
Michael Finsterbusch, Jean-Alexander M¨uller, Chris Richter
Dept. of Communication and Computer Science
Hochschule f¨ur Telekommunikation Leipzig (University of Applied Sciences)
Leipzig, Germany
{ﬁnsterbusch|jeanm|richter}@hft-leipzig.de
Abstract—Accurate trafﬁc classiﬁcation is necessary for
many administrative networking tasks like security monitoring,
providing Quality of Service and network design or planning.
We apply 18 machine learning algorithms to classify network
trafﬁc based on six classes of statistical parameters. In contrast
to other studies, we use a per-packet approach instead of a per-
ﬂow approach to make it possible to use the classiﬁcation results
for real-time network interception. In this paper we illustrate
the accuracy of the algorithms with different parameter
combinations with the goal to reduce the amount of necessary
parameters needed for high accuracy trafﬁc classiﬁcation. Our
results indicate that some parameter combinations can be used
to classify a large number of protocols. We identiﬁed algorithms
with good and worse classiﬁcation accuracy and algorithms
which need much time for classiﬁcation, so that they cannot
be used for real-time classiﬁcation.
Keywords-ﬂow classiﬁcation, Internet trafﬁc, trafﬁc identiﬁca-
tion.
I. INTRODUCTION
Network trafﬁc classiﬁcation or particularly application
classiﬁcation and identiﬁcation is the process of identifying
the type of application (or the protocol) that generates
a particular network ﬂow. There is a growing need for
trafﬁc classiﬁcation. Many tasks that are necessary for
network operation and management as well as for business
models based on providing network access can beneﬁt from
trafﬁc classiﬁcation. Trafﬁc classiﬁcation can be used for
QoS (quality of service) mapping, trafﬁc shaping, access
control, content control/ﬁltering, intrusion detection and
prevention, trend analysis, monitoring, lawful interception,
content optimization, billing and metering, load balancing,
trafﬁc engineering, network planning, etc.
In general, there are four kinds of trafﬁc classiﬁcation
methods. The oldest and most common method is the port
based approach. This uses the well-known-port numbers
of the TCP/UDP protocols assigned by the IANA. Many
client-server applications or protocols use asymmetric port
numbers for client and server, which means that client
port and server port differ. The port based method mostly
refers to the server port to identify an application. But
the server port can be set to any port number by the
server administrator. Not every protocol own well-known
port numbers or they use dynamic ports like P2P (peer-
to-peer) protocols. By using tunnels, this method fails too.
Therefore, we cannot trust in this method.
Another method used is protocol decoding. It is based
on stateful reconstruction of sessions and application
information from packet content. It identiﬁes protocols
by their characteristic protocol headers (magic numbers,
incrementing counters, session identiﬁers, etc.), packet
sequences, etc. so it avoids needing to trust in port numbers.
This method provides high accuracy but it is very expensive.
Every protocol detection must be implemented manually
and in-depth knowledge of the entire protocol and the
network environment is necessary. Problems of this method
are the amount of network protocols and keeping it up
to date. Furthermore proprietary protocols must be reverse
engineered and encrypted trafﬁc is out of scope for protocol
decoding. Therefore this method is often used only for
dedicated popular protocols, e. g., HTTP and mail protocols
like in Cisco’s Network Based Application Recognition
(NBAR) [1].
The third method is the pattern or signature based ap-
proach [2]. This method uses application speciﬁc signatures
and searches for those in the protocol header and content to
identify the application. The problem of this method is to
ﬁnd good pattern. Furthermore pattern matching for many
patterns across all network trafﬁc can become very expensive
especially for higher data rates. Additionally, the protocol
detection can take up to 100 seconds or more [2].
The fourth method is based on the machine learning
approach. This method uses machine learning algorithms as
used in data mining to identify applications by characteristic
packet or ﬂow statistics. The advantage of this approach is
that the algorithms can be trained with real network trafﬁc.
If a protocol changed or a new protocol appeared, it is
easy to repeat the training to update the protocol identiﬁer.
Probably it can be used to identify some encrypted protocols.
A problem of this method is to ﬁnd the proper parameters
and effective machine learning algorithms.
The machine learning approach has been discussed in
numerous papers [3], [4], [5], [6], but with focus on just
one algorithm. In this paper we evaluate a wide range
of candidate algorithms and parameters. Furthermore, we
evaluate which of these algorithms are suitable for real-
time trafﬁc classiﬁcation. In this context, real-time means
that trafﬁc management (e. g., trafﬁc shaping) can be done
13
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

OpenDPI
Output
Connection Tracking &
Protocol Table
libPCAP
Connection
Tracking
Packet
FlowInfo
FlowInfo
supposed
Protocol
FlowInfo
Protocol
CSV File
Packet
PCAP File
Figure 1: Block diagram of automatic ﬂow labelling
immediately. This approach is mostly used for non real-time
or ofﬂine network trafﬁc analysis [3], [4], [6].
The remainder of this paper is structured as follows:
Section 2 contains a description of the trafﬁc classiﬁcation
used as the basis for our research. The statistical parameters
applied and the classifying algorithms examined can be
found in the succeeding Sections 3 and 4. Section 5
describes the experimental setup of our research and Section
6 covers the parameter reduction. Finally, Section 7 provides
a conclusion and the direction for our future work.
II. TRAFFIC CLASSIFICATION TOOLS
To test and train the different machine learning algorithms
(see Section IV) we used different network trafﬁc traces in
PCAP (packet capture library) format [7]. To extract the
necessary information from these capture ﬁles, we developed
a tool to generate adequate input data to the algorithms. We
had to develop our own tool because available tools like
GTVS (Ground Truth Veriﬁcation System) [8] do not fulﬁl
our constraints for the automatic trafﬁc labelling and we
used many different statistical parameters (see Section III),
which were not included in GTVS.
The processing and labelling of the PCAP ﬁle is done in
two consecutive steps: First, the automatic protocol detection
and labelling and second, computation of statistics. The
result of the ﬁrst step is a text ﬁle in CSV (comma separated
values) format. This CSV ﬁle is used for manual post-
processing to check for correctly labelled ﬂows or to label
unknown — not automatically detected trafﬁc — manually.
To detect and label the ﬂows automatically we use OpenDPI
[9], which is a library that performs protocol detection by
stateful reconstruction of session and application information
from packet content. Other tools, e. g., GTVS [8] use
heuristics to classify and label the trafﬁc. But we decided
not to use this tool because it is based on port numbers,
which are not aware of, e. g., tunnels etc. (see Section I).
The structure and function of the automatic trafﬁc
labelling is shown in the block diagram on Fig. 1.
The
libPCAP-API [7] is used to read single packets from a
PCAP ﬁle. A connection tracking is needed to work on
Output
libPCAP
Connection
Tracking
Input
Statistic
Connection Tracking &
Protocol Table
Statistic
Table
Packet
FlowInfo
Packet
build up
PCAP File
CSV File
Protocol
FlowInfo
Packet/Flow
Statistic
ARFF/Weka File
Statistic
FlowInfo
Figure 2: Block diagram of statistics computation
a per-ﬂow basis. The connection tracking contains a TCP
state machine. As a result the connection tracking provides
only those packets belonging to a correct TCP ﬂow that
was already seen from beginning of the ﬂow (3-way-hand-
shake). Many protocols may only be detected if the ﬁrst
packets of the ﬂow — which in many protocols contain
a handshake — are present (e. g., SSL/TLS). Therefore
the connection tracking is very important. To deal with
the stateless nature of UDP we used timeouts to split the
UDP trafﬁc for the same 5-tuple into different ﬂows. The
necessary ﬂow information (e. g., current state machine state)
is saved to the connection tracking table with the 5-tuple
(source/destination IP address, source/destination port, the
IP protocol ﬁeld value) as key.
The second step in PCAP processing is to compute the
statistical parameters. Fig. 2 shows the block diagram of the
ﬂow based statistic generation. The CSV-File from ﬁrst step
is used to build up a ﬂow table that contains the detected
protocol, the ﬂow start timestamp and the 5-tuple as key. The
start timestamp is prerequisite to differentiate ﬂows with the
same 5-tuple. The computation of the statistical parameters
is done for every packet of a ﬂow. A detailed description of
the parameters and their computation is in Section III.
The output of the statistics processing is in ARFF
(Attribute-Relation File Format)/WEKA ﬁle format [10], see
Section IV. The output contains separate training and testing
data. Furthermore there are two kinds of statistical data: (1)
per-packet data (2) per-ﬂow data. The per-packet data can be
used to determine if the classiﬁers/algorithms can be used for
real-time classiﬁcation tasks. The per-ﬂow data can be used
to determine the quality of the classiﬁers/algorithms applied
to ofﬂine data or non real-time data like NetFlow (NetFlow
is an industry standard protocol for trafﬁc monitoring by
collecting IP trafﬁc information) data used for monitoring
or forensics.
Trafﬁc classiﬁcation on a per-packet basis makes it
possible to intercept the network trafﬁc for management and
14
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

trafﬁc engineering in real-time. On a per-ﬂow basis the ﬂow
has ﬁnished when it is classiﬁed. So, the classiﬁcation can
only be used for monitoring or statistics.
III. STATISTICAL PARAMETERS
The basis for trafﬁc classiﬁcation using heuristic algo-
rithms are objects which can be classiﬁed by the algorithms
used. For this approach, we are using trafﬁc ﬂows as the
foundation for our classiﬁcation. We deﬁne a trafﬁc ﬂow as
one or more related IP-packets between two connected hosts.
Each ﬂow is characterized by a 5-tuple consisting of the
source and destination IP-address, the network layer protocol
number and the source and destination port (referring to TCP
and UDP). For TCP based ﬂows we are using only complete
TCP ﬂows. This implies that the investigated TCP ﬂows
have a 3-Way-Handshake for the connection establishment
and a connection termination, for example with the 4-Way-
Handshake or the reset ﬂag (RST). To collect those complete
TCP ﬂows we used a TCP state machine we implemented in
the tool described in Section II. Incomplete or fragmented
TCP ﬂow traces are subject of our further ongoing research.
A. Flow parameters
Besides the 5-tuple as the unique qualiﬁer, each ﬂow is
described by additional parameters. The most parameters
are differentiated for the whole ﬂow, for upstream and for
downstream. The reason for this differentiation can be found
in the particular differences in upstream and downstream
behaviour of various protocols, e. g., HTTP. Our selection
of ﬂow characterizing parameters is shown in Table I.
According to [11] we describe each ﬂow with three
modes:
• idle: A ﬂow is idle when no packets were sent between
the two hosts for more than two seconds.
• bulk: The bulk mode is deﬁned as the time when
there are more than three packets being successfully
delivered in the same direction without any packet with
data in the other direction.
• interactive: When there are packets sent in both
directions, the ﬂow is in the interactive mode.
Because the interactive mode is also deﬁned as the time
when the ﬂow is not in the idle or in the bulk mode —
which means that the interactive mode correlates with the
other two modes, we decided to gather only the duration
and quota for idle and bulk mode. Furthermore we provide
information about the interarrival time, whole ﬂow duration,
packet count and the payload size.
B. Parameter computation
As shown in [11], there are more possible ﬂow char-
acterizing parameters than we present in Table I. But, a
lot of these parameters are not correlated with the used
protocol. Instead, they are only inﬂuenced by the transport
network, e. g., the Internet. For example, the total number
of duplicated SACK packets ([11]: parameter no. 39 and
no. 40) only indicates packet loss in the network and is a
result of TCP congestion control. These network inﬂuences
are independent from the protocol characteristics.
Also, often the transport layer (UDP and TCP) port
numbers are used as ﬂow characteristics [4], [5], [11], [12].
Because of the use of network address translation (NAT) or
by intentional administrative changes of server port numbers,
these characteristics are not reliable for trafﬁc classiﬁcation.
Other parameters, like the median of bytes on wire, are
depending on the used network stack implementation. The
number of bytes on wire, e. g., Ethernet, are inﬂuenced by
the different possible options in the IP and TCP header or
the use of IPv4 and IPv6. Thus, there will be a packet with
the same transport layer payload with a different number of
bytes on the wire and this is not dependent on the classifying
protocol.
The target of our research is the usage of heuristic
algorithms for real-time trafﬁc classiﬁcation. Therefore, we
cannot compute the ﬂow characterizing parameters at the
end of the ﬂow. Instead, we compute all parameters after
each packet of the ﬂow is received. Hence, we compute
moving averages, like the median interarrival time or the
average byte count of the network layer payload. Required
aggregate values are also computed as moving values for
each received packet of the ﬂow.
IV. ALGORTIHMS
To classify the network trafﬁc we are using different ma-
chine learning algorithms, which are also called classiﬁers.
All the classiﬁers we used are off the shelf machine learning
algorithms and we treat them as black-box classiﬁers. For
this work we used the WEKA software suite [10]. The
WEKA suite is written in Java language and contains a
collection of machine learning algorithms for data mining
tasks. WEKA provides a uniform interface for all classiﬁers,
which made it easy to automate training and testing of
different classiﬁers.
A. Train and Test suite
The records, generated by the tool described in Section
II and used as training and testing data for the classiﬁers,
are provided as ARFF ﬁles. An ARFF ﬁle is an ASCII text
ﬁle that contains (1) a header Section, which describes the
used parameters/attributes and (2) the data Section, which
contains the records. Each record is represented by one line
containing all parameters in a comma separated list. The
training record contains all statistical parameters and the
associated protocol. Therefore, we can use the supervised
learning approach for the machine learning algorithms. The
test records contain only the statistical parameters.
If a classiﬁer is trained by WEKA it generates a classiﬁer
model that can be saved to a ﬁle. In a test case this model
can be used by the classiﬁer to make a prediction of the
15
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

Table I: Used ﬂow and packet parameters and their description
No.
Class
Short Name
Description
1
1
packet cnt
packet count whole ﬂow
2
1
packet cnt us
packet count upstream
3
1
packet cnt ds
packet count downstream
4
2
intarv time med
median interarrival time whole ﬂow
5
2
intarv time max
maximum interarrival time whole ﬂow
6
2
intarv time min
minimum interarrival time whole ﬂow
7
2
intarv time med us
median interarrival time upstream
8
2
intarv time max us
maximum interarrival time upstream
9
2
intarv time min us
minimum interarrival time upstream
10
2
intarv time med ds
median interarrival time downstream
11
2
intarv time max ds
maximum interarrival time downstream
12
2
intarv time min ds
minimum interarrival time downstream
13
3
bytes payload l4 med
median byte count of L4 payload whole ﬂow
14
3
bytes payload l4 max
maximum byte count of L4 payload whole ﬂow
15
3
bytes payload l4 min
minimum byte count of L4 payload whole ﬂow
16
3
bytes payload range
(maximum - minium) byte of L4 payload whole ﬂow
17
3
bytes payload l4 med us
median byte count of L4 payload upstream
18
3
bytes payload l4 max us
maximum byte count of L4 payload upstream
19
3
bytes payload l4 min us
minimum byte count of L4 payload upstream
20
3
bytes payload range us
(maximum - minium) byte of L4 payload upstream
21
3
bytes payload l4 med ds
median byte count of L4 payload downstream
22
3
bytes payload l4 max ds
maximum byte count of L4 payload downstream
23
3
bytes payload l4 min ds
minimum byte count of L4 payload downstream
24
3
bytes payload range ds
(maximum - minium) byte of L4 payload downstream
25
4
duration ﬂow
whole connection duration
26
4
duration ﬂow us
connections duration on upstream
27
4
duration ﬂow ds
connections duration on downstream
28
5
changes bulktrans mode
number of transitions between bulk- and transfermode
29
5
duration bulkmode
time spent in bulk transfer mode
30
5
duration bulkmode us
time spent in bulk transfer mode for upstream
31
5
duration bulkmode ds
time spent in bulk transfer mode for downstream
32
5
quota bulkmode
percentage of quota of bulk transfer mode (per mille)
33
5
quota bulkmode us
percentage of quota of bulk transfer mode (per mille) on upstream
34
5
quota bulkmode ds
percentage of quota of bulk transfer mode (per mille) on downstream
35
6
time idle sum
time spent in idle mode for whole ﬂow
36
6
time idle sum us
time spent in idle mode for upstream
37
6
time idle sum ds
time spent in idle mode for downstream
38
6
quota time idle
percentage of quota of time spent in idle mode (per mille)
39
6
quota time idle us
percentage of quota of time spent in idle mode (per mille) on upstream
40
6
quota time idle ds
percentage of quota of time spent in idle mode (per mille) on downstream
protocol which was the origin of the statistical record. Due
to the generation of training and testing data from one
PCAP ﬁle by the tool in Section II, we can evaluate the
quality of prediction by comparing the classiﬁer results with
the training records containing the protocol. This PCAP
ﬁle must be a different ﬁle than the one which was used
to generate the classiﬁer model. To automate training and
testing of different classiﬁers we wrote a test suite on top
of WEKA. Fig. 3 shows a block diagram of the test suite.
The test suite provides parallel WEKA instances to speed up
training and tests. Furthermore, the test suite can measure
the memory and time consumption the classiﬁers need for
training and testing.
B. Preselection of Algorithms
The WEKA software suite contains more than 100
classiﬁers. So, it was necessary to choose the best candidates
of these classiﬁers to reduce the amount of time to train, test
and evaluate the classiﬁer results.
Classifier
WEKA
Model
Classifier
Classifier
WEKA
Compare
ARFF
File
Train
ARFF
File
Train
ARFF
File
Test
Result
load
generate
prediction
X
Train
Test
Y
Y
Figure 3: Block diagram of the test suite
In a ﬁrst preselection of the classiﬁers, we used a training-
set that was also used as test-set. This means a good classiﬁer
should correctly predict a preponderant part of data. We
dismissed classiﬁers with accuracy below 90%. The second
16
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

criterion for preselection was the time needed for training
and testing. The third criterion was the memory consumption
of the classiﬁers. If a classiﬁer needed more than 2 GByte
of RAM for this test, it was also dismissed. The preselected
classiﬁers are shown in the left row of Table II.
We used the classiﬁers as black-box with the default
parameters as proposed by WEKA.
V. EXPERIMENTAL SETUP
For training and testing we used the test suite described in
Section IV. The used data and the results of our experiments
are shown below in this section.
A. Used Data
During this study we have used data collected from
different sources. We manually generated network trafﬁc
and captured network trafﬁc from the campus network.
Additionally we used trace ﬁles from [13], [14].
All captured network trafﬁc was automatically classiﬁed
with the tool described in Section II. The whole trafﬁc
was veriﬁed by hand. False or not classiﬁed trafﬁc was
completed by hand. Then, we split this data into two parts
and generated the training and testing data in ARFF-format.
Table III contains the composition of network packets for
training and testing data.
Many of the investigated protocols use cryptographic
encryption to protect their data, making it difﬁcult to
classify these protocols. Bittorrent, eDonkey, IMAP, POP3
and SMTP use encryption. IMAP, POP3 and SMTP can
cryptographically protect their communication before they
start their session or they can request encryption during the
session (STARTTLS). In the second case the establishment
of the session is not encrypted. Our data contains both kinds
of IMAP, POP3 and SMTP trafﬁc. The other protocols do
not use encryption. Also, the HTTP trafﬁc contains only
unencrypted trafﬁc; it does not contain HTTPS (TLS) trafﬁc.
The results of the test run for all classiﬁers with the
computed classiﬁer-models and the particular test data are
deterministic.
B. Results
Table II contains the results of this study. It shows if it is
possible for an algorithm with any parameter combination
Table III: Used training and testing data (number of packets)
Protocol
Training
Testing
Encryption
Bittorrent
7772
10461
yes
eDonkey
19961
48420
yes
Flash
21373
21212
no
HTTP
4743
1236
no
IMAP
2797
1025
yes
Oscar
315
257
no
POP3
673
3044
most
RTP
24404
57428
no
SIP
414
760
no
SMTP
560
774
yes
to detect a protocol with an accuracy greater than or equal
to 90%.
Additionally, Table II contains the time needed for training
and testing. These times are measured by using the HPROF
tool for heap and CPU proﬁling, which is part of the Java
Virtual Machine. We measured the CPU usage time for every
algorithm and used the fastest algorithm (OneR) as reference
to scale the timing results. As we can see, in Table II the
amount of time spent for training is much higher than for
testing. But, this is not a problem in general. Training is
done only once but testing is done permanently for protocol
classiﬁcation. All the algorithms have very similar CPU time
consumption, but four algorithms (BayesNet, NaiveBayes,
NaiveBayesUpdateble and ND) have a notedly higher CPU
time consumption. This could make these four algorithms
unusable for real-time trafﬁc classiﬁcation. Furthermore, the
algorithms NaiveBayes and NaiveBayesUpdateble provide
nearly the same results, which can be seen in Table II as
well as in Fig. 4.
It can be seen from Table II that not all used algorithms
are suitable for protocol classiﬁcation with the selected
statistical parameters. Also, it shows that the observed
protocols have very different behaviour, so that some could
be detected with high accuracy (Bittorrent, RTP, Flash) while
other protocols (eDonkey, IMAP) are hard to detect.
VI. PARAMETER REDUCTION
As described in Section III and listed in Table I, we
used 40 parameters, which can be divided into six different
parameter classes. Table II shows on which protocols our
18 preselected classiﬁers have a classiﬁcation accuracy with
greater than or equal to 90%. However, Table II does not
show which parameter combinations were suitable for the
best classiﬁcation results.
One important target of our research is the reduction
of the used parameters — ﬁrst, to eliminate unnecessary
or disruptive parameters according to the classiﬁcation
accuracy and second, to eliminate parameters and thus
reduce the complexity of the classiﬁcation for optimization
according to real-time classiﬁcation. Therefore, we tested all
classiﬁers with all possible combinations of the parameter
classes from Table I. Hence, we tested our 18 classiﬁers
with our training PCAP trace and all 63 combinations
of the parameter classes — the 64th combination (all
classes removed) was omitted. The results of these tests are
evaluated below in this section.
The evaluation of the test results are shown in different
histograms. Each parameter combination is expressed as a
decimal number in these histograms (see Fig. 4, Fig. 5, Fig.
6 and Fig. 7). These decimal numbers are the sum of the
values of each parameter class as shown in Table IV. For
example, the combination of the payload size (4) and bulk
(16) parameters is the decimal number 20 = 4 + 16.
17
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

Table II: Protocol classiﬁcation with greater than or equal to 90% accuracy and time factor
Time Factor
WEKA Classiﬁer Name
Bittorrent
eDonkey
Flash
HTTP
IMAP
Oscar
POP3
RTP
SIP
SMTP
Train
Test
AttributeSelectedClassiﬁer
✓
✓
✓
✓
✓
✓
✓
27.8
2.8
Bagging
✓
✓
✓
✓
✓
✓
127.4
1.4
BayesNet
✓
✓
✓
✓
✓
✓
✓
40.0
42.5
DataNearBalancedND
✓
✓
✓
✓
✓
✓
✓
✓
✓
92.0
5.2
DecisionTable
✓
✓
✓
✓
✓
388.4
1.9
FilteredClassiﬁer
✓
✓
✓
✓
✓
✓
21.9
2.1
J48
✓
✓
✓
✓
✓
✓
✓
✓
✓
37.7
2.1
J48graft
✓
✓
✓
✓
✓
✓
✓
✓
✓
49.6
3.0
NaiveBayes
✓
✓
✓
✓
✓
✓
✓
54.1
118.9
NaiveBayesUpdateable
✓
✓
✓
✓
✓
✓
✓
54.7
119.4
nestedDichotomies.ND
✓
✓
✓
✓
✓
✓
✓
✓
137.2
42.7
OneR
✓
✓
✓
✓
✓
5.0
1.0
PART
✓
✓
✓
✓
✓
✓
✓
✓
60.2
2.2
RandomCommittee
✓
✓
✓
✓
✓
✓
✓
✓
✓
42.3
2.3
RandomForest
✓
✓
✓
✓
✓
✓
✓
✓
35.0
2.3
RandomSubSpace
✓
✓
✓
✓
✓
✓
✓
✓
✓
71.6
1.9
RandomTree
✓
✓
✓
✓
✓
✓
✓
✓
✓
5.3
1.1
REPTree
✓
✓
✓
✓
✓
✓
13.7
1.3
Table IV: Binary coding of parameter combinations
Binary
Decimal
Parameter Class
20
1
packet count
21
2
interarrival
22
4
payload size
23
8
duration
24
16
bulk
25
32
idle
A. Classiﬁer Based Parameter Reduction
The ﬁrst basic approach to reduce the parameters is to
evaluate all classiﬁers according to their classiﬁcation ac-
curacy with the different classiﬁer combinations. Therefore
we ﬁrst ﬁltered all parameter combinations for each classiﬁer
which have a classiﬁcation accuracy greater than or equal
to 90% on each of the protocols of Table III. Afterwards,
we counted for each classiﬁer, which of these parameter
combinations were present on at least ﬁve protocols. The
results of this evaluation are shown in the histograms of Fig.
4. For each of the 18 preselected classiﬁers one histogram
is shown.
As you can see in the histograms of Fig. 4 nearly two-
thirds of all possible parameter combinations — 39 out of 63
— have a classiﬁcation accuracy of greater than or equal to
90% on at least ﬁve protocols with the used classiﬁers. Thus,
one third of all parameter combinations is not reaching this
limit and can already be dismissed for the further evaluation.
Furthermore, on 32 of these 39 parameter combinations the
parameter class payload size is included, which means that
all possible parameter combinations with the parameter class
payload size is present on at least one classiﬁer. The other
ﬁve parameter classes are only present in combinations with
other parameter classes and not on their own like payload
size (4).
Comparing the histograms in Fig. 4 with the results of
Table II illustrates the low accuracy of the classiﬁers De-
cisionTable, OneR and ﬁlteredClassiﬁer. In the histograms
there are only fewer or no parameter combinations which
have a classiﬁcation accuracy greater than or equal to 90%
on at least ﬁve protocols. Furthermore the best classi-
ﬁers with the most classiﬁcation accuracy greater than or
equal to 90% in Table II are DataNearBalancedND, J48,
J48graft, RandomCommittee, RandomSubSpace and Ran-
domTree with nine out of ten protocols. But, the histograms
in Fig. 4 show no parameter combination on these classiﬁers
which can be used on all of the nine protocols. With
the classiﬁers DataNearBalancedND, J48 and J48graft it is
only possible to classify at the most seven protocols with
one parameter combination to get a classiﬁcation accuracy
greater than or equal to 90%. For example, for DataNear-
BalancedND it is the parameter combination 36 (payload
size and idle) and for J48 the two parameter combinations 12
(payload size and duration) and 44 (payload size, duration,
idle). The classiﬁer J48graft has six possible parameter
combinations which can be used to classify seven protocols
with a classiﬁcation accuracy greater than or equal to 90%.
Like the classiﬁers RandomCommittee, RandomSubSpace
and RandomTree, the classiﬁers PART and RandomForest
have parameter combinations which can be used to classify
eight different protocols with a classiﬁcation accuracy
greater than or equal to 90%. For all of these classiﬁers, the
eight protocols which can be classiﬁed with one parameter
combination having a classiﬁcation accuracy greater than or
equal to 90% are: Bittorrent, Flash, HTTP, Oscar, POP3,
18
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
AttributeSelectedClassifier
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
Bagging
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
BayesNet
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
DataNearBalancedND
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
DecisionTable
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
FilteredClassifier
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
J48
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
J48graft
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
NaiveBayes
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
NaiveBayesUpdateable
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
ND
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
OneR
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
PART
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
RandomCommittee
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
RandomForest
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
RandomSubSpace
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
RandomTree
 0
 4
 8
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
REPTree
Figure 4: Distribution of parameter combinations for classiﬁers
(x-axis: parameter combinations, y-axis: number of occurrences)
RTP, SIP and SMTP. In fact, all of the possible parameter
combinations contain the parameter class payload size. In
addition, the most parameter combinations consist of at
least three parameter classes. The only exception is the
parameter combination 6 (interarrival and payload size) for
the RandomCommittee classiﬁer.
Fig. 5 shows a histogram with the number of classiﬁers
on which each of the 39 parameter combinations has a
classiﬁcation accuracy of greater than or equal to 90% at
least on ﬁve protocols. There are 16 parameter combinations
which facilitate a wide spectrum — at least two-thirds of all
classiﬁers (12 out of 18) — on the protocol classiﬁcation:
7, 14, 15, 21, 29, 31, 36, 37, 44, 45, 47, 53, 54, 60, 61, 63.
Also, these 16 parameter combinations contain the parameter
class payload size and the most parameter combinations
consist of at least three parameter classes — only exception
is the parameter combination 36 (payload size and idle). In
addition, the parameter combinations which are only present
19
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

 0
 4
 8
 12
 16
4
5
6
7
9
12
13
14
15
18
19
20
21
22
23
27
28
29
30
31
36
37
38
39
43
44
45
46
47
51
52
53
54
55
58
60
61
62
63
Figure 5: Number of parameter combinations for clas-
siﬁers (x-axis: parameter combinations, y-axis:
number of classiﬁers)
on one classiﬁer (9, 18, 19, 27, 43, 51, 58) do not contain
the parameter class payload size.
Finally, the results of these tests show that combinations
of many or all parameter classes do not imply higher
accuracy on the classiﬁcation of the investigated protocols.
But, for a good classiﬁcation accuracy according to the
classiﬁcation of as many protocols as possible with one
parameter combination, mostly combinations of three or
more parameter classes are required.
B. Protocol Based Parameter Reduction
In contrast to the evaluation of all classiﬁers according
to their classiﬁcation accuracy with the different parameter
combinations, the second approach to reduce the parameters
for the classiﬁcation is to evaluate the classiﬁcation accuracy
of the different parameter combinations depending on the
network protocols. As in the ﬁrst basic approach, we started
with ﬁltering all parameter combinations which have a
classiﬁcation accuracy greater than or equal to 90%. In
the next step we counted for each protocol, which of
these parameter combinations were present on at least nine
different classiﬁers. The results of this evaluation are shown
in the histograms of Fig. 6. For each of the ten protocols
from Table III one histogram is shown.
The histograms of Fig. 6 include all 63 parameter
combinations, but the protocol classes interarrival, duration,
bulk and idle are mostly present in combination with other
parameter classes and not on their own.
Table II shows some protocols (Bittorrent, Flash, POP3,
RTP, SIP) which have a good classiﬁcation accuracy with
the most classiﬁers. The histograms of these protocols in
Fig. 6 indicate this fact with a lot of possible parameter
combinations having a classiﬁcation accuracy of greater than
or equal to 90% on at least nine classiﬁers. Furthermore,
there are parameter combinations of the protocols Bittorrent,
Flash and RTP with a classiﬁcation accuracy of greater than
or equal to 90% on all 18 classiﬁers. For Bittorrent these
are 16 (bulk) and 48 (bulk and idle), for Flash these are 29
(packet count, payload size, duration, bulk) and 53 (packet
count, payload size, bulk, idle) and for RTP these are 1
(packet count), 32 (idle) and 33 (packet count, idle).
 0
 4
 8
1
3
5
7
9
11
13
15
17
19
21
23
25
27
29
31
33
35
37
39
41
43
45
47
49
51
53
55
57
59
61
63
Figure 7: Number of parameter combinations for proto-
cols (x-axis: parameter combinations, y-axis:
number of protocols)
Fig. 7 shows a histogram with the number of protocols
on which each of the parameter combinations has a
classiﬁcation accuracy of greater than or equal to 90% on at
least nine classiﬁers. There are 18 parameter combinations
which facilitate a wide spectrum — at least two-thirds of
all protocols (7 out of 10) — on the protocol classiﬁcation:
5, 7, 15, 22, 23 ,29, 30, 31, 37, 39, 47, 52, 54, 55, 60,
61, 62, 63. Also, these 18 parameter combinations contain
the parameter class payload size and the most parameter
combinations consist of at least three parameter classes —
only exception is the parameter combination 5 (packet count
and payload size). In addition, the parameter combinations
which are only present on one protocol (8, 16, 17, 24, 25, 32,
48, 49, 56, 57) do not contain the parameter class payload
size.
Additionally, the results of these tests show that combina-
tions of many or all parameter classes do not imply higher
accuracy on the classiﬁcation of the investigated protocols.
But, for a good classiﬁcation accuracy according to the clas-
siﬁcation of a protocol with as many classiﬁers as possible
with one parameter combination, mostly combinations of
three or more parameter classes are required.
VII. CONCLUSION AND FURTHER WORK
In this paper, we have determined how accurately 18
machine learning algorithms can be used to classify network
trafﬁc with 63 combinations of six statistical parameter
classes consisting of 40 parameters. In contrast to many
other studies, we used a per-packet approach instead of the
per-ﬂow approach.
As a result, we can say that the parameter class
payload size has a signiﬁcant inﬂuence on the classiﬁcation
accuracy. The four algorithms BayesNet, NaiveBayes,
NaiveBayesUpdateble and ND have a time factor for testing,
which is between 40 and 120 times greater than the
fastest algorithm OneR. Thus these algorithms appear to be
unsuitable for real-time trafﬁc classiﬁcation on high data rate
links. The other algorithms have a time factor with nearly the
same dimension. The algorithms DesicionTable and OneR
reach only a low accuracy with the used parameters. The
DataNearBalancedND, J48, J48graft, RandomCommittee,
RandomSubSpace, RandomTree algorithms classiﬁed the
most network protocols with an accuracy of 90% or more.
The algorithms PART, RandomCommittee, RandomForest,
20
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
Bittorrent
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
eDonkey
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
Flash
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
HTTP
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
IMAP
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
Oscar
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
POP3
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
RTP
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
SIP
 0
 4
 8
 12
 16
 20
1
3
5
7
9
11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63
SMTP
Figure 6: Distribution of parameter combinations for protocols
(x-axis: parameter combinations, y-axis: number of occurrences)
21
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

RandomSubSpace and RandomTree could classify eight
of ten protocols with one parameter combination with
an accuracy of 90% or more. Also the results show
also that many parameters do not automatically cause a
better classiﬁcation. Furthermore, parameter reduction can
improve the performance of per-packet classiﬁcation which
is necessary for the real-time trafﬁc analysis of “fast”
networks. A classiﬁcation accuracy of 90% and above is
a good result in comparison to other papers [3], [4], [5],
[6], [15] where the classiﬁcation accuracy often falls below
90%.
As a main result, we can say that the parameter
combination
needed
for
good
classiﬁcation
results
is
depending on the machine learning algorithm used and the
protocols to classify. There is no parameter combination,
which can be used on all classiﬁers to get a high
classiﬁcation accuracy on all protocols. This implies that
the results of the other studies [3], [4], [5], [6] can only be
used with the same algorithm used in the particular paper.
Further Work
Other studies (e. g., [11]) showed that classiﬁcation
accuracy is decreasing by tests on network trafﬁc of different
locations. So we have to evaluate our results with other
traces. To enhance the accuracy of trafﬁc classiﬁcation
we have to ﬁnd other parameters. All common statistical
parameters were determined in this paper. New parameters
should represent more characteristic properties of network
protocols and their payload.
Another way to enhance the accuracy could be to split
the protocols into those using TCP and those using UDP.
Furthermore the parameter classes we are using consist of
different parameters that represent information about upload,
download and the whole ﬂow. We will determine the beneﬁt
of this distinction, because possibly some of them can be
dismissed.
Another ﬁeld of research is the real-time classiﬁcation of
network trafﬁc with machine learning algorithms.
Furthermore, we want to investigate if it is possible with
machine learning algorithms to train the algorithms for
different protocol classes like e-mail, bulk data transfer,
P2P, interactive, gaming or multimedia to be able to classify
unknown protocols which belong to a protocol class.
Finally, it would be interesting to study the best suitable
algorithms in detail — instead of using them as a black box
model — in order to improve them for better classiﬁcation,
to ﬁnd out why they are more suitable than the others,
and to ﬁnd systematics which explains why there are some
algorithms which are more suitable than others.
REFERENCES
[1] “Network Based Application Recognition (NBAR),” Cisco R
⃝,
Oct.
2011,
http://www.cisco.com/en/US/products/ps6616/
products ios protocol group home.html.
[2] “Application Layer Packet Classiﬁer for Linux,” Oct. 2011,
http://l7-ﬁlter.sourceforge.net.
[3] L. Bernaille, R. Teixeira, I. Akodkenou, A. Soule, and
K. Salamatian, “Trafﬁc classiﬁcation on the ﬂy,” vol. 36.
New York, NY, USA: ACM, April 2006, pp. 23–26. [Online].
Available: http://doi.acm.org/10.1145/1129582.1129589
[4] H.
Jiang,
A.
W.
Moore,
Z.
Ge,
S.
Jin,
and
J. Wang, “Lightweight application classiﬁcation for network
management,”
in
Proceedings
of
the
2007
SIGCOMM
workshop on Internet network management, ser. INM ’07.
New York, NY, USA: ACM, 2007, pp. 299–304. [Online].
Available: http://doi.acm.org/10.1145/1321753.1321771
[5] A. W. Moore and D. Zuev, “Internet trafﬁc classiﬁcation using
bayesian analysis techniques,” in Proceedings of the 2005
ACM SIGMETRICS international conference on Measurement
and modeling of computer systems, ser. SIGMETRICS ’05.
New York, NY, USA: ACM, 2005, pp. 50–60. [Online].
Available: http://doi.acm.org/10.1145/1064212.1064220
[6] S. Zander, T. Nguyen, and G. Armitage, “Automated
trafﬁc classiﬁcation and application identiﬁcation using
machine learning,” in Local Computer Networks, 2005. 30th
Anniversary. The IEEE Conference on, Sydney, NSW, nov.
2005, pp. 250 –257.
[7] “TCPDUMP & LibPCAP,” http://www.tcpdump.org.
[8] M. Canini, W. Li, and A. W. Moore, “GTVS: boosting
the
collection
of
application
trafﬁc
ground
truth,”
University
of
Cambridge,
Computer
Laboratory,
Tech.
Rep. UCAM-CL-TR-748, Apr. 2009. [Online]. Available:
http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-748.pdf
[9] “OpenDPI.org,” http://www.opendpi.org.
[10] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann,
and I. H. Witten, “The WEKA Data Mining Software: An
Update,” SIGKDD Explorations, vol. 11, no. 1, 2009.
[11] A. W. Moore, M. L. Crogan, and D. Zuev, “Discriminators
for use in ﬂow-based classiﬁcation,” Queen Mary University
of London, Tech. Rep., 2005.
[12] T. T. Nguyen and G. Armitage, “A survey of techniques for
internet trafﬁc classiﬁcation using machine learning,” IEEE
In Communications Surveys & Tutorials, vol. 10, no. 4, pp.
56–76, 2008.
[13] “OpenPacket.org,” https://openpacket.org.
[14] “Wiki site for the Wireshark network protocol analyzer,”
http://wiki.wireshark.org/SampleCaptures.
[15] P. Piskac and J. Novotny, “Using of time characteristics in
data ﬂow for trafﬁc classiﬁcation,” in Proceedings of the
5th international conference on Autonomous infrastructure,
management, and security: managing the dynamics of
networks and services, ser. AIMS’11.
Berlin, Heidelberg:
Springer-Verlag, 2011, pp. 173–176. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2022216.2022243
22
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-201-1
ICIMP 2012 : The Seventh International Conference on Internet Monitoring and Protection

