Evaluation of the Severity of DoS Attacks on Computer Networks  
 
 Amar Aissani 
Department of Computer Sciences 
USTHB 
Algiers, Algeria 
aaissani@usthb.dz 
Maroua Yaiche Achour 
Department of Computer Sciences 
USTHB 
 Algiers, Algeria 
 yaichemaroua@gmail.com
 
 
Abstract—In this paper, we derive stochastic recursive 
equations describing the evolution of a computer network 
under Denial-Of-Service (DoS) attacks (flooding attacks). The 
queue has several input processes, (i) the regular one (control 
packet flow and background or non control applications), 
which describes the input under network normal status; and 
(ii) the attack packet flow. We concentrate on some particular 
security measures, namely, the load or the loss probability. The 
load is strongly connected with the stability, which is 
understood as the convergence of the underlying stochastic 
process to a unique stationary ergodic regime. Loss of packets 
can occur although the system is stable.  There are no specific 
requirements regarding statistical assumptions for establishing 
such equations. However, in order to derive stability condition 
and 
stationary 
performance 
measures 
we 
will 
need 
assumptions like stationarity and ergodicity (the independence 
is not required). Finally, we provide some numerical 
illustrations showing the effect of parameters on security 
measures and thus the severity of such attacks. 
Keywords- Security; Queueing; Reliability; DoS Attack. 
 
I. 
 INTRODUCTION  
    Most of information systems are exposed to Denial-
Of-Service (DoS) attacks, which is a one of the various 
forms of security threat of computer networks [1, 3, 9, 11]. 
The aim of DoS attacks is to exhaust a resource in the target 
system, that can be anything related to network computing 
and service performance (link bandwith, TCP connection 
buffers, application/service buffer, CPU times). Such 
attacks can also exploit a specific vulnerability in order to 
reduce or completely subvert the availability of the service 
provided. A common strategy used by an intruder to cause a 
DoS attack on a given target is to flood it with a continuous 
stream of packets that exhausts its connectivity.  DoS 
attacks that use this kind of strategy are called brute-force 
attacks. Distributed Denial-of-service (DDoS) attacks are 
simply DoS attacks performed by multiple agents 
simultaneously.  Many efforts have been made, in parallel 
with the evolution of DoS attacks, in the field of prevention 
and 
detection 
in 
networking 
security. 
Several 
countermeasures  have been proposed, and can be roughly 
categorized as host-based systems and network based 
systems. Host-based systems are deployed on end-hosts and 
typically use firewall, intrusion detection systems (IDS) 
and/or balance the load among servers. This technique can 
help to protect the server, but not the legitimate access to the 
server because high-volume traffic may congest the 
incoming link to the server. Network-based systems are 
deployed inside networks (on routers) and fall into two 
categories: (1) Detection/identification mechanisms using 
signal processing and or statistical techniques; (2) Defense 
techniques using traffic control mechanisms such as  egress  
or ingress filtering, route-based packet filtering   disabling 
unusued services, and honeypots (see [1, 3, 9, 11]). 
  
The Internet traffic is a complex stochastic process and 
there are several studies trying to describe a mathematical 
framework to model the behavior of these kinds of attacks. 
The interest of such models is to investigate how the attacks 
and other security anomalies affect the performance of the 
Network. It is difficult for legitimate users to launch real 
DoS attacks against the prototype of network to measure 
performance, since the attacks are themselves classified as 
cybercrime against the law. 
 
We consider the model of NBCS (Network-Based 
Control System) described in [9] in which packets moving 
from one site to another have to access shared resources 
(communication links and network equipment). For each 
router in the path between a plant and a controller, the 
mechanism governing packet transmission can be abstracted 
by a queue with FIFO (First-in-First-Out) discipline of 
service. Packets arrive randomly at a router  and can be 
modeled by some stochastic processes. If a packet finds the 
router CPU idle, it will be immediately served for a random 
amount of time. If the router CPU is busy, the packet will be 
in the queue to wait. When a queue with a finite size is full, 
the newly arrived packet enters “orbit” (a sort of queue) and 
repeat his attempt until he finds a place in the queue. Note 
that in the original version of [9] it is assumed that such a 
packet is dropped. 
    
The routers in the path handle not only the NBCS packets 
flow, but also other traffic (non-control applications and 
flows of other NBCS systems). So, the model assumes 
several input processes: the first one is the regular (or 
8
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

legitimate) NBCS packet flow, the second one is the regular 
background traffic and the other is the DoS attack flow.     
     
    So, we consider that the server (i.e., the router CPU) has 
several inputs. The regular input describes the packet flow 
under normal network status. We separate the basic flow of 
control applications, which is assumed to be a Poisson 
process with rate 
1
λ  packets/sec. and the background flow 
(non control application/other packet flows), a Poisson 
process with rate ψ packets/sec. The attack traffic is 
modeled by a Poisson process with rate φ packets/sec. The 
Poisson assumption is conforming to some experimental 
studies in traffic studies [10] and also to some statistics 
about Denial of Service activities [11].  
 
    We denote 
by 
{ },
1
α = σ n
{ },
2
β = σ n
{ }
δ = σ 3n
 the 
sequences of service times for the control flow, the 
background flow and the attack flow respectively. We 
assume that these sequences form stationary ergodic 
sequences (or which is equivalent metrically transitive) 
without the usual independence assumption. The stationarity 
is understood here in the strict sense. The inter-retrial times 
are independent identically distributed random variables 
with common exponential distribution function with 
parameter
ν > .0
 
 
   In order to take into account the implemented defense 
mechanisms (firewall for example), we introduce a filtering 
parameter p ,
.1
0
< p <
 So,  when a regular packet finds the 
service blocked, it is dropped with probability 
.p  With 
probability 
1− p
it joins the service area (if it is not full) or a 
retrial group (also called an orbit). From the orbit it repeats 
his attempts at rate 
ν > 0
 until it gets service. 
    
   When a packet of the attack traffic finds the service 
blocked, it is dropped with probability q . It joins service 
area or orbit with probability
.
1
− q
 In orbit, the attack packet 
evolves as a regular one: it adjusts its strategy and merges 
into regular packets. So, q can be seen as the filtering 
probability of an attack packet. For coherence, one can 
assume that
.0
1
>
>
>
p
q
 
 
    The paper is organized as follows. In Section II, we model 
the behavior of the network with a stochastic recursive 
sequence (SRS) (a generalization of the embedded Markov 
chain).  
     This representation gives an algorithm (Section III) for 
the simulation of sample paths of the underlying SRS and 
the statistical estimation of several security measures. We 
derive also the stability condition, which insures the 
existence of a unique stationary regime. There are no 
specific requirements regarding statistical assumptions for 
establishing such equations. However, in order to derive 
stability condition and stationary performance measures we 
will need assumptions like stationarity and ergodicity (the 
independence is not required).  
   In Section IV, we adjust the model by considering some 
other types of attacks which conduct to the interruptions of 
service.  
    Finally, we provide (Section V) some numerical 
illustrations showing the effect of parameters on   security 
measures and thus the severity of such attacks. 
II. 
A STOCHASTIC EQUATION FOR SIMULATING NETWORK 
SAMPLE PATHS 
 
     In a first part, we assume that the buffer 
K = .0
Let 
{
0}
( ),
N t t ≥
 be the number of packets in the orbiting queue 
at time t . It represents a stochastic process on the discrete 
space of natural integers. Let 
C(t)
 be another  3-valued 
random process describing the server status: 
0
( )
C t =
 if the 
server is free at time ;t  
i
C t
( ) =
 if the server is busy by 
service of a certain packet of type i  at time ,t  
.3,2,1
i =
 
 
   We consider the process {
Nn }
 embedded immediately 
after service times 
γn
 (i.e., 
0).
(
+
=
n
n
N
N
γ
 Denote by 
1
),
,
(
≥
=
n
N
C
X
n
n
n
 the sequence of successive states of 
the system at these epochs where
0).
(
+
=
n
n
C
C
γ
 Observe 
that if the sequence 
α β δ
,
,
  are independent and identically 
distributed, then the sequence {
1}
,
X n n ≥
 forms a Markov 
chain (in the usual sense) defined on the state space 
{ }
IN
S
⊗
=
2,1
and the ergodicity condition can be derived 
using the Foster-Moustafa-Tweedie criterion [5].  
 
   We next show that the process {
Nn }
 is a stochastic 
Recursive Sequence  in the sense of Borovkov [4, 5]. Recall 
that a process {
Nn }
 is called a SRS with driver { }
{
ξn , f },
 if 
for 
some 
function 
f
 it 
satisfies 
the 
equation 
0
),
,
(
1
∀ ≥
+ =
n
f N
N
n
n
n
ξ
 where the driving sequence
n
ξ  
is a stationary ergodic stochastic process.  
 
      It is well known that for the classical FIFO queue, idle 
(respectively, busy) server period coincides with the system 
idle (respectively, busy) period. It is not the case for retrial 
queues where in the system busy period the systems evolves 
as an alternating sequence of  idle periods and busy periods 
of the server.  
 
     The situation is slightly different in the case of finite 
buffer. Let 
τ n
be the n th idle server period, i.e., the time 
9
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

between the end of the 
n −1
th service till the beginning of 
the n th service. The distribution of 
n
τ  is determined by the 
competition between inter arrival times and inter retrial 
times, which event occurs first. This idle period ends when 
either there is an external arrival (regular or attacker)  or 
when a call from orbit tries to retry. Under our assumptions, 
n
τ  is exponentially distributed with parameter
λ +ν
 where 
(
)(
)
)
1(
1
1
q
p
−
+
−
+
=
φ
ψ
λ
λ
 (constant retrial policy) and 
λ +νNn
 (linear retrial policy). The conditional probability, 
given 
)
(
ℑ γ n
(the sigma algebra generated by events 
describing state of the system up to time 
n
γ ), that the first 
event to occur after the 
n −1
th service  ends (and after the 
served packet has left the system) is an external arrival 
(regular or attacker), equals 
ν
λ
λ
+
(respectively, 
νNn
λ
λ
+
). 
The conditional probability, given 
)
(
ℑ γ n
 that the first event 
to occur after the 
n −1
th service ends (and after the served 
packet has left the system) is a retrial, equals 
νNn
λ
ν
+
(respectively, 
n
n
N
N
ν
λ
ν
+
).  
    
    Consider the following two Pseudo Random Generators, 
{
1,0 ,...}
1 ,
1
=
=
n
u
u
n
n
 and 
{
1,0 ,...}.
2 ,
2
=
=
n
u
u
n
n
 They are 
described in fact by two sequences of random variables 
distributed uniformly on [
]1,0
 mutually independent, and 
independent of the sequences  
, .
,
α β δ
 Let 
( )
χ A
 be the 
characteristic function of the event A :
( )
χ A = ,1
 if A has 
occurred, ( )
χ A = 0
otherwise. We will need also a mean to 
generate the input Poisson random processes.  
 
   For the formal description below we introduce an 
application 
[
]
IN
IR
→
×
Π
+
1,0
:
defined by  
(
)
.
!
:
inf
,
0






≥
∈
=
Π
∑
=
−
n
k
t
k
x
k
t e
IN
n
t x
 
    Thus,  (
1)
, n
Π t u
 implements a Random Poisson Generator 
for the sequences the instant of primary arrival packets 
(regular or attacker)  or secondary (retrials) [2, 12]. The 
second sequence 
{
1,0 ,...}
2 ,
2
=
=
n
u
u
n
n
will be used to 
generate which event has occurred. Formally, we can 
consider the following events 
n
n
n
n
R
S
H
G
,
,
,
 such that  
 
) ,
1(
0
1
2






+
−
≤
≤
=
n
n
n
N
p
u
G
ν
λ
λ
 
) ,
)(1
(
)
1(
1
2
1






+
−
+
≤
≤
+
−
=
n
n
n
n
N
p
u
N
p
H
ν
λ
ψ
λ
ν
λ
λ
 
(
) ,
1
)
)(1
(
)
)(1
(
1
2
1






+
−
+
−
+
≤
≤
+
−
+
=
n
n
n
n
N
q
p
u
N
p
S
ν
λ
φ
ψ
λ
ν
λ
ψ
λ
 
(
)
1 .
1
)
)(1
(
2
1






≤
≤
+
−
+
−
+
=
n
n
n
u
N
q
p
R
ν
λ
φ
ψ
λ
 
 
   According to the relations above, we have the following 
stochastic equation 
 
       
(
)+
+
+
=
+
=
n
n
n
n
n
N
N
N
ξ
ξ )
max( ,0
1
                      (2.1) 
 
where 
)
,
,
,
,
,
(
2
1
3
2
1
n
n
n
n
n
n
n
u u
h N
σ
σ
σ
ξ =
 is given by 
 
(
) (
)
(
) (
)+
Π
+
Π
=
1
2
1
1
,
,
n
n
n
n
n
n
n
u
H
u
G
λσ
χ
λσ
χ
ξ
(
χ Sn )
         
                        
   (
)
(
)
(
)
)1
,
(
,
1
1
3
−
Π
+
Π
n
n
n
n
u
R
u
λσ
χ
λσ
                 (2.2) 
 
for linear retrials. In the case of constant retrial rate, the 
equations (1)-(2) remains valid except that the term 
νNn
 is 
replaced 
by ν
in 
the 
definition 
of 
the 
events 
.
,
,
,
n
n
n
n
R
S
H
G
 
 
   Formula (2.1) is just an arithmetical count of the number 
of customers in the system at a given time. The number of 
customers 
Nn+1
 in orbit after the n+1 service equal the 
number of customers 
n
N  at the previous nth service time 
plus the variable 
ξn .
This variable counts the difference 
between the number of arrivals and departures during the 
period 
]
,
[
n γn+1
γ
 
(interval between the two successive 
departures nth and n+1th. The operator max stay here, since 
the variable n
ξ
 
cannot be negative.  
   The first term in formula (2.2) counts the number of 
packets of the basic flow (control applications), which have 
been accepted by the filter (with probability 1-p), i.e., when 
the event 
n
G occurs; the second term counts the number of 
packets of the background flow,  which have been accepted 
by the filter(also with probability 1-p) (when 
n
H occurs); 
the third  term counts the number of packets of the attack 
flow,  which have been accepted by the filter (with 
probability 1-q), i.e., when the event 
n
S occurs); finally, the 
forth  term counts the number of packets which has been 
served and exit the systems (when the event 
n
R occurs). 
 
 
 
 
10
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

In both cases, the process     
  
                      
(
n)
k
u
u
k
k
n
n
n
n
≤
=
,
,
,
,
,
2
1
3
2
1
σ
σ
σ
ξ
 
 
is the driving sequence for the SRS taking values in 
[
]
[
]1,0
1,0
⊗
⊗
⊗
⊗
Θ =
+
+
+
IR
IR
IR
 and 
is 
assumed 
stationary ergodic. 
 
    In (2.1)-(2.2) it is assumed that the buffer K=0, while  the 
original model [9] assume a finite buffer of capacity 
K ≥ 1
. 
In this case,  a retrial occurs if a packet finds the buffer full. 
So, the stochastic equation (1) needs to be refined.  
 
      Let 
Mn
be the number of packets in the buffer at 
time n
γ
, and then the basic process is now described by the 
two-dimensional process
).
,
(
n
n
n
N
Y = M
 In this case, the 
SRS  has the following form 
 
 
If 
,
,
n
n
n
M
K
K
M
−
≤
<
ξ
 then  
 
                (
)
(
n )
n
n
n
n
N
M
N
M
,
,
1
1
+ ξ
=
+
+
                     (3.1) 
 
If
,
,
n
n
n
M
K
K
M
−
>
=
ξ
 then  
                 
               (
)
(
)).
(
,
,
1
1
n
n
n
n
n
M
K
K N
N
M
−
−
+
=
+
+
ξ
       (3.2) 
 
   The process  
n
Y  describe the behavior of the network 
when 
K ≥ ,1
 but finite. The above SRS shows how to 
compute 
Yn .
We distinguish two cases. Formula (3.1)  
corresponds to the case when the buffer is not full and 
formula (3.2) to the case when the buffer is full, i.e., 
M n = K.
 
III. 
SIMULATION ALGORITHM AND IT’S PERORMANCE 
 
    The representation under the form of SRS is particularly 
adapted to a discrete-event simulation of the network under 
DoS attacks.  
 
Set  
N0 = 0
(initialization) 
Repeat  
u1 ←
Random; {generation of 
1
u and arrival event} 
u2 ←
Random; {generation of 
2
u and the type of the arrival 
packet} 
u3 ←
Random; {generation of 
u3
and the service time 
random variable according to the given probability 
distribution} 
Poisson variables are generated using any algorithm for  
Poisson process. 
For all ,n  
Computation of 
3,2,1
),
,
,
(
2
1
=
=
i
u
f u
i
n
σ
ξ
 by formula 
(2.2)  or (2.3). 
Computation of 
) .
(
)
max( ,0
1
+
+
+
=
+
=
n
n
n
n
n
N
N
N
ξ
ξ
 
Computation of the state at time 
n +1
 given 
n
N  and 
ξn .
 
End for 
Until 
n < T
 (
T =
end of simulation). 
 
       Based on the SRS formulation,, the above algorithm 
gives directly a sample of the steady state distribution 
provided the network is stable (see Fig. 1 in Section V).    
Next, we can compute statistical estimate of any security 
metric directly from sample paths (Delay, Loss probability, 
Load… 
 
     In fact, the algorithm simulate the physical operation of 
the system, arriving customers (regulars or attackers), retrial 
requests, filtering actions and service of customers. It handle 
these different actions by the next-event incrementing 
procedure, which differs from the fixed-time incrementing 
in that the master clock is incremented by a variable amount 
rather than by a fixed amount of time.   
     
     Conceptually, the next-event incrementing procedure is 
to keep the simulated system running without interruption 
until an event occurs, at which point the algorithm pauses 
momentarily  to record the change in the system. To 
implement this idea, the algorithm actually proceeds by 
keeping track of when the next few simulated events are 
scheduled to occur, jumping in simulated time to the first of 
these events, and updating the system. The cycle ends at 
time T and it is repeated as many time as desired, say N  
times.  
 
    We can see that the running time is  
N × T
 unit of times. 
 
    It is important to estimate the quality of the estimation of 
mean performance measures. The precision is 
N
1
by the 
law of  large numbers [2, 12]. 
 
      We can prove [3] that the network is stable 
if
ρ < ,1
,where   
×
+
=
ν
ν
λ
ρ
[
])
) (
1(
)
) (
1(
)
) (
1(
3
2
2
2
1
2
1
σ
φ
σ
ψ
σ
λ
q E
p E
p E
−
+
−
+
−
×
 
 
in the case of constant retrials and 
 
11
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

= λ ×
ρ
[
])
) (
1(
)
) (
1(
)
) (
1(
3
2
2
2
1
2
1
σ
φ
σ
ψ
σ
λ
q E
p E
p E
−
+
−
+
−
 
 
in the case of linear retrials. 
 
    Here, the stability is understood as the strong coupling 
convergence [3-6, 8] ) to a unique stationary  regime. This 
condition is also a condition of convergence of the 
algorithm of Section III.  The formula for ρ depends on the 
retrial policy (constant or linear). This quantity represents 
the traffic intensity and also the load, which will serve here 
as a security measures for detecting the status of the 
network: normal or under attack. The network is under 
attack if the value of  ρ  crosses a given threshold. 
 
     Another security metric, which is not considered here is 
the Loss probability, when
K ≥1
. In this case, we can detect 
a DoS attack if the loss probability (depending on K ) is 
large. So, the security status is defined by a threshold 
0
)
(
>
=
ε K
ε
 small enough. The network is under DoS 
attack if the loss probability is 
≥ 1− ε
. An application of 
such security measure can be found in the work [1] with a 
different model.  
 
IV. 
 ATTACKS ON THE AVAILABILITY 
 
      We have up now considered DoS attacks, more precisely 
flooding attacks which aim to saturate the system by 
sending many requests of service. But, there is another type 
of attacks which exploit a specific vulnerability in order to 
reduce or completely subvert the availability of the service 
provided (interruption of service). In this section we take 
into account such attacks in the previous model by 
introducing a new parameter ,
θ  the rate of such attacks.  So, 
we assume that the service becomes unavailable for a 
random restoration period of time. Such attacks occur 
according to a Poisson process with rate .
θ  We denote by 
( ) {
2,1 ,...}
,)
(
=
=
i
r
r
n
i
n
 the 
sequence 
of 
“renewal” 
(restoration to the as-good-as new state) times, which is 
assumed again stationary ergodic and independent of the 
other sequences of parametric random variables. In this 
case, we have again the representation of the basic process 
under the form of SRS (2.1). We need only to take into 
account delay due to renewal times and the incrementation 
of DoS attacks during such periods :  
                            
(
)
∑
Π
=




Π
n
u
i
n
i
n
i
u
r
,
1
( )
( )
,
θσ
ω
,                  (4.1) 
 
where 
)
1(
)
1 1(
p
p
−
+
−
=
φ
λ
ω
 or 
)
1(
− q
ψ
 according to 
the case which occurs.   
 
    Formula (4.1) indicates that the full service of a given 
customer (if it is not lost) is the pure service plus the 
cumulated duration of all interruptions occurring during this 
service.  
 
   The model can also take into account other types of 
interruptions, for example due to software or hardware 
failures. 
V. 
  NUMERICAL ILLUSTRATIONS 
 
    In this section, we show the effect of DoS attack on 
some security measures. First, Fig. 1 shows some sample 
paths of the stochastic process {
Nn }
and the simulation 
algorithm of Section III. 
50
100
150
200
250
300
time
-30
-20
-10
10
N
 
 
Figure. 1. Sample paths of the process {
Nn }.
 
 
   From these sample paths, we can compute the sample 
average of any security measure (for example, loss 
probability, etc. ), which is an estimation of the true security 
measure. This estimation is unbiased, consistent and 
efficient (in the statistical sense) [2 , 12]. 
  
     Fig. 2 compares the evolution of the load ρ  as a 
function of the attack parameter
φ.
 We neglect the 
background flow (
ψ = 0
) and fix some parameters. We 
assume the mean service times are identical for all types of 
requests and set
λ1 =10 / sec.
 We observe that the load 
increases with the severity of the attack (when the attack 
rate increases) for a fixed value of the retrial rate. The load 
decreases with increasing of the retrial rate. 
12
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

 
15
5
10
0
10
20
30
40
0
10
20
30
40


 
    Figure 2.  Effect of  DoS  attack rate φ on the load ρ  
              for different values of the retrial rate .
ν                     
 
     
  Fig. 3 is another view of this observation.     It shows the 
effect  of the retrial rate ν  on the load for different values  
of the attack parameterφ .  We consider three cases 
φ = 0
 
(under normal network status), 
φ = 20
 or 
φ = 40
 ( under 
DoS attack).  
  
 
0
20
40
0
10
20
30
40
50
0
10
20
30
40
50
Retrial rate
Load 
 
Figure 3.  Effect of retrial rate ν on the Load ρ  
for Different Values of .
φ  
   We observe that the load decreases with increasing of 
the retrial rate .
ν The load increases with the severity of 
attack.  
VI. 
CONCLUSION 
In this paper, we have provided an extension of the model 
of [1], which takes into account the possibility of retrials of 
packets and also the existence of defense mechanisms 
(firewalls). The evolution of the system is described by a 
stochastic recursive sequence, which provides a practical 
mean to simulate sample paths of the underlying process 
and estimate several security measures. Such a security 
measure serves as an indicator of intrusion. The stability 
condition is obtained under quite general assumptions about 
service process (stationarity in the strict sense and 
ergoditicity). The model can be refined by taking into 
account some other phenomena and also the comparison 
with real data. Although it is a practice to assume Poisson 
arrivals in a  first study, it will be interesting to consider the   
case of non Poisson arrivals as reported in some 
experimental  studies.  
ACKNOWLEDGMENT 
   We are very grateful to the reviewers and the editor for 
their helpful comments and suggestions. This research was 
supported by the Ministry of High Education and Scientific 
Research. 
REFERENCES 
[1] A. Aissani,  “Queueing Analysis for Network Under DoS Attacks,”  
In Lecture Notes in Theoretical Computer Science, O. Gervasi and 
al.,  Ed. Springer Heidelberg, Berlin, vol. 5073, Part II, pp. 500-513, 
2008.  
[2] A. Aissani, Modeling and Simulation. 
2nd Edition, Office of 
University Publications (OPU),  Algiers,  2010, (in French).  
[3] A. Aissani, “Stochastic Analysis of a Network under DoS Attacks,” 
unpublished. 
[4] E. Altman, “On the Stability of Retrial Queues,” Queueing Sys. vol. 
26, no 3-4,  pp. 343-363, 1997.  
[5] A. Borovkov,  Ergodicity and Stability of Stochastic Processes, 
Wiley,  New York,  1998.  
[6] A. Borovkov  and S.G. Foss,  “Stochastic Recursive Sequences and 
their Generalizations,” Siberian Advances in Mathematics. vol. 2,  pp. 
16-81, 1992. 
[7] G. Falin and J.G.C. Templeton,  Retrial Queues, Chapman and Hill, 
New Jersey, 1997. 
[8] T. Kernane and A. Aissani,  “Stability of Retrial Queues with 
Versatile Policy,” Appl. Math. & Stoch. Analysis. Article ID 54359,  
pp. 1-16,  2006.  
[9] M. Long, J. Chawan-Hwa and J. Hung, “Denial of Service Attacks on 
Network-Based Control Systems: Impact and Mitigation,” IEEE. 
Transactions on Industrial Informatics, vol. 1, no 2,  pp.  85-96,  
2005.  
[10] R. Martin , Basic Traffic Analysis,  Prentice-Hall, New Jersey, 1993. 
[11] D. Volker,  G., Savage, “Inferring Internet Denial-of-Service 
Activity,” Proc. UNESIX Security Symposium,  pp. 9-22, IEEE 
Press, New York,  2001.  
[12] P. Tavel,  Modeling and Simulation Design. AK Peters Ltd., Natick, 
MA , 2007.  
 
13
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-198-4
PESARO 2012 : The Second International Conference on Performance, Safety and Robustness in Complex Systems and Applications

