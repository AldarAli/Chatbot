Toward the Design and Implementation of the Hosted Private Cloud
Chia Hung Kao
Department of Applied Mathematics
National Taitung University
Taitung, Taiwan
Email: chkao@nttu.edu.tw
Hsin Tse Lu
Data Analytics Technology and Applications Research Institute
Institute for Information Industry
Taipei, Taiwan
Email: oliu@iii.org.tw
Abstract—In recent years, cloud computing products and services
are widely used by enterprises, companies and individuals in their
daily tasks. Among different cloud computing models, private
cloud is more appropriate for small and medium business (SMB)
from the perspectives of security, control and reliability. However,
the complexity of deployment, conﬁguration and management
of cloud computing infrastructure causes additional efforts and
costs, especially because SMBs usually do not have enough IT
resources. Therefore, the hosted private cloud model is developed
to achieve higher usability by masking the complexities from
users, and keep the advantages of private cloud at the same time.
In this paper, based on previous virtualization solution, the design
and the implementation of hosted private cloud are introduced.
Keywords–Cloud Computing; Private Cloud; Hosted Private
Cloud.
I.
INTRODUCTION
Cloud computing has attracted considerable attention in
recent years. As the related technologies grow and mature,
cloud computing products and services are widely used by
enterprises, companies and individuals in their daily tasks [1].
Public cloud services, such as Amazon AWS [2], Microsoft
Azure [3], Google Cloud Platform [4] and so on, provide com-
prehensive computing, storage and network resources through
Internet. On the other hand, hybrid cloud is the composition of
multiple clouds, that achieves heterogeneous resource consoli-
dation and keeps the beneﬁts brought by individual clouds [5].
Finally, companies or organizations can build and manage their
own private cloud to deliver necessary infrastructure, platform
and application services internally. For SMBs, private cloud
model is more appropriate from the perspectives of security,
control and reliability [6]. However, the complexity of de-
ployment, conﬁguration and management of cloud computing
infrastructure causes additional efforts and costs, especially
because SMBs usually do not have enough IT resources (e.g.,
hardware, software and engineers). Therefore, the model of
hosted private cloud is developed to achieve higher usability by
masking the construction and management complexities from
users and keep the advantages of private cloud at the same
time.
Fig. 1 depicts the context diagram of the hosted private
cloud. There are several actors, including Cloud Infrastructure
Administrator, Hosted Private Cloud Administrator, Private
Cloud Owner/User and Service Consumer, which are stated
as the following.
•
Cloud Infrastructure Administrator: Cloud Infras-
tructure Administrator is responsible for the con-
struction, conﬁguration, management and maintenance
Figure 1. Context diagram of the hosted private cloud.
of physical hardware and environment. Computation
resources, storage resources, networking, energy, se-
curity and so on are included. Different scale of
cloud infrastructure is constructed and conﬁgured for
further usage. Based on particular requirements and
conditions, the administrator helps to add, conﬁgure,
remove, monitor and maintain the components inside
cloud infrastructure.
•
Hosted Private Cloud Administrator: Hosted Private
Cloud Administrator is responsible for the manage-
ment of hosted private cloud built by underlying cloud
infrastructure. Through the functionalities provided
by hosted private cloud, the administrator can man-
age, monitor and allocate corresponding resources for
multiple private cloud environments. Based on the
monitoring information and the requirements from
Private Cloud Owner/User, resources for private cloud
environment can be managed and adjusted by Hosted
Private Cloud Administrator. In addition, the adminis-
trator might conﬁgure security policies (e.g., network
connectivity and isolation), backup and restore mecha-
nism, failover plan and so on for better service quality
of the hosted private cloud.
•
Private Cloud Owner/User: When the hosted private
cloud is built, Private Cloud Owner/User can register
and request private cloud environment. Hosted Private
Cloud Administrator evaluates the request from Pri-
vate Cloud Owner/User and constructs corresponding
233
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

private cloud environment if the underlying resources
are sufﬁcient. Once the environment is built, Pri-
vate Cloud Owner/User can manage and monitor the
private cloud environment, and create corresponding
environment (e.g., virtual machines, storage and net-
working) for services and applications. Another usage
scenario for Private Cloud Owner/User is to provide
service and application (e.g., disk images) directly
for Hosted Private Cloud Administrator without cre-
ating private cloud environment from scratch. This
facilitates the service and application deployment and
eases the burden of construction of private cloud
environment from Private Cloud Owner/User.
•
Service Consumers: Service consumers are the end
users who use the services built on private cloud
environment.
In this paper, the design and the implementation of hosted
private cloud are introduced. The hosted private cloud is modi-
ﬁed and extended from previous virtualization solution, Cloud
Appliance Kernel Environment (CAKE) [7][8]. It provides
different tenants (Private Cloud Owner/User) with isolated re-
sources to support their tasks and efﬁcient management mech-
anisms for Hosted Private Cloud Administrator and Private
Cloud Owner/User. Current deployment of the hosted private
cloud is also described in this paper for further functional and
performance evaluation [9].
The remainder of this paper is organized as follows. Section
II reviews related studies. Section III introduces the virtualiza-
tion solution, CAKE. Section IV describes the architecture of
the hosted private cloud and Section V presents the deployment
for functional and quality evaluation. Finally, Section VI
presents conclusion and future works.
II.
RELATED WORK
Moghaddam et al. [10] surveyed different architecture,
models, deployment types, key technologies and characteristics
of cloud computing. According to their survey, the “virtual pri-
vate cloud” offered by public cloud service providers achieved
both ﬂexibility of public clouds and reliability of private
clouds. Resources can be shared by different subscribers and
the private cloud can be accessed through secure commu-
nication channel. Cardellini and Iannucci [11] presented an
architecture for a reliable, scalable, ﬂexible and modular pri-
vate cloud. Authors also implemented a case study to evaluate
the proposed private cloud architecture by Linux Terminal
Server Project (LTSP). Mangal et al. [12] integrated private
cloud and public cloud for more efﬁcient resource utilization.
Based on speciﬁc load conditions, the virtualization instances
will be migrated to public cloud or back to the private cloud
accordingly. Shtern et al. [13] designed a reference architecture
(AERIE), which can create virtual private cloud on top of
public clouds. The issues of security and data protection were
considered and mitigated through the proposed design. In
addition to academic studies, several commercial products or
services of “managed private cloud” and “virtual private cloud”
are available [14][15][16].
To sum up, the model of hosted private cloud achieves
both ﬂexibility and reliability and has attracted attentions of
software companies, service providers and consumers. Unlike
the consideration of complex or hybrid architecture and the
Figure 2. Overview of the CAKE architecture.
provision of large scale cloud environment, the design of the
hosted private cloud in this paper tries to build private envi-
ronments for consumers like SMBs efﬁciently. Furthermore,
the simplicity and manageability are also considered in the
design for cloud infrastructure providers and hosted private
cloud providers.
III.
CLOUD APPLIANCE KERNEL ENVIRONMENT
CAKE, developed by Institute for Information Industry, is
a server virtualization management solution based on Kernel-
based Virtual Machine (KVM) [17]. It supports lifecycle
management of virtual machines, and provides user friendly
management console for administrators and users. CAKE is
designed as an appliance based on commodity hardware. Thus,
users can purchase or use existing hardware without any mod-
iﬁcation and install CAKE to build and manage private cloud
efﬁciently. Based on different usage requirements, CAKE can
be deployed as a single node service or multi-node cluster for
virtualization capacity or high availability. As shown in Fig. 2,
there are three major components in CAKE, including Center
Node, Computing Node and Storage Node.
•
Center Node: The major functionality of Center Node
is to manage the virtualization environment built by
all the Computing Nodes in the CAKE cluster. In
addition, Center Node provides user management,
network conﬁguration, storage management, API ser-
vice, backup and restore, and monitoring mechanisms.
Users and administrators can login to Center Node
to use and manage the virtualization environment
through web interface.
•
Computing Node: The Computing Node is the phys-
ical environment for virtual machines. It receives
requests (as the form of remote procedure call) from
Center Node and performs corresponding management
tasks on virtual machines based on KVM through
libvirt [18], including creation, deletion, boot, shut-
down, conﬁguration, migration and so on. Computing
Nodes can be added to or removed from CAKE cluster
dynamically based on resource requirements.
•
Storage Node: The Storage Node is responsible for
the preservation of images, templates, snapshots, and
virtual disks of virtual machines. Currently, Network
234
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

Figure 3. Architecture of the hosted private cloud.
File System (NFS) [19] is used in CAKE for simplicity
and reliability. Center node and the computing nodes
in CAKE cluster mount the NFS for all the operations
in the virtualization environment.
IV.
ARCHITECTURE OF HOSTED PRIVATE CLOUD
The operation model of CAKE is suitable for one speciﬁc
organization, company or SMB. In other words, the multi-
tenancy is not taken into consideration in the original design.
Therefore, the design and implementation should be extended
and modiﬁed to fulﬁll the requirements of hosted private cloud.
Meanwhile, the original design and the operation model of
CAKE can be leveraged to simplify the architecture design
of hosted private cloud, and decrease the implementation
effort. Fig. 3 shows the architecture of the hosted private
cloud based on CAKE. The major modiﬁcation is to add
a higher layer for the management and monitoring of the
overall hosted private cloud, which is achieved by one speciﬁc
set of CAKE cluster. The speciﬁc CAKE cluster manages
multiple virtualized CAKE centers, which are connected by
particular CAKE clusters to construct multiple private cloud
environments. Components of the hosted private cloud include
Hosted Private Cloud (HPC) Center Node, Hosted Private
Cloud (HPC) Computing Node, Tenant Center Node, Tenant
Computing Node and Storage Node.
•
HPC Center Node: The major functionality of HPC
Center Node is to manage the overall hosted private
cloud environment. As shown in Fig. 3, through HPC
management module, HPC Center Node requests HPC
Computing Node to perform the construction, con-
ﬁguration and management tasks on Tenant Center
Nodes. It also provides web interface (HPC Portal)
for HPC administrator to manage HPC cluster and
tenants in the hosted private cloud environment. HPC
administrators can add, delete, conﬁgure and moni-
tor tenants and underlying resources accordingly. In
addition, tenant owners and users can login with
corresponding tenant identiﬁcation to manage their
private cloud environments. Monitoring data gathered
by Tenant Center Nodes will be sent back to HPC
Center Node for summarized information of the whole
hosted private cloud environment. Finally, multiple
HPC Center Nodes can be built and federated for the
concern of high availability [20].
•
HPC Computing Node: HPC Computing Node is the
physical environment only for Tenant Center Node
(virtualized CAKE Center). One HPC Computing
Node can support the running of several Tenant Center
Nodes. Based on the amount of managed tenants, HPC
Computing Node can be added or removed by HPC
administrator accordingly. In order to achieve high
availability, HPC Center Node will detect the status of
HPC Computing Node periodically. If HPC Comput-
ing Node is down for unknown reasons, HPC Center
Node will trigger the migration task to move Tenant
Center Node from failure HPC Computing Node to
another. On the other hand, HPC administrator can
perform migration manually due to maintenance re-
quirements.
•
Tenant Center Node: Tenant Center Node is virtual-
ized CAKE Center and deployed on HPC Computing
235
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

Figure 4. Deployment of the hosted private cloud.
Node. Similar to the operation model of CAKE, it
helps to manage dedicated private cloud environment
built by Tenant Computing Nodes. If new tenant
should be built, HPC administrator can create Tenant
Center Node from image template efﬁciently and
associate allocated Tenant Computing Nodes.
•
Tenant Computing Node: Tenant Computing Node
is the physical environment for virtual machines oper-
ated by speciﬁc tenants. Similarly, it receives requests
from particular Tenant Center Node and performs cor-
responding control and management tasks on virtual
machines. Tenant Computing Node can be added to or
removed from speciﬁc tenant based on requirements.
If multiple Tenant Computing Nodes are deployed,
the availability of virtual machines can be improved
through the periodical check and migration request
from Tenant Center Node.
•
Storage Node: Multi-tenancy (e.g., access manage-
ment and data isolation) should be taken into con-
sideration in the hosted private cloud. Corresponding
storage spaces should be conﬁgured and managed for
different tenants. In addition, performance, scalability
and availability are also important issues due to large
amounts of usages simultaneously and continuously.
Software-deﬁned storage (e.g., Nexenta [21] and Glus-
terFS [22]) can be appropriate solutions for hosted
private cloud.
V.
DEPLOYMENT
Currently, the deployment of the hosted private cloud is
performed in one cabinet for functional and performance eval-
uation. Fig. 4 depicts the organization of hardware, networking
and HPC nodes. The physical server used in the deployment
is 2U 4-Node server. Two HPC Center Nodes and two HPC
Computing Nodes are used in current deployment, which can
be allocated in one physical 2U 4-Node server. With the above
conﬁguration, availability can be achieved to tackle possible
failure situations. On the other hand, ﬁve 2U 4-Node servers
are allocated for tenants. Each tenant uses two nodes in one
physical server for fundamental virtualization capacity and
availability. The hosted private cloud is anticipated to support
ten tenants. Therefore, it is expected to provide 16 virtual
machines for each tenant, and totally 160 virtual machines for
the current setting of hosted private cloud in one cabinet. Based
on further resource or operation requirements, physical servers
can be added and conﬁgured to Tenant Computing Nodes for
tenants. Nexenta and GlusterFS are deployed and evaluated in
the hosted private cloud individually. Both storage systems can
be conﬁgured to support the data access and space management
of multiple tenants. In addition, Nexenta and GlusterFS provide
failover mechanism for high availability requirement. Finally,
virtual LAN (VLAN) and secure sockets layer virtual private
network (SSL-VPN) can be created and conﬁgured through
ﬁrewall and switch to enhance security and isolation of tenants
in hosted private cloud. On the other hand, in order to achieve
high availability of the whole environment, ﬁrewall and switch
are federated and deployed with failover capability.
VI.
CONCLUSION
In this paper, the design and the implementation of hosted
private cloud are introduced. Based on previous virtualization
solution (CAKE), the hosted private cloud is extended and
modiﬁed to provide different tenants with isolated resources
to support their tasks, and efﬁcient management mechanism
for administrators. Besides, it leverages the original design and
operation model of CAKE that simpliﬁes the architecture de-
sign of hosted private cloud and decreases the implementation
effort. For future works, test cases based on real world usage
scenarios will be designed and deployed for functional evalu-
ation. In addition, different deployment scale of the hosted
private cloud (e.g., from one cabinet to multiple cabinets)
should be examined. Finally, the performance, reliability and
availability will be evaluated for actual service delivery in
future works.
236
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

REFERENCES
[1]
W. Y. Chang, H. Abu-Amara, and J. F. Sanford, Transforming Enterprise
Cloud Services.
Springer, 2010.
[2]
Amazon Web Services, URL: https://aws.amazon.com [accessed: 2016-
06-24].
[3]
Microsoft Azure, URL: https://azure.microsoft.com/en-us [accessed:
2016-06-24].
[4]
Google Cloud Platform, URL: https://cloud.google.com [accessed:
2016-06-24].
[5]
N. Leavitt, “Hybrid Clouds Move to the Forefront,” Computer, vol. 46,
no. 5, May 2013, pp. 15–18.
[6]
R. L. Grossman, “The Case for Cloud Computing,” IT Professional,
vol. 11, no. 2, Mar.-Apr. 2009, pp. 23–27.
[7]
G. Wang and J. Unger, “A Strategy to Move Taiwan’s IT Industry From
Commodity Hardware Manufacturing to Competitive Cloud Solutions,”
IEEE Access, vol. 1, May 2013, pp. 159–166.
[8]
W. C.-C. Chu, C.-T. Yang, C.-W. Lu, C.-H. Chang, J.-N. Chen, P.-
A. Hsiung, and H.-M. Lee, “Cloud Computing in Taiwan,” Computer,
vol. 45, no. 6, June 2012, pp. 48–56.
[9]
K. Ye, Z. Wu, B. B. Zhou, X. Jiang, C. Wang, and A. Y. Zomaya, “Virt-
B: Toward Performance Benchmarking of Virtual Machine Systems,”
IEEE Internet Computing, vol. 18, no. 3, May-June 2014, pp. 64–72.
[10]
F. F. Moghaddam, M. B. Rohani, M. Ahmadi, T. Khodadadi, and
K. Madadipouya, “Cloud Computing: Vision, Architecture and Char-
acteristics,” Proceedings of the 2015 IEEE 6th Control and System
Graduate Research Colloquium, Aug. 2015, pp. 1–6.
[11]
V. Cardellini and S. Iannucci, “Designing a Flexible and Modular
Architecture for a Private Cloud: a Case Study,” Proceedings of the 6th
International Workshop on Virtualization Technologies in Distributed
Computing Date, June 2012, pp. 37–44.
[12]
G. Mangal, P. Kasliwal, U. Deshpande, M. Kurhekar, and G. Chaﬂe,
“Flexible Cloud Computing by Integrating Public-Private Clouds using
OpenStack,” Proceedings of the 2015 IEEE International Conference
on Cloud Computing in Emerging Markets, Nov. 2015, pp. 146–152.
[13]
M. Shtern, B. Simmons, M. Smit, and M. Litoiu, “An Architecture
for Overlaying Private Clouds on Public Providers,” Proceedings of the
2012 8th International Conference on Network and Service Manage-
ment, Oct. 2012, pp. 371–377.
[14]
IBM Cloud OpenStack Services, URL: http://open.ibmcloud.com/ [ac-
cessed: 2016-06-24].
[15]
HPE
Helion
Managed
Private
Cloud,
URL:
https://www.hpe.com/us/en/solutions/cloud.html
[accessed:
2016-
06-24].
[16]
Amazon Virtual Private Cloud, URL: https://aws.amazon.com/vpc/ [ac-
cessed: 2016-06-24].
[17]
Kernel Virtual Machine, URL: http://www.linux-kvm.org [accessed:
2016-06-24].
[18]
libvirt: The virtualization API, URL: https://libvirt.org [accessed: 2016-
06-24].
[19]
B. Pawlowski, C. Juszczak, P. Staubach, C. Smith, D. Lebel, and
D. Hitz, “NFS Version 3: Design and Implementation,” Proceedings
of the Summer 1994 USENIX Technical Conference, June 1994, pp.
137–151.
[20]
Pacemaker, URL: http://clusterlabs.org [accessed: 2016-06-24].
[21]
Nexenta, URL: https://nexenta.com [accessed: 2016-06-24].
[22]
GlusterFS, URL: https://www.gluster.org [accessed: 2016-06-24].
237
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

