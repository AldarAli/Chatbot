Unconventional Computing Using Evolution-in-Nanomaterio:
Neural Networks meet Nanoparticle Networks
Klaus Greff†, Ruud van Damme∗, Jan Koutn´ık†, Hajo Broersma∗, Julia Mikhal∗,
Celestine Lawrence∗, Wilfred van der Wiel∗, and J¨urgen Schmidhuber†
†IDSIA, USI-SUPSI, Galleria 2, 6928 Manno-Lugano, Switzerland
Email: {klaus,hkou,juergen}@idsia.ch
∗Faculty of EEMCS, CTIT and MESA+ Institutes for ICT Research and Nanotechnology
University of Twente, The Netherlands
Email: {r.m.j.vandamme,h.j.broersma,c.p.lawrence,w.g.vanderwiel}@utwente.nl
Abstract—Recently published experimental work on evolution-
in-materio applied to nanoscale materials shows promising re-
sults for future reconﬁgurable devices. These experiments were
performed on disordered nano-particle networks that have no
predeﬁned design. The material has been treated as a black-
box, and genetic algorithms have been used to ﬁnd appropriate
conﬁguration voltages to enable the target functionality. In order
to support future experiments, we developed simulation tools for
predicting candidate functionalities. One of these tools is based
on a physical model, but the one we introduce in this paper is
based on an artiﬁcial neural network. The advantage of this newly
presented approach is that, after training the neural network to
match either the real material or its physical model, it can be
conﬁgured using gradient descent instead of a black-box optimisa-
tion. The experiments we report here demonstrate that the neural
network can model the simulated nano-material quite accurately.
The differentiable, neural network-based material model is then
used to ﬁnd logic gates, as a proof of principle. This shows that the
new approach has great potential for partly replacing costly and
time-consuming experiments with the real materials. Therefore,
this approach has a high relevance for future computing, either
as an alternative to digital computing or as an alternative way
of producing multi-functional reconﬁgurable devices.
Keywords–nanoparticle network; neural network; simulation;
unconventional computation; evolution-in-nanomaterio.
I.
INTRODUCTION AND MOTIVATION
Within the EU-project NASCENCE [4], disordered networks
of gold nano-particles have been successfully used to produce
reconﬁgurable logic with a very high degree of stability and
reproducibility [3]. This breakthrough presents a proof of
principle that indicates very promising prospects for using
this material to perform more complicated computational
tasks. In order to predict candidate computational tasks, but
avoiding the waste of scarce and expensive resources involved
in experimentally exploring these nano-particle networks, we
developed simulation tools for examining the capabilities of
these material systems. One of them [7] is an extension of
existing tools for simulating nano-particle interactions, like
SPICE [11] or SIMON [18]. The latter tools are all based on
Monte-Carlo simulations, using a physical model, and have
been validated for designed systems with small numbers of
particles. Although these methods can, in principle, handle
arbitrary systems of any size, their scalability is a serious issue.
Moreover, nano-particle networks like the ones used in [3] to
date cannot be produced according to a predeﬁned speciﬁc
design. Therefore, due to their disordered nature, it is not
possible to use an accurate physical model for such material
systems.
In this paper, an alternative approach is introduced. This
novel approach is based on training artiﬁcial Neural Networks
in order to model and investigate the nano-particle networks.
Neural Networks (NN; [10] [13] [19]) have proven to be
powerful function approximators and have, especially recently,
been applied to a wide variety of domains with great success [5]
[6] [14]. Being essentially treated as black-boxes themselves,
NNs do not facilitate a better understanding of the underlying
quantum-mechanical processes that take place in the material.
For that purpose, physical models are more appropriate. But,
in contrast to physical models, NNs provide differentiable
models and thus offer interesting possibilities to explore the
computational capabilities of the nano-material. In the sequel,
NNs will be used, in particular, to search for conﬁgurations
of input voltages such that the material computes different
Boolean logic functions, such as AND, OR, NOR, NAND, and
XOR.
To enable the exploration of the computational capabilities
of the material by an NN, the NN needs to be trained ﬁrst with
data collected from the measurements on the material. Since
a physical model and an associated validated simulation tool
for the nano-particle networks have already been developed
[7], such training data can be obtained from the simulated
material. This also provides an opportunity for predicting
functionalities in small nano-particle networks that have not
been fabricated yet. This in turn can inform electrical engineers
on the minimum requirements necessary for obtaining such
functionalities, without the burden of costly and time-consuming
fabrication and experimentation. As soon as the NN has been
trained, searching for arbitrary target functions is very fast, and
can happen without any access to the material or its physical
model.
The rest of the paper is organised as follows. Section II
provides some technical details on the gold nano-particle
networks that have been used in the experimental work [3].
This section also describes the choices that have been made
and that form the basis for the physical-model based simulation
tool of [7], combining a genetic algorithm with Monte-Carlo
simulations for charge transport. Section III presents simulation
results obtained with these tools for an example network.
Section IV shows how an NN was trained for modelling the
example network, using data collected from the physical-model
based simulation tool. An analysis of the results is presented
in Section V, followed by a short section with conclusions as
15
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

Figure 1. Illustration of a disordered network of gold NPs
well as an outlook to future work.
II.
NANO-PARTICLE NETWORKS AND THEIR SIMULATION
In collaboration with the NanoElectronics group at the
MESA+ institute of the University of Twente, networks
consisting of commercially available nano-particles of size
5-20 nm consisting of gold, and junctions of alkanedithiol of
length 1-3 nm have been produced. The alkanedithiols stick
to the metal and can form junctions (tunnel barriers) between
particles. Figure 1 shows an illustration of such a network.
The central circular region is about 200 nm in diameter. More
details on the production process can be found in [3].
The networks investigated there are relatively large (in the
order of a hundred particles) and disordered. The transport
of electrons is governed by the Coulomb blockade effect [8]:
transport is blocked, except at almost discrete energy levels;
there exactly one electron can jump. The dynamics of such
a system is governed by stochastic processes: electrons on
particles can tunnel through junctions with a certain probability.
For such systems, there are basically two simulation methods to
one’s disposal: Monte-Carlo Methods and the Master Equation
Method [16] [17]. Since the number of particles is large,
the Monte-Carlo Method is the best candidate. This method
simulates the tunnelling times of electrons stochastically. To
get meaningful results, one needs to run the algorithm in the
order of a million times. Doing so, the stochastic process gives
averaged values of the charges, currents, voltages, etc. More
details on the simulation tool can be found in [7].
III.
AN ILLUSTRATIVE EXAMPLE
As an example which is still relatively small and manage-
able, but shows interesting features, the described methods have
been explored on the symmetric 4 × 4-grid consisting of the
components shown in Figure 2.
In Figure 2, the 16 green dots represent the nano-particles; in
between are the tunnelling junctions, with ﬁxed C and R values.
The two input leads and the single output lead are depicted
as I1 and I2 and O, respectively. Voltages are applied to the
conﬁguration leads V1-V9, according to a Genetic Algorithm,
and also to a back gate; this back gate is connected through
tunnel barriers (a silicon oxide layer) to all nano-particles (for
convenience we have not shown the back gate in the ﬁgure).
The ﬁtness of the sets of conﬁguration voltages is deter-
mined by how close the output for the four input combinations
Figure 2. A symmetric 4 × 4-grid of 16 nano-particles with leads
of the Boolean truth table is to the desired logic. We omit the
details due to page restrictions. Details can be found in [7].
1) Evolved Boolean Logic: Applying the developed simula-
tion tool to the small network of Figure 2, it was possible to
evolve all basic Boolean logic gates, using different computed
(simulated and optimised) settings of the values of the free
variables (the conﬁguration leads voltages and the back gate
voltage). The solutions for four of the cases, namely AND,
NAND, OR and XOR, are illustrated as contour plots in
Figure 3. The four plots are functions of the two input signals;
the voltages of both inputs range from 0 to 10 mV, horizontally
as well as vertically; the colour scheme ranges from blue for
small values to red for high values of the output.
(a) simulated AND
(b) simulated NAND
(c) simulated OR
(d) simulated XOR
Figure 3. Contour plots of simulated evolved logic in the 4 × 4-grid
2) Discussion: From an electrical engineering point of view,
the simulation results are very interesting, for several reasons.
First of all, the example of Figure 2 can be conﬁgured into any
of the basic Boolean logic gates, using only 16 nano-particles
of size 5-20 nm. If one would like to design and build the same
functionality with transistors, one would require at least 10
transistors. Secondly, in the designed circuit one would have
to rewire the input and apply it at different places, whereas in
16
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

the nano-particle network each of the input signals is applied
at exactly one place. Even with current transistor sizes below
20 nm, the designed circuit would require the same or more
space, and would dissipate substantially more energy.
It is interesting to note, that in the experiments with the
real material samples [3], all basic Boolean gates were also
evolved within an area with a diameter of around 200 nm,
but with only six control voltages. However, currently these
samples consist of 100-150 particles that are self-assembled
into a disordered network. The experimental results as well as
the simulations show the great potential for the approach, both
in the bottom-up and top-down design regime. This could have
a huge impact on future computing, either as an alternative
approach to digital computing or as an alternative way to
produce reconﬁgurable multi-functional devices, e.g., to support
further down-scaling of digital components. Currently, we are
not aware of any production techniques for constructing samples
that come anywhere close to the 4×4-grid structure of Figure 2.
To obtain more insight in the underlying currents and
physical phenomena, and with the long term goal to fully
understand what is going on in terms of electron jumps
and currents through these nano-particle networks, in [7]
visualisation tools have been developed to analyse the processes
that are taking place over time. In Figure 4, some pictures
visualising the currents through the network are presented, in
this case, as an example, when the network was conﬁgured
as an AND. The amplitude of the currents is proportional to
the area of the red arrows in the ﬁgure. The currents are all
averaged over time. The tool also enables the calculation of
variances, and it can show fast animations of the electron jumps
as well. It is still an open problem to deduce an explanation for
the patterns and jumps that cause the 4 × 4-grid to behave as
a logic AND (or one of the other basic Boolean logic gates).
Figure 4. Averaged current patterns for simulated AND in the 4 × 4-grid
Figure 4 gives an impression of how complicated the trafﬁc
of electrons in such networks can get, and can hopefully in
the future lead to more insight as to why they behave as logic.
In the next two sections, the use of artiﬁcial NNs to simulate
the nano-material will be explained, as well as how to use the
data collected from the above physical-model based simulations
to explore the 4 × 4-grid.
IV.
NEURAL NETWORKS
Deep feed-forward NNs are powerful function approxima-
tors, and recently they have been very successfully applied in
a wide range of domains. They consist of a sequence of layers,
where each layer computes an afﬁne projection of its inputs
followed by a pointwise non-linear function ψ:
h = ψ(Wx + b),
where θ = {W, b} are the parameters of the layer.
By stacking these layers, one can build non-linear functions
of varying expressiveness that are differentiable. In theory, these
networks can approximate any function to arbitrary precision
given enough hidden units, and they also work very well in
practice. This motivates the choice to use such deep feed-
forward NNs to model the input-output characteristics of the
nano-particle networks that were described earlier. These NNs
are used in the sequel for approximating the mapping from
the input and conﬁguration voltages to the output current, by
training them using many randomly chosen examples, generated
with the physical-model based simulation tool. By solving
that task for a speciﬁc nano-particle network, the trained NN
becomes a differentiable model for the complex quantum-
mechanic interactions within the material sample.
Figure 5. Illustration of an NN with two hidden layers
The voltages on the conﬁguration leads and the inputs
are scaled to have zero mean and unit variance, and serve
as inputs to the NN. Referring to the 4 × 4-grid of Figure 2,
in Figure 5, I1 and I2 denote the two input leads, b denotes
the back gate, and c1, c2, . . . , c5 denote the other leads, in a
symmetric fashion, so c1 represents V1 and V9, and so on,
whereas O denotes the output lead. The training objective
is to minimise the Mean Squared Error (MSE) on the (also
standardised) current of the output. The optimisation is done
using Minibatch Stochastic Gradient Descent with Nesterov-
style momentum [9] [12]. The Minibatch Stochastic Gradient
Descent method is the de facto standard for optimising deep
feed-forward NNs, whereas Nesterov-style momentum is a
regularly used extension for improving convergence speed.
There are other more elaborate optimisation schemes (like
AdaGrad, RMSProp, ADAM, etc.), but their beneﬁts are usually
moderate, and there was no need for this added complexity
here.
The choice of network architecture and training parameters
comprise a set of hyperparameters that need to be set for
this method. For the network, these are the number of hidden
layers, the number of neurons in each layer and their activation
functions. For training, they are the batch size, learning rate,
the momentum coefﬁcient, and stopping criterion. We ﬁxed
the batch size to 20, the momentum to 0.9, and stopped the
training once the MSE on the validation set did not decrease
for 5 epochs, or after a maximum of 100 epochs.
17
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

The hyperparameters of the NNs were optimised by random
search over 40 runs [1] [15] [2]. In particular, we randomly
sampled:
•
learning rate η log-uniform from [10−4, 10−1]
•
number of hidden layers from {1, 2, 5, 10}
•
number of units in each layer from {8, 16, 32, 64, 128}
•
activation function from {ReL, tanh, sigmoid}.
The best NN had two hidden layers with 128 rectiﬁed linear
units each, and was trained with a learning rate of η ≈ 1.6E−2.
This is the NN we use for the rest of the analysis.
A. Search
The trained NN is a differentiable (approximate) model
of the nano-material. This property can be used to run the
model “backwards”: ﬁnd inputs that produce certain desired
outputs by using the backpropagation algorithm to perform
gradient descent, not on the weights but on the inputs. Here,
it was required to go even further and use backpropagation to
search for functions; in particular, the aim is to ﬁnd settings of
the conﬁguration leads such that various combinations of the
input leads (logic pairs) produce corresponding desired (logic)
outputs.
1) Local Search: To accomplish the above goal, it was
necessary to produce a set of examples that have different
values for the input leads but share the same (random) values
for the conﬁguration leads, along with the desired output values.
Gradient descent is then used to minimise the MSE by adjusting
the values for the conﬁguration leads, while keeping their values
the same for all examples. So formally, given our neural network
model ˆf of the nano-material, we deﬁne an error over our N
input/output pairs ((I(i)
1 , I(i)
2 , O(i))):
E =
N
X
i=1
1
2( ˆf(I(i)
1 , I(i)
2 , θ) − O(i))2,
and then, using backpropagation, we effectively calculate:
∂E
∂θ = ( ˆf(I(i)
1 , I(i)
2 , θ) − O(i))∂ ˆf
∂θ .
2) Global Optimisation: One problem with the method
described above, is that it only performs a local search, which
means that the solution it converges to might correspond to
a bad local minimum. To mitigate this, it was decided to
ﬁrst sample 10,000 random starting points (settings of the
conﬁguration leads), and perform just 10 iterations of the
described local search on them. Only the starting point that
leads to the lowest error is then optimised further for 5,000
epochs, in order to obtain the ﬁnal solution. In this way, we
reduce the risk of getting stuck in a poor local minimum. Each
search comprises 420K evaluations of the neural network, for
a total of about a minute on a modern CPU.
V.
RESULTS
In this section, we present the results of a network trained on
1M random function-evaluations collected from the simulated
material. First of all, the following issue that was encountered
and is illustrated in Figure 6 had to be resolved.
In Figure 6, only the 2,000 samples with the highest
prediction error are shown. It can clearly be seen that the
last ≈ 500 samples account for most of the total error. Also
their target values are obviously outliers.
Figure 6. Prediction errors (top left), target outputs (bottom left), and network
predictions (bottom right) for the simulated 4 × 4 nano-grid data
Figure 7. Prediction errors plus histogram (top), target outputs (bottom left),
and network predictions (bottom right) for the cleaned nano-grid data
A. Removing Outliers
After training several NNs on the simulation data, it was
discovered that more than half of the total prediction error
stems from less than 0.1% of the data. These samples, which
account for most of the error, also turned out to be outliers in
terms of their output values, as can be concluded from Figure 6.
Most of the data falls in the region [−3, 3], but these ‘bad’
samples go up to ±40. The gradient for training the NN is
thus dominated by these few samples, causing the model to
ignore the bulk of the data. For these reasons, it was decided to
18
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

remove those outliers entirely from the dataset. After that, the
NN performed much better in modelling the material, as can
be seen in Figure 7. There, the samples are sorted by target
value. One can observe a clear correspondence between the
predictions (bottom right) and the targets (bottom left). The
histogram in the top right conﬁrms that most of the predictive
errors are very small (< 0.3).
So, as a consequence, all results in the sequel have been
obtained from the ‘cleaned’ data.
B. Logic Gates
The overall aim was to ﬁnd conﬁgurations for the simulated
4 × 4 nano-grid that turns it into a multi-functional reconﬁg-
urable device for computing some well-known Boolean logic
functions, just like the physical-model based simulation did:
AND, OR, XOR, NAND, NOR, XNOR. For this goal, we ﬁrst
had to decide which values of (x0, x1) to map (False, True)
to. The obvious choice is (0, 1), but values of (0.2, 0.8), for
example, would also still be acceptable. To circumvent the
problem of choosing these values, the same gradient descent
method was used to adjust the values for True and False for
the inputs as well.
In particular, the following was done for each function:
1)
generate eight random numbers, while assuring that
x1 > x0
2)
using these values, create a set of four input/output
pairs (see Table I)
3)
perform gradient descent on these 8 values, while
maintaining x1 > x0
The scheme by which the four input/output pairs are created
from the eight random values x0, x1, . . . , x7 for any of the logic
functions, is explained in Table I, in this case for the logic OR.
Note that this depends on x0 < x1.
TABLE I. THE SCHEME FOR CREATING THE FOUR INPUT/OUTPUT
PAIRS (FOR THE LOGIC OR)
I1
I2
c1
c2
c3
c4
c5
b
out
x0
x0
x2
x3
x4
x5
x6
x7
OR(F, F)
x0
x1
x2
x3
x4
x5
x6
x7
OR(F, T)
x1
x0
x2
x3
x4
x5
x6
x7
OR(T, F)
x1
x1
x2
x3
x4
x5
x6
x7
OR(T, T)
As described in Section IV-A2, ﬁrst a global search is
performed, in order to ﬁnd a good starting point, and then that
vector is optimised further. The results are presented in Figure 8.
There, the resulting conﬁgurations for six logic functions are
illustrated (one logic function per row). The leftmost column
shows the desired output for the logic function, while the middle
column presents the actual response of the trained NN model.
In the rightmost column, the corresponding conﬁgurations are
visualised.
From the plots in Figure 8, it can be concluded that most
of the target Boolean functions can be performed by the nano-
material (according to the NN model). Note that, what is most
important is the response of the model in the corners, since we
do not really care about values in between True and False. The
smooth plots are just there to show how the model is behaving,
and to give an impression on how robust the solutions are.
For AND, OR, NAND, and NOR, the values in the corners
match the desired outputs very well. In contrast, the search
AND
Target Output
Network Output
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
Configuration Pins
NAND
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
NOR
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
OR
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
XNOR
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
XOR
out false
c1
c2
true
c3
c1
b
c4
c2
c3
c4
c5
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Figure 8. Results for six logic functions: desired outputs, actual responses,
and the corresponding conﬁguration
for the XOR and XNOR functions failed to produce equally
satisfactory results, indicating that these functions might be
difﬁcult to perform for the nano-material under the given setup.
VI.
CONCLUSION
This paper has demonstrated how an artiﬁcial Neural
Network model can be applied to look for conﬁguration voltage
settings that enable different standard Boolean logic functions
in the same piece of material consisting of a disordered nano-
particle network. The training of the Neural Network was
based on generated random data from a physical-model based
simulation tool. The results are promising and can inform the
19
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

electrical engineers about possible functional capabilities of
these material systems, without the need of fabricating and
doing costly and time-consuming trial-and-error experiments on
real nano-particle networks. Of course, it is obvious that such
experiments are unavoidable if it comes to actually testing real
networks for the predicted functionalities. In fact, the capability
of reconﬁgurable Boolean logic in small samples of nano-
particle networks has recently been conﬁrmed experimentally.
It is likely, that this proof of concept will be the starting point
for exciting new research, and open up the opportunity for a
totally new approach to developing multi-functional stand-alone
devices.
Next steps in this direction ﬁrst of all involve the simulation
of real material samples. For this, new experiments are
needed, in order to produce sufﬁciently many data to enable
proper training of the Neural Network. This also requires new
fabrication techniques, involving larger networks on micro-
electrode arrays, with more contact leads to the material, and
with a more sophisticated back gate. The requirements can
be predicted by simulations, in particular if one wants to turn
to more complicated functionalities, like computational tasks
that are difﬁcult to perform with digital computers. Secondly,
it would be worthwhile to apply the same modelling and
simulation approach to other materials that show interesting
physical properties and behaviour, like networks of quantum
dots, ﬁlms of carbon nanotubes, sheets of graphene, and
mixtures of such materials. Thirdly, a natural next step would
be to integrate the Neural Network modelling approach with
the evolutionary search technique. These are amongst the future
research plans we want to pursue.
ACKNOWLEDGMENT
We acknowledge ﬁnancial support from the European
Community’s Seventh Framework Programme (FP7/2007-2013)
under grant agreement No. 317662.
REFERENCES
[1]
R. L. Anderson, “Recent advances in ﬁnding best operating conditions,”
Journal of the American Statistical Association, vol. 48, no. 264, pp.
789–798, Dec. 1953.
[2]
J. Bergstra and Y. Bengio, “Random search for hyper-parameter
optimization,” The Journal of Machine Learning Research, vol. 13,
no. 1, pp. 281–305, 2012.
[3]
S. K. Bose et al., “Evolution of a designless nanoparticle network into
reconﬁgurable boolean logic,” Nature Nanotechnology, vol. 10, no. 12,
pp. 1048–1052, 2015.
[4]
H. Broersma, F. Gomez, J. Miller, M. Petty, and G. Tufte, “Nascence
project: Nanoscale engineering for novel computation using evolution,”
International Journal of Unconventional Computing, vol. 8, no. 4, pp.
313–317, 2012.
[5]
D. C. Ciresan, U. Meier, J. Masci, and J. Schmidhuber, “A committee
of neural networks for trafﬁc sign classiﬁcation,” in International Joint
Conference on Neural Networks (IJCNN), 2011, pp. 1918–1921.
[6]
D. C. Ciresan, U. Meier, and J. Schmidhuber, “Multi-column deep
neural networks for image classiﬁcation,” in IEEE Conference on
Computer Vision and Pattern Recognition CVPR 2012, 2012, long
preprint arXiv:1202.2745v1 [cs.CV].
[7]
R. M. J. van Damme, H. J. Broersma, J. Mikhal, C. P. Lawrence, and
W. G. van der Wiel, “A simulation tool for evolving functionalities in
disordered nanoparticle networks,” Preprint, 2015.
[8]
A. Korotkov, Coulomb Blockade and Digital Single-Electron Devices.
Blackwell, Oxford, 1997, pp. 157–189.
[9]
J. Martens and I. Sutskever, “Training deep and recurrent networks with
hessian-free optimization,” in Neural Networks: Tricks of the Trade.
Springer-Verlag, 2012, pp. 479–535.
[10]
W. McCulloch and W. Pitts, “A logical calculus of the ideas immanent
in nervous activity,” Bulletin of Mathematical Biophysics, vol. 7, pp.
115–133, 1943.
[11]
L. Nagel and D. Pederson, “Simulation program with integrated circuit
emphasis,” University of California, Berkeley, Memorandum ERL-M382,
April 1973.
[12]
Y. Nesterov, “A method for unconstrained convex minimization problem
with the rate of convergence o(1/k2),” Doklady AN SSSR, vol. 269, 1983.
[13]
F. Rosenblatt, “The perceptron: a probabilistic model for information
storage and organization in the brain.” Psychological review, vol. 65,
no. 6, p. 386, 1958.
[14]
H. Sak, A. W. Senior, and F. Beaufays, “Long short-term memory
based recurrent neural network architectures for large vocabulary speech
recognition,” CoRR, vol. abs/1402.1128, 2014, [retrieved: Feb, 2016].
[Online]. Available: http://arxiv.org/abs/1402.1128
[15]
F. J. Solis and R. J.-B. Wets, “Minimization by random search techniques,”
Mathematics of Operations Research, vol. 6, no. 1, pp. 19–30, Feb. 1981.
[16]
C. Wasshuber, Computational Single-Electronics.
Springer-Verlag,
2001.
[17]
——, “Single-Electronics – How it works. How it’s used. How it’s
simulated.” in Proceedings of the International Symposium on Quality
Electronic Design, 2012, pp. 502–507.
[18]
C. Wasshuber, H. Kosina, and S. Selberherr, “A simulator for single-
electron tunnel devices and circuits,” IEEE Transactions on Computer-
Aided Design of Integrated Circuits and Systems, vol. 16, pp. 937–944,
1997.
[19]
P. J. Werbos, “Applications of advances in nonlinear sensitivity analysis,”
in Proceedings of the 10th IFIP Conference, 31.8 - 4.9, NYC, 1981, pp.
762–770.
20
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-461-9
FUTURE COMPUTING 2016 : The Eighth International Conference on Future Computational Technologies and Applications

