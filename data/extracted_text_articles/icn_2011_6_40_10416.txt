DNS Security Control Measures:  
A heuristic-based Approach to Identify Real-time incidents 
 
 
Joao Afonso 
Foundation for National Scientific Computing 
Lisbon, Portugal 
e-mail: joao.afonso@fccn.pt 
Pedro Veiga 
Department of Informatics 
University of Lisbon 
Lisbon, Portugal 
e-mail: pedro.veiga@di.fc.ul.pt
 
 
Abstract—There is no doubt that one of the most critical 
components of the Internet is the DNS – Domain Name System. 
In this paper, we propose a solution to strengthen the security 
of DNS servers, namely those associated with Top Level 
Domains (TLD), by using a system that identifies patterns of 
potentially harmful traffic and isolates it. The proposed 
solution has been developed and tested at FCCN, the TLD 
manager for the .PT domain. The system  consists of network 
sensors that monitor the network in real-time and can 
dynamically detect, prevent, or limit the scope of the attempted 
intrusions or other types of attacks to the DNS service, thus 
improving it’s global availability. 
Keywords—DNS ; security; intrusion detection system; real-
time;monitoring. 
I. 
 INTRODUCTION 
The DNS protocol is the basis of a critical Internet 
application used for the reliable and trustworthy operation of 
the Internet. DNS servers assume a central role in the normal 
functioning of the Internet by resolving domain names into 
network addresses for IP networks. Any disturbance to their 
normal operation can have a dramatic impact on the service 
they provide and on the global Internet. Although based on a 
small set of basic rules, stored in files, and distributed 
hierarchically, the DNS service has evolved into a very 
complex system and critical system [1].  
According to recent studies [2], there are nearly 11.7 
million public DNS servers on the Internet. It is estimated 
that nearly 52% of them, due to improper configuration, 
allow arbitrary queries (thus allowing denial of service 
attacks or “poisoning” of the cache). About 31.1% of the 
servers also allow for the transfer of their DNS zones.  
There are still nearly 33% of situations where the 
authoritative nameservers of an area are on the same 
network, which facilitates the attacks of the type of Denial of 
Service (DOS), a frequent attack to the DNS. Furthermore, 
the type of attacks targeting the DNS is becoming more 
sophisticated, making them more difficult to detect and 
control on time. Examples are the attacks by Fast Flux 
(ability to quickly move the DNS information about the 
domain to delay or evade detection) and its recent evolution 
to Double Flux.  
One of these attacks, is the conficker [3] worm, first 
appeared on October 2008, but also known as Code Red, 
Blaster, Sasser and SQL Slammer. Every type of computer, 
using a Microsoft Operating System can potentially be 
infected. Attempts to estimate the populations of conficker 
have lead to many different figures but all these estimates 
exceed millions of personal computers. Conficker made use 
of domain names instead of IP address in order to make its 
attack networks resilient against detection and takedown.  
The ICANN - Internet Corporation for Assigned Names 
and Numbers, created a list containing the domains that 
could be used in each TLD in such attacks to simplify the 
work of identifying attacked domains.  
A central aspect of the security system that we propose 
and have implemented is the ability to collect statistically 
useful data about network traffic for a DNS resolver and use 
it to identify classes of harmful traffic to the normal 
operation of the DNS infrastructure. In addition to collecting 
data the system can take protective actions by detecting 
trends and patterns in the traffic data that might suggest a 
new type of attack or simply to record important parameters 
to help improve the performance of the overall DNS system.  
The fact that the DNS is based on an autonomous 
database, distributed by hierarchy, means that whatever 
solution we use to monitor, it must respect this topology. In 
this paper we propose a distributed system using a network 
of sensors, which operate in conjunction with the DNS 
servers of one or more TLDs, monitoring in real-time the 
data that passes through them and taking actions when 
considered adequate.  
The ability to perform real-time analysis is crucial in the 
DNS area since it may be necessary to immediately act in 
case of abuse or attack, by blocking a particular access and 
notifying other cooperating sensors on the origin of the 
problem, since several types of attacks may be directed to 
other DNS components. The use of a Firewall solution 
whose triggering rules are dynamically generated by the 
network sensors is a fundamental component of the system, 
to filter attacking systems in an efficient way and resuming 
to the initial situation when the reason to filter different 
traffic patterns has ceased to exist. With this approach we 
aim to guarantee an autonomous functioning of the platform 
without the need of human intervention.  
127
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

The use of network alarms can also help in monitoring 
the correct functioning of the whole solution. Special care 
has been taken to minimize the detection of false positives or 
also false negatives.  
The remaining of the paper is structured as follows: 
Section II provides background information regarding 
related 
work. 
Section 
III 
introduces 
out 
proposed 
methodology. In section IV, we describe the solution. 
Section V presents a case study for validation of the 
proposal. In Section VI, the results gathered in the case study 
are analyzed. Finally, Section VII presents some conclusions 
and directions for further work. 
II. 
RELATED WORK 
One of the first studies that can be observed in this area 
has the authorship of Guenter and  Kolar, with a tool called 
sqldjbdns [4]. Their proposal uses a modified version of the 
traditional BIND [5] working together with a Structured 
Query Language (SQL) version inside a Relational database 
management system (RDBMS). For DNS clients, this 
solution is transparent and there is no difference from classic 
BIND. 
Zdrnja presented a system for Security Monitoring of 
DNS traffic [6], using network sensors without interfering 
with the DNS servers to be monitored. This is a transparent 
solution that does not compromise the high availability 
needed for the DNS service. 
Vixie proposed a DNS traffic capture utility called, 
DNSCap [7]. This tool is able to produce binary data using 
pcap format, either on standard output or in successive dump 
files. The application is similar to tcpdump [8] – command 
line tool for monitoring network traffic, and has finer grained 
packet recognition tailored for DNS transactions and 
protocol options, allowing for instance to see the full DNS 
message when tcpdump only shows a one-line summary.  
Another tool available is DSC - DNS Statistics Collector 
[9]. DSC is an application for collecting and analyzing 
statistics from busy DNS servers. Major features include the 
ability to parse, summarize and search inside DNS queries 
detail. All data is stored in an SQL database. This tool, can 
work inside a DNS server or in another server that "captures" 
bi-directional traffic for a DNS node. 
Kristoff also proposed an automated incident response 
system using BIND query logs [10]. This particular system, 
besides the common statistical analysis, also provides 
information regarding the kind of consultations operated. All 
information is available through the Web based portal. Each 
security incident can result in port deactivation. 
III. 
METHODOLOGY 
A. Architecture  
The architecture of the system that we have develop aims 
to improve the security, performance and efficiency of the 
DNS protocol, removing all unwanted traffic and reinforce 
the resilience of a Top Level Domain. We propose an 
architecture comprising an integrated protection of multiple 
DNS servers, working together with several network sensors 
that apply live rules to a dedicated firewall, acting as a traffic 
shaping element. 
Sensors located carefully located in the network monitor 
all the traffic going to the DNS infrastructure, identify 
potentially harmful traffic using a algorithm that we have 
developed and tested and use this information to isolate 
traffic that has been identified has security threats.  
Several networks sensor monitor different parts of the 
infrastructure and exchange information related to security 
attacks. In this way, as shown in Fig. 1, it should also be 
possible to exchange critical security information between 
the sensors. In addition to an increase in performance, this 
operation should prevent an attack on a server from a source, 
identified by another sensor as malicious. This scenario is 
relevant since some kinds of attacks are directed to several 
components of the DNS infrastructure. 
  
 
 
Figure1. Diagram of the desired solution 
B. Heuristic  
One of the crucial parts of our work is the algorithm to 
identify traffic harmful to the DNS. In order to implement 
the stated hypothesis in the architecture and keep the DNS 
protocol as efficient as possible, it is necessary to apply a 
heuristic, which in real time, evaluates all the information 
collected from different sources and applies convenient 
weights to each component and act accordingly. 
The components that we have chosen to have impact in 
the security incidents of DNS are: the number of 
occurrences, analysis of type of queries been made, the 
amount of time between occurrences, the number of probes 
affected and information reported from intrusion detection 
systems. 
128
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

Our system uses the following formula to evaluate a 
parameter that measures the likelihood of the occurrence of a 
security incident: 
 
,0 20
,0 25
,015
2,0
2,0
( )
⋅
+
⋅
+
⋅
+
⋅
+
⋅
=
I
N
G
C
O
f x
 
 
Are factors considered in applying this formula: 
 
• Occurrences (O) - Represents the number of times 
(instances) that have given source was blocked, so 
that the distributed then depicted in Table I. 
TABLE I – CONTRIBUTION OF THE NUMBER OF OCCURRENCES OF A 
SOURCE IN MALICIOUS HEURISTIC 
Occurrences 
Weight 
1 
25% 
2 
50% 
3 
75% 
4 or more 
100% 
 
• Analysis (C) - Real-time evaluation of the deviation 
of the values recorded in relation to the average 
observed statistics, based on the criteria and weights 
identified below in Table II. 
TABLE II  –  CONTRIBUTION OF EVENTS TYPIFIED A POTENTIALLY 
MALICIOUS SOURCE GIVEN IN HEURISTIC 
Event 
Weight 
Entire zone transfer attempt (AXFR) 
100% 
Partial transfer zone attempt (IXFR) 
50% 
Incorrect query volume, 50 to 75% on average per 
source 
75% 
Incorrect query volume exceeding 75% 
100% 
Query volume, up 50%, the average number of 
access by origin 
50% 
 
Note that the estimates apply the moving average, for the 
determination of reference values, given the ongoing 
development of data collected. 
 
• Time between occurrences (G) - time since last 
occurrence of a given source, distributed with the 
weights associated to the times below are obeisant. 
 TABLE III – WEIGHT OF DIFFERENT TIME BETWEEN EACH OCCURRENCE 
Time 
Weight 
Less than 1 Minute 
100% 
Less than 1 Hour 
75% 
Less than 1 Day 
50% 
Less than 1 Week 
25% 
 
• Incidence (N) - Number of probes that report blocks 
in the same source. 
For the calculation, we observed expression: 
 
Attacked
Sensors
Sensors
Total
_
#
_
#
1
−
 
• Intrusion Detection Systems (I) - We considered the 
use of the Snort platform, being free to use, and 
gather a large number of notarized signatures of 
security incidents relating to the DNS service. 
TABLE IV – INTERCONNECTION WITH TEMPORAL DATA GATHERED FROM 
INTRUSION DETECTION SYSTEMS 
Metric:  Common Vulnerability Scoring 
System (CVSS) 
Weight 
Low level 
34% 
Middle level 
67% 
High level 
100% 
 
For the activation of a rule in Firewall occurs will 
require: 
1. The formula shown above take values equal to 
or greater than 0.25; 
2. The combination of two or more criteria of the 
formula. 
Exception: when receiving information from all 
the other sensors, in which case a single criteria 
is sufficient; 
3. It respected the existing white list in the 
repository, 
allowing 
considered 
privileged 
sources that are not blocked.  
In this way we avoid compromising the Internet 
service, considering the key role played by 
DNS, the White List protects key addresses 
from being blocked in case of false positives 
events. 
This list is created from a record of trusted 
sources, allowing all addresses listed here to be 
protected from being added to the Firewall 
rules.  
One example is the list of internal addresses, 
and the DNS servers of ISPs. 
 
Instead, for the removal of a rule in the firewall will need 
to occur simultaneously on the following assumptions: 
 
1. Exceeded the quarantine period, based on the 
parameters in use; 
2. The expression of activation (heuristic) does 
not (still) check the referenced source. 
 
129
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

    
IV. 
PROPOSED SOLUTION 
A. Diagram 
 
As shown in Fig. 2, this solution is based on a network of 
sensor engines that analyze all traffic flowing into the DNS 
server in the form of valid or invalid queries, process the 
information received from other probes and issue restrictions 
for specific network addresses. In case an abnormal behavior 
is detected or there is suspicious behavior from a certain 
network address, it will be blocked in the firewall and the 
other probes notified so they can act accordingly. The system 
can also calculate the response time for each operation to 
evaluate the performance of the server. 
 
 
Figure 2. Block Diagram of proposed solution 
For each rule inserted in the sensor firewall, there will be 
a period of quarantine and, at the end of this time, the sensor 
will evaluate the behavior of that source, to evaluate the 
needed to remove the rule, as shown in Fig. 3. 
 
 
Figure 3. Quarantine procedure over the Firewall 
 
B. Network data flow 
 
According to our design, all data that flows through the 
probe heading for the DNS server is treated according to a 
standard set of global firewall rules, followed by specific 
local rules regarding to the addresses that are being blocked 
in real time. The queries are then delivered to the parser to be 
analyzed and stored in the RDBMS. At the top is the system 
of alarms and the Web portal (Fig. 4). 
 
 
 
Figure 4. Network data flow    
 
All information collected is stored in a database 
implemented in MySQL [11]. Taking into consideration the 
need to optimize the performance of the queries and to 
reduce the volume of information stored, the data is divided 
into a number of different tables. 
The conversion of the IP address of source and 
destination (DNS server) into an integer format, has allowed 
for much more efficient data storage, and significant 
improvements in the overall performance of the solution. 
130
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

The information regarding all queries made, is stored 
daily into a log, and kept available during the next 30 days.  
Two tables containing the set of rules that are 
dynamically applied – add or removed, based on situations 
that have been triggered - control the correct operation of the 
firewall. For auditing purposes every action is registered. 
The information required for auditing and statistical tasks 
never expires. 
 
C. Statistical analysis and performance evaluation 
 
The statistical information collected and stored in the 
database has a significant amount of detail. It is possible, for 
example, to calculate, for each sensor, the evolution of 
queries per unit of time (hour, day, etc) badly formatted 
requests, DNS queries of rare types and determine the 
sources that produce the larger number of consultations. It is 
also possible to see the standard deviation of a given measure 
so we can relate it to that is seen with the other hits [14]. 
The performance of the DNS protocol responses is 
permanently measured, regarding the response time per 
request. Data is constantly registered and an alarm is raised 
in case normal response times are exceeded. 
 
V. 
CASE STUDY 
Our proposal have been under development since 
September 2006 at FCCN – who has the responsibility to 
manage, register and maintain the domains under the .PT 
TLD. 
At present time, there are two sensors running attached to 
the DNS servers (one at the primary DNS and another 
working together with a secondary DNS server). 
The network analyzer is tshark [15], and the firewall used 
is IPFilter [12]. The real time parser was programmed in 
Java, collecting the information received from the tshark. 
The Web server is running Apache with PHP.  
Regarding the Xmpp server [13] we choose the Jive 
messenger platform.  
All modules are integrated together. 
The entire sensor solution, as described above, as well as 
the web platform we developed went on-line on the 1st of 
January 2007, and the data from the various agents was 
collected from the 10th of May 2008 till now. 
 
VI. 
RESULTS 
 
We present here the results of the last 12 months of data 
collection (between 1st of May 2009 and 31st May 2010). 
The Average number of requests to the primary DNS server 
is up to 14,459,356 per day (167 per sec.). 
The performance of the data analysis program is above 
1240 requests processed per sec. (filtered, validated and 
inserted in the database). 
Using the data collected by the sensors, during this time 
period, we were able to:  
 
• Collect useful statistical information. E.g., daily 
statistics by type of DNS protocol registers accessed 
(Fig. 5). 
 
 
 
Figure 5. Statistical analysis by type of records accessed 
 
• Detect examples of abnormal use (that are not 
security incidents). For example we were able to 
detect that a given IP was using the primary .PT 
DNS server as location resolver.  
The number of queries made was excessive when 
compared with the average value per source, 
reaching values close to some Internet Service 
Providers that operate under the .PT domain. 
• Detect situations of abuse, including denial of service 
attacks, with the execution of massive queries. In last 
12 months of analysis there are 17 DOS attacks 
triggered.  
They were instantly blocked, and addresses placed in 
quarantine (Table V). 
TABLE V. EXAMPLES WHEN THE SENSOR DETECTED SITUATIONS THAT 
REQUIRED THE FIREWALL RULES TO CHANGE. 
Source  
Address 
Date / Time 
Operation 
Sensor 
xx.xx.200.35 2010-04-15 02:05:04 
Add rule 
xx.xx.44.62 
xx.xx.17.212 2010-04-15 03:15:02 
Remove 
rule 
xx.xx.44.63 
xx.xx.117.51 2010-04-15 03:47:24 
Add rule 
xx.xx.44.63 
xx.xx.94.139 2010-04-15 04:27:19 
Add rule 
xx.xx.44.62 
xx.xx.13.231 2010-04-15 07:35:58 
Remove 
rule 
xx.xx.44.62 
 
• Improve DNS protocol performance repairing 
situations of inefficient parameterization of the DNS 
server.  
On the DNS server side, considering the capacity of 
the probe to determine the processing time for each 
consultation, it is possible to detect cases of 
excessive delay, which was later confirmed to 
coincide with of moments of zone update (Fig. 6). 
 
 
131
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

 
Figure 6. DNS query response time 
    
Considering the daily progress of DNS queries, before 
and after applying shaping heuristic to the protocol we obtain 
an improvement between values of 5.3% (minimum) and 
19.4% (maximum), as witnessed in Fig. 7. 
 
 
 
Figure 7. Improvement of DNS performance protocol 
 
Fig. 8 shows the recurrence of same IP sources in 
disturbing the proper functioning of the DNS protocol. 
 
 
 
Figure 8. Occurrences of different sources 
 
VII. CONCLUSIONS AND FUTURE WORK 
The solution presented here, builds upon the existing 
solutions that collect statistical information regarding DNS 
services, by adding the ability to detect and control security 
incidents in real time. It also adds the advantage of operating 
in a distributed way, allowing the exchange of information 
between cooperating probes, and the reinforcement of its 
own security, even before it is threatened. 
Currently, the solution presented does not allow the 
processing of addresses in the IPv6 format. The technical 
aspects that led to this situation are linked to the need to 
optimize the performance of the data recorder application 
making it possible to store the data from all consultations. 
Nevertheless, all queries made to IPv6 addresses are 
contained in this solution (AAAA types).  
We are also working on extending the data correlation 
capabilities of the system by adding information collected 
from other sources (intrusion detection systems for instance). 
We anticipate that this could be a valuable approach to 
reduce considerably the number of false positives and 
negatives [16]. 
REFERENCES 
 
[1] P. Vixie, “DNS Complexity”, ACM Queue vol. 5, no. 3, April 
2007. 
[2] D. Wessels, "A Recent DNS Survey", DNS-OARC, 
November 2007. 
[3] Dave Piscitello, “Conficker Summary and Review”, ICANN, 
May 2010. 
[4] SQLDNS website, [http://home.tiscali.cz:8080/~cz210552/ 
sqldns.html]. Last accessed on 17 November 2010. 
[5] BIND website, [http://www.isc.org/products/BIND]. Last 
accessed on 17 November 2010. 
[6] Bojan Zdrnja, “Security Monitoring of DNS traffic”, May 
2006. 
[7] Paul Vixie, D. Wessels, ”DNSCAP – DNS traffic capture 
utility”, CAIDA Workshop, July 2007. 
[8] Duane Wessels, "Whats New with DSC", DNS-OARC, 
November 2007. 
[9] Lawrence Berkeley National Laboratory. Tcpdump website 
http://www.tcpdump.org. 
[10] John Kristoff, "An Automated Incident Response System 
Using BIND Query Logs", June 2006. 
[11] MySQL 
website 
– 
(Open 
Source 
Database), 
[http://www.mysql .com]. Last accessed on 17 November 
2010. 
[12] IP 
FILTER 
– 
TCP/IP 
Firewall/NAT 
Software, 
[http://coombs.anu.edu.au/~avalon]. Last accessed on 17 
November 2010. 
[13] P. Saint-Andre, Ed., Extensible Messaging and Presence 
Protocol (XMPP): Core, RFC 3920, 2004. 
[14] João Afonso, Edmundo Monteiro, "Development of an 
Integrated Solution for Intrusion Detection: A Model Based 
on Data Correlation", in Proc. of the IEEE ICNS'06, 
International Conference on Networking and Services - 
ICNS'06, Silicon Valley, USA, July 2006. 
[15] Tshark website – The Wireshark Network Analyzer, 
[http://www.wireshark.org]. Last accessed on 17 November 
2010. 
[16] João Afonso, Pedro Veiga, “Protecting the DNS Infrastructure 
of a Top Level Domain: Real-Time monitoring with Network 
Sensors”, WSNS 2008, 4th IEEE – International Workshop on 
Wireless and Sensor Networks Security, Atlanta, USA, 29 
September – 2 October 2008. 
 
132
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

