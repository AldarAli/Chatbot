Fusion of Distributed Sensor Tuple Spaces and Agents using Broadcast Radio 
Communication for Mobile Networks 
Stefan Bosse 
Department of Mathematics & Computer Science 
University of Bremen 
28359 Bremen, Germany 
e-mail: sbosse@uni-bremen.de 
 
Abstract— Short-time and short-range device-to-device and 
device-to-service communication in ad-hoc mobile networks is   
a challenge. Although Internet access is widely available, there 
are places that are not covered by wireless IP networks, or IP 
networks are not suitable for ad-hoc short-time and short-
range communication with spatial context. In this work, devic-
es communicate in a connectionless and ad-hoc way by Blue-
tooth broadcast messaging available in any smartphone and in 
most embedded computers. Bi-directional connectionless 
communication is established via parallel advertisement and 
scanning modes by exchanging data tuples. The communica-
tion is performed via a tuple space service on each node. Tuple 
space access is performed by simple event-based agents. Mo-
bile devices can act as tuple carriers that can carry tuples be-
tween different locations. Additionally, UDP-based Intranet 
communication can be used to access tuple spaces on a larger 
spatial range. The Bluetooth Low Energy Tuple Space (BeeTS) 
service enables opportunistic, ad-hoc and loosely coupled de-
vice communication with a spatial context. 
Keywords- Distributed Data Processing; Tuple Spaces; 
Sensor Networks; Internet of Things; Multi-agent Systems. 
I. 
 INTRODUCTION 
Ubiquitous and pervasive computing introduces a big 
amount of visible and non-visible low-resource and mobile 
devices with an exponentially increasing number of deployed 
embedded systems. Commonly used authenticated and user-
centred communication is not always suitable anymore. Most 
Internet-of-Things (IoT) devices and smart sensors are still 
connected via the Internet using IP communication and that 
are accessed by a server that collects sensor information pe-
riodically or event-based. Although Internet access is widely 
available, there are places that are not covered and WLAN 
and mobile cell communication requires a descent amount of 
power not always available. Additionally, the residential 
time of mobile devices can be below one minute, not suitable 
for ad-hoc connection-based and negotiated communication. 
Finally, the spatial context (the environment in which the 
sensor or devices are situated) is not considered (or lost) by 
Internet connectivity. Social contact tracing and social inter-
action commonly takes place only in a small spatial area. In 
this work, smart devices communicate in a connectionless 
and ad-hoc way by using low-energy Bluetooth available in 
any Smartphone and in most embedded computers, e.g., the 
Raspberry PI devices. Bi-directional connectionless commu-
nication is established via the advertisement and scanning 
modes. The communication nodes can exchange small data 
or functional tuples using a tuple space service. Mobile de-
vices act as tuple carriers that can carry tuples between dif-
ferent locations. Additionally, UDP-based Intranet commu-
nication can be used to connect tuple spaces. 
Tuple spaces are widely used for data storage for multi-
processing in distributed and parallel systems. The Bluetooth 
Low Energy Tuple Space (BeeTS) service is a lazy distribut-
ed tuple space server and client. BeeTS uses Bluetooth and 
UDP broadcasting for tuple space interaction and tuple ex-
change. BeeTS supports tuples with an arity up to 4. A tuple 
space provides a spatial context, i.e., tuple space access (by 
mobile devices) is limited to nearby devices. Distributed 
tuple spaces can be connected by node routers using IP 
communication if available. The router composes global 
space sets by tuple exchange and replication. The router is 
customised by function code rules. These rules can be 
changed at run-time and the code can use Machine Learning 
algorithms to optimally distribute tuples. 
The novelty of this work is two-fold. Firstly, a ubiquitous 
radio broadcast medium is used for low-distance communi-
cation in ad-hoc mobile networks combined with a unified 
tuple space paradigm. Secondly, the tuple space communica-
tion is performed by simple reactive event-based agents pro-
grammed in JavaScript that can be sent to a node via the tu-
ple space operations, too. A proof-of-concept use-case fea-
turing smart interactive building control is presented. Beside 
the communication technology, basic security aspects are 
addressed, too. 
II. 
RELATED WORK 
Originally, Bluetooth was introduced as a short-range 
wireless communication technology used for linking periph-
erals (like ear phones) to smartphones. Mid-range and con-
nectionless Bluetooth communication is used in several 
crowd sensing and crowd interaction use-cases, e.g., used for 
attendance tracking [1] and most prominently for pandemic 
contact tracing [2]-[4]. These use-cases basically perform 
unidirectional producer-consumer communication using ad-
vertisement packet broadcasts. In this work, asynchronous 
bi-directional communication between nodes of a set that are 
within the receiving range is addressed. 
In [5], multi-hop networks are established with Bluetooth 
Low Energy (BLE) using a new multi-hop Generic Attribute 
Profile (GATT) layer service and connection-based node 
group connections (a group is a set of nodes within a specific 
spatial diameter). A connection protocol starting with adver-
tisement, negotiation (requiring authorisation credentials), 
9
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

and final set-up of a bi-directional communication channel is 
time consuming and can require up to one second. 
Connection-based channel communication is mostly not 
suitable to transfer small amounts of data, especially, from 
mobile devices with high spatial fluctuation. Instead, the 
advertisement mode is attractive to transfer small amount of 
data via broadcasting. Small sensor nodes and economy ad-
vertisement tracking use this kind of communication. Cur-
rent deployment of smartphones for social contact tracing 
relies mostly on this method, too. But transferring data pay-
load via advertisement packets has some drawback, mostly 
the issue of a low reception probability, discussed [6]. If the 
number of devices sending advertisement packets in the re-
ceiving range of a device increases, the probability p¹ to re-
ceive at least one advertisement packet from a sequence of 
identical packets decreases significantly. But nonetheless, [6] 
concluded that BLE broadcasting is still suitable in most 
situations.  
The generative tuple space paradigm is well suited for 
ad-hoc mobile networks [7], especially if this paradigm is 
coupled with the agent paradigm [8]. The concept of fusion 
of mobile devices with a set of heterogeneous sensors 
providing a sensor service that can be accessed via the Inter-
net was introduced by [9]. 
III. 
FORMALISATION OF DISTRIBUTED TUPLE SPACES 
A tuple space is basically a data base containing tuples. A 
tuple is a poly-typed ordered set of data values. The number 
of data values specifies the arity of the tuple, i.e., 
tu=〈v1,v2,..,vk〉, |tu|=k. Each tuple space TS can be divided 
into independent sub-spaces TS= ts1 ∪ ts2 ∪ .. ∪ tsn, with tsi 
holding only tuples of arity i. The data type of each element 
of a tuple can be arbitrary, i.e., any scalar value (float, inte-
ger, Boolean), or composed values, i.e., arrays or structures. 
In this work, the data elements are limited to scalar values, 
more specifically, float32, int16, and short strings (or data 
bytes). 
Tuple space communication is generative, i.e., the life-
time of a tuple can be longer than the lifetime (or presence) 
of the producer process. There are producer and consumer 
processes. A producer process uses the out(〈tuple〉) operation 
to store a tuple in the space. The consumer process uses the 
input operation inp(〈pattern〉) to remove a tuple. A tuple is 
found by pattern matching. A pattern is a tuple with actual 
and formal parameters (wild cards). Any matching tuple is 
returned. The input operation destroys the tuple atomically, 
i.e., one input request consumes at most one tuple. In distrib-
uted asynchronous systems, this is difficult and expensive to 
be achieved. There is a read operation rd(〈pattern〉) that re-
turns only a copy of the matching tuple. Tuples can be delet-
ed by using the remove operation rm(〈tuple|pattern〉). Tuples 
can have an unlimited lifetime, but practically the lifetime is 
limited either by the tuple space service (removing old tu-
ples) or by the out operation providing a lifetime t, i.e., 
tu(t)=〈v1,v2,..,vk,t〉, |tu|=k. The determination of the tuple life-
time is difficult in advance and depends on the application 
and the producer-consumer interaction time scale, but upper 
boundaries can be defined. 
The read and input operations are typically synchronous, 
i.e., as long as there is no matching tuple, the requesting pro-
cess is blocked. This operational semantic requires in dis-
tributed systems reliable and synchronous bi-directional 
communication that is not available in this work. For this 
reason, the read operation is just a request that can be ful-
filled within a time interval [t0, t1], or not (time-out). 
IV. 
UNRELIABLE BROADCAST COMMUNICATION 
It is assumed that there is a broadcast medium B, e.g., us-
ing radio waves, which can reach a number of nodes 
NB={ni}i=1k defining a receive area/range coverage C(B,N)(t) 
that changes with time t. B can send broadcast messages m to 
all listening nodes reachable by B. The set of nodes within B 
can vary on time and spatial scale. Furthermore, it is as-
sumed that there is a probability pi(m,ri,j,[t0,t1]) ∈ [0,1] that a 
message m is received by a node i sent by node j in distance r 
within a time interval [t0,t1]. These two assumptions are fun-
damental for the proposed distributed tuple spaces. 
It is assumed that single packets that can be sent over B 
are strictly limited by a small number of bits, e.g., 200-300 
Bits. This requires a compact and optimized message format, 
discussed in the next sub-section. 
Messages 
There are seven different message types: 
• OUT operation stores a tuple in all tuple spaces receiving 
this message; 
• RD and INP operations that request tuples from all re-
ceiving tuple spaces; 
• TEST operation checks for the existence of a tuple or set 
of tuples; 
• TUPLE is either an initial message sending this tuple to 
all receiving nodes without storing the tuple in the re-
spective tuple space, or a reply to a tuple request; 
• IAMHERE and WHERE messages are used for node 
search. 
The message format is rather simple and contains a head-
er and the tuple data payload. A sequence number stored in 
the header is required to detect the reception of multiple cop-
ies of the same message, a prerequisite for deployment of the 
Bluetooth device back-end that sends a message multiple 
times, explained in Sec. 4.2. The signature byte specifies the 
following tuple data pay-load. Depending on the back-end 
communication device and the supported packet format, the 
number of pay-load bytes can be very small. The signature 
field specifies the type of each tuple element with a tuple 
limit of four elements. For Bluetooth advertisement packag-
es, there is NBLE=32, for the UDP back-end it is at most 
NUDP≥512. The message header and the data payload are 
encoded in an BLE advertisement packet using one device 
local name attribute (ASCII85 encoded) and seven 16 Bit 
service UUID attribute fields. The header and payload are 
stored in a linear format using UDP messaging,  
In contrast to typical tuple space services, the tuple op-
erations are not atomic here. They can be executed at any 
given time point t in the near future or never, and the set of 
reachable tuple spaces that execute the request is not bound 
and can be zero. There is no assumption that neither a mes-
sage arrives at a specific node nor that the request is pro-
10
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

cessed successfully. There are filter rules processed by 
agents that can prevent tuple operation execution, too. That 
means, the INP operation is only a suggestion to all receiving 
tuple spaces to remove a matching tuple. All operations pose 
a probabilistic behaviour, i.e., there is a probability ≥ 0 that a 
message is processed. The encoding of tuples is done auto-
matically. Before a tuple is encoded and packed, a signature 
is derived; numbers are classified either in integer 16 Bit or 
float 32 Bit values depending on the actual value.  
 
Bluetooth LE Back-end 
Bluetooth is a standard radio communication technology 
connecting master with slave devices (peripherals) over short 
distances in the range of 10-300 cm. The data exchange is 
performed over negotiated connections. A connection is ne-
gotiated using the advertisement and scanning mode of Blue-
tooth devices. A peripheral device advertises its service by 
sending out a short advertise message with preliminary in-
formation about the devices. A Bluetooth host (master) de-
vice, typically a smartphone, will receive these advertise-
ment messages if it is in scanning mode. One limiting factor 
of communication by mobile devices is power consumption, 
which is addressed by BLE devices that can adapt to various 
communication situations with different power levels. De-
vices can access remote tuple spaces of nearby neighbouring 
nodes (typical in the range of 1-10m) by using BLE broad-
casting (called ble-ts). 
A device in advertisement mode will send out periodical-
ly advertisement messages that contain a small payload de-
pending on the advertisement message class, shown in Fig. 
1. In this work, the payload is limited to 32 Bytes. There are 
40 RF channels in BLE, each separated by 2 MHz (centre-to-
centre). Three of these channels are called the primary adver-
tising channels (labelled 37, 38, and 39), while the remaining 
37 channels are called the secondary advertisement channels 
(they are also the ones used for data transfer during a con-
nection) [10]. The primary channels are switched randomly 
in periods. On the other hand, the scanning device has to 
switch the (primary) receiving channels randomly, too. There 
is a probability p that an advertisement packet is received if 
both the scanner and the advertiser are switched on the same 
channel and if there is no other sending within the receiving 
range creating collision (invalidation of the message). 
The bandwidth and latency is limited by the advertise-
ment time tad=te-ts. The maximal number of independent 
messages that can be sent per second is 1/tadv. Assuming a 
channel switching time of tsw ≈ 100ms (a typical default val-
ue), a switching dead time tde ≈ 2ms, then tad ≥ 3tsw, and typi-
cally tadv=500ms. The likelihood p(Nr ≥ 1) that a receiver b 
receives a message from a (i.e., at least one advertisement 
packet was received) depends on the distance ra,b, the send 
power Pt, the antenna gains Gt and Gr, the channel switching 
times Tsw of a and b, the receiver and sender dead times tde , 
the total active advertisement time tad, and the packet send 
frequency 1/tsn. 
 
 
Figure 1.  Principle BLE-based broadcast communication using 
advertisement packets. The sender and receiver switch their radio channels 
randomly and periodically. A packet m containing a tuple space request is 
sent multiple times in t ∈ [ts,te].  
UDP Back-end 
In addition to the BLE broadcast communication, nodes 
that are connected to a local IP network can exchange tuple 
requests via UDP broadcast messages (called udp-ts). Alt-
hough UDP messaging is not reliable and there is no 
acknowledgement of a packet delivery, the transmission 
probability for wired and switched connections is nearly 1 
and mostly independent of the underlying network and the 
network load. In contrast, the BLE-based communication has 
a transmission probability of about 0.1-0.5 with a strong rela-
tionship to the radio communication load in the near neigh-
bourhood of the stations. Wireless communication is differ-
ent. Initially, the UDP back-end sends a message only one 
time. Therefore, a much higher bandwidth and lower latency 
can be achieved. However, experiments showed that some 
WLAN access points do not broadcast a received broadcast 
packet again to all connected client nodes. In dead, wireless 
UDP broadcasting is transformed in radio peer-to-peer multi-
casting. The probability p of a wireless connected device to 
receive UDP broadcast messages sent by other wireless con-
nected nodes can be below 0.3. Therefore, and optionally, 
the sending of UDP broadcast packets can be repeated like in 
the BLE back-end. The delta time is chosen randomly within 
a time interval [1,10] ms. Nodes connected in a wired way 
via LAN do not show this packet dropping. All nodes con-
nected in a wired way to the WLAN access points receive all 
radio broadcasted UDP messages. 
V. 
SECURITY 
On one hand, strong security in a non-negotiated and 
connectionless broadcast medium with message packet sizes 
below 64 Bytes is nearly impossible. On the other hand, this 
communication architecture and software framework should 
be deployed in public buildings and city environments con-
trolling critical infrastructure, e.g., controlling ambient light 
intensity by user demands and user mobility. Any device can 
send tuple requests without any prior authorisation or authen-
tication (smartphones do this continuously). Today, billions 
of people using pandemic contact tracing Apps are exactly 
doing this and are filling the air with broadcast advertisement 
messages (although, not all contact tracing applications rely 
on this methodology). So, the reception of broadcast mes-
11
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

sages cannot be prevented, and the major layer of security 
must be handled by the filter agents. Any time a message 
arrives from a sender there is a unique MAC identifier that is 
annotated to each message. One approach is a list of author-
ised devices that are handled in groups by different agents. 
But the MAC identifiers must be transferred to all devices in 
the group in advance, which is not suitable for mobile ad-hoc 
networks.  
A second approach uses symmetric two-way encryption 
with a private and a public key pair. The messages are en-
crypted using the private key (only known by trusted devices 
and users) and decrypted in the receiving device. But, due to 
the hard data size constraints, only Format-Preserving En-
cryption (FPE) can be applied. Security and encryption is not 
addressed in this work. BeeTS implement a simple FPE al-
gorithm that is able to encrypt and decrypt short data mes-
sages without compromising communication bandwidth or 
latency. The FPE algorithms can use any alphabet domain 
capable to encrypt both ASCII and binary data. It uses the 
aes-256-cbc algorithm. The encryption and decryption each 
require only about 0.05 μs/Byte on a typical desktop com-
puter. Each tuple space can be protected with its own protec-
tion key and processing encrypted messages. An encryptor 
can be created on the fly (and used by agents, too). The en-
cryptor is integrated in the BLE and UDP rpc modules be-
fore sending and after receiving a raw message. The encryp-
tion maps each data byte to an encrypted data byte inde-
pendently using look-up tables. This kind of encryption is 
fast with low computational overhead, but is not safe against 
brute-force attacks. The mapping tables are created by using 
a user defined secret key. 
VI. 
BEETS 
A. Heterogeneous Networks 
The principal network architecture combining Bluetooth 
and UDP-IP broadcast communication technologies is shown 
in Fig. 2. Tuple messages can either be sent via Bluetooth 
advertisement (based on [6]) or via single UDP packets with-
in a local IP network. BeeTS is programmed entirely in Ja-
vaScript [11] and can be executed by node.js with a blue-
tooth socket modules for BLE access, the noble module for 
the central BLE part, and bleno for the peripheral part [12]. 
Note that BeeTS uses the peripheral and central (master) 
mode simultaneously (advertising and scanning), requiring a 
Bluetooth device with version ≥ 4.0. BeeTS is basically a 
small library module written in JavaScript. 
Smartphones act as mobile devices and provide both a 
rich set of sensors and BLE connectivity. Each communica-
tion back-end can receive tuple requests. If there is a listener 
installed for tuples (with pattern matching), incoming tuples 
(TUPLE message) can be consumed by the listener or not. 
Otherwise, incoming tuples are stored in the local tuple 
space.  
There are agents acting as a bridge between the commu-
nication back-end and the tuple space. They can filter incom-
ing messages and decide to reply immediately, to access the 
tuple space, or to discard the message. Agents are functional 
code that listen to incoming tuple requests. There can be 
more than one agent. Communication between agents is es-
tablished via the tuple space, too. 
A broadcast message sending via BLE enables the adver-
tisement mode of the device for a specific time interval [ts,te]. 
The duration of the time interval Δt determines the receiving 
probability, the collision probability (if more than one station 
is sending), the number of advertisement packets that contain 
the message m, and the number of different messages that 
can be sent per second. The interval time Δt must at least 3 × 
tsw, with tsw as the average channel switching time of the 
sender (and receiver). It is assumed that the sender and the 
receiver have the same switching time, typically 100μs. It is 
important to note that channel switching introduces small 
dead time intervals (about 1-10ms). A suitable value for Δt is 
about 500ms. 
Each physical communication interface (BLE/UDP) is at-
tached to its own tuple space, i.e., there are two distributed 
space sets connected via BLE and UDP, respectively. This 
division is grounded in the spatial context of tuple spaces. 
Using BLE communication only nearby nodes can insert or 
remove tuples, whereas UDP communication enables tuple 
exchange over short and large distances, too. Tuple exchange 
between BLE and UDP tuple spaces is provided by a cus-
tomisable router, shown in Fig. 2. Application-specific rout-
ing rules (functional code) provide transfers based on pat-
terns and content of tuples. The rule set is dynamic and can 
be changed at run-time. The router extends the visibility and 
scope of tuples based on adaptive code. The code can use 
Machine Learning, e.g., reinforcement learning, to improve 
tuple space distribution. The routers connect local spaces and 
compose organised global spaces. 
 
 
Figure 2.  The hybrid network architecture using BLE and UDP-IP 
broadcast communication; n: stationary node, b: Stationary beacon, m: 
Mobile node, TS: Tuple space, R: Rule-based router  
B. Programming API 
Each time a message is received, it is passed to the Re-
mote Procedure Call (RPC) layer. Among the message data, 
the sender MAC ID, a time stamp, and the signal strength is 
added to the message. The programming API is rather sim-
ple. A tuple space is created for each communication back-
end. For each device back-end there is the same set of opera-
tions that can be applied on the tuple space: out (persistent), 
notify (not persistent), rd (preserving), inp (destructive). All 
these operations create broadcast messages. To access the 
12
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

local tuple space directly, there is a mirror operational set 
accessed by the host attribute.  
 
VII. AGENTS 
The BeeTS framework basically provides a communica-
tion platform using radio communication like Bluetooth or 
WLAN. The communication bandwidth of various devices 
can be significantly limited (e.g., in the case of Bluetooth 
advertisement mode that can be 2 messages/second only). 
One main feature of BeeTS nodes is the capability to execute 
event-based reactive agents programmed in JavaScript that 
perform, e.g., filtering of incoming tuple space requests, 
shown in Fig. 3. Agents can act as a bridge between different 
local tuple spaces, i.e., between ble-ts and udp-ts. 
An agent is functional data consisting of private body 
variables (including functional values) and event handlers 
that are activated by incoming messages, sensors (if the host 
platform provides them), periodically, or only one time. An 
event handler rule consists of an event expression that acti-
vates the rule and the hander function that is called on activa-
tion. An event rule activation expression can select three 
different event classes (ts, sensor, timer) with an optional 
conditional expression. Conditional expressions can access 
event source variables (actual sensor value, previous sensor 
value, tuple elements, time). Tuple listeners can consume 
tuples depending on the return value of the handler function. 
Not consumed tuples are stores in the local tuple space (if 
delivered by an out operation). 
 
 
Figure 3.  Agents create a bridge between tuple spaces with multiple 
communication devices (Red: Message event agent, Blue: Timer agent, 
Green: Router agent).  
Agent event handler functions are application specific 
and can be loaded remotely at run-time via a service API 
using active tuples. Agents can access the tuple spaces and 
communication interfaces programmatically as well as send-
ing HTTP(S) requests to external services. The operations 
that have to wait for a reply always operate asynchronously 
with a callback function either called on a reply or on a 
timeout with empty data. As discussed in the next section, 
the tuple messages that can be sent via BLE have a strict size 
limit below 40 Bytes. Additionally, only a few independent 
tuple messages can be sent per second (typically 2/s). This 
requires progressive and tight scheduling of tuple messaging. 
This is a typical constraint solving problem that is performed 
by the multi-agent system, too. The agents have to satisfy the 
quality of service, e.g., a distributed human-interactive light 
managements in buildings (shown in the use-case section). 
Agents are executed in sand-boxed containers. Since Ja-
vaScript objects and function can be serialised to text and 
deserialised at any time agent snapshots containing actual 
agent data can be sent with active tuples to other nodes, i.e., 
tuples that contain code. Typically, encryption is used to 
secure agent migration. 
VIII.  DISTRIBUTED SMART BUILDING CONTROL 
This use-case deploys three different node classes im-
plementing a distributed building light control system: 
• Stationary beacons (Raspberry 3) equipped with BLE and 
WLAN connectivity and supporting ble- and udp-
connected tuple spaces in both test and production de-
ployment; 
• Mobile devices (battery powered RP Zero stacked with a 
smartphone for testing, stand-alone smartphone in pro-
duction systems) supporting ble- and udp-connected tu-
ple spaces in test and ble-connected tuple spaces only in 
production environments; 
• A central monitoring and light control service supporting 
UDP-connected tuple spaces. 
The network architecture and experimental set-up is 
shown in Fig. 4. Each node deploys at least one event-based 
agent that implements necessary node operations like inter-
action with mobile devices or users, and tuple filtering and 
bridging. Beacons consume and aggregate mainly sensor 
data from mobile (sensorised) devices like smartphones and 
forward micro-surveys from the central server to mobile de-
vices. But beacons can initiate and manage micro-surveys, 
too. To minimise the number of sent tuples via the BLE de-
vice, the mobile nodes monitor the user behaviour by analys-
ing the accelerometer and gyroscope sensors. Updates of 
light sensor tuples are only sent if either the light conditions 
changes or the mobile device was moved in space. For rapid 
prototyping, smartphones are using generic Web browser 
loading an application page from the locally attached Rasp-
berry PI zero bundled with the smartphone. All sensor data is 
sent to the embedded computer that executes the mobile ap-
plication logic and that performed the BLE communication. 
 
 
Figure 4.  Experimental Set-up; s: Central server, b: beacon (Raspberry PI 
3), m: Mobile device; Central server and beacons communicate via WLAN 
or LAN. 
Mobile devices use their light sensor in conjunction with 
accelerometer and gyroscope sensors to estimate the ambient 
light conditions and the user mobility by classifying the user 
activity in rest, smartphone use, and movement phases.  
13
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

The measured light sensor data is processed by a sensor 
agent that tries to estimate if the smartphone is currently ex-
posed to external light or if it is stored in a box. If external 
light is detected, sensor light tuples 〈"SENSOR", 
"LIGHT", value, time〉 are sent via BLE. Nearby 
beacons distributed in the building about every 10-20m (and 
one per room/floor) collect these tuples and send aggregated 
sensor light values to the central server via UDP-connected 
tuple spaces. 
Among sensor tuples, there are micro-survey tuples that 
are sent from a beacon (initially delivered by the central 
server via the UDP tuple space) to mobile devices. If a de-
vice supports HMI (e.g., a smartphone), a short question is 
posted to a chat dialogue platform embedded either. The user 
can answer the question and the answer is passed back to the 
beacon (or any other beacon due to movement). The beacons 
collect the micro-survey replies and forward them to the cen-
tral server.  
 
 
Figure 5.  (Left) Communication and service layer s (Right) Tuple flows.  
The loss of tuple messages either due to out-of-
reachability of beacons, or by collision, or by uncorrelated 
sender-receiver channel pairing, does not compromise the 
quality-of-service of the light control in the single rooms and 
floors. In average, 80% of the sent tuples were received and 
processed by the beacons. Mobile devices sent about 1 tuple 
message per second with an average minimal radio range 
availability of about 10 seconds (due to movement of the 
users, if any).  
Using the light sensors, the mobility assessment using the 
accelerometer and gyroscope sensors of the mobile devices, 
and the performed micro-surveys providing user feed-back 
(satisfaction assessment), the illumination conditions could 
be optimised with respect to the user demands and energy 
consumption of about 30% without negative user feed-back 
and dissatisfaction.  
For the evaluation of the loss rate of BLE tuple space 
communication, a partial set-up was chosen with four bea-
cons at four different spatial positions and four mobile de-
vices here all at the same position. The results of the meas-
ured average reception rate R (loss is 100-R) show an aver-
age loss of 10% that can be achieved within a radius of about 
2m, 30% in 5m radius. Some nodes can communicate over 
larger distances up to 10m. The tuple message sending time 
interval has no significant impact on the loss rate within time 
interval [500s, 2000s] and with this (small) set-up. When the 
number of nodes within the radio range will be increased, the 
loss rate will increase, too. Broadcasting from LAN to 
WLAN did not work reliable (loss up to 50%), and even 
unicast UDP communication was not reliable via WLAN. 
This is a limitation of WLAN communication, although like 
BLE it is a broadcast medium, all device-AP communication 
is established as a peer-to-peer connection. A server has to 
simulate broadcasting by sending N:1 unicast messages. 
 
IX. 
CONCLUSION 
In this work, distributed tuple spaces were used to ex-
change data between devices providing a spatial context. 
Smart devices access the tuple spaces by tuple message 
communication using event-based agents. The communica-
tion is connectionless and ad-hoc by BLE broadcasting 
available in any Smartphone and in most embedded comput-
ers. Bi-directional connectionless communication is estab-
lished via the advertisement and scanning modes by transfer-
ring encoded tuple messages. BeeTS enables opportunistic, 
ad-hoc and loosely coupled device communication with a 
spatial context. Multiple independent tuple spaces can be 
serviced on one network node. A use-case study showed the 
suitability of the broadcast communication for distributed ad-
hoc networks preserving a spatial context lacking in other 
approaches. The spatially averaged loss rate was below 20%. 
 
REFERENCES 
[1] C. Maguire, “Attendance Tracking using Bluetooth Low Energy-
Enabled 
Smartphones”, 
University 
of 
Dublin, 
https://www.scss.tcd.ie/publications/theses/diss/2018/TCD-
SCSS-DISSERTATION-2018-015.pdf, 2018  
[2] M. Cunche, A. Boutet, C. Castelluccia, C. Lauradoux, and V. 
Roca, “On using Bluetooth-Low-Energy for contact tracing”, 
Report, Inria Grenoble Rhône-Alpes; INSA de Lyon. 2020. hal-
02878346v5  
[3] L  Reichert, S. Brack, and B. Scheuermann, “A Survey of 
Automatic Contact Tracing Approaches Using Bluetooth Low 
Energy”, Cryptology ePrint Archive, 2020. 
[4] J. Li and X. Guo, “COVID-19 contact-tracing apps: A survey on 
the global deployment and challenges”, arXiv:2005.03599, 2020. 
[5] B. Skočir, G. Papa, and A. Biasizzo, “Multi-hop communication 
in Bluetooth Low Energy ad-hoc wireless sensor networks”, 
Journal of Microelectronics, Electronic Components and 
Materials vol. 48, no. 2, 2018. 
[6] M. Nikodem and M. Bawiec, “Experimental Evaluation of 
Advertisement-Based Bluetooth Low Energy Communication”, 
Sensors, vol. 20, no. 107, 2020. 
[7] N. Davies, A. Friday, S. P. Wade, and G. S  Blair, “L2imbo: A 
distributed systems platform for mobile computing”, Mobile 
Networks and Applications, vol. 3, no. 2, pp 143-156, 1998. 
[8] S. Bosse, “Unified Distributed Sensor and Environmental 
Information Processing with Multi-Agent Systems: Models, 
Platforms, and Technological Aspects”, ISBN 9783746752228, 
Epubli, 2018. 
[9] A. Bröring, A. Remke, and D. Lasnia, “SenseBox – A Generic 
Sensor Platform for the Web of Things”, EAI MobiQuitous,  
2012.  
[10] https://www.novelbits.io/bluetooth-low-energy-advertisements-
part-1, on-line,  [accessed June 2022] 
[11] https://github/bsLab/beets, on-line, [accessed June 2022 ] 
[12] https://github.com/noble/bleno, on-line, [accessed June 2022] 
 
14
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-962-1
MOBILITY 2022 : The Twelfth International Conference on Mobile Services, Resources, and Users

