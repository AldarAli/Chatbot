Information Models for Managing Monitoring
Adaptation Enforcement
Audrey Moui, Thierry Desprats, Emmanuel Lavinal, Michelle Sibilla
IRIT, Universit´e Paul Sabatier
118 route de Narbonne, 31062 Toulouse cedex 9, France
Email: {moui,desprats,lavinal,sibilla}@irit.fr
Abstract—Integrated management should cope with numerous,
heterogeneous and complex systems in a multi-dimensional
environment. In this context, the monitoring activity should be
efﬁcient and sensitive to variations of management applications
requirements. In this paper, we deﬁne a framework which
includes three capabilities that support monitoring adaptation.
Particularly, we have deﬁned information models for the ﬁrst
two capabilities, namely conﬁgurability and adaptability. This
framework is modular enough to integrate any existing solution
that
proposes
monitoring
adaptation
decisions.
A
partial
CIM/WBEM implementation has been tested to measure the
overhead due to the management cost of the proposed approach.
Keywords—Monitoring;
Adaptation;
Information
model;
CIM/WBEM; Integrated management.
I. INTRODUCTION
The multi-level aspect of integrated management (nodes,
networks, systems, services), the dependence between hetero-
geneous components and the afﬂuence of management infor-
mation make the management activity more and more difﬁcult
to perform; indeed, new management paradigms are based
on more and more autonomous and decentralized decision-
making [14].
The efﬁciency of the monitoring activity has become a ma-
jor preoccupation in various contexts such as integrated man-
agement of complex (networked) systems or autonomic and
self-managed entities. In many cases, management paradigms
are organized with the fundamental help of the classical MAPE
loop (Monitor – Analyze – Plan – Execute) [7]. The managed
system is observed (M) and an analysis (A) is performed to
either detect or prevent failures or every relevant situations to
be interpreted. In such a case, a reactive or proactive technical
decision is taken and planned (P). Consequently, adjustment
actions are then executed (E) on the system to hopefully
improve its efﬁciency.
The quality of the control is provided by the quality of
the implementation of each of these four functions, but also
by the fullness of the interactions occurring between them.
Particularly, at the ﬁrst step of the cycle, the analysis function
relies on the quality of the information (QoI) delivered by the
monitoring mechanisms. One of the major issues is to improve
this relationship by allowing a feedback from the analysis
function to the monitoring one. This feedback constitutes a
mean by which the analysis function, according to its manage-
ment objectives, can continuously express requirements about
the information and its quality, which are provided by the
monitoring function. Dynamically taking into consideration
the variations of these management functional requirements
implies that the monitoring function has to be adaptive at
runtime.
From an operational viewpoint, performing monitoring ac-
tivities consumes several resources such as CPU, memory, en-
ergy, bandwidth, etc. This execution environment can also con-
strain the monitoring activities either directly, when resources
are – partially or fully – temporally unavailable, or indirectly
when resource consumption restrictions policies are applied
(e.g., do not allow more than 10 % of global bandwidth for
monitoring trafﬁc). Consequently, the monitoring also needs to
adapt itself to ﬁt with any particular issues, which dynamically
occur within the constrained operational environment.
Finally, a self-optimization concern may be supported by
the monitoring function to increase the level of its efﬁciency.
In this case, resulting from an introspective analysis of its
performance, some self-adjusting decisions can be taken but
enforced at the only condition that the monitoring function is
adaptable.
This paper presents work performed to model the adap-
tation enforcement management, and a partial CIM/WBEM
(Common Information Model [2] /Web-Based Enterprise Man-
agement [15]) implementation, which has been tested to
measure the overhead due to the management cost of the
proposed approach. It ﬁrstly presents our motivation and
the global context of adaptation enforcement. The third and
fourth sections present the modelling of the enforcement of
monitoring strategy and the information models for adaptation
enforcement management, respectively. The ﬁfth section then
presents the implemented prototype and the ﬁrst measures,
before concluding the paper.
II. MOTIVATION
For us, adaptive monitoring refers to the ability an online
monitoring function has to decide and to enforce, without
disruption, the adjustment of its behavior for maintaining its
effectiveness, in respect of the variations of both functional
requirements and operational constraints, and possibly for im-
proving its efﬁciency according to self-optimization objectives.
44
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

A. Managing the Adaptation Enforcement
Automating monitoring adaptation requires to manage and
to control the monitoring activity itself.
Independently of the deployment level, the monitoring activ-
ity is a process which relies on the gathering of raw, symbolic,
aggregated, transformed or ﬁltered data. Typically, gathering
is based on the possibly combined use of “polling” (i.e.,
pulling data, by periodically requesting some targeted source
or aggregator for data) and “event reporting” (i.e., receiving,
in an ad hoc, sporadic or periodic way, pushed data from a
provider or an aggregator) mechanisms.
Modifying the current behavior of a monitoring activity
will ﬁnally result in achieving actions which will enforce
adaptation decisions that aim at varying the scope and/or the
modalities of the observations.
Reaching a CPU resource consumption reduction goal will
generally lead to the decrease of the number of basic monitor-
ing mechanisms which are running; at the opposite, trying to
extend the scope of the monitoring will certainly cause new
basic monitoring mechanisms to be launched (for example,
giving the monitoring activity the possibility to question
another managed element on the monitored underlying system
gives an enlarged vision). Requiring a higher level of freshness
of the collected data will cause the intensiﬁcation of a polling
frequency while limiting the monitoring trafﬁc on the network
will result in increasing the duration between two successive
pull requests. For other purpose, like self-optimization, de-
cision can be made to temporally suspend some particular
mechanisms while considering some functional management
needs (for example in a process of diagnostics reﬁnement)
will cause a temporal prolongation of a running mechanism.
Illustrated by these previous typical situations, it can be
concluded that, in the large majority of cases, the achievement
of a monitoring adaptation will be materialized by managing
the operational cycle of basic monitoring mechanisms and
some of the parameters that can govern their behavior.
The main requirements to operate such a management of
the enforcement of an adaptation decision include:
1) The need to capture any operational query about the
adjustment of the behavior of the running monitoring
activity. It implies to offer some well-deﬁned interface
allowing the decisional level to express actions to be
done to the underlying enforcement infrastructure.
2) The necessity to verify at runtime the coherence and the
feasibility of the requested actions. In particular, they
can concern an updating of some settings governing the
behavior of one or more running monitoring mecha-
nisms. They can also affect the creation, the termination,
or more generally, the operational state change of such a
mechanism. Ensuring the consistency of the current state
of the monitoring activity is another preoccupation. This
must rely on the online availability of some information
giving a management view of the state and the behavior
of the monitoring mechanisms.
3) Finally, the ability to obtain some statistical data on each
monitoring operations may serve for limitation resource
consumption or self-optimization driven decisions mak-
ing.
In this paper, we do not focus on the process of a monitoring
adaptation decision making; we assume that it is based on any
of well-known solutions including CSP, constraints resolution,
inference engine, management policies, rules, bio-inspired
approach, etc. In a complementary way, our concern is to focus
more on the effective realization of the decided adaptation by
providing a generic framework to support the management of
this post-decision process.
B. Related Works
Numerous works, which are mainly dedicated to network
monitoring, already contributed to enhance the monitoring
adaptiveness level.
Duarte et al. [5] proposes a language for programming
conﬁgurable monitoring applications, but which is dedicated
to an SNMP/DISMAN environment; this facility is not generic
enough to be used in every management context.
Massie et al. [9], Dilman et al. [3] and Mogh´e et al. [10]
focus on ﬁnding protocol solutions and are mainly concerned
with performance criteria (RAP [10] is only concerned with
polling adaptability and Ganglia [9] provides the ability to re-
conﬁgure the monitoring mechanisms according to the newtork
context, but only for small networks).
Some of the works have designed adaptive protocol-based
solutions allowing trade-offs between performance and quality
of the information [13], which exclusively relies on push data
models. Other works target different area than newtork.
Xue et al. [16] deals with adaptive and scalable monitoring
of cluster and propose facility for switching between a light
and a heavy monitoring mode.
III. MODELLING THE ENFORCEMENT OF MONITORING
STRATEGY ADAPTATION
A. Preliminary deﬁnitions
• Monitored Elements
Both polling and event reporting mechanisms are applied
on system components.
1) for polling mechanism, these components are called
“targets” and can be seen as managed elements
or sources of pulled data: these targets can be of
different kinds:
a) a whole object (e.g., a switch on a network) or
a collection of objects (e.g., all the switches of
a particular network);
b) a
property
(e.g.,
the
operational
state
of
a(several) switch(es)) or a set of properties
(e.g., any relevant information of a(several)
switch(es));
2) for event reporting, the components are considered
as “sources” of pushed information or indications
(e.g., warnings, alerts, particular data, pre-ﬁltered
or aggregated pushed information).
45
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

With concerns of genericity, we consider targets and
sources as any relevant information related to managed
elements. Let T be the set of these components within
the scope of a monitoring activity, such as:
∀n ∈ N,
T = ⟨t1, t2, ..., tn⟩
• Basic Monitoring Mechanism
We can unify the polling and event reporting mechanisms
(respectively named as P and E) as a set of basic
monitoring mechanisms. This set is represented as M:
MT = PT ∪ ET ̸= Ø
• Mechanism Conﬁguration
Moreover, a basic monitoring mechanism must have to
consider, initially and when changes are demanded on
line, the values of a set of parameters which inﬂuence the
way this mechanism operates in relation to its associated
monitored elements. The set of these parameters will be
represented as a conﬁguration C, grouping two kinds of
parameters: some are conceptually not modiﬁable, and
the others can be modiﬁed.
• Operational State
A mechanism owns an operational state Op which in-
dicates if an active mechanism is currently running or
pending.
B. Monitoring Strategy
We deﬁne a monitoring strategy S as an association between
the mechanisms M (polling or event reporting) applied on
their respective targets, their conﬁguration C and their opera-
tional state Op:
S = (MT , C, Op) = {⟨Mt1, C1, Op1⟩ , ..., ⟨Mtn, Cn, Opn⟩}
C. Monitoring Strategy Adaptation
An adaptation will result in a monitoring strategy change:
e.g., the modiﬁcation of a temporal parameter value (for
instance the polling periodicity value), the adjunction or the
deletion of a target, the suspension or the deletion of the
monitoring operation, etc.
A monitoring strategy change will consequently modify the
monitoring activity behavior. The evolution from a strategy S
to a strategy S′ is deﬁned as an adaptation δS [1].
δS = S → S′
An evolution of this strategy is then one of the following
change (possibly combined) of the previously deﬁned set
(strategy formalization):
• The set of the mechanisms can be modiﬁed (M →
M ′) by adding or deleting a monitoring mechanism M
(polling or event reporting as well);
• The set of the targets can be modiﬁed (T → T ′) by
adding or deleting a target T associated to a monitoring
mechanism;
• The set of the conﬁguration parameters can be modiﬁed
(C
→ C′) by updating the value of one or more
conﬁguration parameters C for a monitoring mechanism;
• The value of an operational parameter can be modiﬁed
(Op → Op′) by suspension or resumption of a monitoring
mechanism.
These modiﬁcations have been explicited on Figure 3.
IV. INFORMATIONAL MODELS FOR MANAGEMENT OF
ADAPTATION ENFORCEMENT
A. Management Framework Overview
A particular environment has been deﬁned to support the
concepts of strategy and strategy adaptation. To do so, three
capabilities have been determined as the requirements that
a framework enforcing monitoring adaptation must ensure.
These interconnected capabilities can be seen on Figure 1 and
have been introduced in [12].
Configurability 
Adaptability 
E 
Polling 
Configuration 
Event Reporting 
Configuration 
Suspend 
Add 
Delete 
Update 
Resume 
Governability 
Fig. 1.
Required Framework Capabilities
1) Conﬁgurability: The conﬁgurability is deﬁned as the
capacity of the monitoring mechanisms to be dynamically
adapted: the conﬁguration parameters governing the behavior
of the monitoring mechanisms can be deﬁned initially and then
modiﬁed dynamically at runtime and without disruption when
needed to obtain the best vision of the underlying system.
Deﬁning a period parameter PollingPeriod for polling
that we can modify at runtime is an example of conﬁgurability
capability.
2) Adaptability: The adaptability is the ability to execute
the monitoring adaptation. This capability is enforced by
performing atomic adaptation operations over the underly-
ing mechanisms conﬁguration, with the objective to modify
the current monitoring strategy. Consequently, this capability
makes possible to dynamically modify at runtime the behavior
of a monitoring activity.
An example of adaptability capability is to be able to
dynamically modify the value of PollingPeriod.
3) Governability: Some intelligence is required to support
the adaptation decision: the point is to decide if and how the
monitoring activity has to be adjusted.
Piloting the adaptation operations to adjust and/or optimize
the monitoring activity is the role of the governability capabil-
ity. An adaptation decision can be taken in response to business
objectives changes or for monitoring self-optimization, or
in reaction to some constraints variations on technological
resources availability.
This capability is an interface aiming at providing the
inputs needed for the monitoring adaptation enforcement (the
adaptation decisions). According to the previous example,
46
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

specifying the rule which will trigger the modiﬁcation of the
value of PollingPeriod is a concern of the governability
level.
B. An Informational Model for Adaptability
We determined that a monitoring strategy is then a view at a
particular moment of a set of monitoring mechanisms applied
on their respective targets, their conﬁguration parameters, their
operational state, and optionally a set of statistical information
data. Figure 2 sums up the concept of strategy.
Monitoring Mechanism
Monitoring strategy
*
Conﬁguration
1
Parameter
*
Operational State
Polling
Event Reporting
1
ManagedElement
1
1..*
applied on
(target)
came from
(source)
Statistics
1
Fig. 2.
Informational Model for Monitoring Strategy
Adaptability is needed to enforce the adaptation. Therefore,
we have deﬁned ﬁve basic operators, which may be identiﬁed
as service interfaces which support at runtime the recon-
ﬁguration enforcement of the monitoring activities. These
operators are atomic operations, which can also be combined
as agregations.
1) Adjunction
A mechanism, polling or event reporting, can be added
by using the A operator: the conﬁguration of the
mechanism is required; the operational state will be
automatically set to “active” (and the mechanism will be
executed once created); and the managed element(s) on
which the mechanism applies (target(s)) is(are) required.
2) Deletion
A mechanism, polling or event reporting, can be deleted
by using the D operator.
3) Update
A conﬁguration of a mechanism, polling or event report-
ing, can be updated at runtime, thanks to the U operator.
This operator makes possible the modiﬁcation of whole
or part of its current conﬁguration (all the modiﬁable
parameters).
Moreover, the list of the monitored elements can be
modiﬁed: a target can be added to or removed from this
list of targets at runtime and without disruption.
4) Suspension
A polling mechanism can be used more than one time.
Rather than deleting the mechanism, it can be relevant
to suspend it, thanks to the S operator. Then the polling
mechanism can be used again later if needed.
5) Resumption
The resumption, performed with the R operator, cor-
responds to the reactivation of a previously suspended
polling mechanism.
Figure 3 deﬁnes the inputs and outputs of these opera-
tors, in order to clarify their operational use.
Algorithms have been writen to take into account every
possible constraints at runtime.
• Two levels of parameters have been determined. Selector
parameters deﬁne the global behavior of the mecha-
nism (e.g., the stop mode describes the way a polling
ends); according to the value of this parameter, additional
parameters need to be ﬁlled to complete the behavior
description (e.g., when the stop mode is set to “Iterative”,
the number of needed iterations has to be indicated). The
algorithms check the coherence of the new value with
these particularities;
• The new values for the parameters have to be validated:
e.g., coherence of the new value and feasibility at runtime
(for instance, the “MaxIteration” cannot be adjusted from
20 iterations to 10 iterations if the running polling has
already performed 13 iterations), etc.
C. Informational Models for Conﬁgurability
The polling conﬁgurability and its modiﬁable and non-
modiﬁable parameters have already been introduced in more
details in [11] and the main ones are recalled in Figure 4.
Selector 
parameter
Execution 
Mode (enum)
Possible value
Other parameter
AnswerDelay (ulong)
Periodic
PollPeriod (ulong)
RequestDelay (ulong)
NoOverlapping
Unlimited
Iterative
Temporal
StopMode
(enum)
MaxIteration (ulong)
TemporalValue (ulong)
Unsuccessful 
StopMode
(enum)
Off
UnprodThreshold
UnprodRate
UnprodOpThreshold (ushort)
UnprodOpRate (ulong)
Non-modiﬁable parameter
Modiﬁable parameter
Reception 
Mode (enum)
Silence
WaitingTime (ulong)
Burst
Duration (ulong)
OccThreshold (ulong)
Heartbeat
NotiﬁcationPeriod (ulong)
TemporalApprox (ulong)
Event Reporting
Polling
Fig. 4.
Conﬁguration Parameters for Monitoring Mechanisms
• The execution mode (ExecutionMode) selects the
way
the
polling
behaves:
the
polling
operations
can be launched either periodically, or in a non-
overlapping mode: in the former case, the polling period
(PollPeriod) parameter deﬁnes the periodicity; in the
latter one, a time interval (RequestDelay) is needed to
ﬁx the time between the end of one operation and the
beginning of the next one;
• The termination mode (StopMode) is the way the polling
ends: the polling can indeed be unlimited or limited by
a maximum number of occurrences (MaxIteration) or
by a predeﬁned duration (TemporalValue);
47
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

(MT , C, Op)
A(mtx,cx)
−→
(M ′
T ′, C′, Op′) with (M ′
T ′, C′, Op′) = (MT , C, Op) ∪ {mtx, cx, running}
(MT , C, Op)
D(mtx,cx)
−→
(M ′
T ′, C′, Op′) with (M ′
T ′, C′, Op′) = (MT , C, Op) − {mtx, cx, running}
(MT , C, Op)
U(mtx,cx)
−→
(MT , C′, Op) with C ̸= C′
(MT , C, Op)
S(mtx)
−→ (MT , C, Op′) with Opx = pending
(MT , C, Op)
R(mtx)
−→
(MT , C, Op′) with Opx = running
Fig. 3.
Adaptability Operators: Formal Representation
• Let us consider that the polling is iteratively bounded:
if a polling operation succeeds before the maximum
waiting time (AnswerDelay) elapsed, the request is
said productive; otherwise, when the answer is lost or
delayed, then the request is said unproductive. An au-
tonomous termination mode (UnsuccessfulStopMode)
can be deﬁned on an unproductive operation maximum
rate (UnprodOpRate) or on a successive unproductive
operation threshold (UnprodOpThreshold).
The event reporting conﬁgurability is more speciﬁc. Accord-
ing to some particular issues, it can be interesting to detect how
the notiﬁcations or events are received (their behavior) inde-
pendently of their content. Indeed, the notiﬁcations reception
frequency can be relevant of any particular issue occurring on
the managed system.
Therefore, the reception mode (ReceptionMode) parameter
has been deﬁned in order to select the management mode of
the reception frequency of the notiﬁcation operations. Three
interesting situation proﬁles have been identiﬁed:
• No notiﬁcation are received during a ﬁxed time interval.
This situation is called “silence”, and can have two
possible interpretations: the system works correctly and
no warning or alert have to be raised; or, one (or more)
notiﬁcation(s) was(were) supposed to be received but
did not make it, so an issue may have occurred on the
system (e.g., the notiﬁer may be on failure). An additional
parameter is required to ﬁx the maximum waiting time
(WaitingTime) of a notiﬁcation reception;
• Too many notiﬁcations are received in a ﬁxed time
interval. This behavior is called “burst” and can also be
signiﬁcant of a system issue. Two extra parameters have
to be deﬁned to manage it: the duration (Duration) on
which the calculation is performed and the occurrence
threshold (OccThreshold) which will trigger the detec-
tion of a sporadic behavior;
• The reception of notiﬁcation operations can be peri-
odic. This situation is called heartbeat and is deﬁned
with two additional parameters: the notiﬁcation period
(NotificationPeriod) and a temporal approximation
(TemporalApprox) which allows a permitted temporal
variation (e.g., due to trafﬁc congestion).
Figure 4 makes a list of the reception mode parameters
which describe how the notiﬁcations are received by the
consumer. Additionally, other typical parameters should be
deﬁned to describe how notiﬁcations should be produced,
ﬁltered and delivered to the consumer when it subscribes to
indications or pushed data.
V. PROTOTYPE OVERVIEW
In order to prove the feasibility of our approach and to
measure the overhead due to the adaptation management
(e.g., an increased execution time), we have implemented a
prototype in an CIM/WBEM environment.
A. Technical Environment
CIM/WBEM are Distributed Management Task Force [4]
standards which include a device and service management
architecture, an object-oriented information model for describ-
ing any type of managed resource and a set of interfaces
for accessing them [6]. In our adaptive monitoring service
prototype, we provided a CIM representation of our conﬁgura-
bility information models and we implemented the adaptability
operators using WBEM interfaces. The CIM server is provided
by OpenPegasus, an open source implementation of DMTF
standards. As for the CIM clients, we used the Java SBLIM
API.
1) CIM Server: The CIM/WBEM server is a data supplier
and stores into a repository the monitored CIM targets in-
strumented via the integration modules (gateways between the
standard or proprietary monitoring protocols and CIM). It also
enables the storage and the manipulation of the conﬁguration
parameters included in the monitoring class. Finally, it enables
the notiﬁcations of CIM indications toward the subscribers.
Therefore, the conﬁgurability level has been instrumented
on a CIM server, which is executed on a virtual machine
running Linux Ubuntu TLS 8.04 ”Hardy Heron”. The virtual-
ization system is VirtualBox r73507.
2) CIM client: The CIM/WBEM client takes the conﬁg-
uration from the server initially and when a readjustment is
achieved. It acts too as a WBEM listener and subscribes on
the server in order to receive every CIM indications relative
to an update of a CIM instance of the monitoring class.
The modiﬁcation of the monitoring mechanisms (adaptabil-
ity level) implies the use of a CIM client. It allows the dynamic
management of the proposed CIM models by the adjunction
of operators to see, modify, add and delete CIM objects and
associations. The adaptability level is then running on the
physical machine hosting the virtual machine. This physical
machine runs Mac OS X 10.5.8 ”Leopard”.
48
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

B. Temporal Overhead due to Adaptation Management
All the presented ﬁrst results have been obtained by comput-
ing the average of a hundred measures. The host machine runs
the CIM client and the virtual machine runs the CIM server.
The needed CIM objects (targets, polling) are the only objects
registered onto the CIM repository. The polling mechanism
is the only mechanism that has been measured so far. The
measures lead to a preliminary analysis, which will have to
be enhanced.
Figure 5 shows the execution duration (in milliseconds)
needed for the execution of each adaptability operator in the
case of a polling mechanism (the only mechanism measured
so far). These measures are the following:
ADD
699 ms
DELETE
1004 ms
RESUME
353 ms
SUSPEND
110 ms
UPDATE
– selector parameter
– sub-parameter
– global update
– target adjunction
– target deletion
141 ms
193 ms
150 ms
374 ms
304 ms
Fig. 5.
Execution Duration for Adaptability Operators Execution
• ADD: the duration between the time when the A operator
is invoked (in order to add a two targets polling operation)
and the time when the polling operationally begins;
• SUSPEND: the duration between the time when the S
operator is invoked (suspension of the polling operation)
and the time when the polling is operationally suspended;
• RESUME: the duration between the time when the R op-
erator is invoked (resumption of the previously suspended
polling operation) and the time when the polling is
operationally resumed (according to the context registered
while it was suspended);
• UPDATE: the duration between the time when the U
operator is invoked and the time when the polling takes
into account the modiﬁcation value. Five kinds of update
are measured:
– Selector parameter: the modiﬁcation of the value of
the ExecutionMode parameter;
– Sub-parameter: the modiﬁcation of any other modiﬁ-
able conﬁguration parameters. It implies a test on the
relative selector parameter: e.g., the polling period
can be modiﬁed only if the execution mode selector
parameter is set to “Periodic”;
– Global update: a global modiﬁcation of the polling
conﬁguration: more than one parameter will be up-
dated;
– Target adjunction: the adjunction of a third target to
the polling;
– Target deletion: the deletion of the third target of the
polling;
• DELETE: the duration between the time when the D
operator is invoked (deletion of the two targets polling
operation of the CIM server) and the time when the
polling is totally removed from the CIM server.
As shown in Figure 5, the execution duration of a polling
deletion is the longest execution duration (1004 ms), followed
by the polling adjunction (699 ms). From this, it appears that
the suspension and resumption operators are really interesting
when a polling has been added: a combined suspension and
resumption lasts 463 ms, while a combined deletion and
adjunction lasts 1703 ms.
An adaptation at runtime can be enforced fastly:
• A selector parameter (the execution time) can be modiﬁed
in 141 ms;
• A sub-parameter can be modiﬁed in 193 ms: the extra
time is indeed due to a test over the selector parameter
to check if the parameter can be modiﬁed for consistency
ensuring purpose;
• A global update (the modiﬁcation of the whole polling
conﬁguration) lasts 150 ms;
• The adjunction and deletion of a polling target lasts 374
ms and 304 ms, respectively.
VI. CONCLUSION AND FUTURE WORK
This paper presented a generic monitoring framework that
aims at enforcing the monitoring adaptation at runtime and
without any disruption. When the adaptation is performed, the
monitoring is made the less intrusive possible, by efﬁciently
adjusting itself to every situation variation (business objectives
changes, monitoring self-optimization, constraints variations
on resources).
Following a control-oriented viewpoint, three capabilities
have been identiﬁed within the framework: conﬁgurability,
adaptability and governability. To ensure conﬁgurability, we
have deﬁned, for each type of basic mechanisms, generic
conﬁguration parameters: some are modiﬁable, the others are
not. These speciﬁcations are independent of any management
protocol; the conﬁguration has been integrated on a CIM
server. To ensure adaptability, the adaptation operators have
been formalized and implemented on a CIM client thanks to
the Java SBLIM API.
The resulting framework is a basis for the decision-making
level as it is generic enough to support any solutions providing
adaptation decisions.
Future works will tend now to integrate the governability
capability to the presented framework. This framework is a
basis which support monitoring adaptation enforcement. Inte-
grating governability means controling the adaptation decision.
A choice has to be done to determinate what is the best
solution to enforce the governability capability, according to
the underlying framework and needs. Moreover, we intend to
test the complete prototype in a real managed environment.
REFERENCES
[1] L. Chung and N. Subramanian, ”Adaptable Architecture Generation
for Embedded Systems,” Journal of Systems and Software, 71(3),
(2004), pp. 271–295.
49
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

[2] DMTF,
”Common
Information
Model
(CIM)
Infrastructure”
speciﬁcation
v.2.6.0
[online],
(2010)
[retrieved:
May,
2012],
http://www.dmtf.org/standards/cim.
[3] M. Dilman and D. Raz., ”Efﬁcient Reactive Monitoring,” Infocom
2001, 2, (April 2001), pp. 1012–1019.
[4] DMTF Standards body, ”Distributed Management Task Force, Inc.”
[online], (2012) [retrieved: May, 2012], http://www.dmtf.org.
[5] E.P. Duarte Jr., M.A. Musicante, and H.H. Fernandes, ”ANEMONA:
a Programming Language for Network Monitoring Applications,”
Internat. Journ. of Net. Managem., 18(4), (August 2008).
[6] Chris Hobbs: ”A Practical Approach to WBEM/CIM Management,”
Auerbach, 2004, 344p.
[7] J.O. Kephart and D.M. Chess, ”The Vision of Autonomic Comput-
ing,” Computer, 36(1), (January 2003), pp. 41–50.
[8] A. Lahmadi, ”Performances des fonctions et architectures de super-
vision de r´eseaux et de services,” Doctorat de l’Universit´e Nancy II,
(Dec. 2007).
[9] M.L. Massie, B.N. Chun, and D.E. Culler, ”The Ganglia Distributed
Monitoring System: Design, Implementation and Experience,” Par-
allel Computing, 30(7), (2004), pp. 817–840.
[10] P. Mogh´e, and M.H. Evangelista, ”RAP – Rate Adaptive Polling
for Network Management Applications,” in Proceedings of IEEE
NOMS’98, (1998), pp. 395–399.
[11] A. Moui, T. Desprats, E. Lavinal, and M. Sibilla, ”Managing
Polling Adaptability in a CIM/WBEM Infrastructure,” Internat.
DMTF Academic Alliance Workshop on Systems and Virtualization
Management: Standards and New Technologies (SVM10), (2010),
pp. 1–6.
[12] A. Moui, and T. Desprats, ”Towards Self-Adaptive Monitoring
Framework for Integrated Management,” 5th IFIP Internat. Con-
ference on Autonomous Infrastructure, Management and Security
(AIMS 2011), (2011), pp. 160–163.
[13] A.G. Prieto, and R. Stadler, ”Controlling Performance Trade-offs in
Adaptive Network Monitoring,” Proceedings of IM 2009, (2009),
pp. 359–366.
[14] N. Samaan and N. Karmouch, ”Towards Autonomic Network Man-
agement: an Analysis of Current and Future Research Directions,”
Communications Surveys & Tutorials, IEEE, 11(3), (2009), pp. 22–
36.
[15] DMTF:
”Web-Based
Enterprise
Management”
spec-
iﬁcations
[online],
(2012)
[retrieved:
May,
2012],
http://www.dmtf.org/standards/wbem.
[16] Z. Xue, X. Dong, and W. Wu, ”AOCMS: An Adaptive and Scalable
Monitoring System for Large-Scale Clusters,” Proc. APSCC, (2006),
pp. 466–472.
50
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-219-6
ADAPTIVE 2012 : The Fourth International Conference on Adaptive and Self-Adaptive Systems and Applications

