Bilateral Multi-Issue Negotiation Between Active Documents
and Execution Devices
Jerzy Kaczorek1, Bogdan Wiszniewski2
Department of Intelligent Interactive Systems
Faculty of Electronics, Telecommunications and Informatics, Gdansk University of Technology
Gdansk, Poland
Email: 1jkaczorek@gmail.com, 2bowisz@eti.pg.gda.pl
Abstract—Mobile document-agents are often in conﬂict with
execution devices when attempting to perform activities of the
business process they implement, since preferences of device
owners may change depending on their current location and the
actual class of the device in use. The paper proposes a bilateral
negotiation mechanism based on a simple bargaining game that
can effectively resolve such conﬂicts without any third party
support.
Keywords–eCollaboration; Mobile computing.
I.
INTRODUCTION
Individuals, who collaborate in a network organization,
interact by exchanging electronic documents that constitute
units of information and at the same time units of interaction.
This dichotomy has become apparent with the advent of
active documents, often implemented as software agents. In
particular, a mobile interactive document (MIND) can migrate
over the network and carry both, the content to be worked
on and speciﬁcation of its migration path with activities and
transitions [1]. Each activity represents a piece of work to be
performed by the user with the incoming document content,
whereas transition indicates where the outgoing document (or
documents), constituting a result of the activity, should migrate
next. This idea is outlined in Figure 1; activities are represented
by rectangles and transitions by arrows.
LWE
LWE
LWE
LWE
Figure 1. Mobile documents with embedded workﬂows
The process is started by the document originator, who
sends the MIND document to the ﬁrst collaborator indicated
in its workﬂow. Each collaborator may interact with the content
of the received MIND document using any currently available
personal device that can receive and send email messages –
from simple cellphones to smartphones or tablets to laptops or
workstations. Each device has a lightweight workﬂow engine
(LWE), implemented as an email client, which is capable of
unpacking and packing the documents and sending them to
other workers of the organization using email as the transport
layer [1].
A. Document execution context
A single activity performed in the execution context pro-
vided by the device, on which the mobile document is currently
located, depends on the policy of the document originator,
operational characteristics of the currently used worker’s de-
vice, and preferences of the knowledge worker responsible for
the current processing step. Proactive MIND documents may
handle that in several ways: activity may be performed auto-
matically by the embedded document code, if allowed by the
worker operating his/her device, may be performed manually
by the worker using local services or tools installed on that
device, also the device may call some external (third party)
service requested by the document, if Internet connection is
available at the time of executing the activity. This task is not
trivial – as execution contexts may vary, because the same
worker may use different devices when performing activities
of the same business process, e.g., using a workstation when
in ofﬁce, a smartphone during the travel between ofﬁce and
home, and a laptop at home. Moreover, user preferences for the
same device may depend on its current location, e.g., when out
of ofﬁce and accessing an untrusted network, and often con-
ﬂicting with the document-agent policies. Finally, document-
agents arriving to the particular device may have incomplete
information on the speciﬁc execution context provided by the
device.
Further in the paper, we propose negotiation to provide
a solution to the problem of reaching an agreement between
the document-agent and its execution device – even when the
parties are in conﬂict and have incomplete information on
each other preferences on how the current activity should be
performed. This is the novel concept in the area of document
engineering [2].
B. Negotiation model
Offers exchanged by negotiating parties are m-vectors of
items o = ⟨item1, item2, . . . , itemm⟩. Each itemi, where
i = 1, . . . , m, can be assigned a value of any attribute-speciﬁc
type chosen from the set of values: Ai = {ai1, ai2, . . . , ain},
where in = |Ai|. Operator | | denotes cardinality of its
argument set, Ai represents the i-th attribute of the negotiated
service. Set AT of all m-vectors AT = ×m
i=1Ai is called
a space of offers. Based on that we deﬁne offer oj ∈ AT ,
where j = 1, . . . , |AT |, as the vector of attribute values
oj = ⟨vj
1, vj
2, . . . , vj
m⟩, where vj
i ∈ Ai. Each single attribute
value has an assigned numerical value, which reﬂects utility of
the related attribute value. Utility of attribute value aik ∈ Ai,
52
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

for ik = 1, . . . , |Ai|, is calculated by function ui : Ai → N.
Each party has its own set of functions {u1, u2, . . . , um} to
calculate utility of any item in the offer. Given that, utility of
each offer oj may be calculated as U(oj) = Pm
i=1 ui(vj
i ),
where j = 1, . . . , |AT |. Throughout the rest of the paper
we will use values of the utility function normalized against
maxj(U(oj)), so that U : AT → (0, 1]. Formally, the problem
of the paper is to ﬁnd the best offer oc ∈ AT that is acceptable
to the document-agent P1 and the execution device P2, given
their utility functions, U1 and U2. In other words oc, called
the contract between P1 and P2, maximizes their utility, i.e.,
oc = arg max
o∈AT U1(o)U2(o).
(1)
Since neither party knows its opponent’s utility function,
nor is willing to reveal its own, exchanging of offers and
counter-offers is needed to systematically search space AT .
We use for that an alternating-offer protocol, modeled in the
paper as the simple bargaining game (SBG).
The rest of the paper is structured as follows. Section II
introduces the method of representing non-functional attributes
that are used to build offers exchanged by negotiating parties.
The game-theoretic model of that process is deﬁned in Sec-
tion III. Next, in Section IV results of the simulation exper-
iments are provided, which show that despite of conﬂicting
preferences and incomplete information on each other, the
document and the device may reach a satisfying solution. Sec-
tion V compares the proposed method to the related proposals
in the recent literature, and Section VI concludes the paper.
II.
BARGAINING SETS
We have implemented the generic bilateral negotia-
tion model introduced above for m = 5 attributes, thus
AT = ×5
i=1Ai, i = 1, .., 5. Each set Ai contains attribute
values that specify respective options of the execution context.
1) Performer
of
the
activity
(A1):
Disjoint
subsets
D, W, J ⊂ A1 contain values indicating respective contexts
where the document is allowed to execute automatically on the
device (D), where it is not able or is not allowed to execute
on its own, so only the user (worker) can perform the activity
on its content (W), or where the activity is supposed to be
executed jointly by the document and the worker (J).
2) Availability of network resources (A2): Disjoint subsets
S, E, I ⊂ A2 contain values indicating respective contexts
where the execution device is actually separated from its
host organization, i.e., no network connection exists or is not
allowed by the device owner (S), is connected from outside
of its host organization (E), or alternatively from inside of it
(I).
3) Performance of network resources (A3): Disjoint sub-
sets U, R, M, A, N ⊂ A3 contain values indicating respective
contexts where the parameters of the network connection (if
any) are unknown (U), or optionaly, wireless (R), telephone
modem (M), asymmetric digital subscriber line (ADSL) mo-
dem (A), or twisted pair (wire) connection (N), is used by the
execution device.
4) Security of the network connection (A4): Disjoint sub-
sets P, K, T, C ⊂ A4 contain values indicating respective
contexts where the connection (if any) is not secure at all (P),
uses wireless (if any) protected by the access key (K), can
connect to remote sites using the secure transfer protocol (T),
or combines the latter two mechanisms to provide the most
secure connection possible (C).
5) Reliability mechanisms supporting interaction (A5):
Disjoint subsets L, B, F, H ⊂ A5 contain values indicating
respective contexts where no support is provided by the docu-
ment embedded functionality or the execution device system to
protect the document content from user errors (L), some back-
up support is provided by the autosave option (B), failsafe
option is provided by the acceptance button, i.e., no changes
to the content are permanent until accepted by the worker (F),
or high reliability can be provided by combining the later two
with the “undo” button and the automatic check of the content
performed by the document itself (H).
Note that based on the above model each single vector (of-
fer) o ∈ AT speciﬁes in fact a concrete, multi-aspect execution
context that may be negotiated by the MIND document and
its currently available execution device.
A. Multi-option offers
In our model, the space of offers AT is discrete, as values
of the respective attributes constituting each offer are selected
from enumerable sets of available options. Tables I–V illustrate
our approach to modeling of multi-option (multi-issue) offers.
Speciﬁc options that contribute to each respective attribute
value vj
i ∈ Ai, are represented by binary ﬂags. The label of
each respective option considered for the given attribute value
is listed in the header of each corresponding table, values ’0’
and ’1’ listed in each respective column below the option label
indicate options ’is’ or ’is not’ present when calculating value
of the given attribute; if the ﬂag may assume two possible
values in the context deﬁned by the given table row we denote
that by the regular expression [0, 1]. The respective attribute
values are generated by combining ﬂag values in each row,
which we also specify with regular expressions, listed in the
rightmost column of each corresponding table. The ﬁrst letter
denotes the respective subsets of Ai, explained in p.II-1–II-5,
while digits indicate each meaningful combination of option
ﬂags, considered in our current implementation of MIND.
Option values for attribute A1 are listed in Table I and
specify potential performers required by the document to
complete its activity: the Worker (Wkr) using it, the Embedded
Service (EmS) brought by it to the device, some External
Service (ExS) the device should allow it to call, any Local Tool
(LoT) the document may want to use, and any Local Service
(LoS) the document may want to access, when interacting with
the local operating system of the device. Combinations of these
options’ ﬂags distinguish in total nine different subsets of A1,
labeled with symbols listed in the rightmost column of Table I.
TABLE I. EXECUTION CONTEXT OPTIONS FOR ’PERFORMER’
Wkr
EmS
ExS
LoT
LoS
Option labels
0
1
[0,1]
0
[0,1]
D[1-3]
1
0
[0,1]
1
[0,1]
W [1-2]
1
1
[0,1]
[0,1]
[0,1]
J[1-4]
For example, a proactive document that intends to perform
its activity without interacting with the worker using the
execution device (Wkr = 0), only by the means of its
embedded functionality (EmS = 1) and some external service
(ExT = 1), would not need any local tool (LoT = 0) or
53
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

service (LoS = 0) installed on the device; this particular
’performer’ attribute value ’01100’ would be labeled with D3
in our model.
Option values for attribute A2 are listed in Table II;
they specify various resources that should be available to the
document when performing its activity on the device. The
device connected from inside of the worker’s organization has
a Local IP (LIP), or otherwise an External IP. The Speciﬁc
Browser (SpB) required by the document may be available on
the device, or just Any Browser (AnB). Similarly, the Speciﬁc
Tool (SpT) requested by the document may be provided by
the local operating system, or just any Substitute Tool (SuT).
Moreover, the device may be equipped with the Full Keyboard
(FKb), or alternatively a smaller set of Selection Buttons
(SeB) can be provided. Combinations of these options’ ﬂags
distinguish in total 22 different subsets of A2, labeled with
symbols listed in the rightmost column of Table II.
TABLE II. EXECUTION CONTEXT OPTIONS FOR ’AVAILABILITY’
LIP
EIP
SpB
AnB
SpT
SuT
FKb
SeB
Option labels
0
0
0
0
[0,1]
[0,1]
[0,1]
[0,1]
S[1-8]
0
1
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
E[1-7]
1
0
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
I[1-7]
For example, a proactive document that is ready to perform
its activity on the device connected from outside of its host
organization (LIP = 0 and EIP = 1) may not care about
the type of browser (SpB = [0, 1] and AnB = [0, 1]), and
assumes no other support from the local system (SpT =
SuT = 0) nor the device (FKb = SeB = 0); four possible
’availability’ attribute values ’01**0000’ would be considered
equal and labeled with E1 in our model.
Option values for attribute A3 are listed in Table III and
specify performance aspects of the execution device during
the current activity. The connection may be Wired (Wre), or
using a TV Cable or telephone Line (C/L), the plain Telephone
Modem (TMo), or any Wireless (Wrs) network within the reach
of the device. The device’s processor (CPU) may be above the
average speciﬁed by the document, as well as the device may
provide more memory (RAM) as the minimum required by the
document. Combinations of these options’ ﬂags distinguish in
total 20 different subsets of A3, labeled with symbols listed in
the rightmost column of Table III.
TABLE III. EXECUTION CONTEXT OPTIONS FOR ’PERFORMANCE’
Wre
C/L
TMo
Wrs
CPU
RAM
Option labels
0
0
0
0
[0,1]
[0,1]
U[1-4]
0
0
0
1
[0,1]
[0,1]
R[1-4]
0
0
1
0
[0,1]
[0,1]
M[1-4]
0
1
0
0
[0,1]
[0,1]
A[1-4]
1
0
0
0
[0,1]
[0,1]
N[1-4]
For example, a proactive document accessing only a wire-
less network (Wre = C/L = TMo = 0 and Wrs = 1) during
its current activity, accepting less powerful CPU (CPU = 0)
but consuming RAM above average (RAM = 1) would have
its ’performance’ attribute value ’000101’ labeled with R2 in
our model.
Option values for attribute A4 are listed in Table IV and
specify security aspects of the current activity. Data can be
Securely Transferred (SeT) if the remote site provides HTTPS.
Moreover, if the device uses wireless connection its security
may be improved if the network is protected by the Access
Key (AcK). The document may also be Digitally Signed (DSg),
and the local system of the device may be protected by some
Anti-Virus (AnV) tool. Combinations of these options’ ﬂags
distinguish in total 16 different subsets of A4, labeled with
symbols listed in the rightmost column of Table IV.
TABLE IV. EXECUTION CONTEXT OPTIONS FOR ’SECURITY’
SeT
AcK
DSg
AnV
Option labels
0
0
[0,1]
[0,1]
P [1-4]
0
1
[0,1]
[0,1]
K[1-4]
1
0
[0,1]
[0,1]
T [1-4]
1
1
[0,1]
[0,1]
C[1-4]
For example, a proactive document not requiring a secure
transfer for its data (SeT = 0) but expecting the wireless
network protected by the access key (AcK = 1), with its
content digitally signed (DSg = 1) and the local system
protected with some antivirus software (AnV = 1) would
have its ’security’ attribute value ’0111’ labeled with K4 in
our model.
Option values for attribute A5 are listed in Table V and
specify reliability aspects of the operations performed on
the document content during the activity. If the Acceptance
Button (AcB) is provided the user can decide on permanence
of the document content modiﬁcations. The Autosave Mode
(ASv) provided by the related tool or service can prevent
the user from loosing accidentally the content entered so
far. Functionality providing any Automatic Check (ACh) of
the content being entered by the worker may improve its
correctness, whereas the Undo Button (UdB) would improve
comfort of work of the worker and further reduce the rate of
errors he/she can make when modifying the document content.
Combinations of these options’ ﬂags distinguish in total 16
different subsets of A5, labeled with symbols listed in the
rightmost column of Table V.
TABLE V. EXECUTION CONTEXT OPTIONS FOR ’RELIABILITY’
AcB
ASv
ACh
UdB
Option labels
0
0
[0,1]
[0,1]
L[1-4]
0
1
[0,1]
[0,1]
B[1-4]
1
0
[0,1]
[0,1]
F [1-4]
1
1
[0,1]
[0,1]
H[1-4]
For example, if the proactive document performs the
activity entirely on its own, it may reasonably expect the
device to provide just the acceptance button (AcB = 1 and
ASv = ACh = UdB = 0), to allow the worker to accept
the concluded activity and send it to the next activity of its
workﬂow. The related ’reliability’ attribute value ’1000’ would
be labeled with F1 in our model.
B. Bargaining over option trees
Realistically, negotiating parties will continue choosing
offers from a certain subset of offers CB ⊂ AT , which we
call the bargaining set. The range of options, available to the
particular document-agent in the given execution context, is
determined by the type of a personal device currently in use by
the worker. In other words, the device class deﬁnes a concrete
bargaining set content. We distinguish ﬁve basic classes of
devices in the current implementation of MIND.
54
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

1) Workstations: They are immobile and used mainly at the
user’s workplace (in ofﬁce) or at home. If used in ofﬁce they
are usually wired from inside to the organization’s network,
have access to various secure services, offer reliable interfaces
and have relatively high computational power. If used at home
they offer the similar level of service, except for network
connections that may be external to the organization – if no
virtual private network (VPN) connection is possible – and
may use various types of modems.
2) Laptops: Performance of their hardware makes them
not less powerful than workstations, but owing to their ability
to access networks in many ways, including wire, WiFi, and
modems, they are more versatile. The only distinction that may
be taken into account when characterizing execution contexts
they provide is the software they use. If the laptop is a
private property of the worker, it may lack some proprietary
software tools provided by the organization to its workers, so
sometimes substitute tools may have to be used to perform
speciﬁc activities on the document content – especially when
performed from outside of the organization.
3) Tablets: They usually have less computational power
than laptops, and are less versatile, due to the limited range
of networking solutions they support (embedded WiFi cards
or/and ADSL modems). Some specialized software (local tools
or services) required to handle properly the content of the
document-agent may be unavailable, what can affect results
of the activity to be performed.
4) Smartphones: Although their recent technological ad-
vances are impressive, they may lack (like tablets) speciﬁc
local tools or services required to properly process the content
brought to the device by the document-agent. These devices
also slightly differ from tablets in the networking solutions
they support – since the telephone modem may be used as the
alternative to WiFi. Reliability of interaction is usually slightly
reduced compared to tablets, due to their smaller screen sizes.
5) Cellphones: They are the weakest execution devices,
although they can support most elementary execution scenarios
performed by workers on the document content, e.g., simple
form ﬁlling or modifying/accepting simple text prepared by
someone else. These operations can be performed if the
cellphone currently in use by the worker is able to read email
messages, usually via the cellular network.
In Table VI, we specify bargaining sets for various classes
of devices listed above. The range of option values of the
ﬁve attributes in our current MIND implementation reﬂects
the speciﬁcity of each device characterized above, which is
connected to some network and willing to use it during the
entire activity to be performed.
TABLE VI. BARGAINING SETS FOR EXECUTION DEVICES
Bargaining set:
Attribute Ai value sets/subsets
device
1
2
3
4
5
C1: workstation
A1
E ∪ I
M ∪ A ∪ N
P ∪ T
A5
C2: laptop
A1
E ∪ I
A3 − U
A4
A5
C3: tablet
A1
E[4-6]∪I[4-6]
R ∪ A
A4
A5
C4: smartphone
A1
{E3, I3}
R ∪ M
A4
L
C5: cellphone
A1
E[1-2]
M[1-2]
P ∪ T
{L1}
Notice that the range of offers which may be exchanged
during negotiation between the document-agent and the device
of any particular class is limited, i.e., C1, .., C5 are rather
small subsets of AT . Either negotiating party, the document
and the device, selects offers from the corresponding set
Ci independently, with regard to its own valuation of each
single offer. The alternating-offer protocol assumed by MIND
requires parties to individually sort all offers from the relevant
bargaining set in the order implied by that valuation. The
ordering of offers preferred by each party is represented by
the related option tree.
Consider two parties, a document-agent and a laptop,
negotiating over C2; let it consist of just ﬁve offers:
o1
=
< D3, E1, A4, T4, H3 >,
o2
=
< D3, E1, M4, T4, H3 >,
o3
=
< D3, E1, R2, K4, F1 >,
o4
=
< D3, E1, R4, C4, H1 >,
o5
=
< D3, I1, N4, T4, H4 > .
Detailed interpretation of the example offer o3 attribute
values has been presented before in connection to Tables I-V,
while the valuation and preferences of all options negotiated
by the document and the device are shown in Figures 2 and 3.
document, external service  
external IP
local IP or VPN
HTTPS, 
digital 
signature, 
antivirus
acceptance 
button, autosave, 
automatic check, 
undo
performer:
availability:
performance:
security:
reliability:
HTTPS, 
digital 
signature, 
antivirus
acceptance 
button, autosave, 
automatic check  
ADSL, excess 
memory & 
processor
HTTPS, 
digital 
signature, 
antivirus
acceptance 
button, autosave, 
automatic check  
WiFi, excess 
memory & 
processor
HTTPS, 
PSK, digital 
signature, 
antivirus
acceptance 
button, 
autosave
WiFi, excess 
memory
PSK, digital 
signature, 
antivirus
acceptance 
button
phone modem, 
excess memory 
& processor
wire, excess 
memory & 
processor
[3]
[1]
[6]
[1]
[5]
[4]
[1]
[1]
[3]
[3]
[1]
[3]
[3]
[1]
[1]
[2]
[2]
[3]
U1(o1)=0.93
U1(o2)=1.00
U1(o3)=0.79
U1(o4)=0.71 U1(o5)=0.64
D3
 I1
E1
M4
A4
R2
R4
N4
T4
T4
K4
C4
T4
H3
F1
H4
H3
H1
Figure 2. Example option tree of the proactive document
document, external service
external IP
 WiFi, excess 
memory
WiFi, excess 
memory & 
processor
ADSL, excess 
memory &
processor
PSK, digital 
signature, 
antivirus
HTTPS, 
PSK, digital 
signature, 
antivirus
HTTPS, 
digital 
signature, 
antivirus
HTTPS, 
digital 
signature, 
antivirus
acceptance 
button
acceptance 
button, 
autosave
acceptance 
button, autosave, 
automatic check
acceptance 
button, autosave, 
automatic check
local IP or VPN   
HTTPS, 
digital 
signature, 
antivirus
acceptance 
button, autosave, 
automatic check, 
undo
performer:
availability:
performance:
security:
reliability:
wire, excess 
memory & 
processor  
phone modem, 
excess memory & 
processor
[3]
[1]
[5]
[2]
[3]
[3]
[1]
[1]
[2]
[1]
[6]
[5]
[1]
[1]
[4]
[1]
[1]
[3]
U2(o5)=1.00
U2(o3)=0.87 U2(o4)=0.67
U2(o1)=0.60
U2(o2)=0.53
T4
D3
 I1
E1
N4
R2
R4
A4
M4
K4
C4
T4
T4
H4
H3
H3
F1
H1
Figure 3. Example option tree of the laptop execution device
Nodes in each example option tree are labeled with option
values speciﬁed in Tables I–V, while utility of each single
attribute value calculated by the party is speciﬁed in square
brackets. Utilities of the respective offers of C2 are listed at
the bottom of the tree in a normalized form, as explained
before; see in Figure 2 that o2 is the document’s most preferred
offer, since P5
i=1 ui(v2
i ) = 1 + 3 + 6 + 3 + 1 = 14 and
U1(o2) = 14/14 = 1.0, whereas o5 is its least preferred offer,
with U1(o5) = 8/14 = 0.64.
III.
SIMPLE BARGAINING GAME
We model negotiation between the document-agent and the
execution device as a multi-stage game. It consists of stages,
55
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

denoted as (α2n
1 , α2n+1
2
), where n ∈ N ∪{0} (or n ∈ Z≥0 for
brevity) denotes the stage number, αk
i denotes a move of each
respective player Pi, i = 1, 2, and k is the move number. After
making move αk
i player Pi chooses offer o ∈ CB and valuates
it with its payoff function πi : A × N → [0, 1], calculated as
πi(o, k+2) = δiπi(o, k), where δi ∈ (0, 1] is called a discount
factor and πi(o, 0) = Ui(0). Each player has its own discount
factor that remains constant during the game. Throughout the
rest of the paper we will denote the opponent of player Pi by
P−i, their respective utility functions by Ui and U−i, payoff
functions by πi and π−i, and discount factors by δi and δ−i.
Rules of our simple bargaining game are the following:
1)
The game is started by player P1.
2)
Players Pi, i = 1, 2 keep in secret their private infor-
mation, including Ui, δi and πi, but share knowledge
on the bargaining set CB.
3)
Utility values of players’ offers are discounted at each
transition to the next stage.
4)
Players exchange offers until the game is concluded,
i.e., one of the players accepts an offer or quits the
game.
5)
The game is concluded by player Pi when:
a)
Pi repeats its own offer o′ what implies
quitting the game by Pi.
b)
Pi repeats player’s P−i offer o′′ what implies
accepting it as the contract and exiting.
A. Negotiation algorithm
A generic form of the algorithm implemented by each SBG
player (thread) is given below. Two threads operate on the same
resource, which is the bargaining set and individual indexes
for marking offers in it as sent, received or not yet sent nor
received. Functions of the form maxΠ[B,R,N] calculate offers
to be chosen from the bargaining set or its respective subsets,
according to πi and the move number k, as explained before.
Public: Bargaining set CB; sets of offers: received CR, sent
CS, remaining CN (all initially empty); received oR and
sent oS offers; move number k (initially k = 0).
Private: Discount factor δi; payoff function πi;
1: if k = 0 then
2:
{Opening move}
3:
oS ← maxΠB;
4:
send(oS);
5: else
6:
receive(oR);
7:
if oR ∈ CS then
8:
{Opponent has accepted the offer}
9:
terminate;
10:
end if
11:
CR ← CR + oR;
12:
CN ← CB − (CR + CS);
13:
if CN = ∅ then
14:
{Last move}
15:
oS ← maxΠR;
16:
send(oS); terminate;
17:
else
18:
{Intermediate/penultimate move}
19:
o′
S = maxΠR(k); o′′
S = maxΠN(k);
20:
if πi(o′
S) ≥ δi · πi(o′′
S) then
21:
send(o′
S);
22:
else
23:
send(o′′
S);
24:
end if
25:
end if
26:
k = k + 1
27: end if
B. Collaboration agreement
Table VII speciﬁes history of SBG played by document-
agent P1 and execution device P2, which shared the example
bargaining set C2 = {oi|i = 1, . . . , 5}, with their respective
option trees speciﬁed in Figures 2 and 3. The document started
negotiation by offering to the device its most preferred option
o2 in move α0
1. Then after the next four moves, option o3
offered by the device was ﬁnally accepted by the document.
The negotiated contract between the proactive document and
the device provides the former with the commonly agreed
execution context supplied by the latter.
TABLE VII. BARGAINING OVER EXAMPLE OPTION TREES
Stage
Move
Player
Offer oi
Ui(oi)
U−i(oi)
0
0
P1
o2
1.00
0.53
0
1
P2
o5
1.00
0.64
1
2
P1
o1
0.93
0.60
1
3
P2
o3
0.87
0.79
2
4
P1
o3
0.79
agreed
In the example we have used simpliﬁed option trees to keep
them small. In real applications involving MIND documents
the upper bound for the maximum size of a single option tree
could be as high as the product of the numbers of attribute
value labels used in Tables I-V, which is well over 5000,
whereas the upper bound for the number of possible nego-
tiation histories is a product of their respective permutations,
in the order of magnitude of 1013.
IV.
SIMULATION EXPERIMENT
Our simple bargaining game can provide a solution of (1)
when neither player Pi knows its opponent’s U−i, δ−i nor π−i,
known in the literature as the Nash equilibrium.
In order to show the above let us formally deﬁne the
simple bargaining game SBG = {P, D, U, CB, S, Π, T} as
a multi-stage game. Sets P = {P1, P2}, D = {δ1, δ2} and
U = {U1, U2} are self explanatory. In the bargaining set CB
we distinguish subsets Ci, C−i ⊂ CB of offers, submitted
respectively by Pi and P−i. Therefore, the set including offers
not yet submitted by any party would be C′ = CB−(Ci∪C−i),
and C′ ⊂ CB. Set S = Si ∪S−i consists of strategies used by
the respective players; each single strategy si ∈ Si is a function
si : Z≥0 → CB that associates each possible move αk+2
i
of
Pi that follow αk
i with the relevant offer from CB. There are
at most |CB| possible strategies for each player Pi, while the
maximum number of steps is kmax = |CB|. Set Π = {π1, π2}
consists of the respective players’ payoff functions; for any
offer o ∈ CB, submitted in the k-th move, each respective
payoff function returns πi(o, k) = δk
i Ui(o) if o ∈ C−i, or
πi(o, k) = 0 if o ∈ Ci. Finally, T(o) denotes a condition for
concluding the game, i.e., for any o ∈ CB, T(o) = false if
o ̸∈ (Ci ∪ C−i), otherwise T(o) = true.
56
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

A. Equilibrium strategy
For each stage of SBG involving offer oi, submitted by
Pi, and counteroffer o−i, submitted by P−i, the notion of a
strategy proﬁle is used; it is deﬁned as a pair of strategies
⟨si, s−i⟩, where si ∈ Si and s−i ∈ S−i. We will say that
the strategy proﬁle ⟨s′
i, s′
−i⟩ is the Nash equilibrium of SBG
if ⟨πi(s′(k)), π−i(s′
−i(k + 1))⟩ ⪰ ⟨πi(s(k)), π−i(s′
−i(k + 1))⟩
for any si ∈ Si and each player in each stage n; by ’⪰’ we
denote a pairwise comparison operator of 2-element vectors.
Strategies s′
i and s′
−i are called equilibrium strategies; each
one is said to provide the best offer of the respective player in
each stage of the game. When looking for the solution to (1),
instead of attempting to ﬁnd each other’s equilibrium strategies
each player may just assume that the offers submitted by its
opponent in any stage are actually its best responses.
When implementing the simulation experiment we have
adopted the following rationale of strategies used by players
in various stages of the game. All estimations are made from
the point of view of Pi, thus if the move is to be made by Pi,
we assume it to choose the offer of the highest payoff from all
offers available to it. Alternatively, if the move is to be made
by P−i, we assume it to choose the offer of the average payoff
calculated for all offers available to it. The reason for the latter
is that from the perspective of Pi all offers made by P−i are
equally probable, so statistically the payoff that Pi can get is
equal to their average value. We calculate that average with
the auxiliary function ρ(o, C′, f) = 1/|C′| P
o∈C f(o), where
o ∈ C′, and f : C′ → [0, 1) is a function used to valuate offers
with the payoff function. For brevity we will skip using the
step number argument of the payoff function throughout the
rest of the paper.
1) Last move: Strategy si(kmax) = arg maxo∈C−i πi(o)
is used if Pi makes the last move. Alternatively, if the last
move is made by P−i, strategy s−i(k) = o−i is used, where
o−i ∈ Ci satisﬁes equation πi(o) = ρ(o, Ci, πi). In the ﬁrst
case Pi must choose the best offer from those that have been
already presented by P−i, for otherwise (according to rules of
SBG) it would get the zero payoff. For the same reason, offer
o−i made by P−i must be chosen from all available offers in
Ci and of the payoff closest to the average payoff of all its
offers.
2) Penultimate move: The strategy that has to be used is
si(k) = arg maxo∈{o′
i,o′′
i }(πi(o′
i), δiπi(o′′
i )), if Pi makes the
move, where o′
i = arg maxo∈C−i πi(o) and o′′
i ∈ C − C−i
satisﬁes πi(o) = ρ(o, Ci, πi). Alternatively, s−i(k) = o−i is
used if P−i makes the move, where o−i ∈ C − C−i satisﬁes
πi(o) = 0.5(πi(o′
−i)+δ−iπi(o′′
−i)), o′
−i ∈ Ci satisﬁes πi(o) =
ρ(o, Ci, πi), and o′′
−i = arg maxo∈CB−Ci πi(o). Unlike in the
last move, the player has to accept one of the received offers
or make a new one, not yet presented by either player. In the
penultimate move only one such offer is left in CB. If Pi
makes the move it ﬁnds o′
i giving the best payoff of all offers
received already from P−i (as described in p. IV-A1 before)
and estimates payoff of offer o′′
i that P−i may submit in its
next move. The latter may be any offer submitted already by
Pi and the last one left in CB – all equally probable, thus
the average payoff is assumed. The choice is between o′
i and
discounted o′′
i , since the latter concerns continuing the game
in the next move. If P−i makes the penultimate move it can
either accept offer o′
−i from those made already by Pi or reject
it by submitting counteroffer o′′
−i. In order to assess payoff of
o′
−i player Pi has to calculate the average payoff of all its
offers to P−i (in the case when P−i may decide to accept one
of them), whereas o′′
−i is expected to give the highest payoff
of the offers made by P−i that Pi may eventually accept. For
o′
−i the average payoff is calculated, as accepting Pi’s offers
by P−i is equally probable. The choice is then between o′
−i
and discounted o′′
−i, since the latter concerns continuing the
game in the next move. The average payoff of o′
−i and o′′
−i is
assumed, as both choices by P−i are equally likely to Pi.
3) Intermediate move: In any move 0 < k < kmax − 1
Pi uses strategy si(k) = arg maxo∈{o′
i,o′′
i }(πi(o′
i), δiπi(o′′
i )),
where o′
i
= arg maxo∈C−i πi(o), and o′′
i
∈ C′ satisﬁes
πi(o) = maxo∈C′(1 − δ−i)πi(o) + δ−iUi(s−i(k + 1)). Al-
ternatively, strategy of P−i should be s−i(k) = o−i, where
o−i
∈ C′ satisﬁes πi(o) = 0.5(πi(o′
−i) + δ−iπi(o′′
−i)),
o′
−i ∈ Ci satisﬁes πi(o) = ρ(o, Ci, πi), and o′′
−i ∈ C′ satisﬁes
πi(o) = (1 − δi)ρ(o, C′) + δiπi(si(k + 1))). Rationale for
strategies si(k) and s−i(k) is the same as in the penultimate
move, i.e., offers o′
i and o′
−i concern accepting the respective
opponent’s offer, while o′′
i and o′′
−i concern rejection of the
opponent’s offer and continuation of the game by submitting
new offers. The former are calculated in the same way as
in p. IV-A2, whereas calculation of the latter should reﬂect
possible acceptance or rejection during subsequent stages.
Therefore, if Pi decides to continue the game the estimated
payoff splits in two parts, proportional to discount factor δ−i
of its opponent: payoffs that may be get for new offers from
C′ if accepted, and continuation of the game by player P−i
in the next move with strategy s−i(k + 1)) if not accepted. If
P−i decides to continue the game the estimated payoff splits
in two parts as well, proportional to discount factor δi of its
opponent: the average payoff that may be get for new offers
from C′, if accepted, and continuation of the game by player
Pi in the next move with strategy si(k + 1), if not accepted.
4) Opening move: Strategy of P1 in move k = 0 (starting
the game) is si(0) = arg maxo∈CB(Ui(o)). It has no hints
concerning its opponent’s utility, so the only way to maximize
its utility is to choose its most valued offer from CB.
B. Simulation results
In the experiment we simulated P1 (proactive documents)
using the rationale of selecting best offers in each possible
type of step described before. Some generic features of such
documents were considered. We distinguished protected doc-
uments from open ones, by taking into account whether they
need any secure connection to perform their activity or not,
and heavy documents from light ones, by considering whether
they may require CPU power and the amount of RAM above
or below some average levels when doing that. Based on
that we have deﬁned four classes of documents used in the
simulation experiments. Their respective bargaining sets are
listed in Table VIII.
TABLE VIII. BARGAINING SETS FOR PROACTIVE DOCUMENTS
Bargaining set:
Attribute Ai value sets/subsets
document class
1
2
3
4
5
Cph: protected & heavy
A1
E ∪ I
[U, R, A, N]4
A4 − P
A5
Cpl : protected & light
A1
E ∪ I
A3
A4 − P
A5
Coh: open & heavy
A1
E ∪ I
[U, R, A, N]4
A4
A5
Col : open& light
A1
E ∪ I
A3
A4
A5
For each document class 20 random option trees were
generated, each one including offers with attribute values listed
57
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

in the respective row of Table VIII. Bargaining was performed
over each possible pair of options trees, one tree for the
particular document class and another for the particular device
class; in each case CB = Cdoc ∩ Cdev. With ﬁve device
classes 100 simulations were performed for each document
class. In each single simulation the offers in option trees of
the respective negotiating parties were sorted in the opposite
order to each other, to ensure the maximum possible number
of negotiation steps. The discount factor for each party was
δ = 0.8. The results are shown in Figure 4.
protected & heavy
protected & light
open & heavy
open & light
0.000
0.025
0.050
0.075
0.100
0.125
0.150
0.175
0.200
0.225
0.250
0.275
0.300
0.325
0.350
0.375
0.400
0.425
0.450
0.475
0.500
workstation
laptop
tablet
smartphone
cellphone
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Device classes
Document classes
Contracts (payoffs)
Steps
Figure 4. Contracts negotiated by proactive documents and devices
The fair payoff, which may be calculated based on (1) by
some hypothetical third party knowing utility functions of the
two negotiating parties, was close to 0.5. It may be seen that in
general the smaller the number of available options (thus also
the bargaining set size) the smaller is the number of negotiation
steps required to reach the contract – the document was able
to reach the agreement and get close to the fair result with
the cellphone device in just a few steps, whereas negotiating
with the laptop or workstation devices was possible in about
20 steps.
V.
RELATED WORK
Our problem of ﬁnding the execution context that can
satisfy the proactive document intending to perform a given
activity on a dynamically changing mobile device, relates to
two speciﬁc areas: representation of available options as offers,
and implementing negotiations as games. One difﬁculty with
the above is the discrete range of offers that the negotiating
parties have to search to ﬁnd the solution. Another is the semi-
cooperative setting implied by the fact that partners share the
bargaining set but keep their preferences secret. Modeling mul-
tiple options with functions as the continuum of offers allows
ﬁnding contracts using various optimization techniques, e.g.,
swarm optimization, as demonstrated in [3]. Unfortunately,
dealing with non-functional options makes such optimization
inherently difﬁcult to implement. In [4] the concept of the Web
service modeling ontology (WSMO) has been used to develop
a mechanism capable of handling that in a way enabling
agents to ﬁnd the most suitable resources for performing the
requested activity; the proposed mechanism also provided for
resolving between alternative (conﬂicting) offers based on the
argumentation theory. This approach suits well broker agents
recommending services to user agents, however in the case of
two agents competing to win as much wealth as possible the
game theoretic approach seems to be easier to implement.
A generic approach to the problem of multiple issue
negotiation with no information about the opponent has been
proposed in the literature [5], but the formal mathematical
proof of the convergence of the monotonic concession strategy,
which our SBG implements with option trees, was not provided
until [6]. It has been shown there that offers and counteroffers,
selected by each party according to the amount of concession
the party can accept in the current round, are getting closer in
the utility space until the contract is agreed. For each party a
hyperquadratic utility function was assumed – general enough
to simulate negotiation protocols, but imposing an unnecessary
limit on how agents may implement valuation of offers and not
allowing for discrete values.
VI.
CONCLUSION
Our approach based on option trees does not assume any
class of utility functions, except that they should be injective
in order to enable sorting the trees and to ensure monotonicity
of preferences. The linear additive utility function deﬁned in
Section I-B has been used by us just to simplify generation
of option trees for simulation experiments described in Sec-
tion IV-B. The model proposed in the paper has been recently
expanded with the learning capability, based on the history of
interaction and the concept of policies. Simulation experiments
indicate that properly trained document-agents can recognize
preferences of devices and guess the contract in just a couple of
steps [7]. The necessary ’knowledge’ is carried by documents
as weights needed to set up a really simple neural network,
which the LWE client would be able provide on the execution
device.
ACKNOWLEDGMENT
This work was supported in part by the National Science
Center, Poland, under grant DEC1-2011/01/B/ST6/06500.
REFERENCES
[1]
M. Godlewska and B. Wiszniewski, “Smart email: Almost an agent
platform,” in Innovations and Advances in Computing, Informatics,
Systems Sciences, Networking and Engineering, ser. Lecture Notes
in Electrical Engineering, T. Sobh and K. Elleithy, Eds.
Springer
International Publishing, 2015, vol. 313, pp. 581–589.
[2]
J. Kaczorek and B. Wiszniewski, “Augmenting digital documents with
negotiation capability,” in Proc. 2013 ACM Symposium on Doc-
ument Engineering (DocEng’13).
ACM, Sep. 2013, pp. 95–98,
doi:10.1145/2494266.2494305.
[3]
Z. Wang and L. Wang, “Adaptive negotiation agent for facilitating
bi-directional energy trading between smart building and utility grid,”
IEEE Transactions on Smart Grid, vol. 4, Mar. 2013, pp. 702–710,
doi:10.1109/TSG.2013.2237794.
[4]
A. Caballero, A. Mu`ooz, J. Soto, and J. A. Bot´ıa, “Resource assignment
in intelligent environments based on similarity, trust and reputation,”
J. Ambient Intell. Smart Environ., vol. 6, Mar. 2014, pp. 199–214,
doi:10.3233/AIS-140253.
[5]
G. Lai and K. Sycara, “A generic framework for automated multi-attribute
negotiation,” Group Decision and Negotiation, vol. 18, Jul. 2009, pp.
169–187, doi:10.1007/s10726-008-9119-9.
[6]
R. Zheng, N. Chakraborty, T. Dai, K. Sycara, and M. Lewis, “Automated
bilateral multiple-issue negotiation with no information about opponent,”
in Proc. 46th Hawaii Int. Conf. on System Sciences (HICSS 2013).
IEEE, Jan. 2013, pp. 520–527, ISBN: 978-0-7695-4892-0.
[7]
J. Kaczorek and B. Wiszniewski, “Document agents with the intelligent
negotiation capability,” in Proc. Knowledge and Cognitive Science and
Technologies (KCST 2015).
IIIS, Jul. 2015, in press.
58
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-381-0
ICDS 2015 : The Ninth International Conference on Digital Society

