The Scrum Product Owner – Customer Collaboration & Prioritizing Requirements  
Empirical research in a sample of Irish Industry 
 
Trish O’Connell 
Department of Information Technology 
National University of Ireland, Galway, Ireland. 
trish.oconnell@nuigalway.ie 
 
 
Abstract— The existing body of literature on Agile Scrum is extensive. 
Many authors, ([1], [2], [3], [4]), concur that the role of the Product 
Owner is to represent the customers' requirements to the development 
team and set the priorities for the work to be completed.  The Agile 
Manifesto specifies customer collaboration as being of more 
importance than contract negotiation. So, we might expect that in 
addition to setting priorities the Product Owner role in Scrum would 
work closely with the Customer. This paper investigates a sample of 
Irish software development organizations to determine the level of 
adherence to Agile Scrum guidelines with regard to the two key aspects 
of customer collaboration and requirements prioritization. 
 
Keywords-Agile; Scrum; Requirements Product Owner; Customer 
collaboration;  
I. 
 INTRODUCTION  
In the absence of any a priori knowledge, it is generally believed that 
if companies claim to be Agile then they are, in fact, following the precepts 
and guidelines of their chosen Agile methodology, whether this be Scrum 
[5], eXtreme Programming [6], Crystal Clear [7] or indeed any of a 
plethora of Agile practices. 
It may then come as something of a surprise to discover that “there is 
often a substantial difference between the textbook ‘vanilla’ version” [8] of 
the method and the method actually enacted in practice, what Senapathi et 
al [9] refer to as the “method-in-action.” Conboy & Duarte [8] elaborate: 
“Prescribed practices are inevitably interspersed in diverse ways or tailored 
to suit the specific needs of teams.” So, can self-described Agile enterprises 
really lay claim to being Agile or are they, perhaps, using an ad hoc 
approach which pays lip service to Agile principles with the (unintentional) 
benefit of keeping the stakeholders happily deluded? To what extent do 
companies that describe themselves as being Agile actually follow Agile 
guidelines as documented by the pioneers of the various Agile 
methodologies? 
Many authors [38], [39] agree that lack of user involvement is a 
primary cause of project failure. The CHAOS report of 2010 [40] stated: 
“projects that lack user involvement perform poorly.” Consequently, the 
degree of user involvement in organizations that describe themselves as 
being Agile was of immediate interest to the author. 
This paper, based on empirical research, examines the author’s 
contention that because “agile methodologies intentionally leave a lot to 
be defined about exactly how the methodology is implemented” [4], what 
results is sometimes an extemporized approach to implementing Agile 
methods with a resultant lack of project success. Because many of the 
Agile practices are somewhat loosely, if at all, defined, it is possible that 
some organizations might take this as carte blanche to omit some of the 
fundamental aspects that made Agile so pertinent at the outset.  
The research hypothesis of this work was to ascertain if this ad hoc 
implementation of Agile methods extended to the customer involvement / 
Product Owner domain. 
 
Whilst it may be argued that a plan based or prescribed method of 
developing software might not always be easy to work with due to 
constantly changing customer requirements or “software requirements 
churn” [10], Addison & Vallabh [11] advocate that to control software 
projects it is important to “develop and adhere to a software development 
plan.” Fitzgerald [12] also contributes to this argument citing that 
“experienced developers are more likely to use a methodology, as they 
would be aware of its benefits”. Fitzgerald [12] further claims that 
“inexperienced developers are more likely to follow a methodology 
rigorously”, perhaps because it lends structure to an otherwise chaotic 
endeavour. 
Thus, although it is widely accepted that “standard software 
development models often provide explicit detailed guidelines” [13], the 
author decided to conduct some quantitative research into aspects of actual 
Agile implementation in a sample of Irish software industry with a view to 
gaining an understanding of the level of compliance to documented  Agile 
precepts. In the interests of brevity, this paper will deal only with the 
Scrum Product Owner, prioritization of customer requirements and 
customer collaboration aspects. 
Section II of this paper briefly outlines the background to one of the 
foremost Agile methods, Scrum, which incorporates the role of Product 
Owner. Section III briefly describes the research design of the study. 
Section IV presents the results of the study and this is followed by a 
discussion of the findings in Section V.  
 
II. 
BACKGROUND 
Agile software development methods emerged in the late 1990s with the 
Agile Manifesto [14] being published in 2001 (http://agilemanifesto.org/). 
There are many different approaches to implementing Agile and each has its 
own ‘vanilla’ version. Sutherland [15] explains “Each Agile methodology 
has a slightly different approach for implementing the core values from the 
Agile Manifesto, just as many computer languages manifest the core 
features of object-oriented programming in different ways.” The 
methodologies chosen for the study were Scrum and XP, since previous 
work in this domain by Bustard [16] identified these as the most prominent 
of the Agile methodologies currently in use. Salo, & Abrahamsson [17] refer 
to Scrum and XP as the “perhaps best known agile methods”. However, in 
the interest of brevity only Scrum will be discussed in this paper. 
A. 
SCRUM 
According to Ken Schwaber [5] (co-creator of Scrum with Jeff 
Sutherland), “Scrum is an enhancement of the commonly used 
iterative/incremental object-oriented development cycle.” It is more of a 
framework than a methodology but it nevertheless takes, according to 
Millett et al [18], an “iterative approach to software development.”  
Sutherland [15] explains Scrum “structures development in cycles of work 
called Sprints. These iterations are no more than one month each, and take 
place one after the other without pause. The Sprints are timeboxed – they 
end on a specific date whether the work has been completed or not, and are 
never extended”.  
Schwaber [19] describes product requirements as being “contained in 
an ordered list known as the Product Backlog.” At the beginning of each 
Sprint, the requirements are prioritized into a list known as the Sprint 
Backlog with the aim of completing an agreed set of deliverables by the 
end of the Sprint. Sutherland [15] explains further, “During the Sprint, the 
chosen items do not change. Every day the team gathers briefly to inspect 
its progress, and adjust the next steps needed to complete the work 
remaining. At the end of the Sprint, the team reviews the Sprint with 
stakeholders, and demonstrates what it has built.  People obtain feedback 
that can be incorporated in the next Sprint. Scrum emphasizes working 
product at the end of the Sprint that is really “done”; in the case of 
software, this means code that is integrated, fully tested and potentially 
shippable.” 
 
Barari [20] advises that “it is important to follow the guidelines defined 
in Scrum but the ultimate goal is to deliver what you promised”. With regard 
to the guidelines, Schatz & Abdelschafi [21] state quite categorically that 
“there aren’t many rules in Scrum but you need to adhere to the ones that 
(do) exist”. Unfortunately, the rules of transitioning software development 
from a plan-driven approach to an Agile approach are not set in stone and 
368
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

this may be where the confusion lies. The ‘rules’ that exist are the 
implementation of the 12 principles set out in the Agile Manifesto [14]. It is 
the author’s opinion that it is the interpretation of these rules that is often 
confusing and sometimes even problematic. 
 
Most authors on Agile ([1], [3], [22], [23]) agree that the Scrum 
framework should include a Product Owner. The role of the Product Owner 
will now be reviewed. 
 
B. 
THE PRODUCT OWNER 
According to Deemer et al [24] “The Product Owner is responsible for 
maximizing return on investment (ROI) by identifying product features, 
translating these into a prioritized list, deciding which should be at the top 
of the list for the next Sprint, and continually re-prioritizing and refining 
the list. The Product Owner has profit and loss responsibility for the 
product, assuming it is a commercial product. In the case of an internal 
application, the Product Owner is not responsible for ROI in the sense of a 
commercial product (that will generate revenue), but they are still 
responsible for maximizing ROI in the sense of choosing – in each Sprint – 
the highest-business-value lowest-cost items”. How well this focus on the 
“highest-business-value lowest-cost items” correlates with the customers’ 
requirements is, in this author’s opinion, debatable. Deemer et al [24] offer 
the opinion that “‘value’ is a fuzzy term and prioritization may be 
influenced by the desire to satisfy key customers.” Thus, the role of the 
Product Owner in Scrum might not appear to be as clear cut as the original 
proponents of Agile might have wished. 
Stober & Hansmann [3] concur and define a Product Owner who 
“represents the stakeholders, such as customers.” Consequently, it might be 
apposite to assume that there should be a tenable link between the Product 
Owner and the customer. 
However, Sutherland [25] identifies a ubiquitous dilemma... “In some 
cases, the Product Owner and the customer is the same person; this is 
common for internal applications. In others, the customer might be millions 
of people with a variety of needs, in which case the Product Owner role is 
similar to the Product Manager or Product Marketing Manager position in 
many product organizations. However, the Product Owner is somewhat 
different than a traditional Product Manager because they actively and 
frequently interact with the Team, personally offering the priorities and 
reviewing the results of each two- or four-week iteration, rather than 
delegating development decisions to a Project Manager”. Deemer et al [24] 
summarize, “It is important to note that in Scrum there is one and only one 
person who serves as – and has the final authority of – Product Owner, and 
he or she is responsible for the value of the work”. Schwaber [26] describes 
the Product Owner as “the single wringable neck”. Insofar as it is the 
Product Owner who represents the customer requirements to the 
development team, the success or failure of the project can ultimately be 
attributed to this one individual.  Beyer [2] sees the Product Owner as ”the 
customer representative” and outlines his responsibility to “find out what 
the stakeholders and end users actually need.” Having requirements which 
are “prioritized by the product owner” [3] is yet another prerequisite of 
Scrum. In the Scrum approach, according to Cohn [27], “requirements are 
maintained in a backlog, called the Product Backlog, prioritized by 
business value.”  Having been  prioritized, the work (or as much of it as 
possible) is accomplished by the Scrum development team in fixed 
timeframes “known as Sprints” [27], which usually last two to four weeks, 
depending on the product or service. Items are taken off the backlog in 
priority order to be worked on as parts of the Sprint Backlog in the current 
iteration. At the end of the Sprint, there is usually a Sprint review [22], 
where the team demonstrates what it has accomplished to the customer 
with a view to soliciting feedback. 
According to Schwaber [19], the Product Owner is “responsible for 
representing the interests of everyone with a stake in the project and its 
resulting system.” Many of the proponents of Scrum, including [4], 
advocate “as much customer collaboration as possible” but he counsels that 
the “Product Owner represents the voice of the customer and is expected to 
provide overall direction to guide the project toward producing the value to 
satisfy customer needs” [4]. This should most likely involve close 
collaboration with customers and stakeholders. In most Scrum training 
workshops, it is advised to ensure customer involvement throughout the 
development process. This is often referred to as capturing the “voice of the 
customer” [28] in an attempt to deliver the required content. It has been 
widely accepted [29] that customer involvement is critical to successful 
software development. In fact, Paetsch, Eberlein et al [30] state “customer 
involvement was found to be the number one reason for project success, 
while the lack of user involvement was the main reason given for projects 
that ran into difficulties.”  
 
III. 
RESEARCH METHOD 
The research on which this paper is based was conducted as a 
quantitative study that was descriptive in nature. Leedy & Ormrod [31] 
describe this type of research as “identifying the characteristics or 
exploring possible correlations among two or more phenomena.” The 
authors also state that “descriptive research examines a situation as it is.” 
However, as Oppenheim [32] explains, “no valid causal interpretations are 
possible”, thus, whilst the data collected may describe the actual situation, 
the research is limited to being solely a descriptive analysis.  
There are many ways to conduct descriptive quantitative research. 
Thomas [37] refers to three methods: surveys, correlation analysis and 
experiments whilst Leedy & Ormrod [31] also include “observational 
studies and developmental designs”. Having reviewed the suitability of 
each of these methods it was decided to use an online survey to collect 
primary research data. Leedy & Ormrod [31] explain that a survey 
“involves acquiring information about one or more groups of people by 
asking them questions and tabulating their answers”. The authors indicate 
that “the ultimate goal is to learn about a large population by surveying a 
sample of that population.” It needs be stressed, however, that survey 
research “captures a fleeting moment in time” [33]. It is possible that the 
response to a particular question might be totally different in two or three 
months’ time. Once this precept was understood, however, it was felt that a 
survey would be a perfectly acceptable way to discover information about 
the topic to be investigated. De Vaus [34] states, “Survey research is 
widely regarded as being inherently quantitative and positivistic and is 
contrasted to qualitative methods that involve participant observation, 
unstructured interviewing, case studies, focus groups, etc. Quantitative 
survey research is sometimes portrayed as being sterile and unimaginative 
but well suited to providing certain types of factual, descriptive information 
– the hard evidence.” 
If survey research has a drawback it would seem to be that the results 
are dependent on the participants’ willingness to participate, in addition to 
their ability to correctly answer the questions asked. Leedy & Ormrod [31] 
refer to the fact that the method relies on “self report” data. The authors 
caution that “people are telling us what they believe to be true or, perhaps, 
what they think we want to hear.” Survey research can be conducted via a 
number of different methods: the face-to-face interview, the telephone 
interview or the documented questionnaire, which can be either paper or 
Internet based. As Salo & Abrahamsson [17] note “web-based data 
collection also overcomes some limitations of ordinary mail surveys and 
other data collection mechanisms in terms of speed and cost.” It was also 
planned that a limited amount of interviewing would be required to ensure 
that the correct conclusions were drawn. Thus, to conduct research into this 
domain a sample of software professionals at both management and Scrum 
team level in a cross section of Irish Software development companies, 
who profess to use Scrum, were polled for their perspectives. This is 
described next. 
 
A. 
THE PARTICIPANTS 
In an ideal scenario, it would be preferable to obtain a totally random 
selection of Irish software development companies to answer the research 
questions. However, given the likelihood that the response rate would be 
low (which is one of the main drawbacks of this research method, what 
Leedy & Ormrod [31] refer to as “low return rate”), it was decided to 
indulge in a degree of “purposive sampling” [35]. Nardi [35] explains 
purposive sampling as sampling one or more specific pre-defined groups. 
This approach was   adopted as it was felt to be important to collect data on 
organizations that had some prior knowledge of Agile practices as opposed 
to taking a completely random sample, which may have resulted in 
confused responses. To generate survey data, a random sample of software 
companies was targeted from software groups known to be somewhat 
familiar with the concepts of Agile software development, groups such as 
AgileIreland, Information Technology Association Galway (ITAG), the 
Irish Software Association (ISA), the Irish Software Innovation Network 
(ISIN) training companies, blogs etc. All of these were contacted to host 
369
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

the online survey on their websites, where it would be visible to their 
members. 
Using these organizations, it was possible to distribute the online 
survey to a diverse audience of software development professionals who 
had an established history with, or at the very least, a passing knowledge 
of, Agile and who, it was hoped, would be more likely to respond to the 
questions. In an attempt to capture a representative view, cross-functional 
participants, including both Scrum team members and software 
development management in organizations that use Scrum, were targeted. 
In this way it was hoped that the findings would be representative of the 
actual state of play of software development in Irish industry. The 
breakdown of Scrum team participants is shown in Table I. 
 
TABLE I.   SCRUM TEAM SURVEY PARTICIPANTS 
 
 
  
Organization Size 
Role 
1 to 50 
51 to 500 
500+ 
Designer 
1 
1 
1 
Senior 
Developer 
2 
3 
1 
Developer 
2 
4 
3 
Test Engineer 
2 
3 
2 
 
Similarly, the breakdown of Scrum management participants is shown in 
Table II. 
 
TABLE II.   MANAGEMENT  SURVEY PARTICIPANTS 
 
  
Organization Size 
Role 
1 to 50 
51 to 500 
500+ 
S/W Dev. Mgr. 
3 
3 
4 
Project Mgr. 
2 
2 
4 
Q.A. Mgr. 
  
  
1 
Test Mgr. 
  
1 
  
 
 
Given the fact that the survey was online, it was not possible to compute 
a response rate, per se. However, it was felt that a sufficiently 
representative number of respondents had contributed to make the results 
relevant. 
IV. 
RESULTS 
Whilst all Scrum teams admitted having a Product Owner it became 
clear that the Scrum teams were not always aware of the link between the 
Customer and the Product Owner. When asked how frequently the Product 
Owners consulted with the customer the responses were as given in Table 
III. 
 
 
TABLE III.   LEVEL OF AWARENESS OF INVOLVEMENT 
BETWEEN PRODUCT OWNER AND CUSTOMER 
 
Unaware of involvement 
44% 
Aware of weekly involvement 
20% 
Aware of infrequent involvement 
8% 
As required 
28% 
 
Although, in theory, the Product Owner sets the vision for the product 
and is responsible for prioritizing requirements for the team to work on for 
the Sprint duration, in practise it was found that for 44% of those who 
described themselves as being Scrum team members this did not happen. In 
fact, it transpired that in some cases requirements were prioritized as shown 
in Table IV.   
 
TABLE IV.   PRIORITIZATION OF REQUIREMENTS 
 
Product Owner 
56% 
Scrum Master  
24% 
Release Manager  
12% 
Combination  
8% 
 
One interesting comment was that the developer didn’t know how 
priorities were set, but felt that there was a “mysterious process in 
operation.” 
When questioned about the involvement of customers at Sprint reviews 
the Scrum teams’ responses were as shown in Table V. 
 
TABLE V.   CUSTOMER INVOLVEMENT AT SPRINT REVIEWS 
 
No customers in attendance 
12% 
Unsure of attendance 
4% 
Customers in  attendance 
84% 
 
 
From the perspective of the developers with regard to customer 
involvement, it would appear that 16% felt the involvement of customers 
was either not encouraged, or they were unaware of any efforts to involve 
customers. 
 When management at self-described Agile organizations were asked if 
customer involvement was encouraged (in the form of attendance at Sprints 
etc) 13% admitted that this was not the case.  
 
V. 
DISCUSSION 
The research effectively offers a snapshot of Irish software industry 
over the duration of the survey availability window, which was two months 
from July to August, 2011. Although the sample was not as large as had 
been envisaged, and it is consequently not possible to make generalizations 
from the results, it is nonetheless valid to make some observations. When 
taken in isolation, the Scrum results presented in section IV are somewhat 
disconcerting; however, they are largely in line with what was expected. It 
should be noted that the results are not skewed by the presence of a number 
of responses from organizations who are not using any of the Scrum 
precepts.  A correlation of all of the responses would seem to show that 
only 12% of those who responded were operating precisely to the Scrum 
guidelines. The remainder had, indeed, adopted an ad hoc approach to 
Scrum for whatever reason. This might, in part, be the reason behind failed 
Agile projects. 
For any Agile method the theory would seem to indicate that user 
involvement is crucial. In fact, one might go further than mere user 
involvement, and in order to gain valuable feedback to the project, cite user 
participation as being key to a successful software development initiative. 
Kautz [36] acknowledges “Agile development practices and principles 
insist on the customer taking control and being constantly involved.” This 
is underpinned by the Agile Manifesto [14], which advocates “Customer 
collaboration over contract negotiation.” 
 
Paetsch, Eberlein et al [30] concur, “All agile approaches emphasize 
that talking to the customer is the best way to get information needed for 
development and to avoid misunderstandings. If anything is not clear or 
only vaguely defined, team members should talk to the responsible person 
370
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

and avoid chains of knowledge transfer. Direct interaction also helps 
establishing trust relationships between customers and developers.”  
However, in the vast majority of companies it is thought not to be 
feasible to have the customer on site or actively involved as described. The 
solution to this in most companies is to appoint a customer proxy. 
However, Beyer [3] says “Product Owners as defined by Scrum do not 
make good user surrogates. They may be responsible for representing all 
the stakeholders of a system, including end-users, the customer who makes 
the purchase decision, and the internal stakeholders. But they are not any of 
these people.”  
The findings of the study answered the primary research question and 
found that, as expected, the adoption of Scrum by many organizations was 
not as rigorous as the proponents of the methodology might have wished. 
The implications of this approach to software development could have 
many ramifications not least being poor Scrum team morale, projects being 
late and/or not delivering what the customer requires.  
In the author’s opinion, the results of the survey highlight the need for 
further research. In particular, it is important to acknowledge that the 
results of this study were based on a relatively small sample of Irish 
software industry due largely to the aggressive timeframe in which the 
author operated. Whilst the preliminary research commenced in February 
2011 the completion deadline for the thesis was in August of the same year. 
It would, indeed, be interesting to investigate whether the findings would 
be replicated on a larger set of software development organisations. 
ACKNOWLEDGMENT 
The author would like to thank Ms. Karen Young (Discipline of IT, 
National University of Galway, Ireland) for her unflagging patience in 
keeping this research going for the duration of the thesis portion of the 
MScSED. 
 
 
REFERENCES 
 
[1] 
J. Highsmith, Adaptive Software Development Ecosystems. Boston, 
MA: Pearson Education Inc, 2002, pp. 244-245. 
[2] 
H. Beyer, User Centered Agile Methods, Synthesis Lectures on 
Human-Centered Informatics. Ed. J. Carroll, Morgan & Claypool, 
2010, p.4. 
 
[3]  T. Stober and U. Hansmann, Agile Software Development: Best 
Practices for Large Software Development Projects. Berlin 
Heidelberg: Springer-Verlag, 2010, p. 41. 
[4]  C.G. Cobb, Making Sense of Agile Project Management Balancing 
Control and Agility. Hoboken, NY: Wiley & Sons, 2011, pp. 101-
103. 
[5]  K. Schwaber, "Scrum Development Process", Proc.  OOPSLA’95 
Workshop on Business Object Design and Implementation, Austin, 
Texas, USA, 1995, pp. 117-134. 
[6]  K. Beck, Extreme Programming Explained: Embrace Change, 
Boston, MA: Addison Wesley, 1999. 
[7]  A. Cockburn, Agile Software Development, Boston, MA: Addison-
Wesley, 2001. 
[8]  K. Conboy and V. Duarte, “Scaling Agile to Lean – Track Summary”, 
Proc. LESS 2010, Helsinki, Finland, Volume 65, 2010, pp 1-2. 
[9] 
M. Senapathi, P. Middleton, and G. Evans,  “Factors Affecting 
Effectiveness of Agile Usage – Insights from the BBC Worldwide 
Case Study”, Proc.12th International Conference, XP 2011, Madrid, 
Spain, 2011, p. 136. 
[10]  J. Dooley, Software Development and Professional Practice. New 
York, NY: Apress. 2011. 
[11]  T. Addison and S. Valabh, “Controlling Software Project Risks – an 
Empirical Study of Methods used by Experienced Project Managers”, 
Proc. SAICSIT 2002, Port Elizabeth, South Africa, pp. 128-140. 
[12]  B. Fitzgerald, “The use of systems development methodologies in 
practice”. Info Sys Journal (1997) Vol 7, pp. 201-212. 
[13]  J.D. Fontana, “Models of Software Evolution Life Cycle and 
Process”, Technical Document 1893, July 1990. Retrieved Aug. 16th, 
2013 from 
 
http://www.dtic.mil/dtic/tr/fulltext/u2/a227328.pdf. 
[14]  M. Fowler and J. Highsmith,  “The Agile Manifesto”, Software 
Development, Vol. 9 No. 8 (August, 2001) pp. 28-32. 
[15]  J. Sutherland, “The Scrum Handbook”, Somerville MA: Scrum 
Training Institute, 2010. 
[16]  D. Bustard, “Beyond Mainstream Adoption: From Agile Software 
Development to Agile Organizational Change”, Proc. IEEE 19th 
International Conference ECBS, Serbia 2012, pp. 90-97. 
[17]  O. Salo and P. Abrahamsson, “Agile methods in European embedded 
software development organisations: a survey on the actual use and 
usefulness of Extreme Programming and Scrum”, Proc. IET Software, 
2008, Vol. 2, Issue 1, pp. 58–64, doi: 10.1049/iet-sen:20070038.  
[18] S. Millett, J. Blankenship, and M. Bussa, Pro Agile. NET 
Development with SCRUM. New York, NY: Apress, 2011, p.13. 
[19] K. Schwaber, Agile Project Management with Scrum. Redmond, 
Washington: Microsoft Press, 2009, p10. 
[20] T. Barari, “Tips for First Time Scrum Masters” Scrum Alliance, 
2009. Retrieved 16th Aug. 2013 from 
 
http://www.scrumalliance.org/community/articles/2009/may/tips-for-
first-time-scrummasters. 
[21] B. Schatz and I. Abdelschafi, “Primavera Gets Agile: A Successful 
Transition to Agile Development”, IEEE Software. 2005, May/June 
Vol. 22 no. 3, pp36-42, 
 
doi:10.1109/MS.2005.74. 
[22] R. Pichler, Agile Product Management with Scrum: Creating 
Products that Customers Love. Boston, MA: Pearson Education Inc, 
2010, pp. 2-4. 
[23] K. Schwaber and M. Beedle, Agile Software Development with 
Scrum. NJ: Prentice Hall, 2001, pp. 34-35. 
[24] P. Deemer, G. Benefield, C. Larman, and B. Vodde, “Scrum Primer v 
1.2” Retrieved 17th Aug, 2013 from 
 
http://goodagile.com/scrumprimer/scrumprimer.pdf. 
[25] J. Sutherland, The Scrum Papers: Nuts, Bolts and Origins of an Agile 
Framework. Cambridge, MA: Scrum, Inc., 2012, p.15. 
[26] K. Schwaber, The Enterprise and Scrum. Redmond, Washington: 
Microsoft Press, 2011, p6. 
[27] M. Cohn, Succeeding with Agile : Software Development using 
Scrum. Upper Saddle River, New Jersey: Addison-Wesley. pp. 257–
284. 2010. 
[28] J.R. Hauser and D. Clausing, “The House of Quality”, Harvard 
Business Review (May–June), 1988, pp. 63–73. 
[29]  Standish Group International, Chaos Report 2000. Retrieved Aug 
18th, 2013, from http://www.gobookee.net/standish-group-chaos-
report-2000/. 
[30] F. Paetsch, A. Eberlein, and F. Maurer, “Requirements Engineering 
and Agile Software Development”, Proc. of the 12th IEEE 
international Workshops on Enabling Technologies: Infrastructure for 
Collaborative Enterprises, June 2003, pp. 308 – 313. 
[31] P.D. Leedy and J.E. Ormrod, Practical Research Planning and Design. 
New Jersey: Prentice Hall, 2005 p.179. 
[32] A.N. Oppenheim, Questionnaire Design, Interviewing and Attitude 
Measurement, New York: Continuum, 2005, p.4.  
[33] C.A. Mertler, Action Research: Improving Schools and Empowering 
Educators. California: Sage Publications, California, 2006, p.95. 
[34] D. DeVaus, Surveys in Social Research. New South Wales, Australia 
:Routledge, 2002, p. 5. 
[35] P.M. Nardi, Doing Survey Research: A Guide to Quantitative 
Methods. Boston: Pearson Education 2003, p. 119. 
[36] K. Kautz “Inclusive Design in Practice: A Study of Participatory 
Design, Customer and User Involvement in Agile Software 
371
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

Development,” Proc. of the 32nd Information Systems Research 
Seminar, Norway, August 2009, p217. 
[37]  R.M. Thomas, “Blending Qualitative and Quantitative Research 
Methods in Theses and Dissertations” Corwin Press, California. 2003. 
[38] K.L. James, “Software Engineering”, Delhi: PHI, 2008, p. 34. 
[39] R.K. Wysocki, “Effective Management: Traditional, Agile, Extreme”, 
Indianapolis, IN: Wiley& Sons, 2011, Ch. 16. 
[40]  Standish Group International, CHAOS Summary for 2010 retrieved 
Aug 
17th, 
2013, 
from 
http://insyght.com.au/special/2010CHAOSSummary.pdf. 
 
 
 
 
372
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

