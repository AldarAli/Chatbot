Leader-Following Formation Control with an Adaptive Linear and Terminal 
Sliding Mode Combined Controller Using Auto-Structuring Fuzzy Neural Network 
Masanao Obayashi, Kohei Ishikawa,                   
Takashi Kuremoto, Shingo Mabu                     
Graduate School of Science and Engineering, 
Yamaguchi University,Ube, Yamaguchi, Japan 
email:{m.obayas, s003vk, wu, mabu}@yamaguchi-
u.ac.jp 
Kunikazu Kobayashi                                             
School of Information Science and Technology,   
Aichi Prefectural University, Nagakute, Aichi, Japan 
email: kobayashi@ist.aichi-pu.ac.jp  
 
 
Abstract—This paper proposes an intelligent formation control 
method of the leader and follower agents with nonlinear 
dynamics. In the proposed method, agents can exchange only 
information of positions of available agents and the follower 
agents follow the leader, taking a predefined formation. In the 
real world, the method that doesn’t need a lot of information to 
make cooperative behaviors is very useful for the case of 
environments existing communication delay and weak 
communication. In addition, each agent will be controlled by 
the linear and terminal combined sliding mode control method. 
Furthermore, to adapt the change of the environment, the 
Auto-Structuring Fuzzy Neural Control System (ASFNCS) is 
introduced to provide appropriate control inputs while coping 
well with disturbance and nonlinear dynamics. In the 
simulation, it is verified that the proposed method is useful in 
the point of performance of the leader-following formation 
control. 
Keywords-formation control; linear sliding mode control; 
terminal sliding mode control; auto-structuring fuzzy neural 
network 
I. 
 INTRODUCTION  
Recently, formation problems have attracted more 
researchers as their importance and necessity are known 
widely. For example, Hou et al. [1] proposed a robust 
adaptive control approach to solve a consensus problem of 
Multi Agent Systems (MAS), Song et al. [2] and Cheng et al. 
[3] dealt with leader-follower consensus problem. Defoort et 
al. [4], Morbidi et al. [5] proposed a formation following 
control using sliding mode control, a kind of representative 
robust control methods. Cui et al, [6] dealt with leader-
follower formation control of underactuated autonomous 
underwater vehicles. Yu et al. [7] dealt with time-varying 
velocity cases of a distributed leader-follower flocking 
control for multi-agent dynamical systems. In the view point 
of controllers using soft computing tools, Chang et al. [8] 
used fuzzy, Lin [9] used fuzzy basis function network, Chen 
et al. [10] used neural networks, Lin et al. [11] used 
reinforcement Q learning method, for formation control. 
However, designed controller structures for these formation 
or consensus problems are fixed, therefore, their methods are 
no flexible for changes of environments and they have 
possibility of useless computation load. Many of the control 
methods mentioned above are using linear sliding mode 
control method. Recently, terminal sliding mode control 
method has been used for constructing the following 
controller because of its superiority on fast finite time 
convergence and less steady state errors to objective states of 
the agents, Yu et al. [12], Zou et al. [13], Chang et al. [14].  
We 
have 
already 
proposed 
the 
leader-following 
formation control method, Obayashi et al. [15] that had the 
following three features; use of linear sliding mode control, 
and the controller had the optimal structure, named ASFNCS, 
using self-structuring algorithm adapting to change of 
environments making use of the concept of Cheng et al. [16] 
and then introducing of making only use of the positions of 
agents without velocities of them.   
In this paper, we consider to apply the superior point of 
the terminal sliding mode control to our previous work, 
Obayashi et al. [15], that is, to switch the linear sliding mode 
control and terminal one appropriately. 
The rest of the paper is as follows: in Section II 
preparation to be required to follow the paper. The structure 
of the proposed system are described in Section III. The 
controller design is described in Section IV.  In Sections V, 
VI, and VII, learning algorithm, following control problem 
and computer simulation are described, respectively. We 
have a conclusion in Section VIII. 
II. 
PREPARATION 
The dynamics of each agent consisting of MAS is 
described as following the 
n th
 order nonlinear differential 
equation, 
 
1
1
)
(
)
,
(
,
)
,
(
)
( ,
)
,
(













 

ASFNS
ASFNS
n
ASFNS
ASFNS
ASFNS
ASFNS
ASFNS
n
h u
u
f
h u
h u
u
f
d
u
f
u
f
x
x
x
x
x
        (1) 
where 
n
T
n
R
x
x
x


 ]
[
)1
(


x
: observable states of 
the agent, 
f (x)
: unknown continuous function, h  : a 
predefined constant, 
uASFNS
 : control input, 
1
: term 
including the indefinite term 
)
,
(
f x uASFNS
 of the agent and 
the disturbance. 
1  is assumed that 
1
1
  D
. Here, 
1
D is a 
predefined positive constant. 
130
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

III. 
STRUCTURE OF THE PROPOSED SYSTEM 
 
The proposed system in this paper is shown in Figure 1.  
 
Other agent
( Observed  object )

Exchange of information
ASFNCS
(Controller)
Virtual agent 
Target
x
x 
,
xv xv

,
tx
ve
r
uASFNS


Other agent
( Observed  object )


e
e 
,
Agent
(Controlled object)
 
 
Figure 1. Structure of the proposed multi agent control system. 
 
The objective of the control: The derivation of the control 
law which makes the orbit x  of the states of the agent  
follow the reference orbit 
xv
accurately. We define the 
following error vector 
]
,
[ , ,
( 1)

e n
e e
 
e
 as  
 
x
x
e


v
,                              (2) 
 
where
v
x : the reference vector, that is, their virtual agent 
state vector followed by its own agent. The virtual agent has 
its position and velocity decided by observing the position of 
the leader (see Section VI). 
      
IV. 
CONTROLLER DESIGN 
Figure 2 shows the ASFNCS. The ASFNCS consists of 
the fuzzy neural network controller with function of node 
adding/pruning (Auto-structuring FNNC) and the robust 
controller. 
A    Fuzzy neural network controller (FNNC) 
Figure 3 shows the structure of the FNNC. 
k , output of 
k th node of the hidden layer, means the fitness of rule k . 
 
       



















n
i
ki
ki
i
k
m
e
1
2
2
1
exp
)
(

e
  ,                   (3) 
                           
, )
,1
(
R
k
 
 , 
                                     (4) 
 
 
where 



kn
k
ki
k
kn
k
ki
k
m
m
m



,
,
,
,
,
,
,
2
2




σ
m
 are 
center and width vectors of the th
k
rule output function, 
respectively. R  is the number of the rule nodes. 
uasfnn
is the 
output of the FNNC. 
k  is the weight between the k th rule 
node and the output of the FNNC. 
 
Controller parameter 
estimation law
Robust
controller
Parameter
estimation law
Sliding
variable
Node 
pruning 
process
FNN controller
Node adding
process


ASFNS
u
s
Su
th

th

th

c

c
asfnn
u
Rˆˆ
R
R mR
ˆ
ˆ
ˆ
ˆ , ˆ , ˆ


Rˆ
P
Rˆ
Rˆ
a
Rˆ
Auto-structuring fuzzy neural network
ˆ
e
 
Figure 2. Structure of theASFNCS. 
 
 
    Figure 3. Structure of the FNNC. 
 
The output       of ideal controller is like that,  
 
                                      (5)  
 
 
 
 
However,      would not be used for controller design actually 
(see Sectiuon IV B).       
The estimated value            of the optimal FNNC           is 
as follows, 
 
                           (6) 
*
u
aproximate  d optimal FNNC.
        
difference  between ideal controller and
  
,
1
1
*
1
*
1
*
*
：
　　
　











R
k
k
k
uasfnn
u
uˆasfnn　

asfnn
u
,
ˆ
ˆ
ˆ
1
　




R
k
k
k
uasfnn

*
u
,
1
　




R
k
k
k
uasfnn

131
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

 
where 
k
ˆ  is the estimate value of the optimal 

k . 
 
B. Auto structuring mechanism of FNNC 
 
 Node adding:  Nodes adding process is as follows, 
 
, ( )
,2,1
),
max(
max
R t
k
k





,            (7) 
 
where 
R(t)
 is the number of the node at time t. When the 
next relation exits, 
 
max  th
 ,                                            (8) 
 
where  
th [ ,0 ]1
is a pre-defined threshold and given by 
trial and error, a new node 
c
  is added and the center and 
width of the node are like this, 
          
, ),
,1
, (
( 1),
n
i
e
m
c
ai
R
i
Rai







   (9) 
where 
c
is a predefined positive constant and the 
weight
Ra
 between the new node and the output is set as 
c
Ra



 ,                                             (10) 
where
a
R  is number of the added node.  
  
 Node pruning:  Nodes pruning process is as follows, 
the cost function for measuring the important index 
k
 of the 
node k  is defined as, 
2
ˆ
1
1
)
ˆ
2 (
1






R
k
k k
u
E

,                     (11) 
using the Taylor series expansion, where the parameter falls 
intou the local minimum, the sensitivity of 
E1
for  
k
ˆ becomes next equation,  
   
R
k
E
k
k
k
, ˆ
,2,1
) ,
2 ( ˆ
1
( ˆ )
2
1








.          (12) 
Here, we define the important index of the node as 








( ˆ )]
[
( ) exp
)1
(
1
k
th
k
k
E
E
t
t






,       (13) 
and
[]
 function to decide whether make
k
 decrease is 
defined as   









0
( ˆ )
if
0
0
( ˆ )
if
1
( ˆ )]
[
1
1
1
k
th
k
th
k
th
E
E
E
E
E
E







.       (14) 
This means that if the rule k  is not activated enough, that 
is,
0
1( ˆ )


k
th
E
E

, then, 
k
  decreases. If
th
k
  
, the node 
k  is considered as unnecessary node and it is deleted. Here 
th
 is a predefined positive constant and given by trial and 
error. The number of deleted nodes is presented as 
p
Rˆ .The 
output 
uasfnn
 of the FNNC introducing the auto-structuring 
mechanism is as follows,  




p
p
R
u
p
R
p
p
u
k
R
k
k
uasfnn

  




ˆ
1
ˆ
1
ˆ
ˆ


 ,                      (15) 
where 
R
u is the output after adding new nodes and, 
p
u is the 
output after pruning nodes. With (15), we get  
 
                    
                            
 (16) 
 
where 



ˆ
~



. 
 
C. Stability analysis 
 
The structure of the auto-structuring fuzzy neural control 
system (ASFNCS) is shown in Figure 2. The output 
uASFNS
 
of the ASFNCS is as follows, Cheng et al. [16],  
s
asfnn
ASFNS
u
u
u


,                                             (17) 
uasfnn
is described by  (15), and 
su is the output of the robust 
controller. To derive an adaptive controller, we define the 
sliding variable s as 
 











t
n
q
p
n
n
n
n
edt
k
e
k
e
k
k e
e
s
2 0
1
1
2)
(
1
)1
(
)
1(



 ,     (18) 
where each of all the cofficients
k is pre-defined positive 
constant, 
)1
(0
  

is a parameter. When 
0.1
,0.0
 
 , 
sliding variable (18) can be regarded as LSM, TSM, 
respectively. In this paper,  changes  nonlinearly  from 
0.1
 
to 
0.0
 during the controller working. 
The  p  and q  are positive odd integers, which satisfy the 
following condition: 
                   
  
q
p

.                                           (19) 
 
Then, a sliding mode controller can be designed as follows : 
H ,
E
SMC
u
u
u


                                              (20) 
 An equivalent controller 
E
u is expressed as  
            
)
)
1(
(
2
1
1
1)
(
1
)
(
, )
(
1
e
k
e
p e
q
k
e
k
k e
x
f
h
u
n
p
q
n
n
n
n
v
n x u
E


 















(21) 
     
1sgn( ),
s
uH  D
                                                  (22) 
Using (1), (2),(18) and (21), we get  
).
(
)
1(
2
1
1
)1
(
1
)
(
ASFNS
n
p
q
n
n
n
n
u
u
h
e
k
e
p e
q
k
e
k
k e
e
s









 










  
(23)
 
Using Eq. (16), Eq. (23) can be rewritten as  
,
~
ˆ
~
ˆ
1


 






　
R
k
k
k
asfnn
asfnn
u
u
u
132
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

).
~
(
)
(
ˆ
1
s
R
k
k
k
s
asfnn
u
h
u
u
h u
s

 










     (24) 
In this paper, the robust controller is used to eliminate the 
effect of error . Consider the Lyapunov function candidate 
in the following form: 
  
2
ˆ
1
2
2
~
2
~
2
2
1






h
h
s
V
R
k
 k 


　
＋
.              (25) 
Take the derivative of Eq.(25) and using Eq.(24), it is 
concluded that 
 









 







 






R
k
s
k
k
R
k
k
k
u
s
s
h
h
h
ss
V
ˆ
1
ˆ
1
1 ~~
)
(
~
~
~~
~
~








 











　
＋
.  (26) 
For achieving
V  0
, the adaptation law and the robust 
controller are chosen as 
 
R
k
s
k
k
, ˆ
,2,1
,
ˆ
~





 
 



,          (27) 
ˆ sgn( ),
s
us
 
                          (28) 
,
ˆ
~
 


  
 


                        (29) 
where 

 and

 are positive constants. Then Eq. (26) can 
be rewritten as 
0
)
(
}
{
}
)ˆ
(
ˆ
{










s
h
s
s
h
s
s
h s
V









.   (30) 
If 
  
, 
V  0
holds. By Barbalat’s Lemma,
s  0
 as 
t  
, then the stability is guaranteed. 
                         
V. 
LEARNING ALGORITHM 
We introduce the online learning algorithm to adjust the 
parameters of ASFNS, Cheng et al. [16]. We derive the 
algorithm the gradient-decent method. First, the adaptive law 
shown in (27) can be written as  
  
 
k
k
s


ˆ
.                                          (31) 
According to the gradient-decent algorithm, the 
adaptive law of  ˆ  also can be represented as  
2]
[
[3]
2
3]
[
3]
[
3]
[
[3]
2
2
ˆ
ˆ
ˆ
k
o
k
o
o
o
o
k
y
y
E
net
net
y
y
E
E






















 ,  (32) 
where 
2
2
)
1 2(
x
x
E
v 

is defined as the cost function. 
From Figure 3, (3), and (4), 


 
 


n
i
ki
ki
i
k
m
e
net
1
2
2
)1
(
[2]
ˆ ) ( ˆ )
(

, 
)
exp(
[2]
2]
[
k
k
net
y

,
k
k
k
k
k
k
o
y
y







ˆ
ˆ
[2]
[3]
,
 in the [*]
 
means the number of layer in Figure 3. Thus the Jacobian 
term 
s
y
E
 o 

3]
[
2
is obtained through observation of (31) 
and (32). Thus, the adaptive law for the estimation terms of 
means 
mˆki
, and variance  
ˆki
 can be derived as 
 
,
ˆ )
(
ˆ )
2(
ˆ
ˆ
ˆ
ˆ
2
2
1)
(
2]
[
2]
[
2]
[
2]
[
3]
[
[3]
2
2
ki
ki
i
k
k
m
ki
k
k
k
k
o
o
ki
m
ki
m
e
s
net
net
y
y
y
y
E
m
E
m
























      (33)                       
        
,
)
(
ˆ )
2(
ˆ
ˆ
ˆ
ˆ
2
2
1)
(
2]
[
2]
[
2]
[
2]
[
3]
[
[3]
2
2
ki
ki
i
k
k
m
ki
k
k
k
k
o
o
ki
ki
m
e
s
net
net
y
y
y
y
E
m
E


























     (34)
                           
where 
m
 ,

  are positive constants. 
 
A. The algorithm of ASFNCS 
Step 1 Initialize the parameters of ASFNCS. 
Step 2 Calculate s using  (18).  
Step 3 Calculate 
uasfnn
using  (15) and update  
  


ˆ
,ˆ m,ˆ
 using  (32)-(34). 
Step 4 Calculate 
su using  (28) and adjust ˆ   
     using  (29). 
Step 5 Calculate  
uASFNS
using  (17) and input  
   it to the agent. 
Step 6 If the controlling time is over, the simulation  
   ends, else go to Step 2. 
 
VI. 
LEADER-FOLLOWING FORMATION CONTROL 
PROBLEM 
 The dynamics  (1) of the th
i
agent in multi agents is 
rewritten as  
 
i ASFNC
i
i
i
i
u
d
x t
f t x t
t
x
,
( ))
( ),
( ,
( )





,            (35) 
 
where t : time,
T
i
i
i
x
x
x
)
,
(
2
1

, 
T
i
i
i
x
x
x
)
,
(
  1 2
: the position, 
velocity of the agent, respectively. 
2
( ))
( ),
( ,
R
x t
t x t
f
i
i


: a 
term 
including 
the 
nonlinearity
2
T
2
1
)
,
(
R
u
u
u
i
i
ASFNS


,
2
2
1
,
)
,
(
R
u
u
u
T
i
i
i ASFNC


: control input to the th
i
 agent, 
di  R2
 : disturbance. In this paper, we consider the 
following control method that make the agents follow and 
catch the leader keeping the formation by the group, Cui et al. 
[6]. We assume that agents could exchange only positions 
information of the agents each other. Observing only the 
position of the leader, each agent constructs the virtual orbit 
to the leader. Realizing this virtual orbit by the virtual agent, 
and the agent follows its own agent. The following describes 
the method of following the leader by the virtual agent. 
133
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

 The following error of the th
i
virtual agent is expressed 
as    







 i
N
j
j
i
i
t
i
i
vi
z
z
x
z
e
)
)
((
)
)
((


,   (36) 
where 
vi
e :consensus error,
i ,
i
z  x
)
(
i
vi
i
  x  x
, 
xt  R2
 : 
the position of the leader in a 2-dimension space.  
The following error  
xei
 of the 
i th
 virtual agent 
considering the integral term to reduce the steady state error 
is expressed as  
 


t
vi
i
vi
ei
e dt
e
x
0

 ,              (37) 
 
where 
T
i
i
i
]
,
[
  1 2
 , the derivative of 
i with respect to 
time is defined as 
     
    
ei
i
i
i
 Kx
 
)
(
1 

 ,                            (38) 
 
where 
)] ,
tanh(
),
tanh(
[
)
(
2
2
1
1
1
T
i
i
i
i
 

 




 
K  diag [
]
,
2
1
kv kv
,
0
(0)

i
.  
 The velocity 
vi
x  of the th
i
virtual agent is  defined as  
 
        
( )
)
(
2
1
i
i
i
i
xvi


 



 ,             
(39) 
 
where
T
v
i
v
v
i
v
i
i
k
k
k
k
)]
tanh(
),
tanh(
[
)
(
2
2
1
1
2





 , 
 
k ,
are positive constants. 
VII. COMPUTER SIMULATION 
We demonstrate the effectiveness of our proposed 
method by trying to following the leader (target) by the multi 
agent constructing by four agents.  
 The horizontal and vertical direction of velocity of the 
leader are
.0 02cos( .0 05 )
1
t
xt 

,
.0 015sin( .0 03 )
2
t
xt 

 , 
respectively, and the initial position of the leader is given 
as
T
tx
 [ 0,0 ]
. The initial horizontal and vertical positions of 
the agents are both given randomly in the range of
[ 5,5 ]
, 
and the initial velocities of all the four agents are equal to 0. 
The parameters used in the simulation are shown in Tables I 
and II. The dynamics and disturbances of the each agent are 
given as   









)
sin(
)
cos(
)
cos(
)
sin(
( ))
( ),
,
(
1
2
2
2
1
1
i
i
i
i
i
i
i
i
x
x
x
x
x
x
f t x t x t





 ,       (40) 















 





 





 
2 )
cos(
sin( )
) ,
cos(
cos(2 )
) ,
cos(
sin( )
,
)
sin(
2 )
sin(
4
3
2
2
1
t
t
d
t
t
d
t
t
d
t
t
d
 . (41) 
 
       
  
Figure 4.  Network structure of multi agents. 
 
The information exchanges among agents each other are 
carried out according to Figure 4. Each agent behaves 
dispersive and cooperatively through information exchanges 
and follows the leader, taking the predefined formation. In 
this simulation, from Figure 4, only agent 1 and 2 can 
observe the position of the leader and the agent 4 can 
observe the positions of the agent 1 and 3, and so on. 
Sampling time is 
[ ]
.0 01
s and total controlling time is 50 
[sec].  
  Each of Figures 5-11 has 5 orbits; red is for target 
(leader), other 4 orbits are for follower agebts. The orbits of 
the target and follower agents in the case of the conventional 
method, LSM, are shown in Figure 5. Figure 6 is the 
enlarged figure of the transient (initial part of) positons of the 
leader and follower agents. The orbits of the leader and 
agents in the case of the conventional method, LSM, are 
shown in Figure 7. Figure 8 is the enlarged figure of the 
transient (initial part of) positons of the agents and the leader. 
Comparing these four figures, TSM method is superior to the 
LSM method in the point of consensus error of the positions 
of transient states of the leader and follower agents. However, 
the consensus error of them in the point of the steady state by 
LSM method is smaller than those of TSM method.  
 
TABLE I. PARAMETERS OF THE VIRTUAL AGENT.  
    
 
 
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Parameter 
Setting value 
1,2
 
0.015 
2
1,
kv kv
 
0.025 
 
TABLE II. PARAMETERS OF THE  ASFNCS.  
     
Parameter 
Setting value 
1k  
2 
2k
 
3 
th
  
0.3 
c
 
2 
c  
0 
c
  
0.5 
Eth
 
0.00001 
  
0.002 
th
 
0.05 

 
1
 

 
0.02
 
 ,
m
 
0.0015 
 
134
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

  
 
Figure 5. Trajectories of all the agents using LSM (
  0
in (18)) . 
 
 
Figure 6. Transient trajectories of all the agents using LSM (
  0
).  
 
Figure 7. Trajectories of all the agents using TSM(
 1
in (18)) . 
 
\   Figure 8. Transient  trajectories of all the agents using TSM  (
 1
 ). 
 
 
 
Figure 9. Trajectories of all the agents using TLSM. 
 
 
Figure 10. Transient trajectories of all the agents using T LSM.  
 
Figure 11. Trends in distances error between a leader and all follower agents. 
 
Figures 9-10 show the results using our proposed LSM 
and TSM combined control, changing in (18)  from 1.0 to 
0.0 nonlinearly. Figure 11 shows trends in the consensus 
error between a leader and all follower agents for LSM and 
TLSM. From Figure 11, it can be found that consensus error 
by our proposed method is smaller than that of the 
conventional LSM method.  
In order to confirm that our method is superior to the 
LSM method, we adopted the next performance index J, 
average error area; 













4
1
2
2
0
( ,)
1
i
Fi
L
Fi
L
T
t
y
y
x
x
e
e t
T
J
,          (42) 
    
135
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

where 
T 
means 
controlling 
time, 
 
]
,
[
l
l
L
x x
x


, 
]
,
[
l
l
L
y
y
y


mean position and velocity vectors in x  
direction and y direction of the leader, respectively. 
xFi
 and 
xFi
 mean those of the ith follower agent. 
J
e,
mean sum of 
consensus errors of between the leader and all the follower 
agents at time t, average consensus error area, respectively. 
Table 3 shows comparison of the control performances, that 
is, transient consensus error and average error area. Table 3 
shows our proposed method is superior to the conventional 
LSM method 
VIII. CONCLUSION 
In this paper, we proposed the simple and useful method, 
that is, an adaptive LSM and TSM combined formation 
controller design method with auto- structuring fuzzy neural 
network. Additionaly, feature of  the proposed method is that 
all the agents can exchange only information of positions 
according to the network structure of multi agents like Figure 
4, making velocities of their virtual agents, and it has the 
variable structure to adapt for changes of the environment.  
 
 
TABLE III. PERFORMANCE COMPARISONS OF 
BOTH METHODS. 
 
Transient consensus error 
agent 
a_1 
a_2 
a_3 
a_4 
Total 
LSM 
0.148 0.161 0.234 
0.24 
0.78 
TLSM 
(Proposed) 
0.14 
0.145 0.226 0.237 0.748 
Average consensus error area 
agent 
a_1 
a_2 
a_3 
a_4 
Total 
LSM 
0.356 0.368 0.535 0.541 
1.8 
TLSM 
(Proposed) 0.316 0.321 0.478 0.489 1.604 
 
 
REFERENCES 
[1] Z. G. Hou, L. Cheng, and  M. Tan, “Decentralized robust 
adaptive control for the multiagent system consensus  
problem using neural networks”, IEEE Transactions on 
Systems, Man, Cybernetics-Part B: Cybernetics, vol. 39, 
no. 3, pp. 636-647.  
[2] Q. Song, J. Cao, snd W. Yu, ”Second-order leader-
following consensus of nonlinear multi-agent systems via 
pinning control”, Systems & Control Letters 59, 2009, pp. 
553-562.  
[3] L. Cheng, Z. G.  Hou, M. Tan, Y. Lin, and W. Chang, 
“Neural-network-based adaptive leader-following control 
for multiagent systems with uncertainties”,   IEEE 
Transactions on Neural Networks, vol. 21, no. 8,  2010, 
pp. 1351-1358.  
[4] M. Defoort, T. Floquet, A. Kokosy, and W. 
Perruquetti, 
”Sliding-mode 
formation 
control 
for 
cooperative 
autonomous 
mobile 
robots”, 
IEEE 
Transactions on Industrial Electronics, vol. 55, no. 11, 
2008, pp. 3944-3953.    
[5] F. Morbidi and D. Prattichizzo,”Sliding mode formation 
tacking control of a tractor and trailer –car system”, 
Robotics Science and Systems online proceedings, 2007.   
[6] R. Cui, S. S. Ge, B. V. E. How, and Y. S. Choo, “Leader-
follower formation control of underactuated autonomous 
underwater vehicles”, Ocean Engineering, vol. 37, no. 
17-18, 2010, pp. 1491-1502.  
[7] W. Yu, G. Chen, and M. Cao, “Distributed leader-
follower flocking control for multi-agent dynamical 
systems with time-varying velocities ” , System ＆ 
Control Letters 5, 2010, pp. 543-552.  
[8]  Y. H. Chang, C. W. Chang, C. L. Chen, and C. W. Tao, 
“Fuzzy sliding-mode formation control for multirobot 
systems: design and implementation”, IEEE Transactions 
on Systems, Man, and Cybernetics-Part B: Cybernetics, 
vol. 42, no. 2, 2012, pp. 444-457.  
[9] Chuan-Kai Lin,”Robust adaptive critic control of 
nonlinear systems using fuzzy basis function networks: 
An LMI approach”, Information Sciences, 177, 2007, pp. 
4934-4946. 
[10] C. L. Chen, G. X. Wen, Y. J. Liu, and F. Y. Wang, 
“Adaptive consensus control for a class of nonlinear 
multiagent time-delay systems using neural networks”, 
IEEE Transactions on Neural Networks and Learning 
Systems, vol. 25, no. 6,  2014, pp. 1217-1226.  
[11] J. L. Lin, K. S. Hwan, and Y. L. Wan,”A simple scheme 
for formation Control based on weighted behavior 
learning ”,  IEEE Transactions on Neural Networks and 
Learning Systems, vol. 25, no. 6,  2014, pp. 1033-1044.  
[12] 
X. 
Yu, 
M. 
Zhihong, 
Y. 
Feng, 
and 
Z. 
Guan, ”Nonsingular Terminal sliding mode control of a 
class of nonlinear ”, IFAC, 15th Triennial World 
Congress, Barcelona, Spain, 2002.   
[13] A. M. Zou, K. D. Kumar, Z. G. Hou, and X. Liu, ”Finite 
time attitude following control for spacecraft using 
terminal sliding mode and Chebyshev neural network”, 
IEEE Transactions on Systems, Man, and Cybernetics-
Part B: Cybernetics, vol. 41, no. 4, 2011, pp. 950 - 963.  
[14] Y. H. Chang, C. Y. Yang, W. S. Chan, C. W. Chang, 
and C. W. Taol, “Leader-following formation control of 
multi-robot systems with adaptive fuzzy terminal sliding-
mode controller”, IEEE International Conference on 
System Science and Engineering, 2013.  
[15] M. Obayashi, Y. Yokoji, S. Uchiyama, L. B. Feng, T. 
Kuremoto, and K. Kobayashi, “Intelligent Following 
control method of a leader by Groups of agents with  
nonlinear dynamics”, Proc. of 11th International 
Conference on Control, Automation and Systems, Korea, 
2011.   
[16] K. H. Cheng, “Auto-structuring fuzzy neural system for 
intelligent control”, Journal of Franklin Institute, 346, 
2009, pp. 267-288.    
 
 
136
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-390-2
COGNITIVE 2015 : The Seventh International Conference on Advanced Cognitive Technologies and Applications

