Applying Lomb Periodogram to Round-trip Time Estimation 
from Unidirectional Packet Traces with Different TCP Congestion Controls 
Toshihiko Kato, Xiaofan Yan, Ryo Yamamoto, and Satoshi Ohzahata 
University of Electro-Communications 
Tokyo, Japan 
e-mail: kato@is.uec.ac.jp, yanxiaofan@net.is.uec.ac.jp, ryo_yamamoto@is.uec.ac.jp, ohzahata@is.uec.ac.jp 
 
Abstract‚ÄîNetwork operators often attempt to analyze traffic in 
the middle of their networks for various purposes.  In such 
traffic analysis, the estimation of Round-Trip Time (RTT) is 
indispensable.  Primarily, the RTT estimation is performed by 
consulting the relationship between a request and its response, 
such as a data segment and the associated ACK segment.  
However, in the middle of Internet, it is common that a network 
operator monitors traffic only in one direction.  In such a case, 
an operator is required to estimate RTT from unidirectional 
packet traces.  So far, several methods have been proposed for 
RTT estimation from unidirectional traces.  In this paper, we 
adopt the Lomb periodogram method and apply it to various 
TCP traces, collected through Ethernet or wireless LAN, with 
different congestion control algorithms.  As a result, the method 
can estimate RTT roughly, but the results are not accurate 
enough for subtle analysis, such as congestion window 
estimation.   
Keywords- Unidirectional Packet trace; Round-trip Time; 
Lomb Periodogram; Congestion Control. 
I. INTRODUCTION 
Traffic analysis in the middle of Internet is an important 
issue for network operators.  It can be applied the traffic 
classification, the traffic demand forecasting, and the 
malicious traffic detection.   In the previous paper, we 
proposed a method to infer TCP congestion control algorithm 
from passively collected packet traces [1].  It adopts the 
following approaches. 
(1) Focus on a specific TCP flow using source/destination IP 
addresses and ports. 
(2) From the mapping between data segments and 
acknowledgment (ACK) segments, estimating Round-
Trip Time (RTT) of the focused flow.   
(3) Estimate a congestion window size (cwnd) from the data 
size transferred during one RTT. 
(4) Obtain a sequence of cwnd values, and calculate a 
sequence of cwnd difference between adjacent cwnd 
values (we call ‚àÜcwnd).   
(5) From the mapping between cwnd and ‚àÜcwnd, infer a 
congestion control algorithm for the TCP flow.   
This method requires a bidirectional trace to obtain both data 
and ACK segments.   
In actual networks, however, it is often possible that only 
unidirectional traces are collected in the middle of networks.  
In this case, the above method cannot be applied.  So, in 
another previous paper, we tried to modify the above method 
to 
infer 
TCP 
congestion 
control 
algorithms 
from 
unidirectional traces [2].  In the modified method, a fixed time 
duration is used instead of RTT, and data size transferred 
during this duration was handled as cwnd.  As a result, 
congestion control algorithms were estimated in some cases, 
but not in other cases.  This is because our method depends 
largely on RTT value.   
On the other hand, the estimation of RTT from traces has 
been actively studied and there are several proposals [3]-[6].  
The RTT estimation methods proposed so far are classified 
into three categories.  One is a method called Data-to-ACK-
to-Data, which measures time between a data segment and the 
data segment sent just after the first data segment is ACKed 
[3]-[5].   This requires bidirectional packet traces and our first 
paper used it.  Next is a method based on the autocorrelation 
[4][5].  This method counts the number of data segments in a 
short interval, and makes an array of counts indexed by the 
normalized interval.  Then, it calculates the autocorrelation 
over the array and takes the maximum as a RTT.  This method 
can be applied to unidirectional packet traces.  The third one 
is use of spectral analysis [5][6].  A sequence of data segments 
are handled as a pulse function of time, which takes 1 when 
there is a data segment.  Then, the frequency characteristic of 
this function is analyzed and the inverse of first harmonic is 
taken as RTT.  Since the interval of data is irregular, the 
special analysis is performed by the Lomb periodogram [7].   
For the purpose of precise RTT estimation from 
unidirectional traces, we adopt the third method because it can 
work for various type of traffic [5].  In this paper, we apply 
the Lomb periodogram to the RTT estimation from 
unidirectional packet traces, which we used in our previous 
papers, including different TCP congestion control algorithms, 
and discuss the results in detail.  The rest of this paper is 
organized as follows.  Section II explains the related work, 
including the problems we suffered from in our second 
previous paper [2] and the conventional RTT estimation 
methods.  Section III describes a detailed scheme to estimate 
RTT using the Lomb periodogram.  Section IV gives the 
results of RTT estimation for different TCP congestion 
control algorithms.  In the end, Section V concludes this paper.   
II. RELATED WORK 
A. Problems on congestion window size estimation from 
unidirectional traces 
In our previous papers [1][2], we collected packet traces 
in the configuration shown in Figure 1.  A TCP data sender is 
connected with a bridge through 100 Mbps Ethernet.  The 
bridge inserts 100 msec RTT (50 msec delay for each 
direction) and 0.01% packet losses.  The bridge is connected 
with a TCP data receiver through IEEE 11g wireless LAN 
1
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

(WLAN) or 100 Mbps Ethernet.  The packet trace is collected 
at the TCP sender side.  The collected traces include 
bidirectional ones, and in the unidirectional analysis, we 
picked up only data segments from the TCP sender to the TCP 
receiver.   
Figures 2 and 3 show the results for CUBIC TCP [8] and 
TCP Vegas [9].  In the analysis a from bidirectional trace, 
cwnd and ‚àÜcwnd are estimated in the way described in Section 
I, and their relationship is given in the figures (by blue dots).  
In the analysis from a unidirectional trace, we assumed that 
RTT is 100 msec. The data size transferred during 100 msec 
and its difference are called sentData and ‚àÜsentData, 
respectively, and shown in the figures by orange dots.  In the 
case of CUBIC TCP, both results show the similar graph, 
which is a function in the form of (‚àöùëêùëõùë§ùëë
3
)
2 with decreasing 
and increasing parts [1].  This result means that the 
unidirectional analysis works well.  In the case of TCP Vegas, 
however, the results for bidirectional analysis and 
unidirectional analysis are significantly different.  According 
to the Vegas algorithm, ‚àÜcwnd takes 1,460 bytes (one segment 
size), 0, or -1,460 bytes independently of cwnd values, which 
is represented by the blue dots [1].  But, in the result for 
unidirectional analysis, the ‚àÜsentData values indicated by the 
orange dots are unstable.  So, the unidirectional analysis does 
not work well.   
In our experiment, the trace for CUBIC TCP is collected 
in the configuration that uses Ethernet between the bridge and 
the TCP receiver, and that for TCP Vegas is collected by use 
of WLAN.  This is one of the reasons.  Figure 4 shows 
examples of the time variation of TCP sequence number for 
CUBIC TCP and TCP Vegas.  In the case of CUBIC TCP, 
data segments are transferred in groups and there are idle time 
periods without any data transmissions.  Therefore, in the 
unidirectional analysis, a sequence of data segments sent 
within a congestion window can be traced by use of 100 msec, 
which is a RTT determined tentatively.  But, in the case of 
TCP Vegas, data segments are transmitted contiguously, and 
therefore, if RTT is not estimated correctly, a sentData value 
does not match the real cwnd value.   
There considerations mean that the RTT estimation is 
critical for inferring TCP congestion control algorithms.   
B. Related work on RTT estimation 
As described in Section I, the RTT estimation methods are 
classified into three categories; the Data-to-ACK-to-Data 
method, the autocorrelation based method, and the spectral 
analysis method.   
 
Figure 1.  Experiment configuration. 
 
Figure 2.  Result for CUBIC TCP [1][2]. 
 
Figure 3.  Result for TCP Vegas [1][2]. 
-4000
-2000
0
2000
4000
6000
8000
10000
12000
100000
200000
300000
400000
500000
cwnd/sentData (byte)
Œîcwnd/ŒîsentData (byte)
ŒîsentData
Œîcwnd
-40000
-30000
-20000
-10000
0
10000
20000
30000
40000
-2000
-1500
-1000
-500
0
500
1000
1500
2000
20000
40000
60000
80000 100000 120000 140000
ŒîsentData (byte)
Œîcwnd (byte)
cwnd/sentData(byte)
Œîcwnd
ŒîsentData
 
 
Figure 4.  Sequence number vs. time. 
89.2
89.4
89.6
89.8
90
90.2
90.4
90.6
37.8
37.85
37.9
37.95
38
38.05
38.1
38.15
sequence number (MB)
time (sec)
(a) CUBIC TCP
23.9
23.92
23.94
23.96
23.98
24
24.02
24.04
24.06
58.7
58.75
58.8
58.85
58.9
sequence number (MB)
time (sec)
(b) TCP Vegas
2
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

The Data-to-ACK-to-Data method is illustrated in Figure 
5.  Since there is some transmission delay between a TCP data 
sender and a monitor capturing packet traces, the following 
procedure is used to estimate RTT between sender and 
receiver.  (1) A monitor focuses on a data segment, and 
remembers the time (t1).  (2) A monitor catches the ACK 
segment that acknowledges the data segment.  (3) A monitor 
detects the data segment sent by the sender just after the ACK 
segment in (2), and remember the time (t2).  (4) t2 ‚Äì t1 is a 
RTT for this moment.  In order to detect data segment (3), the 
TCP time stamp option is used.   
In the autocorrelation based method, the RTT estimation 
is performed once per measurement interval T.  An array ùëÉ[ùëõ] 
maintaining the count of data segments is prepared using unit 
time ‚àÜùë°, where n is ranging from 0 to ùëá ‚àÜùë°
‚ÅÑ
‚àí 1.  If a data 
segment is detected at an interval [ùë†ùë°ùëéùëüùë° ùë°ùëñùëöùëí + ùëö ‚àô ‚àÜùë°,
ùë†ùë°ùëéùëüùë° ùë°ùëñùëöùëí + (ùëö + 1) ‚àô ‚àÜùë°), one is added to ùëÉ[ùëö].  For all 
the data segments from start time to start time +T, the array 
ùëÉ[ùëõ] is arranged.  After that, the autocorrelation function is 
defined as 
ùê¥(ùëô) = 
1
ùëá ‚àÜùë°
‚ÅÑ
‚àíùëô ‚àë
ùëÉ[ùëó] ‚àô ùëÉ[ùëó + ùëô]
ùëá ‚àÜùë°
‚ÅÑ
‚àíùëô
ùëó=1
.    (1) 
for lags ùëô = 0 ‚ãØ ùëá ‚àÜùë°
‚ÅÑ
‚àí 1.  RTT is computed as max(ùê¥).  
This method can be applied to the unidirectional analysis, and 
will work well for the cases that data segments are distributed 
unevenly in a trace, such as the case of CUBIC TCP in Figure 
4.  However, for an evenly distributed trace, such as the case 
of TCP Vegas in Figure 4, it is concerned that RTT cannot be 
estimated correctly.   
The spectral analysis method will be the most promising 
for RTT estimation among the three methods. Traditional 
spectral analysis, such as Fast Fourier Transform (FFT) 
assume that time domain data are regularly sampled [10].  
However, in the RTT estimation, the time domain data is 
packet inter-arrival time of a specific flow.  This data is 
sampled at each data packet capturing.  This means that the 
time domain data in this case is irregularly sampled.  In the 
case of the spectral analysis for irregularly sampled data, the 
Lomb periodogram is commonly used [6].  The details are 
shown in the next section.   
III. RTT ESTIMATION USING LOMB PERIDGRAM 
In the RTT estimation based on the Lomb periodogram, 
time sequence {ùë°ùëñ} (ùëñ = 1, ‚ãØ )  is considered as an input, 
where ùë°ùëñ corresponds to one data segment capturing time.  At 
a specific time ùë°ùëò, the frequency characteristic of this time 
sequence is calculated using N time samples ùë°ùëò‚àíùëÅ+1, ‚ãØ ùë°ùëò in 
the following way (ùëÅ > ùëò) [6].   
ÔÅ¨ The minimum and maximum frequencies of the range for 
power spectrum are defined as  
ùëìùëò
ùëöùëñùëõ =
1
ùë°ùëò‚àíùë°ùëò‚àíùëÅ+1 and ùëìùëò
ùëöùëéùë• =
ùëÅ
2 ùëìùëò
ùëöùëñùëõ. 
Accordingly, the power spectrum is calculated for 
angular frequency  
ùúîùëñ = 2ùúãùëìùëò
ùëöùëñùëõ + ùëñ‚àÜùúî  (ùëñ = 0, . . . 2ùëÅ ‚àí 1), 
where ‚àÜùúîÔºù2ùúã
ùëìùëò
ùëöùëéùë•‚àíùëìùëò
ùëöùëñùëõ
2ùëÅ
.   
ÔÅ¨ The power spectrum at angular frequency ùúîùëñ is defined 
as  
ùëÉùëò
ùëÅ(ùúîùëñ) =
1
2ùúéùëò
2 {
[‚àë
ùëÅ‚àí1(‚Ñéùëò‚àíùëó‚àí‚ÑéÃÖùëò)ùëêùëúùë†ùúîùëñ(ùë°ùëò‚àíùëó‚àíùúèùëò)
ùëó=0
]
2
‚àë
ùëÅ‚àí1 ùëêùëúùë†2
ùëó=0
ùúîùëñ(ùë°ùëò‚àíùëó‚àíùúèùëò)
+
[‚àë
ùëÅ‚àí1(‚Ñéùëò‚àíùëó‚àí‚ÑéÃÖùëò)ùë†ùëñùëõùúîùëñ(ùë°ùëò‚àíùëó‚àíùúèùëò)
ùëó=0
]
2
‚àë
ùëÅ‚àí1 ùë†ùëñùëõ2
ùëó=0
ùúîùëñ(ùë°ùëò‚àíùëó‚àíùúèùëò)
}                      (2) 
where ‚ÑéÃÖùëò and ùúéùëò
2 are the mean and variance of N samples 
of ‚Ñéùëò: 
 
‚ÑéÃÖùëò =
1
ùëÅ ‚àë
‚Ñéùëò‚àíùëó
ùëÅ‚àí1
ùëó=0
                                  (3) 
 
ùúéùëò
2 =
1
ùëÅ‚àí1 ‚àë
‚Ñéùëò‚àíùëó
2
‚àí
ùëÅ
ùëÅ‚àí1 ‚ÑéÃÖùëò
2
ùëÅ‚àí1
ùëó=0
,           (4) 
and where  is the solution of: 
 
ùë°ùëéùëõ(2ùúîùëñùúèùëò) =
‚àë
ùë†ùëñùëõ2ùúîùëñùë°ùëò‚àíùëó
ùëÅ‚àí1
ùëó=0
‚àë
ùëÅ‚àí1 ùëêùëúùë†2ùúîùëñùë°ùëò‚àíùëó
ùëó=0
.              (5) 
From the 2ùëÅ ‚àí 1power spectrum values specified in an 
ùúî ‚àí ùëÉ(ùúî)  plane, local maximum values are calculated.  
Among the frequencies generating local maximum power 
spectrum values, the fundamental frequency ùëì0 is estimated 
under the condition that other frequencies generating local 
maximum values are multiples of ùëì0.  At last, ùëá = 1 ùëì0
‚ÅÑ  is the 
estimated RTT.   
IV. RESULTS OF APLYING  PERIDGRAM TO VARIOUS 
CONGESTION CONTROL ALGORITHMS 
This section describes the results of RTT estimation for 
various types of TCP traces with different congestion control 
algorithms.  We use the packet traces used in our previous 
papers [1][2].  As described in Section II.A, these traces are 
collected at the sender side in the configuration shown in 
Figure 1.  Since packet losses are inserted at the bridge, we 
picked up a part of packet traces where no packet losses are 
detected, that is, where the sequence number of TCP segments 
keeps increasing.  The traces themselves have bidirectional 
packet information and only the capturing time of data 
segments is extracted to build unidirectional traces.  Together 
with the extraction, the real RTT is calculated from the 
mapping between data segments and ACK segments.   
A. Result for traces including TCP Reno  
TCP Reno is a classic congestion control method which 
adopts an additive increase and multiplicative decrease 
(AIMD) algorithm.  Here, cwnd is increased each time the 
TCP sender receives an ACK segment acknowledging new 
data.  The increase is 
1
ùëêùë§ùëõùëë segments during the congestion 
avoidance phase, and as a result, cwnd is expected to be 
increased by one segment during one RTT.   
 
Figure 5.  Data-to-ACK-to-Data method. 
Receiver
Sender
Data (1)
Monitor
Data
Data (3)
ACK (2)
t1
t2
t3
3
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

The Reno packet trace we used here is collected in the 
network configuration with Ethernet (see Figure 1), and we 
picked up a part from 27.010458 sec. to 45.99513 sec. in the 
trace, where there no retransmissions are detected for 7068 
data segments.  We used N = 500 in calculating the Lomb 
periodogram.   
Figure 6 shows a result of RTT estimation from the Reno 
trace.  Figure 6(a) is the result for periodogram at time 
28.156143 sec.  The horizontal axis is an angular frequency 
and the vertical axis is a periodogram.  This figure shows there 
are several peaks periodically.  Figure 6(b) zooms up the low 
angular frequency part of Figure 6(a).  It shows that there are 
harmonized frequencies such that there are large periodogram 
values at some frequencies which are integral multiple of a 
specific frequency (fundamental frequency ùëì0).  In Figure 6(b), 
angular frequencies 60.069583, 120.117243, and 180.164902 
are those frequencies.  From this result, we can conclude that 
2œÄùëì0 =  60.069583.  So, we obtain ùëì0 =  9.56037123 and 
RTT = 1 ùëì0
‚ÅÑ
= 0.10459845 sec.   
We conducted similar calculations for multiple points of 
time in the trace and obtained the estimated RTT as shown in 
Figure 6(c).  This figure also gives actual RTT values obtained 
from data and ACK segments in the original trace information.  
This result says that, although the actual RTT is extremely 
stable at 100 msec, the estimated RTT includes some errors in 
the order of 10 msec.  The reason that the actual RTT is stable 
is that this experiment is conducted through only Ethernet and 
that there are no large delay variations.  However, the RTT 
estimation by use of the Lomb periodogram cannot reflect this 
situation.   
B. Result for traces including CUBIC TCP  
As described in Section II.A, CUBIC TCP defines cwnd 
as a cubic function of elapsed time T since the last congestion 
event [8].  Specifically, it defines cwnd by (6). 
ÔÄ†
ùëêùë§ùëõùëë = ùê∂ (ùëá ‚àí ‚àöùõΩ ‚àô
ùëêùë§ùëõùëëùëöùëéùë•
ùê∂
3
)
3
+ ùëêùë§ùëõùëëùëöùëéùë•ÔÄ†
ÔÄ®ÔÄ∂ÔÄ©ÔÄ†
Here, C is a predefined constant, ùõΩ is the decrease parameter, 
and ùëêùë§ùëõùëëùëöùëéùë• is the value of cwnd just before the loss 
detection in the last congestion event.  Comparing with TCP 
Reno, cwnd increases faster in CUBIC TCP.   
We estimated RTT from the unidirectional packet trace 
including only data segments with CUBIC TCP.  The trace is 
collected in the configuration using only Ethernet.  We picked 
up a part in the trace from 23.483123 sec. to 38.348383 sec. 
for the RTT estimation.  By applying the Lomb periodogram 
similarly with the case of Reno, we obtained estimated RTT 
as shown in Figure 7.  This figure also gives actual RTT values.   
The results show that the actual RTT is stable at 100 msec. 
and, on the other hand, the estimated RTT changes a lot 
between 90 msec. and 140 msec.  The fluctuation is larger for 
CUBIC than TCP Reno.  Especially, the difference between 
the estimated RTT and the actual RTT becomes large when 
the time is between 36 sec. and 38 sec.  During this period, the 
cwnd value itself becomes large and the large cwnd value may 
give some bad influence to the RTT estimation.   
 
(a) periodogram at time 27.03713 sec. 
 
(b) zooming up low angular frequency part 
 
(c) estimated RTT and actual RTT 
Figure 6.  RTT estimation from Reno trace. 
0
0.2
0.4
0.6
0.8
1
1.2
1.4
0
200
400
600
800
1000
1200
1400
periodogram
angular frequency
0
0.2
0.4
0.6
0.8
1
1.2
1.4
0
50
100
150
200
250
300
periodogram
angular frequency
(60.069583, 0.839296)
(120.117243, 0.942619)
(180.164902, 0.722356)
80
90
100
110
120
27
32
37
42
47
RTT/estimated RTT (msec)
time (sec)
estimated RTT
RTT
 
Figure 7.  RTT estimation from CUBIC trace.   
80
90
100
110
120
130
140
24
26
28
30
32
34
36
38
RTT/estimated RTT (msec)
time (sec)
estimated RTT
RTT
4
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

C. Result for traces including TCP Vegas 
TCP Vegas estimates the bottleneck buffer size using the 
current values of cwnd and RTT, and the minimal RTT for the 
TCP connection, according to (7) [9].   
ÔÄ†
ùêµùë¢ùëìùëìùëíùëüùëÜùëñùëßùëí = ùëêùë§ùëõùëë √ó
ùëÖùëáùëá‚àí ùëÖùëáùëáùëöùëñùëõ
ùëÖùëáùëá
ÔÄ†
ÔÄ®ÔÄ∑ÔÄ©ÔÄ†
At every RTT interval, Vegas uses this BufferSize to 
control cwnd in the congestion avoidance phase in the 
following way.   
 
‚äøùëêùë§ùëõùëë = {
1         (ùêµùë¢ùëìùëìùëíùëüùëÜùëñùëßùëí < ùê¥)
  0  (ùê¥ ‚â¶ ùêµùë¢ùëìùëìùëíùëüùëÜùëñùëßùëí ‚â¶ ùêµ)
‚àí1        (ùêµùë¢ùëìùëìùëíùëüùëÜùëñùëßùëí > ùêµ)
ÔÄ†
ÔÄ®ÔÄ∏ÔÄ©ÔÄ†
Here, A = 2 and B = 4 (in unit of segment) are used in the 
Linux operating system.   
We estimated RTT from the unidirectional packet trace 
including only data segments with TCP Vegas.  In this case, 
in contrast with the above cases, the trace is collected in the 
configuration using WLAN.  We picked up a part in the trace 
from 37.988347 sec. to 59.699611 sec. for the RTT estimation.  
By applying the Lomb periodogram to this time sequence, we 
obtained estimated RTT as shown in Figure 8, with actual 
RTT values.   
In this case, the estimated RTT is stable around 100 msec, 
and on the other hand, the actual RTT values are scattered 
between 100 msec. and 140 msec.  That is, although the actual 
RTT is changing, the RTT estimated by the Lomb 
periodogram does not follow the fluctuation.  As we indicated 
in Section II.A, the timing of capturing data segments is 
almost uniformly distributed in this case.  As a result, it is 
considered that the Lomb periodogram method cannot detect 
the actual RTT.   
D. Result for traces including TCP Veno  
TCP Veno (Vegas and ReNO) is an example of hybrid 
type congestion control method, considering packet losses and 
delay.  It uses the BufferSize in (7) to adjust the growth of 
cwnd in the congestion avoidance phase as follows.  If 
ùêµùë¢ùëìùëìùëíùëüùëÜùëñùëßùëí > ùêµ (B is the Vegas parameter B), cwnd grows 
by 1/cwnd for every other new ACK segment, and otherwise, 
it grows in the same manner with TCP Reno.  That is, when 
the congestion status is heavy, i.e., the bottleneck buffer size 
is large, the increasing rate of cwnd is halved.   
We estimated RTT from the unidirectional Veno trace 
captured in the WLAN configuration in Figure 1.  We picked 
up a part in the trace from 37.684643 sec. to 52.653736 sec. 
including 23,360 data segments.  By applying the Lomb 
periodogram to this sequence, we obtained estimated RTT as 
in Figure 9, which also gives the actual RTT.   
Similarly with the case of TCP Vegas, the estimated RTT 
is rather stable around 100 msec., which is different from the 
actual RTT spreading in the rage between 100 msec. and 130 
msec.   
V. CONCLUSIONS 
This paper described the results of applying the Lomb 
periodogram method to estimating RTT from unidirectional 
packet traces including TCP segments with different 
congestion control algorithms, TCP Reno, CUBIC TCP, TCP 
Vegas, and TCP Veno.  Among them, the packet traces for 
TCP Reno and CUBIC TCP are collected in the network 
configuration using only Ethernet, and those for TCP Vegas 
and TCP Veno are from WLAN configuration.  The 
performance evaluation gave the following results.   
First of all, the Lomb periodogram method was possible to 
estimate an approximate RTT values from unidirectional 
packet traces. Strictly speaking, however, the estimated RTT 
values have some errors and they are not tolerable for the 
approaches that require accurate RTT estimation, such as our 
method to infer the TCP congestion algorithms from 
unidirectional packet traces [2].  Moreover, although the 
experiments adopted here added a fix delay, actual TCP 
communications suffer from variable delay like Bufferbloat 
[12].  So, the accurate estimation will be more difficult in real 
environments.   
The second point is that the estimation is affected largely 
by the network configuration, such as with Ethernet or with 
WLAN.  It is also affected somehow by the congestion control 
used in packet traces.  In our experiment, the traces of TCP 
Reno and CUBIC TCP were collected in an Ethernet 
configuration.  In this case, the actual RTT was stable and the 
estimated RTT was fluctuated.  In the CUBIC TCP trace, 
where the congestion control is more aggressive, the errors of 
the estimated RTT increased.  On the other hand, the traces of 
TCP Vegas and TCP Veno were collected in a WLAN 
configuration.  In this case, while the actual RTT was 
 
Figure 8.  RTT estimation from Vegas trace.   
 
Figure 9.  RTT estimation from VENO trace.   
80
100
120
140
160
180
40
45
50
55
60
RTT/estimated RTT (msec)
time (sec)
estimated RTT
RTT
80
90
100
110
120
130
140
150
160
37
39
41
43
45
47
49
51
53
RTT/estimated RTT (msec)
time (sec)
estimated RTT
RTT
5
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

fluctuated, the Lomb periodogram method could not estimate 
this fluctuation and the estimated RTT was stable.   
Since it is difficult to estimate RTT correctly from 
unidirectional packet traces, we need to develop a new method 
to 
infer 
TCP 
congestion 
control 
algorithms 
from 
unidirectional traces.   
REFERENCES 
[1] T. Kato, A. Oda, C. Wu, and S. Ohzahata, ‚ÄúComparing TCP 
Congestion Control Algorithms Based on Passively Collected 
Packet Traces,‚Äù IARIA ICSNC 2015, pp. 135-141, Nov. 2015.   
[2] T. Kato, L. Yongxialee, R. Yamamoto, and S. Ohzahata, ‚ÄúHow 
to Characterize TCP Congestion Control Algorithms from 
Unidirectional Packet Traces,‚Äù IARIA ICIMP 2016, pp. 23-28, 
May 2016.   
[3] H. Jiang and C. Dovrolis, ‚ÄúPassive Estimation of TCP Round-
Trip Times,‚Äù ACM SIGCOMM Comp. Commun. Rev. vol. 32, 
issue 3, pp. 75-88, Jul. 2002.   
[4] B. Veal, K. Li, and D. Lowenthal, ‚ÄúNew Methods for Passive 
Estimation of TCP Round-Trip Times,‚Äù Passive and Active 
Nework Measurement, PAM 2005, LNCS, vol. 3431, pp. 121-
134.   
[5] R. Lance and I. Frommer, ‚ÄúRound-Trip Time Inference Via 
Pasive Monitoring,‚Äù ACM SIGMETRICS Perf. Eval. Rev., vol. 
33, issue 3, pp. 32-38, Dec. 2005.   
[6] D. Carra et al., ‚ÄúPassive Online RTT Estimation for Flow-
Aware Routers Using One-Way Traffic,‚Äù NETWORKING 
2010 LNCS6091, pp. 109-121, 2010.   
[7] J. Scargle, ‚ÄúStatistical aspects of spacial analysis of unevently 
spaced data,‚Äù J. Astrophysics, vol 263, pp. 835-853, Dec. 1982.   
[8] S. Ha, I. Rhee, and L. Xu, ‚ÄúCUBIC: A New TCP-Friendly 
High-Speed TCP Variant,‚Äù ACM SIGOPS Op. Syst. Review, 
vol. 42, issue 5, pp. 64-74, Jul. 2008.   
[9] L. Brakmo and L. Peterson, ‚ÄúTCP Vegas: End to End 
Congestion Avoidance on a Global Internet,‚Äù IEEE J. Sel. 
Areas Commun., vol. 13, no. 8, pp. 1465-1480, Oct. 1995.   
[10] S. Kay and S. Marple, ‚ÄúSpectrum analysis; A modern 
perspective,‚Äù Proc. of the IEEE, vol. 69, issue 11, pp. 1380-
1419, Nov. 1981.   
[11] C Fu and C. Liew, ‚ÄúTCP Veno: TCP enhancement for 
transmission over wireless access networks,‚Äù IEEE J. Sel. 
Areas Commun., vol. 21, no. 2, Feb. 2003.   
[12] S. Strowes, ‚ÄúPassively Measuring TCP Round-trip Times,‚Äù 
ACM Queue, vol. 11, issue 8, pp. 1-12, Aug. 2013.   
 
6
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-652-1
ICIMP 2018 : The Thirteenth International Conference on Internet Monitoring and Protection

