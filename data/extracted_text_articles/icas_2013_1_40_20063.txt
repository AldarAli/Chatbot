Autonomous Systems: from Requirements to Modeling and Implementation 
 
Nikola Šerbedžija  
Fraunhofer FOKUS 
Berlin, Germany 
nikola.serbedzija@fokus.fraunhofer.de 
 
 
Abstract—Developing autonomous systems requires adaptable 
and context aware techniques. The approach described here 
decomposes a complex system into service components –
functionally simple building blocks enriched with local 
knowledge attributes. The internal components’ knowledge is 
used 
to 
dynamically 
construct 
ensembles 
of 
service 
components. Thus, ensembles capture collective behavior by 
grouping service components in many-to-many manner, 
according to their communication and operational/functional 
requirements.  Linguistic constructs and software tools have 
been developed to support modeling, validation, development 
and deployment of autonomous systems. A strong pragmatic 
orientation of the approach is illustrated by two different 
scenarios. 
Keywords-autonomous systems; component-based system; 
context-aware systems 
I. 
INTRODUCTION 
Developing massively distributed systems has always 
been a grand challenge in software engineering [1,2,3]. 
Incremental technology advances have continuously been 
followed by more and more requirements as distributed 
applications grew mature. Nowadays, one expects a massive 
number of nodes with highly autonomic behaviour still 
having harmonized global utilization of the overall system. 
Our everyday life is dependent on new technology which 
poses extra requirements to already complex systems: we 
need reliable systems whose properties can be guaranteed; 
we expect systems to adapt to changing demands over a 
long operational time and to optimize their energy 
consumption [4,5].   
One engineering response to these challenges is to 
structure software intensive systems in ensembles featuring 
autonomous and self-aware behaviour [6,7]. The major 
objective of the approach is to provide formalisms, 
linguistic constructs and programming tools featuring 
autonomous and adaptive behavior based on awareness. 
Furthermore, making technical systems aware of the energy 
consumption contributes significantly to the ecological 
requirements, namely to save energy and increase overall 
system utilization. The focus here is to integrate the 
functional, operational and energy awareness into the 
systems providing autonomous functioning with reduced 
energy consumption. The rationale, expressing power and 
practical value of the approach are illustrated on e-mobility 
and cloud computing application domains. The two complex 
domains appear to be fairly different. However, taking a 
closer look at the requirements of the two scenarios it 
becomes noticeable that the problem domains share 
numerous generic system properties, especially seen from 
the optimized control perspective. 
The paper presents work in progress focusing on energy 
optimization in complex distributed control systems. It 
further elaborates methods and techniques to model and 
construct complex distributed systems with service 
components and ensembles. The rationale of the approach is 
presented through close requirements analysis, system 
modeling and development. The deployment is illustrated 
by the science cloud application scenario. Finally, the 
approach is summarized giving further directions for the 
work to come.  
II. REQUIREMENTS ANALYSIS 
To explore the system requirements, two complex 
application domains are closely examined: e-mobility 
control and cloud computing.  
E-mobility is a vision of future transportation by means 
of electric vehicles network allowing people to fulfill their 
individual mobility needs in an environmental friendly 
manner (decreasing polution, saving energy, sharing 
vehicels, etc).  
Cloud computing is an approach that delivers computing 
resources to users in a service-based manner, over the 
internet, thus re-inforsing sharing and reducing energy 
consumption). 
At a first glance electric vehicular transportation and 
distributed computing on demand have nothing really in 
common! 
A. Common Characteristics 
In a closer examination the two systems, though very 
different, have a number of common characteristics. 
1) Massive Distribution and Individual Interest 
E-mobility deals with managing a huge number of e-
vehicles that transport people from one place to another 
taking into account numerous restrictions that the electrical 
transportation means imposes.  
Each cloud computing user has also his/her individual 
application demands and interest to efficiently execute it on 
the cloud. The goal of cloud computing is to satisfy all these 
competing demands.  
Both applications are characterized with huge number of 
single entities with individual goals. 
21
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

2) Sharing and Collectiveness 
In order to cover longer distances, an e-vehicle driver 
must interrupt the journey to either exchange or re-charge 
the battery. Energy consumption has been the major 
obstacle in a wider use of electric vehicles. Alternative 
strategy is to share e-vehicles in a way that optimizes the 
overall mobility of people and the spending of energy.  In 
other words: when my battery is empty – you will take me 
further if we go in the same direction and vice versa [8]. 
The processing statistics show that most of the time 
computers are idle – waiting for input to do some 
calculations.  Computers belong amongst the fastest yet 
most wasteful devices man has ever made. And they 
dissipate energy too. Cloud computing overcomes that 
problem by sharing computer resources making them better 
utilized. In another words, if my computer is free – it can 
process your data and vice versa; or even better, let us have 
light devices and leave a heavy work for the cloud [9]. 
At a closer look “sharing and collectiveness” are 
common characteristics of both application domains! 
3) Awareness and Knowledge 
E-mobility can support coordination only if e-vehicles 
know their own restrictions (battery state), destinations of 
users, re-charging possibilities, parking availabilities, the 
state of other e-vehicles nearby. With such knowledge 
collective behavior may take place, respecting   individual 
goals, energy consumption and environmental requirements. 
Cloud computing deals with dynamic (re-)scheduling of 
available (not fully used) computing resources. Maximal 
utilization can only be achieved if the cloud is “aware” of 
the users’ processing needs and the states of the deployed 
cloud resources.  Only with such knowledge a cloud can 
make a good utilization of computers while serving 
individual users’ needs. 
At a closer look “awareness” of own potentials, 
restrictions and goals as well as those of the others is a 
common characteristic. Both domains require self-aware, 
self-expressive and self-adaptive behavior based on a 
knowledge about those “self*” properties.  
4) Dynamic and Distributed Energy Optimization 
E-mobility is a distributed network that manages 
numerous independent and separate entities such as e-
vehicles, parking slots, re-charge stations, drivers. Through 
collective and awareness-rich control strategy the system 
may dynamically re-organize and optimize the use of energy 
while satisfying users’ transportation needs. 
Cloud computing actually behaves as a classical 
distributed operating system with a goal to maximize 
operation 
and 
throughput 
and 
minimize 
energy 
consumption, performing tasks of multiple users. 
At a closer look “dynamic and distributed optimization” 
is inherent characteristic of the control environment for both 
application domains. 
 
TABLE I.  
COMMON CHARACTERISTICS 
Common 
feature  
Cloud computing  
E-Mobility  
Single entity 
Computing  
resource 
Vehicle, driver, park 
place, charging station 
Individual 
goal 
Efficient execution 
Individual route plan 
Ensemble  
application , cpu 
pool,  
Free vehicles, free 
park places, etc 
Global goal  
Resource 
availability, optimal 
throughput 
Travel, journey, low 
energy  
Self-
awareness  
avail-able 
resources; 
computational  
requirements, etc 
Awareness of own 
state and restrictions  
Autonomous 
and collective 
behavior  
Decentralized 
decision 
making, 
global optimization  
Reaching 
all 
destinations in time, 
minimizing costs 
Optimization  
Availability, 
computational task 
execution  
Destination achieve-
ment in time, ve-
hicle/infrastructure 
usage  
Adaptation  
According to avail-
able resources  
According to traffic, 
individual goals, in-
frastructure, resource 
availability  
Robustness  
Failing resources  
Range 
limitation, 
charging battery in-
frastructure resources  
 
B. Common Approach 
This set of common features serve as a basis for 
modeling of such systems leading to a generic framework 
for developing and deploying complex autonomic systems. 
The table 1 summarized the common requirements that lead 
to four major behavioral principles: adaptation, self-
awareness, knowledge and emergence. 
III. MODELING 
Control systems for the two application domains have 
many common characteristics: they are highly collective, 
constructed of numerous independent entities that share 
common goals. Their elements are both autonomous and 
cooperative featuring a high level of self-awareness and 
self-expressiveness.  A complex control system built out of 
such entities must be robust and adaptive offering maximal 
utilization with minimal energy and resource use.   
Formal specification, programming and controlling of a 
complex massively parallel distributed system that features 
awareness, autonomous and collective behavior, adaptive 
optimization and robust functioning are grand challenges of 
computer science.  These challenges, present in most of 
complex control systems, have served as motivation and 
inspiration for this approach [7]. 
 
22
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

-
e
c
T
e
o
a
d
A
d
c
i
a
w
O
t
l
h
A
F
f
(
c
Figu
A complex
- major ind
ensembles 
communicatio
 
SC –
that 
usual
 
SCE 
colle
repre
dyna
syste
The system str
Both com
elements used
on this declar
adaptive beha
Fig. 2 illus
distributed sys
At the first le
different 
sy
components. 
illustrated wh
according to 
ways of group
One compone
the same time
life time and 
happens as a s
A. Modeling 
Applying 
Fig. 2 to e-m
first level cou
(3) charging
components, w
ure 1.  Service  co
x system is de
dividual enti
- 
compositi
on and joint ne
– service comp
have their r
lly representin
– 
service
ctions 
of 
esenting collec
amically struct
em entities). 
ructuring is de
mponents and
d to express th
rative knowle
avior can be ac
strates an abst
stems with ser
vel the real sy
ymbols 
repre
At the upper
here componen
their require
ping, represen
ent can be a m
e. Ensembles 
according to 
system respon
e-Mobility wit
the general m
mobility scenar
uld be interpre
g stations a
where each co
omponents and th
ecomposed in s
ities, and s
ion 
structur
eeds of service
ponent are sin
requirements 
ng their individ
e 
component
service 
com
ctive system 
ture independ
epicted on Fig
d ensembles 
heir state and r
edge, awarene
chieved [7].  
tract view of m
rvice compone
ystem entities
esenting 
dif
r levels, diffe
nts can be lin
ements. There
nted by differe
member of dif
are not fixed,
the on-going 
nse to dynamic
th Ensembles 
modeling strat
rio, the differ
eted as (1) us
and (4) par
omponent has k
heir ensebles 
service compo
ervice comp
res 
that 
r
e components:
ngle system en
and function
dual goals, 
t 
ensembles
mponents 
u
goals (as mea
dent and distri
g. 1. 
have know
requirements. B
ess, emergenc
modeling mas
ents and ensem
s are presented
fferent 
types
erent grouping
nked in ensem
e may be dif
ent ensemble l
fferent ensemb
, during the s
states, re-gro
c changes. 
tegy as depict
rent symbols 
sers, (2) e-veh
rk places s
knowledge on
 
onents 
ponent 
reflect 
: 
ntities 
nality, 
s 
are 
usually 
ans to 
ibuted 
wledge 
Based 
ce and 
sively 
mbles. 
d with 
s 
of 
gs are 
mbles, 
fferent 
levels. 
bles at 
ystem 
ouping 
ted on 
at the 
hicles, 
ervice 
n its  
own
plan
A v
and
thei
com
typ
ens
com
form
des
wit
ens
sho
use
pos
B.
may
maj
the 
app
and
com
req
req
Figure 2. 
n state and n
n having a go
vehicle comp
d battery state.
ir availability
mponents of th
es with a hu
semble levels 
mponent types
m an ensembl
stination and a
th fully charge
semble of ava
ows the e-mob
e two vehicle
ssible charging
Modeling Clo
In a similar m
y represent a
jor system ele
first level
plications, (2) 
d (4) local app
mponent has 
quirements. A
quests for exe
 Modeling with 
needs. A user 
oal to reach di
onent has kno
. Park places a
y/reservation 
he e-mobility 
uge number o
show groupi
s, allowing use
le (with a com
a possibility to
ed batteries at
ailable vehicle
bility applicati
es, one parki
g stations. 
oud Computing
manner, the sam
an abstract clo
ements repres
(E1) could 
remote comp
plication servic
knowledge 
A user applic
ecution (in ter
components and 
component k
fferent places 
owledge abou
and charging s
plan. These 
scenario buil
of instances.  
ing according
ers with nearb
mmon goal to
o share the veh
t the same loc
es. The “En” 
ion with one 
ing place an
g with Ensemb
me model sho
oud computin
ented by diffe
be interprete
puter CPUs, (3
ce component
about its o
ation compon
rms of CPU, 
 
ensebles 
knows the rou
in a given tim
ut its occupan
stations mainta
 major serv
ld the individu
The E1and 
g to the serv
by destinations
o reach the sam
hicle) or vehic
ation to form 
ensemble lev
user planning
d a number 
bles 
own on the Fig
ng scenario. T
erent symbols
ed as (1) u
3) local memo
ts. Thereby, ea
own state a
nent knows t
minimal spa
ute 
me. 
ncy 
ain 
vice 
ual 
E2 
vice 
s to 
me 
cles 
an 
vel 
g to 
of 
g. 2 
The 
s at 
user 
ory 
ach 
and 
the 
ace, 
23
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

e
i
c
c
l
t
a
e
a
a
w
c
p
b
s
i
a
a
p
c
s
E
I
 
T
i
etc.). A remo
its processing
components 
components h
local compute
The E1and
to the service
appis of the 
ensemble or 
available CPU
application w
with a possib
configuration)
possibility to a
Table 2 su
both applicatio
TA
 
Symbols  
 
E-
 
 
 
 
C. SCEL Lan
The cha
systems is to f
individual vs.
and their ne
autonomous m
proposed [10,
composition 
system.   
The basic 
Ensemble Lan
I[K;∏; P] that
 
An in
other
 
Know
about
state 
allow
interl
 
A se
exter
 
A set
speci
mana
comm
The structure
illustrated in F
te computer c
g capabilities 
have knowle
have descriptio
er. 
d E2 ensemble
e component t
same type  w
different CP
Us. The “En” 
ith one user a
ility to migra
), using on
access a numb
ummarizes m
on scenario m
ABLE II.  
MA
-Mobility  
Users 
Electric vehic
Charging stati
Park places
nguage Progra
allenge for de
find proper lin
. collective re
eed to respon
manner.  A set
,11] that repr
supporting p
ingredient o
nguage is the 
t consists of: 
nterface I in 
r components. 
wledge repos
t component 
attributes et
ws for self-a
linking with o
t of policies 
rnal interaction
t of process P 
ific to both 
agement 
of 
munication. 
e and organiz
Fig. 3, 
component ha
and a curren
edge of the
ons of the av
e levels show 
types, allowin
with similar re
PUs to form
ensemble lev
appi running a
ate to another 
ne memory 
ber of local ap
major service 
mapping.   
AJOR SERVICE COM
 
Cloud
U
cles 
Rem
ons 
s 
Loca
amming Abstra
velopers of c
nguistic abstra
equirements o
nd to dynam
t of semantic 
resent behavio
programming 
of SCEL - So
notion of aut
a form of attr
sitory K man
interface, re
tc. Managing
aware behav
other system co
∏ that manag
n. 
 defines comp
the applica
f 
knowledge
zation of the 
as knowledge 
nt utilization. 
ir capacity. 
ailable appis
grouping acco
ng e.g. groupi
equests to for
m an ensemb
vel shows the 
at one remote
CPU (with s
resource wi
plications.   
components w
MPONENTS 
d computing 
User applications
mote computer CP
Local memory
al application serv
actions 
complex distri
actions to cope
of system ele
mic changes 
constructs has
ors, knowledg
of awarenes
oftware Comp
tonomic comp
ributes – visib
naging inform
equirements, 
g such know
vior and dyn
omponents. 
ge the interna
ponent functio
ation and in
e, 
polices 
SCEL notati
about 
Disk 
Appi 
at the 
ording 
ing of 
rm an 
ble of 
cloud 
e CPU 
imilar 
ith a 
within 
s 
PUs 
vices 
ibuted 
e with 
ments 
in an 
s been 
ge and 
ss-rich 
ponent 
ponent 
ble to 
mation 
major 
wledge 
namic 
al and 
onality 
nternal 
and 
ion is 
not
acti
SCE
pow
abs
abo
pro
dep
cov
is m
sce
IV
dep
end
abs
pro
gap
assi
A.
bee
pro
sys
jRE
in J
Systems:       
S ::= C  | S1 ǁ 
Processes: 
P ::= nil | а.P 
Actions: 
a ::= get(T)@
Targets: 
c ::= n | x| sel
The code abo
tation for S - s
ions and c -
EL syntax and
The SCEL
wer to expres
stract and rig
out system b
ogramming to
ployment. Form
vered in refere
more on prag
nario. 
V. DEVELOPIN
A way from 
ployment of 
deavor.  Reaso
stractions, wh
ogramming an
p a number of 
ist in the engin
Java  Framew
Checking 
To execute S
en developed
oviding mean
tems program
ESP API, a pr
Java applicatio
Figure 3.  SCE
                   
S2 | (νn)S       
|  P1 + P2 |  P1
@c |  qry(T)@c
lf | P |  Ι.p 
ove shows a f
systems, C - c
targets); a f
d semantics ca
L aggregates 
ss autonomic 
orous SCEL 
behavior, at 
ools to suppo
mal reasoning
enced articles 
gmatic orienta
G AND DEPLOY
high level m
software inte
oning and valid
hile impleme
nd low-level 
f intermediate 
neering proces
work for SCEL
SCEL program
d. This is a 
ns to develo
mmed in SCE
rogrammer ca
ons. 
EL elememnts 
             Com
              C ::=
[ P2 ]  |  X | A(p
c |  put(t)@c  | 
fraction of SC
components, P
fully detailed 
an be found in 
both semant
behavior. At 
allows for fo
another, it 
ort system de
g, modeling an
about SCEL.
ation on a gi
YING AUTNOM
modeling to d
nsive system
dation often re
entation call
deployments. 
tools are bein
ss [7,12]. 
L Programmin
ms, the jRESP
Java runtim
op autonomic
EL [13]. By 
an embed the 
 
mponents: 
= Ι[Κ,∏,P] 
p) 
 new(Ι,Κ,∏,P
CEL syntax (w
P - processes, 
presentation 
[10, 11]. 
tics and synt
one side, bei
formal reasoni
needs furth
evelopment a
nd validation 
 Here, the foc
iven applicati
MOUS SYSTEMS
development a
ms is a compl
equire high-lev
ls for detail
To bridge t
g developed th
ng and Model 
P framework h
me environm
c and adapti
relying on t
SCEL paradig
P) 
with 
a - 
of 
tax 
ing 
ing 
her 
and 
are 
cus 
ion 
S 
and 
lex 
vel 
led 
this 
hat 
has 
ent 
ive 
the 
gm 
24
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

j
F
v
s
s
g
g
a
t
v
e
c
s
B
p
r
s
t
a
h
a
h
t
p
p
1
r
a
s
P
f
2
p
l
t
e
a
a
i
p
n
u
c
a
e
b
e
A prototyp
jRESP simul
Following this
verify whethe
specific prope
statistical mod
given toleranc
guarantees tha
and the exact 
than p. 
The mode
verify reachab
evaluate the p
configuration 
satisfied [13]. 
B. Developing
Cloud 
co
programming 
resources in 
safety- and s
time-critical p
and to dynam
hostile and u
aspects make 
hard to design
taken here is t
peer configura
[9]. It closely 
previous secti
1) 
Service C
Each insta
running on a p
a service com
shows the f
Platform insta
further explor
2) 
Knowle
Each SCP
properties (se
load, availabl
through the n
each SCPi m
available kno
about its infra
in which prov
processor spe
number of cor
used memory,
SCPi 
pro
conditions (S
applications. F
execute an app
be interesting
example, an 
pe statistical m
lation environ
s approach, a 
er the implem
erty with a ce
del-checker is
ce t and error p
at the differen
ones is greate
el-checker inc
bility propertie
probability to 
where a give
 
g Science Clo
omputing 
is
and 
utiliz
a dynamic 
ecurity-critica
performance-b
mically adapt
uncertain envi
distributed cl
n, build, test,
the cloud as a
ation, meant t
 followed the 
ons. 
Components 
ance of the 
physical or vir
mponent in the 
functionality 
ance. Two m
red: knowledge
edge 
Pi has knowl
et by develop
le memory), 
network). Sinc
must build its
owledge. The 
astructure usin
vides informa
eed, available 
res etc. and dy
, disk space, o
operties 
are 
Service Leve
For example, 
plication, low
g. Other requ
application m
model-checkin
nment has b
randomized a
mentation of a
ertain degree 
s parameterize
probability p. 
nce between th
er than t with 
cluded in jRE
es. These prop
reach, within 
en predicate o
oud 
s 
a 
moder
zing 
distribu
way. Cloud-b
al systems; th
based quality o
t to changes 
ronment they
loud-based sy
, and verify. T
a platform wit
to execute sci
modeling app
Science Clou
rtual machine 
previous desc
required by 
major character
e and connect
edge consisti
ers), (2) its i
and (3) othe
ce there is no 
s own view 
SCPi may a
ng an infrastru
ation about sta
memory, av
dynamic value
or CPU load.  
important 
l Agreement
when looking
w latency betwe
uirements ma
may simply n
ng running on 
been implem
algorithm is u
a system satis
of confidence
ed with respec
The used algo
he computed v
a probability 
ESP can be us
perties allow o
a given deadl
on collected d
rn 
paradigm
uted 
infrastru
based system
hey need to s
of service prop
in the poten
y operate in. 
stems comple
The cloud sce
th voluntary p
ientific applic
proach describ
ud Platform (
 is considered
cribed sense. 
a Science C
ristics of SCP
tivity. 
ng of (1) its
infrastructure 
er SCPis (acq
global coordi
and act upo
acquire know
ucture sensing 
atic values, su
vailable disk s
s, such as cur
when 
spec
ts, SLAs) fo
g for a new SC
een the SCPs 
ay be harder
not fit on an 
top of 
ented. 
sed to 
sfies a 
e. The 
ct to a 
orithm 
values 
lower 
sed to 
one to 
line, a 
data is 
m 
for 
ucture 
ms are 
satisfy 
perties 
ntially 
These 
ex and 
enario 
peer-to 
ations 
bed in 
(SCP), 
d to be 
Fig. 4 
Cloud 
Ps are 
s own 
(CPU 
quired 
inator, 
on the 
wledge 
plug-
uch as 
space, 
rrently 
ifying 
or the 
CPi to 
might 
r: For 
SCPi 
bec
cert
3)
it t
foll
find
man
mec
for 
kno
data
as a
app
tho
com
con
Fur
gua
fun
The
ind
app
stan
lang
serv
mu
wor
etc.
whi
4)
ind
and
ens
app
the 
num
rest
them
cause of the la
tain amount o
Fi
Connectiv
Each SCPi ha
to talk to oth
lowed by the
d one anothe
nually enterin
chanism. Furt
knowledge a
owledge. Fina
a and applicat
Fig. 4 illustra
a part of a rich
plications. Thr
se of others 
mputing resour
As already in
nditions such 
rthermore, it 
arantee their S
nctionality is p
e 
adaptivity 
dependent, and
plications. The
ndard program
guages or rule
Finally, each
vice to upper 
ust implement 
rk with them 
.). One exam
ich allows use
Ensembles
A Science Cl
dividual SCPs 
d/or the SLA
semble consist
plication in a f
SLA of that
mber of SCPs
trictions on pr
At runtime, a
m depending 
ack of space w
f memory.  
igure 4.  Science 
vity 
as a connectiv
her SCPs ove
ese communic
er and estab
ng a network
thermore, SCP
and at the sam
ally, the protoc
tions. 
ates an instanc
h virtual fram
rough awaren
it offers max
rces within the
ndicated an SC
as overload, s
must watch 
SLAs (Service 
performed in a
logic 
is 
d has a dire
e adaptivity lo
mming langua
es.  
h SCPi provid
levels. The ap
some API fo
(i.e. starting, 
mple of an app
ers to store dat
s 
loud Platform 
based on a s
As of applica
ts of SCPs wh
fail-safe mann
t application, 
, certain laten
rocessing pow
an ensemble 
on the behavi
whereas anothe
Cloud Framewor
vity componen
er the networ
cations must 
blish links, f
k address or 
Ps must be able
me time distr
col must supp
ce of a science
mework for exe
ness of its own
ximal utilizati
e cloud.  
CPi is adaptive
shutdown of 
over the app
Level Agreem
an adaptivity lo
exchangeabl
ect relation t
ogic itself can
ge or custom 
des the applic
pplications run
or the platform
stopping, wo
p is the data 
ta in the cloud
Ensemble (S
set of propert
ations. In ano
hich work tog
ner and under 
which may r
ncy between th
wer or on memo
may gain new
ior of the SCP
er may requir
rk 
nt which enab
rk. The proto
enable SCPs 
for example 
by a discove
e to query oth
ribute their ow
port exchange
e cloud platfo
ecuting scienti
n properties a
ion of availab
e and can react
other SCPs, e
ps executed a
ment) [7,9]. T
ogic compone
le, 
applicatio
o the SLAs 
n be written in
domain-speci
cation executi
n on the platfo
m to be able 
orking with da
storage serv
d.  
CPe) consists
ties of the SC
other words,
gether to run o
consideration
require a cert
he parts, or ha
ory.  
w SCPs or lo
PIs themself a
re a 
 
bles 
col 
to 
by 
ery 
hers 
wn 
 of 
orm 
ific 
and 
ble 
t to 
etc. 
and 
This 
ent. 
on-
of 
n a 
ific 
ion 
orm 
to 
ata, 
vice 
s of 
CPs 
an 
one 
n of 
ain 
ave 
ose 
and 
25
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

also on the load generated by the application itself or other 
applications running on the SCPIs. 
C. Application Deployment 
Currently, a prototype of a science cloud platform is 
being developed and tested in a physical network 
connecting two universities [7]. The experimental platform 
does feature ad hoc and voluntary behavior supporting 
dynamic re-configuration of physical layers and application 
migration on an upper level. High-level SCEL modeling and 
model checking provide formal means for properties proofs 
while a prototype implementation offers pragmatic means to 
test deployment and effectiveness of autonomous and self-
aware behavior. 
V. CONCLUSION 
The paper presents a unified approach to model, validate 
and deploy complex distributed systems with massive 
number of nodes that respect both individual and global 
goals. Non-centralized character of the approach allows for 
autonomic and self-aware behavior, which is achieved by 
introduction of knowledge elements and enrichment of 
compositional 
and 
communication 
primitives 
with 
awareness of both system requirements and individual state 
of the computing entities.  
The essence of the approach is to de-compose a complex 
system into a number of generic components and to further 
compose the system into ensembles of service components.  
The inherent complexity of ensembles is a huge 
challenge for developers. Thus, the whole system is 
decomposed into well-understood building blocks, reducing 
the innumerable interactions between low-level components 
to a manageable number of interactions between these 
building blocks. The result is a so-called hierarchical 
ensemble, 
built 
from 
service 
components, 
simpler 
ensembles and knowledge units connected via a highly 
dynamic infrastructure. Ensembles exhibit four main 
characteristics: adaptation, self-awareness, knowledge and 
emergence, yielding a sound technology for engineering 
autonomous systems [5,7]. A number of linguistic 
constructs and validation and programming tools are under 
development and are being tested in different application 
scenarios. 
This paper presents an integrated view (from high level 
modeling to application deployment) of a complex approach 
which has been described by a number of referenced papers, 
each focusing on different aspects of the work: SCEL 
modeling [10,11] and system validation [13], adaptation 
aspects[8], knowledge management and deployments [8,9] 
and engineering aspects [5,7].  Further contribution of this 
paper is in optimized control based on awareness and 
autonomous behavior.  
Optimized distributed control with improved throughput 
and utilization of the cloud and e-mobility frameworks 
contribute significantly to the overall strategy to reduce 
energy consumption. Sharing principle instead of exclusive 
use of the computing and transportation means represent a 
significant challenge (requiring significant changes in our 
perception of vehicles and computers) in the application 
domains 
under 
consideration. 
This 
principle 
will 
undoubtedly play an important role in extending the 
application domains. 
ACKNOWLEDGMENT 
Most of the work presented here has been done under the 
ASCENS project (project number FP7- 257414) [7], funded 
by the European Commission within the 7th Framework 
Programme, pervasive adaptation initiative.  Special thanks 
go to the developers of SCEL language (Rocco De Nicola 
from IMT Lucca and his group) and the developers of cloud 
computing application (Philip Mayer and the whole 
ASCENS team from LMU Munich).   
REFERENCES 
[1] 
Project InterLink: http://interlink.ics.forth.gr [retrieved: Feb.2013]. 
[2] 
I. Sommerville et al., “Large-scale complex it systems”. Commun. 
ACM, vol.55,  no.7, 2012, pp.71-77. 
[3] 
M. Hoelzl, A. Rauschmayer, and M. Wirsing, “Engineering of 
software-intensive systems”, in Wirsing, M., Banatre, J.P., Hoelzl, 
M., Rauschmayer, A., eds.: Software-Intensive Systems and New 
Computing Paradigms. Vol.5380 of LNCS,  2008, pp.1-44. 
[4] 
L. Xu, G. Tan, X. Zhang, and J. Zhou, “Energy aware cloud 
application management in private cloud data center”, 2011 
International Conference on Cloud and Service Computing, 2011,  
pp.274-279. 
[5] 
C. Seo, “Energy-Awareness in Distributed Java-Based Software 
Systems”, 21st IEEE International Conference on Automated 
Software Engineering (ASE'06), 2006, pp.343-348. 
[6] 
M. Hoelzl and M. Wirsing, “Towards a system model for ensembles”, 
in G. Agha, O. Danvy, and J. Meseguer (eds.), Formal Modeling: 
Actors, Open Systems, Biological Systems, Lecture Notes in 
Computer Science Vol.7000, 2011, pp. 241–261. 
[7] 
Project ASCENS (Autonomic Service-Component Ensembles), 
http://www.ascens-ist.eu ASCENS, 2012, [retrieved: Feb.2013]. 
[8] 
D. Abeywickrama, F. Zambonelli, and N. Hoch, “Towards 
Simulating Architectural Patterns for Self-Aware and Self-Adaptive 
Systems”, In 2nd SASO Workshop on Awareness in Autonomic 
Systems, Lyon (F), 2012, pp.87-94. 
[9] 
P. Zormeier, A. Klarl, C. Kroiss, and P. Mayer, “Science Cloud: 
Modelling and Implementing the Peer-to-Peer DHT protocol 
’Chord’”, 
Technical 
Report, 
Ludwig-Maximilians-Universitt 
Mnchen, Germany, 2012. 
[10] R. De Nicola, G-L. Ferrari, M. Loreti, and R. Pugliese, “A Language-
based Approach to Autonomic Computing”, In Formal Methods for 
Components and Objects, vol.7542 Lecture Notes in Computer 
Science, 2012, pp.26-48. 
[11] R. De Nicola, M. Loreti, R.Pugliese, and F. Tiezzi, “SCEL: a 
language for autonomic computing”, Technical Report, [retrieved: 
Feb.2013]. 
[12] M.P. Ashley-Rollman, S.C. Goldstein, P. Lee, T.C. Mowry, and P. 
Pillai, “Meld: A declarative approach to programming ensembles”, 
In: IROS, IEEE, 2007, pp.2794-2800. 
[13] M. Loreti. jRESP: a run-time environment for scel programs, 
Technical Report,  http://rap.dsi.unifi.it/scel/, [retrieved: Feb.2013].
 
26
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

