Inﬁnite Impulse Response Filters for Nonuniform Data
Brigitte Bidegaray-Fesquet∗ and Laurent Fesquet†
∗Univ. Grenoble Alpes, CNRS, Grenoble INP, LJK, 38000 Grenoble, France
Email: Brigitte.Bidegaray@univ-grenoble-alpes.fr
†Univ. Grenoble Alpes, CNRS, Grenoble INP, TIMA, 38000 Grenoble, France
Email: Laurent.Fesquet@univ-grenoble-alpes.fr
Abstract—Capturing and storing samples only when needed is a
way to ensure a drastic reduction of the data to be processed,
which is a crucial issue in many applications, such as autonomous
and communicating smart devices (Internet of Things). This leads
to nonuniform data for which speciﬁc processing chains have to
be designed. In this paper, we discuss the issues to be address
to generalize Inﬁnite Impulse Response ﬁlters to the nonuniform
case. We illustrate the performance of the constructed ﬁlters on an
electrocardiogram signal, for two ways to obtain the nonuniform
samples, and select linear decimation and the bilinear scheme as
a good combination for this application.
Keywords–Nonuniform sampling; Inﬁnite Impulse Response
Filters;
Asynchronous
and
Event-Driven
Systems;
Electro-
cardiogramm.
I.
INTRODUCTION
For many applications, a way to drastically reduce the
number of data in order to make their processing tractable
with light platforms such as autonomous and communicating
smart devices (often named Internet of Things) is to only
capture and store samples when needed. For instance, analog-
to-digital converters capture samples only when events occur
or signals vary signiﬁcantly. This induces data that are sampled
irregularly in time, also called nonuniform data. The subject
on how to sample the right data for a target application is out
of the scope of this paper, but is an active research subject [1]
[2].
Usual signal processing chains strongly rely on the fact
that samples are taken regularly in time, or are the output of
decimated regular data. When addressing genuine nonuniform
data, we need to rethink the whole processing chain, in
particular ﬁltering devices.
Two main directions have been explored for constructing
nonuniform ﬁlters: 1. the use of existing ﬁlters, originally
designed for uniform signal and adapted to nonuniform signal
[3]–[7]; 2. the design of speciﬁc ﬁlters [8]. Here we explore the
ﬁrst direction, and more speciﬁcally Inﬁnite Impulse Response
(IIR) ﬁlters. The case of ﬁnite impulse ﬁlters is somewhat
simpler since the coefﬁcients of the ﬁlter in the time domain
can be directly used and there is only the need to interpolate
correctly both the signal and the ﬁlter [3]. As will be shown
in this paper, IIR ﬁltering has to stem from a continuous
representation of the ﬁlters in the Laplace domain, then in
the time domain, eventually discretized at the sampling times.
Other approaches in processing nonuniform sampled signals
may also be found, e.g., in [9] or [10].
The design ﬂow presented here has already been studied in
[11] and its performances illustrated on a toy signal, namely a
superposition of two sine signals. In particular, stability proofs
can be found there. In this paper, we are more precise on the
strategies to implement IIR ﬁlters on nonuniform data and give
a more realistic numerical illustration.
The outline is as follows. In Section II, we describe the
ﬁlter and the signal representation, and deﬁne most of the
useful notations for the sequel. We particularly justify the
choice of the state equation representation. In Section III, we
show various ways to discretize the state equation and recall
existing results on stability issues. In Section IV, we explore
the ﬁltering of an electrocardiogram (ECG) signal, using two
types of sampling, level-crossing and linear decimation.
II.
SIGNAL AND FILTER REPRESENTATIONS
In the usual uniform world, an IIR ﬁlter is often represented
thanks to a difference equation that links the new output sample
to previous samples of both the input and output signals. The
coefﬁcients in this difference equation are the feedforward and
feedback ﬁlter coefﬁcients. This representation of the ﬁlter
strongly relies on the fact that samples are uniformly spaced.
Another representation directly stems from the difference
equation using the Z-transform. Both these representations
are not possible to extend to a nonuniform context. A third
possible representation is the state representation, which makes
use of the representation of the ﬁlter in the Laplace domain. In
this representation the output signal Y is simply the product
of the ﬁlter transfer function H and the input signal I:
Y (s) = H(s)I(s). The ﬁlter transfer function can be written
as a rational function of the Laplace variable s:
H(s) =
PN
j=0 αjsj
PN
j=0 βjsj ,
where N is the ﬁlter order.
Coming back to the time domain, this is classically cast as
a system of ordinary differential equations
dx(t)
dt
=
Ax(t) + Bi(t),
(1)
y(t)
=
Cx(t) + Di(t),
(2)
where the state matrix A, the command vector B, the observa-
tion vector C, and the direct link coefﬁcient D are expressed
in terms of the αj and βj, j = 0, . . . , N. The advantage of
this formulation is that it addresses a priori a continuous time,
and can be considered at equally spaced time instants, in the
case of classical uniform signal, or at irregularly spaced time
instants in the nonuniform case, which we consider in this
paper.
A uniform signal is described by a series of amplitudes, and
the time delay between two samples is implicit, or even more
usually renormalized to 1. In the case of nonuniform samples,
67
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

time cannot clearly remain implicit and the samples consist
of amplitude–delay couples (an, dtn), where the delay dtn is
the time elapsed since the previous sample was taken (see
Figure 1). This choice, compared to the choice of amplitude–
time couples has two reasons. First, it has been applied
to systems in which the samples are captured on the ﬂy
thanks to an asynchronous technology where no global clock
synchronizes the whole system but where the synchronization
is implemented with local handshakes [12]. Second, as we will
see, the stability of the scheme depends on the values of the
delays and not the time instants themselves.
time
amplitude
a(t)
tn−1
an−1
tn
an
dtn
Figure 1. Non-uniform data.
In [11], the samples were collected using a level crossing
algorithm. This gives extra information on the signal, but this
is not an important feature for the application of a ﬁltering
scheme. In the world of nonuniform signals, we have to assume
at some point that the right samples have been taken for the
targeted application. In view of (2), it seems natural to deﬁne
and compute the state signal x(t) and the output signal y(t) at
the same time instants as the input signal. Another choice could
be made, but this would necessitate the interpolation of signals
and introduce interpolation errors. Hence, to an input signal
(xn, dtn) will naturally correspond an output signal (yn, dtn)
with the same time delays.
III.
DISCRETIZATION OF THE STATE EQUATION AND
STABILITY ISSUES
Once the ﬁlter is chosen and written in the state representa-
tion, there are various ways to discretize the system. Stability
is the main issue to address, as well as the ability to implement
efﬁciently the algorithm in an autonomous device.
A. Principle
The stability of the IIR ﬁlter depends on two choices: the
choice of the ﬁlter and the choice of the scheme to discretize
it. The impact of the choice of the ﬁlter is already present in
the continuous time domain. The criterion is the following:
the eigenvalues of the state matrix A should have a negative
real value. These eigenvalues are solution to the characteristic
polynomial of A which only depends on the feedback ﬁlter
coefﬁcients:
det(λId − A) = λN + βN−1λN−1 + · · · + β1λ + β0,
where Id is the N × N identity matrix.
In the time discretization of the state equation (1), the N
eigenvalues λ are transformed in the complex plane into a
set of N other eigenvalues µn = Tn(λ). For a constant time
delay, the new eigenvalues are the same for the whole ﬁltering
process. In the nonuniform case, the set of eigenvalues varies
through time, since it depends on dtn. Therefore, we have to
ﬁnd a scheme which is uniformly stable for a range of time
delays.
For the discretized scheme, the condition is that the eigen-
values lie in the unit circle of the complex plane. This can
be easily understood from the integral representation of the
solution to (1), namely
x(t) = eAtx(0) +
Z t
0
eA(t−τ)Bi(τ)dτ.
(3)
Indeed, the eigenvalues of A lie in the left half plane, if and
only if the eigenvalues of eAt lie in the unit circle.
B. A simple example: the Euler scheme
The simplest example to illustrate this principle is the Euler
scheme, although it will not prove to be a ”good” scheme. The
Euler scheme reads
xn − xn−1
dtn
= Axn−1 + Bin−1,
(4)
or equivalently
xn = (Id + dtnA)xn−1 + Bdtnin−1.
If we compare to the integral form, we see that eAdtn is
simply approximated by (Id + dtnA), and even by Id in the
integral which is calculated with a left rectangle method. Here,
Tn(λ) = 1 + dtnλ.
We have two ways to discuss this. If we want to address
with this scheme all possible IIR ﬁltering methods, with all
possible eigenvalues in the left half-plane. Then, we can only
say that Tn maps the left half-plane in an other half-plane (see
Figure 2) and certainly the Euler scheme will not lead to a
stable digital ﬁlter.
ℜ(λ)
ℑ(λ)
Tn
1
ℜ(µn)
ℑ(µn)
Figure 2. Action of the Tn transform for the Euler scheme. Eigenvalues λ
(left) and eigenvalues µn (right).
An other point of view is to compute the inverse transform
of the unit circle, which is also a circle for the Euler scheme,
as shown on Figure 3. If it contains all the eigenvalues λ of the
original ﬁlter, the discrete ﬁlter will be stable. This has to be
valid for all the values of dtn, i.e., for the maximum value of
dtn which yields the smallest inverse image of the unit circle.
This leads to give a maximal bound for the time delay, that is
to integrate these issues in the sampling procedure in a global
signal processing chain.
C. Review of other schemes
The discretization of the state equation is either made on
its integral form (3) or on the differential equation (1).
68
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

1
dtn
ℜ(λ)
ℑ(λ)
T −1
n
ℜ(µn)
ℑ(µn)
Figure 3. Backward action of the Tn transform for the Euler scheme.
Eigenvalues λ (left) and eigenvalues µn (right).
1) Discretization of the integral form: Some of schemes
are directly based on the integral formulation of the solutions.
This is the case in [5], where the only approximation consists
in replacing the continuous signal i(t) by a sample-hold or
piecewise linear interpolation on the time interval [tn−1, tn],
and compute exactly the integral. For example, for sample-hold
interpolation
xn = eAdtnxn−1 − A−1(Id − eAdtn)Bin−1.
(5)
Since eAdtn is not approximated, this leads by construction
to stable schemes. Another feature in this reference is the use
of cascading ﬁlters, splitting the original ﬁlter into second-
(or ﬁrst-) order ﬁlters. This leads to a simpler calculation of
exp(Adtn) and make possible the implementation on asyn-
chronous architectures [3] [13].
2) Discretization of the differential equation: The ﬁrst
example of this approach can be found in [6] [7] where they
use the bilinear method to approximate the time derivative in
(1):
xn − xn−1
dtn
= Axn + xn−1
2
+ B in + in−1
2
.
(6)
For this scheme, the eigenvalue transform is the homographic
function
Tn(λ) = 1 + dtnλ/2
1 − dtnλ/2,
which is well known to map the left half-plane in the unit
circle.
Other schemes have been reviewed in [11], backward Euler,
various Runge-Kutta schemes. The results are well-known
results when using difference methods to discretize ordinary
differential systems of equations. In particular it is possible
to construct unconditionaly stable implicit or semi-implicit
schemes, i.e., schemes that are stable whatever the value of
dtn. This is the case of the backward Euler and bilinear
methods. Explicit schemes, such as Runge-Kutta methods, can
be easier to implement but they will always have a stability
condition, and as for the Euler scheme an upper bound has
to be set on the intersample time. This has to be integrated
in the processing chain or, if no control on the input data is
possible, extra data has to be interpolated in very quiescent
parts of the signal. Practical implementations have shown that
the bound on dtn is not a crucial point and is not also a
practical technical issue for the asynchronous systems [14].
In [11], the complexities of the various schemes are also
compared. This proves not to be a crucial point either, if the
ﬁlters are decomposed in one- or two- order ﬁlters, to avoid
the computation of matrix exponentials.
TABLE I. COMPRESSION OF THE ECG SIGNAL VIA
LEVEL-CROSSING.
number of levels
4
8
16
number of samples
584
1377
2414
compression
2%
4.8%
8.5%
IV.
FILTERING AN ECG SIGNAL
To study the stability performances of the IIR ﬁlters in
[11] sine signals were chosen. These signals are always active
and no gain in the number of samples can be hoped since
even with a non-uniform sampling the Nyquist rate should be
ensured at last in average [15] [16]. If the signal frequency-
range is constant over the signal duration, no reduction of the
number of samples can be obtained, and since the processing
of the samples could be more complex when nonuniform,
the overall performances would be lower than with classical
uniform sampling and classical ﬁltering techniques. Notice that
this point is not obvious and the processing is not always more
costly such as in [17].
Here we consider an ECG signal. Such a signal is interest-
ing to address with nonuniform sampling, since it has quiescent
parts and for applications, such as pacemakers or disease
diagnosis, we very often want to isolate speciﬁc patterns in
the signal and not process the signal as a whole. The signal
shown in the next experiments has a 14.27 s duration which
corresponds to about 22 cardiac cycles. The initial signal,
sampled at 2000 Hz, has 28548 samples.
All the computations have been performed using the
SPASS Matlab toolbox [18].
A. Nonuniform sampling of the input signal
Two types of nonuniform sampling are explored, a level-
crossing sampling scheme and linear decimation, which can
be more or less assimilated to a slope crossing scheme.
1) Level-crossing:
A simple and widely used way of
nonuniformly sampling signals is level-crossing sampling [19]
[20] [10]. It consists in deﬁning levels within the range of the
input signal. These levels can be either equally spaced, for
simplicity or implementations reasons [3], or on the contrary
very carefully chosen in order to capture the important features
of the signal for a speciﬁc application [21].
Figure 4 displays the samples obtained of our ECG sample.
Here 8 equally-spaced levels have been chosen, which leads to
1377 samples, and hence 4.8% of the initial samples. To have
an idea of the compression obtained with this technique, we
give in Table I the number of samples and compression for 4,
8 and 16 levels.
2) Linear decimation: We propose here another way to
decimate the initial samples, which can be performed on the
ﬂy, which is of practical interest for hardware implementations.
The principle of this decimation is shown in Figure 5.
It consists in deﬁning a tolerance on the surface of the
polygon between the curve with all the initial samples and the
kept samples. Let us suppose that we begin with sample S1. If
the surface of the triangle S1S2S3 is above threshold, then we
keep S2 and explore the next samples taking S2 as new initial
sample. If this surface is below threshold, then we consider
the surface of the polygon S1S2S3S4, if it is above threshold,
69
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

0
5
10
15
time (s)
-1
-0.5
0
0.5
1
1.5
2
2.5
10-3
Levelcross sampling
initial
samples
Figure 4. 8-level-crossing sampling of an ECG signal.
S1
S2
S3
S4
Figure 5. Principle of linear decimation.
we keep S3 and take it a new initial sample, otherwise we go
on exploring S5, etc.
Figure 6 displays the samples obtained for our ECG signal.
Here we chose a tolerance equal to twice the width of the range
of the signal, which leads to 916 samples, and hence 3.2% of
the initial samples. Again, a few other choices for the tolerance
and the associated compression are given in Table II.
With less samples than with 8-level-crossing the descrip-
tion of the signal seems better. This will be conﬁrmed by
the ﬁltering results. Of course there is a drawback, although
possible, the hardware implementation of this type of sampling
is much harder.
B. Filtering results
We use an order-10 Butterworth ﬁlter with a cut-off
frequency at 200 Hz. We have tested the various methods
described in [11] but only plot results for the backward Euler
scheme
xn − xn−1
dtn
= Axn + Bin,
(7)
TABLE II. COMPRESSION OF THE ECG SIGNAL VIA LINEAR
DECIMATION.
tolerance
2*range
range
range/2
number of samples
916
1548
2341
compression
3.2%
5.4%
8.2%
0
5
10
15
time (s)
-1
-0.5
0
0.5
1
1.5
2
2.5
10-3
initial
samples
Figure 6. Linear decimation sampling of a ECG signal. range criterion, 916
vs. 284548 samples.
and the bilinear scheme (6). For this test case, both the Euler
scheme (4) and the Runge-Kutta 4 scheme are unstable and
do not yield any result. Other Runge-Kutta schemes, such as
RK23, are not unstable but give very distorted results.
Figure 7 displays the ﬁltering of the ECG signal after
level-crossing sampling with the backward Euler discretization
of the state equation (7). For the sake of clarity, we have
windowed the plot to see a small sequence of the signal.
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
time (s)
-5
0
5
10
15
20
10-4
initial
samples
filtered
Figure 7. Backward Euler Butterworth ﬁltering of ECG signal after
level-crossing sampling.
We can notice two unwanted features: ﬁrst, the ﬁltered
signal keeps the memory of the sampling levels; second, the
P pattern is not captured. Indeed, physicians who read ECGs
want to spot speciﬁc patterns in the ECG signal to diagnose
diseases. These patterns are designated by the letters PQRST,
see Figure 8. The reason why P has not been captured is not
due to ﬁltering but to sampling since no point has been set
in this part of the signal. This can typically be corrected by a
cleverer choice of the levels.
70
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

P
Q
R
S
T
Figure 8. Patterns in a normal heart sinus rhythm.
Figure 9 displays the ﬁltering of the ECG signal after the
same level-crossing sampling but with the bilinear discretiza-
tion. The previous bad features are always there because they
were mainly due to sampling. They are present for all the
(stable) schemes, the worst one from this point of view being
the integral form (5). This is not due to the integral form itself
which is exact, but to the sample-hold interpolation. You have
to use piecewise linear or nearest neighbor interpolation for
this application.
The bilinear discretization does nonetheless a little better
than the backward Euler scheme. Indeed, the amplitude of the
R pattern is much better captured.
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
time (s)
-5
0
5
10
15
20
10-4
initial
samples
filtered
Figure 9. Bilinear Butterworth ﬁltering of ECG signal after level-crossing
sampling.
Now, we explore the simulations performed with a linear
decimated sampled signal. Figures 10 and 11 yield the results
for the backward Euler and bilinear discretizations of the
Butterworth ﬁlter. The unwanted features of the level-crossing
sampling are of course not present and the ﬁltered result much
resembles the theoretical pattern of Figure 8. The bilinear
scheme is once more better than the backward Euler scheme,
since it captures better the amplitude and times of the points
of interest.
V.
CONCLUSION AND FUTURE WORK
We have discussed various issues which are important
when having to generalize IIR ﬁlters to the nonuniform case:
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
time (s)
-5
0
5
10
15
20
10-4
initial
samples
filtered
Figure 10. Backward Euler Butterworth ﬁltering of ECG signal after linear
decimation sampling.
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
time (s)
-5
0
5
10
15
20
10-4
initial
samples
filtered
Figure 11. Bilinear Butterworth ﬁltering of ECG signal after linear
decimation sampling.
which representation of such ﬁlters is the more adapted to this
generalization?
We illustrate the performance of the constructed ﬁlters
on an electrocardiogram signal, for two ways to obtain the
nonuniform samples. We select linear decimation and the
bilinear scheme as a good combination for this application.
This discretization of the equation gives stable and accurate
results. We have seen on an ECG example that if the choice
of the discrete ﬁltering method is important, the way the
nonuniform samples have been chosen is also a very crucial
issue. The method, we call linear decimation, seems to be
adapted to the ECG case, but there is clearly a lot of work to
be done in this direction to reduce more drastically the number
of samples and therefore the computational cost.
ACKNOWLEDGMENT
This work has been partially supported by the LabEx
PERSYVAL-Lab (ANR-11-61 LABX-0025-01).
71
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

REFERENCES
[1]
F. Marvasti, Nonuniform Sampling. Theory and Practice, ser. Infor-
mation Technology: Transmission, Processing and Storage.
Kluwer
Academic Publishers, 2001.
[2]
B. Bid´egaray-Fesquet and L. Fesquet, “Levels, peaks, slopes... which
sampling
for
which
purpose?”
in
2nd
International
Conference
on Event-Based Control, Communications, and Signal Processing
(EBCCSP16).
Krakow, Poland: IEEE, Jun. 2016, pp. 1–6.
[3]
F. Aeschlimann, E. Allier, L. Fesquet, and M. Renaudin, “Asynchronous
FIR ﬁlters: Towards a new digital processing chain,” in 10th Interna-
tional Symposium on Asynchronous Circuits and Systems (Async’04).
Hersonisos, Crete: IEEE, Apr. 2004, pp. 198–206.
[4]
B. Bid´egaray-Fesquet and L. Fesquet, “A fully non-uniform approach to
FIR ﬁltering,” in 8th International Conference on Sampling Theory and
Applications (SampTa’09), L. Fesquet and B. Torr´esani, Eds., Marseille,
France, May 2009, pp. 129:1–4.
[5]
L. Fontaine and J. Ragot, “Filtrage de signaux `a ´echantillonnage
irr´egulier [Filtering irregularly sampled signals],” Traitement du Signal,
vol. 18, no. 2, 2001, pp. 89–101.
[6]
D. Poulton and J. Oksman, “Digital ﬁlters for non uniformly sampled
signals,” in Nordic Signal Processing Symposium (NORSIG 2000),
Vildmarkshotellet Kolmarden, Sweden, Jun. 2000, pp. 421–424.
[7]
——, “Filtrage des signaux `a ´echantillonnage non uniforme [Filtering
nonuniformly sampled signals],” Traitement du Signal, vol. 18, no. 2,
2001, pp. 81–88.
[8]
B. Bid´egaray-Fesquet and L. Fesquet, “Non-uniform ﬁlter interpolation
in the frequency domain,” Sampling Theory in Signal and Image
Processing, vol. 10, no. 1–2, 2011, pp. 17–35.
[9]
S. M. Qaisar, L. Fesquet, and M. Renaudin, “Adaptive rate sampling
and ﬁltering based on level crossing sampling,” EURASIP Journal on
Advances in Signal Processing, vol. 2009, no. Article ID 971656, 2009,
p. 13 pages.
[10]
C. Vezyrtzis and Y. Tsividis, “Processing of signals using level-crossing
sampling,” in IEEE International Symposium on Circuits and Systems,
ISCAS 2009.
Taipei, Taiwan: IEEE, May 2009, pp. 2293–2296.
[11]
L. Fesquet and B. Bid´egaray-Fesquet, “IIR digital ﬁltering of non-
uniformly sampled signals via state representation,” Signal Processing,
vol. 90, no. 10, Oct. 2010, pp. 2811–2821.
[12]
J. Sparso and S. Furber, Eds., Principles of Asynchronous Circuit
Design: A Systems Perspective.
Springer, 2001.
[13]
T. Beyrouthy and L. Fesquet, “An event-driven FIR ﬁlter: design and
implementation,” in 22nd IEEE International Symposium on Rapid
System Prototyping (RSP 2011).
Karlsruhe, Germany: IEEE, May
2011, pp. 59–65.
[14]
E. Yahya, L. Fesquet, Y. Ismail, and M. Renaudin, “Statistical static
timing analysis of conditional asynchronous circuits using model-based
simulation,” in 19th International Symposium on Asynchronous Circuits
and Systems (ASYNC).
IEEE, 2013, pp. 67–74.
[15]
F. J. Beutler, “Sampling theorems and bases in a hilbert space,”
Information and Control, vol. 4, no. 2-3, 1961, pp. 97–117.
[16]
——, “Error-free recovery of signals from irregularly spaced samples,”
SIAM Review, vol. 8, no. 3, 1966, pp. 328–335.
[17]
G. Roa, T. Le Pelleter, A. Bonvilain, A. Chagoya, and L. Fesquet,
“Designing ultra-low power systems with non-uniform sampling and
event-driven logic,” in 27th Symposium on Integrated Circuits and
Systems Design (SBCCI 2014).
Aracaju, Sergipe, Brazil: IEEE, Sep.
2014, Article No. 5:1–6.
[18]
B. Bid´egaray-Fesquet and L. Fesquet, “SPASS 2.0: Signal Processing
for ASynchronous Systems,” Software, May 2010. [Online]. Avail-
able: https://ljk.imag.fr/membres/Brigitte.Bidegaray/SPASS/ [retrieved:
April, 2018]
[19]
N. Sayiner, H. V. Sorensen, and T. R. Viswanathan, “A level-crossing
sampling scheme for A/D conversion,” IEEE Transactions on Circuits
and Systems II, vol. 43, no. 4, Apr. 1996, pp. 335–339.
[20]
E. Allier, G. Sicard, L. Fesquet, and M. Renaudin, “A new class of
asynchronous A/D converters based on time quantization,” in 9th Inter-
national Symposium on Asynchronous Circuits and Systems, Async’03.
Vancouver, Canada: IEEE, May 2003, pp. 196–205.
[21]
T. Le Pelleter, T. Beyrouthy, R. Rolland-Girod, A. Bonvilain, and
L. Fesquet, “Non-uniform sampling pattern recognition based on atomic
decomposition,” in 10th International Conference on Sampling Theory
and Applications (SampTA 2013), Bremen, Germany, Jul. 2013, pp.
236–239.
72
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-638-5
SIGNAL 2018 : The Third International Conference on Advances in Signal, Image and Video Processing

