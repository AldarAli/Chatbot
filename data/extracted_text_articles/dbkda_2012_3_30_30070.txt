Association Rule Mining from Large and Heterogeneous Databases with Uncertain
Data using Genetic Network Programming
Eloy Gonzales∗ and Koji Zettsu∗
∗ Information Services Platform Laboratory
Universal Communication Research Institute
National Institute of Information and Communications Technology
3-5 Hikaridai, Seika-cho, Soraku-gun, Kyoto, 619-0289, Japan
Tel: +81-774-98-6866, Fax: +81-774-98-6960
e-mail: {egonzales, zettsu}@nict.go.jp
Abstract—Association Rule Mining is one of the most im-
portant tasks in data mining and it has been deeply studied
during last years. Recently several rule mining algorithms have
been developed due to many real-world applications. Most of
these studies have generally considered only precise data, which
means that items within each datum or transaction are deﬁ-
nitely known and precise. However, there are also many real life
situations where the data is uncertain, which means that items
are expressed in terms of existential probabilities. In this paper,
a method for association rule mining from large, heterogeneous
and uncertain databases is proposed using an evolutionary
method named Genetic Network Programming (GNP). Some
other association rule mining methods can not handle uncertain
data directly, they are inapplicable or computational inefﬁcient
under such a model. GNP uses direct graph structure and is
able to extract rules without generating frequent itemsets to
improve mining efﬁciency. The performance of the method is
evaluated through extensive experiments using real scientiﬁc
large-scale heterogeneous databases that show its effectiveness
and efﬁciency.
Keywords-Association rule mining; heterogeneous databases;
uncertain data; evolutionary computation.
I. INTRODUCTION
The continuously growing in the size and number of
databases in a variety of domains has boosted the develop of
several data mining methods during the last decade. There
is an increasing need to discover associations and relations
among large and heterogeneous databases, which may be
tackled by association rule mining. Actually, several associ-
ation rule mining algorithms have been proposed. Most of
them assume a data model, which transactions capture the
doubtless facts about items contained in each transaction,
that is, they handle precise data, such as databases of market
basket transactions, web logs and click streams where the
user deﬁnitely knows whether an item is present in, or
is absent from, a transaction in the databases. However,
in many other applications, the existence of an item in
a transaction is best captured by a likelihood measure or
probability, for example, a medical dataset may contain a
list of patients as records (tuples) and for each record a set
of symptoms or illnesses that a patient suffers as the items.
Applying association analysis on such dataset allows to
discover any potential correlation among the symptoms and
illnesses, a physician may highly suspect (but cannot guar-
antee) that a patient suffers some disease. The uncertainty
of such suspicion can be expressed in terms of existential
probability. Other examples of uncertain datasets are pattern
recognition databases where image processing techniques
are applied on a picture to extract features that indicate the
presence or absence of certain objects in an area, but due to
noises and limited resolution, the presence of an object is
ofter uncertain and expressed as probability.
Many of the developed algorithms for uncertain mining
have been focused on data mining tasks like clustering and
classiﬁcation of uncertain data [1]. With respect to associa-
tion rule mining of uncertain data, Chui et al.[2] proposed
an Apriori-based algorithm called U-Apriori and introduced
a trimming strategy to reduce the number of candidates
that need to be counted by the algorithm. To speed up the
mining process, they also proposed a decremental pruning
technique, however as an Apriori-based algorithm, U-Apriori
relies on the candidate generate-and-test paradigm. Kai-San
Leung et al. [3] have tried to reduce the searching space by
adding constraints given by users, but the scalability issues
have not been described.
In this paper, a method for mining association rules
from uncertain data is proposed using an evolutionary opti-
mization algorithm named Genetic Network Programming
(GNP). There have been some proposals of association
rule mining using GNP [4][5], however all of them use
certain data. The advantages of the proposed method are
as follows: (1). It is widely known that the search space
of frequent patterns from precise data is very huge, and
from uncertain data is even much bigger. Thus, the proposed
method extracts rules directly without generating the fre-
quent patterns. (2). The support and conﬁdence are the most
used framework to evaluate the association rules. However,
this measurements are not longer valid for probabilistic
datasets. GNP provides the ﬂexibility to use any correlation
measure either independently or combined. Thus, in this
74
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

paper hyper-lift and hyper-conﬁdence proposed in [6] are
used. (3). The scalability issue is not an important concern
in other algorithms since most of them deal with mining
frequent patterns, which is computationally expensive and
therefore use relatively small datasets. In this paper, large-
scale and heterogeneous databases are mainly focused.
The following sections of this paper are organized as
follows: In Section II, the uncertain data model is presented,
the concepts and explanations of general association rules
are introduced in Section III, the outline of GNP is brieﬂy
reviewed in Section IV where also the method for rule ex-
traction from uncertain data is presented. Simulation results
are described in Section V, and ﬁnally, conclusion and future
work are given in Section VI.
II. UNCERTAIN DATA MODEL
Because of the uncertainty in various real-life situations,
users may not be certain about the presence or absence of an
item x in a transaction ti. They may suspect the presence
of x in ti, but cannot guarantee. The uncertainty of such
suspicion can be expressed in terms of existential probability
P(x, ti), which indicates the likelihood of x being present
in ti in a probabilistic database D of uncertain data. The
existential probability P(x, ti) ranges from a positive value
close to 0, which indicates that x has an insigniﬁcantly
low chance to be present in D, to a value of 1, which
indicates that x is deﬁnitely present. Applying this notion
to the traditional databases of precise data, each item of any
transaction can be viewed as an item with a 100% likelihood
of being present in such a transaction.
III. ASSOCIATION RULES
A transaction database consist of a series of transactions,
each of them containing a subset of available items[7]. Let
I = {A1, A2, . . . Al} be a set of attributes. Let G be a set of
transactions,where each transaction T is a set of attributes
such that T ⊆ I. Associated with each transaction is a
unique identiﬁer whose set is called TID. A transaction
T contains X, a set of some attributes in I, if X ⊆ I. An
association rule is an implication of the form of X ⇒ Y ,
where X ⊂ I, Y ⊂ I, and X∩Y = ∅. X is called antecedent
and Y is called consequent of the rule. Both are called
itemsets. In general, an itemset is a non-empty subset of I.
There are some assumptions in our model, 1) transactions
occur randomly following a homogeneous Poisson process.
2) all items occur independently of each other and for each
item exist a probability of being contained in a transaction.
Looking at the observed co-occurrences counts for all
pairs of two items Ai and Aj, in a dataset with N transac-
tions, it is possible to form an n × n contingency table. Each
cell can be modeled by a random variable Cij, which given
ﬁxed marginal counts ci and cj, follows a hyper-geometric
distribution. In the case of two itemsets X and Y , the
random variable CXY follows a hyper-geometric distribution
with the counts of the itemsets as its parameter [6], that
is, the probability of counting exactly k transactions, which
contain the two independent itemsets X and Y is given by:
P(CXY = k) =
 CX
k
 N−CX
CY −k

 N
CY

(1)
The probability of counting more than k transactions is:
P(CXY > k) = 1 −
k
X
i=0
P(CXY = i)
(2)
The contingency table is shown in Table I.
Table I
THE CONTINGENCY TABLE OF X AND Y .
Y
¬Y

row
X
CXY
CX − CXY
CX
¬X
CY − CXY
(N − CY ) − (CX − CXY )
N − CX

col
CY
N − CY
N
( N: the number of transactions (= |TID|) )
A. Hyper-Lift
The expected value of a random variable CXY for the
co-occurrence counts for two itemsets X and Y is:
E(CXY ) = CXCY
N
(3)
Therefore, lift can be written as:
lift(X ⇒ Y ) =
CXY
E(CXY )
(4)
However, it works well for items with a relatively high oc-
currence frequency. Thus, for relatively infrequent itemsets
the hyper-lift is deﬁned as:
hyper-liftδ(X ⇒ Y ) =
CXY
Qδ(CXY )
(5)
where, Qδ(CXY ) is the quantile distribution. The minimal
value of the δ quantile of the distribution of CXY is deﬁned
by the following inequalities:
P(CXY < Qδ(CXY )) ≤ δ , and
P(CXY > Qδ(CXY )) ≤ 1 − δ
(6)
B. Hyper-conﬁdence
The hyper-conﬁdence is deﬁned directly by the probability
of realizing a count smaller that the observed co-occurrence
count cXY given the marginal counts cX and cY as follows:
hyper-conﬁdence(X ⇒ Y ) = P(CXY < cXY )
=
cXY −1
X
i=0
P(CXY = i)
(7)
where P(CXY = i) is calculated using Equation 1.
Note that hyper-conﬁdence is equivalent to a special
case of Fisher’s exact test, the one-sided test on 2 × 2
contingency tables. In this case, the p-value is directly
obtained from the hyper-geometric distribution, which is
75
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

computationally negligible compared to the effort of count-
ing support and ﬁnding frequent itemsets. Furthermore, for
the application of mining association rules where only rules
with positively correlated elements are of interest, a one-side
test as used here is much more appropriate.
Therefore, the problem of mining probabilistic association
rules from uncertain data is to ﬁnd all rules that are highly
likely to be interesting, that is, satisfying the minimum
hyper-conﬁdence threshold.
hyper-conﬁdence(X ⇒ Y ) ≥ minhyper−conf , and
hyper-lift(X ⇒ Y ) ≥ 1
(8)
IV. GENETIC NETWORK PROGRAMMING
Genetic Network Programming (GNP) is one of the evo-
lutionary optimization algorithms, which evolves directed
graph structures as solutions instead of strings (Genetic
Algorithms) or trees (Genetic Programming) [8], [9], [10].
The main aim of developing GNP was to deal with dynamic
environments efﬁciently by using the higher expression
ability of graph structures.
The basic structure of GNP is shown in Fig. 1. The
graph structure is composed of three types of nodes that are
connected on a network structure: a start node, judgment
nodes (diamonds), and processing nodes (circles). Judgment
nodes are the set of J1, J2, ..., Jp, which work as if-
then conditional decision functions and they return judgment
results for assigned inputs and determine the next node to
be executed. Processing nodes are the set of P1, P2, .. .,
Pq, which work as action/processing functions. The start
node determines the ﬁrst node to be executed. The nodes
transition begins from the start node, however there are no
terminal nodes. After the start node is executed, the next
node is determined according to the node’s connections and
judgment results.
Figure 1.
Basic structure of GNP
The gene structure of GNP (node i) is shown in Fig. 2.
The set of these genes represents the genotype of GNP-
individuals. NTi describes the node type, NTi = 0 when
node i is the start node, NTi = 1 when node i is a judgment
node and NTi = 2 when node i is a processing node.
IDi is an identiﬁcation number, for example, NTi = 1 and
IDi = 1 mean node i is J1. Ci1, Ci2, ..., denote the nodes,
Figure 2.
Gene structure of GNP (node i)
which are connected from node i ﬁrstly, secondly, . . ., and
so on depending on the arguments of node i. di and dij
are the delay time, which are the time required to execute
the judgment or processing of node i and the delay time of
transition from node i to node j, respectively.
In this paper, the execution time delay di and the transition
time delay dij are not considered. All GNP-individuals in a
population have the same number of nodes.
The characteristics of GNP are described as follows. (1)
The judgment and processing nodes are repeatedly used
in GNP, therefore the structure becomes compact and an
efﬁcient evolution of GNP is obtained. (2) Since the number
of nodes is deﬁned in advance, GNP can ﬁnd the solutions
of the problems without bloating, which can be sometimes
found in Genetic Programming (GP). (3) Nodes that are not
used at the current program execution will be used for future
evolution. (4) GNP is able to cope with partially observable
Markov processes. (5) The node transition in GNP individual
is executed according to its node connections without any
terminal nodes.
In the conventional GNP-based mining method, the at-
tributes of the database correspond to the judgment nodes
in GNP. Association rules are represented by the connections
of nodes. Candidate rules are obtained by genetic operations.
Rule extraction using GNP is done without identifying
frequent itemsets used in Apriori-like methods [11]. There-
fore, this method extracts important rules sufﬁcient enough
for user’s purpose in a short time. The association rules
extracted are stored in a pool through generations. The
fundamental difference with other evolutionary methods is
that GNP evolves in order to store new interesting rules
in the pool, not to obtain the individual with the highest
ﬁtness value. GNP method has also advantages over other
evolutionary methods such as Genetic Algorithms (GA) and
Genetic Programming (GP). For GA-based methods [12],
76
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

there are limitations in the number of association rules
extracted because they are represented in individuals. In GP-
base methods [13], an individual is usually represented by
a tree with attribute values in the functions (e.g., logical,
relational or mathematical operators) of the internal nodes.
An individual’s tree can grow in size and shape in a very
dynamical way making it very difﬁcult to understand for real
applications.
A. GNP for rule extraction in a uncertain database
In this section, a general association rule mining method
for uncertain databases is proposed using GNP. Let Ai be an
attribute in an uncertain database and its value an existential
probability. Each attribute Ai is associated with ai, which
is a threshold value. One of the features of the proposed
method is to evolve the threshold ai along with the evolution
of GNP in order to obtain as many rules as possible [14].
The initial threshold ai is determined as follows: (1). The
mean µi and standard deviation σi of every attribute Ai is
calculated. (2). The initial threshold is selected randomly
from the interval [µi − αiσi, µi + αiσi], where αi is a
parameter that determines the size of the interval. Then, the
initial threshold is evolved by mutation in every generation
of GNP. Once the threshold ai is selected for all attributes,
each value of the attribute Ai is checked to verify whether it
is greater than the threshold ai in the judgment nodes of the
GNP individuals. The evolution of the thresholds is carried
out by introducing an additional parameter that determines
the mutation rate tr. In this paper, the mutation rate tr is
gradually adjusted as it is described in [14].
1) Rule Representation: Attributes and its values corre-
spond to the functions of judgment nodes in GNP. Associ-
ation rules are represented as the connections of nodes .
Fig. 3 shows a sample of the connection of nodes in GNP
for probabilistic association rule mining. P1 is a processing
node and is a starting point of association rules. ”A1 ≥ a1”,
”A2 ≥ a2”, ”A3 ≥ a3” and ”A4 ≥ a4” in Fig. 3 denote
the functions of judgment nodes. Association rules are
represented by the connections of these nodes, for example,
(A1 ≥ a1) ⇒ (A2 ≥ a2), (A1 ≥ a1)∧(A2 ≥ a2) ⇒ (A3 ≥
a3), (A1 ≥ a1) ∧ (A2 ≥ a2) ∧ (A3 ≥ a3) ⇒ (A4 ≥ a4) and
(A1 ≥ a1) ∧ (A2 ≥ a2) ⇒ (A3 ≥ a3) ∧ (A4 ≥ a4).
Judgment nodes in GNP are used to examine the attribute
values of database tuples and processing nodes calculate the
measurements of association rules. Judgment nodes deter-
mine the next node by a judgment result. Each judgment
node has two connections Continue-side and Skip-side. The
Continue-side of the judgment node is connected to another
judgment node. Skip-side of the judgment node is connected
to the next numbered processing node. If the attribute value
is greater or equal to ai, then move to the Continue-side. If
the attribute value is less than ai, then the transition goes
for the Skip-side.
Figure 3.
A connection of nodes in GNP for probabilistic association rule
mining
Figure 4.
Basic structure of GNP for uncertain association rule mining
A basic structure of GNP-individual for association rule
mining is shown in Fig. 4. In Fig. 4, the Skip-side of
judgment nodes is abbreviated. Each processing node has an
inherent numeric order (P1, P2, . . . , Ps) and is connected
to a judgment node. Start node connects to P1. For each
judgment node, the examinations of attribute values start
and in case to move to the Continue-side continuously, the
connection is obligatorily transfered to the next processing
node using the Skip-node when the maximum number of
attributes (MaxLength) in the rule is reached. When the
examination of the attribute values of tuple TID = 1 from
the starting point Ps ends, then GNP examines the next tuple
TID = 2 from P1 likewise. Therefore, all tuples in the
database are examined.
2) Rule Measurements: In GNP the number of tuples
moving to the Continue-side are counted up and they are
77
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

used for calculation of the measurements In upper side of
Fig. 3, a, b, c and d are the number of tuples moving to
the Continue-side at each judgment node when the attribute
values are greater or equal to a1, a2, a3 and a4, respectively.
In the proposed method the signiﬁcance of the associa-
tions are measured via the hyper-geometric distribution used
in classical statistics. For example in lower side of Fig. 3
it is possible to calculate the number of tuples going to
the Continue-Side of A3 and A3 ∧ A4 if the connection of
node P1 is changed from node A1 ≥ a1 to node A3 ≥ a3.
This procedure is repeated like a chain operation in each
generation. The extracted important association rules are
stored in a local pool all together through generations. When
an important rule is extracted by GNP, the redundancy of
the attributes is checked and it is also checked whether the
important rule is new or not, that is, whether the rule is
already in the local pool or not.
3) Genetic Operations: Changing an attribute to another
one or adding some attributes in the rules would be con-
sidered as candidates of important rules. These rules can
be obtained effectively by GNP genetic operations, because
mutation and crossover will change the connections or
contents of the nodes.
Three kinds of genetic operators are used for judgment
nodes: GNP-crossover, GNP-mutation-1 (change the connec-
tions) and GNP-mutation-2 (change the function of nodes).
• GNP-Crossover: uniform crossover is used. Judgment
nodes are selected as the crossover nodes with the
probability of Pc. Two parents exchange the gene of
the corresponding crossover nodes.
• GNP-Mutation-1: Mutation-1 operator affects one in-
dividual. The connection of the judgment nodes is
changed randomly by mutation rate of Pm1.
• GNP-Mutation-2: Mutation-2 operator also affects one
individual. This operator changes the functions of the
judgment nodes by a given mutation rate Pm2.
On the other hand, all the connections of the processing
nodes are changed randomly. At each generation, all GNP-
individuals are replaced with the new ones by the following
criteria: The GNP-individuals are ranked by their ﬁtness
values and the best one-third GNP-individuals are selected.
After that, these GNP-individuals are reproduced three times
for the next generation using the genetic operators described
before.
If the probabilities of crossover (Pc) and mutation
(Pm1, Pm2) are set at small values, then the same rules in the
pool may be extracted repeatedly and GNP tends to converge
prematurely at an early stage. If the probability of mutation
is set at high values, then some genetic characteristics of the
individuals might be lost. These parameter values are chosen
experimentally avoiding these issues.
4) Heterogeneity Level: The heterogeneity level of rule
r, hl(r), is deﬁned as follows:
hl(r) =
TQ
k
[nak(r)/NAk]
T
; k = 1, 2, . . . , T
(9)
where,
nak(r) is the number of attributes in rule r (antecedent
and consequent), which belong to database k.
NAk is the number of attributes of database k.
T is the number of heterogeneous databases.
The heterogeneity level of rule r measures the ratio of
attributes that exist in the rules, which belong to one or
another database. hl(r) ≥ γ, where γ is a threshold value
for the heterogeneity level. It ensures that every rule contains
at least one attribute per every heterogeneous database. γ
is deﬁned experimentally and its value decreases when the
number of databases increases.
5) Fitness of GNP: The number of processing nodes and
judgment nodes in each GNP-individual is determined based
on experimentation depending on the number of attributes
processed. All GNP-individuals in a population have the
same number of nodes. The connections of the nodes and
the functions of the judgment nodes at an initial generation
are determined randomly for each GNP-individual.
Fitness of GNP is deﬁned by:
F =
X
r∈Q
{hc(r) + αnew(r) + hl(r)(NAA(r) − 1) +
hl(r)(NAC(r) − 1)}
(10)
The terms in Eq. (10) are as follows:
Q: set of sufﬁxes of extracted important association
rules satisfying (8)
hc(r): value of hyper-conﬁdence(r) of rule r
αnew(r): additional constant deﬁned by
αnew(r) =
(
αnew
(rule r is new)
0
(rule r has been already extracted)
(11)
hl(r): heterogeneity level of rule r.
NAA(r): the number of attributes in the antecedent of
rule r.
NAC(r): the number of attributes in the consequent of
rule r.
Constant αnew(r) in Eq. 10 is deﬁned empirically based
on the values of hyper-conﬁdence(r). Thus, αnew(r) = 0.3.
NAA(r) ≤ MaxLength and NAC(r) ≤ MaxLength.
MaxLength = 2T + 1, where T is the number of hetero-
geneous databases.
hc(r), NAA(r) and NAC(r), and αnew(r) are concerned
with the importance, complexity and novelty of rule r,
respectively. The ﬁtness represents the potential to extract
new rules.
78
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

V. SIMULATION RESULTS
In order to test and validate the effectiveness of the pro-
posed method, two real-time scientiﬁc databases from UCI
ML Repository [15] and World Data System (WDS) [16]
were taken to conduct the experiments, which are frequently
used in data mining community. Both of them contains
heterogeneous spatial-temporal data and they are suitable
for mining general association rules. The ﬁrst one (“A”
dataset) is El Nino dataset and contains oceanographic and
surface meteorological readings taken from a series of buoys
positioned throughout the equatorial Paciﬁc. The second one
(“B” dataset) correspond to the weather information of the
Paciﬁc Ocean taken by sensors of World Ocean Circulation
Experiment (WOCE).
A. Experiment Setting
Both datasets are combined taken into account the
date and each attribute is separated into two correspond-
ing attributes according to their values. For instance, if
Latitude ≤ 0 correspond to the Latitude = South. In this
experiment, data only from one year (1993) is considered.
Thus, one large database is generated (36 attributes × 20609
records), then the data is normalized between the interval [0,
1] and these values are used as existential probabilities.
1) Parameters of GNP: The population size of GNP is
120. The number of processing nodes and judgment nodes in
each GNP individual are 10 and 75, respectively. The maxi-
mum number of changing the connections of the processing
nodes (MaxLenght) in each generation is 2(2) + 1 = 5.
The conditions of crossover and mutation are Pc = 1/5,
Pm1 = 1/3 and Pm2 = 1/5. The termination condition
is 100 generations. 10 runs were executed and the results
are given as an average. These parameters were selected
through experimentation. All algorithms were coded in Java
language. Experiments were performed on a 3.2GHz Intel
Xeon PC with 12G of main memory, running Windows 7
Ultimate 64bits.
Table II shows some examples of the rules extracted
by GNP. The termination “A” or “B” of each attribute
means the correspondence to its dataset. From Table II,
the rules extracted by GNP are simple due to the small
number of itemsets, which contribute to their understandabil-
ity. Although the GNP-based data mining method extracts
signiﬁcant number of rules in a short period of time, it does
not extract all the possible rules. Instead, it extracts rules
with higher quality as it is shown in Table II.
Fig. 5 shows the number of extracted rules according
to the number of generations using the complete database
and minhyper−conf ≥ 0.9 . It can be seen that most of
the association rules are extracted at earlier generations
becoming stable at later generations, which improves the
performance of the method.
Fig. 6 shows the number of extracted rules for different
values of minimum hyper-conﬁdence. Fig. 6 shows that
Figure 5.
Number of extracted rules vs. number of generations
Figure 6.
Number of extracted rules vs. min hyper-conﬁdence
Figure 7.
Processing Time vs. database size
when the minimum hyper-conﬁdence increases, the number
of association rules decreases because the conditions become
more strict and fewer rules are able to satisfy them.
Fig. 7 shows the processing time for extraction of associ-
ation rules when the database size varies. Fig. 7 shows that
the processing time increases linearly when the database size
increases.
Fig. 8 shows the processing time for extraction of associ-
ation for different values of hyper-conﬁdence. Fig. 8 shows
that the processing time does not vary signiﬁcantly when
hyper-conﬁdence changes.
79
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

Table II
EXAMPLES OF RULES EXTRACTED BY GNP. GENERATIONS=100, minhyper−conf ≥ 0.9
Association Rules
Hyper-Conf.
IF Sea Surf Temp = High A ∧ Latitude = South B, THEN Longitude = West B ∧ Rel Hum = High B ∧ Precip = High B
1.0
IF Longitude=West A ∧ Zon Winds=West A ∧ Humidity=Low A, THEN Precip = High B ∧ Temp Water = Low B
0.9871
IF Temp Air=High A ∧ Speed=High B, THEN Meridional Winds= South A ∧ Rel Hum = High B
0.9962
IF Pressure Atm=High B ∧ Temp Air=Low A ∧ Sea Surf Temp = High A, THEN Longitude = West B ∧ Temp Water = High B
1.0
IF Temp Air=Low B ∧ Zon Winds=West A ∧ Latitude=South B, THEN Rel Hum = High B ∧ Precip = High B
1.0
Figure 8.
Processing Time vs. min hyper-conﬁdence
VI. CONCLUSION AND FUTURE WORK
A method for association rule mining from uncertain
databases has been proposed using GNP. An uncertain
database includes the existential probability of every item
in a transaction. Traditional approaches count the frequency
of the itemsets. The proposed method can extract directly
important rules without calculating the frequency and the
conditions of important association rules can be ﬂexibly
deﬁned by users. The performance of the rule extraction has
been evaluated using real data sets. The results shows that
the proposed method has the potential to realize associations
considering heterogeneous databases and may be applied for
rule discovery from probabilistic databases in several other
ﬁelds. For future work, the method will be extended to deal
with large and heterogeneous scientiﬁc databases combined
with web data.
REFERENCES
[1] R. Cheng et al., “Probabilistic veriﬁers: evaluating constrained
nearest-neighbor queries over uncertain data”. In Proc. of the
IEEE ICDE 2008, pp. 973-982, 2008.
[2] C.K. Chui, B. Kao, and E. Hung, “Mining Frequent Itemsets
from Uncertain Data”. In Proc. of the 11th Paciﬁc-Asia Con-
ference on Knowledge Discovery and Data Mining, PAKDD
2007, pp. 47-58, 2007.
[3] C.K.S. Leung and D. A. Brajczuk, “Efﬁcient Algorithms for
the Mining of Constrained Frequent Patterns from Uncertain
Data”, SIGKDD Explorations, Vol.11, Issue 2, pp. 123-130,
2009.
[4] K. Shimada, K. Hirasawa, and T. Furuzuki, “Genetic Network
Programming with Acquisition Mechanisms of Association
Rules”, Journal of Advanced Computational Intelligence and
Intelligent Informatics, Vol. 10, No. 1, pp. 102-111, 2006.
[5] E. Gonzales, K. Taboada, K. Shimada, S. Mabu, and K.
Hirasawa, “Combination of Two Evolutionary Methods for
Mining Association Rules in Large and Dense Databases”,
Journal of Advanced Computational Intelligence and Intelli-
gent Informatics, Vol.13, No.5, pp. 561-572, 2009.
[6] M. Hahsler and K. Hornik. “New probabilistic interest mea-
sures for association rules” in Journal of Intelligent Data
Analysis, Vol. 11, No. 5, pp.437-455, 2007.
[7] C. Zhang and S. Zhang, Association Rule Mining: models and
algorithms, Springer, 2002.
[8] S. Mabu, K. Hirasawa, and J. Hu, “A Graph-Based Evolu-
tionary Algorithm: Genetic Network Programming (GNP) and
Its Extension Using Reinforcement Learning“, Evolutionary
Computation, MIT Press , Vol 15, No. 3, pp. 369-398, 2007.
[9] K. Hirasawa, T. Eguchi, J. Zhou, L. Yu, J. Hu, and S. Markon,
“A Double-deck Elevator Group Supervisory Control System
using Genetic Network Programming”,IEEE Trans. on System,
Man and Cybernetics, Part C, Vol.38, No.4, pp. 535-550, 2008.
[10] T. Eguchi, K. Hirasawa, J. Hu, and N. Ota, “A study of
Evolutionary Multiagent Models Based on Symbiosis”,IEEE
Trans. on System, Man and Cybernetics, Part B, Vol.36, No.1,
pp. 179-193, 2006.
[11] R. Agrawal and R. Srikant, “Fast Algorithms for Mining
Association Rules”, in Proc. of the 20th VLDB Conf., pp. 487-
499, 1994.
[12] C.Z. Janikow, “A knowledge-intensive genetic algorithm for
supervised learning”, Machine Learning 13, pp. 189-228, 1993.
[13] C.C. Bojarczuk, H.S. Lopes, and A.A. Freitas, “Genetic
programming for knowledge discovery in chest pain diagno-
sis”, IEEE Trans. on Engineering in Medicine and Biology
Magazine, Vol. 19, No.4, pp. 38-44, 2000.
[14] K. Taboada, E. Gonzales, K. Shimada, S. Mabu, K. Hirasawa,
and J. Hu, “Association Rule Mining for Continuous Attributes
using Genetic Network Programming”, IEEJ Transactions on
Electrical and Electronic Engineering, Vol. 3, No. 2, pp. 199-
211 March 2008.
[15] Frank, A. Asuncion, A. (2010). UCI Machine Learning
Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: Univer-
sity of California, School of Information and Computer Sci-
ence. [Last Access: Jun 14th, 2011]
[16] Walden, B; WOCE Surface Meteorology Data, WOCEMET
(2006): Continuous meteorological surface measurement dur-
ing KNORR cruise 316N138 12. Woods Hole Oceanographic
Institution, Physical Oceanography Department.
80
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-185-4
DBKDA 2012 : The Fourth International Conference on Advances in Databases, Knowledge, and Data Applications

