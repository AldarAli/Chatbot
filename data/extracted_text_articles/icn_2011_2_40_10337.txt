Efﬁciency Optimisation Of Tor Using
Difﬁe-Hellman Chain
Kun Peng
Institute for Infocomm Research, Singapore
dr.kun.peng@gmail.com
Abstract—Onion routing is the most common anonymous com-
munication channel. Usually onion routing is speciﬁed through
asymmetric cipher and thus is inefﬁcient. In Tor (the second
generation onion router), it is suggested to employ symmetric
cipher to encrypt the packets in onion routing. Obviously,
symmetric cipher is much more efﬁcient than the asymmetric
cipher employed in the original onion routing. However, whether
this idea can really work depends on whether an efﬁcient (both in
computation and communication) key generation and exchange
mechanism can be designed for the symmetric cipher to employ.
The suggestion in Tor is simple and it is a direct employment
of Difﬁe-Hellman handshake to generate the secret keys for
the routers’ symmetric cipher. In this paper we show that
direct application of Difﬁe-Hellman handshake to implement key
generation and exchange in onion routing is not efﬁcient in com-
munication as multiple instances of Difﬁe-Hellman handshake
needs a lot of additional communication. Moreover, its efﬁciency
improvement for the sender is not satisfactory. So we design
a more advanced application of Difﬁe-Hellman key exchange
technique, Difﬁe-Hellman chain. This new technique greatly saves
a sender’s cost and needs very few communication for Difﬁe-
Hellman key exchange. With the efﬁciency improvement in this
paper, Tor can be applied to communication networks with
weaker computational capability and smaller communicational
bandwidth.
Index Terms—TOR; efﬁcient key exchange; Difﬁe-Hellman
chain
I. INTRODUCTION
Anonymous communication channel is a very useful tool in
e-commerce, e-government and other cryptographic applica-
tions, which often require anonymity and privacy. In an anony-
mous communication channel, the messages are untraceable,
so can be transmitted anonymously. A common method to
implement anonymous channels is onion routing [1], [3], [4],
which employs multiple nodes to route a message. A node in
an onion routing communication network can send a message
to any node in the network. The sender can ﬂexibly choose
any route from all the connection paths between him and
the receiver. Each message is contained in a packet called
an onion. In the packet, a message is encrypted layer by layer
using the encryption keys of all the routers on its route and the
receiver. Each layer of encryption is just like a layer of onion
bulb. In onion routing, given a message packet, each router
unwraps a layer of encryption by decrypting the message
packet using its decryption key, ﬁnds out the identity of the
next router and forwards the unwrapped message packet to the
next router. Unless gaining collusion of all the routers on the
routing path of his received message, the receiver cannot trace
the message back to the sender, who then obtains anonymity.
When a packet is routed together with a large number of other
packets, onion routing prevents it from being traced, even if
the whole onion network is monitored.
An obvious advantage of onion routing over other speciﬁca-
tions of anonymous communication channel (e.g. mix network
[5], [6], which sends multiple messages from a unique sender
to a unique receiver through a unique path) is that each of
multiple senders can send his message to any of multiple
receivers and freely choose a dynamic routing path and
so higher ﬂexibility and applicability are achieved. Another
advantage of onion routing will be illustrated in this paper
in our new routing protocols: feasibility to get rid of costly
asymmetric encryption and decryption, which are inevitable in
mix networks.
The key technique in onion routing is encryption chain, in
which a message is successively encrypted with multiple keys.
More precisely, multiple keys form a chain and are employed
one by one to encrypt a message. Not only the message,
the identity of each router on its routing path is encrypted
in an encryption chain using the encryption keys of all the
routers before it. When an onion packet is routed, each router
unwraps it by removing one layer of encryption from each
encryption chain. So each router can recover the identity of
the next router and forward the partially decrypted packet. In
onion routing, the encryption chains are usually implemented
through asymmetric cipher. Namely, the message and identities
of the routers are encrypted using the routers’ public keys
and the routers unwrap the onion packet using their private
keys. An advantage of using asymmetric cipher is that with the
support of PKI or ID-based public key system no special key
exchange operation is needed. As there are multiple encryption
chains (one for the message and one for each router) and the
there are O(n2) encryption and decryption operations (where
n is the number of routers), such an implementation through
asymmetric cipher is inefﬁcient.
Tor [2] is the second generation of onion routing. It pro-
poses a few optimisations for onion routing. A suggested
optimisation in Tor is to replace asymmetric cipher with much
more efﬁcient symmetric cipher to improve efﬁciency of onion
routing. It is a commom sense that symmetric cipher is much
more efﬁcient than asymmetric cipher. The key point in using
symmetric cipher is how to distribute the session keys using
public key operations, while a simple solution to the key-
exchange problem in application of symmetric cipher is the
41
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

Difﬁe-Hellman key exchange protocol recalled in Section II-B.
So it is suggested in Tor [2] to employ “Difﬁe-Hellman
handshake” to implement key changes and generate session
keys for the roueters. As the idea is only simply mentioned
and not speciﬁed in details in [2], it is speciﬁed in Section IV
in this paper to assess its effect. Our assessment illustrates that
although improving computational efﬁciency of the routers
the suggested efﬁciency improvement in Tor [2] is not very
satisfactory. Firstly, it greatly increases communicational cost.
Secondly, even using it the sender’s computational cost is still
high.
The symmetric-cipher-based key chain in Tor [2] is opti-
mised in this paper. Firstly, we optimise the “Difﬁe-Hellman
handshake” and reduce the number of communication rounds
in Tor and obtain a simple optimisation. As it is still a direct
application of Difﬁe-Hellman key exchange, its efﬁciency
improvement is still not satisfactory. So Difﬁe-Hellman key
exchange is then extended and adapted for onion routing in a
more advanced way such that a sender can efﬁciently distribute
the sysmmetric sessions keys to the routers through the onion
packet. The new key exchange technique is called Difﬁe-
Hellman chain, which chain up the Difﬁe-Hellman handshakes
for the routers and receiver such that they are much more
efﬁcient then separate Difﬁe-Hellman handshakes. An efﬁcient
onion routing protocol is designed in Section V using Difﬁe-
Hellman chain. It employs Difﬁe-Hellman chain and block
cipher encryption chain to improve computational and com-
municational efﬁciency of Tor. The new onion routing protocol
is more appliable than most onion routing implementations
including Tor. Network with smaller bandwidth and lower-
power routers can employ them to achieve anonymity.
II. PRELIMINARIES
Symbol denotions and background knowledge to be used in
this paper are introduced and recalled in this section.
A. Parameter Setting and Symbols
The following symbols are used in this paper.
• p and q are large primes and q is a factor of p − 1. G is
the cyclic subgroup with order q in Z∗
p. g is a generator
of G.
• Encryption of m using key k is denoted as Ek(m) where
block cipher (e.g. AES) is employed.
• Encryption chain of m using block cipher and key
k1, k2, . . . , ki is denoted as Ek1,k2,...,ki(m). The encryp-
tions are performed layer by layer. k1 is the the key used
in the most outer layer; k2 is the the key used in the
second most outer layer; ...; ki is the the key used in
the most inner layer.
• In onion routing, the routers are P1, P2, . . . , Pn and the
receiver is denoted as the last router Pn+1.
• The private key of Pi
is xi, which is randomly
chosen from Zq. The corresponding public keys are
y1, y2, . . . , yn where yi = gxi mod p for i = 1, 2, . . . , n.
B. Difﬁe-Hellman Key Exchange
Symmetric ciphers like block cipher are very efﬁcient. How-
ever, unlike asymmetric cipher they depend on key exchange
protocols to distribute keys. The most common key exchange
protocol is Difﬁe-Hellman key exchange protocol. Two parties
A and B can cooperate to generate a session key as follows.
1) A randomly chooses α from Zq and sends his key base
µ = gα mod p to B.
2) B randomly chooses β from Zq and sends his key base
ν = gβ mod p to A.
3) A can calculate the key k = να mod p, while B can
calculate the key k = µβ mod p.
The famous Difﬁe-Hellman problem is recalled as follows.
Deﬁnition 1: (Difﬁe-Hellman problem) Given µ and ν, it
is difﬁcult to calculate k if the discrete logarithm problem is
hard.
III. SPECIFYING AND ASSESSING THE SUGGESTED
EFFICIENCY IMPROVEMENT IN TOR
The suggestion to employ symmetric cipher in Tor [2] is
quite simple. To precisely assessing its cost and comparing it
with our new design of key exchange, we need to specify it in
details. For simplicity of description, our speciﬁcation focuses
on efﬁciency improvement through symmetric cipher as it is
the focus of this paper, while the other optimisations of onion
routing in Tor are ignored. The suggested efﬁciency improve-
ment in Tor is speciﬁed in details as follows where a message
m is sent by a sender through n routers P1, P2, . . . , Pn to a
receiver Pn+1.
1) For the receiver and each router Pi where 1 ≤ i ≤ n+1,
the sender randomly chooses an integer si from Zq and
calculates ˆki = gsi mod p.
2) The sender sends ˆk1 to P1, which returns ˆk′
1 = gs′
1 mod
p where s′
1 is randomly chosen from Zq. Both the sender
and P1 obtains their session key k1 = gs1s′
1 mod p.
3) The sender sends Ek1(P2) and Ek1(ˆk2) to P1, who
decrypts the two ciphertexts using his session key and
then sends ˆk2 and ˆk′
1 to P2.
4) P2 randomly chooses s′
2 from Zq and obtains his session
key with the sender k2 = ˆks′
22
= gs2s′
2 and his session
key with P1, K1,2 = . He sends E
5) The sender encrypts the message m, the key base list
gs1, gs2, . . . , gsn+1 and the route list p1, p2, . . . , pn+1 as
follows.
a) He calculates e = Ek1,k2,...,kn+1(m).
b) He calculates Ki = Ek1,k2,...,ki−1(gsi) for i =
1, 2, . . . , n + 1.
c) He calculates pi = Ek1,k2,...,ki(Pi+1) for i =
1, 2, . . . , n + 1 where Pn+2 = Pn+1.
d) He sends out the initial onion
O1 = (a1, b1,1, b1,2, . . . , b1,n+1,
c1,1, c1,2, . . . , c1,n+1)
= (e, K1, K2, . . . , Kn+1, p1, p2, . . . , pn+1)
42
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

to P1.
6) Each
router
Pi
routes
the
onion
as
follows
where
the
onion
is
in
the
form
Oi
=
(ai, bi,1, bi,2, . . . , bi,n+1, ci,1, ci,2, . . . , ci,n+1)
when
it is sent to Pi.
a) Pi generates his session key ki = bxi
i,1 mod p.
b) Pi uses ki to decrypt ci,j for j = 1, 2, . . . , n + 1
and obtains Pi+1 = Dki(ci,1).
c) Pi uses ki to decrypt ai and obtains ai+1 =
Dki(ai).
d) Finally, Pi sends
Oi+1 = (ai+1, bi+1,1, bi+1,2, . . . ,
bi+1,n+1, ci+1,1, ci+1,2, . . . , ci+1,n+1)
to Pi+1 where bi+1,j = Dki(bi,j+1) and ci+1,j =
Dki(ci,j+1) for j = 1, 2, . . . , n and bi+1,n+1 and
ci+1,n+1 are two random integers in the cipher-
text space of the employed symmetric encryption
algorithm.
7) At last, Pn+1 receives
On+1 = (an+1, bn+1,1, bn+1,2, . . . ,
bn+1,n+1, cn+1,1, cn+1,2, . . . , cn+1,n+1)
and operates as follows.
a) Pn+1
generates
his
session
key
kn+1
=
bxn+1
n+1,1 mod p.
b) Pn+1 uses kn+1 to decrypt cn+1,j and obtains
Pn+1 = Dkn+1(cn+1,1).
c) Pn+1 knows that itself is the receiver as Pn+1 is
its own identity.
d) Pn+1 uses kn+1 to decrypt an+1 and obtains m =
Dkn+1(an+1).
IV. A SIMPLE OPTIMISATION OF TOR AND ITS
DRAWBACK: SIMPLER BUT STILL DIRECT APPLICATION OF
DIFFIE-HELLMAN KEY EXCHANGE
A simple optimisation of Tor is proposed in this section.
Like in the original onion routing (and many other cryp-
tographia protocols), it assumes that every router and the
receiver have discrete-logarithm-based public key encryption
algorithms (e.g. ElGamal encryption) and already set up their
public keys so that half of the preparation work in Difﬁe-
Hellman key exchange can be saved. Moreover, multiple
rounds of communication between each pair of participants are
combined to improve communication efﬁciency. It still employ
Difﬁe-Hellman handshakes in the staightforward way and is
described as follows.
1) For the receiver and each router Pi where 1 ≤ i ≤ n+1,
the sender randomly chooses an integer si from Zq and
generates a session key ki = ysi
i .
2) The sender encrypts the message m, the key base list
gs1, gs2, . . . , gsn+1 and the route list p1, p2, . . . , pn+1 as
follows.
a) He calculates e = Ek1,k2,...,kn+1(m).
b) He calculates Ki = Ek1,k2,...,ki−1(gsi) for i =
1, 2, . . . , n + 1.
c) He calculates pi = Ek1,k2,...,ki(Pi+1) for i =
1, 2, . . . , n + 1 where Pn+2 = Pn+1.
d) He sends out the initial onion
O1 = (a1, b1,1, b1,2, . . . , b1,n+1,
c1,1, c1,2, . . . , c1,n+1)
= (e, K1, K2, . . . , Kn+1, p1, p2, . . . , pn+1)
to P1.
3) Each
router
Pi
routes
the
onion
as
follows
where
the
onion
is
in
the
form
Oi
=
(ai, bi,1, bi,2, . . . , bi,n+1, ci,1, ci,2, . . . , ci,n+1)
when
it is sent to Pi.
a) Pi generates his session key ki = bxi
i,1 mod p.
b) Pi uses ki to decrypt ci,j for j = 1, 2, . . . , n + 1
and obtains Pi+1 = Dki(ci,1).
c) Pi uses ki to decrypt ai and obtains ai+1 =
Dki(ai).
d) Finally, Pi sends
Oi+1 = (ai+1, bi+1,1, bi+1,2, . . . ,
bi+1,n+1, ci+1,1, ci+1,2, . . . , ci+1,n+1)
to Pi+1 where bi+1,j = Dki(bi,j+1) and ci+1,j =
Dki(ci,j+1) for j = 1, 2, . . . , n and bi+1,n+1 and
ci+1,n+1 are two random integers in the cipher-
text space of the employed symmetric encryption
algorithm.
4) At last, Pn+1 receives
On+1 = (an+1, bn+1,1, bn+1,2, . . . ,
bn+1,n+1, cn+1,1, cn+1,2, . . . , cn+1,n+1)
and operates as follows.
a) Pn+1
generates
his
session
key
kn+1
=
bxn+1
n+1,1 mod p.
b) Pn+1 uses kn+1 to decrypt cn+1,j and obtains
Pn+1 = Dkn+1(cn+1,1).
c) Pn+1 knows that itself is the receiver as Pn+1 is
its own identity.
d) Pn+1 uses kn+1 to decrypt an+1 and obtains m =
Dkn+1(an+1).
This modiﬁed Tor protocol only employs symmetric cipher
in encryption and decryption operations. The only public
key operations in it are n + 1 instances of Difﬁe-Hellman
key exchange. So although more encryption and decryption
operations are needed than in traditional onion routing, it
is still more efﬁcient in computation. However, it is less
efﬁcient in communication than traditional onion routing as
its onion packet contains additional encrypted key bases
bi,1, bi,2, . . . , bi,n+1. So its advantage in efﬁciency is not obvi-
ous. Therefore, it is only a prototype, while our ﬁnal proposal
is based on it but has higher requirements on efﬁciency: only
using symmetric cipher in encryption and decryption while in
comparison with traditional onion routing
43
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

• very little additional communication (e.g. one more inte-
ger) is needed;
• no more additional encryption or decryption operation is
needed.
V. A NEW AND MORE ADVANCED TECHNIQUE:
DIFFIE-HELLMAN CHAIN
The simple optimisation protocol in Section IV has demon-
strated that direct application of Difﬁe-Hellman key exchange
to onion routing (including original onion routing and Tor)
cannot achieve satisﬁactory advantage in efﬁciency. To reduce
additional communication and encryption and decryption op-
erations, a novel technique, Difﬁe-Hellman chain, is designed.
The Difﬁe-Hellman key bases for all the routers and the
receiver are sealed in the Difﬁe-Hellman chain, which appears
in each onion packet in the form of a single integer. For each
router, to generate his session key, he needs his private key
and a key base initially sealed in the Difﬁe-Hellman chain
by the sender and then recovered by cooperation of all the
previous routers in the course of routing. As only one single
integer is needed in each onion packet to represent the Difﬁe-
Hellman chain and commit to all the Difﬁe-Hellman key bases,
a very small amount of additional communication is employed
and no more encryption (decryption) operation is needed in
comparison with traditional onion routing.
A new onion routing protocol, called compressed onion
routing, is proposed. In compressed onion routing, a packet
(onion) consists of three parts: message, route list and key
base. Route list contains the identities of all the nodes on
the route. Key base is the base to generate the session keys
(symmetric keys) distributed to the nodes. The message part
in compressed onion routing is similar to that in most onion
routing schemes. The message is encrypted in a encryption
chain using the sessions keys of all the nodes. The readers
only need to note that efﬁcient block cipher is employed in
the encryption chain. In compressed onion routing, the route
list is the same as in other onion routing schemes. It consists
of all the routers’ identities. One encryption chain is used to
seal each router’s identity using the session keys of the all the
routers before it. The readers only need to note that efﬁcient
block cipher is employed in the encryption chains for the route
list.
The most important novel technique is generation and
update of the key base, which enables key exchange. Each
router builds his session key on the base of the key base using
his private key and update the key base for the next router.
The key generation function is similar to Difﬁe-Hellman key
generation, but we do not employ separate Difﬁe-Hellman
key exchange protocols to distribute the session keys to the
routers. Instead the key base updating mechanism actually
generates a key base chain and so all the session keys and
their generation functions are linked in a chain structure. So
the key exchange technique is called Difﬁe-Hellman chain.
After obtaining his session key, each router can extracts the
identity of the next router from the route list using his session
key, removes one layer of encryption from the message using
his session key and then forwards the onion to the next router.
The Difﬁe-Hellman chain only needs the bandwidth of one
integer, and thus is much more efﬁcient than separate key
distribution in communication. Novelty of the new compressed
onion routing protocol is that distribution of the sessions keys
and encryption of the routers’ identities are compressed such
that fewer computationally-costly public key operations and
communicationally-costly encryption chains are needed.
Suppose a message m is sent by a sender through n
routers P1, P2, . . . , Pn to the receiver Pn+1. Firstly, the sender
generates the session keys k1, k2, . . . , kn+1 respectively for
P1, P2, . . . , Pn+1 as follows.
1) The sender randomly chooses an integer s1 from Zq.
2) The sender calculates P1’s session key k1 = ys1
1 mod p.
3) The sender calculates s2 = s1 + k1 mod q.
4) The sender calculates P2’s session key k2 = ys2
2 mod p.
5) ......
6) ......
7) The sender calculates sn+1 = sn + kn mod q.
8) The sender calculates Pn+1’s session key kn+1
=
ysn+1
n+1 mod p.
Generally speaking, for i = 1, 2, . . . , n + 1, the sender
1) if i > 1 then calculates si = si−1 + ki−1 mod q as his
secret seed in the Difﬁe-Hellman chain for generation
of ki
2) calculates ki = ysi
i
where s1 is randomly chosen from Zq. In summary, the sender
uses the sum of the previous node’s session key and his secret
seed in the Difﬁe-Hellman generation of the previous node’s
session key as his secret seed to generate a node’s Difﬁe-
Hellman session key. The other secret seed to generate the
node’s session key is the node’s private key.
The route list consists of p1, p2, . . . , pn+1 where pi =
Ek1,k2,...,ki(Pi+1) and Pn+2 = Pn+1. The message is en-
crypted into e = Ek1,k2,...,kn+1(m). The onion is in the
form of Oi = (ai, bi, ci,1, ci,2, . . . , ci,n+1) when it reaches
Pi where ai is the encrypted message, bi is the key base
and ci,1, ci,2, . . . , ci,n+1 is the encrypted route list. Note that
although the encryption chain for the next router’s identity is
completely decrypted and discarded by each router, the length
of the encrypted route list is kept unchanged for the sake
of untraceability. If an onion packet becomes shorter after
each router’s routing, its change in length can be observed
and exploited to trace it. So we keep the length of each
encrypted route list constant to maintain the size of onion
packets. This can be implemented by inserting a random
tag into the onion packets after they discard an encryption
chain. The initial onion O1 = (a1, b1, c1,1, c1,2, . . . , c1,n+1) =
(e, gs1, p1, p2, . . . , pn+1). Note that e may actually contain
multiple symmetric ciphertext blocks as the message may be
long and is divided into multiple blocks when being encrypted.
For convenience of description encryption of the message is
still denoted as a single variable and the readers should be
aware that it is the encryption of the whole message and may
contain multiple blocks.
44
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

P1 receives O1 = (a1, b1, c1,1, c1,2, . . . , c1,n+1) from the
sender and then operates as follows.
1) P1 generates his session key k1 = bx1
1 mod p.
2) P1 uses k1 to decrypt c1,j for j = 1, 2, . . . , n + 1 and
obtains P2 = Dk1(c1,1).
3) P1 uses k1 to decrypt a1 and obtains a2 = Dk1(a1).
4) P1 calculates the new key base b2 = b1gk1 mod p.
Finally, P1 sends O2 = (a2, b2, c2,1, c2,2, . . . , c2,n+1) to P2
where c2,i = Dk1(c1,i+1) for i = 1, 2, . . . , n and c2,n+1 is a
random integer in the ciphertext space of the employed block
encryption algorithm.
More generally, for i = 1, 2, . . . , n each Pi receives Oi =
(ai, bi, ci,1, ci,2, . . . , ci,n+1) and operates as follows.
1) Pi generates his session key ki = bxi
i
mod p.
2) Pi uses ki to decrypt ci,j for j = 1, 2, . . . , n + 1 and
obtains Pi+1 = Dki(ci,1).
3) Pi uses ki to decrypt ai and obtains ai+1 = Dki(ai).
4) Pi calculates the new key base bi+1 = bigki mod p.
Finally,
Pi
sends
Oi+1
=
(ai+1, bi+1, ci+1,1, ci+1,2, . . . , ci+1,n+1)
to
Pi+1
where
ci+1,j = Dki(ci,j+1) for j = 1, 2, . . . , n and ci+1,n+1 is
a random integer in the ciphertext space of the employed
symmetric encryption algorithm.
At
last,
Pn+1
receives
On+1
=
(an+1, bn+1, cn+1,1, cn+1,2, . . . , cn+1,n+1)
and
operates
as follows.
1) Pn+1 generates his session key kn+1 = bxn+1
n+1 mod p.
2) Pn+1 uses kn+1 to decrypt cn+1,j and obtains Pn+1 =
Dkn+1(cn+1,1).
3) Pn+1 knows that itself is the receiver as Pn+1 is its own
identity.
4) Pn+1 uses kn+1 to decrypt an+1 and obtains m =
Dkn+1(an+1).
VI. ANALYSIS AND COMPARISON
Security of the compressed onion routing scheme depends
on hardness of Difﬁe-Hellman problem as its key exchange
mechanism is an extension of Difﬁe-Hellman key exchange. Its
main trick is combining key exchange with encryption chain
such that every router can obtain his session key with the
help the previous router. As security of Difﬁe-Hellman key
exchange has been formally proved and hardness of Difﬁe-
Hellman problem is widely accepted, no further proof of
security is needed except for Theorem 1, which shows that
the session keys can be correctly exchanged.
Theorem 1: For j = 1, 2, . . . , n + 1, the same session key
ki is generated, respectively by the sender as ki = ysi
i mod p
and by Pi as ki = bxi
i
mod p.
To prove Theorem 1, a lemma has to be proved ﬁrst.
Lemma 1: For j = 1, 2, . . . , n + 1, bi = gsi mod p.
Proof: Mathematical induction is used.
1) When i = 1, b1 = gs1 mod p
2) When i = j, suppose bj = gsj mod p. Then a deduction
can be made in next step.
TABLE I
COMPARISON OF THE ANONYMOUS COMMUNICATION CHANNELS
Scheme
public key exponentiation
ﬂexibility and
applicability
Mix network
≥ 6n + 4
No
AOS
2(n + 1)(n + 4)
Yes
Tor
2(2n − 1)
Yes
COR
3(n + 1)
Yes
TABLE II
COMPUTATIONAL EFFICIENCY COMPARISON FOR THE SENDER
Scheme
public key exponentiation
block cipher encryption
AOS
(n + 1)(n + 4)
0
Tor
n + 1
(n + 1)(1 + (3n + 2)/2)
COR
n + 1
(n + 1)(1 + (n + 2)/2)
3) When i = j + 1, bj+1 = bjgkj = gsjgkj mod p as it is
supposed in last step that bi = gsi when i = j. So
bj+1 = gsjgkj = gsj+kj = gsj+1 mod p
Therefore, bi = gsi mod p for j = 1, 2, . . . , n + 1 as a result
of mathematical induction.
2
Proof of Theorem 1:
According to Lemma 1,
ysi
i = gxisi = bxi
i
mod p
for j = 1, 2, . . . , n + 1.
2
Efﬁciency comparison between our new onion routing pro-
tocol and the existing anonymous communication channels is
given in Table I, Table II, Table III and Table IV where AOR
stands for asymmetric cipher based onion routing and COR
stands for compressed onion routing. The ﬁrst table shows the
advantage of our new technique over the existing anonymous
communication channels including onion routing and mix
network. The last three tables show our optimisation of onion
routing. It is assumed that the employed block cipher is 256-
bit AES. For simplicity, it is assumed that the message is one
block long, while the size of one block of the employed block
cipher should be large enough for a router’s identity. So all the
ciphertexts are one block long in our analysis, which does not
lose generality and can be extended to long message cases in
a straightforward way. As for asymmetric cipher in AOR, it is
supposed that ElGamal encryption, which is the most popular
with onion routing, is employed. More precisely, it is assumed
that the ElGamal encryption algorithm uses 1024-bit integers.
Comparison in the four tables illustrates that great efﬁciency
improvement is achieved in the two compressed onion routing
protocols.
VII. CONCLUSION
The new onion routing scheme proposed in this paper
greatly improves efﬁciency of onion routing by using symmet-
ric cipher and Difﬁe-Hellman chain. It needs smaller packet
45
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

TABLE III
COMPUTATIONAL EFFICIENCY COMPARISON FOR A ROUTER (RECEIVER)
Scheme
average public key
average block cipher
exponentiation
decryption
AOS
n + 4
0
Tor
3
2(n + 1)
COR
2
(n + 4)/2
TABLE IV
COMMUNICATIONAL EFFICIENCY COMPARISON
Scheme
number of bits in an onion packet
rounds
AOS
2048(n + 2)
n + 1
Tor
256(n + 2)
(n + 1)(n + 3)
COR
256(n + 2) + 1024
n + 1
size and less computation than the existing onion routing
schemes including TOR.
An open question in the future work is how to further
compress the size of onion packets. The route list chains
occupy most room in an onion packet. Can they be compressed
to further improve communication efﬁciency?
REFERENCES
[1] J. Camenisch and A. Mityagin. A formal treatment of onion routing.
In CRYPTO ’05, volume 3089 of Lecture Notes in Computer Science,
pages 169–187, Berlin, 2005. Springer-Verlag.
[2] R. Dingledine, N. Mathewson, and P. Syverson.
Tor: The second-
generation onion router. In USENIX Security Symposium, pages 303–
320, 2004.
[3] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental
game or a completeness theorem for protocols with honest majority. In
Proceedings of the Nineteenth Annual ACM Symposium on Theory of
Computing, STOC 1987, pages 218–229, 1987.
[4] D. Goldschlag, M. Reed, and P. Syverson. Onion routing for anonymous
and private internet connections. Comm. of the ACM, 42(2), page 84–88,
1999.
[5] K. Peng, C. Boyd, and E. Dawson.
Simple and efﬁcient shufﬂing
with provable correctness and ZK privacy. In PKC ’04, volume 2947
of Lecture Notes in Computer Science, pages 439–454, Berlin, 2004.
Springer-Verlag.
[6] K. Peng, C. Boyd, and E. Dawson. Simple and efﬁcient shufﬂing with
provable correctness and ZK privacy. In CRYPTO ’05, volume 3089
of Lecture Notes in Computer Science, pages 188–204, Berlin, 2005.
Springer-Verlag.
46
ICN 2011 : The Tenth International Conference on Networks
Copyright (c) IARIA, 2011              ISBN:978-1-61208-113-7

