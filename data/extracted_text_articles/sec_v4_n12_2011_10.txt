Genomics-based Security Protocols: From Plaintext to Cipherprotein 
 
 
Harry Shaw 
Microwave and Communications Systems Branch 
NASA/Goddard Space Flight Center 
Greenbelt, MD, USA 
harry.c.shaw@nasa.gov 
Sayed Hussein, Hermann Helgert 
Department of Electrical and Computer Engineering 
George Washington University 
Washington, DC, USA 
drsay@gwu.edu, hhelgert@gwu.edu
 
 
Abstract—The evolving nature of the internet will require 
continual advances in authentication and confidentiality 
protocols. Nature provides some clues as to how this can be 
accomplished in a distributed manner through molecular 
biology. Cryptography and molecular biology share certain 
aspects and operations that allow for a set of unified principles 
to be applied to problems in either venue. A concept for 
developing security protocols that can be instantiated at the 
genomics level is presented. A DNA (Deoxyribonucleic acid) 
inspired hash code system is presented that utilizes concepts 
from molecular biology. It is a keyed-Hash Message 
Authentication Code (HMAC) capable of being used in secure 
mobile ad hoc networks. It is targeted for applications without 
an available public key infrastructure. Mechanics of creating 
the HMAC are presented as well as a prototype HMAC 
protocol architecture. Security concepts related to the 
implementation differences between electronic domain security 
and genomics domain security are discussed. This paper 
demonstrates a practical path to a composable, standardized 
biological 
internet 
security 
protocol 
that 
encompasses 
biological and computing domains.  
Keywords-HMAC; keyed Hash Message Authentication 
Code; Cryptography; DNA; PKI; public key infrastructure; 
MANET; cipherprotein; epigenetics; security architecture 
I. 
 INTRODUCTION  
The ability to authenticate the identity of participants in a 
network is critical to network security. Bimolecular systems 
of gene expression ―authenticate‖ themselves through 
various means such as transcription factors and promoter 
sequences. They have means of retaining ―confidentiality‖ of 
the meaning of genome sequences through processes such as 
control of protein expression. These actions occur 
independently of a centralized control mechanism. The 
overall goal of the research is to develop practical systems of 
authentication and confidentiality such that independence of 
authentication and confidentiality can occur without a 
centralized third party system.   
Genes are capable of expressing a wide range of products 
such as proteins based upon an alphabet of only four 
symbols. This research implements a keyed-HMAC system 
using a DNA-based code and certain principles from 
molecular biology. The system will permit Mobile Ad hoc 
Networks (MANET) to distinguish trusted peers, yet tolerate 
the ingress and egress of nodes on an unscheduled, 
unpredictable basis. The system allows for authentication 
without a Public Key Infrastructure (PKI), X.509 certificates, 
RSA and nonce exchanges, etc.  It also provides for a 
biological authentication capability. 
This paper will move between the electronic and 
genomics contexts when discussing the protocols and their 
potential instantiation. This scheme can be used to create 
encrypted forms of gene expression that express a unique, 
confidential pattern of gene expression and protein synthesis. 
The ciphertext code carries the promoters (and reporters and 
regulators) necessary to control the expression of genes in 
the encrypted chromosomes to produce cipherproteins. 
Unique encrypted cellular structures can be created that can 
be tied to the electronic hash code to create biological 
authentication and confidentiality schemes.  
This paper is organized as follows: 
 
Background information on the state of the art and a 
description of the elements of the prototype genomic 
HMAC architecture 
 
A description of the DNA code encryption process, 
genome selection and properties 
 
The elements of the prototype protocol architecture 
and its concept of operations 
 
A short plaintext to ciphertext encryption example. 
 
Description of the principles of gene expression and 
transcriptional control to develop protocols for 
information security. These protocols would operate 
in both the electronic and genomic domains. 
II. 
BACKGROUND OF DNA CRYPTOGRAPHY 
The use of DNA as a cryptographic medium is not new. 
DNA encryption systems are one of the paths taken in the 
field of molecular computing. Systems using DNA as a one-
time code pad in a steganographic approach have been 
described [1], [2].  An image compression – encryption 
system using a DNA-based alphabet [3] was demonstrated 
including a genetic algorithm based compression scheme. 
Schemes utilizing DNA encryption utilizing dummy 
sequences of DNA have been published [4]. The 
steganographic approach is highly desirable because DNA 
provides a natural template for the hidden message approach 
[5]. It also appears in applications such as DNA watermarks 
[6] and specifically DNA watermarks to identify genetically 
106
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

modified organisms utilizing the DNA-Crypt algorithm. [7]. 
This algorithm permits a user to insert encrypted data into a 
genome of choice.  
The research described herein is not just about inserting 
encrypted sequences into genomes. It will insert messages 
that can control gene expression through a variety of 
mechanisms. It is also focused on a broader goal of 
extending 
biological 
mechanisms 
that 
control 
gene 
expression 
into 
a 
domain 
that 
includes 
network 
authentication. 
III. 
ELEMENTS OF THE GENOMICS HMAC ARCHITECTURE 
Plaintext is mapped into a reduced representation 
consisting of an alphabet of q letters, where q = 4 for a 
genomic alphabet such as DNA or Ribonucleic acid (RNA), 
q = 20 for proteomic alphabet, or other values when 
representing other functions in molecular biology, e.g., 
histone code. The actual HMAC requires additional base 
representations beyond the four DNA bases, but the 
minimum requirement is shown in (1) and (2) [8]. B is the 
set of DNA bases A, T, C and G, which represent the 
molecules adenine, thymine, guanine and cytosine and 
represent the entire alphabet of the genomic hash code. 
DNA bases have the property that the only permitted pairs 
are Watson-Crick matches (A-T), (C-G), thus, the binary 
representations of B and B‘ sets are complimentary such 
that a r-bit length sequence of Bq and B‘q maintain the 
identity property shown in (3). Assignment of letter to DNA 
base sequences is performed. Letters with greater frequency 
can be assigned shorter DNA sequences to reduce the code 
size. 
A. Lexicographic and DNA representation of plaintext 
Plaintext words, P are converted into a numerical form 
suitable for subsequent coding into the cryptographic 
alphabet of the required code. Plaintext words are coded such 
that a lexicographic order is maintained between words, i.e., 
the numerical forms may take either integer or floating point 
representations. F is a function that converts the plaintext to 
lexicographic numerical form. D represents the numerical 
form of the dictionary (lexicographically ordered set) such 
that D1,..n represents the set of all words. The subset of D1,..i 
represents the subset of words in the plaintext message. The 
function U assigns the DNA base sequence corresponding to 
the Di as shown in (4), (5) and (6). L is the plaintext message 
coded into the DNA alphabet found in sets B and B‘. 
B. Sentence-message order coding 
A system of linear equations codes the lexicographic 
position of each word relative to the sentence position of 
each word. This complicates detection of words based upon 
frequency analysis. Multiple appearances of the same word 
are uniquely coded. As a minimum requirement, if there are i 
DNA representations in the message, and n represents a 
numerical sequence related to the number of DNA 
representations in the message (the simplest case being i = 1, 
2, 3, …, n), then the system of linear equations shown in (7)  
provide the solutions for sentence-message order coding. 

A T C G
Bq
, , ,

                                   (1) 

T A G C
Bq
,
,
,
' 
                                   (2) 
q
r
B
B
r
q
r
q
1,....,
          
1
'
 


                (3) 
Equations 1 and 2 define the sets containing the DNA 
bases that comprise the alphabet for the HMAC code. 
Equation 3 defines the complimentary relationship required 
for the binary representations of the members of that space. 
For example: the XOR product of the rth bit of A and T is a 
one as is true for T and A, C and G, G and C.  
Equation 4 defines each word in the message, Pi as a 
member of a set of all words in a lexicographically ordered 
dictionary. Equations 5 and 6 show the operation of the 
function that assigns a DNA sequence using the members of 
the set of DNA bases to a coding of concatenated sequences 
labeled L and L‘. L and L‘ maintain the same complimentary 
relationship that is a property of the individual DNA bases in 
the sets Bq and B‘q. 
This yields a series of coefficients x1, x2, … , xi that are 
concatenated as shown in (8). The binary representation of 
each coefficient undergoes bit expansions such that only Bq 
or B‘q codes are represented in the bit stream created by (8).  
X represents the relationship between lexicographic coding 
of the words and their position in the message. 
n
i
D
D
F P
D
i
i
i
i






          
)          
(
1
          (4) 
)
,
(
)|| ...||
,
(
)||
,
(
2
1
q
i
q
q
U D B
U D B
L U D B
   (5) 
)
,
(
)|| ...||
,
(
)||
,
(
'
'
2
'
1
'
q
i
q
q
U D B
U D B
L U D B
 (6) 
..  
  
  ...  D
  
...........
..........
  ...  D
  
  ...  D
  
...
2
1
1
3
2
1-i
1
i
2
1
2
1







































i
i
i
r
r
r
D
D
D
D
D
D
x
x
x
         (7) 
ix
x
x
X
|| ...||
||
2
 1
                  (8) 
X
L
M


                        (9) 
C. Message coding 
DNA coding on the message is completed by XOR and 
bit expansions to maintain the DNA base coding in the 
binary sequence in the operation shown in (9). M is the 
plaintext message coded into the DNA alphabet and coded 
again with the sentence-message coefficients. This sequence 
will be subjected to encryption. 
The set of linear equations in equation 7 provide the 
process of sentence-message order coding using the rth 
107
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

position in the message to code each word of the message. 
The resulting coefficients are concatenated and XOR‘d with 
the coded plaintext message to produce the ciphertext 
message. 
IV. 
ENCRYPTION PROCESS 
Approximately 800 genomes have been sequenced [9]. 
The human genome alone has approximately 3.2 million 
base pairs. The sets of genomes provide for the possibility of 
―security by obscurity‖. Additionally, there is an infinite 
number of ways to use genome sequences as cryptographic 
keys. However, genomes have high degrees of redundancy 
and sequence conservation across species. Consequently, 
sections of genomes used as keys should be treated as one-
time pads. The first step is to select a genome and a sequence 
from that genome and encode it with the binary 
representations of Bq and B‘q. 
DNA consists of two complimentary sequences, referred 
to as the sense and antisense strands as shown in Fig. 1 [10]. 
A DNA sequence has a start point called the five-prime end 
(5‘) and an endpoint called the three-prime (3‘). In 
biochemistry, the 5‘ and 3‘ designations refer to orientation 
of each strand necessary for proper replication and 
transcription. The complements are bonded to each other 
base by base to create base pairs. The antisense strand is 
oriented in the 3‘ to the 5‘ direction, relative to the sense 
strand. For a DNA encryption key, both sense and antisense 
strands can be encoded and utilized. Figs. 2 and 3 
demonstrate two ways of implementing the chromosome 
encryption key in the HMAC scheme. Fig. 2 represents the 
simplest scheme, in which successive bases from the key and 
message are XOR‘d and a single ciphertext message is 
produced. Encryption proceeds in the 5‘ to 3‘ direction using 
the sense strand. Fig. 3 represents a more complex scheme, 
in which both sense and antisense bases from key and 
message are XOR‘d. Encryption proceeds in the 5‘ to 3‘ 
direction in both strands. 
A. Mismatches and Annealing 
The encryption process generates base pair mismatches 
that do not conform to the A-T, C-G pairing rule. These 
mismatches are central to creating a one-way hash code. 
Subsequent to the encryption step, the mismatches are 
resolved through an annealing process that results in an 
irreversible transformation of the encryption sequence not 
directly traceable to the original ciphertext. 
V. 
PROTOTYPE DNA-BASED, KEYED HMAC SYSTEM 
Assume a network such as the one shown in Fig. 4. Jack, 
Jill, JoAnn and Lisa wish to form a secure MANET. In the 
same wireless transceiver space can be found X and Y whose 
intentions are unknown, but are capable of sending and 
receiving messages.  Jack, Jill, JoAnn and Lisa possess all of 
the required authentication tools: 
 
A common genome, C, to use as an HMAC key. 
 
A pre-shared secret, pss, unique to each party. 
 
The DNA-based HMAC algorithm. 
Consider two authentication scenarios. In the first 
scenario Jack, Jill, JoAnn and Lisa send and receive cleartext 
messages using the DNA-based HMAC authentication. If the 
receiver is not the intended destination, the receiver 
rebroadcasts the message with their hash and the process 
continues until the message reaches the intended receiver or 
until a message time-out period elapses. X and Y also 
receive the cleartext messages and hash codes. X and Y may 
possess the algorithm. However, if X and Y wish to 
substitute a new message with a valid hash code, or forward 
the message and have it accepted by the network members, 
they have to create a valid hash code and checksum, which 
requires knowledge of the chromosome sequence and valid 
pre-shared secrets known to the other MANET nodes. The 
MANET members change their pre-shared secrets on a pre-
established basis to thwart a brute force attack to derive the 
pre-shared secret from the hash code.  
In the second scenario, Jack, Jill, JoAnn and Lisa wish to 
establish a trust relationship before exchanging sensitive 
information across a MANET. In this case, the participants 
utilize a confidentiality (encryption) protocol for the 
messages and establish a chain of custody using keyed 
HMAC authentication.  A hash chain of hash codes is 
established such that each recipient can determine the origin 
and subsequent hops of the message. In this case, X and Y 
cannot read the plaintext and the hash code transcript may be 
encrypted and compressed with the ciphertext. 
A. Genomic hash code properties 
Table 1 summarizes the properties of the prototype hash 
code against the requirements for an ideal hash code [11]. 
Fig. 5 provides a flow chart of the genomic hash coding 
process. 
B. Initialize and Perform Lexicographic and DNA 
assignments  
The plain text message is read and parsed into 3-word 
blocks (3WB). Take each word in the string, assign it a 
lexicographic value of x.yyyy….y where x = 1,....,26 
corresponding to the first letter of the word and subsequent 
letters are assigned to each successive decimal place until the 
entire word is coded in a rational number. Assign a DNA 
letter code to each letter. Most common English alpha 
characters use 2-letter codes, the rest use a 3-letter code as 
shown in Table 2. The column labeled ‗‘ is the English 
alphabetic character adjacent to its DNA code equivalent. As 
an example, the short phrase ‗jump out windows‘ is shown in 
its lexicographic and DNA assigned forms in Table 3. 
C. Binary representation of the DNA bases 
The four DNA bases (A, T, C, G) are represented by 
binary sequences (0011, 1100, 1001, 0110). The remaining 
12 four-bit sequences code for transitional base sequences 
that are used to anneal mismatches in the encryption process 
as shown in Table 4. The ‗Key‘ column represents the base 
in the chromosome encryption key. The ‗M‘ column 
represents the corresponding base in the DNA coded 
message. 
108
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

The ‗Result‘ column represents the results of encrypting 
the key onto the message. The ‗Anneal‘ column represents 
the final ciphertext base. In an operational system, all codes 
would be significantly lengthened to thwart brute force 
attacks. 
TABLE 1.        GENOMIC HASH CODE PROPERTIES. 
Property 
Compliance 
Produces a fixed length output. 
2560 bits 
Can be applied to a block of data of any 
length 
Yes. 
H(x) is relatively easy to compute for any 
message x. 
Yes. 12 step process for 
hash code. 
One-way property. For any h, it is 
computationally infeasible to find H(x)=h 
To be determined 
Weak collision resistance. For a set of xi 
messages, with y≠xi for all i, no 
H(y)=H(xi) for all i. 
Yes. 
Strong collision resistance. For any x,  
with yx, no H(y)=H(x) 
No. Messages ≤  512 bits 
require padding 
TABLE 2.     SAMPLE OF ALPHA TO DNA CONVERSION CODES. 

DNA 

DNA 

DNA 

DNA 
0 
CGG 
G 
TT 
N 
TG 
U 
CT 
A 
GC 
H 
AC 
O 
AG 
V 
CTG 
B 
TGT 
I 
AA 
P 
GA 
W 
CAC 
C 
TC 
J 
AAG 
Q 
CCT 
X 
GTA 
D 
GT 
K 
ACT 
R 
CC 
Y 
GTT 
E 
TA 
L 
AT 
S 
GG 
Z 
TAG 
TABLE 3. PLAINTEXT TO LEXICOGRAPHIC ORDER AND DNA 
LETTER CODES. 
# 
Conversion 
Plain text 
Lexicographic 
Conversion 
DNA Conversion 
1 
jump 
10.211316 
AAGCTCGGA 
2 
out 
15.2120 
AGCTCA 
3 
windows 
23.9144152319 
CACAATGGTAGC
ACGG 
TABLE 4. ENCRYPTION AND ANNEALING TABLE. 
Key 
M 
Result 
Anneal 
Key 
M 
Result 
Anneal 
A 
T 
T 
G 
C 
G 
G 
A 
A 
A 
gA 
C 
C 
A 
aA 
C 
A 
C 
gC 
T 
C 
C 
aC 
G 
A 
G 
gG 
A 
C 
T 
aT 
T 
T 
A 
A 
T 
G 
C 
C 
C 
T 
G 
cC 
G 
G 
A 
tA 
G 
T 
C 
cG 
A 
G 
G 
tG 
A 
T 
T 
cT 
C 
G 
T 
tT 
T 
 
D. Encryption, Mismatches and Annealing  
Fig. 5 also provides a short example of the encryption 
and annealing process. Each base in the chromosome is 
XOR‘d against the corresponding base in the message. If the 
base in the message is the complement of the base in the 
chromosome, the base in the message is copied to the 
encrypted output string and then altered to a new base in the 
annealed output string If the base in the message is not the 
complement of the base in the chromosome, a transitional 
base, whose value depends upon the mismatch is written to 
the encrypted output string. The 5‘ base always determines 
the change in the other strand; consequently, a 5‘ G 
mismatch always codes for a 3‘ transitional base. This 
feature allows tracking of point mutations and provides a 
future expansion capability for mutations. The annealing 
process also alters the encrypted result by transforming the 
positions that are not mismatches. 
E. Cryptographic Genome 
 Mycoplasma genitalium G37 (National Center for 
Biotechnology Information accession number NC000908.2) 
is the bacterial genome used as an encryption key in the 
prototype system. There are a number of characteristics of 
M. genitalium that make it a good candidate as an 
encryption key base. It is small (it may be the smallest, self-
replicating genome).  It has 580,070 base pairs with 470 
predicted coding regions. M. genitalium has a low G+C 
content of 34% [12]. A random, uniform distribution of 
basepair content would provide for 50% G-C pairs and 50% 
A-T 
pairs. 
This 
feature 
provides 
some 
testability 
advantages. The genome contains 470 predicted protein 
coding regions, which is a manageable number of potential 
cipherproteins.  Knowledge of the genome coding 
characteristics is important in selecting and utilizing 
genomes as cryptographic keys. Approximately 62,000 base 
pairs are being utilized from the M. genitalium genome for 
the prototype HMAC. 
F. Protocol for Message Authentication. 
The process is as follows:  
 
Encode the plaintext message into DNA code (Pre-
sense message) 3 words at a time (3 word blocks – 
3WB) 
 
Encrypt with pre-shared secret chromosome key and 
generate sense and antisense strands. 
 
Different chromosome segments are used to encrypt 
each 3WB for increased key confidentiality. 
 
Combine sense and antisense strands to create a 
checksum (S). 
 
Anneal the sense strand (Sender) or the antisense 
strand (Receiver) removing the transitional bases in 
the 3WBs. 
 
109
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

110
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

111
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

 
Concatenate the first 64 DNA bases from the first 
nine 3WBs to create the Promoter (P). 
 
Append the checksum to the Promoter. The 
Promoter || checksum is the Hash Code, K (2560 
bits long). The sender and receiver processes are 
summarized in Fig. 6. 
The receiver extracts the Promoter and checksum from 
the message. The hash code computed at the receiver must 
have the complement of the Promoter sequence and an exact 
match of the checksum.  Sender and receiver must have the 
pre-shared secret of the genome, and the location of the first 
base of the sequence. A sample of the output for the test 
message ‗jump out windows‘ is shown in Fig. 7. The hash 
code has been truncated for test and presentation purposes. 
G. Short Message Performance 
A critical factor in determining the goodness of a hash 
code is the ability to satisfy criteria four and five from Table 
1. A hash code algorithm should not produce identical hash 
code outputs for two or more different messages. 
Performance of short messages was evaluated for soft and 
hard collision resistance.  The number of MAC 
verifications, R, required to perform a forgery attack on a 
m-bit MAC by brute-force verifications [13] is shown in 
equation 10: 
1
1
1
2
2
/)1
(2
2







m
m
m
m
R
                 (10) 
The variable R is an approximate upper bound to the 
brute-force verification 
limit. 
Short 
messages 
were 
repeatedly hashed using over different cryptographic 
sequences to look for collisions. The process is shown in 
Fig. 8. Table 5 summarizes the results of those tests. 
The single letter message exhibited 403 checksum 
collisions and 466 hash code collisions. Chromosomes have 
a high degree of redundancy and repetition; therefore short 
messages will require padding to eliminate hash code 
collisions. These statistics utilize different transcripts on the 
same message to identify potential collisions. These 
statistics should be indicative of the potential for multiple 
messages to produce the same hash code from a single 
transcript. For secure authentication purposes, this code 
must be implemented with higher level protocols that would 
block a brute force attack and not reuse genome sequences 
for authentication.  It must also move the starting point in 
the genome to widely separated start positions to prevent an 
attacker from guessing the encryption sequence. 
 
 
 
 
 
 
 
Figure 8. Collision resistance tests for short messages. 
TABLE 5. SAMPLE OF HASH CODE COLLISIONS 
Plain Text 
Msg Length 
Hash Code 
Length 
Total Hash 
Code 
Collisions 
Total C/S 
Collisions 
R 
z 
1 
22 
466 
403 
2097152.5 
ly 
2 
30 
255 
214 
536870912.5 
cat 
3 
36 
136 
109 
34359738369 
vent  
5 
64 
0 
0 
9.22337E+18 
aeiou  
6 
64 
0 
0 
9.22337E+18 
jump out windows  
16 
64 
0 
0 
9.22337E+18 
jump out windows 
jump out windows 
jump out windows 
jump out  
59 
256 
0 
0 
5.7896E+76 
the 123 of my 
fields are very 
large please 
require all 
personnel to take 
their equipment 
with them for the 
work to be 
performed in 
365777 small 
increments it will 
be good to get 
practice on these 
tasks  
201 
576 
0 
0 
1.2367E+173 
 
A hash code must be secure against the possibility that 
the cryptographic key, in this case the original genome 
sequence cannot be recovered from the hash code.  Fig. 9 
represents a small MANET example for developing trust 
metrics. 
Assume Jack is broadcasting forward requests to 
establish a link with Lisa and Lisa is broadcasting return 
route requests to Jack to establish a return link. Jill is 
relaying route requests in both directions. Felix wishes to 
join the MANET. Each node is capable of dynamically 
appearing and disappearing from the network at will via 
application of a dynamic source routing protocol. Each node 
can also take the role untrusted/unknown trust or trusted 
depending upon the situation. Source and Destination must 
determine the trustability of a potential route through some 
quantitative means. In this case successful forward and 
return route requests (FREQ, RREQ) and route delays are 
used to create the trust metrics.  The sources and 
destinations can set the minimum level of trust for routes via 
a dynamic fitness algorithm. 
To establish Felix as a trusted member, he relays 
forward REQs from Jack destined for Lisa and return REQs 
from Lisa destined for Jack with his DNA HMAC 
authentication attached. JoAnn, does not respond to route 
requests and those requests time-out. 
 
112
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

 
Figure 9. MANET route establishment at a slice in time. 
Y is a malfeasor attempting to breach the network by 
sending route requests with counterfeit DNA HMAC 
authentication and analyzing received DNA HMACs for 
vulnerabilities. Assume that when Y sends a counterfeit 
route request, genuine nodes respond with negative 
acknowledgement attached to a genuine authentication code. 
The questions to be answered are: 
 
Can Y establish a counterfeit authentication code 
(hash + checksum) for the current session (however 
a session is defined)? 
 
Can Y utilize the stolen information to recover 
information that might be useful for a future 
network breach? 
If Y can recover the original cryptographic sequence, or 
determine the genome and genome location a cryptographic 
key was taken from, Y may be able to forge a valid hash 
code. This could be problematic for a cryptographic 
sequence due to the high degree of redundancy in the all 
genomes.  For this application, the hash code must be 
evaluated against the cryptographic key to ensure it has the 
proper characteristics of diffusion and confusion. 
 
VI. 
MUTATION EFFECTS, FITNESS, DIFFUSION AND 
CONFUSION 
Life is intolerant of a high mutation rate in its genetic 
code. Ribonucleic acid (RNA) viruses have the highest 
mutation rate of any living species, 10-3 to 10-5 
errors/nucleotide and replication cycle [14]. The human 
DNA mutation rate has been approximated to be on the 
order of 10-8 errors/nucleotide and generation [15]. Injection 
of mutations into DNA encrypted messages is an approach 
to improving the encryption process. Because of the 
dynamic, evolutionary nature of this approach, potential 
intruders must continually intercept decoding instructions 
between source and destination. Missing one generation of 
genome decryption information seriously corrupts the 
analysis process. Missing multiple generations eventually 
renders previous decryption analyses useless. 
In evolutionary biology, fitness is a characteristic that 
relates to the number of offspring produced from a given 
genome. From a population genetics point of a view the 
relative fitness of the mutant depends upon the number of 
descendants per wild-type descendant [16]. In evolutionary 
computing, a 
fitness algorithm determines 
whether 
candidate solutions, in this case encrypted messages, are 
sufficiently encrypted to be transmitted. This DNA 
encryption method uses evolutionary computing principles 
of fitness algorithms to determine, which encrypted mutants 
should be selected as the final encrypted ciphertext. Two 
parameters, Confusion and Diffusion are being used as the 
basis of the fitness criteria. Diffusion and Confusion are 
fundamental characteristics of ciphers. Shannon [17] 
describes them as: 
1) Diffusion: any redundancy or patterns in the plaintext 
message are dissipated into the long range statistics of the 
ciphertext message. 
2) Confusion: make complex the relationship between 
the plaintext and ciphertext. A simple substitution cipher 
would provide very little confusion to a code breaker. 
 
The challenge is to create a set of FREQ and RREQ 
messages that hash into codes with a high degree of 
diffusion and confusion. One strategy for attacking the 
authentication message is to generate long strings of zeros 
and identify the correct code for the non-zero positions. If a 
message generates long strings of zeros it is particularly 
vulnerable to a key recovery attack because the attacker can 
reduce the number of bit matches required by the length of 
zero bit blocks. Table 7 summarizes test results of 1000 
trials on messages consisting of zeroes and spaces against 
the genome. No collisions were identified.  The hash code 
will be tested against all other single character strings to 
identify patterns. A sample hash code of a string of 192 
zeros is shown below in Table 6.  
TABLE 6. SAMPLE HASH CODE STRING OF 192 ZEROS 
Checksum 
DNA Hash Code 
10437404 
AATTCTAAGTTCCCGCCCGTCGGTCCGCCGCCC
GTCCGGTCCGCCGCCCGTCCCGGTCCGCCGCA
ATCTCAATTCTCGCCCGTCGGTCCGCCGCCCGT
CCGGTCCGCCGCCCGTCCCGGTCCGCCGCCAA
CTCCAATCTTGCCCGTCGGTCCGCCGCCCGTCC
GGTCCGCCGCCCGTCCCGGTCCGCCGCCCAAT
CCGAACTTCCCCGTCGGTCCGCCGCCCGTCCG
GTCCGCCGCCCGTCCCGGTCCGCCGCCCGAAC
CGTAATTCTCCGTCGGTCCGCCGCCCGTCCGGT
CCGCCGCCCGTCCCGGTCCGCCGCCCGTAACG
TTAATCTTCGTCGGTCCGCCGCCCGTCCGGTCC
GCCGCCCGTCCCGGTCCGCCGCCCGTCAAGTT
CAACTTTAATCCGAACTTCAATCGTAACGTTA
ATCTTTCGTTTAAGTTCAACTTTAATTAATTCT
AATTTCAACCGTAATTCTAACGTTAAGTTCAAC
TTTCGTTTCAATTCTAATTTCAATC 
  
TABLE 7. TEST RESULTS ON REDUNDANT STRINGS OF ZEROES MESSAGES  
Length of ‘0’s in Plain 
Text 
Number of Collisions after 1000 trials 
64 
0 
96 
0 
192 
0 
113
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Next the hash codes were compared to the original 
cryptographic keys to evaluate diffusion and confusion. 
Table 8 displays four mutation samples from 50 
combinations of hash codes on the message ‗jump out 
windows‘ with encryption keys from the genome. The 
process was run on 1000 message combinations at a time. 
Mutants 4 and 25, for example would be particularly poor 
fits due to the number of consecutive matches between the 
hash code and encryption key. Mutant 10 has only one 
match of two consecutive bases and a fewer than ¼ of the 
bases are identical between the hash code and key.  Each 
position in the hash code has 1 of 4 chance of randomly 
matching the same location in the encryption key. The 
confusion metric counts the number of 2-base, 3-base, 4-
base and 5-base consecutive matches between the hash code 
and the key. Each combination actually represents a mutant 
message, which can be further evaluated via a genetic 
algorithm. One of the major advantages of this system of a 
conventional encryption system is the ability to provide a 
set of encrypted outputs from, which the most fit (best) 
member can be selected. 
TABLE 8. SAMPLE MUTANT ENCRYPTIONS FOR HASH CODES AND DNA 
ENCRYPTION KEY FOR MESSAGE ‗JUMP OUT WINDOWS‘ 
ID 
64 Base Pair Hash Code 
Cryptographic key 
Mutant 4 
AAAAAATGATGGTCCGC
CAGTGCTCCGGCTCTCCA
ATGCCTGAATCAGATGG
AGAGATTCTGGC 
TAAGTTATTATTTA
GTAAGTTATTATTT
AGTTAAGTTATTAT
TTAGTTTAAGTTATT
ATTTAGT 
Mutant 10 
AAAAAACGATGGCTGGC
GATCTCTCCGTTCCCGTA
ACTCCTGAAGGATAGCT
ATAGATTCCCTC 
TTATAAGTTATTATT
TAGTAAGTTATTAT
TTAGTTAAGTTATT
ATTTAGTTTAAGTT
ATTATTT 
Mutant 23 
AAAAAAGGAGGGCGGG
CCAGTGCTCCGGCTCTTC
AATCGCGTAAGTAGATC
CACAGAGTGTCTG 
AAGTTATTATTTAG
TTAAGTTATTATTTA
GTTTAAGTTATTATT
TAGTTATAAGTTAT
TATTTA 
Mutant 25 
AAAAAAGGAGGTTTGTG
TAGCGTTTGGGCCCTCG
AACCGGCGAAGGAGAGG
GAGATATCTTCCC 
GTTAAGTTATTATTT
AGTTTAAGTTATTA
TTTAGTTATAAGTT
ATTATTTAGTTAAT
AAGTTAT 
TABLE 9. SAMPLE DIFFUSION AND CONFUSION SCORES FOR HASH CODE 
FOR MESSAGE ‗JUMP OUT WINDOWS‘ 
ID 
Diffusion - 
matching base pair 
positions 
Confusion - consecutive match 
positions 
2 
3 
4 
5 
Mutant 4 
25 
9 
5 
3 
2 
Mutant 10 
11 
1 
0 
0 
0 
Mutant 50 
14 
3 
0 
0 
0 
Mutant 25 
21 
5 
1 
0 
0 
A. Intronic sequence padding and potential frameshift 
mutations can increase cryptographic hardness 
Padding short messages and short words has been 
previously discussed as a means to decrease collisions and 
reduce the likelihood of successfully forging messages.  
Adding padding to the front of messages as well as the end 
and padding short words makes it more difficult for an 
attacker to find the start of the coded message sequence. The 
analogy in molecular biology is the frameshift mutation, in 
which changing the starting position for a single nucleotide 
can result in a completely different protein sequence as 
shown in Fig. 10.  The mechanics of DNA transcription in 
cells relies on a number of properties to identify the 
nucleotide triplet sequence that actually transcribes to 
mRNA, which translates to a protein. Some of the 
mechanics are thermodynamic and biochemical in nature 
such as DNA folding, binding to transcription factors, and 
chromatin relaxation in eukaryotes. Some of the mechanics 
are sequence related. Four types of sequences and 
mechanisms from molecular biology are directly relevant to 
this discussion:  
1) Start 
codon: 
(usually 
ATG) 
to 
specify 
the 
transcription start site (three letter sequence that ultimately 
specifies the first amino acid in the protein to be translated.)  
2) Stop codon: (TAA, TGA, TAG) to end transcription. 
3) Promoters. The function of promoters is different in 
prokaryotes and eukaryotes, but as a general statement, the 
promoter is sequence of nucleotides necessary to locate the 
transcription starting point. In eukaryotic genes that contain 
a promoter, the sequence often contains the letters ‗TATA‘ 
hence the term ‗TATA box‘. 
4) Enhancers. In eukaryotes, a variety of sequences 
upstream and downstream from the transcription site 
provide binding sites for transcription factors (proteins)  
necessary to enhance protein expression. 
The transcription (decryption) of DNA uses these 
sequences as markers for process control. But the sequences 
can have multiple interpretations. ATG within a gene codes 
for the amino acid methionine; at the start of a gene it is a 
start codon. All instances of TATA do not signify a 
promoter. These ambiguities provide DNA with its own 
version of adding diffusion and confusion, and the analyst 
must fully understand the rules and mechanisms of 
transcription. In fact, research in gene expression starts with 
unambiguously identifying the actual gene sequence that 
codes for proteins (in eukaryotes this is called the exon 
region) from intervening sequences that are untranslated 
regions that do not code for proteins (intron regions) as 
shown in Fig. 11 for the human gene hspB9, which codes 
for heat shock protein B9 (Ensembl ENSG00000197723).  
Referring back to Fig. 10, transcription from a different start 
site would yield a different outcome, one that is possibly 
fatal to the organism. Padding creates introns spread 
throughout the message (exon). 
 
114
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

 
Figure 10. Frameshift Mutations 
 
Figure 11. Confusion factors in actual DNA genome 
The same confusion and diffusion factors would apply 
when crafting DNA coded messages for the electronic 
domain that will be later instantiated into actual genomes.  
The ciphertext must be capable of meeting the requirements 
of the cryptographic hardness in the electronic domain while 
producing a ciphertext that can be reliably integrated into a 
cellular genome via standard techniques, transcripted into 
RNA, and translated into the appropriate cipherprotein. 
Decryption (expression) of the cipherprotein gene occurs in 
response to specific decryption instructions hidden within 
the electronic domain ciphertext . 
VII. RELATIONSHIP BETWEEN CRYPTOGRAPHY AND GENE 
EXPRESSION 
The following relationships can be observed between the 
cryptographic treatment of messages and control of gene 
expression. In the case of gene expression, the message is 
genomic (DNA or RNA sequence). 
 
Cryptography transforms messages between two 
states: plain and encrypted. 
 
Cryptography uses operations such as circular 
shifts, bit expansions, bit padding, arithmetic 
operations to create ciphertext. These operations 
have 
analogs 
in 
molecular 
biology, 
e.g., 
transposable elements 
 
Cells transform DNA sequences in genes between 
two states:  Expressed (decrypted) and Silent 
(encrypted) 
 
In prokaryotes a simple system involving operators 
and repressors can be described in terms of 
encryption and decryption, but prokaryotes have 
fewer mechanisms available for a rich set of 
cryptographic protocols. Fig. 12 provides an 
example from Escherichia coli using lacZ gene 
expression. 
In this prokaryotic example from E. coli, the lacZ gene 
expresses the -galactosidase enzyme when lactose is 
present and the simple sugar glucose is absent. -
galactosidase 
metabolizes 
lactose 
into 
glucose 
and 
galactose. It would be inefficient to express the enzyme 
above a trace level if glucose is present. Fig. 12 provides a 
cryptographic analogy to the states of the lacZ gene  under 
the various conditions of glucose and lactose present, 
lactose present, and lactose absent. The lacZ gene is 
encrypted when lactose is absent or both lactose and glucose 
are present. A repressor protein (rep) authenticates (binds) 
to the encryption site (lacZ operator) on the lacZ gene with 
lactose is absent. A catabolite activator protein (CAP) 
authenticates (binds) to the decryption site (CAP site) 
allowing RNA polymerase to decrypt (express) the lacZ 
gene when glucose is absent. All of these operations are 
shown as analogies to elements of cryptographic message 
traffic in operations shown in Fig. 12. It is possible to write 
the description of the gene expression sequence in Fig. 12 in 
terms of a series of messages between a sender and receiver.  
Fig. 13 shows the architecture of the DNA HMAC 
(without all the required control regions) described in detail 
in 
this 
paper 
and 
its 
comparison 
between 
gene 
transcriptional control structures for a typical mammalian 
gene, and a simple, yet important eukaryote, yeast  (S. 
Cerevisiae). The DNA HMAC structure preserves the intent 
of the design to mimic a genomic transcriptional control 
structure. 
A successful, in vivo instantiation of a DNA HMAC 
system will require specific stop codons, start codons, 
promoters and enhancers sequences. An in vivo DNA 
encryption system should be multi-dimensional, utilize 
primary, secondary and tertiary structural information and 
include up/downstream regulators such that a single 
sequence can be seamlessly implemented at the genomic 
level and have multiple levels of encryption at the message 
or data level, depending upon the context (only known 
between sender and receiver).  This approach also permits 
generation of mutant hash codes, which can be evaluated for 
fitness such that only the best hash code is selected for 
authentication purposes. 
A. Epigenetic relationships between cryptography and gene 
expression. 
Epigenetics 
involves 
heritable 
control 
of 
gene 
expression that does not involve modifications of the 
underlying DNA sequence [18]. Examples of epigenetic 
effects include: DNA methylation of cytosine residues, and 
control of gene expression via the higher order structures of 
DNA.  In eukaryotes, DNA is packed into a hierarchy of 
structures: nucleosomes → chromatin → chromosomes 
Chromatin states can also be utilized as a form of encryption 
115
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

and decryption by exposing or not exposing genes for 
transcription. Examples include: 
 
Heterochromatin form (encrypted) and Euchromatin  
form (decrypted) . 
 
Transcriptional 
memory 
via 
modification 
of 
chromatin states  [19]. 
 
Histone Code. A complex series of regulatory 
activities, which include histone lysine acetylation 
by histone acetyl transferase – transcriptionally 
active 
chromatin 
(decrypted); 
Histone 
lysine 
deacetylation 
by 
histone 
deacetylase 
– 
transcriptionally inactive (encrypted)  [20], [21]. 
Expansion of the cryptographic protocols to include 
epigenetic operations will increase the richness of the 
protocols and the options for producing combinations of 
cipherproteins. 
VIII. CONCLUSION 
A cryptographic hash code based upon a DNA alphabet 
and a secure MANET authentication protocol has been 
presented. These codes can be utilized at the network level 
or application level and can also be implemented directly 
into genomes of choice to provide a new level of ciphertext 
communication at the genomic and proteomic level. The 
DNA inspired cryptographic coding approach is an option in 
developing true MANET architectures and developing novel 
forms of biological authentication to augment those 
architectures. 
ACKNOWLEDGMENT 
Thanks to the NASA Space Network, NASA/GSFC 
Exploration and Space Communications Projects Division, 
and the NASA Space Communications and Navigation 
Program office for supporting this research. 
REFERENCES 
[1]   H. Shaw, S. Hussein, and H. Helgert, "Prototype Genomics-
Based Keyed-Hash Message Authentication Code Protocol," 
2nd International Conference on Evolving Internet, pp. 131-
136, September 2010, doi: 10.1109/INTERNET.2010.31   
[2] A.  Gehani, T. LaBean, and J. Reif, ―DNA-based 
Cryptography, Aspects of Molecular Computing‖, Springer-
Verlag Lecture Notes in Computer Science, vol. 2950, pp. 
167—188,  2004. 
[3]  N.G. Bourbakis, ―Image Data Compression-Encryption Using 
G-Scan Patterns‖,  Systems, Man, and Cybernetics,   IEEE 
International Conference  on Computational Cybernetics and 
Simulation, vol. 2, pp. 1117—1120, October 1997, doi: 
10.1109/ICSMC.1997.638099 
[4] A. Leier, C. Richter, W. Banzhaf, and H. Rauhe,  
―Cryptography with DNA binary strands‖, BioSystems, vol. 
57, issue 1, pp. 13-22, June 2000, doi:10.1016/S0303-
2647(00)00083-6 
[5] C.T. Clelland, V. Risca, and C. Bancroft, ―Hiding Messages 
in DNA microdots‖, Nature, vol. 399, pp. 533—534, June 
1999, doi:10.1038/21092  
[6] D. Heider and A. Barnekow, ―DNA-based watermarks using 
the DNA-Crypt algorithm‖, BMC Bioinformatics, vol. 8, pp. 
176, May 2007, doi:10.1186/1471-2105-8-176 
[7]  D. Heider and A. Barnekow, ―DNA watermarks: A proof .of 
concept‖, BMC Molecular Biology 2008, vol. 9, p, 40, 
doi:10.1186/1471-2199-9-40 
[8] H. Shaw and S. Hussein, ―A DNA-Inspired Encryption 
Methodology 
for 
Secure, 
Mobile 
Ad-Hoc 
Networks 
(MANET)‖, Proceedings of the First International Conference 
on Biomedical Electronics and Devices, BIOSIGNALS 2008, 
Funchal, Madeira, Portugal, vol. 2, pp. 472-477, January 28-
31, 2008 
[9] Functional and Comparative Genomics Fact Sheet, Human 
GenomeProject, 
September 
19, 
2008, 
 
Available: 
http://www.ornl.gov/sci/techresources/Human_Genome/faq/c
ompgen.shtml, accessed: May 31, 2011 
[10] B. Alberts, A. Johnson, J. Lewis, L. Raff, K. Roberts, and P. 
Walter, Molecular Biology of the Cell, 4th edition , New 
York, NY: Garland Science, 2002 
[11] W. Stallings, Cryptography and Network Security, 4th 
edition, Upper Saddle River, NJ:  Pearson Prentice-Hall , 
2006 
[12] C. M. Fraser, J. D. Gocayne, O. White, M.D Adams, R. A. 
Clayton, R. D. Fleischmann, et al., ―The Minimal Gene 
Complement of Mycoplasma genitalium‖, Science, vol. 270, 
No. 
5235, 
pp. 
397-403, 
Oct. 
20, 
1995, 
doi: 
10.1126/science.270.5235.397 
[13]  C. J. Mitchell, ―Truncation attacks on MACs‖, Electronics 
Letters - IET, vol. 39, part 20, pp 1439-1440, 2003, doi: 
10.1049/el:20030921   
[14]  S. F. Elena, P. Carrasco, J. A. Daròs, and R. Sanjuán, 
―Mechanisms of genetic robustness in RNA viruses‖, EMBO 
Report, vol. 7, pp. 168-173,  doi: 10.1038/sj.embor.7400636 
[15] M. W. Nachman and S. L. Crowell., ―Estimate of the mutation 
rate per nucleotide in humans.‖, Genetics, vol. 156, pp. 297-
304, September 2000, Genetics Society of America 
[16] C. R. Reeves and J. E. Rowe, Genetic Algorithms - Principles 
and Perspectives : A Guide to GA Theory, Dordrecht, 
Netherlands, Kluwer Academic Publishers, 2002 
[17] C. Shannon, ―Communication Theory of Secrecy Systems‖, 
Bell System Technical Journal,  p. 623, July 1948  
[18] M. Ptashne and A. Gann , Genes and Signals, Cold Spring 
Harbor, NY, Cold Spring Harbor Laboratory Press, 2001 
[19] S. Kundu and C. L. Peterson, ―Role of chromatin states in 
transcriptional memory―, Biochim Biophys Acta., vol. 1790, 
issue 
6, 
 
pp: 
445–455, 
June 
2009, 
doi:10.1016/ 
j.bbagen.2009.02.009 
[20] S. Thiagalingam, K.-H. Cheng, H. J. Lee, N. Mineva, A. 
Thiagalingam, and J. F. Ponte, ―Histone Deacetylases: Unique 
Players in Shaping the Epigenetic Histone Code‖, Annals of 
the New York Academy of Sciences, vol. 983: pp. 84–100, 
March 2003, doi: 10.1111/j.1749-6632.2003.tb05964.x 
[21] T. Jenuwein and C. D. Allis, ―Translating the Histone Code‖,  
Science, vol. 293, No. 5532, pp. 1074-1080, August 2001, 
doi: 10.1126/science.1063127 
 
 
 
116
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

 
Figure 12. Conceptual example of Confidentiality and Authentication in E. coli using lacZ expression 
 
 
 
Figure 13. Simplified comparison between gene transcription control regions and MAC protocol 
117
International Journal on Advances in Security, vol 4 no 1 & 2, year 2011, http://www.iariajournals.org/security/
2011, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

