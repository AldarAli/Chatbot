Application of the Composite Field in the Design of an Improved AES S-box Based on
Inversion
Zhao Wang, Xiao Zhang, Sitao Wang, Zhisong Hao and Zhiming Zheng
School of Mathematics and Systems Science & LMIB
Beijing University of Aeronautics and Astronautics
Beijing, China
Email: wangzhao@smss.buaa.edu.cn, xiao.zh@buaa.edu.cn, wang_sitao@smss.buaa.edu.cn,
haozhisong2004@sina.com, zzheng@pku.edu.cn.
Abstract—The hardware implementation of the Substitution-Box
(S-box) of the Advanced Encryption Standard (AES) always
employs composite ﬁeld GF ((2n)2) to obtain better efﬁciency.
In this paper, an improved class of S-boxes by direct inversion in
composite ﬁeld is presented, and the choice of the subﬁeld leading
to the most efﬁcient implementation is discussed. Eliminating the
ﬁeld isomorphic transformations, such a composite ﬁeld is easier
to ﬁx and the resulting hardware implementation is more efﬁcient
than that of AES S-box. Some common cryptographic character-
istics for the composite ﬁeld based S-boxes are examined, and it
turns out that direct inversion in composite ﬁeld does not weaken
the cryptographic characteristics. In addition, a demonstration
for the immunity against the potential algebraic attack on AES
with the replacement of our S-box is given, and it is proven
that the revised AES is even more secure than the original AES
against the algebraic attack. As a result of this work, it could
be predicted that the isomorphism implies equal immunity from
certain cryptanalysis. Our S-box is suitable for the area-limited
hardware production.
Keywords–AES; Composite ﬁeld; S-box; Hardware implemen-
tation.
I.
INTRODUCTION
The Substitution-Box (S-box) is a basic component of
symmetric key algorithms, and should always be carefully
chosen to create strong confusion and to resist certain kinds
of cryptanalysis. The multiplicative inversion mapping over
Galois Field are frequently employed due to their ideal cryp-
tographic characteristics [1]. Most of the recent S-boxes in
block ciphers, such as the Advanced Encryption Standard
(AES) [2], Camellia (NESSIE and CRYPTREC winner) [3],
CLEFIA (developed by SONY) [4] and SMS4 (used in the
Chinese National Standard for Wireless LAN WAPI) [5] are
created based on the inversion on GF(28). Currently, the GF-
inversion has become one of the most popular algebraic tools
in block ciphers, and its hardware implementation, especially
targeted for AES is still a worldwide challenge.
Among so many state-of-art designs to implement GF-
inversion, one general idea is to employ the composite
ﬁeld representation [6]. The ﬁelds GF(28), GF((24)2) and
GF(((22)2)2) are linear isomorphic to each other, so that the
isomorphisms can be achieved by simple matrix multiplica-
tions, which means that ﬁnding the inverse in GF(28) can be
changed into calculating the low-cost addition, multiplication,
square and inversion in GF(24) [7] or GF((22)2) [8].
Mentens et al. [9] used GF(((22)2)2), examined all possi-
ble choices for irreducible polynomials generating the exten-
sion ﬁeld and all the transformation matrices mapping to the
inv   The inversion on GF(28)
inv'  The inversion on GF((24)2) or GF(((22)2)2)  
A,v  The affine transformAtion of AES
T     The field conversion from GF(28) to GF((24)2) or GF(((22)2)2)
T -1   The inverse transformation of T
Hardware Implementation of AES S-Box
Our S-Box
T
inv'
T -1
A,v
inv'
A,v
AES S-Box
inv
A,v
Figure 1. Structures of the different S-boxes in this paper.
corresponding GF(((22)2)2) representation, and pointed out
the area of [8] was still 5% from the minimum. Later, Canright
[10] considered not only polynomial bases but also normal
bases, with 432 cases including all in [9], and get the most
compact S-box up to date. However, the critical path delay,
substructure sharing and use of NOR and NOT gates were all
ignored, and then Zhang and Parhi [11] improved it and got a
seemingly better result. Nikova and Rijmen [12] decomposed
GF(28) to GF((24)2) using normal bases and the result could
compete with that in [10]. For the other recent architectures,
Nogamni et al. [13] suggest mixing normal and polynomial
bases for the reduction of the critical path delay of S-box.
In this paper, we try to do the inversion directly in
composite ﬁeld; see Figure 1. Then, the effect caused by
transformation matrixes can be ignored, and the choice of
irreducible polynomial for ﬁeld extension would be easier.
The outline of this paper is as follows. In Section II, the
applications of composite ﬁeld in S-box implementation is
introduced. In Section III, our new S-box based on inversion
in composite ﬁeld is described. The complete cryptographical
analysis of this new S-box and some potential algebraic attacks
are given in Section IV and Section V, followed by the
conclusion.
II.
PRELIMINARIES
In this section, we show the applications of the composite
ﬁeld for the hardware implementation of AES S-box.
23
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

The AES S-box involves an inversion mapping in GF(28)
followed by a GF(2)-afﬁne transformation, here GF(28) =
GF(2)/(O(z)), O(z) = z8 +z4 +z3 +z +1. Denote the AES
S-box by S1(x),
S1(x) = A · x−1 + v = A · inv(x) + v,
(1)
where inv(x) denotes GF(28) inversion of x. Denote the
binary representation of any x ∈ GF(28) by (x7, x6, · · · , x0)
with x7 the most signiﬁcant bit. And
A =










1
1
1
1
1
0
0
0
0
1
1
1
1
1
0
0
0
0
1
1
1
1
1
0
0
0
0
1
1
1
1
1
1
0
0
0
1
1
1
1
1
1
0
0
0
1
1
1
1
1
1
0
0
0
1
1
1
1
1
1
0
0
0
1










, v =










0
1
1
0
0
0
1
1










.
(2)
The
basic
idea
of
employing
composite
ﬁeld
comes
from the ﬁeld isomorphism GF(2n) ∼= GF((2n/2)2) ∼=
GF(((2n/4)2)2).
However,
all
the
basic
arithmetics
in
GF((2n/2)2) are actually the ones in GF(2n/2). Each ele-
ment ∆ ∈ GF((2m)2) = GF(2m)/(x2 + αx + β) where
α, β ∈ GF(2m), can be expressed as ∆ = δ1x + δ0, with
δ1, δ0 ∈ GF(2m). The multiplicative inversion of ∆ can be
obtained via
∆−1 = (δ1Γ)x+(δ0+δ1α)Γ, Γ = (δ2
1β+δ1δ0α+δ2
0)−1. (3)
GF(28) can be mapped to either GF((24)2) or GF(((22)2)2).
The speciﬁc operation comprises of the following 3 steps:
(I)
Field linear isomorphic transformation T maps each
GF(28) element into the composite ﬁeld GF((24)2)
(or GF(((22)2)2)).
(II)
Inversion in composite ﬁeld.
(III)
Linear transformation T −1.
The operations using GF((24)2) representation can be ex-
pressed as
S1(x) = A · T−1
1
· inv′(T1 · x) + v,
(4)
where inv′(x) denotes GF((24)2) inversion of x. In [8], there
is another architecture by mapping GF(28) to GF(((22)2)2),
and the operations can be expressed as
S1(x) = A · T−1
2
· inv′′(T2 · x) + v,
(5)
where inv′′(x) denotes GF(((22)2)2) inversion of x.
III.
IMPROVED S-BOXES BY INVERSION IN COMPOSITE
FIELD
A. The Speciﬁcation of the Improved S-boxes
According to the designers of AES [2], the choice of
GF(28) inversion only comprises cryptographical reasons but
barely covers implementation efﬁciency. It provides very ideal
input-output correlation amplitude and difference propagation
probability, and the following GF(2)-afﬁne transformation
(A, v) complicates the algebraic expression of S1(x). How-
ever, one may ﬁnd it difﬁcult to build the optimum hardware
architecture for S1(x) on composite ﬁeld. We believe that three
reasons might lead to such a situation:
(I)
Computational Complexity. As revealed by the Ex-
tended Euclid’s Algorithm [14], GF-inversion is es-
sentiality more complex than any other basic GF
arithmetic such as multiplication.
(II)
Overfull Factors. Introducing the composite ﬁeld
does reduce the area cost, however, additional factors
arise, such as the coefﬁcients of the irreducible poly-
nomial generating the composite ﬁeld. The following
factors must be considered:
a)
Subﬁeld multiplication of two multiplicands;
b)
Subﬁeld squaring;
c)
Subﬁeld constant multiplication;
d)
Matrixes of T and A · T−1.
(III)
How to Deﬁne the “optimum”? The criteria to build
the optimum architecture of the previous contribu-
tions [7]–[13] are unambiguous, which can not be
achieved simultaneously. For example, the throughput
usually contradicts the area since compact construc-
tion always causes more critical path delays, and
certain criterion is hard to be judged or quantiﬁed. As
shown by Mentens et al. [9], further area reduction
can be achieved by substructure sharing or introduc-
ing NOR gates or NOT gates, so the matrix for T
with the least number of “1” might not be the best
choice.
Recognizing the comparability among (1), (4) and (5), we
could try to overlook the ﬁeld isomorphism Ti and T −1
i
and
directly carry out the multiplicative inversion in the isomorphic
composite ﬁeld. So, two new S-boxes are obtained in (6) and
(7), and only the irreducible polynomials are to be ﬁxed.
S2(x) = A · inv′(x) + v, x ∈ GF((24)2)







GF((24)2)
=
GF(24)/(M(x))
M(x)
=
x2 + m0x + m
GF(24)
=
GF(2)/(N(y))
N(y)
=
y4 + n2y3 + n1y2 + n0y + n
(6)
S3(x) = A · inv′′(x) + v, x ∈ GF(((22)2)2)

















GF(((22)2)2)
=
GF((22)2)/(P(x))
P(x)
=
x2 + p0x + p
GF((22)2)
=
GF(22)/(Q(y))
Q(y)
=
y2 + q0y + q
GF(22)
=
GF(2)/(R(z))
R(z)
=
z2 + r0z + r
(7)
First of all, ﬁx R(z) = z2 + z + 1 since it is the only
irreducible polynomial over GF(2) with degree 2. Then, set
m0 = 1 ∈ GF(24) in (8) and p0 = 1 ∈ GF((22)2), q0 = 1 ∈
GF(22) in (9) since they would reduce more multiplications
than m and p, q, similar to the AES settings in Section II.
For S2(x), there are only three choices for N(y), and for
M(x), only m is to be decided. When N(y) is ﬁxed, there are
only limited candidate values for m to make M(x) irreducible.
The best value for m can be found through comparing the gate
counts of multiplying m. For S3(x), since R(z), p0 and q0 are
ﬁxed, we ﬁnd there are only eight choices of (p,q) to make
P(x) and Q(y) irreducible, so the best (p,q) can also be ﬁxed
through simple comparison. Consequently, all the settings can
24
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

TABLE I. NUMBER OF XOR GATE FOR T AND A · T −1
1
Design
Field
Original
After Optimizations
[7]
GF ((24)2)
43
Not available
[8]
GF (((22)2)2)
45
Obtained by greedy algorithm
[9]
GF (((22)2)2)
38
No optimization
[11]
GF (((22)2)2)
36
28 (Gate) + 6 (Critical Path)
[11]
GF (((22)2)2)
38
27 (Gate) + 6 (Critical Path)
S2
GF ((24)2)
32
18 (Gate) + 4 (Critical Path)
S3
GF (((22)2)2)
32
18 (Gate) + 4 (Critical Path)
be ﬁxed:
S2(x) = A · inv′(x) + v, x ∈ GF((24)2)







GF((24)2)
=
GF(24)/(M(x))
M(x)
=
x2 + x + {1001}2
GF(24)
=
GF(2)/(N(y))
N(y)
=
y4 + y + 1
(8)
S3(x) = A · inv′′(x) + v, x ∈ GF(((22)2)2)

















GF(((22)2)2)
=
GF((22)2)/(P(x))
P(x)
=
x2 + x + {1100}2
GF((22)2)
=
GF(22)/(Q(y))
Q(y)
=
y2 + y + {10}2
GF(22)
=
GF(2)/(R(z))
R(z)
=
z2 + z + 1
(9)
B. Performance of Hardware Implementation
Deﬁned in composite ﬁled, the inversion function in both
S2 and S3 could be implemented directly by (3) without ﬁeld
isomorphism.
Observing the differences between (4) and (8), or (5) and
(9), our improvement on efﬁciency is manifest. Most of the
previous architectures for S1 based on composite ﬁeld need to
do at least two matrix multiplications, T and A · T−1
1 , while
our S-boxes only need to multiply the matrix A. The number
of XOR gate for the two matrix multiplications of the previous
architectures are listed in Table I. Note that [10] [12] [13] used
different bases, while [11] provided us two optimal settings.)
The total number of XOR gate within the multiplication
of A is only 32. Our S-box, S2 or S3 has only one regular-
structured matrix A, while the hardware implementation of S1
has to deal with two irregular structured matrixes, T and A ·
T−1
1 . Further optimization would reach less gate counts and
critical path. If y = A · x where A is deﬁned in (2), then

























y7 = x5 + X2 + X1
y6 = x6 + X6
y5 = x1 + X6
y4 = X4 + X3
y3 = x7 + x3 + X5
y2 = X5 + X2
y1 = X7 + X3
y0 = x4 + x0 + X7
with





















X7 = x5 + X2
X6 = x5 + X4
X5 = X3 + x2
X4 = X1 + x2
X3 = x1 + x0
X2 = x7 + x6
X1 = x4 + x3
.
(10)
Apparently, there are totally 18 XORs in (10), and 4 XORs in
the critical path. From Table I, we can see that our S-boxes
have a great advantage over the known results.
The reduction in our S-box also optimises the counter-
measure against side-channel attack [15], such as differential
TABLE II. TEST RESULTS ON ANF OF Si
Terms
f7
f6
f5
f4
f3
f2
f1
f0
Sum
S1
110
112
114
131
136
145
133
132
1013
S2
130
119
131
117
126
132
132
129
1016
S3
119
114
132
126
126
126
128
134
1005
power analysis [16], which uses statistical analysis of physical
quantities to deduce certain information about the secret key.
S1 can be effectively masked under composite ﬁeld, so do S2
and S3. The only difference is that we only need to mask
A for S2 and S3, which is clearly more effective. Also for
S3, the inversion on GF(((22)2)2) can be split into that on
GF((22)2), and can be split into GF(22), where x−1 = x2,
and inversion becomes linear. Hence, S3 might be easier to be
masked.
Our S-boxes are suitable for the encryption(decryption)
within the area-limited hardware productions, such as ﬂash
memory cards, smart cards and mobile phones. Furthermore,
the idea to employ the composite ﬁled to construct the S-box
is highly recommended in the design of the lightweight block
cipher [17].
IV.
CRYPTOGRAPHIC CHARACTERISTICS OF S2 AND S3
In this Section, a security evaluation of S2 and S3
will be given by comparing some common cryptograph-
ic
characteristics
with
those
of
S1.
Denote
S(x)
=
(fm−1(xn−1, · · · , x0), ..., f0(xn−1, · · · , x0)) : GF(2n) 7→
GF(2m) as the S-box transformation, with fi(x), m − 1 ≥
i ≥ 0 the n-tuple Boolean function of the ith output bit.
A. Non-Linearity, Differential Distribution, Algebraic Degree,
and Algebraic Complexity
By simple calculations, the Non-Linearity (NL) [18], the
differential distributions [18], and the algebraic degree [18] of
both S2 and S3 stay the same as S1, and they show almost the
same number of terms in their algebraic normal form (ANF)
[18]; see Table II. In terms of algebraic complexity, since
the structure of both S2 and S3 are entirely the same as S1,
restricting the polynomial in each own ﬁeld makes more sense.
It has been proven that every S-box with the form A · x−1 + v
has only 9 terms in its polynomial expression, so does the
GF((24)2) polynomial of S2 and GF(((22)2)2) polynomial
of S3, which equally show the ability against the interpolation
attack [19].
B. Algebraic Immunity
Algebraic Immunity comes from the algebraic attack [20].
For an n×n S-box, it is deﬁned as Γ = ((t−r)/n)⌈t/r⌉, where
r denotes the total number of linear independent equations, and
t denotes the number of monomials appearing in the equations,
including the constant terms.
For S1 in (1), where b = inv(a), a, b ∈ GF(28), one can
ﬁnd r = 24 bi-afﬁne equations between ai and bj. The ﬁrst
set of eight equations comes from simplifying the following
polynomial in the bases {1, z, z2, · · · , z7}:

7
X
i=0
aizi
·

7
X
i=0
bizi
mod O(z) = 1.
(11)
The second set of eight equations is derived from simplifying
any one equation from the group of the following GF(28)
equations:
a = a2 · b, a2 = a4 · b2, · · · , a128 = a · b128.
(12)
25
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

Since these eight GF(28)-equations in (12) are linearly equiv-
alent with each other, every two different GF(28)-equations
from (12) will generate two different but linearly depen-
dent sets of 8 GF(2)-equations between {ai} and {bj}.
The remaining 8 equations comes from the symmetry with
respect to the exchange of a and b [20]. Adding the afﬁne
relationship c = A · b + v, all the {bj} can be replaced by
{ck}, and then totally 24 bi-afﬁne equations between {ai}
and {ck} are obtained. The monomials of the system are:
{1, a0, a1, · · · , a7, c0, c1, · · · , c7, a0c0, a0c1, · · · , a7c7}, there-
fore t = 1 + 8 + 8 + 8 × 8 = 81.
For S2, b = inv′(a), we have
h
7
X
i=4
aiyi−4
x +
3
X
i=0
aiyii
·
h
7
X
i=4
biyi−4
x
+
3
X
i=0
biyii
≡ 1 mod M(x) mod N(y)
(13)
Unlike
(11),
the
bases
for
(13)
are
{1, y, y2, y3, x, yx, y2x, y3x}, still n
=
8 equations are
get. In the same way, one can get another eight equations
from any one of the group (12) deﬁned in GF((24)2), and
eight more by exchanging a and b. Our simulation proved
that these r = 24 equations are linearly independent, and if
adding eight more from expanding any one equation from
the GF((24)2) group (12) (or exchanging a and b), does not
change the rank of the system. Our simulation shows that
for S2, r = 24. Similarly, t stays unchanged. Therefore, the
Algebraic Immunity of S2 is the same as S1. For S3, the
result is also the same.
C. Inﬂuence on AES
Considering the coherence for the calculational ﬁeld for
the sake of the analysis of the algebraic attack, we suggest
all the computation in AES being deﬁned in the same ﬁeld
according to the chosen S-box, which means that the matrix
multiplication for the MixColumn operation will be done in
GF((24)2) if S2 is used or in GF(((22)2)2) if S3 is used.
Denote the AES with S1 replaced by S2 and GF((24)2) matrix
multiplication for MixColumn by AEScf, and similarly with
S3 and GF(((22)2)2) matrix multiplication by AEStf.
By then, we can conclude that both AEScf and AEStf are
immune against linear attack, differential attack and interpola-
tion attack. While for the other attacks not related to S-boxes,
such as the square attack [21], the collisions attack [22] and
related-key attack [23], both AEScf and AEStf have the same
immunity as AES.
V.
ALGEBRAIC ATTACK ON AEScf AND AEStf
Our improvement on S2 or S3 is simply the change of ﬁeld.
In order to deeper demonstrate the advantage of the composite
ﬁeld, a concrete algebraic attack on AEScf and AEStf will
be given. There are two ways to develop the algebraic attack,
one is put forward by N. T. Courtois and J. Pieprzyk in Asia
Crypt 2002 based on a GF(2)-system [20], and the other is
found by S. Murphy and M. J. Robshaw in CRYPTO 2002
with only simple algebraic operations in GF(28) [24]. The
GF(28)-system created in [24] is less complicated than the
GF(2)-system derived in [20], which indicates that any change
in the ﬁeld evolved during the encryption should be considered
in algebraic attack, that is why three case are discussed below.
A. The GF(2)-Algebraic Attack
Firstly, put AEScf in the GF(2)-system. From Section
IV-B, the GF(2)-system of S2 is very similar to that of S1, for
they have the same algebraic lmmunity. For AddRoundkey and
ShiftRows, their GF(2)-system is apparently equal in scale. It
is easily seen that in GF(28) or GF((24)2), constant multipli-
cation can be represented by a 8-order GF(2)-matrix-vector
multiplication. The operation in MixColumn is equivalent to
a 32-order GF(2)-matrix-vector multiplication. In [20], it was
proved that the GF(2)-system of AES is too complicated to
be solved, therefore, AEScf is safe from the GF(2) algebraic
attack.
B. The GF((24)2)-Algebraic Attack
In [24], AES is embedded within the Big Encryption Sys-
tem (BES) which uses algebraic operations in GF(28) and can
be described by a system of multivariate quadratic equations in
GF(28) simpler than the GF(2)-system in [20]. Analogously,
we could embed AEScf within a BES-like cipher, and get a
GF((24)2)-system of multivariate quadratic equations. Even
though this is better than the GF(2)-system of AEScf, the
solvability remains the same as that of the GF(28) system of
BES because these two systems are equal in scale.
C. The GF(24)-Algebraic Attack
To be more accurate, the arithmetic within AEScf is in
GF(24) rather than GF((24)2). So, we may try to split the
round function of AEScf in GF(24). (Most of the notations
from [24] will be used below with the same indication.)
First of all, embed AEScf within another BES-like ci-
pher called BEScf. Deﬁne a mapping φ from GF(24) to
(GF(24))4, φ(a)
=
(a20, a21, a22, a23), and regard a
∈
(GF((24)2))16 ( the state variable of AEScf ) as a column
vector, where
a = (a00, · · · , a30, a01, · · · , a31, · · · , a33)T .
(14)
Each aij ∈ GF((24)2) can be split as aij = aij1x + aij0, so
that the state space of AEScf is actually (GF(24))32. The
function φ can be extended to the state space of AEScf:
φ(a) = (φ(a001), φ(a000), · · · , φ(a331), φ(a330)), and the s-
tate space of BEScf is (GF(24))128. Using φ(aijm)
=
(bijm0, · · · , bijm3), i, j = 0, · · · , 3, m = 1, 0, every BEScf
state vector b can be denoted as
b = (b0010, · · · , b0013, b0000, · · · , b0003,
· · · , b3310, · · · , b3313, b3300, · · · , b3303)T .
(15)
Our aim is to give every operation of AEScf a GF(24)
expression, and extend it to BEScf using the way of [24].
As noted in [24], the additive constant 0X63 in S1 (noted
by v in (1)) can be removed by incorporating it within a
modiﬁed key schedule, and so does S2 for AEScf. Our
reductions are as follows.
1) Subkey addition: This is the same as BES, just a bit-
wise XOR operation on GF(24)128.
2) S-box
inversion:
Since
the
inversion
of
S2
is
deﬁned
on
GF((24)2),
it
will
act
on
each
pair
of
(aij1, aij0), i, j = 0, · · · , 3. From (3), the GF(24) expression
is get
inv′(aij1, aij0) = (aij1 · t−1, (aij1 + aij0) · t−1),
t = a2
ij1 · λ + aij1 · aij0 + a2
ij0.
26
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

For every eight consecutive elements (bij10, · · · , bij03) from
b, the S-box inversion of BEScf can be expressed as:



tm = bij1(m+1) · λ2m + bij1m · bij0m + bij0(m+1),
bij1m 7→ t−1
m · bij1m,
bij0m 7→ t−1
m · (bij1m + bij0m).
Here, m = 0, · · · , 3, and m + 1 is interpreted modulo 4.
3) S-box linear operation: Use Lagrange interpolation in
GF((24)2), one can get
l(a) =′ 06′a +′ 4B′a2 +′ F6′a4 +′ 89′a8
+′ 46′a16 +′ C0′a32 +′ 8F ′a64 +′ 24′a128,
(16)
where l(a) denotes the GF(2) matrix multiplication of S2.
Furthermore, set a = a1x + a0 and by only simple calcula-
tions on GF(24), (16) can be converted from GF((24)2) to
GF(24):
l(a1x+a0) =
h
3
X
i=0
(lia2i
1 +li+4a2i
0 )
i
x+
3
X
i=0
(li+4a2i
1 +lia2i
0 ),
where (l0, · · · , l7) = (′0′,′ B′,′ 9′,′ D′,′ 4′,′ 8′,′ 7′,′ A′). Also
the following vector form is used,
a1
7→
(l0, · · · , l7) · ˜a,
a0
7→
(l4, · · · , l7, l0, · · · , l3) · ˜a,
˜a
=
(a1, a2
1, a4
1, a8
1, a0, a2
0, a4
0, a8
0)T .
The extension to BEScf requires a 128 × 128 GF(24) matrix
LinB, a block diagonal matrix with 16 identical blocks, that
is, LinB = Diag16(LB), where LB =

LB1
LB2
LB2
LB1

and
LB1 =




l20
0
l20
1
l20
2
l20
3
l21
1
l21
2
l21
3
l21
0
l22
2
l22
3
l22
0
l22
1
l23
3
l23
0
l23
1
l23
2



 , LB2 =




l20
4
l20
5
l20
6
l20
7
l21
5
l21
6
l21
7
l21
4
l22
6
l22
7
l22
4
l22
5
l23
7
l23
4
l23
5
l23
6



 .
4) ShiftRows:
This can be represented as a 128 ×
128 GF(24) matrix RB when we only need to ensure every two
vector conjugates (8 elements) are moved as a single entity.
5) MixColumn:
We have assumed this operation on
GF((24)2). For AEScf it can be represented as a 8×8 GF(24)
matrix CA, that is










a0i1
a0i0
a1i0
a1i1
a2i0
a2i1
a3i0
a3i1










7→










y
0 y + 1 0
1
0
1
0
0
y
0 y + 1 0
1
0
1
1
0
y
0 y + 1 0
1
0
0
1
0
y
0 y + 1 0
1
1
0
1
0
y
0 y + 1 0
0
1
0
1
0
y
0 y + 1
y + 1 0
1
0
1
0
y
0
0 y + 1 0
1
0
1
0
y










·










a0i1
a0i0
a1i0
a1i1
a2i0
a2i1
a3i0
a3i1










.
Here, y is a root of N(y) that deﬁnes GF(24) in (8).
To
maintain
the
conjugacy
for
extension
to
BEScf,
four
matrixes
are
needed:
p
=
0, · · · , 3, C(p)
B
=












y2p
0 (y + 1)2p
0
1
0
1
0
0
y2p
0 (y + 1)2p
0
1
0
1
1
0
y2p
0 (y + 1)2p
0
1
0
0
1
0
y2p
0 (y + 1)2p
0
1
1
0
1
0
y2p
0 (y + 1)2p
0
0
1
0
1
0
y2p
0 (y + 1)2p
(y + 1)2p
0
1
0
1
0
y2p
0
0 (y + 1)2p
0
1
0
1
0
y2p












.
and C(0)
B
= CA and if (b0, · · · , b7)T = CA · (a0, · · · , a7)T ,
then (b2p
0 , · · · , b2p
7 )T = C(p)
B
· (a2p
0 , · · · , a2p
7 )T . The whole
operation can be represented as a 128 × 128 GF(24) matrix
MixB and by a simple basis re-ordering MixB is a block
diagonal of sixteen 8 × 8 matrices.
6) Key Schedule: The key length for AEScf is sixteen
bytes, while for BEScf it is sixty-four bytes. The 64-byte
BEScf key will generate eleven subkeys with the same length.
Additionally, the embedded image of the AEScf key kA is
the BEScf key kB = φ(kA), then for every round subkey
(kB)i = φ((kA)i), the same as BES.
7) A multivariate quadratic GF(24)-system for BEScf:
As usual, the S-box linear operation, ShiftRows and MixCol-
umn can be combined into one Matrix denoted by MB =
MixB · RB · LinB. Denote p, c ∈ (GF(24))128 as the plain-
text and ciphertext, ki ∈ (GF(24))128, i = 0, · · · , 10 as
the eleven BEScf subkeys, and the state vectors before and
after the ith invocation of the GF((24)2) inversion layer by
wi ∈ (GF(24))128 and xi ∈ (GF(24))128, i = 0, · · · , 9
respectively, with ti ∈ (GF(24))64 a temporary variable during
the GF((24)2) inversion. For each vector above except ti, four
subscripts are given, (j, m, p, q), j, m, q = 0, · · · , 3, p = 0, 1,
where j, m indicate the (4∗j+m)th component corresponding
ajm ∈ GF((24)2) in (14), p indicates one of the two GF(24)
segments of ajm and q represents the coordinate of conjugate.
For ti, the subscript p is discarded since ti is used only for
GF((24)2) inversion where both the GF(24) segments of ajm
mingle. The BEScf encryption can then be described by the
following GF(24) systems:
0 = w0,(j,m,p,q) + p(j,m,p,q) + k0,(j,m,p,q),
(17)
for i = 0, · · · , 9,
0 = ti,(j,m,q) + wi,(j,m,1,q+1) · λ2q
+ wi,(j,m,1,q) · wi,(j,m,0,q) + wi,(j,m,0,q+1),
(18)
0 = ti,(j,m,q) · xi,(j,m,1,q) + wi,(j,m,1,q),
(19)
0 = ti,(j,m,q) · xi,(j,m,0,q) + wi,(j,m,1,q)
+ wi,(j,m,0,q),
(20)
0 = w2
i,(j,m,p,q) + wi,(j,m,p,q+1),
(21)
0 = x2
i,(j,m,p,q) + xi,(j,m,p,q+1),
(22)
0 = t2
i,(j,m,q) + ti,(j,m,q+1),
(23)
for i = 1, · · · , 9,
0 = wi,(j,m,p,q) + ki,(j,m,p,q)+
X
(j′,m′,p′,q′)
α(j′,m′,p′,q′) · xi−1,(j′,m′,p′,q′),
(24)
0 = c(j,m,p,q) + k10,(j,m,p,q)+
X
(j′,m′,p′,q′)
β(j′,m′,p′,q′) · x9,(j′,m′,p′,q′).
(25)
27
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

TABLE III. ITEMS FOR THE GF(24) SYSTEM OF BEScf
Eq.
Num.
Property
Increased Variables
Increased Quadratic Terms
(17)
128
linear
256
0
(18)
640
quadratic
1792
640
(19)
640
quadratic
640
640
(20)
640
quadratic
640
640
(21)
1280
quadratic
0
1280
(22)
1280
quadratic
0
1280
(23)
640
quadratic
0
640
(24)
1152
linear
1152
0
(25)
128
linear
128
0
TABLE IV. ITEMS FOR THE SYSTEM OF BES AND BEScf
Items
BES [24]
BEScf
Equations in total
5248
6528
Linear Equations
1408
1408
Quadratic Equations
3840
5120
Terms in total
7808
9728
Quadratic Terms
3840
5120
State Variables
2560
3200
Key Variables
1408
1408
Note that the equations in (21), (22) and (23) indicate conju-
gacy. In (24) and (25), α(j′,m′,p′,q′) and β(j′,m′,p′,q′) denote
the elements in MB and M∗
B = RB·LinB respectively, and q+1
is interpreted modulo 4. The numbers of items of the GF(24)
systems are listed in Table III.
The system contains 6528 equations, of which 1408 are
linear and 5120 are (extremely sparse) quadratic equations. The
system comprises 9728 terms made from 3200 state variables
and 1408 key variables, of which 4608 are linear terms (state
variables and key variables), 3200 are square terms and 1920
are quadratic terms. The details are listed in Table IV.
The effectiveness for the algebraic attack lies in the solv-
ability of the system. Courtois and Pieprzyk [20] present a
method called XSL to solve the GF(2)-system for AES, and it
is also available for the GF(28)-system for BES. However, up
till now, there exists no authentic estimation for XSL attack,
so it is of no worth to give a complete comparison of the
GF(28) attack for BES and the GF(24) attack for BEScf.
However, we ﬁnd three evidences leading to the insolvability
of the GF(24)-system for BEScf:
(I)
The GF(24)-system has more terms and more equa-
tions. The complexity of the XSL algorithm is on
average O(T ω) [20]; here T denotes the number of
terms.
(II)
The GF(24)-system for BEScf has more quadratic
equations than the GF(28)-system for BES. The
quadratic terms of BEScf occupy 5120/9728 =
52.6% in total, more than 3840/7808 = 49.2% for
BES. According to the analysis in [20] , the GF(24)-
system for BEScf would be more complex to carry
out XSL attack than the GF(28)-system for BES.
In fact, most of the extra terms of BEScf are the
new variables ti used for the special treatment with
composite ﬁeld inversion.
(III)
In [25], there is another deﬁnition of Algebraic
Immunity for the XSL S-box. For each XSL S-box
of
BEScf,
the
related
equations
are
(18)-(23).
First, the size n = 8 is ﬁxed because each XSL
S-box works on eight state variables of BEScf.
The terms appearing in (18)-(23) are: ti,(j,m,q),
wi,(j,m,p,q),
xi,(j,m,p,q),
wi,(j,m,1,q) · wi,(j,m,0,q),
ti,(j,m,q)
·
xi,(j,m,1,q),
ti,(j,m,q)
·
xi,(j,m,0,q),
w2
i,(j,m,p,q),
x2
i,(j,m,p,q),
t2
i,(j,m,q).
Summing
up
according to the subscripts p and q, the number of
terms is t = 4+8+8+4+4+4+8+8+4 = 52 and
the number of equations r = 4+4+4+8+8+4 = 32,
then the Algebraic Immunity for XSL S-box of
BEScf is Γ = ( t−r
n )⌈ t−r
n ⌉ = 2.53 = 15.625 which
is larger than 9.6 of BES. The S-box based on
composite ﬁeld seems more immune from the
potential algebraic attack.
Furthermore, adding the key schedule, the system may not be
any simpler since it has the same number of S-box substitutions
as BES. By then, we can conclude that AEScf is immune
from the GF(24)-system, and the potential algebraic attack
for AEScf may not work.
Similarly, one can consider AEStf in a GF((22)2) system
and get a GF((22)2)-system for AEStf, with the same scale
of system of equations as the GF(24)-system for AEScf. And
even more, one can think of splitting the GF((22)2) system
into the ﬁeld GF(22), where the basic GF((22)2) operations,
especially the inversion, have to be replaced by the basic
operations on GF(22). However, based on what we have done
before, splitting GF((24)2) inversion into basic operations on
GF(24), which complicates the system, one can see that the
expected GF(22)-system for AEScf may not be any simpler.
VI.
CONCLUSION
In this paper, we tried to change the computational ﬁeld
used in AES S-box, and created a new class of S-box with
better efﬁciency while preserving the cryptographical security.
Two 8 × 8 S-boxes S2 and S3 are constructed, by direct
inversion in composite ﬁelds GF((24)2) and GF(((22)2)2)
respectively, combined with a GF(2) afﬁne transformation,
the same used in AES S-box to give a rational comparison
of the composite ﬁeld. The choice of the subﬁeld leading
to the most efﬁcient implementation is mainly discussed. By
simple comparison, our new S-boxes have better hardware
implementation than AES S-box. The masking strategy against
differential power attack is also more convenient.
We also studied the cryptographic characteristics with such
a S-box based on composite ﬁeld inversion. The results show
that both S2 and S3 have comparatively the same cryptographic
characteristics with AES S-box. Thus, the replacement to
composite ﬁeld does not weaken the cryptographic characteris-
tics. Moreover, we investigated whether or not those effective
cryptanalysis of AES might work if our S-box took the place,
especially the algebraic attack. Due to the different ﬁelds
involved, algebraic attacks applied on GF(2), GF((24)2) and
GF(24) are discussed, respectively. And we proved that with
the replacement of S2 or S3 and the corresponding ﬁeld for
MixColumn operation, the revised AES, denoted by AEScf or
AEStf, had no effective algebraic attack and was even more
solid than the original AES with S1.
In fact, the essence of our design is just to try to overlook
the underlying computational fashion and to choose the most
efﬁcient one while preserving the cryptographic characteristics.
The most compact AES S-box to date was created by normal
bases [11]. The advantage for normal bases is that they have
very sparse matrixes in the implementation compared with
polynomial bases [11], but ﬁnding inversion will be as hard
as under polynomial bases. The S-box constructed on normal
bases would also survive those attacks.
28
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

TABLE V. COMPOSITE FIELD IN BLOCK CIPHER
Cipher
Field
Structure
AES
GF (28)
A · x−1 + v
SMS4
GF (28)
A · (A · x + v)−1 + v
CLEFIA
GF (28)
A2 · (A1 · x + v1)−1 + v2
Camellia
GF ((24)2)
A2 · (A1 · (x + v1))−1 + v2
Based on our argument, we suggest composite ﬁeld
GF((2n)2) in the design of block cipher. And we think that
our settings for S2 or S3 is indeed a balance between the im-
plementation complexity and the theoretical security. It seems
that the designers of block ciphers did not truly realize the
advantage of GF((2n)2), see Table V. Even though Camellia
uses composite ﬁeld, the structure is the most complex. As a
result, we suggest SMS4 and CLEFIA use composite ﬁeld for
a more efﬁcient hardware implementation.
ACKNOWLEDGMENT
This work is supported by Major Program of National
Natural Science Foundation of China (NO.11290141), the
International Cooperation Project (NO.2010DFR00700), and
the Fundamental Research of Civil Aircraft (NO.MJ-F-2012-
04). We are grateful to the Key Laboratory of Mathematics,
Informatics and Behavioral Semantics, Ministry of Education
for funding us to fulﬁl this work.
REFERENCES
[1]
K. Nyberg, “Differentially uniform mappings for cryptography,” in
Advances in Cryptology – EUROCRYPT 93, ser. Lecture Notes in
Computer Science.
Springer Berlin / Heidelberg, 1994, vol. 765, pp.
55–64.
[2]
J. Daemen and V. Rijmen, The design of Rijndael: AES–the Ad-
vanced Encryption Standard, ser. Information security and cryptography.
Springer, 2002.
[3]
K. Aoki, T. Ichikawa, M. Kanda, M. Matsui, S. Moriai, J. Nakajima,
and T. Tokita, “Camellia : A 128-bit block cipher suitable for multiple
platforms - design and analysis,” in Selected Areas in Cryptography,
ser. Lecture Notes in Computer Science.
Springer Berlin / Heidelberg,
2001, vol. 2012, pp. 39–56.
[4]
S. Corporation, “The 128-bit blockcipher CLEFIA – algorithm spec-
iﬁcation (revision 1.0),” 2007, URL: http://www.sony.net/Products/
cryptography/cleﬁa/download/data/cleﬁa-spec-1.0.pdf [retrieved: July,
2014].
[5]
W. Difﬁe and G. Ledin, “SMS4 encryption algorithm for wireless
networks,” Cryptology ePrint Archive, Report 2008/329, 2008, URL:
http://eprint.iacr.org/2008/329.pdf [retrieved: July, 2014].
[6]
B. Sunar, E. Savas, and C. Koc, “Constructing composite ﬁeld repre-
sentations for efﬁcient conversion,” IEEE Transactions on Computers,
vol. 52, no. 11, nov. 2003, pp. 1391 – 1398.
[7]
A. Rudra, P. K. Dubey, C. S. Jutla, V. Kumar, J. R. Rao, and P. Rohatgi,
“Efﬁcient Rijndael encryption implementation with composite ﬁeld
arithmetic,” in Cryptographic Hardware and Embedded Systems –
CHES 2001, ser. Lecture Notes in Computer Science.
Springer Berlin
/ Heidelberg, 2001, vol. 2162, pp. 171–184.
[8]
A. Satoh, S. Morioka, K. Takano, and S. Munetoh, “A compact
Rijndael hardware architecture with S-Box optimization,” in Advances
in Cryptology – ASIACRYPT 2001, ser. Lecture Notes in Computer
Science.
Springer Berlin / Heidelberg, 2001, vol. 2248, pp. 239–254.
[9]
N. Mentens, L. Batina, B. Preneel, and I. Verbauwhede, “A systematic
evaluation of compact hardware implementations for the Rijndael S-
Box,” in Topics in Cryptology - CT-RSA 2005, ser. Lecture Notes in
Computer Science.
Springer Berlin / Heidelberg, 2005, vol. 3376, pp.
323–333.
[10]
D. Canright, “A very compact S-Box for AES,” in Cryptographic
Hardware and Embedded Systems - CHES 2005, ser. Lecture Notes
in Computer Science.
Springer Berlin / Heidelberg, 2005, vol. 3659,
pp. 441–455.
[11]
X. Zhang and K. K. Parhi, “On the optimum constructions of composite
ﬁeld for the AES algorithm,” IEEE Transactions on Circuits and
Systems II: Express Briefs, vol. 53, no. 10, oct. 2006, pp. 1153–1157.
[12]
S. Nikova, V. Rijmen, and M. Schl¨affer, “Using normal bases for
compact hardware implementations of the AES S-Box,” in Security and
Cryptography for Networks, ser. Lecture Notes in Computer Science.
Springer Berlin / Heidelberg, 2008, vol. 5229, pp. 236–245.
[13]
Y. Nogami, K. Nekado, T. Toyota, N. Hongo, and Y. Morikawa, “Mixed
bases for efﬁcient inversion in F(((22)2)2) and conversion matrices of
subbytes of AES,” in Cryptographic Hardware and Embedded Systems,
CHES 2010, ser. Lecture Notes in Computer Science.
Springer Berlin
/ Heidelberg, 2010, vol. 6225, pp. 234–247.
[14]
B. Hannes, C. Andreas, and H. Max, “On computing multiplicative
inverses in GF(2m),” IEEE Transactions on Computers, vol. 42, no. 8,
aug 1993, pp. 1010 –1015.
[15]
E. Oswald, S. Mangard, N. Pramstaller, and V. Rijmen, “A side-channel
analysis resistant description of the AES S-Box,” in Fast Software
Encryption, ser. Lecture Notes in Computer Science.
Springer Berlin
/ Heidelberg, 2005, vol. 3557, pp. 199–228.
[16]
P. Kocher, J. Jaffe, and B. Jun, “Differential power analysis,” in
Advances in Cryptology – CRYPTO 99, ser. Lecture Notes in Computer
Science.
Springer Berlin / Heidelberg, 1999, vol. 1666, pp. 789–789.
[17]
O. ¨Ozen, K. Varıcı, C. Tezcan, and C¸ . Kocair, “Lightweight block
ciphers revisited: Cryptanalysis of reduced round present and hight,”
in Information Security and Privacy, ser. Lecture Notes in Computer
Science.
Springer Berlin / Heidelberg, 2009, vol. 5594, pp. 90–107.
[18]
C. Carlet, “Boolean functions for cryptography and error correcting
codes,” in Boolean Models and Methods in Mathematics, Computer
Science, and Engineering, Y. Crama and P. L. Hammer, Eds.
Cam-
bridge University Press, 2010, pp. 257–397, URL: http://www.math.
univ-paris13.fr/∼carlet/chap-fcts-Bool-corr.pdf [(a preliminary version)
retrieved: July, 2014].
[19]
T. Jakobsen and L. R. Knudsen, “The interpolation attack on block
ciphers,” in Fast Software Encryption, ser. Lecture Notes in Computer
Science.
Springer Berlin / Heidelberg, 1997, vol. 1267, pp. 28–40.
[20]
N. T. Courtois and J. Pieprzyk, “Cryptanalysis of block ciphers with
overdeﬁned systems of equations,” Cryptology ePrint Archive, Report
2002/044, 2002, URL: http://eprint.iacr.org/2002/044.pdf [retrieved: Ju-
ly, 2014].
[21]
N. Ferguson, J. Kelsey, S. Lucks, B. Schneier, M. Stay, D. Wagner,
and D. Whiting, “Improved cryptanalysis of Rijndael,” in Fast Software
Encryption, ser. Lecture Notes in Computer Science.
Springer Berlin
/ Heidelberg, 2001, vol. 1978, pp. 136–141.
[22]
H. Gilbert and M. Minier, “A collision attack on 7 rounds of Rijndael,”
in AES Candidate Conference’00, 2000, pp. 230–241.
[23]
A. Biryukov and D. Khovratovich, “Related-key cryptanalysis of the full
aes-192 and aes-256,” in Advances in Cryptology - ASIACRYPT 2009,
ser. Lecture Notes in Computer Science.
Springer Berlin Heidelberg,
2009, vol. 5912, pp. 1–18.
[24]
S. Murphy and M. J. Robshaw, “Essential algebraic structure within the
AES,” in Advances in Cryptology – CRYPTO 2002, ser. Lecture Notes
in Computer Science.
Springer Berlin / Heidelberg, 2002, vol. 2442,
pp. 1–16.
[25]
S. Oh, C. H. Kim, J. Lim, and D. H. Cheon, “Remarks on security of
the AES and the XSL technique,” Electronics Letters, vol. 39, no. 1,
Jan 2003, pp. 36–38.
29
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-373-5
INNOV 2014 : The Third International Conference on Communications, Computation, Networks and Technologies

