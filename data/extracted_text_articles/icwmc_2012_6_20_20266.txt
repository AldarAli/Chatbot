Compulsory Service Extensions to SIP-Initiated Communication Sessions
Philipp Marcus, Thomas Mair, and Florian Dorfmeister
Institut f¨ur Informatik
Ludwig-Maximilians-Universit¨at M¨unchen
Munich, Germany
Email: {philipp.marcus, thomas.mair, ﬂorian.dorfmeister}@iﬁ.lmu.de
Abstract—The Session Initiation Protocol is an application
layer protocol with increasing impact on signaling in mo-
bile networks and mobile applications. However, it lacks the
possibility to enforce the abidance of special communication
constraints after session parameters have been negotiated. In
this work, an approach of compulsory services is presented,
which allows peer user agents in communication sessions set up
by the Session Initiation Protocol to mutually prove each other
that transmitted data has been processed by a trusted third
party. This is realized by enforcing a set of compulsory services
implemented by trusted third parties. Technically, in the session
initiation phase the signaling messages are therefore modiﬁed
according to a rule base in special policy servers. During data
transmission, an involved user agent ﬁrst passes its message
to the compulsory service, receives a corresponding token as
acknowledgment and ﬁnally transmits this token along with the
message to the peer user agent. There, based on the validity
of the token, further actions can be taken. The usability is
demonstrated by three examples including location veriﬁcation
of mobile users.
Keywords-SIP-Services;
Trusted
Third
Party;
Public-Key-
Cryptography; Location Veriﬁcation; Call Recording.
I. INTRODUCTION
The Session Initiation Protocol (SIP) is an application
layer protocol developed by the IETF with focus on creating,
modifying and terminating communication sessions with one
or more participants [1]. It is designed according to design
principles similar to HTTP, and therefore is well suited for
IP-based networks. It also allows for extending the protocol
with new features that not necessarily must be supported by
all clients.
Although SIP is primarily used for Internet telephone calls
and video conferencing, due to its ﬂexibility it can also be
applied to other domains such as instant messaging. In the
context of next generation networks and the IP Multimedia
Subsystem (IMS) speciﬁed by the 3GGP in TS 23.228, SIP
is used as a session control layer to provide a standardized
interface to services between mobile users and signaling
infrastructure.
The architecture of a typical SIP conﬁguration consists of
several entities of which the most important in the context
of our work comprise user agents (UAs) and the signaling
infrastructure elements, i.e., registrars and proxies. One or
more user agents register themselves with a SIP username
at a registrar, which implements a location service mapping
usernames to network addresses. For session initiation, a UA
sends an INVITE message to the peer user agent. Those
messages are typically passed through one or more proxies,
which are responsible for routing SIP messages and thereby
are able to enforce a call policy.
After the session has been established between the in-
volved user agents, the data transmission phase will fol-
low. Here, none of the signaling infrastructure components
has further access to the information exchanged. Hence,
although desirable in many application scenarios like the
enforcement of mutually agreed on centralized call recording
or the mutual provision of reliable information about the
residence of UAs, the standard SIP provides no means for
enforcing certain properties or the processing of transmitted
data.
In order to facilitate the enforcement of speciﬁc pro-
cessing constraints during the data transmission phase, we
developed an approach that enables user agents to mutually
prove that a given piece of transmitted information has been
processed by a set of trusted third party services called
compulsory services in a predeﬁned manner. The set of
involved compulsory services is deduced from policy servers
and contained in the SIP-negotiation messages. The services
themselves are hosted by external providers.
The remainder of the paper is structured as follows:
Section II presents the state of the art in form of related
work. Section III then describes the principles of compulsory
services comprising the theoretical concepts, the structure
of compulsory service assignments in the SIP-negotiation
phase, the necessary extensions to SIP and discussion of
the data transmission protocol. In Section IV, three example
scenarios are presented that proﬁt from compulsory services.
Finally, Section V concludes the paper.
II. RELATED WORK
SIP services can be classiﬁed into being active during
the session initiation or focusing on modifying the data
transmission phase. During the session initiation, services
can run on signaling infrastructure or on user agent equip-
ment depending on the task the service performs and aim
at enforcing parameters for the following data transmission
phase according to a set of rules [2]. Device independent
services, for example services taking actions when systems
124
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

are not available or busy, are run on signaling infrastructure,
e.g., using SIP-CGI [3]. Services comprising device speciﬁc
information like location or call waiting alerts are executed
on UA equipment. SIP services typically take the following
steps:
1) Modiﬁcation of headers and forwarding of incoming
requests based on a set of rules.
2) Receipt of replies to forwarded requests, modifying
the replies and returning them to the client.
3) Generating requests to other services by creating and
sending appropriate messages.
4) Generation of responses to incoming requests and
sending the results to the client.
Approaches to the speciﬁcation of services that are run
on UA equipment have been proposed with SIP Call Pro-
cessing Language (CPL) [2] or Language For End System
Services (LESS) [4]. These approaches might be useful for
implementing UAs that dynamically adapt to an incoming
set of compulsory services during the session initiation.
A hybrid approach is the concept of SIP Back to Back
User Agents (B2BUAs) working as a man in the middle
in the SIP signaling process and therefore incorporating a
UAC and UAS at the same time for the transmission of
a given message. A B2BUA keeps track of the state of
connections it has established and has full control over
all signaling messages [1]. Extensive research has been
done in developing domain speciﬁc languages for B2BUA
programming, enabling applications like seamless device
handover [5] [6]. Other approaches like DiaSpec focus on
the automatic generation of includable source code from
telephony service speciﬁcations [7]. In comparison, our
approach does not aim at modifying the delivered content
but rather extending it with a token certifying that a piece of
information in a message has been processed by a trusted
third party, namely a compulsory service in a predeﬁned
manner.
Services in the data transmission phase have especially
been in the focus of research and have been developed in
the context of lawful interception (LI) [8]. Focused on the
interception of voice transmissions, signaling infrastructure
typically modiﬁes INVITE and ACK messages in the SDP
information in order to enforce the redirection of the packet
through a special recording gateway [9]. This way, the
internet telephony service provider in charge is able to
apply logging or packet snifﬁng tools to the data stream.
Contrary to our approach, the employment of the recording
services can be concealed from the communicating user
agents. Another downside of these approaches is that it is not
possible to avoid repudiation of received packages, which in
contrast can be implemented by our compulsory services.
III. COMPULSORY SERVICES AND SIP-SESSIONS
In this section, we present our approach to enforcing the
interaction of user agents with compulsory services in SIP
User
Agent 1
Policy
Server 1
Peer
domain of interest
User
Agent 2
Policy
Server 2
domain of interest
SIP /
Data
Policy
Peer, 
Services
Policy
Service1,1
Service1,n
...
Service2,1
Service2,n
...
Figure 1.
System architecture showing services known by policy servers
and two communicating user agents.
initiated communication sessions.
A. System Architecture
We propose a system architecture as depicted in Figure
1. A policy server (PS) within an administration domain
is associated to 1 . . . n services. Before starting the SIP-
negotiation, a user agent queries its PS, which has an inte-
grated set of rules stating which services have been deﬁned
as compulsory for the interaction between the two involved
user agents. Those services are called compulsory services
(CS). Conceptually, these services act as trusted third parties,
enabling clients to mutually guarantee that data sent to the
other user agent has also been sent to and processed by
each CS. This is realized by forcing each involved user
agent to request tokens with a limited time of validity from
the assigned compulsory services. These tokens are only
issued by the service if the user provides service-speciﬁc
required data. The tokens are then appended by the UA
to data transmissions, which will only be accepted by the
receiving user agent if the token is valid. Before initiating a
session with a SIP-INVITE, a user agent provides its policy
server the identities of himself and his peer and receives a set
of CSs along with the speciﬁcation of their communication
interface, also including their service access points SAPs.
The SIP-INVITE is then extended by this set and sent to
the peer UA, which again contacts his own policy server.
The reply sent back to the ﬁrst UA is extended by the set
of CSs that were received from the peer and those received
from his own policy server.
As this process runs the risk that two clients might agree
on ignoring the tokens and circumvent the enforcement of
the compulsory services, our approach is based on the pre-
condition that each involved policy server is within the same
domain of interest with one of the user agents, i.e., for a
given policy server, at least one user agent insists on abiding
its claimed compulsory services.
125
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

More precisely, a compulsory service i was deﬁned as a
tuple: CS i = (SAP, X, f, D, Cert, g) with the following
semantics: SAP is the service access point of the CS
represented by an URI. The set X represents the domain
of data CS i is interested in to ﬁnally create a token.
However, in general this data is not passed to CS i by an user
agent genuinely, but is rather pre-processed by the function
f :
X 7→ D. For example, D can be deﬁned as the set
of all hash values of elements in X. The Cert element
represents a public-key certiﬁcate associating a public key
K+
CS i with the SAP and also states that CS i owns the private
key K−
CS i. The set of all encrypted elements of D is denoted
as C(D) =

x|∃y ∈ D : K−
CSi(y) = x
	
.
The last element g is statically deﬁned as a constant g : 7→
{once,periodicTime(t),periodicPacket(t),always},
formalizing when tokens need to be generated for a data
packet. periodicTime(t) states that at least every t seconds
a valid token has to be used. Similarly, periodicPacket(t)
implies that at least every t packets a new token has to be
provided. In Section III-C the necessary extensions to SIP
are discussed.
A compulsory service CS i provides an external interface
to user agents with a function CS i : D 7→ C(D) ∪ {⊥},
which generates the desired tokens. The process of token
generation within CS i for a request CS i(f(x)) is based on
two steps: ﬁrst, the argument f(x) is sent to a processing
function p : D 7→ {true, false}, e.g., for logging f(x) to a
database or consulting third parties to verify information. Its
result is a boolean value. If this value is true, the token is
generated by computing the digital signature of f(x) using
K−
CSi and returned to the calling user agent. Otherwise, ⊥
will be the result, symbolizing invalid tokens:
CS i(f(x)) =
(
K−
CS i(f(x)),
if p(f(x)) = true
⊥,
otherwise
(1)
Finally, the calling user agent transmits all tokens 1, . . . , n
alongside the message x to his peer where the validity of
each token is checked:
K−
CS i(f(x)) is valid ⇔ K+
CS i(K−
CS i(f(x))) = f(x)
(2)
The formalism describing which services are deﬁned as
compulsory for a communication session is discussed in the
next section.
B. Assigning Compulsory Services to SIP-Sessions
In this section, the process of rule selection at a policy
server in the domain of interest of one of the two involved
user agents is presented. Therefore, sets Users, Roles and
Services have been deﬁned. The schema is illustrated in
Figure 2.
The set Users contains all known user agents and Roles
all role identiﬁers. Users can be assigned to roles given by
an user-role-relation UR ⊆ Users × Roles. The set of all
UR
Users
Roles
RS
RS
P(Services)
RS
Relation
Set
Sessions
Figure 2.
Rule base representing user-role-service-assignments.
currently assigned roles r ⊆ Roles for a user u ∈ Users
is denoted as r(u). Furthermore, the set of all compulsory
services has been deﬁned as Services and its power set
as P(Services). The time-dependent role assignment to
users at a certain point of time is represented by the set
Sessions ⊆ Users × Roles. The actual rule base is deﬁned
using the relations RS ⊆ (Roles × Roles) × P(Services)
and similarly RS. RS states, which compulsory services
have to be enforced in the communication between two user
agents with speciﬁc roles, while RS contains forbidden ones.
In complex scenarios, each involved user agent, ua1
and ua2, has its own policy server PS 1 or PS 2 within
its domain of interest. In all cases, ua1 generates a SIP-
INVITE according to the rules imposed by PS 1. For this
purpose PS 1 provides a set of compulsory services Sua1 that
will be integrated into the handshake message. Additionally,
ua2 has the policy server PS 2 within its domain of interest.
The latter will will be provided with Sua1 as well as ua1
and will return a set Sua2 of desired compulsory services
and a boolean value indicating if all services in Sua1 are
acceptable. In accordance to the extensions made to the
original SIP-INVITE by ua1, ua2 will extend the reply
with his set of compulsory services Sua2 induced by the
rule base of his own policy server PS 2, too.
A policy server PS i within the domain of interest of a
user agent uai computes the set of compulsory services Suai
according to its rule base by evaluating:
Suai = {cs ∈ Services|∃S ∈ P(Services)
. ∃r1, r2 ∈ Roles : r1 ∈ r(ua1)
∧r2 ∈ r(ua2) ∧ (r1, r2, S) ∈ RS ∧ cs ∈ S}
(3)
The elements in the set of services Suak received in a
handshake message from a peer are tested for policy con-
ﬂicts using RS. In case of conﬂicting policies, the session
initiation is canceled.
Eventually, each involved user agent knows the union set
of all enforced compulsory services Sua1,ua2 = Sua1∪Sua2,
which is ﬁxed for the duration of the session.
The next section describes how SIP-messages are ex-
tended in order to allow for the transmission of Sua1,ua2
to the user agents.
126
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

C. Integration into SIP
In order to agree on a set of compulsory services between
two user agents, the SIP messages at the initiation of a
session need to carry information about these services. This
guarantees that the user agents are able to reject the session
establishment in case one of the user agents does not accept
the compulsory services required by the other party.
The inclusion of additional information into a SIP-
message may be achieved by different means. Possibilities
are to deﬁne an additional header ﬁeld, to send the infor-
mation within the body of the message or to use multipart
bodies when the SIP message already contains a body part
(e.g., an SDP body) [10]. Making use of the message body
to include the additional information is reasonable if the
additional information is extensive and contains structured
information. If a user agent encounters an unknown header
ﬁeld, the header will simply be ignored. This solution has the
advantage that a user agent that is not able to process new
header ﬁelds may be detected to be incompatible. If a user
agent is not able to decode multipart messages it will issue
a 415 Unsupported Media Type response to signal
its inability to process the message. In this work, to add
the information, adding the required compulsory services to
the body of the SIP-messages has been chosen. This requires
only little modiﬁcation of established user agents and allows
for great ﬂexibility when implementing a suitable container
format for the description of the compulsory services. The
deﬁnition of the container format is omitted here, but it will
include all the information contained in the deﬁnition of a
compulsory service as stated in Section III-A.
Each user agent follows the same steps when a session
is established as depicted in Figure 3. The calling user
agent ua1 requests the set of compulsory services Sua1
from its policy server PS1 by providing it with the identity
of the desired peer. It then includes the received services
Sua1 in the SIP-INVITE message, which will be forwarded
to the called user agent ua2. The called user agent ﬁrst
examines if the certiﬁcates of the compulsory services are
valid and then checks if it is able to provide the necessary
information for all services. If one of these checks fails, the
INVITE request will be rejected by generating a 406 Not
Acceptable response. If the services pass this validation,
user agent ua2 – analogous to ua1 – queries PS2 for the
required compulsory services for a session with ua1 and
whether the services contained in Sua1 are acceptable. If so,
it includes Sua2 into the 200 OK response or sends a 406
Not Acceptable otherwise. User agent ua1 will perform
a validation of the services required by ua2, too. If the vali-
dation fails, the session will be terminated by an immediate
BYE request. Otherwise the session will continue with the
data transmission phase as described in Section III-D.
SIP is also able to modify the parameters of an active
session, which is achieved by the reinvite mechanism of the
PS1
ua2
Sua1
ua1
ua2
PS2
INVITE
(Sua1)
INVITE
(Sua2)
Sua1,ua1
Sua2,
Sua2
(true | false)
(true | false)
Figure 3.
Communication during the the SIP session establishment.
protocol. This will be used when a compulsory service is no
longer reachable or other problems with the services occur.
The re-invitation will renegotiate all the compulsory services
for each user agent and terminate the session in the same
manner as an initial INVITE in case the services do not
pass the veriﬁcation steps at each user agent. This gives the
services’ administrators the ability to change or remove a
service without interrupting the data transmission phase and
without termination of the session. If the re-invitation was
not successful, i.e., one of the compulsory services is not
reachable or the user agent is not able to provide all the
necessary information for one of the services, the session is
terminated by issuing a BYE request.
D. Data Transmission Protocol
With the extended session initiation being completed,
user agents ua1 and ua2 can start their communication
as shown in Figure 4. Before actually sending a message
x to its peer, however, each user agent has to contact all
services contained in Sua1,ua2 ﬁrst in order to have its
message’s content processed and signed by the respective
compulsory services. Consequently, the unavailability of any
CS leads to the abortion of a session. Since different services
might require different representations of x, the requesting
user agent ua1 will locally perform a service-speciﬁc pre-
processing function fCS i and provide CS i with fCS i(x).
Depending on whether a service’s processing function pi
works as an idempotent call or not, making use of a reliable
communication protocol (e.g., TCP) between user agents and
CSi is required. This is in order to prevent inconsistencies
caused by the repeated processing of a message fCS i(x)
due to a lossy channel. CS i replies to requests with a token
K−
CS i(f(x)) that ua1 will then forward to ua2 alongside the
other services’ tokens and the original message x.
We propose two alternative solutions for this kind of
extended data transmission: The ﬁrst one is to deﬁne a
minimal container format bundling the set of required to-
127
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

ua2
ua1
CSi
f(x)
K-
CSi(f(x))
(x, K-
CSi(f(x)))
Figure 4.
Compulsory service integration in the data transmission phase.
kens K−
CS i(f(x)) and the original message x into a single
packet. This tight coupling of a message’s content and its
associated tokens within one packet is necessary in order to
avoid any inconsistencies that might otherwise arise from
the loss of packages containing messages or tokens when
using unreliable communication channels. Another possible
solution to this problem is to embed this kind of compulsory
service related information into existing protocols. In case of
RTP this could for example be accomplished by assigning a
new dynamic payload type PT in the RTP header [11] [12].
This allows to avoid deﬁning a wholly new message format
by making a minor extension to a standardized protocol a
multitude of clients is already speaking. Hence, making use
of the latter approach is recommended whenever it seems
feasible. Either way, just as desired, only those clients that
can either handle such a speciﬁc container format or can
cope with an existing protocol’s extension will be able to
correctly process and validate incoming packets as well as
give adequate responses.
Upon receiving a message from ua1 user agent ua2 will
decompose the received packet and then try to validate the
contained tokens in order to locally prove that service CS i
has processed and approved the content of x. If any of the
tokens required by Sua1,ua2 are found to be absent or illegal,
the discovering user agent will terminate the current session
or at least reject the fraudulent message(s).
Dependent on the service-speciﬁc value of gCS i, both
the sending and the receiving user agent know when to
request and accordingly expect a fresh token from service
CS i. The constant value of g thereby indirectly synchronizes
the two user agents’ expectations of when an updated token
signed by CS is required. Each time one of the agreed on
compulsory services demands the usage of a new token, the
sending user agent has to repeat the procedure described at
the beginning of this section in order to acquire a fresh token.
Otherwise the peer client will reject incoming packages until
a valid token arrives or even quit the session.
As already stated before, it has been deﬁned as a pre-
condition that each user agent uai at least abides by the
rules imposed by the policy server PS i that it is assigned
to. This is required since the policy servers have no means
for supervising the correct usage of compulsory services
once the peer-to-peer communication session between the
two user agents has been established. Hence, full abidance
of the whole set of negotiated services has been achieved
by having ua1 and ua2 controlling the rules introduced by
PS 1 and PS 2 respectively.
IV. EXAMPLE SCENARIOS
In this section, three example scenarios and use cases are
presented that can be realized using compulsory services.
Location Veriﬁcation: Especially for mobile user agents
the current location of the peer user agent could be of high
interest but may be tampered with. Location Veriﬁcation is
the process of proving positions claimed by users [13]. In the
context of SIP-sessions this can be realized by implementing
a location prover as a compulsory service. In general, a
location prover is able to verify the claimed location of
a given user agent or entity, e.g., by employing trusted
infrastructure like ultrasound sensors in rooms. Assume
two communicating user agents that intend to exchange
information x along with a veriﬁed position l, describing
the residence of the sending UA. This results in a message
structure m = (x, l). Furthermore, let CS be a location
veriﬁcation compulsory service that has been assigned to the
session. Given the message m = (x, l), the pre-processing
function f has to be deﬁned as: f(m) = l, i.e., only the
location l will be transmitted to CS. There, the processing
function p will return true if the claimed location could be
veriﬁed and false otherwise.
The correctness of l is checked and conﬁrmed with a token
K−
CS(l) or with ⊥ if l does not correspond to the residence
of uai. According to the delay that is caused by CS when
contacting the location proving infrastructure, CS is deﬁned
with an appropriate periodicity g. Finally, after checking the
correctness of the received token, the peer user agent applies
the same processing steps when sending messages to uai.
Non-Repudiation Receive: In order to prevent two com-
municating UAs ua1 and ua2 from repudiating the receipt of
a message m, a non-repudiation compulsory service CS is
assigned to the session. The service has a pre-processing
function f(m, K−
uai) = K−
uai(hash(x)), which is used
to digitally sign the hash value of a previously received
message m. The processing function p is then implemented
as the logging of K−
CS(hash(m)) to an attached database.
This way, CS is able to generate a log of all messages that
have been received by the user agents ua1 and ua2. The
generated token K−
CS(K−
uai(hash(m))) is ﬁnally sent to the
peer user agent by piggy-backing it on a message x in order
to acknowledge the receipt of m, thereby preventing the UA
from repudiating it later.
Interception and Recording: The assignment of com-
pulsory services to SIP-Sessions can also be used for com-
plete logging of communication sessions on behalf and on
the agreement of the user agents ua1 and ua2. In many
countries, mutual agreement on the recording of calls is
claimed by law. The interception or recording of all pieces
128
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

of transmitted information is generally more suitable for
non real time applications, e.g., instant messaging based on
SIP. The periodic requests for attached compulsory services
Sua1,ua2 = {CS 1, . . . , CS n} introduce a delay d given by
the maximum round trip time (RTT) between user agents
and compulsory services:
d = max ({t|∃s ∈ Sua1,ua2 : t = RTT(s, ua1)
∨t = RTT(s, ua2)})
(4)
An appropriate compulsory service CS would deﬁne a pre-
processing function f corresponding to the identity function,
i.e., f(x) = x. The processing function p here returns true
if the received data x could be recorded. This is ﬁnally
conﬁrmed by a ticket K−
CS(x), which is sent along with
x to the receiving user agent. There, if the token is found
to be invalid, stating that x has not been correctly recorded,
the processing of x can be stopped.
V. CONCLUSION AND FUTURE WORK
We presented an approach that enables SIP user agents
to mutually force each other after session initiation to prove
that sent data has been additionally processed by a trusted
third party in advance, which has been denoted as a compul-
sory service. During session initiation using an extension of
SIP the compulsory services are negotiated, each pre-deﬁned
by a pre-processing function and a processing function. A
user agent aiming for sending information to its peer ﬁrst
transmits the pre-processed information to all compulsory
services and receives individual tokens certifying this inter-
action. These tokens are ﬁnally passed to the peer user agent
alongside the original information. During the initiation of a
session, the involved user agents extend signaling messages
according to a set of compulsory services that are in each
case deduced from an attached policy server. This policy
server is deﬁned within the same domain of interest of the
user agent. We outlined how SIP signaling messages can be
extended with a set of compulsory services and discussed
aspects of communication between user agents and compul-
sory services as well as the interaction between two user
agents. Finally three applications of compulsory services in
the ﬁelds of location veriﬁcation, avoidance of repudiation
of message receipt and agreement upon centralized call
recording have been presented.
Future work has to concentrate on developing a descrip-
tion language for compulsory services, on optimizing the
piggybacking mechanisms for user tokens and evaluating
aspects of efﬁciency.
REFERENCES
[1] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston,
J. Peterson, R. Sparks, M. Handley, and E. Schooler,
“SIP: Session Initiation Protocol,” RFC 3261 (Proposed
Standard), Internet Engineering Task Force, Jun. 2002,
http://www.ietf.org/rfc/rfc3261.txt (retrieved: April, 2012).
[2] J. Lennox and H. Schulzrinne, “Call Processing Lan-
guage Framework and Requirements,” RFC 2824 (Infor-
mational), Internet Engineering Task Force, May 2000,
http://www.ietf.org/rfc/rfc2824.txt (retrieved: April, 2012).
[3] J.
Lennox,
H.
Schulzrinne,
and
J.
Rosenberg,
“Com-
mon
Gateway
Interface
for
SIP,”
RFC
3050
(Infor-
mational), Internet Engineering Task Force, Jan. 2001,
http://www.ietf.org/rfc/rfc3050.txt (retrieved: April, 2012).
[4] X. Wu and H. Schulzrinne, “Programmable End System
Services Using SIP,” in IEEE International Conference on
Communications, 2003, ser. ICC’03, vol. 2.
IEEE, 2003,
pp. 789–793.
[5] P. Zave, E. Cheung, G. Bond, and T. Smith, “Abstractions
for Programming SIP Back-to-Back User Agents,” in Pro-
ceedings of the 3rd International Conference on Principles,
Systems and Applications of IP Telecommunications, ser.
IPTComm ’09, ACM.
ACM, 2009, pp. 11:1–11:12.
[6] V. Hilt and M. Hofmann, “Approaches to Implementing
Services in SIP Networks,” Bell Labs Technical Journal,
vol. 9, no. 3, pp. 39–44, 2004.
[7] W. Jouve, N. Palix, C. Consel, and P. Kadionik, “A SIP-
Based Programming Framework for Advanced Telephony
Applications,” in Principles, Systems and Applications of IP
Telecommunications. Services and Security for Next Gen-
eration Networks, ser. Lecture Notes in Computer Science.
Springer, 2008, vol. 5310, pp. 1–20.
[8] W. Chen, C. Gan, and Y. Lin, “NTP VoIP Platform: A
SIP VoIP Platform and Its Services,” in Proceedings of the
5th WSEAS International Conference on Applied Computer
Science, ser. ACOS’06, World Scientiﬁc and Engineering
Academy and Society (WSEAS).
World Scientiﬁc and
Engineering Academy and Society (WSEAS), 2006, pp. 756–
761.
[9] M. Handley, V. Jacobson, and C. Perkins, “SDP: Session
Description
Protocol,”
RFC
4566
(Proposed
Standard),
Internet
Engineering
Task
Force,
Jul.
2006,
accessed
12-April-2012. [Online]. Available: http://www.ietf.org/rfc/
rfc4566.txt(retrieved:April,2012)
[10] G.
Camarillo,
“Message
Body
Handling
in
the
Ses-
sion
Initiation
Protocol
(SIP),”
RFC
5621
(Proposed
Standard), Internet Engineering Task Force, Sep. 2009,
http://www.ietf.org/rfc/rfc5621.txt (retrieved: April, 2012).
[11] H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson,
“RTP: A Transport Protocol for Real-Time Applications,”
RFC 3550 (Standard), Internet Engineering Task Force,
Jul. 2003, http://www.ietf.org/rfc/rfc3550.txt (retrieved: April,
2012).
[12] H. Schulzrinne and S. Casner, “RTP Proﬁle for Audio
and Video Conferences with Minimal Control,” RFC 3551
(Standard), Internet Engineering Task Force, Jul. 2003,
http://www.ietf.org/rfc/rfc3551.txt (retrieved: April, 2012).
[13] N. Sastry, U. Shankar, and D. Wagner, “Secure veriﬁcation of
location claims,” in Proceedings of the 2nd ACM Workshop
on Wireless Security, ser. WiSe ’03.
ACM, 2003, pp. 1–10.
129
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

