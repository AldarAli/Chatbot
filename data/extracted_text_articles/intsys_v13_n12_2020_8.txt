Knowledge Resource Object Development and Mining
with a Knowledge-centric Architecture
Claus-Peter R¨uckemann
Westf¨alische Wilhelms-Universit¨at M¨unster (WWU), Germany;
Knowledge in Motion, DIMF, Germany;
Leibniz Universit¨at Hannover, Germany
Email: ruckema@uni-muenster.de
Abstract—This paper presents a knowledge resources’ view on
object development based on the new architecture framework,
which is a research result of a series of practical problem solving
implementations and further developments based on common
knowledge concepts and integrated application components.
The framework is considered knowledge-centric, supported by
knowledge resources, which constitute the fundamental base
and imply the core of key assets. Besides further knowledge
development, the knowledge-centric architecture ﬂexibly allows
implementations of mining and computation components for
many scenarios and the employment of available computation
infrastructures.
An
important
quality
of
the
architecture
framework is the inherent property to assign different roles
for the professional tasks in creation and development cycles.
These roles address the major complements of knowledge,
including factual, conceptual, and procedural components as well
as documentation. This paper discusses object development and
knowledge mining based on a knowledge-centric architecture. The
main goal of this research is to illustrate the universal multi-
disciplinary and multi-lingual knowledge and content related
features for major use-case activities, deploying a knowledge-
centric architecture and to provide new examples from the
practice of systematical object development and the implementa-
tion of ﬂexible methods.
Keywords–Knowledge Resource Object Creation; Object Devel-
opment and Integration; Containers and Collections; Knowledge-
centric Architecture; Knowledge-centric Mining.
I.
INTRODUCTION
From information science view, knowledge-centric comple-
ments are in focus when creating and employing knowledge re-
sources for mining purposes. Creation and further development
of these resources and objects is of primary interest. This ex-
tended research is based on the knowledge-centric computation
architecture and its deployment for knowledge mining, which
was presented at the INFOCOMP 2019 conference in Nice,
France [1]. The presented research concentrated on the new
architecture and facilities to implement and describe activity
groups in a consistent and standardised way.
Consequently, this extended paper concentrates on research
from the knowledge resources’ perspective, the object devel-
opment, based on major use-cases groups, namely knowledge
creation and development on the one hand and knowledge
mining on the other hand. The development of knowledge
resources and objects essentially contributes to the long-term
values created for universal knowledge. Fostering structured
organisation of content, which can be addressed by manifold
methods and which can carry universal references to multi-
disciplinary and multi-lingual knowledge is considered a pri-
mary beneﬁt for development, valorisation, and ﬂexibility of
re-use.
The continuous development of knowledge resources and
objects should be provided a number of major features, which
are supported by the architecture, especially:
•
Development of resources and objects,
•
ﬂexible object structures,
•
object groups, e.g., collections and containers,
•
multi-disciplinary knowledge object support,
•
ﬂexible object and context references,
•
support of knowledge complements,
•
multi-lingual features,
•
consistency of resources,
•
object re-use,
•
knowledge mining,
•
creation and deployment of algorithms,
•
object integration,
•
a fundamental, universal framework with a
•
high potential of long-term facilities.
The goal of this research is to implement resources and features
according to the knowledge-centric architecture. Use-cases
illustrate and summarise the knowledge and content related
features for major activities and to summarise the architecture
and the implementation fundaments. The paper introduces
major use-cases of object development and knowledge mining
based on the architecture and presents relevant results for
objects and content. The resulting object development based
on this research is presented and demonstrated for a consistent
view on objects, closely referring to activities for these use-
cases.
This paper is organised as follows. Section II and III deliver
motivation, fundaments and previous work. Section III presents
the architecture resulting from this research. Sections IV and
V introduce to the knowledge-centric architecture and to an
implementation of two major use-cases for object development
and mining. Section VI presents a resulting object development
architecture. Sections VII and VIII present the respective re-
sults of object development and knowledge mining, illustrated
by practical examples. Section IX discusses the main results
and evaluates them in context of the practical application
scenario. Section X summarises the results and lessons learned,
conclusions, and future work.
II.
MOTIVATION
All implementations of mathematical machines, which we
call ‘computer systems’ today, can strictly only deal with
formal systems. Knowledge is a capability of a living organism
and can itself not be incorporated by formal systems. Neither
can intrinsic meaning, which is an essential characteristics of
real knowledge and a unique stronghold of knowledge, be
109
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

a matter of formal systems nor can mathematical relations,
the theory of sets, exlusiveness or creating completeness be
applied to knowledge.
Solutions requiring a wide range of knowledge content
as well as implementations of algorithms and components
are often challenging to handle, the more when it comes to
operating and adding to the resulting solutions for decades
or even further developing content and implementations for
long-term. Over time, the further developments and services
are becoming more complicated without a common, holistic
frame for content and implementation. When gathering a large
number of independent implementations, we experienced an
increasing heterogeneity in content development but also in
implementations of computing components.
This background is the major motivation for the develop-
ment of an advanced framework based on long-term Knowl-
edge Resources and integrated application components pro-
viding a valuable means of tackling the challenges. Neverthe-
less, in complex cases even major component groups cannot
protect long-term challenges, if there is no basic framework
architecture enabling to care for knowledge and computational
implementation. The practice of creating solutions, which
have to deal with the complements of knowledge suggests
that ﬂexible but nevertheless methodological, systematical ap-
proaches are required. The goal of this research is to create
such knowledge-centric architecture, based on a wide range of
multi-disciplinary implementations and practical case studies
in different disciplines and dealing with different foci, for
many years. While further developing and updating the knowl-
edge related attributes, data, implementations, and solutions,
all of them had to be revisited over time, improving and where
necessary recreating implementation and developing content.
Knowledge resources and originary resources cover the
complements of factual, conceptual, procedural, and metacog-
nitive complements, e.g., from collections and referenced
resources. The architecture presented here aims to seamlessly
integrating separate roles of contributing parties, e.g., scien-
tiﬁc staff creating research data, professional classiﬁcation
by experienced research library specialists, and developers of
application components as well as services. The guideline
was enabling to retain the knowledge required to resemble
the inherent complexity of realia situations, real and material
instead of abstract situations, while allowing lex parsimoniae
principles of William of Ockham for problem solving.
Overall outcome and new insight gained from the practical
knowledge resource object development and mining solutions
based on the designed and implemented knowledge-centric
architecture are presented in the following sections.
III.
FUNDAMENTS AND PREVIOUS WORK
With one of the best and most solid works, Aristotle outlined
the fundaments of terminology and of understanding knowl-
edge [2] being an essential part of ‘Ethics’ [3]. Information
sciences can very much beneﬁt from Aristotle’s fundaments
and a knowledge-centric approach, e.g., by Anderson and
Krathwohl [4], but for building holistic and sustainable so-
lutions they need to go beyond the available technology-based
approaches and hypothesis [5] as analysed in Platons’ Phaidon.
So far, there is no other practical advanced knowledge-centric
architectural speciﬁcation known, which implements these fun-
daments. Making a distinction and creating interfaces between
methods and applications [6], the principles are based on the
methodology of knowledge mapping [7]. The implementation
can make use of objects and conceptual knowledge [8] and
shows being able to build a base for application scenarios like
associative processing [9] and advanced knowledge discovery
[10]. Based on this background, during the last decades, a
number of different case solutions were created, implemented,
and realised on this fundament, including: Dynamical visu-
alisation, knowledge mining, knowledge mapping, Content
Factor, phonetic algorithms, Geoscientiﬁc Information Systems
(GIS), Environmental Information Systems (EIS), cartographic
mapping, service design, service management, and High End
Computation. All such implementations include extensive use
of LX Knowledge Resources, as explicitly representing the
developed resources in this notation, and computation algo-
rithms. This paper, presenting the new architecture, does not
allow to illustrate too many implementation details. Therefore,
an excerpt of practical solutions is cited, which have been
reimplemented by the collaboration of the participated research
groups and published, creating a base for this architecture.
Representative examples are a) integrated systems and su-
percomputing resources used with phonetic algorithms and
pattern matching [11] for knowledge mining [12], b) multi-
dimensional context creation based on the methodology of
Knowledge Mapping [13], and c) an exemplary resulting,
widely used conceptual knowledge subset for geo-spatial sce-
narios [14]. The LX Knowledge Resources cover the factual,
conceptual, procedural, and metacognitive complements in all
cases, e.g., from collections and referenced resources.
An understanding of the essence and complexity of univer-
sal, multi-disciplinary knowledge can be achieved by taking a
closer look on classiﬁcation. The state-of-the-art of classifying
‘universal knowledge’ is the Universal Decimal Classiﬁcation
(UDC) [15] and its solid background, ﬂexibility, and long
history. The LX Knowledge Resources’ structure and the clas-
siﬁcation references [16] based on UDC [17], [18] are essential
means for the processing workﬂows and evaluation. Both pro-
vide strong multi-disciplinary and multi-lingual support. For
the research, all small unsorted excerpts of the Knowledge Re-
sources objects only refer to main UDC-based classes, which
for this publication are taken from the Multilingual Universal
Decimal Classiﬁcation Summary (UDCC Publication No. 088)
[17] released by the UDC Consortium under the Creative
Commons Attribution Share Alike 3.0 license [19] (ﬁrst release
2009, subsequent update 2012). These components and their
qualities are integrated in the resulting architecture with the
methodologies and systematic use.
IV.
KNOWLEDGE-CENTRIC ARCHITECTURE
As discussed above, the presented results were achieved,
based on the knowledge-centric architecture created for a series
of previously implemented problem solutions and Knowledge
Resources developments over the last years.
A. General Computation Architecture
The complements diagram of the implementation architec-
ture [20][21][22] is shown in Figure 1. The major components
are core resources and module resources. The result resources
include object collections, which result from the application
of core and module resources in arbitrary scenarios.
110
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Core Resources
Module Resources
Result Resources
(c) DIMF, 2020
(c) Rückemann, 2019
Figure 1. Complements diagram of the resources components architecture,
including the three main complements of core, module, and result resources.
The sizes of this ﬁgure and the associated complements dia-
grams correspond, the following ﬁgures show complementary
details from this context.
The core resources in this architecture comprise required
resources. The complements diagram (Figure 2) shows the
essential detail.
Knowledge
Containers
Application
Originary
Resources
and
Components
Resources
and
Sources,
Resources
Referenced Resources
Collections
Integrated Resources
Data Sources
(c) DIMF, 2020
(c) Rückemann, 2019
Figure 2. Computation architecture: Complements diagram of general core
resources, from originary to knowledge and application resources.
The core resources can be divided into three categories: The
central LX Knowledge Resources, originary resources, and ap-
plication resources and components. The ﬁrst, the Knowledge
Resources, can include collections and containers as well as
integrated resources and references to resources. The second,
the originary resources, can include realia and original sources,
which in many cases may have instances in the Knowledge
Resources. The third, the application resources, can include
implementations of algorithms, workﬂows, and procedures,
which form applications and components. Instances of these
components can also be employable in solutions due to their
procedural nature, e.g., in module resources.
The complements diagram of general module resources is
shown in Figure 3.
Input Resources
Interface Module Entity
Workflow Module Entities
Output Resources
Interface Module Entity
(c) DIMF, 2020
(c) Rückemann, 2019
Figure 3. Computation architecture: Complements diagram of module
resources, from input, interfaces and workﬂow entities to output.
A general set of module resources consists of input re-
sources, modules, and output resources. The central workﬂow
module entities are accompanied by interface module entities
for input and output resources. For many architecture imple-
mentations, chains of module resources can be created, which
can, for example, be used in pipeline and in parallel.
B. Architecture Complements for Knowledge Mining
For the case of knowledge mining, the complements diagram
of the core resources is shown in Figure 4.
Knowledge
Application
Originary
Resources
and
Components
Resources
and
Sources, ...
Resources
Collections
Referenced Resources
Module implementations
Program components
Factual, Conceptual,
Procedural, Metacogn., ...
Realia
Reference Targets
Perl, Tcl, C, Fortran, ...
Algorithms, Doc.
UDC,
Data,
Scripts, Executables, ...
(c) DIMF, 2020
(c) Rückemann, 2019
Figure 4. Knowledge Mining: Complements diagram of the core resources
and examples of their contribution implementations.
Application resources and components are based on module
implementations and program components for the knowledge
mining realisation. Implementations employ scripting, high
level languages, and third party components. Knowledge Re-
sources and originary resources cover the complements of fac-
tual, conceptual, procedural, and metacognitive complements,
e.g., from collections and references resources.
The respective complements diagram of a module resource
for a text based knowledge mining implementation consists of
several features (Figure 5).
Collection Text Instances
Perl Interface Modules Entity
C and Perl Workflow Module Entities
Resulting Text Objects
Perl Interface Modules Entity
(c) DIMF, 2020
(c) Rückemann, 2019
Figure 5. Knowledge Mining: Complements diagram of a module resource
used for creating module chains for text based knowledge mining.
The input and output resources consist of text object in-
stances in text based cases of knowledge mining. Here, the
module entity implementations were implemented in C and
Perl [23] for the respective implementations. The interface
module entities are implemented in Perl, with the option to
be on-the-ﬂy generated within a workﬂow.
The knowledge-centric architecture does focus on resources
and application scenarios, one of the most important is com-
putation cases. Large computation workﬂow chains can be
built with the architecture as was demonstrated with the
reimplemented solutions for different cases, which were above
referred to. An implementation sequence of module resources
can be considered an intermediate step in building a workﬂow.
Results within an implementation sequence can be considered
intermediate results and instances, e.g., from the integrated
mining of collection and container resources.
111
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

V.
OBJECT DEVELOPMENT AND MINING CASES
The goal was to create a knowledge-centric computation
architecture, which allows a close integration of Knowledge
Resources with wide spectra of complementary knowledge and
ﬂexible, efﬁcient computational solutions, while being able to
specify practically required roles for creation and long-term
development. The knowledge-centric architecture can provide
a base for an arbitrary range of use-cases and associated
components. Two major groups of use-cases are
•
resources creation and development and
•
knowledge mining and selected associated methods.
A. Major Use-case Groups
Figure 6 shows an use-case diagram (UML, Uniﬁed Mod-
eling Language) of the knowledge-centric computation archi-
tecture.
uc knowledge mining
(c) R¨uckemann, 2020
(c) DIMF, 2020
Knowledge-centric Computational Architecture
Knowledge-centric Computational Architecture
≪include≫
≪include≫
≪include≫
≪extend≫
≪extend≫
≪extend≫
≪include≫
≪extend≫
≪extend≫
Knowledge
Mining
Knowledge
Mapping
Parallelisation
Edition
Management
Resource
Creation
Resource
Development
Phonetic
Selection
Knowledge
Resources
user 1
user 2
creator 1
creator 2
creator 3
creator 4
Result data
integration
Result data
integration
Instance
Instance
Persistent result
integration
Persistent result
integration
Factual
Factual
Conceptual
Conceptual
Procedural
Procedural
Metacognitive
Metacognitive
Figure 6. Use-case diagram of the knowledge-centric computation
architecture: Two major use-case groups with four creator roles.
The excerpt illustrates an integrated view on the two groups
of knowledge mining (bluish), which was implemented span-
ning knowledge mining use-cases and knowledge creation and
development use-cases (greenish). In this widely deployed
scenario, the implementation does have two main types of
actors, namely creators and users. The use-cases have different
actors, two ‘user’ roles and four ‘creator’ roles.
The selected system context is given by the grey box.
The selected use-cases (ellipses) can be distinguished in use-
cases for creators (greenish: resource creation, resource de-
velopment, edition management, parallelisation) and use-cases
for users (bluish: knowledge mining, knowledge mapping,
phonetic selection).
Knowledge mining is supported by and using the cases of
knowledge mapping and phonetic selection, which inherit to
the knowledge mining instance the implemented methods and
algorithms contributed by other user groups. For clearness, the
creator and other roles for these two cases are not included
in this diagram. Knowledge mining, mapping, and phonetic
selection include the use-case of LX Knowledge Resources.
The cases of this group are extended by parallelisation, respec-
tive computation, here instance based workﬂow parallelisation,
which enables the computation-relevant optimisation for indi-
vidual implementations and infrastructures.
The knowledge resources include the use-case of resource
creation, which allows to integrate persistently added results.
The use-case of resource creation itself is extended by the
use-cases of resource development and edition management,
which allows to deﬁne editions of resources for consistency in
advanced complex application scenarios.
The use-case scenario reﬂects the professional practice
of having separate roles for creating and developing fac-
tual, conceptual, procedural, and documentation, respective
metacognitive knowledge. In most cases, different specialists
are employed for creating and developing
•
factual knowledge, e.g., research data and its documen-
tation,
•
conceptual knowledge, e.g., classiﬁcation of knowledge
objects,
•
procedural knowledge, e.g., procedures, workﬂows, pro-
grams, and their respective documentation,
•
metacognitive knowledge, e.g., documentation of expe-
riences.
In practice, the creators are commonly represented by differ-
ent groups, e.g., scientists, classiﬁcation experts in scientiﬁc
libraries, and designers of scientiﬁc algorithms and workﬂows.
B. Main Components
The core components of a basic knowledge mining im-
plementation with the LX Knowledge Resources, based on
the knowledge-centric computation architecture, can be sum-
marised with a block diagram (Figure 7).
(c) R¨uckemann, 2020
(c) DIMF, 2020
Knowledge Resources Interface
Knowledge Resources Interface
Mining
Mining
Resource Creation
Resource Creation
Collection
Collection
Container
Container
≪delegate≫
≪delegate≫
Container Interface
Collection Interface
Collection Interface
Container Interface
KRM
KRC
Collection Interface
Collection Interface
Collection Interface
Collection Interface
Container Interface
Container Interface
Container Interface
Container Interface
Knowledge Resources
Mining Interface
Knowledge Resources
Mining Interface
KRC Port
KRC Port
KRM Port
KRM Port
Knowledge Resources
Creation Interface
Knowledge Resources
Creation Interface
Figure 7. Block diagram of respective knowledge-centric computation
architecture components: LX Knowledge Resources and interfaces excerpt.
The block diagram shows the LX Knowledge Resources
and two types of knowledge object groups, namely object
collections and containers. Each type and implementation can
have individual and specialised interfaces. Knowledge mining
is provided by an interface with the LX Knowledge Resources.
The diagram also contains the interface block, due to the
importance of the resource creation use-case. The individual
groups have ports, interaction points, which can be used via
interfaces, e.g., Knowledge Resources Creation (KRC) port
and Knowledge Resources Mining (KRM) port. Components
can have further interfaces, with and without delegating ports.
It is common that independent resources are in many cases not
necessarily orchestrated.
112
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

C. Activity Groups
A number of activities are associated with different compo-
nents. An important activity regarding the resource creation is
the creation-update (Figure 8).
(c) R¨uckemann, 2020
(c) DIMF, 2020
Update Object
EXISTS?
Create Object Instance
Update Existing Object
no
yes
Figure 8. Activity diagram illustrating the essential object creation-update
activities in the knowledge-centric computation architecture.
The resource creation component has to provide creation
and update activities for the different creator groups. A simple
but important example for resource creation and development
is the creation of an object instance and respective updating
an existing object with a new instance.
Start state is any state of the knowledge resources. End state
is a new state of the knowledge resources. Regarding resource
creation and development use-cases the start and end states
should be considered intermediate states. As shown in the use-
case diagram, professional practice affords the implementation
of according activities for all required, specialised creator
roles. A fundamental mining activity with knowledge resources
is a resource request targeting to create an intermediate result
(Figure 9).
(c) R¨uckemann, 2020
(c) DIMF, 2020
Resource Request
AVAILABLE?
Ignore-procedure
Create Intermediate Result
Select Interface
Explore Resource
Knowledge Mapping
Phonetic Selection
Create Resource Instance
no
yes
Figure 9. Activity diagram of a basic resource request for creating an
intermediate knowledge mining result.
Start state is any state in a knowledge mining workﬂow
chain. End state is a new state in a knowledge mining workﬂow
chain. Regarding knowledge mining use-cases the start and end
states should be considered intermediate states. If a resource is
not available then an ignore-procedure continues for creating
an intermediate result. The ignore-procedure can contribute
its status to the workﬂow chain. If the resource is available
then an interface is selected for the resource exploration.
The exploration can use available activities, e.g., knowledge
mapping and phonetic selection, in order to create a resource
instance, which contributed to creating an intermediate result
for the workﬂow chain.
Examples of activities are multi-dimensional context cre-
ation by knowledge mapping [7] and phonetic association, e.g.,
using Soundex [24][25][26]. Sample Soundex codes developed
[12] are used for names in various textual, contextual, and
linguistical situations, implemented in order to be integrated
in a large number of situations.
VI.
RESULTING OBJECT DEVELOPMENT ARCHITECTURE
Any sustainable long-term knowledge resources require an
efﬁcient concept for continuous content development. The fun-
damental concept for continuous content development imple-
mented and practiced with this long-term research is shown in
a Knowledge Resource Object Development (KROD) diagram
(Figure 10).
«
«
«
«
Knowledge Resources
Container
ϱC
⃝
Collection
ϱO
⃝
. . .
. . .
Object Creation
γC Container
⃝
γO Collection
⃝
Knowledge Mining
µC Container
⃝
µO Collection
⃝
(c) R¨uckemann, 2020
(c) DIMF, 2020
1
%-EN: \stoentry{marbles}{}
2
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN:
{fine- to coarse-grained}
4
%-EN:
{white, grey, different colour tones}
5
%-EN:
{calcite, dolomite}
6
%-EN:
{mica, quartz}
7
%-EN:
{limestones, dolomite rocks, dolostones}
8
%-EN:
{}
9
%-EN:
%%IML: DateCreated:
1989-01-02:192718
10
%-EN:
%%IML: DateModified:
2020-01-01:231704
11
%-EN:
%%IML: ID:
1910093458
12
%-EN:
%%IML: CertificateID:
75660429
13
%-EN:
%%IML: Signature:
DF98_007::...
14
%-EN:
%%IML: SourceReferences: #KR::C
15
%-EN:
%%IML: Instance:
52
16
%-EN:
%%IML: Md5sum:
...
17
%-EN:
%%IML: Sha1sum:
...
18
%-DE: \stoentry{Marmore}{}
19
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
20
%-DE:
{fein- bis grobk¨ornig}
21
%-DE:
{weiß, grau, verschiedene Farbt¨one}
22
%-DE:
{Calcit, Dolomit}
23
%-DE:
{Glimmer, Quarz}
24
%-DE:
{Kalksteine, Dolomitgesteine}
25
%-DE:
{}
26
%-DE:
...
1
%-EN: marble [Geology, Mineralogy]:
2
%-EN:
Metamorphised_limestone or dolomite with grained-metamorphic
3
%-EN:
fabric. ...
4
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
5
%-EN:
Hymettian_marble : grey, from Pentelikon (Attica), Greece.
6
%-EN:
Karystian_marble : ..., fine-grained, from Euboea, Greece.
7
%-EN:
Parisian_marble : white, medium-grained, from Paros, Greece.
8
%-EN:
Pentelic_marble : ..., from Pentelikon (Attica), Greece.
9
%-EN:
Proconnesian_marble : ..., Greek island of Prokonnesos, ...
10
%-EN:
Carrara_marble : ..., from Luni, Tuscany, Italy. ...
11
%-EN:
%%IML: DateCreated:
1988-12-26:175694 ...
12
%-DE: Marmor [Geologie, Mineralogie]:
13
%-DE:
Metamorphisierte_Kalksteine oder Dolomite mit
14
%-DE:
k¨ornig-metamorphem Gef¨uge. ...
15
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
16
%-DE:
Hymettischer_Marmor : ..., aus Pentelikon (Attika) ...
17
%-DE:
Karystischer_Marmor : ..., von Euboia, Griechenland.
18
%-DE:
Parisischer_Marmor : weiß, mittelk¨ornig, von Paros, Griechenland.
19
%-DE:
Pentelischer_Marmor : ..., aus Pentelikon (Attika), Griechenland.
20
%-DE:
Prokonnesischer_Marmor : ..., griech. Insel Prokonnesos, ...
21
%-DE:
Carrara_Marmor : ..., feink¨ornig, aus Luni, Toscana, Italien. ...
22
%-DE:
Syn: Calcit
:: Kalkspat
23
%-DE:
Syn: Calcit
:: Kanonenspat
24
%-DE:
Syn: bl¨attriger Calcit :: Schieferspat
25
%-DE:
Syn: Nitrocalcit
:: Mauersalz ...
1
%-EN: \stoentry{marbles}{}
2
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN:
{fine- to coarse-grained}
4
%-EN:
{white, grey, different colour tones}
5
%-EN:
{calcite, dolomite}
6
%-EN:
{mica, quartz}
7
%-EN:
{limestones, dolomite rocks, dolostones}
8
%-EN:
{}
9
%-EN:
%%IML: DateCreated:
1989-01-02:192718
10
%-EN:
%%IML: DateModified:
2020-01-01:225807
11
%-EN:
%%IML: ID:
1910093458
12
%-EN:
%%IML: CertificateID:
75660429
13
%-EN:
%%IML: Signature:
DF98_007::...
14
%-EN:
%%IML: SourceReferences: #KR::C
15
%-EN:
%%IML: Instance:
51
16
%-EN:
%%IML: Md5sum:
...
17
%-EN:
%%IML: Sha1sum:
...
18
%>DE: \stoentry{Marmore}{}
19
%>DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
20
%>DE:
{fein- bis grobk¨ornig}
21
%>DE:
{weiß, grau, verschiedene Farbt¨one}
22
%>DE:
{Calcit, Dolomit}
23
%>DE:
{Glimmer, Quarz}
24
%>DE:
{Kalksteine, Dolomitgesteine}
25
%>DE:
{}
26
%>DE:
...
1
%-EN: marble [Geology, Mineralogy]:
2
%-EN:
Metamorphised_limestone or dolomite with grained-metamorphic
3
%-EN:
fabric. ...
4
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
5
%>EN:
Hymettian_marble : grey, from Pentelikon (Attica), Greece.
6
%>EN:
Karystian_marble : ..., fine-grained, from Euboea, Greece.
7
%-EN:
Parisian_marble : white, medium-grained, from Paros, Greece.
8
%-EN:
Pentelic_marble : ..., from Pentelikon (Attica), Greece.
9
%-EN:
Proconnesian_marble : ..., Greek island of Prokonnesos, ...
10
%-EN:
Carrara_marble : ..., from Luni, Tuscany, Italy. ...
11
%-EN:
%%IML: DateCreated:
1988-12-26:175694 ...
12
%-DE: Marmor [Geologie, Mineralogie]:
13
%-DE:
Metamorphisierte_Kalksteine oder Dolomite mit
14
%-DE:
k¨ornig-metamorphem Gef¨uge. ...
15
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
16
%<DE:
Pentelische_Marmore : ..., aus Pentelikon (Attika) ...
17
%>DE:
Hymettischer_Marmor : ..., aus Pentelikon (Attika) ...
18
%>DE:
Karystischer_Marmor : ..., von Euboia, Griechenland.
19
%-DE:
Parisischer_Marmor : weiß, mittelk¨ornig, von Paros, Griechenland.
20
%-DE:
Pentelischer_Marmor : ..., aus Pentelikon (Attika), Griechenland.
21
%-DE:
Prokonnesischer_Marmor : ..., griech. Insel Prokonnesos, ...
22
%-DE:
Carrara_Marmor : ..., feink¨ornig, aus Luni, Toscana, Italien. ...
23
%>DE:
Syn: Calcit
:: Kalkspat
24
%>DE:
Syn: Calcit
:: Kanonenspat
25
%>DE:
Syn: bl¨attriger Calcit :: Schieferspat
26
%>DE:
Syn: Nitrocalcit
:: Mauersalz ...
1
%-EN: Object: marbles
2
%-EN: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN: ObjectTerm: calcite, dolomite, mica, quartz, limestones, dolomite rocks,
dolostones
4
%-EN: ObjectInstance: DateCreated:
1989-01-02:192718
5
%-EN: ObjectInstance: DateModified:
2020-01-01:231704 ...
6
%-DE: Object: Marmore
7
%-DE: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
8
%-DE: ObjectTerm: Calcit, Dolomit, Glimmer, Quarz, Kalksteine, Dolomitgesteine
9
%-DE: ObjectInstance: DateCreated:
1989-01-02:192718
10
%-DE: ObjectInstance: DateModified:
2020-01-01:231704 ...
1
%-EN: Object: marble
2
%-EN: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN: ObjectKeyword: Geology, Mineralogy
4
%-EN: ObjectTerm: limestone, dolomite, Hymettian_marble, Karystian_marble,
Parisian_marble, Pentelic_marble, Proconnesian_marble, Carrara_marble, ...
5
%-EN: ObjectPlace: Pentelikon, Attica, Euboea, Paros, Greece, Prokonnesos, Luni,
Tuscany, Italy. ...
6
%-EN: ObjectInstance: DateCreated:
1988-12-26:175694 ...
7
%-DE: Object: Marmor
8
%-DE: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
9
%-DE: ObjectKeyword: Geologie, Mineralogie
10
%-DE: ObjectTerm: Kalksteine, Dolomite, Calcit, Kalkspat, Kanonenspat, bl¨attriger
Calcit, Schieferspat, Nitrocalcit, Mauersalz, Hymettischer_Marmor,
Karystischer_Marmor, Parisischer_Marmor, Pentelischer_Marmor,
Prokonnesischer_Marmor, Carrara_Marmor, ...
11
%-DE: ObjectPlace: Pentelikon, Attika, Euboia, Paros, Pentelikon, Attika,
Griechenland, Prokonnesos, Luni, Toscana, Italien, ...
12
%-DE: ObjectInstance: DateCreated:
1988-12-26:175694 ...
Figure 10. Knowledge Resource Object Development Diagram: Knowledge
Resources, Object Creation, Knowledge Mining, containers and collections.
The diagram displays formalised activities associated with
use-cases and their relations from the view of real object in-
stances. The diagram illustrates activity groups and respective
excerpts of objects.
Two major activities in context of LX Knowledge Re-
sources (yellowish) are the creation of objects (greenish) and
knowledge mining (bluish). Here, some major object groups
are shown, collections and containers. The respective object
instances (ϱ, γ, and µ groups) and properties are shown and
further discussed in separate object instance representation
views in the next sections. Different colours are used, which
correspond to the discussed use-cases (Figures 6, 7, 8, and 9).
Table I shows the legend of colours/symbols used with
the development components: The case groups (Knowledge
Resources, KR; Object Creation, OC; Knowledge Mining,
KM) and objects.
113
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Table I. Legend for development components: Case groups (Knowledge
Resources, KR; Object Creation, OC; Knowledge Mining, KM) and objects.
Development Component
Colour Name
Colour
Case group KR
(yellowish)
Case group OC
(greenish)
Case group KM
(bluish)
Case group KR object
(darker yellowish)
Case group OC object
(darker greenish)
Case group KM object
(darker bluish)
Objects, object terms
dark green
Object terms’ context
light green
Object places’ context
olive green
Object keywords
orange
Object instance data
cyan
Object development-is
violet
Object development-in
blue
Object development-out
red
The major groups of objects, container (C) objects and col-
lection (O) objects [27], correspond with instances when used:
Knowledge resources’ objects in containers and collections, ϱC
and ϱO, Object Creation’s objects of containers and collections,
γC and γO, and Knowledge Mining’s objects from containers
and collections, µC and µO.
A creation algorithm C realises a function fC out of the set
of input data γ and the set of output data ϱ, this is fC : γ → ϱ.
A mining algorithm M realises a function fM out of the set
of input data ϱ and the set of output data µ, this is fM : ϱ → µ.
For the major C and O groups of objects, the algorithms for
these two operations result in two groups of functions:
fC : γC,O −→ ϱC,O
(1)
fM : ϱC,O −→ µC,O
(2)
Therefore, this architecture provides any algorithm a ﬂexibility
to be implemented by an arbitrary number of implementations,
e.g., manual, automated, and hybrid approaches. Even more
important is the development of the objects covering the com-
plements of factual, conceptual, procedural, and metacognitive
knowledge. Development policies and enforcement of policies
are matter of implementing operation and services based on
workﬂows and algorithms, which are beyond demonstration
here. The following sections present the use-cases and object
development, which are in focus of this paper.
VII.
OBJECT DEVELOPMENT CASE RESULTS
The three types of instances of respective C and O objects,
which are in focus of this research, are discussed in the
following sections.
Excerpts of the LX Knowledge Resources provided for this
research are shown using automatic component highlighting
according to the above legend. Line-wise modiﬁcation indica-
tors were used for illustration in this paper.
A. Resources and Objects
The objects in the LX Knowledge Resources can contain
content and documentation of factual, conceptual, procedural,
and metacognitive knowledge. There are multi-fold means of
attainment for this goal.
The selected resources contain more than 100,000 associ-
ated objects, entities, and references, especially referring to a
potential of more than 4,000 minerals and mineral synonyms
as well as possible 3,000,000 reference objects and conceptual
knowledge in more than 50 languages.
The LX Knowledge Resources case group (yellowish), ac-
cording to the KROD Diagram (Figure 10), is represented
by excerpts illustrating object development examples from
geoscientiﬁc container and collection objects. Figure 11 shows
a small excerpt of a ϱC container object representation.
1
%-EN: \stoentry{marbles}{}
2
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN:
{fine- to coarse-grained}
4
%-EN:
{white, grey, different colour tones}
5
%-EN:
{calcite, dolomite}
6
%-EN:
{mica, quartz}
7
%-EN:
{limestones, dolomite rocks, dolostones}
8
%-EN:
{}
9
%-EN:
%%IML: DateCreated:
1989-01-02:192718
10
%-EN:
%%IML: DateModified:
2020-01-01:231704
11
%-EN:
%%IML: ID:
1910093458
12
%-EN:
%%IML: CertificateID:
75660429
13
%-EN:
%%IML: Signature:
DF98_007::...
14
%-EN:
%%IML: SourceReferences: #KR::C
15
%-EN:
%%IML: Instance:
52
16
%-EN:
%%IML: Md5sum:
...
17
%-EN:
%%IML: Sha1sum:
...
18
%-DE: \stoentry{Marmore}{}
19
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
20
%-DE:
{fein- bis grobk¨ornig}
21
%-DE:
{weiß, grau, verschiedene Farbt¨one}
22
%-DE:
{Calcit, Dolomit}
23
%-DE:
{Glimmer, Quarz}
24
%-DE:
{Kalksteine, Dolomitgesteine}
25
%-DE:
{}
26
%-DE:
...
Figure 11. Object instance representation: LX Knowledge Resources KR,
container object (excerpt).
The auto-highlighting emphasises various knowledge in
context of this object instance. The object entity of type
stone is ‘marbles’ (dark green). Material components (light
green) are calcite and dolomite (major components), mica and
quartz (minor components). Educts are limestone, dolomite
rocks etc. Conceptual knowledge is available from the Uni-
versal Classiﬁed Classiﬁcation (UCC) concordances [10] as
UDC2012 (orange), classifying the object with a reference
to the major group UDC:552.4, metamorphic rocks. Here,
e.g., the conceptual knowledge refers to metamorphic rocks.
The object carries multi-lingual instances, English and German
(indicated by %-EN: and %-DE:). This excerpt is instance
number 52. Here, the shown excerpts indicate that instances of
this object entity were created and developed over signiﬁcant
date range. Figure 12 shows a small excerpt of a ϱO collection
object representation.
1
%-EN: marble [Geology, Mineralogy]:
2
%-EN:
Metamorphised_limestone or dolomite with grained-metamorphic
3
%-EN:
fabric. ...
4
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
5
%-EN:
Hymettian_marble : grey, from Pentelikon (Attica), Greece.
6
%-EN:
Karystian_marble : ..., fine-grained, from Euboea, Greece.
7
%-EN:
Parisian_marble : white, medium-grained, from Paros, Greece.
8
%-EN:
Pentelic_marble : ..., from Pentelikon (Attica), Greece.
9
%-EN:
Proconnesian_marble : ..., Greek island of Prokonnesos, ...
10
%-EN:
Carrara_marble : ..., from Luni, Tuscany, Italy. ...
11
%-EN:
%%IML: DateCreated:
1988-12-26:175694 ...
12
%-DE: Marmor [Geologie, Mineralogie]:
13
%-DE:
Metamorphisierte_Kalksteine oder Dolomite mit
14
%-DE:
k¨ornig-metamorphem Gef¨uge. ...
15
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
16
%-DE:
Hymettischer_Marmor : ..., aus Pentelikon (Attika) ...
17
%-DE:
Karystischer_Marmor : ..., von Euboia, Griechenland.
18
%-DE:
Parisischer_Marmor : weiß, mittelk¨ornig, von Paros, Griechenland.
19
%-DE:
Pentelischer_Marmor : ..., aus Pentelikon (Attika), Griechenland.
20
%-DE:
Prokonnesischer_Marmor : ..., griech. Insel Prokonnesos, ...
21
%-DE:
Carrara_Marmor : ..., feink¨ornig, aus Luni, Toscana, Italien. ...
22
%-DE:
Syn: Calcit
:: Kalkspat
23
%-DE:
Syn: Calcit
:: Kanonenspat
24
%-DE:
Syn: bl¨attriger Calcit :: Schieferspat
25
%-DE:
Syn: Nitrocalcit
:: Mauersalz ...
Figure 12. Object instance representation: LX Knowledge Resources KR,
collection object (excerpt).
114
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

The LX Knowledge Resources’ collection object contains
a ‘marble’ and ‘Marmor’ entity (dark green), material com-
ponents (light green), keywords (‘Geology’, ‘Mineralogy’),
conceptual knowledge from Universal Classiﬁed Classiﬁca-
tion (UCC) concordance references as UDC2012 (orange),
classifying the object with a reference to the major group
UDC:552.4, metamorphic rocks.
The representations and highlighting also show the lingual
contexts (violet), e.g., English, dates regarding the object
instance and so on. The collection object carries multi-lingual
instances, English and German (indicated by %-EN: and
%-DE:).
The object instances carry their instance data (cyan). In-
stance representation, e.g., identiﬁcation, is available from the
object and entity instances, Object Envelopes (OEN), [28]. A
larger excerpt of the instance data of the ϱO object is shown
in Figure 13.
1
%-EN:
%%IML: DateCreated:
1988-12-26:175694
2
%-EN:
%%IML: DateModified:
2020-01-01:232927
3
%-EN:
%%IML: ID:
1909042178
4
%-EN:
%%IML: CertificateID:
74581231
5
%-EN:
%%IML: Signature:
DF98_007::...
6
%-EN:
%%IML: SourceReferences: #KR::O
7
%-EN:
%%IML: Instance:
119
8
%-EN:
%%IML: Md5sum:
...
9
%-EN:
%%IML: Sha1sum:
...
Figure 13. Object instance representation: Instance data excerpt of
LX Knowledge Resources collection object (Figure 12).
The excerpt shows creation and modiﬁcation dates, ids,
references, and check sums.
B. Object Creation and Development
The object creation case group (greenish), according to
the KROD Diagram (Figure 10), is represented by following
the developments of object examples presented in the above
resources section. Figure 14 shows a small excerpt of a γC
container object representation.
1
%-EN: \stoentry{marbles}{}
2
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN:
{fine- to coarse-grained}
4
%-EN:
{white, grey, different colour tones}
5
%-EN:
{calcite, dolomite}
6
%-EN:
{mica, quartz}
7
%-EN:
{limestones, dolomite rocks, dolostones}
8
%-EN:
{}
9
%-EN:
%%IML: DateCreated:
1989-01-02:192718
10
%-EN:
%%IML: DateModified:
2020-01-01:225807
11
%-EN:
%%IML: ID:
1910093458
12
%-EN:
%%IML: CertificateID:
75660429
13
%-EN:
%%IML: Signature:
DF98_007::...
14
%-EN:
%%IML: SourceReferences: #KR::C
15
%-EN:
%%IML: Instance:
51
16
%-EN:
%%IML: Md5sum:
...
17
%-EN:
%%IML: Sha1sum:
...
18
%>DE: \stoentry{Marmore}{}
19
%>DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
20
%>DE:
{fein- bis grobk¨ornig}
21
%>DE:
{weiß, grau, verschiedene Farbt¨one}
22
%>DE:
{Calcit, Dolomit}
23
%>DE:
{Glimmer, Quarz}
24
%>DE:
{Kalksteine, Dolomitgesteine}
25
%>DE:
{}
26
%>DE:
...
Figure 14. Object instance representation: Object Creation OC container
object (excerpt).
The OC object illustrates the object creation and devel-
opment process, an update of an existing object on base
of a previously created object instance in the Knowledge
Resources. This excerpt is based on instance number 51,
creating instance number 52 (Figure 11). The excerpt shows
the addition of a language entry to the container. Here, an
entity in German language is added to the object. In this case,
the added material is indicated by line-based blue markers,
%>DE:. Figure 15 shows a small excerpt of a γO collection
object representation.
1
%-EN: marble [Geology, Mineralogy]:
2
%-EN:
Metamorphised_limestone or dolomite with grained-metamorphic
3
%-EN:
fabric. ...
4
%-EN:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
5
%>EN:
Hymettian_marble : grey, from Pentelikon (Attica), Greece.
6
%>EN:
Karystian_marble : ..., fine-grained, from Euboea, Greece.
7
%-EN:
Parisian_marble : white, medium-grained, from Paros, Greece.
8
%-EN:
Pentelic_marble : ..., from Pentelikon (Attica), Greece.
9
%-EN:
Proconnesian_marble : ..., Greek island of Prokonnesos, ...
10
%-EN:
Carrara_marble : ..., from Luni, Tuscany, Italy. ...
11
%-EN:
%%IML: DateCreated:
1988-12-26:175694 ...
12
%-DE: Marmor [Geologie, Mineralogie]:
13
%-DE:
Metamorphisierte_Kalksteine oder Dolomite mit
14
%-DE:
k¨ornig-metamorphem Gef¨uge. ...
15
%-DE:
%%IML: UCC: UDC2012: 552.4 :: Metamorphic_rocks
16
%<DE:
Pentelische_Marmore : ..., aus Pentelikon (Attika) ...
17
%>DE:
Hymettischer_Marmor : ..., aus Pentelikon (Attika) ...
18
%>DE:
Karystischer_Marmor : ..., von Euboia, Griechenland.
19
%-DE:
Parisischer_Marmor : weiß, mittelk¨ornig, von Paros, Griechenland.
20
%-DE:
Pentelischer_Marmor : ..., aus Pentelikon (Attika), Griechenland.
21
%-DE:
Prokonnesischer_Marmor : ..., griech. Insel Prokonnesos, ...
22
%-DE:
Carrara_Marmor : ..., feink¨ornig, aus Luni, Toscana, Italien. ...
23
%>DE:
Syn: Calcit
:: Kalkspat
24
%>DE:
Syn: Calcit
:: Kanonenspat
25
%>DE:
Syn: bl¨attriger Calcit :: Schieferspat
26
%>DE:
Syn: Nitrocalcit
:: Mauersalz ...
Figure 15. Object instance representation: Object Creation OC collection
object (excerpt).
The excerpt shows modiﬁcation of entries in a collection
object. Entries are added (%>EN: and %>DE:, blue colour)
and removed (%<DE:, red colour). The object creation adds
new types of rock in two languages and a number of synonyms,
which are unique to German language. A larger excerpt of the
instance data of the γO object is shown in Figure 16.
1
%-EN:
%%IML: DateCreated:
1988-12-26:175694
2
%<EN:
%%IML: DateModified:
2017-05-30:221532
3
%>EN:
%%IML: DateModified:
2020-01-01:231704
4
%-EN:
%%IML: ID:
1909042178
5
%-EN:
%%IML: CertificateID:
74581231
6
%-EN:
%%IML: Signature:
DF98_007::...
7
%-EN:
%%IML: SourceReferences: #KR::O
8
%<EN:
%%IML: Instance:
118
9
%>EN:
%%IML: Instance:
119
10
%<EN:
%%IML: Md5sum:
...
11
%>EN:
%%IML: Md5sum:
...
12
%<EN:
%%IML: Sha1sum:
...
13
%>EN:
%%IML: Sha1sum:
...
Figure 16. Object instance representation: Instance data excerpt of Object
Creation collection object (Figure 15).
The excerpt in state of development contains references of
instances 118 and 119 of the ϱO object.
VIII.
KNOWLEDGE MINING CASE RESULTS
A. Objects and mining
The Knowledge Mining case group (bluish), according to
the KROD Diagram (Figure 10), is represented by following
the developments of object examples presented in the above
resources and creation/development sections. Figure 17 shows
a small excerpt of a µC container object extract representation.
1
%-EN: Object: marbles
2
%-EN: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN: ObjectTerm: calcite, dolomite, mica, quartz, limestones, dolomite rocks,
dolostones
4
%-EN: ObjectInstance: DateCreated:
1989-01-02:192718
5
%-EN: ObjectInstance: DateModified:
2020-01-01:231704 ...
6
%-DE: Object: Marmore
7
%-DE: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
8
%-DE: ObjectTerm: Calcit, Dolomit, Glimmer, Quarz, Kalksteine, Dolomitgesteine
9
%-DE: ObjectInstance: DateCreated:
1989-01-02:192718
10
%-DE: ObjectInstance: DateModified:
2020-01-01:231704 ...
Figure 17. Object instance representation: Knowledge Mining KM
container object extract (excerpt).
Figure 18 shows a small excerpt of an extracted µO collec-
tion object representation.
115
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

1
%-EN: Object: marble
2
%-EN: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN: ObjectKeyword: Geology, Mineralogy
4
%-EN: ObjectTerm: limestone, dolomite, Hymettian_marble, Karystian_marble,
Parisian_marble, Pentelic_marble, Proconnesian_marble, Carrara_marble, ...
5
%-EN: ObjectPlace: Pentelikon, Attica, Euboea, Paros, Greece, Prokonnesos, Luni,
Tuscany, Italy. ...
6
%-EN: ObjectInstance: DateCreated:
1988-12-26:175694 ...
7
%-DE: Object: Marmor
8
%-DE: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
9
%-DE: ObjectKeyword: Geologie, Mineralogie
10
%-DE: ObjectTerm: Kalksteine, Dolomite, Calcit, Kalkspat, Kanonenspat,
bl¨attriger Calcit, Schieferspat, Nitrocalcit, Mauersalz, Hymettischer_Marmor,
Karystischer_Marmor, Parisischer_Marmor, Pentelischer_Marmor,
Prokonnesischer_Marmor, Carrara_Marmor, ...
11
%-DE: ObjectPlace: Pentelikon, Attika, Euboia, Paros, Pentelikon, Attika,
Griechenland, Prokonnesos, Luni, Toscana, Italien, ...
12
%-DE: ObjectInstance: DateCreated:
1988-12-26:175694 ...
Figure 18. Object instance representation: Knowledge Mining KM
collection object extract (excerpt).
A larger excerpt of the instance data of the extract µO object
is shown in Figure 19.
1
%-EN:
%%IML: DateCreated:
1988-12-26:175694
2
%-EN:
%%IML: DateModified:
2020-01-01:232927
3
%-EN:
%%IML: ID:
1909042178
4
%-EN:
%%IML: CertificateID:
74581231
5
%-EN:
%%IML: Signature:
DF98_007::...
6
%-EN:
%%IML: SourceReferences: #KR::O
7
%-EN:
%%IML: Instance:
119 [extract]
8
%-EN:
%%IML: Md5sum:
...
9
%-EN:
%%IML: Sha1sum:
...
Figure 19. Object instance representation: Instance data excerpt of
Knowledge Mining collection object extract (Figure 18).
The purpose of intermediate results in a universal context
is to provide a high ﬂexibility and modularity in workﬂows.
It must be possible to create and re-use algorithms, which are
taking care for arbitrary scenarios. An integrated intermediate
result of such case, a resource request on ‘marble’, creating
an intermediate result including object instances from µO and
µC, is displayed in Figure 20.
1
%-EN: Object: marble, marbles
2
%-EN: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
3
%-EN: ObjectKeyword: Geology, Mineralogy
4
%-EN: ObjectTerm: limestone, dolomite, calcite, mica, quartz, limestones,
dolomite rocks, dolostones, Hymettian_marble, Karystian_marble, Parisian_marble
, Pentelic_marble, Proconnesian_marble, Carrara_marble, ...
5
%-EN: ObjectPlace: Pentelikon, Attica, Euboea, Paros, Greece, Prokonnesos, Luni,
Tuscany, Italy, ...
6
%-EN: ObjectInstance: SourceReferences: #KR::C::1910093458::52 #
KR::O::1909042178::119
7
%-DE: Object: Marmor, Marmore
8
%-DE: ObjectConceptual: UDC2012: 552.4 :: Metamorphic_rocks
9
%-DE: ObjectKeyword: Geologie, Mineralogie
10
%-DE: ObjectTerm: Kalksteine, Dolomite, Dolomit, Calcit, Glimmer, Quarz,
Kalksteine, Dolomitgesteine, Kalkspat, Kanonenspat, bl¨attriger Calcit,
Schieferspat, Nitrocalcit, Mauersalz, Hymettischer_Marmor, Karystischer_Marmor,
Parisischer_Marmor, Pentelischer_Marmor, Prokonnesischer_Marmor,
Carrara_Marmor, ...
11
%-DE: ObjectPlace: Pentelikon, Attika, Euboia, Paros, Griechenland, Prokonnesos,
Luni, Toscana, Italien, ...
12
%-DE: ObjectInstance: SourceReferences: #KR::C::1910093458::52 #
KR::O::1909042178::119
Figure 20. Object instance representation: Knowledge Mining
intermediate result from objects’ extracts (excerpt).
This excerpt is only one of many possible, different intermedi-
ate results. The algorithms of creating intermediate results al-
low arbitrary integration and formalisation, abstraction, reduc-
tion. Any available methods can contribute, including mining
algorithms, knowledge mapping, and phonetic selection. This
example of an integrated intermediate result contains struc-
tured information from multi-lingual object entities, material,
and location information, from both collection and container
objects. The intermediate result resulting from the mining
process is integrating knowledge from both multi-lingual col-
lection and container instances (#KR::C::1910093458::52
and #KR::O::1909042178::119), as referring to the previ-
ously shown instances 52 of the ϱC object and 119 of the
ϱO object. Here, the excerpt shows references from a stones
container and a geoscientiﬁc collection. Further width and
depth of integrated knowledge in this context can include any
multi-disciplinary references, e.g., references can range from
mineralogy containers to geoscientiﬁc synonym containers.
IX.
DISCUSSION
The continuous object development and knowledge min-
ing cases results were efﬁciently and effectively supported
deploying the features provided by the object development
architecture and functions.
•
Development of resources and objects were successfully
implemented and demonstrated for object groups in
collections and containers.
•
Object structures have shown to allow highest ﬂexibility.
All components support multi-disciplinary knowledge
objects. All groups and objects allow ﬂexible object and
context references, support of knowledge complements,
e.g., conceptual knowledge via UDC, and support multi-
lingual content and access.
•
All components can ensure consistency of resources,
object re-use, advanced knowledge mining, creation and
deployment of algorithms, and object integration.
•
The fundamental, universal framework is already suc-
cessfully developed and used in practice for many years
before publication.
The knowledge-centric architecture proved being a ﬂexible,
reliable, and robust fundament for object creation and develop-
ment as well as for advanced knowledge mining, managing and
using LX Knowledge Resources objects’ collections and con-
tainers for many years. The architecture provides the ﬂexibility
that workﬂow chain modules and whole workﬂow chains can
be employed sequential or parallel. The components in general
are not limited by the architecture to be implemented for
synchronous or asynchronous accesses if required for arbitrary
algorithms and workﬂows.
The implementations for practical case studies built upon
this architecture span different disciplines and deal with differ-
ent foci. The excerpted cases include general, simpliﬁed cases
of knowledge mining and practical knowledge development
scenarios from realisations, which were implemented for large
practical solutions. These cases are relevant because of the
professional background and practice required to deal with
development of resources and application components for
long-term tasks.
In complex scenarios, different disciplines contribute ful-
ﬁlling different tasks. In case of knowledge creation and
development and its valorisation different specialised expertise
is required. In general, content and applications are created
by different disciplines. Even different aspects of content may
require different specialists groups, different roles, e.g., natural
sciences research data and conceptual valorisation are often
done by scientists from a respective discipline and information
scientists. Many components have to be revisited and improved
over time as the results and facilities should be continued and
preserved and be available for long-term. In the implementa-
tion cases, factual, conceptual, procedural, and metacognitive
knowledge is cared for by different experts. The architecture
allows ﬂexible and efﬁcient separation of roles. For example,
research data can be created by a role and can at any time be
116
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

amended with classiﬁcation and procedural documentation by
experienced research library specialist and researcher roles.
The LX Knowledge Resources are containing a lot more
content and references than can be used at present time in
most cases. The architecture allowed to support retaining
the associated knowledge required to resemble the intrinsic
complexity of realia situations while implementing selected
solutions for isolated as well as complex situations. The
development of knowledge mining and the provisioning of
services based on these tasks can continuously be done by
application developers, accessing the continuously extendable
LX Knowledge Resources.
X.
CONCLUSION
This paper presented a knowledge resources’ view on object
development based on a new knowledge-centric architecture.
The paper presented the architecture and discussed two suc-
cessfully implemented major use-cases, object development
and knowledge mining. The implementation supports all the
features, which were targeted and should be provided regarded
the architecture and object development.
Knowledge resource object development and respective ob-
ject instance representation for resources, object creation and
development, and knowledge mining were presented for differ-
ent types of object groups, namely collections and containers.
The paper presented consistent view on activities and real
object instances from use-case scenarios in context with the
research results of creating a knowledge-centric computa-
tion architecture. The resulting architecture was developed
in continuous cross development of multi-disciplinary, multi-
lingual knowledge resources and practical knowledge-centric
solutions. This paper presented the major qualities of the
computation architecture. The practical employment of the
architecture was illustrated for advanced knowledge mining
and practical development uses-cases. The contributing re-
search collaboration achieved to create a practical approach
for a knowledge-centric computation architecture, which al-
lows the methodological and systematical development and
employment of components, including knowledge resources.
The architecture covers the creation of ﬂexible solutions, which
allow to most widely employ the complements of knowledge.
The long-term knowledge resource scenarios and the
knowledge-centric architecture and use-cases proved in prac-
tice to support the object development, the seamless separation
and integration of roles for different disciplines and tasks while
implementing and realising solutions based on knowledge
resources and computation. In addition to the implemented and
referred case studies, it was shown that object development and
major use-cases can be efﬁciently managed. Especially, on the
one hand, knowledge creation and development can be profes-
sionally dealt with by groups from responsible disciplines. On
the other hand, knowledge mining can be based on the work of
these disciplines while service based use and implementation
can be given different roles, relying on the resources being
continuously in development.
Future research will concentrate on further extending and
developing knowledge resources in order to foster the creation
of content bases and to provide long-term capacities and
creating new advanced algorithms and mining workﬂows for
enabling fundaments for new insight, participating different
institutions and roles, based on the knowledge-centric compu-
tation architecture and knowledge resources.
ACKNOWLEDGMENT
We are grateful to the “Knowledge in Motion” (KiM)
long-term project, Unabh¨angiges Deutsches Institut f¨ur Multi-
disziplin¨are Forschung (DIMF), for partially funding imple-
mentations, case studies, publications, and for granting access
to LX Knowledge Resources under grants D2016F5P04648,
D2017F1P04812, and D2018F6P04938 and to its senior sci-
entiﬁc members and members of the permanent commission
of the science council and the board of trustees, especially
to Dr. Friedrich H¨ulsmann, Gottfried Wilhelm Leibniz Bib-
liothek (GWLB) Hannover, to Dipl.-Biol. Birgit Gersbeck-
Schierholz, Leibniz Universit¨at Hannover, to Dipl.-Ing. Martin
Hofmeister, Hannover, and to Olaf Lau, Hannover, Germany,
for collaboration, practical multi-disciplinary case studies, and
the analysis and implementation of advanced concepts. We are
grateful to Dipl.-Ing. Hans-G¨unther M¨uller, HPE, Germany, for
his excellent contributions and assistance, providing practical
private cloud and storage solutions. We are grateful to all
national and international partners in the Geo Exploration
and Information cooperations for their constructive and trans-
disciplinary support. We are grateful to the Science and High
Performance Supercomputing Centre (SHPSC) for long-term
support and The International ARS Science and History Net-
work for providing multi-disciplinary application scenarios and
assistance. / DIMF-PIID-DF98 007.
REFERENCES
[1]
C.-P. R¨uckemann, “A Knowledge-centric Computation Architecture and
the Case of Knowledge Mining,” in Proceedings of The Ninth Inter-
national Conference on Advanced Communications and Computation
(INFOCOMP 2019), July 28 – August 1, 2019, Nice, France.
XPS
Press, Wilmington, Delaware, USA, 2019, pp. 35–40, ISSN: 2308-3484,
ISBN: 978-1-61208-732-0, URL: http://www.thinkmind.org/index.php?
view=article&articleid=infocomp 2019 3 20 60044 [accessed: 2020-
05-02].
[2]
Aristotle, Nicomachean Ethics, 2008, (Written 350 B.C.E.), Translated
by W. D. Ross, Provided by The Internet Classics Archive, URL: http:
//classics.mit.edu/Aristotle/nicomachaen.html [accessed: 2020-05-02].
[3]
Aristotle, The Ethics of Aristotle, 2005, Project Gutenberg, eBook,
EBook-No.: 8438, Release Date: July, 2005, Digitised Version of the
Original Publication, Produced by Ted Garvin, David Widger, and
the DP Team, Edition 10, URL: http://www.gutenberg.org/ebooks/8438
[accessed: 2020-05-02].
[4]
L. W. Anderson and D. R. Krathwohl, Eds., A Taxonomy for Learning,
Teaching, and Assessing: A Revision of Bloom’s Taxonomy of Educa-
tional Objectives.
Allyn & Bacon, Boston, MA (Pearson Education
Group), USA, 2001, ISBN-13: 978-0801319037.
[5]
Plato, Phaedo, 2008, (Written 360 B.C.E.), Translated by Benjamin
Jowett, Provided by The Internet Classics Archive, URL: http://classics.
mit.edu/Plato/phaedo.html [accessed: 2020-05-02].
[6]
C.-P. R¨uckemann and F. H¨ulsmann, “Signiﬁcant Differences: Method-
ologies and Applications,” KiMrise, Knowledge in Motion Meeting,
November 27, 2017, Knowledge in Motion, Hannover, Germany, 2017.
[7]
C.-P. R¨uckemann, “Methodology of Knowledge Mapping for Arbitrary
Objects and Entities: Knowledge Mining and Spatial Representations
– Objects in Multi-dimensional Context,” in Proceedings of The
Tenth International Conference on Advanced Geographic Information
Systems, Applications, and Services (GEOProcessing 2018), March
25 – 29, 2018, Rome, Italy.
XPS Press, Wilmington, Delaware,
USA, 2018, pp. 40–45, ISSN: 2308-393X, ISBN-13: 978-1-61208-617-
0, URL: http://www.thinkmind.org/index.php?view=article&articleid=
geoprocessing 2018 3 20 30078 [accessed: 2020-05-02].
117
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

[8]
C.-P. R¨uckemann, “Creation of Objects and Concordances for Knowl-
edge Processing and Advanced Computing,” in Proceedings of The
Fifth International Conference on Advanced Communications and Com-
putation (INFOCOMP 2015), June 21–26, 2015, Brussels, Belgium.
XPS Press, 2015, ISSN: 2308-3484, ISBN-13: 978-1-61208-416-
9, URL: http://www.thinkmind.org/index.php?view=article&articleid=
infocomp 2015 4 30 60038 [accessed: 2020-05-02].
[9]
C.-P. R¨uckemann, “Advanced Association Processing and Computation
Facilities for Geoscientiﬁc and Archaeological Knowledge Resources
Components,” in Proceedings of The Eighth International Conference
on Advanced Geographic Information Systems, Applications, and Ser-
vices (GEOProcessing 2016), April 24 – 28, 2016, Venice, Italy.
XPS Press, 2016, pp. 69–75, ISSN: 2308-393X, ISBN-13: 978-1-
61208-469-5, URL: http://www.thinkmind.org/download.php?articleid=
geoprocessing 2016 4 20 30144 [accessed: 2020-05-02].
[10]
C.-P. R¨uckemann, “Advanced Knowledge Discovery and Computing
based on Knowledge Resources, Concordances, and Classiﬁcation,” In-
ternational Journal On Advances in Intelligent Systems, vol. 9, no. 1&2,
2016, pp. 27–40, ISSN: 1942-2679, URL: http://www.iariajournals.org/
intelligent systems/intsys v9 n12 2016 paged.pdf
[accessed:
2020-
05-02].
[11]
“Perl Compatible Regular Expressions (PCRE),” 2020, URL: https://
www.pcre.org/ [accessed: 2020-05-02].
[12]
C.-P. R¨uckemann, “Archaeological and Geoscientiﬁc Objects used
with Integrated Systems and Scientiﬁc Supercomputing Resources,”
International
Journal
on
Advances
in
Systems
and
Measure-
ments,
vol.
6,
no.
1&2,
2013,
pp.
200–213,
ISSN:
1942-
261x, URL: http://www.iariajournals.org/systems and measurements/
sysmea v6 n12 2013 paged.pdf [accessed: 2020-05-02].
[13]
C.-P. R¨uckemann, “Multi-dimensional Context Creation Based on the
Methodology of Knowledge Mapping,” International Journal on Ad-
vances in Software, vol. 11, no. 3&4, 2018, pp. 286–298, ISSN: 1942-
2628, URL: http://www.iariajournals.org/software/soft v11 n34 2018
paged.pdf [accessed: 2020-05-02].
[14]
C.-P. R¨uckemann, “Superordinate Knowledge Based Comprehen-
sive Subset of Conceptual Knowledge for Practical Geo-spatial
Application Scenarios,” in Proceedings of The Eleventh Interna-
tional Conference on Advanced Geographic Information Systems,
Applications, and Services (GEOProcessing 2019), February 24 –
28, 2019, Athens, Greece.
XPS Press, Wilmington, Delaware,
USA, 2019, pp. 52–58, ISSN: 2308-393X, ISBN: 978-1-61208-687-
3, URL: http://www.thinkmind.org/index.php?view=article&articleid=
geoprocessing 2019 3 30 30039 [accessed: 2020-05-02].
[15]
UDC, Universal Decimal Classiﬁcation.
British Standards Institute
(BSI), 2005, complete Edition, ISBN: 0-580-45482-7, Vol. 1 and 2.
[16]
C.-P. R¨uckemann, “Enabling Dynamical Use of Integrated Systems and
Scientiﬁc Supercomputing Resources for Archaeological Information
Systems,” in Proceedings of the International Conference on Advanced
Communications and Computation (INFOCOMP 2012), October 21–
26, 2012, Venice, Italy, 2012, pp. 36–41, ISBN: 978-1-61208-226-
4, URL: http://www.thinkmind.org/download.php?articleid=infocomp
2012 3 10 10012 [accessed: 2020-05-02].
[17]
“Multilingual Universal Decimal Classiﬁcation Summary,” 2012, UDC
Consortium, 2012, Web resource, v. 1.1. The Hague: UDC Consortium
(UDCC Publication No. 088), URL: http://www.udcc.org/udcsummary/
php/index.php [accessed: 2020-05-02].
[18]
“UDC Online,” 2020, URL: http://www.udc-hub.com [accessed: 2020-
05-02].
[19]
“Creative Commons Attribution Share Alike 3.0 license,” 2012, URL:
http://creativecommons.org/licenses/by-sa/3.0/ [accessed: 2020-05-02].
[20]
B. Oestereich and A. Scheithauer, Analyse und Design mit der UML
2.5: Objektorientierte Softwareentwicklung (in English: Analysis and
Design With the UML 2.5: Object-oriented Software Development),
11th ed.
De Gruyter Oldenbourg, 2013, ISBN: 978-3486721409.
[21]
“Uniﬁed Modeling Language (UML),” 2020, URL: http://uml.org/ [ac-
cessed: 2020-05-02].
[22]
“About the Uniﬁed Modeling Language Speciﬁcation 2.5.1,” Dec. 2017,
OMG – Object Management Group, URL: https://www.omg.org/spec/
UML/ [accessed: 2020-05-02].
[23]
“The Perl Programming Language,” 2020, URL: https://www.perl.org/
[accessed: 2020-05-02].
[24]
R. C. Russel and M. K. Odell, “U.S. patent 1261167,” 1918, (Soundex
algorithm), patent issued 1918-04-02.
[25]
D. E. Knuth, The Art of Computer Programming: Sorting and Search-
ing. Addison-Wesley, 1973, vol. 3, ISBN: 978-0-201-03803-3, OCLC:
39472999, pp. 391–392.
[26]
National Archives and Records Administration (NARA), “The Soundex
Indexing System,” 2007, 2007-05-30, URL: http://www.archives.gov/
research/census/soundex.html [accessed: 2020-05-02].
[27]
C.-P. R¨uckemann, “Integration of Knowledge Resources and Advanced
Association Processing for Geosciences and Archaeology,” International
Journal on Advances in Systems and Measurements, vol. 9, no. 3&4,
2016, pp. 485–495 ISSN: 1942-261x, URL: http://www.iariajournals.
org/systems and measurements/sysmea v9 n34 2016 paged.pdf [ac-
cessed: 2020-05-02].
[28]
C.-P. R¨uckemann, “High End Computing Using Advanced Archae-
ology and Geoscience Objects,” International Journal On Advances
in Intelligent Systems, vol. 6, no. 3&4, 2013, ISSN: 1942-2679,
LCCN: 2008212456, URL: http://www.iariajournals.org/intelligent
systems/intsys v6 n34 2013 paged.pdf [accessed: 2020-05-02].
118
International Journal on Advances in Intelligent Systems, vol 13 no 1 & 2, year 2020, http://www.iariajournals.org/intelligent_systems/
2020, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

