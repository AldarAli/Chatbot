162
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Secure Video for Android Devices 
 
Raimund K. Ege 
Department of Computer Science 
Northern Illinois University 
DeKalb, IL 60115, USA 
ege@niu.edu
 
Abstract—Android is rapidly gaining market share 
among smart phones with high-speed next-generation 
Internet connectivity. A whole new generation of users is 
consuming rich content that requires high throughput. 
Applications like FaceBook and YouTube have reached 
mobile devices. Multimedia data, i.e. video, is becoming 
easily accessible: large multi-media files are being 
routinely downloaded. Peer to-peer content delivery is 
one way to ensure the volume that can be efficiently 
delivered. However, the openness of delivery demands 
adaptive and robust management of intellectual property 
rights. In this paper we describe a framework and its 
implementation to address the central issues in content 
delivery: a scalable peer-to-peer-based content delivery 
model, paired with a secure access control model that 
enables data providers to reap a return from making 
their 
original 
content 
available. 
Our 
prototype 
implementation for the Android platform for mobile 
phones is described in detail. 
 
Keywords-broadband 
video 
sharing; 
peer-to-peer 
content delivery; access control; Android video client 
 
 
I. 
INTRODUCTION 
 
The Apple iPhone, and now increasingly Android-
based smart phones, have ushered in a new era in 
omni-present broadband media consumption. Services 
such as iTunes, YouTube, Joost and Hulu are 
popularizing delivery of audio and video content to 
anybody with a broadband Internet connection. High 
bandwidth internet connectivity is no longer limited to 
reaching PCs and laptops: a new generation of devices, 
such as netbooks and smart phones, is within reach of 
3G/4G telecommunication networks.  
In this paper we describe a new “app” for Android 
phones that delivers video in a secure and managed 
way. Figure 1 shows a screenshot of the Android home 
screen featuring our new Oghma secure multi-media 
delivery “app.” 
Delivering 
multimedia 
services 
has 
many 
challenges: the ever increasing size of the data requires 
elaborate delivery networks to handle peek network 
traffic. Another challenge is to secure and protect the 
property rights of the media owners. A common 
approach to large-scale distribution is a peer-to-peer 
model, where clients that download data immediately 
become intermediates in a delivery chain to further 
clients. The dynamism of peer-to-peer communities 
means that principals who offer services will meet 
requests from unrelated or unknown peers. Peers need 
to collaborate and obtain services 
within 
an 
environment that is unfamiliar or even hostile.  
 
  
Figure 1. Oghma on Android Home Screen 
Therefore, peers have to manage the risks involved 
in the collaboration when prior experience and 
knowledge about each other are incomplete. One way 

163
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
to address this uncertainty is to develop and establish 
trust among peers. Trust can be built by either a trusted 
third party [2] or by community-based feedback from 
past experiences [3] in a self-regulating system. 
Conventional approaches rely on well-defined access 
control models [4] [5] that qualify peers and determine 
authorization based on predefined permissions. In such 
a complex and collaborative world, a peer can benefit 
and protect itself only if it can respond to new peers 
and enforce access control by assigning proper 
privileges to new peers.  
The general goal of our work is to address the trust 
in peers which are allowed to participate in the content 
delivery process, to minimize the risk and to maximize 
the reward garnered from releasing data in to the 
network. In our prior work [9][15] we focused on 
modeling the nature of risk and reward when releasing 
content to the Internet. We integrated trust evaluation 
for usage control with an analysis of risk and reward. 
Underlying our framework is a formal computational 
model of trust and access control. In the work reported 
here we focus on the implementation aspects of the 
framework. 
Our paper is organized as follows: the next section 
will elaborate on how the data provider and its peers 
can quantify gain from participating in the content 
delivery. It also explains our risk/reward model that 
enables a data source to initially decide on whether to 
share the content and keep some leverage after its 
release. Section III describes our prototype architecture 
that is based on a bittorrent-style of peer-to-peer 
content delivery. A central tracker manages peers and 
maintains a database of trust information. Peers can 
serve both as source and as consumer of data. Section 
IV introduces our prototype client for the Android 
platform. Section V elaborates on details of the Java 
implementation of the tracker, source and peer 
processes. Data is exchanged using the Stream Control 
Transmission Protocol (SCTP) which improves over 
the current standard-bearers Transmission Control 
Protocol (TCP) and User Datagram Protocol (UDP) for 
multi-stream session-oriented delivery of large multi-
media files over fast networks. Data is secured using a 
PKI-style exchange of public keys and data encryption. 
The paper concludes with our perspective on how 
modern content delivery approaches will usher in a 
new generation of Internet applications. 
An earlier version of this paper appeared in the 
Proceedings of the Fifth International Conference on 
Systems (ICONS 2010) [1].  
 
 
II. 
UNITS OF RISK AND REWARD 
 
We assume that the data made available at the 
source has value. Releasing the data to the Internet 
carries potential for reaping some of the value, but also 
carries the risk that the data will be consumed without 
rewarding the original source. There is also a cost 
associated with releasing the data, i.e. storage and 
transmission cost. For example, consider a typical 
“viral” video found on YouTube.com: the video is 
uploaded onto YouTube.com for free, stored and 
transmitted by YouTube.com and viewed by a large 
audience. The only entity that is getting rewarded is 
YouTube.com, which will accompany the video 
presentation with paid advertising. The person that 
took the video and transferred it to YouTube.com has 
no reward: the only benefit that the original source of 
the video gets is notoriety. 
In order to provide a model or framework to asses 
risk and reward, we need to quantize aspects of the 
information interchange between the original source, 
the transmitting medium and the final consumer of the 
data. In a traditional fee for service model the reward 
“R” to the source is the fee “F” paid by the consumer 
minus the cost “D” of delivery: 
          
The cost of delivery “D” consist of the storage cost at 
the server, and the cost of feeding it into the Internet. 
In the case of YouTube, considerable cost is incurred 
for providing the necessary server network and their 
bandwidth to the Internet. YouTube recovers that cost 
by adding paid advertising on the source web page as 
well as adding paid advertising onto the video stream. 
YouTube’s business model recognizes that these paid 
advertisings represent significant added value.  As 
soon as we recognize that the value gained is not an 
insignificant amount, the focus of the formula shifts 
from providing value to the original data source to the 
reward that can be gained by the transmitter. If we 
quantify the advertising reward as “A” the formula 
now becomes: 
                
Even in this simplest form, we recognize that “A” has 
the potential to outweigh “D” and therefore reduce the 
need for “F”. As YouTube recognizes, the reward lies 
in “A”, i.e. paid ads that accompanies the video.  
In some of our prior work [8] we focused on 
mediation frameworks that capture the mutative nature 
of data delivery on the Internet. As data travels from a 
source to a client on lengthy path, each node in the 
path may act as mediator. A mediator transforms data 
from an input perspective to an output perspective. In 
the simplest scenario, the data that is fed into the 
delivery network by the source and is received by the 
ultimate client unchanged: i.e. each mediator just 

164
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
passes its input data along as output data. However, 
that is not the necessary scenario anymore: the great 
variety of client devices already necessitate that the 
data is transformed to enhance the client’s viewing 
experience. We apply this mediation approach to each 
peer on the path from source to client. Each peer may 
serve as a mediator that transforms the content stream 
in some fashion. Our implementation employs the 
stream control transmission protocol (SCTP) which 
allows multi-media to be delivered in multiple 
concurrent streams. All a peer needs to do is add an 
additional stream for a video overlay message to the 
content as it passes through. 
The formula for reward can now be extended into 
the P2P content delivery domain, where a large number 
of peers serve as the transmission/storage medium. 
Assuming “n” number of peers that participate and 
potentially add value the formula for the reward per 
peer is now: 
p
i
i
n
i
i
p
F
A
D
F
R





)
(
(
1
 
 
   and    are now the delivery cost and value incurred 
at each peer that participates in the P2P content 
delivery.    is the fee potentially paid by each peer.    
is the fee paid to the data source provider. Whether or 
not the data originator will gain any reward depends on 
whether the client and the peers are willing to share 
their gain from the added value. In a scenario where 
clients and peers are authenticated and the release of 
the data is predicated by a contractual agreement, the 
source will reap the complete benefit. 
In our model we quantify the certainty of whether 
the client and peers will remit their gain to the source 
with a value of trust “T”: T represents the trust in the 
client that consume that data, T represents the trust in 
each peer that participates in the content delivery. The 
trust is evaluated based on both actual observations and 
recommendations from referees. Observations are 
based on previous interactions with the peer. 
Recommendations may include signed trust-assertions 
from other principals, or a list of referees that can be 
contacted for recommendations. The trust value, 
calculated from observations and recommendations, is 
a value within the [0, 1] interval evaluated for each 
peer that requests to be part of the content delivery. 
Our model enables an informed decision on whether 
to accept a new peer based on the potential additional 
reward gained correlated to the risk/trust encumbered 
by the new peer.  
 
 
III. 
PROTOTYPE ARCHITECTURE 
 
Peer-to-peer (P2P) delivery of multimedia aims to 
deliver multi-media content from a source to a large 
number of clients. For our framework, we assume that 
the content comes into existence at a source. A simple 
example of creating such multimedia might be a video 
clip taken with a camera and a microphone, or more 
likely video captured via a cell phone camera, and then 
transferred to the source. Likewise the client consumes 
the content, e.g. by displaying it on a computing device 
monitor, which again might be a smart phone screen 
watching a YouTube video. We further assume that 
there is just one original source, but that there are many 
clients that want to receive the data. The clients value 
their viewing experience, and our goal is to reward the 
source for making the video available. 
In a P2P delivery approach, each client participates 
in the further delivery of the content. Each client 
makes part or all of the original content available to 
further clients. The clients become peers in a peer-to-
peer delivery model. Such an approach is specifically 
geared towards being able to scale effortlessly to 
support millions of clients without prior notice, i.e. be 
able to handle a “mob-like” behavior of the clients.  
The exact details of delivery may depend on the 
nature of the source data: for example, video data is 
made available at a preset quality using a variable-rate 
video encoder. The source data stream is divided into 
fixed length sequential frames: each frame is identified 
by its frame number. Clients request frames in 
sequence, receive the frame and reassemble the video 
stream which is then displayed using a suitable video 
decoder and display utility. The video stream is 
encoded in such a fashion that missing frames don’t 
prevent a resulting video to be shown, but rather a 
video of lesser bit-rate encoding, i.e. quality, will result 
[7]. We explicitly allow the video stream to be quite 
malleable, i.e. the quality of delivery need not be 
constant and there is no harm if extra frames find their 
way into the stream. It is actually a key element of our 
approach that the stream can be enriched as part of the 
delivery process. 
In our approach, multi-media sources are advertised 
and made available via a central tracking service: at 
first, this tracker only knows the network location of 
the source server. Clients that want to access the source 
do so via the tracker: they contact the tracker, which 
will respond with the location of the source. The 
tracker will also remember (or track) the clients as 
potential new sources of the data. Subsequent client 
requests to the tracker are answered with all known 
locations of sources: the original and the known 
clients. Clients that receive locations of sources from 
the tracker issue frame requests immediately to all 

165
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
 
 
sources. As the sources deliver frames to a client, the 
client stores them. The client then assumes a server 
role and also answers requests for frames that they 
have received already, which will enable a cascading 
effect, which establishes a P2P network where each 
client is a peer. Every client constantly monitors the 
rate of response it gets from the sources and adjusts its 
connections to the sources from which the highest 
throughput rate can be achieved.  
Figure 2 shows an example snapshot of a content 
delivery network with one source, one tracker, 2 
intermediate peers and one client. The source is where 
the video data is produced, encoded and made 
available. The tracker knows the network location of 
the source. Clients connect to the tracker first and then 
maintain sessions for the duration of the download: the 
2 peers and the single client maintain an active 
connection to the tracker. The tracker informs the peers 
and client which source to download from: peer 1 is 
fed directly from the source; peer 2 joined somewhat 
later and is now being served from the source and peer 
1; the client joined last and is being served from peer 1 
and peer 2. In this example, peer 1 and 2 started out as 
clients, but became peers once they had enough data to 
start serving as intermediaries on the delivery path 
from original source to ultimate client.  
 
 
 
IV. 
ANDROID CLIENT 
 
We chose the new and emerging Android platform 
to implement a proof-of-concept client for a mobile 
device. Android is part of the Open Handset Alliance 
[10]. Android is implemented in Java and therefore 
offers a flexible and standard set of communication 
and security features.  
Figures 3, 4, 5 and 6 show four sample screen shots 
taken from the Android system. It shows our Oghma 
Secure P2P media client. Figure 3 shows the login 
screen to our Oghma mobile client. It uses OpenID[6] 
user credentials and allows to establish a connection to 
a tracker URL.  
Once the tracker has authenticated the new client it 
will respond with a list of available video streams 
(Figure 4). After the user has made a selection, the 
screen shown in Figure 5 appears. Once a sufficient 
read-ahead buffer has been accumulated, the video 
stream starts playing on the Android device (Figure 6). 
 
 
tracker 
Figure 2. P2P Content Delivery Network 
source 
peer 2 
peer 3 
peer 1 

166
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
 
Figure 3. Oghma Login Screen 
 
 
Figure 5. Video download is starting 
 
        Figure 4. Oghma Stream Selection Screen 
  
       Figure 6. Oghma Video Delivery Screen

167
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
 
 
 
 
Figure 7. Tracker maintains peer database 
 
 
V. 
IMPLEMENTATION DETAIL 
 
Our implementation framework features 3 types of 
participants: 
A. tracker, where all information on the current status 
of the content delivery network is maintained and 
all access decisions are made. 
B. source, where the data is available for further 
dissemination. The original source is the first 
source. Peers that have downloaded and consumed 
the data can become new sources. 
C. client, where the consumption of the data occurs. 
 
A. Tracker 
 
The core of the content delivery model is the tracker. 
The tracker knows the location of the original/first 
source. The tracker maintains a database of peer 
information: each peer is authenticated with an OpenID 
and carries historical data on past peer behavior.  
Peers that wish to participate in the content 
delivery must first locate the tracker. A peer will start 
by establishing a connection to a tracker. Peers use 
their openID and password to login to the tracker. The 
peer will transmit its public key to the tracker, which 
will consider the request from a new peer and gather 
the necessary data on the trust in the new peer. If the 
peer is new and not yet listed in the tracker(s) database, 
then a new entry is created.  
Figure 7 shows the tracker’s graphical user 
interface: the center of the screen shows peers that 
have been accepted into the P2P content delivery 
network; the bottom of the screen shows a log of 
access requests from other peers. Figure 8 shows the 
security information, i.e. the public key, for the peer 
with openId “RaimundEge@gmail.com.” 
 

168
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
 
Figure 8. Security information 
 
B. Source 
 
At least one source must exist for the content delivery 
network to get started. The source first establishes 
contact with the tracker. It generates a PKI [11] 
public/private key par and transmits its public key to 
the tracker. It then stands ready for data requests from 
clients. If a request from a client is received, it requests 
the client’s public key from the tracker and uses a 
Diffie-Hellman key agreement algorithm [12] to 
produce a session key. The session is then used by the 
source to encrypt all data that is sent to the client. 
 
C. Client 
 
The key to a smooth scaling of this ad-hoc p2p 
network is the algorithm used by the client to request 
frames from a source (either the original source or 
another client). A client consists of three processes:  
 
1) a process to communicate with the tracker. The 
client initiates the negotiation with the tracker to 
enable the tracker’s decision on whether the peer 
is admitted into the content delivery network. 
Upon success, the tracker informs the client which 
sources the client should use accompanied by their 
public keys. The client will update the tracker on 
its success in downloading the source data;  
2) a process to request data from the given sources. 
Fragments or frames may be requested from 
multiple sources. Frames that are received are 
decrypted using a session key that is established 
via a key agreement using the public key of the 
data source. 
3) a process to sequence the frames/fragments 
received from sources and to assemble them into a 
usable media stream. 
 
Our prototype uses the Java implementation [13] of the 
SCTP [14] transport layer protocol. SCTP is serving in 
a similar role as the popular TCP and UDP protocols. 
It provides some of the same service features of both, 
ensuring reliable, in-sequence transport of messages 
with congestion control. We chose SCTP because of its 
ability to deliver multimedia in multiple streams. Once 
a client has established a SCTP association with a 
server, packages can be exchanged with high speed and 
low latency. Each association can support multiple 
streams, where the packages that are sent within one 
stream are guaranteed to arrive in sequence. Each 

169
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
source can divide the original video stream into set of 
streams meant to be displayed in an overlay fashion. 
Streams can be arranged in a way that the more 
streams are fully received by a client, the better the 
viewing quality will be. When sending a packet over a 
SCTP channel we need to provide an instance of the 
MessageInfo class, which specifies which stream the 
packet belongs to. The first stream is used to deliver a 
basic low quality version of the video stream. The 
second and consecutive streams will carry frames that 
are overlaid onto the primary stream for the purpose of 
increasing the quality. In our framework we also use 
the additional streams to carry content that is “added 
value”, such as advertising messages or identifying 
logos. The ultimate client that displays the content to a 
user will combine all streams into one viewing 
experience.  
The second feature of SCTP we use is its new class 
“SctpMultiChannel” which can establish a one-to-
many association for a single server to multiple clients. 
The SctpMultiChannel is able to recognize which 
client is sending a request and enables that the response 
is sent to that exact same client. This is much more 
efficient than a traditional “server socket” which for 
each incoming request spawns a subprocess with its 
own socket to serve the client. Figure 9 shows the Java 
source code where an incoming request is received. 
Each packet that is received on the channel carries a 
MessageInfo object which contains information on the 
actual client that is the actual other end point of this 
association. The Java code on line 06 retrieves the 
“association” identity from the incoming message 
“info” instance. The association is then used to send 
the response via the same SctpMultiChannel instance 
but only to the actual client that had requested the 
frames. The code on line 17 shows that a new outgoing 
message info instance is created for the same 
“association” that carried the incoming request. The 
message info instance is then used to send the response 
packet 
to 
the 
client. 
The 
code 
to 
receive 
SctpMultiChannel packets is logically similar to any 
UPD or TCP style of socket receive programming. 
Figure 10 shows a sample.  
  
 
 
 
Figure 9. Source receives request for frame 
 
 
01 SocketAddress socketAddress = new InetSocketAddress(port); 
02 channel =  SctpMultiChannel.open().bind(socketAddress); 
03 MessageInfo info; 
04 while ((info = channel.receive(bb, null, null)) != null) { 
05   // determine requestor 
06   Association association = info.association(); 
07   // determine which frame range 
08   bb.flip();  
09   int fromFrame = bb.getInt();  
10   int toFrame = bb.getInt(); 
11   // send frames to requestor 
12   for (int i=fromFrame; i<= toFrame; i++) { 
13     bb.clear(); 
14     bb.putInt(i); 
15     bb.put(framePool.getFrame(i)); 
16     bb.flip(); 
17     channel.send(bb,  
               MessageInfo.createOutgoing(association, null,0)); 
18   } 
19 } 

170
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
  
 
Figure 10. Client receives frame 
 
 
 
 
The three major components of the framework are 
implemented as “SourceMain”, “TrackerMain” and 
“ClientMain”, which are composed from classes that 
implement 
the 
core 
behavior 
of 
maintaining 
communication sessions, accepting requests for frames 
and delivering them, and requesting and receiving 
frames. The major classes are FrameRequestor and 
FrameServer. The original source starts out as the sole 
instance of FrameServer. The first client starts out as 
the sole instance of FrameRequestor. As the client 
accumulates frames it then also instantiates a 
FrameServer that is able to receive requests from other 
clients. A client that contains both a FrameRequestor 
and FrameServer instance becomes a true peer in the 
P2P content delivery framework. 
In summary, tracker, source and client together 
contribute to build a highly efficient delivery network.  
 
 
 
 
 
 
 
 
 
 
 
VI. 
CONCLUSION 
 
In this paper we have described a model and 
framework for a new generation of content delivery 
networks. 
We 
have 
described 
a 
prototype 
implementation that follows a bittorrent-style of P2P 
network, where a tracker disseminates information on 
which sources are available to download from, and 
includes a Java-based client for the Android platform 
for smart phones. Such P2P content delivery has great 
potential to enable large scale delivery of multimedia 
content.  
Our framework is designed to enable content 
originators to assess the potential reward from 
distributing the content to the Internet. The reward is 
quantified as the value added at each peer in the 
content delivery network and gauged relative to the 
actual cost incurred in data delivery but also correlated 
to the risk that such open delivery poses. 
Consider the scenario we described earlier in the 
paper: a typical “viral” video found on YouTube.com: 
the video is uploaded onto YouTube.com for free, 
stored and transmitted by YouTube.com and viewed by 
a large audience. The only entity that is getting a 
reward is YouTube.com, which will accompany the 
video presentation with paid advertising. The only 
01 SocketAddress socketAddress =  
             new InetSocketAddress(peer.address, peer.port); 
02 SctpChannel channel = SctpChannel.open(socketAddress, 1, 1); 
03 // send requested frame range to peer 
04 ByteBuffer byteBuffer = ByteBuffer.allocate(128); 
05 byteBuffer.putInt(fromFrame); 
06 byteBuffer.putInt(toFrame); 
07 byteBuffer.flip(); 
08 channel.send(byteBuffer, MessageInfo.createOutgoing(null, 0)); 
09 // here is where we read response 
 
 
10 byteBuffer = ByteBuffer.allocate(64000); 
11 while ((channel.receive(byteBuffer, null, null)) != null) { 
12    byteBuffer.flip(); 
13    int frame = byteBuffer.getInt(); 
14    System.out.print("Message received: " + frame);  
15    … 
 
 
 

171
International Journal on Advances in Telecommunications, vol 3 no 3 & 4, year 2010, http://www.iariajournals.org/telecommunications/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
benefit that the original source of the video gets is 
notoriety. 
Using our model, the original data owner can 
select other venues to make the video available via a 
peer-to-peer approach. The selection on who will 
participate can be based on how much each peer 
contributes in terms of reward but also risk. Peers will 
have an interest in being part of the delivery network, 
much like YouTube.com has recognized its value. 
Peers might even add their own value to the delivery 
and share the proceeds with the original source. 
Whereas in the YouTube.com approach the reward 
is only reaped by one, and the original source has 
shouldered all the risk, i.e. lost all reward from the 
content, our model will enable a more equitable 
mechanism for sharing the cost and reward. Our model 
might just enable a new and truly openness of content 
delivery via the Internet. 
 
 
 
 
 
REFERENCES 
 
[1] Raimund K. Ege. Trusted P2P Media Delivery to 
Mobile Devices. Proceedings of the Fifth International 
Conference on Systems (ICONS 2010), pages 140-145, 
Menuires, France, April 2010. 
 
[2] Y. Atif. Building trust in E-commerce. IEEE 
Internet Computing, 6(1):18–24, 2002. 
 
[3] P. Resnick, K. Kuwabara, R. Zeckhauser, and E. 
Friedman. Reputation systems. Communications of the 
ACM, 43(12):45–48, 2000. 
 
[4] E. Bertino, B. Catania, E. Ferrari, and P. Perlasca. 
A logical framework for reasoning about access control 
models. In SACMAT ’01: Proceedings of the sixth 
ACM symposium on Access control models and 
technologies, pages 41–52, New York, NY, USA, 
2001.  
 
[5] S. Jajodia, P. Samarati, M. L. Sapino, and V. S. 
Subrahmanian. Flexible support for multiple access 
control policies. ACM Transaction Database System, 
26(2):214–260, 2001. 
 
[6] 
OpenID, 
http://www.openid.net. 
[accessed 
September 22, 2010] 
 
[7] C. Wu, Baochun Li. R-Stream: Resilient peer-to-
peer streaming with rateless codes. In Proceedings of 
the 
13th 
ACM 
International 
Conference 
on 
Multimedia, pages 307-310, Singapore, 2005.  
 
[8] R. K. Ege, L. Yang, Q. Kharma, and X. Ni. Three-
layered 
mediator 
architecture 
based 
on 
dht. 
Proceedings of the 7th International Symposium on 
Parallel Architectures, Algorithms, and Networks (I-
SPAN 2004), Hong Kong, SAR, China. IEEE 
Computer Society, pages 317–318, 2004.  
 
[9] L. Yang, R. Ege, Integrating Trust Management 
into Usage Control in P2P Multimedia Delivery, 
Proceedings of Twentieth International Conference on 
Software Engineering and Knowledge Engineering 
(SEKE'08), pages 411-416, Redwood City, CA, 2008. 
 
[10] 
Open 
Handset 
Alliance, 
http://www. 
openhandsetalliance.com/. [accessed November 19, 
2010] 
[11] 
Gutmann, 
P., 
1999. 
The 
Design 
of 
a 
Cryptographic Security Architecture, Proceedings of 
the 8th USENIX Security Symposium, pages 153-168, 
Washington, D.C., 1999. 
 
[12] Network Working Group, Diffie-Hellman Key 
Agreement Method, Request for Comments: 2631,  
RTFM Inc., June 1999. 
 
[13] java.net – The Source for Java Technology 
Collaboration, 
The 
JDK 
7 
Project, 
http://jdk7.dev.java.net. [accessed September 22, 2010] 
 
[14] R. Stewart (ed.), Stream Control Transmission 
Protocol, Request for Comments: 4960, IETF Network 
Working 
Group, 
September 
2007, 
http://tools.ietf.org/html/rfc4960. [accessed September 
22, 2010] 
 
[15] Raimund K. Ege, Li Yang, Richard Whittaker. 
Extracting 
Value from P2P Content Delivery. 
Proceedings of the Fourth International Conference on 
Systems (ICONS 2009), pages 102-108 Cancun, 
Mexico, March 2009. 
 

