64
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
Long-Range CAN: to Enhance the Performance of
Content-Addressable Networks
Bal´azs Kov´acs, Rolland Vida
Budapest University of Technology and Economics
Department of Telecommunications and Media Informatics
Magyar tudosok krt. 2, Budapest, Hungary 1117
{kovacsb, vida}@tmit.bme.hu
Abstract
Distributed Hash Table (DHT) algorithms structure
peer-to-peer networks to provide nodes with fast and scal-
able lookups. In recent DHT solutions, such as Chord and
Kademlia, the contacts of a node in the overlay network are
determined so as to keep up with a lookup cost of O(logN)
in a network of N nodes. As opposed to these, one of the
ﬁrst DHT solutions, called Content Addressable Network
(CAN), has the drawback of limiting the lookup cost only in
O(dN
1
d ) where d is the number of dimensions in the coordi-
nate space, a ﬁxed network parameter. However, CAN has
several merits to exploit, such as its multi-dimensional ID
space and its special ID space structure. Thus, in this paper
we present an improved algorithm called Long-Range CAN
(LR-CAN), able to eliminate the rigidity of the original sys-
tem and to provide a more scalable and resilient solution,
not only compared to the original version, but also to the
currently best performing DHTs that we already mentioned.
Keywords: Distributed Hash Table, Content-Addressable
Network, small world, lookup-cost limitation, signaling op-
timization
1. Introduction
Distributed hash table algorithms construct structured
P2P networks to control the communication cost of resource
lookups. Resource or content lookups in DHT protocols
are performed based on a key that is a hash print of the
searched content. Nodes and keys are mapped on an iden-
tiﬁer (ID) space, and the distance between the key and the
node performing the lookup is determined. Usually, the pro-
tocols employ a greedy forwarding mechanism to forward
the lookup to the owner of the key.
During this greedy forwarding, a node thus scans its con-
tacts to ﬁnd the closest node to the key. Generally, contacts
can be classiﬁed into two categories: short-range and long-
range contacts. The former category consists of contacts
very close to the node in the ID space; they are indispens-
able for a node to properly participate in a DHT. If some, or
all of the short-range contacts fail, a node may be unable to
forward lookups. As opposed to these, long-range contacts
are not mandatory for nodes to survive; however, they are
useful to accelerate the lookups so as to be of a length pro-
portional to the logarithm of the network size. DHT proto-
cols deﬁne, set up, and maintain their short- and long-range
contacts differently.
One of the ﬁrst published DHTs was CAN [1]. It maps
nodes and keys onto a d-dimensional ID space that wraps
to a d-torus. The ID space is split into d-dimensional zones
which are assigned to the nodes. A node is responsible for
keys which map into its zone. The algorithm deﬁnes only
short-range contacts for a node, which are its immediate
neighbors on the torus. This concept signiﬁcantly reduces
the cost of maintaining contacts and thus signaling, as the
number of contacts remains O(d). However, lookup lengths
may grow long and present large variations. An answer to
this problem might be to increase the number of dimensions
of the torus. As a consequence, the number of short-range
contacts increases, the ID space is distributed along more
dimensions, and thus hop distances decrease. The num-
ber of dimensions d can be chosen so as to make lookup
lengths proportional to logN; however, d is a ﬁxed system-
wide parameter, and if one would like to change it on the ﬂy,
costly algorithms would be needed to re-hash and reshape
the network accordingly. As a result, lookup lengths remain
O(dN 1/d) [1]. If N increases signiﬁcantly during the life-
time of the system, and if d cannot be modiﬁed accordingly,
lookup lengths will be notably longer than with an O(logN)
system. Another solution to reduce lookup cost is the use of
“realities”. In each reality, the ID space is distributed ran-
domly; thus, realities assign different zones for nodes and

65
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
introduce redundancy in the system, as nodes will probably
store different keys in different realities. This method also
reduces lookup cost, as lookups can jump between realities.
However, realities are less effective in decreasing lookup
lengths than the use of an increased number of dimensions.
Chord [2] maps nodes onto a ring as ID space. Short-
range contacts of Chord are called successors and predeces-
sors. Besides these, Chord also uses long-range contacts,
called ﬁngers, to keep lookup lengths O(logN). In case
of m-bit long identiﬁers, maximum m ﬁngers are main-
tained, placed at exponentially increasing distances from
the node. If we have a look at the basics of the system,
Chord and CAN are very similar. A one dimensional CAN
is an identiﬁer circle, just as Chord. The main difference is
that Chord has a different join and zone assignment strategy
than CAN, and it has ﬁngers, while CAN may have multi-
ple dimensions. Unfortunately, the main drawback of Chord
is the one-dimensional ID space and the unidirectional cir-
cle. Bidirectional Chord [3] eliminates the problem of uni-
directionality, but increases the maintenance load of the net-
work to keep ﬁngers precise, although the bidirectional ring
makes the system less sensitive to the imprecision of ﬁn-
gers.
Kademlia [4], a system developed from the basics of Pas-
try [5], is different in many ways. First, it deﬁnes a new
distance metric, called XOR distance. The ID distance of
two nodes is the XOR value of their identiﬁers. The XOR
distance is unidirectional. In order to ﬁnd short- and long-
range contacts, each node examines the senders of messages
which ﬂow in the system upon joins and lookups, and de-
cides whether to record a sender as a contact or not. In case
of m-bit IDs, a Kademlia node n stores m buckets. Kadem-
lia only deﬁnes ID ranges per buckets which should be cov-
ered by some nodes in contrast to the deterministic approach
of Chord. To enhance routing performance, at most k nodes
can be recorded to each bucket. A node stores a key if it
cannot forward it to any node closer to the key. The param-
eter k also introduces redundancy by storing keys at mul-
tiple nodes. Kademlia has an iterative lookup strategy that
always returns lookups to the initiator after visiting a new
hop, until the destination is found. Compared to a recursive
strategy it costs more messages, but may provide auxiliary
information that may improve the lookup protocol, which is
necessary in Kademlia as it learns the topology from lookup
trafﬁc.
Overall, most DHTs achieve route lengths proportional
to O(logN) if, in some way, they use long-range con-
nections.
In 1999 Jon Kleinberg worked out a network
model for the small-world phenomenon which sets up re-
quirements for decentralized systems to be able to ﬁnd the
”short paths” in the network. Based on the model of Watts
and Strogatz [6], which proposes to have many short-range
and a few long-range connections, Kleinberg determined a
stochastic model of choosing long-range contacts in a net-
work of arbitrary dimensions [7]. He stated that should the
nodes of a 2-dimensional network follow his distribution
of placing long-range connections (only one per node), the
number of hops will be at most O((logN)2). Since most of
the DHTs suit the Kleinberg model and have stricter rules
of placing long-range connections, they obviously provide
better path lengths in average than the one mentioned by
Kleinberg.
Among the well-known DHT solutions CAN is the most
similar to Kleinberg’s general model as CAN deﬁnes oper-
ations in multiple dimensions. Its only shortcoming is not
using long-range connections; thus, the variance of lookups
yields a high value. An earlier paper presented an algo-
rithm which enhanced CAN to be compliant with Klein-
berg’s methods, as it installed one ”shortcut” per node ac-
cording to Kleinberg’s formula [8]. The authors achieved
signiﬁcant improvements in lookup lengths when compared
to the original CAN; however, the approach is still not com-
petitive with the performance of Chord or Kademlia.
The signiﬁcance of the results presented in this paper is
twofold. First, we present Long-Range CAN (LR-CAN), an
algorithm that enhances CAN by utilizing long-range con-
tacts, a solution very popular for scalable DHTs. Second,
the algorithm introduces adaptivity to network size through
a cost-limit function (denoted as SR(N) further on). In
contemporary DHTs the number of long-range contacts im-
plicitly changes as network size changes, and their number
is proportional to the logarithm of network size. On the
contrary, LR-CAN controls the number of long-range con-
tacts explicitly through the above mentioned deﬁnite cost-
limit function. With the appropriate cost-limit function we
can set LR-CAN so as to outperform Chord and Kademlia.
Nevertheless, its multi-dimensional ID space, bidirectional
along each dimension, and its special node mapping algo-
rithm allow LR-CAN to keep the necessary maintenance
trafﬁc lower than in the case of the above mentioned state-
of-the-art DHT protocols.
The rest of the paper is organized as follows. Section
3 presents the adaptive algorithm we propose (LR-CAN),
while section 4 presents our theoretical expectations con-
cerning its efﬁciency. Section 5 describes our simulation
technique and presents the results by comparing them to the
theoretical expectations and to the efﬁciency of alternative
DHT solutions. Then, section 6 presents a method to min-
imize the signaling of LR-CAN. Finally, in section 7 we
conclude the paper.
2. CAN Overview
As mentioned already in the introduction, in CAN each
node is responsible for the resources which map into its
zone. When joining the system, the new node draws a point

66
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
Figure 1. Routing on a 2-torus
P in the d-dimensional coordinate space according to a uni-
form distribution. The lookup for P is initiated by a gate-
way node. The node responsible for P will be the host for
the newcomer; it will split its zone in two, based on the
space splitting rules, it will notify the newcomer about its
neighbors, and its neighbors about the newcomer. Accord-
ing to the space splitting rules, always the longer edge needs
to be halved, but if more edges are of equal lengths, the edge
with the lower-order dimension has to be split. Two nodes
are neighbors if the coordinate spans of their zones overlap
along d − 1 dimensions and abut along one dimension. If
the ID space is distributed uniformly to zones exactly with
the same size, then each node will have 2d neighbors.
When a lookup is initiated, key K is deterministically
mapped to a d-dimensional point P. Forwarding can hap-
pen only between neighbors.
Each node checks its Eu-
clidean distance to P and forwards the lookup to its neigh-
bor closest to P in a greedy way. Note that CAN is bidirec-
tional along each dimensions and the ID space wraps. For
instance, the distance on a 1-torus between point 0.1 and
0.9 is 0.2 rather than 0.8. Fig. 1 shows a routing scenario
in two dimensions on a 2-torus, where a lookup goes from
S to D.
In case of a graceful leave, i.e., when a node is able to
hand over his tasks before leaving, the leaving node has to
choose one of its immediate zone neighbors to merge with
its zone. If merging zones is unfeasible in the current state,
since the zones would compose an invalid concave zone that
contradicts the space splitting rules, the neighbor with the
smallest zone will take over; thus, this node will temporar-
ily own two zones, until assigning the zone to a new node or
merging it with a third zone. Node failures are handled dif-
ferently, as in this case the peers sensing the absence of an-
other peer have to arrive to a consensus about the node that
takes over the zone of the failed peer. We do not present the
way of failure handling because it does not affect our algo-
rithm. For more details about the operation of the original
CAN algorithms, please refer to [1] and [9].
3. The LR-CAN Algorithm
LR-CAN uses long-range contacts to reduce lookup cost.
The main difference between LR-CAN and other DHTs
that employ long-range contacts is that the number of long-
range contacts of a node changes adaptively according to
a desired lookup cost, expressed by a cost-limit function,
as deﬁned in Section 4. In other DHTs the number of long-
range contacts is an implicit and not controllable function of
network size; thus, the algorithm and its current parameter
set up implicitly determines the achievable lookup perfor-
mance of the DHT.
The main idea behind the LR-CAN algorithm is that a
node is able to assess the network size (number of nodes)
individually, without the help of an information server. The
reason for that is the distribution of the ID space that con-
verges to a distribution with equal zones; this is because on
a stochastic basis always the largest zones are split when
nodes join the network and draw a random d-dimensional
coordinate to determine their host node. In fact, the algo-
rithmic principle behind this feature is that the node ID and
the zone assigned to the node in the CAN ID space are in-
dependent. In Fig. 2, we can see the difference between the
ID space assignment strategy of CAN and Chord. We insert
three nodes in the same sequence for both systems. Let us
assume that the hash of the IP address in Chord equals the
random P coordinate the same node draws in CAN. On the
left hand side we can see how a one-dimensional CAN as-
signs portions of the ID space to these three node. In CAN,
the sequence of nodes joining the system affects the map-
ping. In this example, ﬁrst, node A owned the whole ID
space before node B joined. When B joined, the ID space
was split into two equal parts, and the zone closer to the
origin was preserved for node A. The same happens when
node C draws the point mapping into the zone of node A.
In contrast to CAN, in Chord, the sequence of nodes does
not count, only their ID; they get the portion of the ID space
where they are successors. As a result, the sizes of ID space
portions in Chord depend on the hash implementation and
the nodes joining the system, whereas in CAN space por-
tions are deterministically balanced.
The aim is to limit the problematic original routing
scheme of CAN with a cost-limit function, denoted as
SR(N). This function upper bounds the average lookup
cost and triggers LR-CAN to increase the number of long-
range contacts in the network. Obviously, the cost-limit is
a function of the network size N. Since deﬁning their own
long-range contacts is the individual responsibility of the
overlay nodes, and N varies, the nodes have to be able to

67
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
Figure 2. CAN and Chord ID space assign-
ment strategy
assess the network size N. Based on the assumption that
the ID space distribution converges to equal zones, network
size ( b
N) can be assessed in several ways. One technique
could be to calculate the sum of the zone sizes of immediate
neighbors, and thus infer to network population. Low cost is
the primal advantage of this solution as a CAN node always
stores information about the zones of its neighbors. The
drawback is that the result will reﬂect a local view of the
CAN network; even if we assume a convergence to nearly
equal zones, there will be local deviations that may provide
inaccurate information about network size. A more accu-
rate solution is by routing to the most distant point in the
ID space and measuring the hop distance ( bRmax). We can
estimate N through a formula that describes the connection
between bRmax and N; just like the ﬁrst technique, this so-
lution also assumes a CAN ID space with equal zones. As
this approach traverses a more signiﬁcant portion of the ID
space, it can provide more accurate information about N
than sampling the zone sizes of immediate neighbors. Un-
fortunately, this second technique has higher cost, because
of the necessity to route to the most “distant” point; how-
ever, with a careful design this cost remains proportional to
O(logN) (explained later in Section 4).
As the nodes are aware of the position of their zones,
they can easily determine the most distant point in d di-
mensions. To do so, we made a simpliﬁcation and used the
bottom-left corners of a zone as reference points to deﬁne
zone-to-point distances. The bottom-left corner is a good
choice since the zone splitting rules of CAN keep this point
always belonging to the original owner of the zone, no mat-
ter how many times the zone is split because of joins. Note
that routing in CAN can only progress horizontally or ver-
tically passing through neighbors, and thus the most distant
point is determined accordingly.
Fig. 3 shows a two-dimensional ID space; for the sake
of simplicity, ﬁrst we explain the LR-CAN algorithm for
d = 2. For node A, located in the middle of the unit square,
the most distant points are located in the corners of the
4
max
r
A
(0, 1)
(0, 0)
(1, 0)
(1, 1)
4
max
r
area reachable 
without long hops
area reachable in 
1 long hop
Figure 3. One long-range level is active
ID space, which correspond to one speciﬁc point, (0,0), as
all the four corners of the square represent the same point
on the d-torus. The Euclidean distance between them is
rmax = 2· 1
2, as we need to progress through half of the full
length of the ﬁrst dimension horizontally then again half of
the full length of the second dimension vertically. To cover
that distance, we will thus need
bRmax = rmax · N
1
2
(1)
hops, as along each dimension there are approximately N
1
2
nodes dividing the coordinate space among them [1]. If A
initiates a lookup to (0,0), then it can measure the hop dis-
tance to the most distant point by a counter in the packet;
based on the result and by transforming Equation 1, it can
assess N ( b
N). Then, we can calculate the value of SR( b
N),
which is supposed to be the upper bound for the average
route length. If the average lookup cost ( bRavg) that can be
calculated from the measured bRmax (explained in section 4)
is higher than the value that the cost-limit function (SR(N))
allows, a new level of long-range neighbors is deployed; by
doing so, we reduce the size of the ID space where lookups
use traditional CAN routing, and we add the ﬁrst level of
long-range contacts, where long-range routing takes over
(L = 0). Certainly, the distant point we measured our dis-
tance to belongs to a zone for which there is a responsible
node. This node will be added as a long-range contact, and
will be used as any other short-range neighbor in greedy
forwarding. Network nodes behave consistently; thus, their
individual decisions will be valid in a global scope, improv-
ing the performance of the whole network.
If all nodes assessed N and decided to set up their ﬁrst
long-range contact to the most-distant point compared to
their own position, the traditional CAN routing will have
to be employed only over half of the original ID space for
every node; in this reduced space, the most distant points
from the nodes will be half as far as the point where a long-
range contact points already. For node A, the most distant

68
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
(0.25, 0.75)
(0.75, 0.75)
(0.25, 0.25)
(0.75, 0.25)
8
max
r
A
(0, 1)
(0, 0)
(1, 0)
(1, 1)
area reachable 
without long hops
area reachable in 
1 long hop
area reachable in 
2 long hops
8
max
r
Figure 4. Two long-range levels are active
points (measured in hops) lie on the edges of the square
spanned by points (0.5, 0), (1, 0.5), (0.5, 1), and (0, 0.5)
(the white square in Fig. 3). If the system intends to fur-
ther reduce the maximum distances, it needs to distribute
the rest of the ID space evenly to have a general improve-
ment that holds for the whole ID space. Among the most
distant points, points (0.25, 0.25), (0.25, 0.75), (0.75, 0.75)
and (0.75, 0.25) are the most appropriate choices for this
goal, as shown in Fig. 4. These points are the next level
long-range contact candidates for A. In case the hop dis-
tance to these new points exceeds SR( b
N) again—which is
measured periodically—a new level of long-range contacts
is introduced (L = 1). In this case we will initiate four new
long-range connections; as we do not talk about the entire
ID space anymore, these candidate points are not collocated
on the torus. By introducing these new long-range contacts,
the ID space where the original CAN routing is employed
will be reduced again. The whole procedure is repeated un-
til the average hop distance of the traditional CAN routing
does not exceed the route length limit dictated by SR( b
N);
hence, the LR-CAN algorithm endeavors to maintain the
following condition:
bRavg = bRmax · m avg
max < SR( b
N),
(2)
where m avg
max is a multiplication factor, an empirical ratio
of Ravg and Rmax that can be estimated accurately on-line
based on the current number of long-range levels and bRmax.
From now on we will call the traditional CAN routing as
short-range routing because it uses only short-range con-
tacts in forwarding; accordingly, we call long-range routing
the case when long-range contacts forward a lookup. The
routing of LR-CAN can be split in two phases: in the ﬁrst
one a certain key is approached by long-range routing; in
the second phase short-range routing leads to the owner of
the key. In Fig. 3 and Fig. 4 we can see how the deployment
of long-range contacts affects LR-CAN routing. The white
square shows the subspace where only short-range routing
is employed, in case node A starts a query. If the query
is initiated to some distant part of the ID space, A uses its
long-range contacts ﬁrst, and only afterwards the traditional
CAN routing, based only on short-range contacts; thus, the
scope of traditional CAN routing is reduced. Certainly, the
SR(N) cost-limit function limits the route lengths only par-
tially since the addition of new long-range levels will gen-
erate a long-range routing cost.
An LR-CAN node needs to maintain its long-range con-
tacts to review the assignment of coordinate points to nodes.
To do so, it pings its contacts periodically and directly. If
one of them fails, in the next maintenance period the node
initiates a lookup for the corresponding coordinate point
again, in order to ﬁnd out which node is currently respon-
sible for that point. The join procedure of CAN also needs
to be modiﬁed. To spare the cost of setting up long-range
levels, the newcomer can learn the current number of levels
from the node through which it joins the network. Nodes
also need to periodically route a message to one of the most
distant points of the ID space, in order to measure whether
a new long-range level has to be installed or not; this is
done together with contact maintenance. Since long-range
contacts are not necessarily symmetric, a node’s long range
contacts do not have to be notiﬁed neither when the node
joins, nor when it leaves the network. As the bottom-left
corner of a zone is invariant while a node is online (as ex-
plained by Fig. 2), if a coordinate of a long-range point
hits the bottom-left corner of the given long-range contact,
the point-to-node assignments do not change until the node
leaves the network.
4. LR-CAN Cost Analysis
If we assume that routing can progress only horizon-
tally or vertically, the maximum distance in one dimen-
sion between two points p and q in the ID space, (p, q ∈
{Rd|[0, 1)}) can be 1
2. In d dimensions this maximum dis-
tance is rmax =
d
2 (see Fig. 3). In order to obtain the
distance in hops, the maximum distance has to be multi-
plied with the “resolution” (N
1
d ) of the ID space. Therefore,
in the original CAN solution the maximum route length in
hops is
Rmax =
l
rmax · N
1
d
m
(3)
if we have N nodes in the network [1]. Each new level of
long-range contacts halves the maximum distance. Hence
the average route length of short-range routing (not includ-
ing jumps on long-range contacts) is:
Ravg = rmax
2L+1 · N
1
d · m avg
max .
(4)
Through simulations we observed that in general m avg
max ∼
1.4 when L ≥ 0, and ∼ 2 if no long-range contacts are used

69
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
(this latter observation is also present in the original CAN
paper [1]).
We want LR-CAN to provide O(logN) lookup cost sim-
ilarly to other DHT solutions; as a consequence, we propose
to use SR(N) = 1
c · log2N as the upper bound of short-
range routing, where c is the cost-limit factor, an arbitrary
positive real number. To express lookup cost, we need to de-
duce how L depends on N. Substituting Ravg by 1
c · log2N
in equation 4 yields to the following:
L = log2
rmaxN
1
d m avg
max c
2 log2 N
= log2 rmaxN
1
d m avg
max c − log2 2 log2 N
= O(log N) − O(log log N) = O(log N)
(5)
as d can be considered as constant in our algorithm. The
average message cost of lookups can be expressed by the
sum of the long-range and short-range routing cost:
LRavg + Ravg = O(L) + O(log N) = O(log N)
(6)
As mentioned earlier in section 3, probing if Rmax is
over the cost-limit function requires to route a probe mes-
sage to one of the current most distant points (depending
on the number of activated levels) in the ID space by using
original short-range routing. Generally, if LR-CAN keeps
Ravg proportional to O(logN) then Rmax is also propor-
tional to it. However, in a pathological case when the size
of the network grows with orders of magnitude between two
long-range maintenance periods, determining Rmax will
cost O(dN
1
d /2L).
As a result, the introduction of L eliminates the signif-
icance of d in the lookup cost of LR-CAN. Although in
the traditional CAN architecture, as we mentioned earlier,
d can be set so as to provide low lookup cost, the signaling
load will increase much more than in case of LR-CAN with
multiple levels of long-range neighbors. Moreover, d is a
ﬁxed network parameter the change of which needs costly
rehashing of the whole ID space. It is important to note that
the ability to build a multi-dimensional space still has sig-
niﬁcant beneﬁts, since it vests the system with better fault-
tolerance (more short-range contacts); moreover, the impre-
cision of long-range contacts is less detrimental for lookup
performance than in a single-dimensional ID space.
The reduced lookup cost of LR-CAN comes at the price
of having more contacts to maintain than in CAN:
LCavg + SCavg = 2d + 1 + L2d
= O(d) + O(L2d)
= O(L) = O(log N)
(7)
Figure 5. A level-two long-range coordinate
maps to the same node as a level-one
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 10
 100
 1000
 10000
Probability
Number of nodes
L=1
L=2
L=3
L=4
L=5
Figure 6. Probability of mapping all long-
range coordinates to different nodes
as for level L = 0 there is 1 long-range contact, and for
each level L > 0 there are another 2d contacts.
Certainly, L has an implicit upper bound; its margin de-
pends on the “resolution” of the ID space. There is no point
in deﬁning new long-range coordinates if they are so close
to the given node that they map to the same nodes; this
case can be seen in Fig. 5: the bottom-left level 2 con-
tact of node A will map to the same node that holds its
level 1 contact. Consequently, L should be deﬁned on the
(−1 ≤ L ≤ ⌊log2 N
1
d /2⌋, L ∈ Z) domain; −1 indicates
the case when no long-range contacts are used. Obviously,
this constraint will be different in real life since the math-
ematical formula presented here assumes an equally dis-
tributed ID space. In Fig. 6, we can see the probability that
all long-range coordinates of a given level map to differ-
ent long-range contacts in function of network size. These
probabilities were determined by simulation that used a uni-
form random number generator to draw the “join coordi-
nates” of CAN nodes. For instance, for 256 nodes the theo-
retical upper bound yields maximum three levels, while we
can be sure about mapping all contacts on the three levels
to different nodes with a probability of around ∼ 0.88, ac-

70
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
10
0
10
1
10
2
10
3
10
4
10
5
10
6
0
2
4
6
8
10
12
14
16
18
20
Number of nodes
Average length of lookups
 in hops (short)
NoLC
SR(N) = log2N
L=0
L=1
L=2
L=3
L=4
Figure 7. Analytical results on the growth of
Ravg in function of N
cording to the simulation. As we learned, the desired cost-
limit function is expressed through the c parameter, but the
domain of L implicitly deﬁnes also the reasonable domain
of c, i.e., there is no point in deﬁning a too high c value.
Nevertheless, the protocol presented in Section 3 can safely
handle any arbitrarily high c and set up long-range contacts
only when beneﬁcial.
5. LR-CAN Performance Simulation
We simulated LR-CAN in a P2P overlay simulator
[10, 11] developed in cooperation with the Technical Uni-
versity Darmstadt. The simulator can be used for testing
several well known P2P search/lookup algorithms.
Cur-
rently, Chord, Kademlia, CAN, and Gnutella [12] are all
implemented in the simulator. We used the simulator to im-
plement LR-CAN, validate our mathematical formulas in a
simulated environment, and to compare the routing perfor-
mance of CAN, LR-CAN, Chord, and Kademlia.
5.1. Validation of Theoretical Results
In Fig. 7, we can see how short-range route lengths grow
in function of network size, in a two-dimensional CAN
space, according to the above presented analytical model.
A new level is switched on when the f(N) = dN
1
d curves
cross the desired average of short-range routing, the cost-
limit function, namely SR(N) =
1
c · log2N. In Fig. 7,
c = 1. When SR(N) is reached, route length drops, while
the number of neighbors increases. The number of levels
corresponding to the different curves is denoted by L. The
average, theoretical route length of the short-range routing
grows along the thick line.
The mathematical analysis contains assumptions that
cannot be fully met in simulations and real life. For the
simulation results, we separately constructed LR-CAN net-
10
0
10
1
10
2
10
3
10
4
10
5
10
6
0
2
4
6
8
10
12
14
16
18
20
Number of nodes
Average length of lookups
 in hops (short + long)
SR(N) = log2N
SR(N) = (1/4)*log2N
Figure 8. Simulation results on the average
route length for different SR functions
works with several different network sizes, and performed
a signiﬁcant amount of random key lookups to obtain a rep-
resentative average for lookup message cost. In Fig. 8, we
can see how LR-CAN with different c parameters reacts on
a growing network. We can see the simulated results on
the thick curves with two different values of c (c1 = 1 and
c2 = 4) to deﬁne two different cost-limit functions. To
compare the simulated results to the analytical ones, the thin
lines represent a lower and an upper bound for the simula-
tion results, which enclose the respective thick curve. The
jumps in the thin curves are due to the long-range routing
cost (LRavg) that appears when a new long-range level is
introduced; this routing cost depends only on the value of
L and d (see Section 6). The theoretical thin curves assume
equal-size, 2-dimensional zones and the same L value for
all nodes, assumptions which obviously do not hold in real
setups.
5.2. LR-CAN Comparison with Chord and
Kademlia
Having multiple dimensions is a solution to speed up
lookups. Linear search in a one-dimensional space gen-
erates O(N) lookup lengths, compared to the O(dN 1/d)
lengths that CAN provides in a d-dimensional space; higher
d values yield lower lookup cost. Consequently, when a
multi-dimensional solution, such as LR-CAN, has to pro-
vide a determined lookup cost, it may have less strict re-
quirements for the precision of long-range contacts than in
single-dimension solutions, such as Chord and Kademlia.
As a result, LR-CAN may generate less signaling for the
maintenance of long-range contacts.
Another DHT solution, Chord, is similar to LR-CAN ex-
cept for three essential features. First, Chord uses a one-
dimensional ID space, which requires to pay more atten-
tion to the precision of long-range contacts in order to keep

71
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
lookups fast.
Second, the ID space is unidirectional, so
less alternative routes exist in the system (this drawback
was overcome by [3]). And third, the distribution of the
ID space is more heavily based on randomness, i.e., the po-
sition and hash zone of a node on the ring basically depends
on the ID of the node. As opposed to this, CAN splits the
ID space into equal parts as much as possible, according to
its zone splitting rules operating regardless of the node IDs.
A CAN ID space can be easily mapped to a nearly balanced
binary tree. Thanks to these features, the peers participating
in an LR-CAN network can estimate individually the actual
global average of lookup cost, and decide about the intro-
duction of new levels of long-range neighbors accordingly.
This is a major advantage of LR-CAN.
Kademlia nodes cover each part of the ID space with
k randomly selected neighbors stored in a so called “k-
bucket.”
Kademlia signiﬁcantly differs from CAN and
Chord as it is an on-demand, reactive solution, while the lat-
ter ones are proactive. The on-demand nature origins from
the contact maintenance procedure. While CAN and Chord
are proactive in short-range contact maintenance, Kadem-
lia learns topology changes from its own lookup trafﬁc. If
there is no trafﬁc at all, or just moderate one, Kademlia
may have imprecise information about the network topol-
ogy, and thus, it may fail to answer certain lookups or move
key-value pairs to the appropriate nodes. As a consequence,
Kademlia needs to make some effort to spread the topol-
ogy information better. To do so, Kademlia nodes gener-
ate dummy lookups periodically, and employ an iterative
lookup strategy. This means that a lookup message is al-
ways returned to its initiator after every newly visited hop,
until the destination is found; this results in higher costs for
the lookups. Another way to better disseminate topology in-
formation is to increase the k parameter. In this case, a node
learns about more nodes in the network, and thus knows the
topology better; resources are replicated and stored on more
nodes, so they are “easier” to ﬁnd.
In our simulations we focused on performing a fair com-
parison of these DHTs. The scope of the simulations was
to investigate how dynamism affects the message cost of
lookups, which is basically inﬂuenced by the precision of
long-range contacts. Since the effect of failures and grace-
ful leaving of nodes are similar in terms of long-range con-
tact maintenance, we did not implement failure handling
mechanisms in Chord and LR-CAN. As the on-demand na-
ture of Kademlia enables to handle failures without any ad-
ditional mechanisms, the comparison in Fig. 9 is only partly
relevant for Kademlia because, as mentioned, Chord and
LR-CAN lack the corresponding mechanisms. The inves-
tigation of failure-tolerance can be another important topic
of DHT-related research [13]. The elimination of failure
handling means that failure detection and its corresponding
mechanisms are not implemented; nodes always “clean up”
after they leave the system, i.e., short-range contacts remain
correct and precise, and stored key-value pairs are moved
to the node that takes over the responsibility of handling
the leaving node’s zone. By these means, we endeavored
to simplify the maze that this comparison with its multi-
dimensional problem space frames. We can clearly focus on
how the precision of long-range contacts and the stabiliza-
tion of the DHTs maintaining these contacts affect average
lookup costs and the signaling DHTs generate.
Parameters. One of the most inﬂuencing parameters is
the length of the stabilization period DHTs have. All of
these three DHTs operate some procedure with a common
aim: to set the precision of long-range contacts. The name
“stabilization” origins from the procedure of Chord that in-
volves into stabilization a so called “ﬁx-ﬁngers” procedure.
As described in Section 3, LR-CAN also reviews its long-
range contacts periodically. In Kademlia, a similar periodic
task is fulﬁlled by bucket refreshes. In order to measure
how tolerant the algorithm and the overlay structure of these
DHTs are for the imprecision of long-range contacts, we
varied the stabilization period on a wide range.
LR-CAN and Kademlia have other system parameters
that highly affect their performance. As mentioned earlier,
the number of dimensions is still an optional parameter that
can vest LR-CAN with better failure tolerance. Addition-
ally, dimensions affect when and how long-range contacts
need to be deployed. The effect of c has already been deeply
discussed; it represents the connection between network
size and average lookup cost. Kademlia also has two im-
portant parameters: the value k has inﬂuence on how widely
routing information is disseminated and how redundant the
system becomes. Furthermore, parameter α is a concur-
rency parameter deﬁning the number of asynchronous par-
allel queries a node can start on a lookup request. We omit-
ted the investigation of α in this comparison as this type of
concurrency primarily exploits the underlying link charac-
teristics and could be implemented both in Chord and LR-
CAN.
Metrics. A usual way to evaluate the performance of
different DHTs is to compare the average number of logi-
cal hops needed to ﬁnd the owner of a key. However, there
are other metrics that might come also into focus when log-
ical hops are compared. First, there is a difference between
recursive and iterative protocols, as they approach a target
differently. A lookup ﬂowing through the same number of
nodes means twice as many messages for an iterative proto-
col (e.g., Kademlia), as the initiator controls the lookup pro-
cess hop-by-hop. As a result, the message cost of a lookup is
a better metric than the number of logical hops. Note that in
the measurements related to message cost we counted the
number of messages needed to reach the owner of a key;
the last message, used for returning the searched value, was
not added. The amount of signaling trafﬁc together with

72
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
the achievable message cost of lookups determine the over-
all lookup performance. Low message cost is worth noth-
ing if its provision requires relatively high signaling trafﬁc.
In our signaling trafﬁc measurements we included all the
trafﬁc generated during node joins and leaves, the stabiliza-
tion of long-range contacts, and the lookup trafﬁc. If the
intention is to compare the results with Kademlia as well,
lookup trafﬁc also needs to be involved into signaling, since
Kademlia uses its lookup trafﬁc to maintain its long-range
contacts; thus, contact maintenance cannot be differentiated
from lookup trafﬁc as in Chord and LR-CAN.
There are also other metrics that might be interesting, but
we omitted to present them as they either seemed redundant
with the above mentioned metrics, or were non-informative
in our simulations. One of these metrics was the number of
contacts that is only loosely proportional to signaling traf-
ﬁc. For instance, Kademlia may store several times more
contacts than Chord or LR-CAN but it generates far less sig-
naling messages. Average latency of lookups was a redun-
dant metric in our simulations as non of the implemented
DHTs was optimized for link latency; thus, on long-run av-
erage the message cost of lookups was directly proportional
to the average lookup latency. Nevertheless, the success
ratio of lookups, which reﬂects the ratio of the number of
successful lookups divided by the number of lookups for a
stored key, is an important metric in failure scenarios. How-
ever, as already mentioned, in our simulations nodes always
cleaned up after leaving; hence, in a proper implementation
of Chord and LR-CAN the success ratio of lookups remains
100%. In Kademlia this is not so straightforward: for low
k values or rare stabilization steps a node trying to push
its key-value pairs to the appropriate nodes before leaving
may not be properly aware of the nodes closest to the given
keys. This may result in loosing some of its keys and thus
the network gradually looses a portion of the key-value pairs
it should have saved. This phenomenon can be effectively
reduced with increasing k or the stabilization period, which
will implicitly also appear in some of the message cost ﬁg-
ures we present.
Scenario. As the aim of the simulation was to test how
the imprecision of long-range contacts inﬂuences routing in
the overlays of the different DHT algorithms, we labored a
scenario where we replace a signiﬁcant portion of the par-
ticipating nodes several times to generate stale or imprecise
long-range entries. For the sake of fair comparison between
different phases of the simulation run, we split the simu-
lation time up to ﬁve phases that are equal in time (1470
sec).
In the ﬁrst phase, 10000 nodes gradually join the
network and initiate the storage of some random key-value
pairs. These contents are also stored in a globally accessi-
ble memory in the simulator so that later the nodes can per-
form lookups only for content that already had been stored
and that should have been preserved by the DHT during the
simulation. Note that in the simulator implementation a key
stored in the DHTs is not removed when its original owner
leaves the network; hence, in an ideal case, DHTs should
preserve all the keys that were stored sometime during sim-
ulation. Performing lookups for stored content is important
especially for Kademlia since in this DHT lookups for a
key without a responsible node usually roam around longer
than lookups for keys with a responsible node. In the sec-
ond phase of the simulation, each node performs 10 lookups
for different random stored keys. In each of the remain-
ing parts, 32% percent of the nodes is replaced in a 400-
sec churn window. In these windows, nodes ﬁrst leave and
then new nodes gradually join the system; the network pop-
ulation always resets to 10000 nodes, so as to preserve the
fair lookup and signaling comparison between the phases.
Nodes that join the system run the stabilization procedure
and ﬁx their long-range contacts according to the current
network topology. The next stabilization is called when the
timer initiated with the stabilization period elapses; hence,
the stabilization periods of nodes are asynchronous, and de-
pend on the time they joined the network.
Analysis of Results. For each simulation run we present
two ﬁgures. One ﬁgure shows the evolution of lookup mes-
sage cost over time.
In order to reduce the number of
points, each point represents the average of 1000 consec-
utive lookups. In order to estimate the value of a result we
need to see also the price at which it was obtained. Thus,
beside lookup message cost we also present the absolute
number of signaling messages that enabled the correspond-
ing performance. One box in these ﬁgures depicts the mes-
sages sent only in the given simulation phase. Since there
are many parameter set combinations, for ﬁgures in Fig. 9,
we selected a parameter set that adequately represents the
protocols, and we altered only the stabilization periods.
In Fig. 9 we can observe several interesting results and
phenomena. The most striking one is that the lookup mes-
sage cost of LR-CAN with the current parameter set is con-
sistently lower in almost all cases. Certainly, with differ-
ent d and c parameters, we can experience different per-
formance; with higher c value, LR-CAN can further lower
lookup message cost.
With frequent stabilizations, dy-
namism has almost no effect on lookups in Chord and LR-
CAN; these DHTs keep the same lookup performance over
time. In contrast, Kademlia has an interesting behavior on
churn. In the second phase, Kademlia has an outstanding
lookup cost that deteriorates rapidly in the third phase after
the ﬁrst churn window, which results in many stale entries.
After a while, lookup cost converges to the performance ex-
perienced before the churn window, but this takes a long
time. In the next phase, we can observe a slight shift up-
ward in lookup cost because Kademlia looses some of the
keys stored at the beginning of the simulation due to churn
and stale entries, and lookups for these keys last longer.

73
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
 4
 6
 8
 10
 12
 14
 16
 0
 1000
 2000
 3000
 4000
 5000
 6000
 7000
Message cost of lookups
Simulation time
Stabilization period 400 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(a) Lookup cost
 1e+06
 2e+06
 3e+06
 4e+06
 5e+06
 6e+06
0
1
2
3
4
Absolute nr. of messages generated
Simulation phases
Stabilization period 400 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(b) Signaling (one phase is 1470 sec)
 4
 6
 8
 10
 12
 14
 16
 0
 1000
 2000
 3000
 4000
 5000
 6000
 7000
Message cost of lookups
Simulation time
Stabilization period 800 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(c)
 1e+06
 2e+06
 3e+06
 4e+06
 5e+06
 6e+06
0
1
2
3
4
Absolute nr. of messages generated
Simulation phases
Stabilization period 800 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(d)
 4
 6
 8
 10
 12
 14
 16
 0
 1000
 2000
 3000
 4000
 5000
 6000
 7000
Message cost of lookups
Simulation time
Stabilization period 1600 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(e)
 1e+06
 2e+06
 3e+06
 4e+06
 5e+06
 6e+06
0
1
2
3
4
Absolute nr. of messages generated
Simulation phases
Stabilization period 1600 sec
LR-CAN (d=2,c=2)
Chord
Kademlia (k=4)
(f)
Figure 9. Lookup performance and corresponding signaling trafﬁc in a dynamic network
In Fig. 9(b) we can see the corresponding signaling traf-
ﬁc that contains also the lookup message cost presented by
Fig. 9(a). Note again that Kademlia uses its lookup traf-
ﬁc to maintain long-range contacts as well, so maintenance
could not be separated from lookups. LR-CAN needs less
than half of the signaling of Chord and Kademlia that partly
comes from the lower lookup message cost and the more
efﬁcient repair of stale long-range entries. In phase 1 we
can observe a slightly higher signaling trafﬁc for Kademlia
than in later phases, since in this phase there are constantly
10000 nodes present; thus, more bucket refreshes are per-
formed, which are more costly than Chord and LR-CAN
stabilizations.
In the rest of the lookup cost ﬁgures we can observe that
the vertical shift of Kademlia over time becomes more sig-
niﬁcant, and its ability to converge to the original lookup
cost average reduces. Both for Chord and LR-CAN some
time is needed until long-range contacts become accurate.
With longer stabilization periods, this convergence time
also increases. Nevertheless, with its one-dimensional and
unidirectional ID space, Chord is more sensitive to network
dynamicity; thus, the average lookup cost deteriorates more
than in LR-CAN. Regarding the signaling load, the differ-
ence between the protocols gets less signiﬁcant; however,
LR-CAN keeps its preliminary advantage.
6. LR-CAN Signaling Optimization
So far the aim of this work was to minimize the message
cost of lookups, assuming a reasonable signaling trafﬁc. As

74
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
we have seen, the amount of signaling trafﬁc gives a clear
view on how much the provided lookup cost is worth. We
have also seen that with a well selected stabilization period
we may loose some negligible advantage in lookup cost, but
we can spare signiﬁcant signaling trafﬁc load. Besides the
stabilization period, the other inﬂuential parameter on sig-
naling in LR-CAN is the parameter c that drives the number
of long-range levels in a network. Since in a DHT a high
portion of the signaling trafﬁc origins from the maintenance
of long-range contacts, there might be cases when this kind
of network “investment” is not equilibrated by the gains
in lookup cost (which is another type of signaling trafﬁc).
The low number of lookups injected in the system results
in some long-range contacts becoming superﬂuous; their
maintenance costs more than what can be gained on their
availability. Overall, fast lookups are desirable in a DHT,
but their provision requires a not negligible amount of sig-
naling trafﬁc. Beside the provision of fast lookups, our sec-
ond aim could be to minimize thus the signaling trafﬁc, i.e.,
lookup trafﬁc and signaling related to contact maintenance.
The rest of this Section describes how most of the signal-
ing trafﬁc can be characterized in LR-CAN by other pa-
rameters, and presents a method (together with its speciﬁc
assumptions and conditions) through which we are able to
optimize the number of long-range levels L and minimize
signaling trafﬁc.
In LR-CAN, most of the signaling trafﬁc can be well de-
scribed with some formulas; hence, we can optimize the
value of the input parameters in order to minimize signal-
ing trafﬁc accurately. With a few assumptions and modiﬁ-
cations to the original LR-CAN algorithm, we can construct
an algorithm (SIGMIN) that adapts the number of long-
range contacts not only to network size (N) but to lookup
rate (λl) as well. Here we exclude the cost-limit function
from the optimization procedure since in this task we do
not care about lookup cost, only about the minimization of
aggregated signaling trafﬁc.
The problem is thus to ﬁnd an optimal value for the num-
ber of long-range levels (L) in function of network size
(N), long-range maintenance frequency (λp), and lookup
rate (λl). A method for gathering information about N was
described earlier in Section 3. The frequency of long-range
maintenance, i.e., the stabilization period λp is a global net-
work parameter. However, for λl we need to implement an
aggregated-data-collection technique which collects lookup
rate data from the entire network, or at least from a signif-
icant part of it. In our solution, data collection is initiated
by the bottom-leftmost node of the ID space, which can be
a dedicated anchor node in the LR-CAN if it is persistent
since the launch of the system; the collection has a cost of
O(N). After the data collection, this node can evaluate the
input parameters and ﬁnd the optimal value of L, which is
then broadcast to the network. Consequently, the earlier
deﬁnition of L, which was presented in Section 3 and was
based on individual decisions of peers, has to be changed
to a method where one node derives the optimal value of L
based on aggregated, global information.
By the following equations, we look for the L value
that yields the minimal aggregated cost of long-range con-
tact maintenance (Mcost(L)) and lookup cost (Lcost(L)) for
the whole network, given the parameters described above.
Mcost(L) includes the message cost of checking one long-
range contact, the network size N, the maintenance fre-
quency (λp), and the number of long-range contacts when L
levels and d dimensions are used (see Equation 7). Lcost(L)
includes the network size, the lookup rate (λl), and the rout-
ing cost on long- and short-range contacts (see Section 4).
Mcost(L) =
½
2 · N · λp · (1 + L),
if − 1 ≤ L < 0
2 · N · λp · (1 + L · 2d),
if L ≥ 0
(8)
Lcost(L) = N · λl · (LRavg(L) +
d
2 N
1
d
2L+1 · m avg
max ), if L ≥ −1
(9)
LRavg(L) ≈
½
0.5 · (1 + L),
if − 1 ≤ L < 0
0.5 + d · 0.343 · L,
if L ≥ 0, d = 1, 2
(10)
The global optimum for L is:
Lopt ≈ arg
min
³h
−1,log2 N
1
d /2
i
,L∈R
´ (Mcost(L) + Lcost(L))
(11)
For the long-range cost LRavg(L), we gave a close ap-
proximation in equation 10, derived from the average cost
resulting from the following formulas:
c(L) =2L ·
³1
2 + L
2
´
−
−2L ·
Ã L
X
i=2
Ã
1
2i +
⌊log2 (i−1)⌋
X
j=1
1
8j
!!
, if L ≥ 1
(12)
LRavg(L) =























1
2 ,
if L = 0
(c(L) − 1)
2L
+
1
2L+1 ,
if d = 1, L ≥ 1
(c(L) − 1)
2L−1
+
1
22L+1 −
−4 ·
⌊log2 (L+1)⌋
X
i=1
1
4i ·
⌊log2 (L)⌋
X
i=1
1
4i
if d = 2, L ≥ 1
(13)
The validity of these formulas can be checked against the
weighted average of routing zones, as presented in Fig. 3
and Fig. 4. Equations 12 and 13 prove the validity of equa-
tion 10 only for maximum two dimensions; however, two
dimensions are adequate for LR-CAN and SIGMIN, since
the lookup performance does not depend on d in these two
algorithms, as mentioned in Section 4.
Solving equation 11 yields the optimal value of L, which
will be a real value. However, on a given node, L must have

75
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
 0
 50000
 100000
 150000
 200000
 250000
 300000
 350000
 400000
 450000
0
1
2
3
4
5
6
7
Absolute nr. of messages generated
Simulation phases
L=0
L=2
SIGMIN
Figure 10. Simulation of lookup rate inﬂuence
on signaling
 0
 2
 4
 6
 8
 10
 12
0
1
2
3
4
5
6
7
Average message cost of lookups
Simulation phases
L=0
L=2
SIGMIN
Figure 11. Corresponding lookup cost of the
same simulation
an integer value. Thus, the nodes will individually choose
the integer value either immediately below or immediately
above the optimal value, using a simple stochastic method.
As a result, the global average of L will be close to the
optimal value.
We need to optimize the performance of the network in
the future based on past data. Hence, peers should provide
detailed information about their lookup activity on a regu-
lar basis (e.g., daily), not only a simple average of a certain
larger timeframe. On the other hand, the decision made in
advance is only valid if network population does not de-
crease or increase signiﬁcantly in the timeframe the deci-
sion is made for, or the change has to be predictable.
The simulation that produced the graphs in Fig. 10 con-
sisted of equal timeframes with constant node population.
Only lookup rate changed in each phase, linearly increas-
ing from phase 0 to 3, being constant in phase 3 to 4, and
decreasing from phase 4 to 7. In one case L was set to 0,
in another case L was set to 2 in a static manner for the
entire network, while in the third case nodes used the SIG-
MIN algorithm to determine the value of L. SIGMIN was
started with no long-range contacts. Note that setting up
new levels of long-range contacts has some non-negligible
cost, which is clearly shown in the ﬁrst phase for the L = 2
variant (boxes in the middle); if L = 0, there are much less
contacts to set up and maintain (boxes on the left). SIG-
MIN (boxes on the right) might also be affected by this ad-
ditional signaling cost, as an increasing lookup rate might
trigger the introduction of new long-range contacts, accord-
ing to equations 8–11. This effect can be seen in phases 1
and 2; hence, in phase 2 SIGMIN generates a higher signal-
ing load than the other solutions, although only by a slight
margin (this casual cost is not expressed by the formulas
8–11). The remarkable ability of the SIGMIN algorithm is
to always converge to the more efﬁcient variant in terms of
signaling (Fig. 10). The average message cost of lookups
corresponding to the variants is depicted in Fig. 11.
7. Conclusion
In this paper, we proposed an enhanced algorithm for
CAN, which reduces the scope of the original routing
method in the ID space by deploying long-range contacts.
These contacts are deployed adaptively, so as to limit the
maximum possible route length in the original greedy for-
warding step of CAN. If the lookup cost exceeds a deﬁned
limit as network grows, LR-CAN deploys new levels of
long-range contacts. As a consequence, the lookup cost be-
comes proportional to O(logN) for the right SR(N). Our
simulations prove our theoretical performance evaluation to
be appropriate. Compared to popular DHT algorithms (e.g.,
Chord and Kademlia), LR-CAN has an outstanding perfor-
mance in networks of large-scale and even in dynamic sce-
narios.
We also presented a method to describe the signal-
ing trafﬁc of LR-CAN originating from message cost of
lookups and contact maintenance. By a few measurable pa-
rameters we can optimize the number of long-range con-
tacts in the network to minimize the signaling trafﬁc of LR-
CAN.
Acknowledgment
The authors would like to the Hungarian National Infor-
mation Infrastructure Development Programme for the su-
percomputer cluster we were allowed to use for our time
and resource consuming simulations.
References
[1] S. Ratnasamy et al. A scalable content-addressable network.
In Proc. of the ACM SIGCOMM, pages 161–172, San Diego,
CA, 2001.
[2] I. Stoica et al. Chord: Scalable peer-to-peer lookup service
for internet applications. In Proc. of the ACM SIGCOMM,
pages 149–160, San Diego, CA, 2001.

76
International Journal On Advances in Networks and Services, vol 1 no 1, year 2008, http://www.iariajournals.org/networks_and_services/
[3] J. Jiang et al. Bichord: An improved approach for lookup
routing in chord. Lecture Notes in Computer Science, AD-
BIS, 3631:338–348, 2005.
[4] P. Maymounkov and D. Mazi´eres. Kademlia: A peer-to-peer
information system based on the xor metric. In Proc. of the
1st IPTPS’02, pages 53–65, Cambridge, MA, 2002.
[5] A. Rowstron and P. Druschel. Pastry: Scalable, distributed
object location and routing for large-scale peer-to-peer sys-
tems. In Middleware 2001, pages 329–350, Heidelberg, Ger-
many, 2001.
[6] D. Watts and S. Strogatz.
Collective dynamics of small-
world networks. Nature, 393(6684):440–442, 1998.
[7] J. Kleinberg. The small-world phenomenon: An algorithmic
perspective. In Proc. 32nd ACM Symposium on Theory of
Computing, pages 163–170, Portland, OR, 2000.
[8] A. Ohtsubo et al. The power of shortcuts in greedy rout-
ing in content-addressable networks.
In Lecture Notes in
Computer Science, EUC, volume 3207, pages 994–1003.
Springer Berlin, 2004.
[9] S. Ratnasamy et al. A scalable content-addressable network.
In TR–00–010, Berkeley, CA, 2001.
[10] V. Darlagiannis, A. Mauthe, N. Liebau, and R. Steinmetz.
An adaptable, role-based simulator for p2p networks.
In
Proc. of Int. Conference on Modeling, Simulation, and Vi-
sualization Methods, pages 52–59, Las Vegas, NV, 2004.
[11] Peerfactsim.kom. http://www.peerfact.org, 2007.
[12] Gnutella. http://www.gnu.org, 2007.
[13] D. Liben-Nowell et al. Analysis of the evolution of p2p sys-
tems. pages 233–242, 2002.
[14] B. Kov´acs and R. Vida. An Adaptive Approach to Enhance
the Performance of Content-Addressable Networks. In Proc.
of ICNS 2007, pages 93–98, Athens, Greece, 2007.

