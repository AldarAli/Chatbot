A Bandwidth Assignment Method
for Downloading Large Files with Time Constraints
Ken Katsumoto, Kazuhiko Kinoshita,
and Koso Murakami
Department of Information Networking,
Graduate School of Information Science and Technology,
Osaka University
1-5 Yamadaoka, Suita-shi, Osaka, Japan
Email:{katsumoto.ken,kazuhiko,murakami}@ist.osaka-u.ac.jp
Nariyoshi Yamai
Center for Information Technology and Management,
Okayama University
3-1-1 Tsushima-naka,
Kita-ku, Okayama-shi, Okayama, Japan
Email: yamai@cc.okayama-u.ac.jp
Abstract—In recent years, the numbers of requests to down-
load large ﬁles via large high-speed computer networks have
been increasing rapidly. Typically, these requests are handled
in a “best effort” manner, resulting in unpredictable completion
times. In this paper, we consider a model where a download
request either must be completed by a user-speciﬁed deadline or
must be rejected if the deadline cannot be satisﬁed. We propose
a dynamic bandwidth assignment method for reducing the call-
blocking probability in a bandwidth-guaranteed network. Finally,
we present simulations that show its excellent performance.
Keywords—ﬁle downloading; time constraints; bandwidth as-
signment.
I.
INTRODUCTION
In recent years, various types of data have become available
in large quantities via large high-speed computer networks [1].
Users hope to be able to access these data ﬁles routinely and
rapidly by fast downloading.
There are many studies on ﬁle downloading, but most focus
on shortening the average download-completion time [2][3][4].
In such studies, it is difﬁcult to predict and/or guarantee
download completion times, because they depend strongly on
the network conditions [5][6].
To overcome this problem, one study has introduced a
model where a download request must either be completed by
a user-speciﬁed deadline or be rejected if the deadline cannot
be satisﬁed [7][8]. Note that, in this model, it is not necessary
to shorten the downloading time below its deadline, and it
is preferable to accept requests wherever possible, thereby
reducing the number of rejected requests. To handle many
requests that will meet their deadline and to reduce the call-
blocking probability, it is important to consider the bandwidth
assignment for each request and to allow a margin in the
network for handling future requests.
In this downloading model, a dynamic bandwidth as-
signment method called ChangeRates has been proposed
[8]. This achieves a reduction in call-blocking probability
by considering the minimum bandwidth that will meet the
deadline.
To be able to accept additional requests, it is preferable
that there be as many ongoing requests with loose deadlines
as possible in the network. In this paper, we propose a dynamic
bandwidth assignment method that reduces the call-blocking
probability by giving a higher priority to those requests that
potentially allow wider margins.
The remainder of the paper is structured as follows. Section
II presents the method for downloading within a deadline,
using an existing bandwidth assignment method. In Section
III, we propose a dynamic bandwidth assignment method and
evaluate its performance in Section IV. Section V concludes
the study.
II.
DOWNLOADING FILES WITH TIME CONSTRAINTS
A. Problem Formulation
A download request with time constraint Ri(i = 1, 2, ...)
is deﬁned by the tuple [9]:
Ri = (si, di, Ai, Fi, Di).
(1)
As suggested by their names, si
= source node, di
=
destination node, Ai = arrival time of the request, Fi = ﬁle
size, and Di = the request’s deadline. In this formulation,
request i must be completed by Ai + Di. Note that, as time
elapses, Fi and Di will decrease. We therefore describe them
as Fi(t) and Di(t), respectively, where t denotes the current
time.
For each request Ri, MinRatei(t) is deﬁned as the mini-
mum average transfer rate that will meet the request’s deadline.
MinRatei(t) can be determined from the ﬁle size Fi(t) and
deadline Di(t):
MinRatei(t) = Fi(t)
Di(t).
(2)
In addition, MaxRatei(t) is deﬁned as the maximum
bandwidth that can be assigned to Ri, i.e., the available
bandwidth for the path [10]. This is given by the minimum
available bandwidth among all links within the path. The
available bandwidth for each link will vary according to the
bandwidth assignment method. For example, if the assigned
bandwidth is ﬁxed, the available bandwidth is just the residual
capacity of the link. However, if the assigned bandwidth is
adaptive, the available bandwidth will be the link capacity
minus MinRate for the existing requests.
55
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-292-9
EMERGING 2013 : The Fifth International Conference on Emerging Network Intelligence

Fig. 1 shows an example of the available bandwidth for a
path. The link capacities for links A–B, B–C, and C–D are
all 100 Mbps. The existing request is assigned 30 Mbps for
link A–B and 50 Mbps for link C–D. The assigned bandwidth
is ﬁxed. In this case, the available bandwidths for A–B, B–C,
and C–D are 70, 100, and 50 Mbps, respectively. As a result,
the MaxRate for the path A–D is 50 Mbps, which is the
minimum available bandwidth for the links A–B, B–C, and
C–D.
A
B
C
D
Node
30 Mbps
50 Mbps
between
A? D = 50 Mbps
70 Mbps
100 Mbps
50 Mbps
Link capacity
100 Mbps
Download request
Available bandwidth
Figure 1.
MaxRate for the path
B. Download Model
In this paper, we assume the following network character-
istics. The bandwidth assigned to each download connection
is guaranteed. There is a database for managing essential
information, such as network topology, link capacity, and
ongoing requests, for path ﬁnding and bandwidth assignment
[11]. The access networks are sufﬁciently fast that they cannot
become potential bottlenecks.
For such a network, we consider the following download
model. First, a user requests a download within an allowable
deadline. For this new download request, a search is made for
a feasible route that will satisfy the request. If such a route
is not found, the request is rejected. Otherwise, the request’s
route is decided, and the assignment of an adequate bandwidth
is considered. The assignment of appropriate bandwidth for
meeting the deadline is an important problem.
C. Existing Methods
We introduce two typical bandwidth assignment methods
[9].
•
Max: always assigns MaxRate on demand.
•
Min: always assigns MinRate on demand.
Max’s advantage is that the whole bandwidth is used and
almost no bandwidth remains idle, but it tends to lead to
resource competition at high network loads and to rejection
of future requests.
Conversely, downloading is inefﬁcient and takes more time
when using Min. However, much bandwidth will remain idle
for future requests, and the method can handle many requests
in parallel.
For these ﬁxed bandwidth assignment methods, if no path
with at least MinRate bandwidth is available for the request,
the request is rejected.
Therefore,
we
consider
an
existing
method
called
ChangeRates that changes the assigned bandwidth dynami-
cally [12]. For this method, the bandwidth assigned to request
Ri is proportional to MinRatei(t). Note that this will change
during downloading. The speciﬁc behavior of this method is
as follows.
When a new request occurs, ChangeRates ﬁrst searches
for a path with at least MinRate. If found, MaxRate is
assigned to the request. Otherwise, a process that reassigns
the bandwidths for ongoing requests is invoked, as follows.
For each link Cj, θj is computed by:
θj =
Cj
∑ MinRatei
,
(3)
where ∑ MinRatei is the sum of the MinRate values for
ongoing requests using link Cj. For cases where θj ≥ 1, a new
request can use the link by changing the assigned bandwidths
for the ongoing requests. A path that only uses links with
θj ≥ 1 is therefore sought. If such a path for assignment
to the new request cannot be found, the request is rejected.
Otherwise, for each link Ck on the path, RateCk, the assigned
bandwidth for Ri, is calculated by:
RateCk = θk × MinRatei.
(4)
Ri’s assigned bandwidth Ratei is the bottleneck bandwidth
for the path and is determined by the minimum RateCk:
Ratei = min(RateCk).
(5)
ChangeRates can reduce the blocking probability to be-
low that for the ﬁxed bandwidth assignment methods.
III.
A BANDWIDTH ASSIGNMENT METHOD
A. Proposed Method
For ChangeRates, the assigned bandwidth is simply
proportional to MinRate. However, to reduce the blocking
probability, it would be more effective to handle requests
preferentially, thereby producing a greater time margin for
the network. A time margin is deﬁned as a download time
that could be shortened by assigning a bandwidth greater
than MinRate. We therefore consider a bandwidth assignment
method with the following policies.
•
Deﬁne an evaluation value for each request. This value
indicates a time margin to be obtained by considering
the use of bandwidth resources and the use of time.
•
Assign bandwidths in descending order of evaluation
value.
We deﬁne Ei, which is an evaluation value for each request
Ri, using the residual ﬁle size Fi, the number of hops
of the assigned path Hi, the maximum assigned bandwidth
MaxRatei, and MinRatei as follows:
Ei = Fi × Hi × (1 − MinRatei
MaxRatei
).
(6)
A large value for Fi shows that there is room to pro-
duce a time margin for Ri. A large Hi indicates that Ri
tends to use network resources heavily. Finally, a large
56
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-292-9
EMERGING 2013 : The Fifth International Conference on Emerging Network Intelligence

1 − MinRate/MaxRate shows that a greater time margin
may be obtained when Ri receives MaxRate compared with
MinRate. By assigning MaxRatei to the Ri that has the
largest Ei, a greater time margin is obtained and the ﬂexibility
in bandwidth assignment is improved. As a result, this method
is able to handle more requests and reduces the blocking
probability.
We now explain the speciﬁc procedures in the proposed
method. Suppose that a new request Rn+1 arrives while
requests Ri(i = 1, ..., n) are ongoing. First, the proposed
method searches for a feasible path for Rn+1. In this process,
Dijkstra’s algorithm is applied using the inverse of the available
bandwidth of a link as the link cost.
Next, the proposed method calculates the evaluation value
for all requests, and assigns MaxRate to the request that
has the largest evaluation value. The evaluation value is then
recalculated for the requests that are yet to be assigned a
bandwidth, with the assigned bandwidth also being determined
as MaxRate. These processes are repeated until the assigned
bandwidths for all requests are determined. Furthermore, on
the completion of an ongoing request, the same bandwidth
assignment procedure is invoked.
Figs. 2–5 show an example of the execution of the proposed
algorithm.
Link capacity：100 Mbps
Link capacity： 70 Mbps
A
B
C
Node
:70 Mbps
:70 Mbps
：2496 Mb
：126 sec
：20 Mbps
Figure 2.
Execution example (1/4)
First, Fig. 2 shows the arrival of a new request R1 with an
F1 of 2496 Mb and a D1 of 126 sec. MinRate1 is therefore 20
Mbps. However, in the absence of other requests, R1 receives
100 Mbps, which is the capacity of the link A–B.
A
B
C
:15.5 Mbps
:84.5 Mbps
:15.5 Mbps
：1796 Mb
：116 sec
：15.5 Mbps
：350
：7200 Mb
：266 sec
27 Mbps
: 610
Link capacity：100 Mbps
Link capacity： 70 Mbps
Node
Figure 3.
Execution example (2/4)
Next, at 10 sec after A1, Fig. 3 shows the arrival of R2,
which has an F2 of 7200 Mb and a D2 of 266 sec. Because
R1 has consumed 70 Mbps for 10 sec, F1 and MinRate1 are
recalculated as follows:
F1 = 2496 − 70 × 10 = 1796Mb.
(7)
MinRate1 = 1796
116 ≒ 15.5Mbps.
(8)
Here, E1 and E2 are calculated as follows:
E1 = 1796 × 2 × (1 − 15.5
70 ) ≒ 350.
(9)
E2 = 7200 × 1 × (1 − 27
84.5) ≒ 610.
(10)
Therefore, 84.5 Mbps of MaxRate2 has to be assigned to R2,
with the remaining bandwidth of 15.5 Mbps being assigned to
R1.
A
B
C
:15 Mbps
:15 Mbps
:30 Mbps
:55 Mbps
:55 Mbps
：8000 Mb
：260 sec
：30 Mbps
：900
：1600 Mb
：106 sec
：15 Mbps
：260
：6400 Mb
：256 sec
：25 Mbps
：430
Link capacity：100 Mbps
Link capacity： 70 Mbps
Node
Figure 4.
Execution example (3/4)
Next, at 10 sec after A2, Fig. 4 shows the arrival of R3,
which has an F3 of 8000 Mb and a D3 of 260 sec. R1 and
R2 have consumed 15.5 Mbps and 84.5 Mbps for 10 sec,
respectively. F1 and F2 are recalculated as follows:
F1 = 1796 − 15.5 × 10 ≒ 1600Mb.
(11)
F2 = 7200 − 84.5 × 10 ≒ 6400Mb.
(12)
In the same way, the Ei value for each request is calculated
as follows:
E1 = 1600 × 2 × (1 − 15
45) ≒ 260.
(13)
E2 = 6400 × 1 × (1 − 25
55) ≒ 430.
(14)
E3 = 8000 × 2 × (1 − 30
55) ≒ 900.
(15)
At this stage, an assigned bandwidth for R3 that has the highest
evaluation value is considered. For R3, 60 Mbps (100 Mbps
of link capacity minus MinRate1 and MinRate2) can be
assigned to the link B–C. However, only 55 Mbps (70 Mbps
of link capacity minus MinRate1) can be assigned to the link
A–B. Therefore, 55 Mbps is assigned to R3. Next, E1 and E2
are recalculated as follows:
E1 = 1600 × 2 × (1 − 15
15) = 0.
(16)
E2 = 6400 × 1 × (1 − 25
30) ≒ 130.
(17)
Therefore, 30 Mbps is assigned to R2, which has the larger
evaluation value, and the remaining bandwidth of 15 Mbps is
assigned to R1.
57
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-292-9
EMERGING 2013 : The Fifth International Conference on Emerging Network Intelligence

A
B
C
:30Mbps
:70 Mbps
：2168 Mb
：154 sec
：14 Mbps
：433
：3220 Mb
：150 sec
：21.5 Mbps
：302
:70 Mbps
Link capacity：100 Mbps
Link capacity： 70 Mbps
Node
Figure 5.
Execution example (4/4)
With no additional requests arriving, R1 completes at 106
sec after A3, as shown in Fig. 5. Here, F2 is 6400−30×106 =
3220Mb and F3 is 8000 − 55 × 106 = 2168Mb. E2 and E3
are calculated as follows:
E2 = 3220 × 1 × (1 − 21.5
86 ) ≒ 302.
(18)
E3 = 2168 × 2 × (1 − 14
70) ≒ 433.
(19)
Therefore, 70 Mbps is assigned to R3, with R2 receiving the
remaining bandwidth of 30 Mbps.
IV.
PERFORMANCE EVALUATION
A. Simulation Model
We evaluated the performance of the proposed method by
experimental simulation. In the simulation, the network had
Waxman’s random topology [13], with 100 nodes and about
300 links. Each link in the network had a uniform capacity of
1 Gbps. The download requests were generated via a Poisson
arrival process, with an average arrival rate of λ. The source
and destination nodes for each request were selected randomly.
The blocking probability was used as the performance measure
and the existing ChangeRates method was used as a method
for comparison.
B. Simulation Results
The proposed method was evaluated for the scenarios
described below.
1) Scenario 1: This scenario enabled the basic performance
of the proposed method to be evaluated. In this scenario, all
requests involved a ﬁle size of 5 GB and a deadline of 200
sec. Fig. 6 shows the results, where the proposed method
outperforms the existing method for any average arrival rate.
2) Scenario 2: This scenario was used to evaluate the
performance in a situation where three requests with equal
MinRate arrive, having ﬁle sizes of 2.5 GB, 5 GB, and
7.5 GB, and deadlines of 100 sec, 200 sec, and 300 sec,
respectively. The total blocking probability for this scenario
is shown in Fig. 7. This graph is similar to that for Scenario
1. Furthermore, as shown in Fig. 8, when the MinRate at each
request’s arrival was the same, we can note that the number of
rejected requests is almost the same regardless of the request’s
ﬁle size and deadline.
10-4
10-3
10-2
10-1
1
 2.6
 2.7
 2.8
 2.9
 3
Blocking Probability
Arrival Rate (requests/sec)
Proposal
Exist
Figure 6.
Scenario 1
10-4
10-3
10-2
10-1
1
 2.6
 2.7
 2.8
 2.9
 3
Blocking Probability
Arrival Rate (requests/sec)
Proposal
Exist
Figure 7.
Scenario 2 : total
3) Scenario 3: The ﬁnal scenario aimed to evaluate the
effect of differences in the requests’ deadlines. We assume the
arrival of three requests that have the same ﬁle size of 5 GB but
different deadlines of 100 sec, 200 sec, and 300 sec. As shown
in Fig. 9, we can note the reduction in the blocking probability
for the proposed method in this scenario. Fig. 10 shows that the
proposed method has a low blocking probability for requests
of 100 sec at an high arrival rate, but the existing method is
low for requests of 200 sec and 300 sec. This indicates that
the existing method could reduce the blocking probability by
handle many requests which would load to the network more
lightly, and it has no room for the network than the proposed
method. Therefore, it is considered that the proposed method
to be more effective for requests of the short deadline.
V.
CONCLUSION
This paper has focused on downloading large ﬁles with
time constraints. We have proposed a dynamic bandwidth
assignment method for reducing the call-blocking probability
and have evaluated its performance by experimental simula-
tions. The simulation results show that our proposed method
is effective.
In future work, we will enhance the proposed method to
enable it to work with distributed management. In addition,
58
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-292-9
EMERGING 2013 : The Fifth International Conference on Emerging Network Intelligence

10-4
10-3
10-2
10-1
1
 2.6
 2.7
 2.8
 2.9
 3
Blocking Probability
Arrival Rate (requests/sec)
Proposal(100sec)
Proposal(200sec)
Proposal(300sec)
Exist(100sec)
Exist(200sec)
Exist(300sec)
Figure 8.
Scenario 2 : each request
10-4
10-3
10-2
10-1
1
 2.6
 2.7
 2.8
 2.9
 3
Blocking Probability
Arrival Rate (requests/sec)
Proposal
Exist
Figure 9.
Scenario 3 : total
we will investigate routing methods that are better suited to
the proposed bandwidth assignment method.
ACKNOWLEDGMENT
This research was partly supported by the National Institute
of Information and Communications Technology (NICT).
REFERENCES
[1]
A. S. Tanenbaum, “Computer Networks Fourth Edition,” Prentice-Hall,
New Jersey, 2003.
[2]
H. Okada, T. N. Trung, K. Kinoshita, N. Yamai, and K. Murakami, “A
Cooperative Routing Method for Multiple Overlay Networks,” Proceed-
ings of the 6th Annual IEEE Consumer Communications and Networking
Conference (CCNC 2009), pp. 1–2, Jan. 2009.
[3]
L. Toka, M. Dell’Amico, and P. Michiardi, “Data Transfer Scheduling
for P2P Storage,” IEEE P2P, pp. 132–141, Sept. 2011.
[4]
Y. M. Chiu and D. Y. Eun, “Minimizing File Download Time in
Stochastic Peer-to-Peer Networks,” IEEE/ACM Trans. Networking, vol.
16, no. 2, pp. 253–266, Apr. 2008.
[5]
S. Kamei, “Status and Trafﬁc Issues of Peer-to-Peer Technology,” Com-
puter Software, vol.22, no.3, pp. 8–18, 2005.
[6]
S. Gorinsky and N. Rao, “Dedicated Channels as an Optimal Network
Support for Effective Transfer of Massive Data,” Proceedings of 25th
IEEE International Conference on Computer Communications, pp. 1–5
Apr. 2006.
10-4
10-3
10-2
10-1
1
 2.6
 2.7
 2.8
 2.9
 3
Blocking Probability
Arrival Rate (requests/sec)
Proposal(100sec)
Proposal(200sec)
Proposal(300sec)
Exist(100sec)
Exist(200sec)
Exist(300sec)
Figure 10.
Scenario 3 : each request
[7]
B. Chen and P. Primet, “Scheduling deadline-constrained bulk data
transfers to minimize network congestion,” Proceedings of 7th IEEE
International Symposium Cluster Computing and the Grid (CCGRID),
pp. 410–417, May 2007.
[8]
D. Andrei, M. Batayneh, S. Sarkar, C. Martel, and B. Mukherjee,
“Deadline-Driven Bandwidth Allocation with Flexible Transmission
Rates in WDM Networks,” Proceedings of the IEEE International Confer-
ence on Communications 2008 (ICC 2008), pp. 5354–5358, May 2008.
[9]
D. Andrei, “Efﬁcient Provisioning of Data-Intensive Applications over
Optical Networks,” Ph.D. thesis, UC.Davis, 2009.
[10]
R. S. Prasad, M. Murray, C. Dovrolis, and K. Claffy, “Bandwidth Esti-
mation: Metrics, Measurement Techniques, and Tools,” IEEE Network,
Vol. 17, No. 6, pp. 27–35, Nov.–Dec. 2003.
[11]
M. Yamazaki, Y. Hirota, K. Kinoshita, H. Tode, and K. Murakami, “A
Service Provision Method for Service Platform Uniﬁed with Network
Control,” IEICE technical report, ICM2011-43, pp. 67–72, Jan. 2012.
[12]
D. Andrei, M. Tornatore, M. Batayneh, C. U. Martel, and B. Mukherjee,
“Provisioning of Deadline-Driven Requests With Flexible Transmission
Rates in WDM Mesh Networks,” IEEE/ACM Transactions on Network-
ing, Vol. 18, No. 2, pp. 353–366, Apr. 2010.
[13]
B. M. Waxman, “Routing of multipoint connections,” IEEE Journal of
Selected Areas in Communications, Vol. 6, No. 9, pp. 1617–1622, Dec.
1988.
59
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-292-9
EMERGING 2013 : The Fifth International Conference on Emerging Network Intelligence

