FIELDS: Flow Intrusion Extrusion Largescale Detection System
Nicolas Grenèche
Université Paris 13 — PRES Sorbonne Paris Cité
LIPN UMR CNRS 7030 / DSI
99 Avenue Jean-Baptiste Clément
93430 Villetaneuse (France)
Email: nicolas.greneche@univ-paris13.fr
Quentin Narvor, Jérémy Briffaut, Christian Toinard
ENSI de Bourges, LIFO — EA 4022
88 Bld Lahitolle
F-18020 Bourges Cedex, France
Email: {quentin.narvor,jeremy.briffaut,
christian.toinard}@ensi-bourges.fr
Abstract—This paper presents an advanced pre-processing,
called FIELDS, for analyzing the network trafﬁc based on
ﬂow assessments. FIELDS is an extensible Network Security
Monitoring that supports 1) advanced trafﬁc pre-processing,
2) forensics and 3) existing Network Extrusion/Intrusion De-
tection Systems. FIELDS has been experimented during two
months using a large real network thanks to its non intrusive
nature. The results show the efﬁciency of different heuristics
for pre-processing the trafﬁc relevant of an intrusion. FIELDS
provides an uniﬁed and efﬁcient tool for pre-processing the
network trafﬁc and detecting/controlling the potential inter-
nal/external intruders. FIELDS solves the problem of scalabil-
ity for the monitoring of the security of large networks. It can
be easily extended to integrate other heuristics and correlate
the different analysis.
Keywords-Network ﬂows; Intrusion Detection; Network Foren-
sic; Network Capture; Attack Prevention
I. INTRODUCTION
Network Security Monitoring is associated with different
methods such as capturing the network trafﬁc, analyzing the
trafﬁc, logging the trafﬁc, forensics and network intrusion
detection (NIDS). Classical NIDS has been studied since
a long time [1]. They generally compute the ingoing and
outgoing network trafﬁc for detecting the intrusions. Studies
mainly address how to learn [2] or modelize [3] a network
threat. The major drawback is how to analyze the whole
trafﬁc in a scalable manner. FIELDS proposes a generic
method for solving the problem of scalability. It provides
a pre-processing of the outgoing trafﬁc (pre-extrusion) as
a mean to suspect the compromising of the local hosts
(intrusion). Using the suspected list of hosts, FIELDS enables
a safe Network Extrusion Detection System (NEDS) by
reusing existing security tools (e.g. NIDS, anti-virus, anti-
malware, HIDS, HIPS, ...) to measure the compromising.
FIELDS provides an extensible and non-intrusive approach
for 1) detecting potential intruders/victims based on efﬁ-
cient heuristics, 2) collecting the trafﬁc of those eventually
malicious hosts and 3) analyzing the corresponding ﬂows
and 3) reusing an existing packet ﬁlter while guaranteeing
a low overhead. Despite
FIELDS extrudes the outgoing
trafﬁc from the internal malicious hosts, it can provide the
external malicious hosts. Thus, FIELDS can also improve
the detection/prevention of intrusions coming from external
hosts (pre-intrusion). Globally, FIELDS reduces the overhead
of a NIDS/NEDS approach by permitting a consistent analysis
only for a subset of the whole trafﬁc associated with the
internal/external suspected hosts. The second section de-
scribes the state of art related to heuristics for pre-processing
the outgoing network trafﬁc and to the network capture.
A third section describes our major objectives for pre-
processing the outgoing trafﬁc, analyzing the suspected hosts
and controlling/measuring the suspected hosts. The fourth
section describes our solution. A ﬁfth section describes our
experimentation. Finally, the paper describes the perspec-
tives and summarizes the FIELDS approach.
II. STATE OF THE ART
Classical NIDS approaches such as
[2], [3] need pre-
processing in order to limit the overhead and reduce the
number of false positive alerts. Thus, our state of art con-
siders only the pre-processing problem in order to have 1)
an updated list of the suspected hosts and 2) an exhaustive
capture of the abnormal trafﬁc coming from those hosts. This
section shows which heuristics enable to compute a list of
suspects based on extrusion, i.e. abnormal outgoing trafﬁc
from internal hosts that is a consequence of a successful
intrusion. Then, the section goes on with the methods
available for capturing the trafﬁc of the suspected hosts.
Finally, it describes recent works related to extrusion.
IP blacklist: This is the most simple heuristic. Despite
it’s simplicity, this is currently massively used to detect
malwares that contain hardcoded addresses or names. For
malwares associated with a more sophisticated infrastructure
containing dynamic hosts e.g. associated with fast ﬂux based
methods [4], the IP blacklist approach becomes inefﬁcient.
IP Blacklist can be used for both intrusion and extrusion
monitoring i.e. external and internal malicious hosts.
DNS domain blacklist: This blacklist maintains a list
of malicious DNS domain names. This technique is extrusion
oriented because only the DNS requests from internal hosts
are audited. The DNS resolver of an infected host can also
responds with an unused IP address belonging to a sinkhole.
42
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

Figure 1.
DNS name blacklist
Figure 2.
IP Sinkhole for 192.168.X.X/24
In this case, as shown in Figure 1, a honeypot can handle
the connections of the malwares [5] to this address.
IP Sinkhole:
ISP sinkholes are used at
BGP level
by Internet providers to redirect and log attacks against
customers [6]. IP sinkholes are used by network admin-
istrators to monitor a trafﬁc that tries to reach unused
private networks [7], [8]. Private range of addresses are
deﬁned by the RFC1918. Addresses of the RFC1918, that
are not used by the organization, are in the sinkhole. An
implementation using a router is given in Figure 2. There
are three real networks (192.168.1.0/24, 192.168.2.0/24 and
192.168.3.0/24). Routing tables are set up to route real
private networks ﬁrst. Then, RFC1918 networks are routed.
Finally, a last route authorizes the Internet access. As a
consequence, if a packet tries to reach a non existent (but
belonging to RFC1918) network, it is captured by routing
equipments. However, this solution is intrusive because it
needs to modify the routing tables.
Network capture: As stated in [7], [8], [9] four different
kinds of information can be stored for Network Security
Monitoring (NSM): global statistics (how many data sen-
t/received to/from a given network), ﬂows (who talked to
who and how), IDS alerts and comprehensive captures. For
large organization, a comprehensive capture of each network
ﬂow is impossible but such level of detail is interesting in
terms of network forensics. Common network sensors can be
conﬁgured to perform a comprehensive capture (tcpdump)
or only a capture of the ﬂows (netﬂow, sﬂow or argus
collector). Currently, there is no hybrid collector available in
the literature. An hybrid collector would be able to switch
from one capture mode to another one to zoom on supposed
malicious ﬂows.
Recent extrusion works: Solutions such as [10] pro-
poses to install viruses and malwares for analyzing their
behaviour. Others [11] reuses snort for analyzing outgo-
ing trafﬁc. However, those approaches consider analysis of
viruses and do not solve the problem of scalability for
analyzing the whole outgoing trafﬁc.
III. MOTIVATIONS
The ﬁrst objective is to suspect a host using a network
extrusion. It is interesting since extrusion does not require
to analyze the ingoing trafﬁc reducing thus the overhead of
the analysis. Moreover, it allows to detect threats coming
also from usb or other removable resources and the hosts
do not have to be monitored. The second objective consists
in reusing simple tools efﬁcient for capturing the trafﬁc.
It is a low cost approach since tools such as BSD Packet
Filter are free and strongly supported. Third, our approach
must support different types of heuristic for computing the
list of the suspected hosts. Indeed, the IP/DNS blacklist and
sinkhole can miss some infected hosts. Thus, the list of
the malicious hosts can be computed using the the IP/DNS
blacklist and sinkhole approaches and improved with other
methods such as CERT notiﬁcations, OS ﬁngerprinting or
IDS alerts. Fourth, the approach must reuse existing security
tools (e.g. anti-virus, anti- malware, HIDS, HIPS, NIDS, ...)
to measure or recover the infected nodes. Fifth, the solution
must solve the scalability problem by analyzing part of a
network trafﬁc that is limited to to the suspected nodes.
Sixth, the network analysis must be non-intrusive and require
only a limited modiﬁcation of the capturing tool. Seventh,
the monitoring solution must support not only internal hosts
but also external hosts. The advantage is a common and
extensible approach to manage and reduce the overhead of
NEDS/NIDS tools.
IV. THE FIELDS APPROACH
FIELDS is a software that uses the BSD Packet Filter
(PF) [12] tables and PCAP logging capabilities. It requires
only a very limited modiﬁcation of PF while supporting a
large range of heuristics. In PF, a table provides a list of
IP addresses matching a destination or a source. A table
referred to as <suspicious> can be declared to store
potentially infected hosts. The lookup operation on the table
is very efﬁcient. The logging infrastructure of PF enables to
43
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

capture network packets that match a given rule in the PCAP
format. For example, the following rule enables to capture
all the trafﬁc originating from the IP addresses available in
the <suspicious> list:
1
pass in
log on em0 from <suspicious > to any
The idea of FIELDS is to express malicious ﬂows through a
dedicated policy formalizing different heuristics. This way,
FIELDS highlights malicious ﬂows. When such a ﬂow is
detected, FIELDS switches into a comprehensive capture of
the trafﬁc. FIELDS can be considered as a kind of NEDS/NIDS
pre-processor reducing the data size that has to be analyzed
by existing NEDS/NIDS. In that sense, it is not concurrent
of existing approaches but eases their management in a
production environment in order to solve the scalability
problem while reusing off-the-shelf NEDS/NIDS tools.
V. PACKET FILTER PATCH
FIELDS uses a modiﬁed Packet Filter. The proposed patch
extends the capabilities of the PF rules. When a packet
matches a rule, PF performs some actions: pass, block or
log. Our patch adds a fourth action add which performs
the addition of a source and/or destination address in a table.
The Figure 3 describes our patch integration into PF. When
a packet reaches the PF ﬁrewall, a lookup in the tables
is preformed (step 1). A dedicated table can be declared
for each malicious ﬂows heuristic: a table <blacklist>
to store the IP addresses that try to reach the hosts of
the blacklist, a table <sinkhole> to store the addresses
talking to the sinkhole addresses, etc. If the destination or
source (depending of the meaning of the matching rule)
is present in a table, the packet is logged (step 2a). If
the corresponding address is not in a table, the packet is
submitted to a set of ﬁltering rules modelizing a set of
malicious ﬂows heuristics (step 2b). If the packet matches
with a rule, its source and / or destination IP is added to
the corresponding table (step 3a). For example, if a packet
matches a rule describing a sinkhole heuristic, its source
IP is added to the <sinkhole> table. Thus, any packet
involving this IP address will be logged (step 2a). These
logs are analyzed afterwards by different IDS tools (such
as snort) in order to identify malwares. FIELDS extends the
grammar of the PF rules. Our patch is about 300 lines of
C, covering kernel code (100 lines) and userland pfctl
command (200 lines). This patch is not intrusive since it
does not modify the sensible parts of the kernel.
A. Extension of the PF grammar
A new option has been added in the rules syntax: the
option add. This option must be used after all the usual
options of pf. add have to be followed by at least one of
these 2 options:
• ipsrc <src_tblname>: add source IP address of
the matched packet to the table "src_tblname" ;
Figure 3.
FIELDS architecture
• ipdst <dst_tblname>: add destination IP adress
of the matched packet to the table "dst_tblname".
Let’s give examples of such a rule:
1
pass in on em0 from
1 9 2 . 1 6 8 . 0 . 0 / 1 6
to any add ipdst <
tableA >
In this rule, the destination addresses of all the packets
coming on the network interface em0 from the subnet
192.168.0.0/16 will be added to the table named tableA.
44
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

1
pass in on em0 from
1 9 2 . 1 6 8 . 1 . 0 / 2 4
to
1 9 2 . 1 6 8 . 2 . 0 / 2 4 add
ipsrc <tableA > ipdst <tableB >
In this rule, the source addresses of all the packets com-
ing on em0 from the subnet 192.168.1.0/24 to the subnet
192.168.2.0/24 will be added to the table named tableA.
In the same way, destination addresses will be added to the
second table named tableB.
B. Modiﬁcations on PF
A new structure named add has been added in the ﬁle
pfvar.h. This structure stores data required by our new
options:
1
s t r u c t add {
2
u_int8_t check_add ;
3
s t r u c t
{
4
u_int8_t
check_src ;
5
char src_tblname [PF_TABLE_NAME_SIZE ] ;
6
s t r u c t
pfr_ktable ∗src \ _ t b l ;
7
} src ;
8
s t r u c t
{
9
u_int8_t
check_dst ;
10
char dst_tblname [PF_TABLE_NAME_SIZE ] ;
11
s t r u c t
pfr_ktable ∗ d s t _ t b l ;
12
} dst ;
13
} add ;
The existence of the add keyword in a ﬁltering rule is
ﬂagged with the check_add member. This keyword wait
for source or destination IP addresses associated with the
tables required to store those addresses. Those IP addresses
can be assigned to different tables, i.e. the source address
can be associated with a table and the destination address
with another table. Thus, this structure allocates two sub
structures src and dst. Each sub structure contains a vari-
able check_[src|dst] (that ﬂags the existence of source
and / or destination IP address), [src|dst]_tablname
(name of the table used to store the
IP address) and
[src|dst]_tbl (a pointer on the table data).
In the ﬁle pf.c, a function pf_save_addrs has been
added:
1
void
pf_save_addrs ( s t r u c t
pf_rule ∗∗rule ,
s t r u c t
pf_pdesc
∗pd )
This function extracts the source and the destination ad-
dresses of the packet from the pf_pdesc structure and adds
them into the tables speciﬁed on the pf_rule structure.
This
function
is
called
four
times
respec-
tively
in
pf_test_tcp(),
pf_test_udp(),
pf_test_icmp()
and
pf_test_other()
for
covering the different levels of the IP protocols. Those four
functions are called for the ﬁrst packet of a connection.
For the following packets, PF maintains a state for the
corresponding ﬂow. Here is an extract of pf_test()
(pf_test6() for IPv6) function which handles the packet
matching for TCP:
1
switch
( packet_protocol )
2
case TCP:
{
3
pf_test_state_tcp ( ) ;
4
i f
( e x i s t i n g
state )
5
update
state
6
else
7
pf_test_tcp ( )
8
break ;
9
}
The function pf_test_tcp() is thus called for the ﬁrst
packet of a TCP connection (line 7). This is where the
instrumentation, i.e. the saving of the addresses, must be
done. In pf_test_tcp():
1
i f
( add option ) {
2
pf_save_addrs (&r ,
pd ) ;
3
}
C. Modiﬁcations on pfctl
Pfctl is the userland tool to interact with PF. Its main
function is to enable, disable and check a ruleset stored in a
conﬁguration ﬁle pf.conf. It also permits to interact with
some PF objects on the ﬂy (for example adding an IP address
to a table, list IP addresses of a table, load an anchor etc.).
PF makes use of Lex and Yacc to check a ruleset. The
Yacc grammar has been modiﬁed to take the add keyword
and its options (ipsrc and ipdst) in account.
In the ﬁle pfctl_parser.c, the add keyword has to be taken
into account in the function print_rule() that displays
the current ruleset using the pfctl command:
1
i f
( r−>add . check_add !=
0) {
2
i f
( r−>add . src . check_src != 0 && r−>add . dst . check_dst
== 0)
3
p r i n t f ( " add ipsrc <%s >" ,
r−>add . src . src_tblname ) ;
4
i f
( r−>add . src . check_src == 0 && r−>add . dst . check_dst
!=
0)
5
p r i n t f ( " add ipdst <%s >" ,
r−>add . dst . dst_tblname ) ;
6
i f
( r−>add . src . check \ _src
!= 0 && r−>add . dst . check_dst
!=
0)
7
p r i n t f ( " add ipsrc <%s> ipdst <%s >" ,
r−>add . src .
src_tblname ,
r−>add . dst . dst_tblname ) ;
8
}
Line 1, a check is performed on r (current rule) to see if
the add keyword is present on the rule through the member
check_add. If present, a check to see if the source IP (line
2), destination IP (line 4) or both (line 6) have been speciﬁed
for logging.
VI. FIELDS: NEW NSM HEURISTICS
A. IP Blacklist
Some websites, such as spamhaus, uce-protect and
so on, provide blacklists ﬁlled in by addresses that have
been judged compromised: botnet, spam, etc... These lists
can be used to block an incoming connection to the internal
network hosts. Connections incoming from these addresses
are blocked by the ﬁrewall but connections made from
internal hosts to these addresses are not controlled. Logging
these connections is interesting because it means that the
host has a suspect behavior.
The FIELDS controller can detect these connections and
then automatically launch a comprehensive capture of these
45
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

internal hosts for a further analysis. Since those internal
hosts have a suspect behavior, a deep analysis of their trafﬁcs
might tell us if they are infected, and eventually, with which
malware.
A simple bash script has been made to automatically
download updated blacklists and load them into FIELDS.
This is done without reloading the entire policy of FIELDS
thanks to pfctl.
As pf can handle lots of distinct tables, the system is very
modular. The comprehensive capture can be optional: the
ﬁrst suspect packet is always automatically logged, and the
address added into the desired table. This table just can be
used to know which host has match a given rule. Example:
1
table < b l a c k l i s t >
2
table <compromised_hosts >
3
table <internals_hosts >
4
5
pass in
log on
$ i f
from <internals_hosts > to < b l a c k l i s t >
no state add ipsrc <compromised_hosts >
6
7
pass in
log on
$ i f
from <compromised_hosts > to any no
state
8
pass in
log on
$ i f
from any to <compromised_hosts > no
state
These rules allow pf to launch a comprehensive capture on
any internals hosts of our network which try to connect to a
host from the blacklist. There are two stages is the FIELDS
process:
• Addition of the suspected host that talks to a blacklisted
address to the table <compromised_hosts> (line
5) ;
• Comprehensive capture of each packet from (line
7) and destined to (line 8) the suspects stored in
<compromised_hosts>.
B. IP Sinkhole
FIELDS can modelize an IP sinkhole. The collection of
internal subnets is $FEDE, RFC1918 addresses are stored
in $sinkhole. The em0 and em1 interfaces are linked to
the Network TAP. FIELDS is listening on them.
1
pass in
log on { em0 em1 } from $FEDE to
$sinkhole no
state add ipsrc <univ_to_sinkhole >
2
pass in
quick
log on { em0 em1 } from <univ_to_sinkhole >
to any no state
3
pass in
quick
log on { em0 em1 } from any to <
univ_to_sinkhole > no state
4
pass quick on { em0 em1 } from $FEDE to $FEDE no state
The
trafﬁc
from
the
internal
network
to
the
sinkhole
is
logged
and
the
sources
are
added
to
<univ_to_sinkhole>
(line
1).
Trafﬁc
from
(line
2)
or
destined
to
(line
3)
hosts
belonging
to
<univ_to_sinkhole>
is
dumped
and
the
packet
evaluation ends ("quick" keyword). Packets from internal
to another internal network pass without any log (line 4).
C. DNS Sinkhole
FIELDS can detect when an internal host attempts to
connect to a blacklisted address, as shown in Figure 4. But,
Figure 4.
FIELDS IP / DNS Sinkhole for 192.168.X.X/24
the connections can be done with malware domains. To
cover such connections a DNS Sinkhole is available. Thanks
to the DNS Sinkhole, our DNS gives a false IP address as
a response to a DNS request for all the domains which
are considered as compromised. Our DNS Sinkhole lists the
malware domains e.g. the domains provided by dedicated
websites covering well-know malware domains. Thanks to
our DNS Sinkhole, the host that will try to establish a
communication with a suspected domain will fail, but it
will generate an odd trafﬁc which will be recognized by
FIELDS. This false IP address has to be a private IP address
(rfc 1918), and will be recognized as a part of the sinkhole.
The rule concerning the DNS has been written after the rule
of the sinkhole to be sure it takes the priority. Otherwise,
we would not be able to see the difference between a host
making a request for a blacklisted DNS and a host trying
to contact a host in the sinkhole. A FIELDS policy enables
to log all the hosts that attempt to connect to this false IP
address. It probably means that this host is compromised by
some malware and needs an antivirus/IDS analysis.
The DNS rules are close to the blacklist rules except we
add our false IP address returned by the DNS to 1) the table
<compromised_hosts> or 2) another table.
D. Using the transport layer: Service sinkhole
Another variant of sinkhole is to rely on transport to
determine which service on non-existant hosts is tried to be
accessed. A Windows oriented sinkhole has been modelized
to catch hosts that try to access Windows ports:
• 137:
NetBIOS
name
service
(UDP)
NetBIOS-sn
lookups for "gethostbyaddr()" function;
• 138: NetBIOS datagram (UDP) non connected messages
exchange;
• 139: NetBIOS Session (TCP) Windows File and Printer
Sharing;
• 445: CIFS (TCP) used for the Common Internet
FileSystem resources sharing protocol;
• 1433: SQLServer (TCP) Microsoft SGBD.
46
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

Figure 5.
FIELDS integration topology
1
pass in
log on { em0 em1 } proto udp from $FEDE to
$sinkhole
port { 137 138 139 } no state add ipsrc <
to_winsinkhole >
2
pass in
log on { em0 em1 } proto
tcp from $FEDE to
$sinkhole
port { 445 1433 } no state add ipsrc <
to_winsinkhole >
E. Bruteforce
The extensibility of FIELDS easily enables to cover the
bruteforce trafﬁc attempting to discover the network re-
sources. A FIELDS policy enables to support the network
bruteforce. Thus, FIELDS captures all the trafﬁc of a host
that does the network scanning. Example:
1
pass in
log on
$ i f
from <internals_hosts > to <
internals_hosts > port { 22 445 } keep state
(max−src−
conn−rate
3/10 ,
overload <bruteforce > flush
global )
This rules add the address of any internal host that attempts
a bruteforce attack on ssh and samba ports into the table
<bruteforce>.
VII. EXPERIMENTATIONS
As shown in Figure 5, FIELDS is placed behind a Network
TAP. This device copy trafﬁc passing through the ﬁrewall and
the external router in a non-intrusive way. As a consequence,
in case of performance lack / bug, the real network is not
affected. FIELDS processes all the trafﬁc between 1) the In-
ternet and the University of Orleans, 2) each university pole,
and 3) university poles and the DMZ. FIELDS contains only
rules relative to the EDS/IDS pre-processing VI. Remember
that the idea is not to supply a complete EDS/IDS but an
intelligent pre-processor for exhaustively collecting only the
trafﬁc related to suspected hosts (and not only the suspected
trafﬁc).
As explained in V, FIELDS captures the trafﬁc from lists
of IPs stored in tables. When an IP is added to a table,
a timestamp of the current date is included. If the IP is
already stored in the table, PF only updates the record with
the current date. In order to avoid having growing only
tables, FIELDS also must be able to delete a record from
a table. A deletion can be carried out manually when the
host has been checked as safe by the security team. But,
PF also provides automation for the deletion. For example,
if there is no malicious activity involving this address for a
given period of time, then FIELDS deletes the entry from the
table. In practice, FIELDS uses the program expiretable
(which is shipped with PF) for removing an address after
a period of time (2 days on this study) without any illegal
activity.
Pflog is used to log all the trafﬁc of the selected hosts.
In the proposed experimentation, these pcap ﬁles are
processed with argus in order to ﬁnd ﬂow anomalies ﬁrst,
then with snort in order to detect more advanced attacks.
Obviously, other IDS and network analysis are supported
by FIELDS.
FIELDS can detect outgoing attacks: if an intruder already
owns an host in our internal network, his ignorance of the
network structure, his attempts to discover the network, will
make his host detected by FIELDS (sinkhole). If he is
detected, all the trafﬁc of the suspected host will be logged,
which will make the attack a lot easier to analyze. The
ﬂexibility of the tables of pf allow us to isolate potentially
harmful trafﬁc such as an nmap scan from an internal host.
It’s possible to isolate these IPs in a table, which will be
read regularly. As FIELDS detects the trafﬁc which is not
supposed to happen, a host misconﬁguration can also be
detected.
A. Detection results
This section presents the results of the FIELDS experi-
mentation on a real network of about 30 000 users for a
period of 2 months. The volumetric for such a network is
about 1,5 TB per day of raw PCAP for the external link
(roughly speaking, link from your network to the Internet).
The analysis on each host is performed in two rounds: a
scan with Snort on the captured PCAP and a local antiviral
analysis (if Snort returns nothing). FIELDS has been installed
on common hardware (Intel XEON processor / 4 cores and
8GB of RAM). Table I gives the number of IP caught by
FIELDS. Blacklist has only 10 hosts caught. Those hosts are
infected by conficker and tries to reach servers handled
by Microsoft. No bruteforce attempts have been detected.
It’s a false negative because there are bruteforce attempts but
they are too slow or they come from distributed sources. As a
consequence, they do not raise an alert based on connection
rate as exposed in VI-E. Majority of the hosts has been
caught with sinkhole heuristics. Table I gives the proportion
of:
• infected: malicious payload detected on captured PCAP
or malicious programs detected on hosts ;
• misconﬁgured: bad settings at network level on host
(WINS server, DNS settings, routing etc.) ;
• unconﬁrmed: trafﬁc and antiviral analysis did not give
any results ;
• unchecked: trafﬁc analysis did not give any results and
antiviral analysis has not been performed ;
47
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

Table I
DETECTION RESULTS
Heuristic
Number of IP caught
Infected
Misconﬁgured
Unconﬁrmed
Unchecked
Blacklist
10
90%
0%
10%
0%
Bruteforce
0
0%
0%
0%
0%
IP sinkhole
163
22%
11%
32%
35%
DNS sinkhole
45
82%
0%
18%
0%
Windows sinkhole
44
64%
15%
21%
0%
The only false positive for the blacklist is a GET request
from the security team for testing purpose. IP sinkhole
has numerous unchecked hosts because it is difﬁcult to
request local antiviral tests on those hosts. Moreover, the
IP sinkhole is prone to false positive because there are a
lot of situations that can lead to send packets to sinkhole
destinations (essentially typos in command). The DNS sink-
hole is very effective, false positive are performed by people
accessing malicious websites (i.e. blacklisted DNS domain
name) through their web browser. Snort did not detect
malware on trafﬁc of DNS sinkholed hosts, only antiviral
analysis gave results.
B. Network forensic
The amount of the whole PCAP captured is 46 Gb for
a day. FIELDS enables to retain a lot more trafﬁc than an
exhaustive capture on the outgoing link (about 1,5 TB a day).
This is great help for a forensic purpose when a request
comes from upper IT security authority (such as RENATER
CERT).
VIII. CONCLUSION AND PERSPECTIVES
FIELDS provides some key features in network security
monitoring:
• Modelization and improvements of malicious ﬂows
detection algorithms;
• Efﬁcient pre-processor of ﬂows based on a reduced
improvement of a classical Packet Filter;
• Hybrid collector of network trafﬁc helping network
forensic process;
• Non intrusive monitoring ;
A large scale experimentation shows the efﬁciency of
the approach and demonstrates the ability of FIELDS to
take the best of existing security tools (antivirus, NIDS).
Thus, the approach enables to conﬁrm or to unconﬁrm the
risk. The results encourage us to follow FIELDS in several
directions. First, FIELDS eases the modelization of other
heuristics. Second, it can help to prevent the propagation of
the intrusions through ﬁrewall/network conﬁgurations since
it provides relevant information about the network com-
promission. Finally, an efﬁcient forensic could be proposed
through correlations of different tools since FIELDS provides
the malicious trafﬁc.
REFERENCES
[1] M. Ranum, A. Lambeth, and E. Wall, “Implementing a
generalized tool for network monitoring,” in In Proc. 11th
Systems Administration Conference (LISA), 1997.
[2] S. A. Mehdi, J. Khalid, and S. A. Khayam, “Revisiting trafﬁc
anomaly detection using software deﬁned networking,” in
Proceedings of the 14th international conference on Recent
Advances in Intrusion Detection, ser. RAID’11.
Berlin,
Heidelberg: Springer-Verlag, 2011, pp. 161–180.
[3] R. Sommer and V. Paxson, “Enhancing byte-level network
intrusion detection signatures with context,” in In Proc, 10th
Conference On Computer And Communications Security.
ACM, 2003, pp. 262–271.
[4] A. Caglayan, M. Toothaker, D. Drapaeau, D. Burke, and
G. Eaton, “Behavioral analysis of fast ﬂux service networks,”
in Proceedings of the 5th Annual Workshop on Cyber Secu-
rity and Information Intelligence Research: Cyber Security
and Information Intelligence Challenges and Strategies, ser.
CSIIRW ’09.
New York, NY, USA: ACM, 2009, pp. 48:1–
48:4.
[5] H.-G. Lee, S.-S. Choi, and Y.-S. L. H.-S. Park, “Enhanced
sinkhole system by improving post-processing mechanism,”
Future Generation Information Technology, pp. 469–480,
2010.
[6] B. Greene and D. McPherson, “Isp security: Deploying and
using sinkholes,” NANOG talk, http://www. nanog. org/mtg-
0306/sink. html, 2003.
[7] R. Bejtlich, The Tao of network security monitoring: beyond
intrusion detection.
Addison-Wesley Professional, 2004.
[8] ——, Extrusion detection: security monitoring for internal
intrusions.
Addison-Wesley Professional, 2005.
[9] C. Sanders, Practical packet analysis. No Starch Press, 2007.
[10] B. Sunny and K. Krishan, “An experimental analysis for
malware detection using extrusions,” ser. ICCCT.
IEEE,
2011, pp. 474 – 478.
[11] T. Ankita and S. R. /, “Optimization of snort for extrusion and
intrusion detection and prevention,” International Journal of
Engineering Research and Applications, Vol. 2, Issue 3, pp.
1768–1774, 2012.
[12] D. Hartmeier, “Design and performance of the openbsd
stateful packet ﬁlter (pf),” [retrieved: 07, 2012], 2002.
48
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-209-7
SECURWARE 2012 : The Sixth International Conference on Emerging Security Information, Systems and Technologies

