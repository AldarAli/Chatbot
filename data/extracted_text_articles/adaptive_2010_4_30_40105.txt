Implementation Architectures for Adaptive Workﬂow Management
Hanna Eberle, Frank Leymann and Tobias Unger
Institute of Architecture of Application Systems (IAAS)
University of Stuttgart
Stuttgart, Germany
email: eberle@iaas.uni-stuttgart.de, leymann@iaas.uni-stuttgart.de, unger@iaas.uni-stuttgart.de
Abstract—Business processes are often required to be highly
ﬂexible and adaptive due to the fact, that business conditions
change. Therefore, there exist a lot adaptation and ﬂexibility
concepts for workﬂows. However, workﬂow adaptation con-
cepts are often discussed on the language level neglecting a
discussion on the implementation architectures. Until now, ef-
fective implementation architectures have not been investigated.
Therefore, the main contribution of this work is to research
three implementation strategies for adaptive workﬂow manage-
ment, which we discuss with respect to modeling requirements
and change management.
Keywords-Adaptable Workﬂows, Flexible Workﬂows, Work-
ﬂow Execution Architecture
I. INTRODUCTION
Adaptation concepts in the workﬂow technology are mani-
fold. Since business conditions change, business processes are
often required to be highly ﬂexible and adaptive. Workﬂow
execution ﬂexibility is a key enabler for workﬂow adaptation,
because if a system does not provide any means for ﬂexibility
the system cannot adapt. In the workﬂow domain, the
terms workﬂow ﬂexibility and workﬂow adaptation are often
used synonymously. In this work we also discuss workﬂow
adaptation from the ﬂexibility point of view. Furthermore,
we distinguish between workﬂow adaptation and workﬂow
evolution. The changes of the business logic become visible
to one instance only in workﬂow adaptation, while the change
of a workﬂow model in terms of workﬂow evolution affects
all running instances. Traditional workﬂow languages provide
means to specify partial orderings between units-of-work,
which are also called activities. Most workﬂow languages
rely on graph theory [12] and deﬁne the partial orderings
between the activities as directed graphs, where the edges in
these workﬂow graphs are called control connectors. Today,
applications are often realized as Web Services following the
SOA paradigm and workﬂows orchestrate the different Web
Service applications to become a new and more complex
application. Therefore, activities send and receive messages
to interact with the activity implementations represented as
Web Service [18]. Execution ﬂexibility in workﬂows can
be established in two ways, either the partial ordering of
activities or the set of activities is adapted, which is also
called adaptation of business logic, or the selection and
binding of activity implementations is performed at runtime
and therefore provides a point of ﬂexibility. In this paper we
focus on the changes of business logic.
The state-of-the-art in the domain of business logic
adaptation of workﬂows, however, focuses on the change and
change management of workﬂow models on a language and
conceptional level, deﬁning business logic change operations
and investigation on correctness criteria for the correct
changes for a certain set of instances [14] [2].
Until now, effective implementation architectures have
not been investigated. Most adaptation approaches such
as process fragments [5] are implemented using instance
migration c.f., [4]. However, instance migration is not a
sufﬁcient implementation approach for the process fragment-
based adaptation approach as it requires e.g. to suspend the
process execution while the migration. Other adaptation im-
plementations for adaptive workﬂows are feasible, which are
implementing the process-fragment adaptation concept more
natively and overcome some disadvantages of the instance
migration implementation approach. Therefore, the aim of
this work is to research and discuss new implementation
architectures for adaptive workﬂow management.
We present three adaptation implementation architectures
for adaptive workﬂow management of internal workﬂow
artifact adaptation and discuss these approaches with respect
to modeling requirements and change management.
The paper is organized as follows. First, in Section IV, we
discuss the related work runtime adaptation concepts in the
workﬂow domain for graph-based workﬂows. We examine
the workﬂow adaptation concepts from a modeling language
perspective and the implementation concepts subsequently,
that are available to implement the workﬂow adaptation
concepts. Secondly, we present and discuss adaptation
implementation architectures, which realize one adaptation
implementation concept in Section V. The adaptation im-
plementation architectures handle adaptation internally by
adapting the internal model artifacts. We conclude our work
in Section VI.
II. TRADITIONAL WORKFLOW EXECUTION
A. Execution Architecture
Workﬂow languages are programming languages that are
interpreted, like e.g., Java [6]. Source code, written in inter-
preter programming languages, are not complied into machine
98
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

Client Apps, Other Engines, …
Engine
Invocation
Workflow 
Model 
Representation
(BPEL  BPMN  
Internal Model 
Artifacts
Navigator/Interpreter
(BPEL, BPMN, 
XPDL, …)
Artifacts
Import
Instance 
Representation
Figure 1: WFMS Architecture (c.f. [7])
code, which can be directly run by a machine without any
other additional components or programs. The source code
must be complied into the platform speciﬁc source code.
Once it is complied it cannot be run on another platform, but
must be complied using another platform speciﬁc complier.
Source code of interpreter languages are translated into a
representation, e.g., byte-code, which is run by a interpreter or
a virtual-machine, where the interpreter is platform speciﬁc,
but the source code representation is platform independent.
Workﬂow models act like source code, which get imported
and deployed to a virtual-machine for workﬂow execution,
which is widely called Workﬂow Management System
(WfMS). A simpliﬁed WfMS architecture based on [7] [12]
is presented in Figure 1. Workﬂow models are represented in
a workﬂow language, like the XML based language BPEL
[13]. At deployment time the workﬂow models are imported
and translated into internal artifacts [11] (c.f. 2), e.g., table
entries of a relational representation [12] or Java objects. The
internal artifacts are interpreted by the Navigator Component.
In particular, workﬂow languages are designed to prescribe
orderings between activities. Activities represent business
activities, basically, where the activity implementation of an
activity might be a client application implemented in another
programming language or even implemented by another
process. The sending and receiving of messages is handled by
the Invocation Component. Workﬂow models are imported,
activated and deactivated using workﬂow model management
API functions. The workﬂow instance API functions manage
the state of a workﬂow instance, e.g., to suspend and resume
a workﬂow instance as well as a function to terminate a
workﬂow instance.
B. Internal Representation
A simpliﬁed schema for the relational representation of
workﬂow models is presented in Figure 2. A workﬂow model
consists of a set of activity models, which are connected using
control connectors. An activity model is aware, whether it is
a start or an end activity of the workﬂow, which is stored in
WMID
Name
AMID
NrInCC
Activity
Pos
Workflow 
Model
Activity
Model
1
n
NrInCC
1
Transiti
onCond
2
1
1
Control
Connector
1
n
Connector
n
Workflow 
Instance
n
Activity
Instance
n
Instance
WIID
State
Instance
1
n
AID
State
NrInCC
Proc
Figure 2: ER-Diagram (c.f. [12])
the ActivityPos attribute. The NrInCC attribute represents the
amount of incoming control connectors. A control connector
can be annotated by a transition condition, which is a
function mapping to a Boolean value. Each process model
might have more than one concurrently running process
instance. Workﬂow instances are represented by the state of
the workﬂow instance and the states of its activity instances.
The activity instance attribute NrInCCProc keeps track with
the amount of already evaluated incoming control connectors.
C. Navigation
A workﬂow instance is created applying one of the
instantiation patterns as presented in [3], e.g., a message
or an event is received at an endpoint of a start activity.
The Navigator uses the relational representation of the
workﬂow model and the state of the workﬂow instance to
determine the next activity to be executed. An activity is
executed, if all incoming control connectors are evaluated.
The activity instance keeps track with the amount of evaluated
control connectors by increasing the amount of the attribute
NrInCCProc by one each time the activity is target of an
evaluated control connector. After an activity is ﬁnished
the associated outgoing control connectors are selected,
evaluated. A workﬂow instance completes successfully, if all
end activities are ﬁnished.
III. ADAPTATION EXAMPLE
To provide a more concrete idea of the business logic
adaptation, we present a little example on what shall be
achieved by business logic adaptation. The adaptation of the
business logic in workﬂow models inﬂuence the produced
execution traces of the workﬂow instances. An execution
trace is denoted by the execution ordering between the
activity instances. Our example workﬂow model consists
99
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

Internal Artifacts of Workflow Model and
Instance
Conceptional Workflow 
Model and Instance
Workflow Model 
Representation
(BPEL, BPMN, 
XPDL  )
PMID
Name
PM01
Loan Approval 1
Workflow Model Table
XPDL, …)
AMID
PMID
NrInCC
ActivityPos
A
PM01
0
Start
Activity Model Table
A
C
B
Import
B
PM01
1
C
PM01
1
PMID
SourceAct
TargetAct
TransCond
Control Connector Table
C
PMID
SourceAct
TargetAct
TransCond
PM01
A
B
PM01
A
C
PID
PMID
State
PI01
PM01
Running
Workflow Instance Table
B
AID
PID
AMID
State
NrInCCProc
AI01
PI01
A
Finished
0
Activity Instance Table
A
C
B
Execution
AI02
PI01
B
Running
1
AI03
PI01
C
Running
1
Figure 3: An Example
Current Execution Trace: A C B
Target Execution Trace: A C B D
B
?
Conceptional
A
C
B
?
Workflow 
Model
?
s
Internal 
Workflow 
Artifacts
Model
Workflow Instance
B
B
A
C
B
D
A
C
B
Figure 4: The Problem
of three activities A, B and C. A workﬂow instance of
the workﬂow model has two running activities, B and C.
A possible conceptional and internal representation of the
example is depicted in Figure 3. The execution trace of that
instance is ACB. The target execution trace of the adaptation
is ACBD. An activity D shall be executed additionally, with
the constraint that the activity D must be executed after
the completed execution of activity C. Two questions arise
from this little example of workﬂow adaptation. How is
the workﬂow model modeled and adapted conceptionally,
and how is the workﬂow model adapted internally? These
questions are discussed in the remainder of this paper.
IV. RELATED WORK
Adaptation approaches are manifold in the workﬂow
domain. To be able to classify the approaches we investigate
the approaches by regarding two aspects: (i) How is the
adaptation achieved from a modeling point of view? (ii)
What are the possible implementation strategies for these
adaptation concepts?
A. Modeling Adaptive Workﬂows
There exist two basic adaptation approaches for graph-
based workﬂow modeling languages. These approaches
denote the ends of a spectrum. Hybrid approaches are
possible. The ﬁrst adaptation approach acts on the assumption,
that a complete process model is modeled at design time.
At runtime the process model needs to be adapted, due
to the fact, that e.g., the business conditions might have
changed. Activities are added or removed by the adaptation
or the activity ordering is changed. The changes in the
model are either applied to all instances of the process
model, or made visible to one instance only. Approaches,
that pursue that modeling approach, are presented in [2] [15].
The second adaptation approach acts on the assumption,
that parts of a comprehensive process model are known
at modeling time, e.g., by different parties. These parties
are able to model the parts of a comprehensive process
model. The comprehensive process model is assembled of
these process parts. The assembling may currently available
knowledge in terms of context data into account. That way
the comprehensive process model is created adaptively, as
the selection of the to be integrated parts and the integration
of the different parts can be based on adaptation relevant
data. The comprehensive process model creation might be
performed either at runtime or at design time. If the selection
and integration is performed at runtime, even runtime data can
be employed by the selection. There exist various modeling
approaches for the process part modelling, e.g., such as
subprocesses [10], worklets [17], proclets [1] [16], process
fragments [9].
B. Adaptation Implementation Strategies
In this section, we discuss the possible implementation
strategies for the adaptation concepts. Afterwards, we in-
vestigate, which conceptional adaptation concept can be
implemented by which of the implementation concepts,
since not every adaptation concept can be implemented
employing every implementation concept. We could identify
two different adaptation management strategies for adaptation
of graph-based workﬂows. The ﬁrst implementation approach
is to manage adaptation of the conceptional workﬂow model
as a change of the internal model. The change of the
workﬂow model is mapped to the internal artifacts as well.
This strategy can be applied to both adaptation modeling
approaches presented previously. This approach needs to be
aware, whether the change shall be applied to one instance
only or to all instances running on that model. In the case a
model is adapted the change must comply to the execution
traces of the instances, which are about to be adapted and run
on the new conceptional model. Both adaptation modeling
approaches can be implemented using this implementation
strategy. Implementation architectures for this adaptation
implementation strategy are discussed in subsequent sections
of this paper. The second adaptation implementation strategy
does not change the internal representation of the model at all.
The adaptation of the workﬂow model, e.g., the composition
of a part of a process with another part of a process is
100
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

Conceptional
change of Model
AOP
Process
Composition
Change of Internal 
Model
No Change of
Internal Model
Map to Interactions
( )
Figure 5: Overview
mapped to interactions between the processes, like e.g.,
subprocesses, where the subprocess is integrated into the
parent process by sending messages to the subprocess, which
might be running in a different process context. However, the
interaction must be implemented by a complex coordination
protocol to be able to make the interacting processes appear
to the outside as one process. The interaction also requires
the interaction points to be modeled. This approach is not
applicable, if the changes of the conceptional model are not
modeled as a separate model or if parts of a process part
need to be adapted and the interaction points are already
modeled in the to be integrated parts. Changes in the pre-
modeled parts of a process model can only be implemented
by an implementation architecture, which is able to change
the corresponding internal artifacts as well. Whereas the
composition of pre-modeled parts can sometimes be mapped
to interaction relations or always by implemented by changing
the internal artifacts of the internal model adding new
control connectors to glue the pre-modeled parts together.
Whether the interaction approach can be applied, depends
on the pre-modeled process parts and the integration points
and operations, that are provided by the process part. The
integration approach in not that ﬂexible as the internal change
or model approach, since the points of integration must be
pre-modeled. The summary of the discussion is presented in
Figure 5.
V. ADAPTATION ARCHITECTURES APPLYING THE
INTERNAL CHANGES STRATEGY
In the following, we introduce adaptation architectures,
where the conceptional changes of the workﬂow model are
mapped onto changes of the internal workﬂow representation.
We do not answer the question, whether an adaptation step is
correct for an instance, which is discussed in various papers,
e.g., in [2], [14]. We discuss implementation architectures
for adaptation. The ﬁrst implementation architecture supports
the instance migration concept as presented in WebSphere
MQ Workﬂow [8]. Instance migration associates an instance
of a workﬂow model with another workﬂow model. The
second implementation architecture supports the adaptation
of a process model natively. The third and last approach
presented in this paper supports the composition of pre-
modeled process parts natively. We base our discussion on
the internal workﬂow model and instance representations as
presented in Section II.
WIID
WMID
State
WMID
Name
WIID
WMID
State
PI01
PM02
Running
WMID
Name
PM01
Loan Approval
PM02
Loan Approval V2
WIID
WMID
State
WI01
WM01
Running
WMID
Name
Workflow Model Table
Workflow Instance Table
WI01
WM01
Running
AID
WIID
AMID
State
NrInCCProc
AI01
WI01
A
Running
0
WM01
Loan Approval
Activity Instance Table
AI01
WI01
A
Running
0
WIID
WMID
St t
2. Instance Migration
1. Deployment
of new Model
Workflow Instance Table
WIID
WMID
State
WI01
WM02
Running
S
CC
WMID
Name
WM01
Loan Approval
WM02
Loan Approval V2
Activity Instance Table
AID
WIID
AMID
State
NrInCCProc
AI01
WI01
A
Running
0
WM02
Loan Approval V2
Figure 6: Instance Migration
A. Adaptation Architecture supporting Instance Migration
Instance migration associates a suspended workﬂow
instance with another workﬂow model, where the target
workﬂow model must ﬁt to the already executed parts of the
instance, and resumes the execution. Adaptation approaches
applying instance migration are discussed e.g., in [2]. The
concept of instance migration can be applied to implement
adaptation, thus adaptation can be mapped instance migration,
because the old workﬂow model can be changed and imported
as new workﬂow model, which becomes the new workﬂow
model of the instance. The internal artifacts are inﬂuenced
by the migration as depicted in Figure 6. The workﬂow
instance identiﬁer, WIID, of the instance keeps the same,
but the workﬂow model identiﬁer, WMID, is changed to
the WMID of the new workﬂow model. The traditional
APIs can be used to import the new workﬂow model to
the WfMS as well as to suspend and resume the workﬂow
instance. A new migration API function needs to be added
to be able to select and migrate a speciﬁc instance to a new
workﬂow model. The instance migration approach allows
other workﬂow instances associated with the old model. Since
only the selected instance is migrated and the old workﬂow
model is not changed, the remaining instances can ﬁnish on
the old workﬂow model. This approach is suitable, if the
adaptation of a workﬂow instance is an exceptional case. The
adaptation is percepted to the outside, since the workﬂow
instance is now associated with another workﬂow model.
However, message correlation issues must not be handled
differently, since the correlation is based on business case
data, which is associated with the instance.
The perception of the process now might be different from
the one perception before the adaption step, since it might
be possible that new activities are deployed, which receive
and send messages.
B. Adaptation Architecture supporting Changes of the Inter-
nal Representation
Another implementation approach for adaptable workﬂows
is to change the workﬂow model directly, both the workﬂow
model and the internal representation as presented in Figure
101
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

Workflow Model Table
Activity Model Table
WMID
Name
WM01
Loan Approval 1
AMID
WMID
NrInCC
ActivityPos
A
WM01
0
Start
B
WM01
1
C
WM01
1
D
WM01
1
WMID
SourceAct
TargetAct
TransCond
Control Connector Table
WMID
SourceAct
TargetAct
TransCond
WM01
A
B
WM01
A
C
WM01
C
D
WM01
C
D
Figure 7: Extending the Model Example
7. The workﬂow model is extended by the adaptation logic.
The new activities are deployed and the new activities and
control connectors are written into the workﬂow model tables.
This approach has the advantage, that only the workﬂow
model is changed as depicted in Figure 7, while nothing
needs to be changed at the instance level. This approach
is only applicable, if all instances running on the changing
model comply to the change. This approach is suitable, if
a workﬂow model needs to be changed very often and the
workﬂow model has only very few instances running on it.
This approach suits best for late modeling approaches and
ad hoc workﬂows, if the relationship between model and
instance is one-to-one, where the repetition rate is very low
and the workﬂow model must be highly ﬂexible. The same
new API function needs to be added to the API function set
as for the instance migration. Input to this function is the
workﬂow model ID of the workﬂow model to be changed
and the new workﬂow model. Internally, the function deﬁnes
the new parts of the workﬂow model and deploys these parts
and maps them to the internal representation to extend the
workﬂow model tables.
C. Adaptation Architecture using Inter-Workﬂow-Model Con-
trol Connectors
If the target workﬂow model of the adaptation is a
composition of already deployed workﬂow parts, which are
already represented internally, we are able to map the target
conceptional workﬂow model internally by introducing ad
hoc control connectors. These control connectors connect
activities of two different workﬂow models. However, this
control connector is visible to one instance only, since
the composition is only valid for one instance. The ad
hoc control connector is hybrid, since it represents model
information, but is only evaluated by one instance. This
idea of this approach is quite close to the implementation
idea of the interacting implementation strategies. However,
no complicated coordination protocols must be executed
to coordinate the executions of the different parts of the
overall process, because the instance is not distributed over
many execution contexts. The whole instance is executed
within the same execution context and the complete workﬂow
model is represented internally by the insertion of ad hoc
WMID
Name
WM01
Loan Approval 1
AMID
WMID
NrInCC
ActivityPos
A
WM01
0
Start
Workflow Model Table
Activity Model Table
WM01
Loan Approval 1
WM02
Loan Approval 2
A
WM01
0
Start
B
WM01
1
C
WM01
1
D
WM02
0
WMID
SourceAct
TargetAct
TransCond
WM01
A
B
Control Connector Table
SourceWMID
Target WMID
WIID
SourceAct
TargetAct
TransCond
Ad Hoc Control Connector Table
WM01
A
C
WIID
WMID
State
AID
WIID
AMID
State
NrInCCProc
NrInCC
WM01
WM02
WI01
C
D
Workflow Instance Table
Activity Instance Table
WI01
WM01
Running
AI01
WI01
A
Finished
0
0
AI02
WI01
B
Running
0
1
AI03
WI01
C
Running
0
1
AI04
WI01
D
Created
0
1
Figure 8: Connecting two Models by the Deﬁnition of an
Ad Hoc Control Connector
control connectors as presented in Figure 8. The insertion
of the ad hoc control connector changes the amount of
incoming control connectors of the target activity. Therefore,
we extend the activity instance table by a NrInCC column,
which represents the amount of common incoming control
connectors plus the amount of incoming ad hoc control
connectors. The activity instances of a workﬂow part are
created after this workﬂow part has been integrated into the
workﬂow and the NrInCC is set during creation. A standard
navigator must be adopted to be able to navigate over these
workﬂow models and ad hoc control connectors. Therefore
we ﬁrst navigate the standard control connectors of the source
activity afterwards we navigate over the ad hoc control
connectors. Since all process parts are pre-modeled, the pre-
modeled parts do not change and therefore the perception
of the parts and interaction possibilities do not change. The
most extreme case in this realization is to model all control
connectors as inter process control connectors and each
activity itself is a process model. Also this approach has its
restrictions, since e.g., activities cannot be removed.
D. Discussion
The adaptation implementation architectures are powerful
adaptation implementation strategies. These adaptation archi-
tectures enable to adapt a executed workﬂow model either by
adding or removing parts of the workﬂow model. However,
each of the implementation strategies is optimized towards
a speciﬁc modeling paradigm and application scenario. The
instance migration strategy was introduced ﬁrst to manage
versioning issues. Instance migration requires a smart model
management due to the fact, that the amount of very similar
workﬂow models grows. Instance migration requires the
process instances to be suspended, before the instances
can be migrated to the new version of the process model.
The instance migration implementation concept is especially
suitable to handle exceptional cases. The happy path is
modeled in the original process model and in case a fault
102
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

occurs the faulting instance is drawn onto another process
model, which is able to deal with the faulting situation. Faults
are usually unexpected and therefore its not possible to cover
all these faults by a process model. Whereas the native
adaptation support implementation architecture should be
applied for workﬂows, which are known to be adapted in an
ad-hoc and therefore only one instance is created per natively
adapting workﬂow model. The instance does not need to
be suspended to perform the adaptation of the workﬂow
model. Both of these approaches, the instance migration
and the native ad-hoc changes of the model, change the set
deployed activities and therefore might also change the set
of activity message endpoints. Therefore the perception of
the workﬂows are changed, since they now provide more
endpoints, that can be called. The third implementation
architecture is optimized and tailored towards adaptation
concepts similar to the process fragment concept. The local
knowledge is modeled locally and deployed to an engine.
Depending on the runtime context data the parts are glued
together by introducing instance control connectors. The
process instance needs not to be suspended and no new
activities need to be deployed. The perception of the process
fragments does not change to the outside.
VI. CONCLUSION
In this work, we analyzed modeling and implementation
approaches, which realize adaptation of business logic of
workﬂows. We presented three implementation architectures
for adaptive workﬂow management. The adaptation is handled
by changing the executed model internally. We discussed the
applicability of each of these implementation architectures
and we argued, that the applicability and suitability of the
implementation strategy chosen depends on the scenario
that shall be implemented. The scenario speciﬁes e.g., what
information is known at modeling time, or what information
is pre-modeled. In our future work we will evaluate the
concepts as presented in this paper implementing all the
approaches and compare these approaches with the already
implemented instance migration approach.
ACKNOWLEDGMENT
This work is partially funded by the ALLOW project.
ALLOW (http://www.allow-project.eu/) is part
of the EU 7th Framework Programme (contract no. FP7-
213339).
REFERENCES
[1] M. Adams, A. H. M. ter Hofstede, D. Edmond, and W. M. P.
van der Aalst. Worklets: A Service-Oriented Implementation
of Dynamic Flexibility in Workﬂows. In R. Meersman and
Z. Tari, editors, OTM Conferences (1), volume 4275 of Lecture
Notes in Computer Science, pages 291–308. Springer, 2006.
[2] F. Casati, S. Ilnicki, L.-j. Jin, V. Krishnamoorthy, and M.-C.
Shan. Adaptive and Dynamic Service Composition in eFlow.
In CAiSE ’00, pages 13–31, London, UK, 2000. Springer.
[3] G. Decker and J. Mendling. Instantiation Semantics for Process
Models. In BPM ’08, pages 164–179, Berlin, Heidelberg, 2008.
Springer.
[4] H. Eberle and S. Telezhnikov. JBPM Fragment Engine, 2010.
http://code.google.com/p/jbpm-fragment-engine/.
[5] H. Eberle, T. Unger, and F. Leymann. Process Fragments. In
Proceedings CoopIS 2009, pages 398–405, Berlin, Heidelberg,
2009. Springer.
[6] J. Gosling, B. Joy, and J. S. Guy L. The Java(tm) Language
Speciﬁcation. Addison-Wesley Longman, Amsterdam, June
2005.
[7] D. Hollingsworth. Workﬂow Management Coalition - The
Workﬂow Reference Model.
Technical report, Workﬂow
Management Coalition, Jan. 1995.
[8] IBM Corporation. IBM MQSeries Workﬂow: Concepts and
Architecture, 2006.
[9] K.-H. Kim, J.-K. Won, and C.-M. Kim.
A Fragment-
Driven Process Modeling Methodology. In O. Gervasi, M. L.
Gavrilova, V. Kumar, A. Lagan`a, H. P. Lee, Y. Mun, D. Taniar,
and C. J. K. Tan, editors, ICCSA (3), volume 3482 of Lecture
Notes in Computer Science, pages 817–826. Springer, 2005.
[10] O. Kopp, H. Eberle, F. Leymann, and T. Unger.
The
Subprocess Spectrum. In Proceedings of the Business Process
and Services Computing Conference: BPSC 2010, Lecture
Notes in Informatics. Gesellschaft f¨ur Informatik e.V. (GI),
September 2010.
[11] F. Leymann. BPEL vs. BPMN 2.0: Should You Care? In 2nd
International Workshop on BPMN, Lecture Notes in Business
Information Processing. Springer, October 2010.
[12] F. Leymann and D. Roller. Production Workﬂow - Concepts
and Techniques. PTR Prentice Hall, January 2000.
[13] OASIS. Web Services Business Process Execution Language
Version 2.0. Committee speciﬁcation, OASIS Web Services
Business Process Execution Language (WSBPEL) TC, Jan.
2007.
[14] M. Reichert and P. Dadam. ADEPTﬂex-Supporting Dynamic
Changes of Workﬂows Without Losing Control. J. Intell. Inf.
Syst., 10(2):93–129, 1998.
[15] M. Reichert, S. Rinderle-Ma, and P. Dadam. Flexibility in
process-aware information systems. T. Petri Nets and Other
Models of Concurrency, 2:115–135, 2009.
[16] W. van der Aalst, P. Barthelmess, C. A. Ellis, and J. Wainer.
Workﬂow Modeling using Proclets. In CoopIS00, pages 198–
209. Springer, 2000.
[17] W. M. P. van der Aalst, P. Barthelmess, C. A. Ellis, and
J. Wainer. Proclets: A Framework for Lightweight Interacting
Workﬂow Processes. Int. J. Cooperative Inf. Syst., 10(4):443–
481, 2001.
[18] S. Weerawarana, F. Curbera, F. Leymann, T. Storey, and D. F.
Ferguson. Web Services Platform Architecture: SOAP, WSDL,
WS-Policy, WS-Addressing, WS-BPEL, WS-Reliable Messaging
and More. Prentice Hall PTR, Upper Saddle River, NJ, USA,
2005.
103
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

