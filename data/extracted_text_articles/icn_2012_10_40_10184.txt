Mitigating Spooﬁng Attacks in MPLS-VPNs using Label-hopping
Shankar Raman∗, Gaurav Raina†
India-UK Advanced Technology Centre of Excellence in Next Generation Networks
∗Department of Computer Science and Engineering, †Department of Electrical Engineering
Indian Institute of Technology - Madras
Chennai - 600 036, India
Email: mjsraman@cse.iitm.ac.in, gaurav@ee.iitm.ac.in
Abstract—In
certain
models
of
inter-provider
Multi-
Protocol Label Switching (MPLS) based Virtual Private Net-
works (VPNs) spooﬁng attack against VPN sites is a key
concern. For example, MPLS-based VPN inter-provider model
“C” is not favoured, owing to security concerns in the data-
plane, even though it can scale with respect to maintenance
of routing state. Since the inner labels associated with VPN
sites are not encrypted during transmission, a man-in-the-
middle attacker can spoof packets to a speciﬁc VPN site. In
this paper, we propose a label-hopping technique which uses
a set of randomized labels and a method for hopping amongst
these labels using the payload of the packet. To prevent the
attacker from identifying the labels in polynomial time, we also
use an additional label. The proposed technique can be applied
to other variants of inter-provider MPLS based VPNs where
Multi-Protocol exterior-BGP (MP-eBGP) multi-hop is used. As
we address a key security concern, we can make a case for the
deployment of MPLS based VPN inter-provider model “C”.
Keywords-MPLS; VPN; Model C; Spooﬁng attacks; Label-
hopping;
I. INTRODUCTION
Multi-Protocol Label Switching (MPLS) [6] technology
uses ﬁxed size labels to forward data packets between
routers. By stacking labels, speciﬁc customer services such
as Layer 3 Virtual Private Networks (L3-VPNs) based
on Border Gateway Protocol (BGP) extensions are widely
deployed in the Internet. BGP-based MPLS L3-VPN ser-
vices are provided either on a single Internet Service
Provider (ISP) core or across multiple ISP cores. The latter
cases are known as inter-provider MPLS VPNs which are
broadly categorized and referred to as models: “A”, “B” and
“C” [10].
Model “A” uses back-to-back VPN Routing and Forward-
ing (VRF) connections between Autonomous System Border
Routers (ASBRs). Model “B” uses eBGP redistribution of
labelled VPN-IPv4 routes from Autonomous Systems (AS)
to neighbouring AS. Model “C” uses multi-hop MP-eBGP
redistribution of labelled VPN-IPv4 routes and eBGP redis-
tribution of IPv4 routes from an AS to a neighbouring AS.
Model “C” is more scalable for maintaining routing states
and hence preferred for deployment in the Internet; refer
to [2] for more details. Security issues in MPLS, especially
MPLS-based VPNs has attracted attention [1].
The security of model “A” matches the single-AS standard
proposed in [9]. Model “B” can be secured well on the
control-plane, but on the data-plane the validity of the
outer-most label (Label Distribution or Resource Reservation
Protocol label) is not checked. This weakness could be
exploited to inject crafted packets from inside an MPLS
network core. A solution for this problem is proposed in [2].
Model “C” can be secured on the control-plane but has
a security weakness on the data-plane. The Autonomous
System Border Routers (ASBRs) do not have any VPN
information and hence the inner-most label cannot be vali-
dated. In this case, the solution used for Model “B” cannot
be applied. An attacker can exploit this weakness to send
unidirectional packets into the VPN sites connected to the
other AS. Therefore, ISPs using model “C” must either trust
each other or not deploy it [4].
Control plane security issue in model “C” can be re-
solved by using IPSec. If IPSec is used in the data-plane
then conﬁguring and maintaining key associations could be
extremely cumbersome. Even though model “C” is highly
scalable for carrying VPN Routing and Forwarding (VRF)
routes, the vulnerability of the data-plane renders it unusable.
The current recommendation is that model “C” must not
be used. A simple solution to this problem is to ﬁlter all
IP trafﬁc with the exception of the required eBGP peering
between the ASBRs, thereby preventing a large number
of potential IP trafﬁc-related attacks. However, controlling
labelled packets is difﬁcult. In model “C”, there are at least
two labels for each packet: the Provider Edge (PE) label,
which deﬁnes the Label Switched Path (LSP) to the egress
PE, and the VPN label, which deﬁnes the VPN associated
with the packet on the PE.
In [5], the authors propose encryption techniques, such as
IPSec, for securing the provider edge (PE) of the network.
The authors also highlight that the processing capacity
could be over-burdened. Further, if an attacker is located
at the core of the network, or in the network between the
providers that constitute an inter-provider MPLS VPN, then
spooﬁng attacks are possible. The vulnerability of MPLS
against spooﬁng attacks and performance impact of IPSec
has been discussed in [3]. If the inner labels that identify
packets going towards a L3 VPN site are spoofed, then
241
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-183-0
ICN 2012 : The Eleventh International Conference on Networks

sensitive information related to services available within the
organizational servers can be compromised. As far as we
know, there is no scheme available for installing an anti-
spooﬁng mechanism for these VPN service labels.
This paper outlines a label-hopping technique that helps to
alleviate the data-plane security problem in model “C”. We
propose a scheme that changes the inner VPN labels dynam-
ically based on the payload. By using a mix of algorithms
and randomized labels, we can guard against spooﬁng and
related attacks. The advantage of our scheme is that it can
be used wherever Multiprotocol-external BGP (MP-eBGP)
multi-hop scenarios arise.
The rest of the paper is organized as follows. In Section
II, we discuss the pre-requisites of our proposed scheme.
In Section III, we discuss the label-hopping technique and
some implementation issues. In Section IV, we discuss
the preliminary simulation and implementation issues. We
present our conclusions and provide avenues for future work
in Section V.
II. PRE-REQUISITES FOR THE LABEL-HOPPING SCHEME
In this section, we brieﬂy review the network topology
for model “C”, the PE conﬁguration and the control-plane
exchanges needed for our proposed scheme.
A. MPLS VPN model “C”
The reference MPLS-eBGP based VPN network for
model ”C” as described in [11] is shown in Figure 1,
which also shows the control plane exchanges. The near-end
PE (PEne) and far-end PE (PEfa) are connected through
the inter-provider MPLS core. The VPN connectivity is es-
tablished through a set of routers from different Autonomous
Systems (AS) and their ASBRs. In the VPN, MP-eBGP
updates are exchanged for a set of Forward Equivalence
Classes (FECs). These FECs, which have to be protected,
originate from the preﬁxes behind PEne in a VPN site or a
set of VPN sites.
B. PE conﬁguration
Various conﬁgurations are needed on the PEs to imple-
ment the label hopping scheme. A set of ”m” algorithms that
generate collision-free labels (universal hashing algorithms)
are initially implemented in the PEs. Each algorithm is
mapped to an index A = (a1, a2, · · · am) , m ≥ 1. The
bit-selection pattern used by the PEs for generating the
additional label is also conﬁgured. PEne must be conﬁgured
for a FEC or a set of FECs represented by an aggregate label
(per VRF label) which will use the label-hopping scheme.
For each FEC or a set of FECs, a set of valid labels used
for hopping, K = (k1, k2, k3, · · · kn) , n > 1 and, ki ̸= kj if
i ̸= j, is conﬁgured in PEne. In the case of bi-directional
security, the roles of the PEs can be reversed.
C. Control and data-plane ﬂow
Initially, set K and the bit-selection pattern used by
the PEs are exchanged securely over the control-plane.
Optionally an index from A, representing a hash-algorithm,
could also be exchanged. We propose that only the index is
exchanged between the PEs, as it enhances the security, for
two reasons. First, the algorithm itself is masked from the
attacker. Second, the algorithm can be changed frequently,
and it would be difﬁcult for the attacker to identify the ﬁnal
mapping that generates the label to be used for a packet.
Figure 1 depicts this unidirectional exchange from PEne to
PEfa.
Once the secure control-plane exchanges are completed,
we apply the label-hopping technique, and PEfa forwards
the labelled trafﬁc towards PEne through the intermediate
routers using the label-stacking technique (Figure 2). The
stacked labels along with the payload are transferred be-
tween the AS and ASBRs before they reach PEne. Using
the label-hopping algorithm PEne veriﬁes the integrity of
labels. Upon validation, PEne uses the label information to
forward the packets to the appropriate VPN service instance
or site. This data-plane exchange from PEfa and PEne
is depicted in Figure 3. We now present the label-hopping
scheme.
III. LABEL-HOPPING TECHNIQUE
In this section, we describe the label-hopping technique
and discuss some implementation aspects.
Once a data packet destined to the PEne arrives at the
PEfa a selected number of bytes from the payload is chosen
as input to the hashing algorithm. The hash-digest obtained
as a result is used to obtain the ﬁrst label for the packet. The
agreed bit-selection pattern is then applied on the hash-digest
to obtain an additional label, which is then concatenated with
the ﬁrst label. Once PEne receives these packets it veriﬁes
both the labels.
The implementation steps for the control-plane at the
PEne and PEfa are given by Algorithms 1 and 2. The
implementation steps for the data-plane at the PEfa and
PEne are given by Algorithms 3 and 4.
Note: The values in K need not be contiguous and can be
Algorithm 1 Control-plane PEne algorithm
Require: FEC[] Forward Equivalence Classes, K[] valid
labels, A[i] hash algorithm instance, I[] the bit-selection
pattern chosen for the inner label.
Begin
packet = makepacket(FEC,K, A[i], I);
CP-SendPacket(PEfa, MP-eBGP, packet);
End
randomly chosen from a pool of labels to remove coherence
242
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-183-0
ICN 2012 : The Eleventh International Conference on Networks

172.16.10.0/24
172.16.20.0/24
PE_ne
PE_fa
CE1
CE2
AS1
ASBR1
AS2
ASBR2
Net:PE_ne
LDP Label: POP
Net:PE_ne
LDP Label: L1
Net:PE_ne
LDP Label: L2
Net:PE_ne
LDP Label: L3
Net:PE_ne
LDP Label: L4
NH:PE_ne
VPN Labels: k1, k2,...,kn
Bit pattern: I[]
Algorithm Index(Optional):A[i]
Figure 1: Control-plane exchanges for model C [11]
Frame / L2 
Header
Label 1
Label 2
Label 3
L3 header
Payload
Label Stack
S=0
S=0
S=1
Figure 2: Label stack using scheme outlined for Model ”C”
172.16.10.0/24
172.16.20.0/24
PE_ne
PE_fa
CE1
CE2
AS1
ASBR1
AS2
ASBR2
172.16.10.1
L4|V1|I1|172.16.10.1
L3|V1|I1|172.16.10.1
L2|V1|I1|172.16.10.1
L1|V1|I1|172.16.10.1
V1|I1|172.16.10.1
Packets sent from PE_fa to PE_ne
Figure 3: Data-plane ﬂow for model C [11]
Algorithm 2 Control-plane PEfa algorithm
Require: None
Begin
packet = CP-ReceivePacket(PEne); // from PEne
FEC[] = ExtractFEC(packet); // extract FECs
K[] = ExtractLabels(packet); // extract the labels
selectHashAlgorithm(A[i]); // hash algorithm to use
RecordValues(FEC); // information for PEfa
RecordValues(K);
RecordValues(I); // bit-selection pattern to be used
End
in the label space. Also the algorithms used could be either
vendor dependent or a set of standard algorithms mapped the
same way by the PEne and PEfa. If the two PEs involved
are from different vendors we assume that a set of standard
algorithms are used. In order to avoid too many processing
cycles in the line cards of PEne and PEfa, the hash-
Algorithm 3 Data-plane PEfa algorithm
Require: None
Begin
packet = DP-ReceivePacket(Interface);
match = CheckFEC(packet); // Is the algorithm enabled?
if match == 0 then
return; // no match
end if
hash-digest = calculateHash(A[i],packet);
ﬁrst-label = hash-digest % |K|;
additional-label = process(hash-digest,I)
DP-SendPacket(PEne,
ﬁrst-label,
additional-label,
packet);
End
digest is calculated over a predeﬁned size of the payload. An
additional inner label is further added to enhance protection
against spooﬁng attacks. With an increased label size, an
243
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-183-0
ICN 2012 : The Eleventh International Conference on Networks

Algorithm 4 Data-plane PEne algorithm
Require: None
Begin
packet = DP-ReceivePacket(Interface);
match = CheckFEC(packet);
if match == 0 then
return; //no match
end if
label-in-packet=extractPacket(packet, LABEL);
inner-label=extractPacket(packet, INNER-LABEL);
hash-digest=calculateHash(A[i],packet);
ﬁrst-label=hash-digest % |K|;
additional-label = process(hash-digest,I)
if label-in-packet ̸= ﬁrst-label then
error(); return;
end if
if inner-label ̸= additional-label then
error(); return;
end if
DP-SendPacket(CE1, NULL, NULL, packet);
End
attacker spends more than polynomial time to guess the VPN
instance label for the site behind PEne. There could be two
hash-digests that generate the same label. In this case, the
two hash-digests is differentiated using the additional label.
Collisions can be avoided by re-hashing or any other suitable
techniques that are proposed in the literature [8]. If collisions
exceed a certain number, then Algorithms 1 and 2 can be
executed with a set of new labels.
Illustration: We now brieﬂy illustrate the label-hopping
scheme. In Figure 1, using Algorithms 1 and 2, a set of labels
are forwarded from PEne to PEfa. The roles of PEne
and PEfa are interchanged for reverse trafﬁc. Figure 2
shows a packet from the data-plane for model “C”, with
the proposed scheme. In the ﬁgure, “Label 1” refers to the
outermost label, while “Label 2” refers to the label generated
from the hash-digest and “Label 3” refers to an additional
label generated as in Algorithm 3. This additional label has
bottom of stack bit (denoted by S in Figure 2) set. These
labels are stacked immediately onto the packet and the path
labels for routing the packets to appropriate intermediary
PEs are added. Figure 3 also shows these path labels used
by the data packet to reach PEne. When the packet passes
through the core of an intermediary AS involved in model
”C”, or through the network connecting the intermediary
AS, the intruder or the attacker has the capability to inspect
the labels and the payload. However, the proposed scheme
prevents the attacker from guessing the right combination
of the labels. We can increase the size of the additional
inner-labels thereby reducing threats from polynomial time
attacks.
IV. SIMULATION AND IMPLEMENTATION
In this section, we present the preliminary simulation
results on performance, comparing the label-hopping tech-
nique with deep packet inspection where we encrypt and
decrypt the complete packet. We also brieﬂy highlight some
implementation issues.
A. Simulation
Implementing the label-hopping scheme for all set of
FECs belonging to any or all VPN service instances may
cause throughput degradation. This is because the hash-
digest computation and derivation of the inner-label / addi-
tional inner label calculation can be computation intensive.
We therefore compared our technique by choosing a part of
the payload as input to our hashing algorithm.
We simulated our algorithm on a 2.5 GHz processor
Intel dual processor quad core machine. We compared the
performance of the label-hopping technique with a deep
packet inspection technique where the complete packet was
encrypted before transmission and decrypted on reception.
The performance ﬁgures are shown in Figure 4. These
simulation ﬁgures indicate that we were able to process
10 million packets per second when we used 64-byte for
hashing on a payload of size 1024 bytes. For a hash using
128-byte, we were able to process about 6.3 million packets
per second. However with a deep packet inspection where
we encrypted and decrypted the complete packet, we were
able to process only about 1 million packets per second.
In cases where performance becomes a bottleneck, this
label-hopping scheme can be applied to speciﬁc trafﬁc which
are mission-critical, sensitive and most likely need to be
protected as they travel from the PEfa to the PEne.
Selective application of this service which could be offered
as a premium for a selected set of FECs is a suitable
option, there by protecting the trafﬁc of organizations that
are paranoid about the integrity of the switched trafﬁc into
their VPN sites.
B. Implementation
We are modifying the open source Quagga router software
on Linux to implement our scheme. One of the concerns in
the scheme is the use of payload for generating the random
source. If the payload does not vary between two packets
then the control-plane exchanges have to be renegotiated
with a different set of labels for the second packet. The
other concern in the scheme is to tackle the problem of
fragmentation that can occur along the path from PEfa to
PEne. We can fragment the packet at PEfa and ensure
that the size of the packet is ﬁxed before transmission.
We could also employ the Path Maximum Transfer Unit
(Path-MTU) discovery process so that packets do not get
244
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-183-0
ICN 2012 : The Eleventh International Conference on Networks

0.0e+00
5.0e+06
1.0e+07
1.5e+07
0.0
0.5
1.0
1.5
2.0
2.5
3.0
Packets processed
Time(seconds)
No hashing
64 byte hash
128 byte hash
Deep Packet Inspection
Figure 4: Performance comparison of complete packet en-
cryption and decryption with a 64, 128 byte hash on a
payload of size 1024 bytes.
split into multiple fragments. If packets are fragmented this
scheme fails. However, networks usually employ the Path-
MTU discovery process to prevent fragmentation and hence
this problem may not occur.
V. CONCLUSION AND FUTURE WORK
In this paper, we proposed a label-hopping scheme for
inter-provider BGP-based MPLS VPNs that employ MP e-
BGP multi-hop control-plane exchanges. In such an envi-
ronment, without label-hopping, the data-plane is subject to
spooﬁng attacks.
The technique proposed uses a payload-based label-
hopping scheme to prevent attackers from easily decipher-
ing labels and their respective VPNs. The scheme is less
computationally intensive than encryption-based methods.
It prevents the spoofed packets from getting into a VPN
site even if the attacker is in the core or at an intervening
link between ISPs. In our scheme, we chose the payload
of the packet as the variable component since the use of
encryption or IPSec to secure the inner labels are time
intensive strategies. Instead of using the payload as a random
source, other options like time-of-the-day could be used.
This requires the use of time synchronization mechanism.
Such mechanisms like “Timing over IP Connection and
Transfer of Clock (TicToc)” are receiving much attention
from the IETF. This will be the subject of our future study.
ACKNOWLEDGEMENTS
The authors would like to acknowledge the UK EP-SRC
Digital Economy Programme and the Government of India
Department of Science and Technology (DST) for funding
given to the IU-ATC.
REFERENCES
[1] S. Alouneh, A. En-Nouaary and A. Agarwal, “MPLS security:
an approach for unicast and multicast environments”, Annals
of Telecommunications, Springer, vol. 64, no. 5, June 2009,
pp. 391–400, doi:10.1007/s12243-009-0089-y.
[2] M. H. Behringer and M. J. Morrow, “MPLS VPN security”,
Cisco Press, June 2005, ISBN-10: 1587051834.
[3] B. Daugherty and C. Metz, “Multiprotocol Label Switch-
ing
and
IP,
Part
1,
MPLS
VPNS
over
IP
Tunnels”,
IEEE Internet Computing, May–June 2005, pp. 68–72, doi:
10.1109/MIC.2005.61.
[4] L. Fang, N. Bita, J. L. Le Roux and J. Miles, “Interprovider
IP-MPLS services: requirements, implementations, and chal-
lenges”, IEEE Communications Magazine, vol. 43, no. 6, June
2005, pp. 119–128, doi: 10.1109/MCOM.2005.1452840.
[5] C. Lin and W. Guowei, “Security research of VPN tech-
nology based on MPLS”, Proceedings of the Third Interna-
tional Symposium on Computer Science and Computational
Technology (ISCSCT 10), August 2010, pp. 168–170, ISBN-
13:9789525726107.
[6] Y. Rekhter, B. Davie, E. Rosen, G. Swallow, D. Farinacci and
D. Katz, “Tag switching architecture overview”, Proceedings
of the IEEE, vol. 85, no. 12, December 1997, pp. 1973–1983,
doi:10.1109/5.650179.
[7] E. Rosen and Y. Rekhter, “BGP/MPLS IP Virtual Private
Networks (VPNs)”, RFC 4364, Standard Track, February,
2006.
[8] T. H. Cormen, C. E. Leiserson, R. L. Rivest and C. Stein, “In-
troduction to algorithms”, 3rd edition, MIT Press, September
2009, ISBN-10:0262033844.
[9] C. Semeria, “RFC 2547bis: BGP/MPLS VPN fundamentals”,
Juniper Networks white paper, March 2001.
[10] Advance MPLS VPN Security Tutorials [Online], Available:
“http://etutorials.org/Networking/MPLS+VPN+security/
Part+II+Advanced+MPLS+VPN+Security+Issues/”,
[Accessed: 10th December 2011]
[11] Inter-provider
MPLS
VPN
models
[Online],
Available:
“http://mpls-conﬁguration-on-cisco-ios-
software.org.ua/1587051990/ ch07lev1sec4.html”, [Accessed
10th December 2011]
245
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-183-0
ICN 2012 : The Eleventh International Conference on Networks

