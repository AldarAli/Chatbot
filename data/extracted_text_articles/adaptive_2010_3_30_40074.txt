Self-Adaptation in Geotracking Applications:
Challenges, Opportunities and Models
Olga Melekhova∗, Mohammed-Amine Abchir†‡, Pierre Chˆatel†, Jacques Malenfant∗, Isis Truck† and Anna Pappa†
∗Universit´e Pierre et Marie Curie-Paris 6 CNRS, UMR 7606 LIP6
4 place Jussieu, Paris, 75005, France
Email: {Olga.Melekhova,Jacques.Malenfant}@lip6.fr
†LIASD – EA 4383, Universit´e Paris 8
2 rue de la Libert´e, Saint-Denis Cedex, 93526, France
Email: {maa,truck,ap}@ai.univ-paris8.fr
‡Deveryware 43 rue Taitbout, 75009 Paris, France
Abstract—Geotracking emerges as a mission-critical mean to
observe, track and otherwise manage mobile entities from the
regular notiﬁcation of their geographic locations, thanks to
positioning devices such as GPS and cell phones. First used
in logistic systems, geotracking now strives for large-scale with
new applications like the management continent-wide green tax
collection on millions of trucks from their passage through
thousands virtual toll points. As the current single device,
ﬁxed position notiﬁcation frequency policies can no longer cope
with the stringent requirements of such large-scale applications,
this paper ﬁrst examines the challenges and opportunities for
self-adaptation in geotracking systems and applications. After
identifying the main requirements to that end, it then provides for
a ﬁrst set of decision-making models for identiﬁed self-adaptation
scenarii, in the context of a set of everyday geotracking business-
oriented applications. Finally, it proposes a set of tools and
the software architecture currently developed under the French
ANR project SALTY to address these issues in the conceptual
framework of autonomic computing.
Keywords-Adaptive systems; Road vehicle location monitoring;
Closed loop systems; Decision-making; Fuzzy control; Global
Positioning System; Man-machine interface; Natural language
interfaces; Software architecture.
I. INTRODUCTION
As geotracking and its use in geographic information sys-
tems are more and more prevalent, approaches to optimize
their resource usage for given business objectives become
a key issue. Typical geotracking applications use periodic
position notiﬁcation from remote positioning devices to track
mobile targets. The goal is to follow their progress and enforce
geographic constraints such as staying within a predeﬁned
corridor or passing through waypoints.
Current practices in geotracking address all of the business
objectives using predeﬁned ﬁxed frequencies for devices to
push new positions. As each push incurs a cost in data
transmission and in device battery usage, ﬁxed frequencies
impose quite poor resource usage proﬁles. Moreover, new
programmable positioning devices offer much more ﬂexibility
than simply applying a ﬁxed notiﬁcation frequency. Finally,
as geotracking go large-scale, with new applications like
the management of continent-wide green tax collection on
millions of trucks from their passage through thousands of
virtual toll points, striving for adaptive policies and coping
with device malfunctions become mandatory.
This paper presents results of the French ANR project
SALTY1 by ﬁrst exploring the challenges and opportunities in
the self-adaptation of geotracking applications. After present-
ing the conceptual framework underlying geotracking and its
self-adaptiveness (§II), the paper takes a bottom-up approach
by describing in Section III self-adaptation use cases for a
set of exemplary business-oriented geotracking goals: corridor
enforcement, waypoint passage notiﬁcation and delivery point
arrival notiﬁcation. Section IV further develops over the adap-
tation needs by providing decision models speciﬁc to these
use cases but general enough to cope with most adaptation
requirements in geotracking applications. Requirements and
ﬁrst drafts for a software architecture and accompanying tools
are described in Section V.
II. GEOTRACKING AND SELF-ADAPTATION
Self-adaptation in geotracking strives for a minimal resource
usage while sustaining the capability for the system to achieve
business objectives, like enforcing a corridor within which
a mobile must stay, at some desired level of precision, e.g.,
notifying the crossing of a corridor frontier with a precision of
500 meters. To better understand how this overall goal can be
achieved, this section examines the devices, software platforms
and kinds of adaptation that exist in this area.
A. Positioning devices
Geotracking relies on positioning devices which charac-
teristics deeply impact costs and resource usage. Positioning
devices fall into three categories of positioning means:
1) Global Positioning System (GPS) devices are now well-
known; they use information and triangulation of signals
coming from satellite constellations. Their precision
highly depends upon the number of satellites they can
“see”, the angle between them and even the ground con-
ﬁguration which can cause some bias. After computing
1Self-Adaptive very Large disTributed sYstems (ANR-09-SEGI-012).
68
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

positions, devices typically push them to a server using
data connection over a GSM network.
2) GSM cell-id uses readily available phone (or similar
devices connected to that network) tracking information,
i.e., the cell in which the device actually is, to provide
estimated positions. Its precision highly depends upon
the density of antennas and the geographical form of cell
in which the phone is. It needs no speciﬁc intervention
from the phone itself but is rather a service offered
by the cell phone infrastructure. Upon a call to their
API, operators provide estimated positions from the
geographical locus of the cell containing the phone.
3) WiFi cell-id is similar to GSM cell-id but rather uses
WiFi antennas to estimate positions of devices connected
to that network. Again, the precision of the method
depends upon the density of the antennas.
Devices can be ﬁxed or portable. Indeed, speciﬁc GPS
devices can be attached to vehicles and be powered by them.
Such devices are usually also connected to sensors on the
vehicle (door open/closed, motor temperature and speed, fuel
level, ...) and can send sensor data along with positions.
But more and more portable GPS devices are used for their
ﬂexibility, at the expense of running on batteries, which then
become a scarce resource. Mobile phones share characteristics
with portable GPS, while WiFi cell-id is totally dependent on
the device to which the WiFi card is connected.
Most GPS devices send positioning (and possibly other)
data through a data link over the GSM network at a frequency
that can be dynamically modiﬁed by sending them an appro-
priate command. Many devices can be partly or totally put
in sleep mode for economizing energy: the communication
subsystem (GSM) can be put in sleep mode between data
sendings while the positioning subsystem itself can also be
put in sleep mode between signal acquisition and position
computations. More and more programmable devices appear
everyday on the market. Such devices can embed application
speciﬁc code that can drive the positioning but also adaptations
of this process to some extent.
B. Geotracking concepts and middleware
One of the key issue in building geotracking applications
is how to cope with the diversity of positioning devices. No
standard interface exists neither to get positions from devices
nor to send them commands. Instead of making end user
applications aware of all the possible devices, and have them
track down every new devices to be used, a middleware layer
can help in abstracting them from this diversity. Deveryware’s
GeoHub is one such middleware that offers, among other
services, a common interface to deal with a large set of
different positioning device kinds and models.
Another important issue is the capability to acquire a
lot of positioning data and to correlate them in order to
capture higher level composite events triggering notiﬁcations
to end user’s applications. Falling under the framework of
complex event processing (CEP) [1], indeed geotracking need
specialized CEP engines coping speciﬁcally with positions and
related events. Deveryware’s GeoHub central role is to act as
such a specialized geotracking CEP, which triggering rules
are written in Forth, uploaded to the hub and activated over
period of times at customer demand. GeoHub optimizes the
process by which positions received from tens of thousands
of positioning devices ﬁre end users’ notiﬁcation rules linked
to their distant applications.
C. Potential adaptations
As the basic and prominent functioning of positioning
devices consists in sending data at some interval of time, the
frequency at which a device must do so can be determined
directly from business objectives and the precision required
by end users in their notiﬁcations.
Example. Consider the notiﬁcation of the passage of a vehicle
within 500 meters of a waypoint. If the speed of the vehicle is
100 kph at this point, the frequency must be at least one data
sent each 36 seconds to make sure a position will be taken
within the 1 km diameter around the waypoint.
But, maintaining such high frequencies while vehicles are
far away from any point of interest is just a loss of resources
and unnecessary costs. A central adaptation in geotracking
is therefore to adjust the frequencies of data sendings so to
keep them low when mobiles are far from points of interest
but to raise them when approaching such points so to reach
the required frequencies to match business objectives with the
desired precision. Unfortunately, determining when to raise
the frequency requires to predict the position of the vehicle
from time to time, to get gradually nearer positions to the
objective in order to raise the frequency progressively. Such
position predictions depends on a lot of dynamic conditions,
like weather, road conditions, trafﬁc, etc. Therefore, dynamic
adaptation is mandatory.
Besides this, another important issue is to cope with impre-
cision or unavailability of devices. GPS positioning precision
depends upon the visible satellites and even the ground conﬁg-
uration, which can induce systematic bias, while other means
highly depend upon the density of antennas. Switching from
one positioning mean to another when conditions require it is
another very important adaptation opportunity. As costs of the
different mean vary much, GSM cell-id being typically a pay-
per-use service from cell phone network operators, keeping
their use to a minimum is also an adaptation objective.
Finally, for devices which autonomy on battery is limited,
adaptation shall put the device positioning and transmission
subsystems in sleep or ready modes back and forth. Putting
the transmission subsystem in sleep mode while keeping the
positioning subsystem in ready mode taking positions at some
frequency can give rise to a form of location-driven positioning
instead of the standard time-driven one. Programmable devices
can monitor their position and resume sending data only when
reaching some target position (or use a fallback rule if the
target is missed).
In the SALTY project context, another important adaptation
comes from the management of the GeoHub resources. Even
69
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

z
d
z
case 2
case 4
case 3
case 1
Fig. 1.
Different behaviors in corridor enforcement.
though more servers can be dynamically allocated to the
GeoHub, variations in the workload can still require to adjust
more globally the frequencies of mobile data sendings to
keep the quality of service in position correlations done by
the platform. As the workload of the GeoHub is the sum of
the ones generated by every connected device, this kind of
adaptation requires to act upon a lot of devices and therefore
must scale well when their number grows larger and larger.
III. BUSINESS OBJECTIVES AND ADAPTATION USE CASES
Geotracking applies to a lot of different areas, such as
logistics, people tracking, trafﬁc monitoring, etc. However, De-
veryware’s experience shows that it revolves around a limited
number of similar high level business objectives. This section
illustrates them within the context of logistic applications.
A. Corridor enforcement
A ﬁrst typical geotracking objective is corridor enforcement,
where positions of the vehicle must remain within a short
distance from its planned route. End users require to be
notiﬁed whenever the vehicle goes out of this limit, with a
given precision. Typically, the corridor may be d = 10 km
wide, and the end user may require a notiﬁcation of the
crossing of a frontier with a precision of z = 500 meters. This
can trigger simple route replanning if, after veriﬁcation, the
vehicle happens to try to escape trafﬁc jams, but it can also
trigger a more urgent intervention if the vehicle is carrying
valuable goods that may just being stolen.
Figure 1 shows in more details scenarii in corridor enforce-
ment, where the corridor itself is the green area. The nominal
scenario (case 1) is when the vehicle remains more or less in
the middle of the corridor, a case where the frequency can be
kept relatively low, given the width of the corridor. A second
scenario (case 2) is when the vehicle crosses the frontier. The
frequency is raised as the vehicle approaches the frontier, and
then the crossing of the corridor frontier is notiﬁed. The end
user may require a tracking of the vehicle after the notiﬁcation,
r
waypoint
trajectories
tolerance zone
position reporting
case 3
case 2
case 1
case 4
Fig. 2.
Waypoint notiﬁcation tolerance and mobile trajectories.
but typically with less precision, so the frequency may then
diminish to adapt to this new requirement
A third scenario (case 3) is when the vehicle approaches a
frontier of the corridor, but remains inside it. In this case, a
higher frequency will be required to make sure to notify the
user with its 500 meters (= z) precision if crossing occurs, and
it will be kept as long as the vehicle remains in this situation.
In the last scenario (case 4), the vehicle crosses the frontier
but remains within the 500 meters limit outside the corridor.
The business rule here says to tolerate these positions, but
as it is not nominal, a notiﬁcation is required if this situation
stands still for a too long time (or more relevantly, a combined
measure of distance to the frontier and time spent in that
situation). Again, the frequency must increase to notify a
possible full crossing, or the reaching of the tolerance limit,
and maintained as long as this situation persists.
B. Waypoint passage notiﬁcation
A second typical geotracking objective is waypoint passage
notiﬁcation. In logistics, waypoints represent meaningful steps
when ﬂeet managers want to get feedback to make sure
vehicles progress normally on their route, or inquire the drivers
if not. In other applications, waypoint notiﬁcation may serve
as basis for green tax collection, as discussed previously.
Figure 2 shows the different scenarii. If waypoints are used
only to check the progress of the vehicle, the notiﬁcation
may just require to get a position within some radius of the
waypoint, e.g., 500 meters, with a tolerance of 100 meters. In
this case, it sufﬁces to raise the frequency to a level where
we can guarantee that a position will be measured within the
circle, at least for a trajectory which passes near the middle of
the circle (case 1). Indeed, a higher frequency may be needed
for trajectories that will just cut a small part of the circle, as we
can see in the case 3, that a ﬁxed frequency will not provide
the necessary positions. Overall, the frequency will need to be
raised as the vehicle approaches the circle, and maybe to a
higher level if the predicted trajectory cuts less of the circle.
70
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

30 min
20 min
10 min
Destination
Arrival alert
Alert limit of
early arrival
Alert limit of
late arrival
Fig. 3.
Delivery point: ﬁrst notiﬁcation, early and delayed arrival.
A more stringent scenario comes with applications like the
green tax collection. Here, owners of tracked vehicles may
require more than one position to be sure the vehicle really
passed through the waypoint, to accept to pay the tax. The rule
may require three positions within the circle with at most one
in the tolerance zone. In such a case, the frequency must be
raised much when approaching the circle with a more or less
tangent trajectory. In this scenario, being the resource provider
for data sendings, the taxation authority may have to balance
the cost of raising the frequency against the revenue generated
by the tax payment, and decide at some point to give up if the
trajectory is as tangent as the case 3.
C. Delivery point arrival notiﬁcation
The delivery point arrival notiﬁcation differs from the
waypoint passage by the fact that the vehicle will eventually
stop at the destination point. Hence the problem is not to
detect a passage but rather to notify the arrival point of the
estimated time at which the vehicle must be expected. In
logistic applications, such a notiﬁcation, e.g., 30 minutes in
advance, will be used by warehouse dispatchers to choose a
door at which the vehicle will be able to stop, deliver (part
of) its payload, and take some other payload. As warehouse
doors are scarce resources and vehicles and drivers wait time
to be minimized (especially when the goods are perishable),
a good planning with as much information as possible about
incoming vehicles may be a key to success.
Figure 3 illustrates this third business-oriented objective.
Typically, a ﬁrst circle is deﬁned to notify the warehouse
of the arrival of the truck. But if the vehicle turns out to
progress faster than predicted, an early arrival notiﬁcation may
be required no later than a second limit, e.g., 20 minutes before
the predicted time of arrival. Alternatively, if the vehicle is
slower than predicted, a late arrival notiﬁcation may also be
required not later than another limit, e.g., 10 minutes before
the predicted arrival time.
Adaptation of the frequency follows here a more complex
proﬁle. It raises as the vehicle approaches the ﬁrst limit, in
order to notify the arrival with some ﬁxed precision, e.g., 30
minutes more or less 2 minutes. After this ﬁrst notiﬁcation, the
frequency is reduced, but if the vehicle appears to be too fast
or too slow, the frequency is again raised to catch the other
time limits with their own predeﬁned tolerance.
D. Mixed scenarii and other adaptations
Of course, in logistic applications, the three business objec-
tives can be active at the same time. For example, the corridor
may still need to be enforced while passing a waypoint or
approaching a destination. Adaptation may therefore need to
take care of several objectives at the same time and decide
for a frequency that matches all of their needs. Other types
of adaptations may also be used or may constrain these.
For example, putting the device in sleep mode for a while
when no objectives are in sight can preserve the battery for
a better usage later. Adapting location-driven data sendings
discussed before may also be used if programmable devices
are available, at least to come to some point nearby the zone
of interest. Finally, if problems are detected in the precision of
the positions or a device suffers from malfunction, switching
to an alternative positioning device may be required.
IV. ADAPTATION MODEL AND DECISION MAKING
This section introduces the adaptation model capturing the
dynamic of the system in terms of states, decisions, transitions
and cost functions to set up de the decision-making problem
to be solved to get adaptation policies.
A. Positioning devices adaptation model
Let D be the set of device types and P be the set of
GPS positions, the state of a vehicle can be described by the
following state variables:
• pd ∈ D: the type of the primary device used by the truck,
• sd ∈ D: the type of the secondary device used by the
truck,
• ct ∈ R: current time,
• cp ∈ P: the current position of the truck,
• cf ∈ R; the current frequency of data sendings,
• bl ∈ R: current battery level,
• mm ∈ {sleep, on}: the current measurement unit mode,
• tm ∈ {sleep, on}: the current transmission unit mode,
• sp ∈ {ok, failed}: the state of the primary device,
• ss ∈ {ok, failed}: the state of the secondary device,
• c: the corridor imposed to the vehicle,
• w: the list of the remaining waypoints,
• a: the list of the remaining warehouses to visit.
Each time a decision must be made, this decision will take
the form of three components:
71
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

code
CEP
GeoHub
Business
Adaptation
Adaptation
Model
Model
Adaptation
Adaptation
devices
Enhanced
Deveryloc
Positioning
Business
code
Fig. 4.
Elements of the logical architecture.
• d ∈ {primary, secondary}: the device that will be used
for the data sendings until the next decision,
• f ∈ R: the frequency at which data will be sent until the
next decision,
• t ∈ R: the time until the next decision, if no failure,
battery drained, corridor, waypoints or warehouse arrival
event occur.
The cost of transmission is modeled by a function cdt(t, f)
giving the total cost of data transmission for a device of
type/model dt, a time duration t and a steady frequency f
over that period. For GSM cell-id, this cost turns out to be
the service billed by the operator for calling n = t × f
its positioning API. For GPS devices, this is the cost of
transmitting n packets of data over the GSM network.
Energy consumption for battery-powered devices is modeled
by a function edt(m, m′, t, f) where
• dt is the type/model of the positioning device,
• m, m′ tells if either the measurement or the transmission
subsystems are to be put in the new mode m′ from a
previous mode m,
• t is the elapsed time, and
• f is the frequency of measurement and transmission of
data (only measurement if the transmission subsystem is
in sleep mode).
Transitions to new states are modeled using conditional
probability distributions, where cp is the current position:
• Pc(t|c, cp): the probability that the next position in t unit
of time will have passed over corridor c,
• Pw(t|w, cp): the probability that the next position in t
unit of time will have passed the next waypoint in w,
• Pa(t|a, cp): the probability that the next position in t
unit of time will have passed the next warehouse arrival
notiﬁcation in a,
• Pd(t): probability that a failure will occur on a device
d ∈ {primary, secondary}.
Modeled as above, the goal of the decision-making process
is to ﬁnd an adaptation policy that provides a decision (d, f, t)
for each state s, which minimizes the cost of data sendings and
the probability of a miss of a corridor crossing, waypoint miss
or of an unnotiﬁed warehouse. Two kinds of algorithms can
be applied to compute optimal decision policies: sequential
decision making algorithms and greedy algorithms.
When decisions inﬂuence each others over time, such as
putting a device in sleep mode from which an awakening
cost will have to be amortized over the sleep time, algorithms
for sequential decision making are required. When the model
(cost functions, transition probabilities, and so on) is known
in advance, such markovian decision processes can be solved
using dynamic programming [2], [3], yielding a policy in the
form of a function from states to decisions. Such policies can
then be applied at run-time at low cost (in decision making
time). When the model elements are not known in advance,
run-time machine learning algorithms like Q-Learning [4], [3],
are applied.
When decisions do not inﬂuence each others over time,
greedy, “one-step”, algorithms can be applied. The ﬁeld of
optimization offers a lot of such algorithms. As most of
the time, the model elements are not known in advance,
approaches amenable to run-time learning are preferred. Fuzzy
control, introduced by Zadeh [5], proposes such an approach
[6].
B. GeoHub adaptation model
As said earlier, if the GeoHub can have its resource aug-
mented to cope with higher workload, these additions of
resource come in such large increments that the level of data
sendings to it must be controlled to avoid too large decreases in
72
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

Fig. 5.
Overall development steps for geotracking applications.
the quality of service offered by the platform between resource
allocations. Controlling the workload of the GeoHub amounts
to the control of the frequency of each positioning device
currently sending it data. Moreover, as the SALTY project
addresses the large-scale, this must be done in a way that
scales to a large number of positioning devices. We therefore
propose to use decentralized, peer-to-peer algorithms to do so.
When the workload of the GeoHub becomes too large, two
kinds of algorithms can regulate it:
• ﬂooding algorithms, which is the diffusion of a command
from the adaptation component of the GeoHub to all
autonomic managers of devices to reduce their frequency
in order to reduce its overall workload, or
• token-based algorithms, where the adaptation component
of the GeoHub injects to the autonomic managers of de-
vices tokens representing rights to use some frequency to
send data, tokens which will be used and then reinjected
towards others when no longer needed.
In the token-based algorithm, a budget of tokens is given to
each autonomic manager of positioning devices, which then
raises and drops the frequency of its devices within these
budget limits. When some autonomic manager requires more
tokens because targets approach their next point of interest,
thus requiring higher frequencies, a peer-to-peer heuristic
algorithm is applied: autonomic managers ask their neighbors,
and then these again recursively until one with less current
needs than its current budget can give some tokens for a period
of time.
V. SOFTWARE ARCHITECTURE AND TOOLS
In the context of the SALTY project, use cases in logistics
are developed into an overall logical architecture, shown in
Figure 4, and described in the rest of this section.
A. Application architecture
Applications include business-oriented code with regards to
the geotracking objectives and corresponding reactions from
a business point of view. For example, this code will be in
charge of enforcing a corridor over the route of a vehicle, and
if the vehicle exits the corridor, business rules will encode the
instructions of the end user to deal with this situation, like
calling the driver to know why he did so, and replan a new
route if this deviation is justiﬁed (trafﬁc jams, accidents, ...).
But applications also include the notiﬁcation logic and its
adaptation. In Figure 4, applications are materialized by bold
dashed polylines, which include the business code discussed
above, but also the adaptation components. The geotracking
notiﬁcation logic is also part of the application though dele-
gated to the GeoHub and positioning devices. In this vision,
the code on programmable devices and the rules loaded into
the GeoHub are seen as part of the application, and it is
the decision of the programmer as where to put the frontier
between what is delegated to these and what will be executed
on its own infrastructure. It is one of the objective of the
SALTY project to better use programmable devices that appear
on the market regularly and promise to lower the costs of
geotracking, provided that they are properly used.
Not shown in the ﬁgure is the organization of the busi-
ness code layer, for the sake of understandability. In typical
applications, several components will be used to cope with
the different business objectives. Typically, components are
specialized to speciﬁc geotracking objectives, like corridor
enforcement. In terms of deployment, each vehicle is usually
followed individually, so having one set of specialized com-
ponents per vehicle is typical of this kind of applications.
B. Local autonomic management architecture
Each application has its own adaptation layer, which im-
plements the adaptation logic and preferences of the end user.
For example, one may put more importance on meeting its
objective with a high precision, while another may prefer to
keep the overall geotracking costs as low as possible. The
basic logical architecture of the adaptation layer follows IBM’s
autonomic computing blueprint and its Model - Analyse -
73
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

<?xml version =” 1.0 ”
encoding=” iso −8859−1” ?>
<geotracking −model
u r i =” h t t p : / /www. deveryware . com / model / TruckTracking ”
xmlns=” h t t p : / / move . l i p 6 . upmc . f r / geotracking −model / ”
xmlns:xsd=” h t t p : / /www. w3 . org /2001/ XMLSchema”>
<a l e r t T y p e
name=” A r r i v a l A t W a r e h o u s e N o t i f i c a t i o n ”
c a t e g o ry =” A r r i v a l A t A D e s t i n a t i o n ”>
<a p p l i c a t i o n −parameters>
<param name=” Delay ”
type =” x sd :t i me ” />
<param name=” DelayTolerance ”
type =” QualitativeTimeDelayTolerance ” />
</ a p p l i c a t i o n −parameters>
<c o n f i g u r a t i o n −parameters>
<param name=” P o s i t i o n i n g D e v i c e ”
type =” PositionDeviceType ” />
<param name=” StartTime ”
type =” xsd:dateTime ” />
<param name=”EndTime”
type =” xsd:dateTime ” />
</ c o n f i g u r a t i o n −parameters>
<runtime−parameters>
<param name=” C u r r e n t P o s i t i o n ”
type =”GPSValue” />
<param name=” WarehouseLocation ”
type =”GPSValue” />
</ runtime−parameters>
<t r i g g e r
type =” FIS ”>
<param name=” Pos ”
type =”GPSValue” />
<f i s
name=” t r i g g e r A r r i v a l N o t i f i c a t i o n ”>
<fuzzyRule>
<a n t e c e d e n t
type =” Q u a l i t a t i v e T i m e T o l e r a n c e ”>
<two−t u p l e
l i n g u i s t i c −v a r i a b l e =” closeTo ”
displacement =” 0.0 ” />
</ a n t e c e d e n t>
<consequent
type =” T r i g g e r i n g L e v e l ”>
<two−t u p l e
l i n g u i s t i c −v a r i a b l e =” High ”
displacement =” 0.25 ” />
</ consequent>
</ fuzzyRule>
. . .
</ f i s>
<i n f e r
fisName=” t r i g g e r A r r i v a l N o t i f i c a t i o n ”>
<e x p r e s s i o n
op=” minus ”>
<applyFunction name=” estimateTravelTime ”>
<with−param name=” from ”
value =”$ C u r r e n t P o s i t i o n ” />
<with−param name=” to ”
value =”$ WarehouseLocation ” />
</ applyFunction>
<value−of
exp=”$ Delay ” />
</ e x p r e s s i o n>
</ i n f e r>
</ t r i g g e r>
<emittedEvent
type =” A r r i v a l A t W a r e h o u s e N o t i f i c a t i o n E v e n t ” />
<d e s c r i p t i o n
lang =”en−En”>
When a
t r u c k
can be
p r e d i c t e d
to
a r r i v e
a t
the
s p e c i f i e d
warehouse
a t
the
given
Delay ,
the
s p e c i f i e d
event
i s
e m i t t e d
towards
the
a p p l i c a t i o n .
</ d e s c r i p t i o n>
</ a l e r t T y p e>
<dataType name=” Q u a l i t a t i v e T i m e T o l e r a n c e ”>
<fuzzyEnumeration>
<l i n g u i s t i c −v a r i a b l e
name=” closeTo ”>
. . .
</ l i n g u i s t i c −v a r i a b l e>
. . .
</ fuzzyEnumeration>
</ dataType>
<dataType name=” T r i g g e r i n g L e v e l ”>
<fuzzyEnumeration>
. . .
<l i n g u i s t i c −v a r i a b l e
name=” High ”>
. . .
</ l i n g u i s t i c −v a r i a b l e>
. . .
</ fuzzyEnumeration>
</ dataType>
<dataType
name=” A r r i v a l A t W a r e h o u s e N o t i f i c a t i o n E v e n t ”>
<data name=” TruckId ”
type =” x s d : t o k e n ” />
<data name=” occurenceTime ”
type =” xsd:dateTime ” />
<data name=” WarehouseLocation ”
type =”GPSValue” />
</ dataType>
</ geotracking −a p p l i c a t i o n>
Fig. 6.
Models captured through the new DeveryLoc tool in XML format.
Plan - Execute (MAPE) loop [7]. The “monitor” part gets the
notiﬁcations and positions from the GeoHub, but can also get
information about the context from a standard CEP (weather,
trafﬁc, etc.). The “analyze” part deals with the decision model
presented in Section IV. The “plan” part looks at how to im-
plement the decision, and does the necessary coordination with
other related adaptation components. Finally, the “execute”
part deals with the actual adaptations acting not only upon
the business code component but also on positioning devices
and on the GeoHub when required.
To this logical architecture corresponds an implementation
architecture, which makes use of several different adaptation
components. As several decision making processes apply
(adapting frequencies, choosing the positioning mean/device,
switching from ready to sleep modes back and forth, etc.),
instead of having a unique adaptation component dealing with
all of these at the same time, several such components can be
implemented, one for each decision problem. These compo-
nents are then assembled together with an arbitrator composing
their independently made decisions into one coherent decision
that will be imposed to the base business code component as
well as the concerned positioning devices and GeoHub.
Local coordination among tightly-coupled adaptation com-
ponents is often required as, in general, adaptations have
impacts on more than one base element. It is the case here for
adaptation components that relate to the specialized geotrack-
ing components in charge of one particular vehicle, as they all
use the same positioning device. For such coordination among
a small number of adaptation components, they can simply be
fully interconnected. When the number of components grows,
a hierarchical scheme may help in implementing appropriate
coordination algorithms.
C. Global coordination architecture
In some cases, adaptations need to be done at a much larger
scale, and even globally. In the architecture of Figure 4, the
adaptation component linked to the GeoHub controls its over-
all workload and performance, as explained in Section IV-B.
To support the kind of peer-to-peer coordination algorithms
required to go large-scale, the architecture links together the
adaptation components managing each positioning device in
74
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

<?xml version =” 1.0 ”
encoding=” iso −8859−1” ?>
<a d a p t a t i o n −model
u r i =” h t t p : / /www. deveryware . com / model / TTAdaptations ”
xmlns=” h t t p : / / move . l i p 6 . upmc . f r / a d a p t a t i o n −model / ”
xmlns:xsd=” h t t p : / /www. w3 . org /2001/ XMLSchema”>
<adaptationType name=” TransmissionFrequencyAdaptation ”>
<s t a t e
name=” c u r r e n t P o s i t i o n ”
type =”GPSValue” />
<s t a t e
name=” t r a n s m i s s i o n F r e q u e n c y ”
type =” x s d : f l o a t ” />
<a c t i o n
name=” newTransmissionFrequency ”
type =” x s d : f l o a t ” />
<c r i t e r i o n
name=” g e t P o s i t i o n P r o b a b i l i t y ”
r e l a t i o n −semantics =” i n c r e a s i n g ”>
<f u n c t i o n>
<param name=” t a r g e t P o s i t i o n ”
type =”GPSValue” />
<param name=” t a r g e t R a d i u s ”
type =” xsd:decimal ” />
<e x p r e s s i o n>
i f
( withinRadius ( n e x t P o s i t i o n ( c u r r e n t P o s i t i o n ,
newTransmissionFrequency ) ,
t a r g e t P o s i t i o n ,
t a r g e t R a d i u s ) )
then 1
e l s e
i f
( beforeRadius ( p r e d i c t e d P o s i t i o n (
c u r r e n t P o s i t i o n ,
newTransmissionFrequency ) ,
t a r g e t P o s i t i o n ,
t a r g e t R a d i u s ) )
then 1
e l s e
0
</ e x p r e s s i o n>
</ f u n c t i o n>
</ c r i t e r i o n>
<c r i t e r i o n
name=” batteryUsage ”
r e l a t i o n −semantics =” d e c r e a s i n g ”>
<f u n c t i o n>
<param name=” consumptionPerTransmission ”
type =” x s d : f l o a t ” />
<e x p r e s s i o n>
<value−of
exp=”$ p e r c e n t a g e P e r T r a n s m i s s i o n ” />
</ e x p r e s s i o n>
</ f u n c t i o n>
</ c r i t e r i o n>
<c r i t e r i o n
name=” t o t a l T r a n s m i s s i o n C o s t ”
r e l a t i o n −semantics =” d e c r e a s i n g ”>
<f u n c t i o n>
<param name=” c o s t P e r T r a n s m i s s i o n ”
type =” x s d : f l o a t ” />
<e x p r e s s i o n>
value−of
exp=”$ c o s t P e r T r a n s m i s s i o n ”/>
</ e x p r e s s i o n>
</ f u n c t i o n>
</ c r i t e r i o n>
<a g g r e g a t i o n>
<f u n c t i o n>
<param name=” g e t P o s i t i o n P r o b a b i l i t y ”
type =” x s d : f l o a t ” />
<param name=” consumptionPerTransmission ”
type =” x s d : f l o a t ” />
<param name=” c o s t P e r T r a n s m i s s i o n ”
type =” x s d : f l o a t ” />
<e x p r e s s i o n>
. . .
</ e x p r e s s i o n>
</ f u n c t i o n>
</ a g g r e g a t i o n>
</ adaptationType>
</ a d a p t a t i o n −model>
Fig. 7.
Adaptation models captured through the new DeveryLoc tool in XML format.
a self-adaptive mesh striving for an equilibrium between the
number of neighbors and the average length of the path
connecting any randomly chosen pair of components.
With this kind of mesh in place and correctly maintained
by the system, the architecture will efﬁciently support several
kinds of peer-to-peer coordination algorithms:
• ﬂooding algorithms, where the diffusion of a command
can be done in time linear in the average path length, or
• token-based algorithms, where the time between the
release of a token and its acquisition by another device
is also linear in the average path length.
In the context of the SALTY project, the self-adaptive mesh
is constructed using heuristic probabilistic algorithms. When
a new autonomic component connect its positioning device
to the GeoHub, the latter’s autonomic component assigns
neighbors to the newcomer at random among the already
connected ones. Then, these can exchange neighbors with
their neighbors if they tend to have more than them. Precise
constraints to make this kind of heuristic construction converge
to the above good equilibrium are still under study.
D. Application and decision-making model elicitation
The last part of Figure 4, on the right, presents a software
tool that completes the logical architecture with an aid for
end users to specify their application and eventually connect
it to the overall system. Deveryware already offers such a
service, called DeveryLoc, which helps end users to conﬁgure
alerts of predeﬁned types, that is both the triggers and the
corresponding notiﬁcations, load them onto the GeoHub and
start/stop them at will. Currently, this development tool still
requires a lot of expertise in geotracking that is rarely available
to the clients. Another way to help end users is to propose
smart human-machine interfaces to help them specifying their
needs. So, the new enhanced DeveryLoc has four major
objectives:
1) use the natural language (more precisely a basic dis-
course analysis) to enhance the HMI in proposing “user-
understanding” interfaces;
2) elicit the business-level objectives and their parameters,
such as corridor enforcement;
3) elicit the adaptation objectives, such as keeping the
frequency low, to save battery or to get a required level
of precision in the notiﬁcations;
4) enable a qualitative assessment of criteria, instead of a
quantitative one, often less intuitive for end users.
The overall needs of the clients are expressed through four
different artifacts:
1) an application model deﬁning the kinds of alert types
found in the application domain, such as arrivals at
warehouse in truck tracking (Fig. 6);
2) an adaptation model deﬁning the kinds of adaptations
that can be applied to alerts, such as a position trans-
mission frequency adaptation (Fig. 7);
75
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

<?xml version =” 1.0 ”
encoding=” iso −8859−1” ?>
<geotracking −a p p l i c a t i o n
u r i =” h t t p : / /www. deveryware . com / a p p l i c a t i o n / TruckTrackingApp ”
applicationModel =” h t t p : / /www. deveryware . com / model / TruckTracking ”
adaptationModel =” h t t p : / /www. deveryware . com / model / TTAdaptations ”
xmlns=” h t t p : / / move . l i p 6 . upmc . f r / geotracking −prog−model / ”
xmlns:xsd=” h t t p : / /www. w3 . org /2001/ XMLSchema”>
<a l e r t
name=” ArrivalAtNiceWN ”
type =” A r r i v a l A t W a r e h o u s e N o t i f i c a t i o n ”>
<with−param name=” WarehouseLocation ”><gpsValue
l a t =” 43.7 ”
long=” 7.26 ” /></ with−param>
<with−param name=” Delay ”
value =”00 :30:00 ” />
<param name=” DelayTolerance ”
value =” closeTo ” />
</ a l e r t>
. . .
<a d a p t a t i o n
name=” f r e q u e n c y F o r A r r i v a l A d a p t a t i o n ”
type =” TransmissionFrequencyAdaptation ” />
. . .
</ geotracking −a p p l i c a t i o n>
Fig. 8.
Application description captured through the E-DeveryLoc tool.
<?xml version =” 1.0 ”
encoding=” iso −8859−1” ?>
<geotracking −c o n f i g u r a t i o n
u r i =” h t t p : / /www. deveryware . com / c o n f i g u r a t i o n / TruckTrackingConfig ”
a p p l i c a t i o n =” h t t p : / /www. deveryware . com / a p p l i c a t i o n / TruckTracking ”
type =” h t t p : / /www. deveryware . com / a p p l i c a t i o n / TruckTracking ”
xmlns=” h t t p : / / move . l i p 6 . upmc . f r / geotracking −model / ”
xmlns:xsd=” h t t p : / /www. w3 . org /2001/ XMLSchema”>
<a l e r t C o n f i g u r a t i o n
a l e r t =” A r r i v a l A t N i c e W a r e h o u s e N o t i f i c a t i o n ”>
<with−param name=” P o s i t i o n i n g D e v i c e ”>
<mobile name=” truck1234 ” xmlns=” h t t p : / /www. deveryware . f r / schema / mobile ”
<phoneNumber>06123456</ phoneNumber>
</ mobile>
</ with−param>
<with−param name=” StartTime ”
type =”2010−10−26 T08:00:00 ” />
<with−param name=”EndTime”
type =”2010−10−31 T18:00:00 ” />
</ a l e r t C o n f i g u r a t i o n>
. . .
</ geotracking −c o n f i g u r a t i o n>
Fig. 9.
Application conﬁguration captured through the E-DeveryLoc tool.
3) an application deﬁning alerts from the alert types of an
application model to which it applies adaptations from
the adaptation model (Fig. 8); and,
4) a conﬁguration deﬁning the exact devices and period
of time during which the alerts of an application are
activated on the GeoHub (Fig.9).
The separation of concerns exhibited by these different
models allows us to deﬁne and give different roles in model
elicitation. Geotracking specialists can deﬁne new application
and adaptation models, while end users can deﬁne applications
and conﬁgurations from libraries of existing models.
An example model from the logistics use case, elicited
according to the above principles is shown in Figure 6. It
corresponds to the models appearing on the right of Figure 4.
A model deﬁnes alert types, which deﬁnes triggering condi-
tions and the notiﬁcation to be sent. Notice that alert type
parameters are divided in three categories:
1) application parameters, that will be provided when deﬁn-
ing an application,
2) conﬁguration parameters, given at conﬁguration time,
and
3) runtime parameters provided by the GeoHub upon re-
ception of positions to decide whether or not the alert
is triggered.
To give a glimpse of the qualitative approach, the trigger of
the alert is deﬁned as a fuzzy inference system, based on the
process of computing with words [8] here under the 2-tuple [9]
representation model. In this case, this approach allows the end
user to work with a qualitative tolerance for the time before the
truck arrives at the position corresponding to the notiﬁcation
delay in order to trigger this notiﬁcation. This makes more
sense than a precise tolerance, like 2 minutes, given the
imprecision of the time estimation made from positions and
travel conditions of the truck.
Figure 7 shows the companion adaptation model capturing
the kinds of adaptations to be applied to alert types. In this
example, the adaptation model deﬁnes an adaptation of the
frequency of position sendings. Adaptations identify the state
information from the system upon which a decision must be
made, and the actions that need to be taken. It also deﬁnes
the criteria, and when there are several ones, an aggregation
of these criteria must be fed into the decision process; one
possibility is to deﬁne an aggregation function computing a
single value from the previous criteria.
Figure 8 shows an example of an application. In this
example, an alert of the type ArrivalAtWarehouseNotiﬁcation
is deﬁned for the Nice warehouse by simply providing the
application parameters to the corresponding alert type. Fig-
76
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

ure 9 then shows the conﬁguration model which provides
the conﬁguration parameters for each and every alert in the
corresponding application.
With this information, the tool shall generate code skeletons
for both the business and the adaptation components, and
also for the code to be loaded on the GeoHub and on the
(programmable) positioning devices.
As it can be seen in Figure 4, and illustrated by Figure 5,
a feedback link from applications to the new DeveryLoc
will provide for ofﬂine post-mortem analysis of application
scenarii to help end users tailor the parameters of their
application needs and resources. For example, if it shows that
the application has a too large cost, the end user may adopt
less constraining tolerances on the notiﬁcations so to lower
frequencies, and therefore the geotracking costs. Hence, it is
adaptation at another level and under another time frame.
VI. RELATED WORK
The kinds of adaptations, as well as the described software
architecture for geotracking, fall into the area of autonomic
computing [7], an ambitious goal set by IBM in 2003 of
building self-management capabilities in applications. Within
this framework, our approach to adaptation falls under the self-
conﬁguration and self-optimization concepts, but also under
the self-healing, though only using a fallback device.
GeoHub and the set of positioning devices used by the
geotracking can be seen as a monitoring system. Hence, the
kind of adaptation we have presented can be compared to
adaptive monitoring [10], [11], but with dynamic adaptability
capabilities [12]. Charbiwala et al. [13] address a problem
similar to ours in the context of sensor networks, but they focus
on correlation objectives rather than end users’ application
ones.
Within the ﬁeld of autonomic computing, feedback control
in distributed systems aims at applying control theory and
tools to the adaptation of distributed systems, like the rate
of sendings in sensor networks [13].
VII. CONCLUSION
In this paper, we have explored challenges and opportu-
nities in the self-adaptation of geotracking applications. As
geotracking applications go large-scale, a set of resource-aware
decision-making models are proposed to strive for an optimal
management of positioning devices, system-wide. Moreover,
as these applications become more and more mission-critical,
fault-tolerance is also being addressed, by integrating the
possibility to switch between alternative positioning devices,
like ﬁxed GPS blackboxes placed on the vehicle, portable GPS
devices running on batteries, and drivers’ cell-phones, also
running on batteries.
Switching to the geotracking system in the large, the paper
also addresses issues in the management of a geotracking
hub, used in SALTY to collect and correlate positioning data,
as well as notifying end user applications when predeﬁned
conditions are met. The use case raises issues in the global
management of a large set of positioning devices with regards
to their joint use of a shared resource, and paves the way
to large-scale coordination for ﬁxing individual positioning
frequencies so to minimize the resource usage system-wide,
namely the rate of positions sendings coming to the GeoHub.
Having established these use cases and the required
decision-making models, future work within the SALTY
project include the design of a generic self-adaptive archi-
tecture based on the IBM’s MAPE loop autonomic computing
functional architecture. This generic architecture will be used
in the implementation of demonstration applications for the
SALTY project. Another important objective is to provide a
methodology and a set of tools supporting the development of
self-adaptive geotracking applications.
ACKNOWLEDGMENT
This work is partly funded by the French National Agency
for Research (ANR), within the ARPEGE Program, under the
project SALTY ANR-09-SEGI-012.
REFERENCES
[1] S. Chakravarthy and Q. Jiang, Stream Data Processing: A Quelity of
Service Perspective.
Springer, 2009.
[2] R. Bellman, Dynamic Programming.
Princeton University Press, 1957.
[3] D. Bertsekas and J. Tsitsiklis, Neuro-Dynamic Programming.
Athena
Scientiﬁc, 1996.
[4] C. Watkins and P. Dayan, “Q-Learning,” Machine Learning, vol. 8, pp.
279–292, 1992.
[5] L. Zadeh, “Outline of a new approach to the anamysis of complex
systems and decision processes,” IEEE Transactions on Systems, Man,
and Cybernetics, vol. 3, no. 1, pp. 28–44, 1973.
[6] K. Michels, F. Klawonn, R. Kruse, and A. Nrnberger, Eds., Fuzzy
Control — Fundamentals, Stability and Design of Fuzzy Controllers,
ser. Studies in Fuzziness and Soft Computing.
Springer-Verlag, 2006,
no. 200.
[7] J. O. Kephart and D. M. Chess, “The vision of autonomic computing,”
Computer, vol. 36, no. 1, pp. 41–50, 2003.
[8] L. Zadeh, “The Concept of a Linguistic Variable and Its Applications
to Approximate Reasoning,” Information Sciences, Part I, II, III, vol.
8,8,9, pp. 199–249, 301–357, 43–80, 1975.
[9] F. Herrera and L. Mart´ınez, “A 2-tuple fuzzy linguistic representation
model for computing with words,” IEEE Transactions on Fuzzy Systems,
vol. 8, no. 6, pp. 746–752, 2000.
[10] M.
A.
Munawar
and
P.
A.
S.
Ward,
“Adaptive
Monitoring
in
Enterprise
Software
Systems,”
in
SIGMETRICS
2006
Work-
shop
on
Tackling
Computer
Systems
Problems
with
Machine
Learning
Techniques
(SysML),
2006,
http://research.microsoft.com/en-
us/um/redmond/events/sysml/papers/sysml-Munawar.pdf.
[11] S. Agarwala, Y. Chen, D. Milojicic, and K. Schwan, “QMON: QoS-
and Utility-Aware Monitoring in Enterprise Systems,” in Proceedings of
the IEEE International Conference on Autonomic Computing, ICAC’06.
IEEE Computer Society, June 2006, pp. 124–133.
[12] B. Le Duc, P. Chˆatel, N. Rivierre, J. Malenfant, P. Collet, and I. Truck,
“Non-functional data collection for adaptive business processes and
decision making,” in Proceedings of the 4th Int. Work. on Middleware
for Service Oriented Computing (MWSOC’09).
ACM, 2009, pp. 7–12.
[13] Z.
Charbiwala,
S.
Zahedi,
and
Y.
Cho,
“Toward
Quality
of
Information
Aware
Rate
Control
for
Sensor
Networks,”
in
Proceedings
of
the
FeBID
2009
Workshop,
2009,
http://controlofsystems.org/febid2009/papers/p11 s24 CharbiwalaZahedi.pdf.
77
ADAPTIVE 2010 : The Second International Conference on Adaptive and Self-Adaptive Systems and Applications
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-109-0

