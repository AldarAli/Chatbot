A Packet-Interleaving Scheme for Reliability Resilience under Burst Errors in 
Wireless Sensor Networks 
 
Tsang-Ling Sheu and Yen-Hsi Kuo  
Department of Electrical Engineering  
National Sun Yat-Sen University 
Kaohsiung, Taiwan 
  sheu@ee.nsysu.edu.tw    ysk@atm.ee.nsysu.edu.tw
Abstract — This paper presents a packet interleaving 
scheme (PIS) for increasing packet reliability under burst 
errors in wireless sensor networks (WSN). The proposed 
PIS, using Reed-Solomon (RS) codes, classifies data into 
two types: high-reliability-required (HRR) data and 
non-HRR data. An HRR packet is encoded with a short RS 
symbol, while a non-HRR packet with a long RS symbol. 
When an HRR and a non-HRR packet arrive at a sensor, 
they are interleaved on a symbol by symbol basis. Thus, the 
effect of burst errors (BE) is dispersed and consequently 
the uncorrectable HRR packets can be reduced. For the 
purpose of evaluation, two models, the uniform bit-error 
model (UBEM) and the on-off bit-error model (OBEM), 
are built to analyze the packet uncorrectable probability. 
In the evaluation, we first change the lengths of BE, then 
we vary the shift positions in a BE period, and finally we 
increase the number of correctable symbols to observe the 
superiority of the proposed PIS in reducing packet 
uncorrectable probability. 
Keywords: WSN, RS Code, burst errors, interleaving, packet 
uncorrectable probability 
I. 
INTRODUCTION 
Along with the increasing requirements for quality of 
living and home security, sensors have been widely 
deployed inside or outside a building to collect 
environmental 
information, 
such 
as 
temperature, 
humidity, image, motion picture, etc. To effectively 
deliver the collected data back to a control center for 
further analysis, a wireless sensor network (WSN) [1-3] 
is usually built. However, packet transmission over a 
WSN may encounter intermittent errors due to weak 
signals or interferences. The erroneous packets, if 
comprising of text or numbers, such as temperature or 
humidity, would require packet re-transmission, which 
increases network load. Thus, the motivation of this paper 
is to increase transmission reliability over a WSN, which 
has recently attracted many researchers’ attention. 
Basically, previous researches on transmission 
reliability over a WSN can be divided into two major 
categories: reliable routing and information coding. In the 
first category, to increase the transmission reliability after 
data are collected by a sensor node, relay nodes (RNs) are 
employed. For examples, H. Chebbo, et al. [4] modified 
IEEE 802.15.4 MAC frames. The authors added one bit 
in the frame control field, with which whether it is 
necessary to build a tree by RNs or just build a simple 
star, can be determined. Moreover, R. Sampangi, et al. [5] 
utilized RNs to divide sensors into several cluster 
networks. Since the distance from a sensor to its cluster 
head is reduced, the quality of data transmission is greatly 
improved. To protect the routing path, S. Kim, et al. [6] 
utilized both coding and retransmission schemes once the 
established path fails. However, in these schemes, it is 
inevitable that end-to-end packet delay will increase 
accordingly due to multiple-hop forwarding.  
Thus, in the second category, instead of developing 
reliable routing, the authors switch their interests to 
information coding. For examples, E. Byrne, et al. [7] 
designed a coding scheme which can increase the 
probability of successful decoding based on graph theory. 
Y. Hamada, et al. [8] proposed a scheme to reduce packet 
error rate by using Luby Transform (LT) codes [9]. Their 
proposed scheme has achieved small complexity of O(n); 
yet too many packets require retransmission when bit 
error rate is high. Thus, K. Ishibashi, et al. [10] proposed 
an embedded forward error control (FEC) technique 
which utilizes RS (Reed Solomon) code to reduce packet 
error rate. Similarly, M. Busse, et al. [11] can recover lost 
chunks by using Fountain code and Raptor code. To 
increase data reliability and processing speed, K. Yu, et al. 
[12] designed a new FEC which protects header and 
payload, respectively. Similarly, M. Srouji, et al. [13] 
proposed a reliable data transfer scheme which can adjust 
the lengths of redundancy code based on the successful 
receiving rate at the downstream node. 
Unlike the previous research work, in this paper we 
propose a packet interleaving scheme (PIS) to reduce the 
impact of burst errors (BE) on high-reliability-required 
(HRR) data in WSNs. Although Reed-Solomon (RS) 
codes may correct bit errors under certain constraints, it 
may not be economically worthy in dealing with burst 
errors when the number of consecutive bit errors exceeds 
a threshold. Hence, to increase packet correctable 
probability in a WSN, the proposed PIS first classifies the 
collected data into two different types: HRR data and 
non-HRR data. An HRR packet is encoded with a short 
RS symbol, while a non-HRR packet with a long RS 
symbol. When an HRR and a non-HRR packet arrive at a 
sensor, they are interleaved on a symbol-by-symbol basis. 
The noticeable benefit from the packet interleaving is that 
the burst errors are dispersed and the uncorrectable 
probability of HRR packets is significantly reduced. 
The remainder of this paper is organized as follows. 
In Section 2, the proposed PIS and its operations are 
described. In Section 3, an analytical model is built using 
two bit-error models, the uniform bit-error model (UBEM) 
and the on-off bit-error model (OBEM). In Section 4, 
numerical results are presented and discussed. Finally, 
conclusions are drawn in Section 5. 
46
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

II. PACKET INTERLEAVING SCHEME 
A. WSN with Multi-hop Tree Structure 
In a wireless sensor network (WSN), a coordinator is 
the sink which gathers all the data collected from other 
distant sensor nodes. To facilitate data gathering from all 
the sensor nodes, it is very constructive that the 
coordinator and the sensor nodes will collaborate to build 
a multi-hop tree structure (MTS), as shown in Figure 1. 
In an MTS-based WSN, data collected by a sensor node 
will be forwarded hop-by-hop to the coordinator. Thus, 
by fully utilizing a branch node of the MTS, in this paper, 
we propose a packet interleaving scheme (PIS) based on 
RS codes to reduce the impact of burst errors on packet 
uncorrectable probability. 
     :Coordinator
     :Sensor
 
Figure 1.  WSN with multi-hop tree structure 
B. Packet Interleaving 
In the proposed PIS, packets collected by a sensor 
node 
are 
classified 
into 
two 
different 
types: 
high-reliability required (HRR) packet and non-HRR 
packet. An HRR packet is defined as a packet which 
requires for retransmission, if uncorrectable burst errors 
exist. Payload in an HRR packet consists of numerical 
data, such as temperature, moisture, luminance, etc. This 
type of packet has relatively shorter data length (usually, 
a couple of bytes) and each uncorrectable HRR packet 
requires for retransmission. Hence, it is better to employ a 
shorter-length symbol (in this paper, we use m = 4) to 
encode an HRR packet with shorter data length. On the 
other hand, payload in a non-HRR packet consists of 
non-numerical data, such as video, audio, etc. This type 
of packet has relatively longer data length (usually, in the 
order of kilo bytes) and each uncorrectable non-HRR 
packet may not require retransmission. Thus, it is better 
to employ longer-length symbol (we use m = 8) to encode 
a non-HRR packet with longer data length. 
 
 
 
 
 
 
 
 
  
 
MAC payload
MAC header
M bytes  
 FCS
    
 
  
 
  
...  
  
 FCS  
Generate  
2 × t symbols  
 
  
  
 
Packetize 
MAC payload  
MAC header 
  
...  
  
... 
...  
  
...  
  
     
 
    
 
  
  
Generate  
  
 
 
Generate  
2 × t symbols  
 
 
 
  
 
... 
...  
 
 
  
 
 
M bytes
Convert 4 bits to 1 symbol 
k symbols
k symbols
2 M 
symbols
4 bits
4 bits
4 bits
4 bits
symbols
k
4 bits
4 bits
 
 
2× t symbols 2× t symbols
2× t symbols
...
2× t symbols 
8× t bits
8× t bits
8× t bits
N×t× 8 bits
 
Figure 2.  An HRR encoded with m = 4 
As it is illustrated in Figure 2, an HRR packet is 
encoded with a shorter-length RS symbol (i.e., m = 4). 
First, an M-byte MAC-layer header and payload is 
converted to
M
M
2
4
8)
(
=
×
symbols on the basis of 4 bits 
per symbol. Thus, we have the length of a codeword is n, 
where 
15
1
24
1
2
− =
n = m − =
, the number of symbols 
for 
user 
data 
in 
a 
codeword 
is 
k, 
where 
t
t
n
k
×
−
=
×
−
=
2
15
2
, and the number of symbols for 
redundancy code in a codeword is
2 × t
. Let 



= 
k
M
N
2
, 
which denotes the number of codeword required for 
encoding the M-byte packet (header plus payload). The 
total redundancy code (or FCS) is therefore equal to 
t
N
× 2×
 symbols, or 
8)
( 4
2
× ×
=
× × ×
t
N
t
N
 bits. 
Similarly, as it is illustrated in Figure 3, a non-HRR 
packet is encoded with a longer-length symbol (m = 8). 
An M-byte MAC-layer header and payload is converted 
to
M
M
=
×
8
8)
(
symbols on the basis of 8 bits per symbol. 
A code-word length, 
255
1
28
1
2
− =
n = m − =
 bytes, is 
much greater than the maximum length of a packet (127 
bytes in WSN). Thus, a code-word is sufficiently enough 
to encode a MAC-layer packet. Thus, the length of 
redundancy code (or FCS) is equal to 
2 × t
 bytes. 
 
M bytes  
  
 
M symbols 
M bytes  
MAC payload 
MAC header 
 
 
  
  
 
Generate  
2 × t symbols  
 
Packetize  
 
 
 
 
... 
 
 
 
 
 
 
Convert 1 byte to 1 symbol
8 bits
8 bits
8 bits
8 bits
8 bits
2× t symbols
FCS
2 × t bytes
MAC header
MAC payload
 FCS
 
Figure 3.  A non-HRR encoded with m = 8 
When both an HRR and a non-HRR packet are 
received by a branch node in a tree-structured WSN, 
these two packets are interleaved on a symbol-by-symbol 
basis, as shown in Figure 4. The interleaved packet is 
then forwarded to an upper stream node, which performs 
decoding and correction process. However, as shown in 
Figure 5, an interleaved packet may not be correctable, if 
it encounters burst errors where the number of total errors 
is greater than t. In the proposed PIS, by separating the 
interleaved single packet back to their original two 
packets, each individual packet may become correctable. 
This is because the number of errors in each separated 
packet is highly possible to be smaller than t. 
 
 
  
  
...  
  
  
  
...  
  
Symbol
interleaving  
  
  
  
  
... 
 
m=4  
 
m=8  
4 bits
4 bits
4 bits
4 bits
4 bits
8 bits
8 bits
8 bits
8 bits
8 bits
 
Figure 4.  Packet interleaving on a symbol-by-symbol basis 
47
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

 
m=4  
m=8  
  
 
 
 
 
 
 
 
 
... 
Separate to 
 
 
 
 
 
 
 
 
... 
 
 
 
 
 
 
 
 
... 
 
  
  
4 bits
4 bits
4 bits
4 bits
4 bits
Interleaved 
packet
Burst 
errors
Burst 
errors
8 bits
8 bits
8 bits
8 bits
8 bits
Burst 
errors
4 bits
8 bits
 
Figure 5.  Burst errors dispersed on two symbols 
III. ANALYTICAL MODEL 
Two analytical models are built for comprehensive 
numerical simulations. The first one is referred to as 
uniform bit error model (UBEM), while the second one is 
referred to as on-off bit error model (OBEM). The first 
model assumes the errors occur evenly on the coded 
packets, while the second model assumes the errors may 
occur continuously in a burst length. 
A. 
UBEM 
Let
UB be
P
_
and
UB se
P
_
denote the probability of bit 
errors and the probability of symbol errors, respectively. 
Since any bit errors occur in a symbol may result in a 
symbol error and each symbol has m bits, we can 
derive
UB se
P
_
directly from
UB be
P
_
, as shown in Eq. (1). 
m
be
UB
UB se
P
P
)
1(
1
_
_
−
= −
            (1) 
Next, let us define two more parameters,
S
N and
NC
. 
The first parameter denotes the number of symbols in a 
codeword and the second parameter denotes the number 
of codeword in a packet. Hence, the uncorrectable 
probability of a codeword (
UB cuc
P
_
), can be derived as 
shown in Eq. (2). 
 
(
)
(
)
∑ =
−






−
×
×





−
=
t
i
i
N
se
UB
i
se
UB
s
cuc
UB
S
P
P
i
N
P
0
_
_
_
1 
 
1
 (2) 
In Eq. (2), we know in a codeword if the number of 
symbol errors is smaller than t, then the codeword is 
correctable. Thus, the uncorrectable probability of a 
codeword can be summed up from 
t
i
= 0 to 
, since there 
are 






i
Ns
 different types of errors. Next, let us 
define
UB puc
P
_
as the packet uncorrectable probability. 
Since there are 
NC
 codeword in a packet, we can 
derive 
UB puc
P
_
 as shown in Eq. (3). 
(
)
NC
cuc
UB
UB puc
P
P
_
_
1 
1
−
= −
                            (3) 
B. OBEM 
 
 
 
 
t  
ω  
β  
on 
off 
θ  
... 
 
  
  
 
  
  
 
m1
m2
m1
m1
m2
m2
IP
BE
 
Figure 6.  On-off bit error model 
The on-off bit error model (OBEM) is illustrated in 
Figure 6. All the parameters used in the analysis are 
defined in Table I. A burst error (BE) period is defined as 
two consecutive bit error intervals where high bit errors 
appear first and then followed by low bit errors. Notice 
that 
0
θ  is defined as the length of right-shift position for 
an initial BE period; 
θ0 = 0
 implies that no gap exists 
between the beginning of an interleaved packet and the 
beginning of the first BE period.  
TABLE I.  
PARAMETERS USED IN OBEM 
1
m  
Number of bits in a symbol of HRR packet 
2
m  
Number of bits in a symbol of non-HRR packet 
β  
Packet interleaved length in bits (
2
1
m + m
) 
on 
Length of high bit errors (in bits) 
σ  
Error probability of high bit errors 
off 
Length of low bit errors (in bits) 
ρ  
Error probability of low bit errors 
ω  
Burst length (on + off ) (in bits) 
0
θ  
Length of initial right-shift position (in bits) 
First, we define 
OB se
P
_
 as the symbol-error 
probability in OBEM. An interleaved packet (IP) and a 
burst error (BE) may have different lengths; here we 
assume the former has a length of β bits (
2
1
β = m + m
) 
and the later has a length ofω bits (
ω = on + off
). Since 
every symbol in an IP may encounter different positions 
of bit errors, we have to analyze the bit error positions of 
a symbol before we can compute the symbol-error 
probability. To compute the error probability of the 
αth
 
symbol, we define (i) 
s
m1  = the distance between the 
first bit of 
1
m  and the first bit of an IP, and (ii) 
e
m1  = 
the distance between the last bit of 
1
m  and the first bit 
of an IP. Similarly, we define 
s
m2  and 
e
m2  for 
2
m . 
Thus, 
s
m1 , 
e
m1 , 
s
m2 , and 
e
m2  can be computed as 
shown in Eq. (4), (5), (6), and (7), respectively. 
 
m1s = α × β
              (4) 
 
1
1
1
−
+
×
=
m
m e
β
α
                            (5) 
 
1
2
m
m s
+
×
=
β
α
                            (6) 
 
(
)
1
1
2
−
×
+
=
β
α
m e
                            (7) 
For simplicity, the four parameters, 
s
m1 , 
e
m1 , 
s
m2 , 
and 
e
m2  are generalized to 
ij
m , where 
2 ,1
i =
 and 
48
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

s e
j
 ,
=
. Let θ  denote the length of right-shift position 
between an IP and a BE at the 
αth
symbol. Let 
Ωmij
denote the length of right-shift position for 
s
m1 , 
e
m1 , 
s
m2 , and 
e
m2  at the 
αth
symbol. Thus, we can 
compute θ  and 
Ωmij
as shown in Eq. (8) and (9), 
respectively. 
 
ω
ω
ω
θ
θ
 
 
 
 
0
mod
header length
header length












−
×



+ 
=
 (8) 
 
θ
ω
ω
+
×





 −





+
=
Ω
1
1
ij
m
m
ij
       (9) 
After we found the right-shift position between an IP 
and a BE, we can categorize the symbol errors into four 
cases. Case 1 shows whether or not a symbol may occupy 
one BE or two BE periods, their start bit and stop bit of a 
symbol all appear at the high-bit-error interval. Case 2 
shows only the start bit of a symbol appears at the 
high-bit-error interval. Case 3 shows whether or not a 
symbol may occupy one BE or two BE periods, neither 
the start bit nor the stop bit appear at the high-bit-error 
interval. Finally, Case 4 shows only the stop bit of a 
symbol appears at the high-bit-error interval. Actually, 
the four different cases of symbol errors can be 
constrained by eight inequalities with four parameters, 
ij
m , 
Ωmij
, on, and ω , as shown in Table II.  
TABLE II.  
FOUR CASES OF SYMBOL ERRORS 
Case 
Conditions 
1 
on
m
on
m
ie
ie
is
is
m
ie
m
m
is
m
+
< Ω
≤
Ω
+
< Ω
≤
Ω
and  
  
 
2 
+ ω
< Ω
≤
+
Ω
+
< Ω
≤
Ω
ie
ie
is
is
m
ie
m
m
is
m
m
on
on
m
  
 
and 
  
 
3 
ω
ω
+
< Ω
≤
+
Ω
+
< Ω
≤
+
Ω
ie
ie
is
is
m
ie
m
m
is
m
m
on
m
on
  
  and  
  
 
4 
on
m
m
on
ie
ie
is
is
m
ie
m
m
is
m
+
< Ω
≤
Ω
+
< Ω
≤
+
Ω
  and  
  
ω
 
 
Once we identify the four cases of symbol errors, we 
can compute the symbol-error probability. Since one 
codeword 
consists 
of 
Ns
 symbols, 
we 
define 
1
0,1 ,..., 
 ),
(
_
−
=
s
OB se
N
P
α
α
, 
as 
the 
symbol-error 
probability of the 
αth
 symbol. Let σ  denote the error 
probability of high bit errors and ρ  denote the error 
probability of low bit errors. Let 
Nσ
 represent the 
number of bits with errors in a symbol and 
ρ
N  
represent the number of bits without errors in a symbol. 
)
(
_
OB se α
P
is computed as shown in Eq. (10).  
 
(
)
(
)
ρ
σ
ρ
σ
α
N
N
OB se
P
−
×
−
= −
1
1
1
)
_ (
     (10) 
Now, we can compute 
Nσ
 and 
ρ
N  for case 1 as 
shown in Eq. (11) and (12), case 2 as shown in Eq. (13) 
and (14), case 3 as shown in Eq. (15) and (16), and case 4 
as shown in Eq. (17) and (18), respectively. 
Off
m
m
N
is
ie
×





−




+
 −





−




+
=
1
1
1
1
ω
ω
ρ
Off
m
m
is
ie
×









+
−




+
=
ω
ω
1
1
                                           (11) 
Off
m
m
m
N
m
N
is
ie
i
i
×









+
−




+
−
=
−
=
ω
ω
ρ
σ
1
1
                (12) 
is
m
is
ie
m
On
On
m
m
N
is
−
+
+ Ω
×





−




+
 −





−




+
=
1
1
1
1
ω
ω
σ
   
is
is
is
ie
m
On
m
On
m
m
−
+
+
×





−




+
+
×









+
−




+
=
θ
ω
ω
ω
ω
1
1
1
1
is
is
ie
m
Off
m
On
m
−
+
×





−




+
+
×




+
=
θ
ω
ω
1
1
1
                    (13) 
σ
ρ
N
m
N
= i −
 
is
is
ie
i
m
Off
m
On
m
m
+
−
×





−




+
−
×




+
−
=
θ
ω
ω
1
1
1
            (14) 
On
m
m
N
is
ie
×





−




+
 −





−




+
=
1
1
1
1
ω
ω
σ
On
m
m
is
ie
×









+
−




+
=
ω
ω
1
1
                                            (15) 
On
m
m
m
N
m
N
is
ie
i
i
×









+
−




+
−
=
−
=
ω
ω
σ
ρ
1
1
              (16) 
is
m
is
ie
m
Off
m
m
N
is
−
+
+ Ω
×







 −





−




+
 −





−




+
=
ω
ω
ω
ρ
1
1
1
1
1
is
is
is
ie
m
m
Off
m
m
−
+
+
×





−




+
+
×





−




+
−




+
=
ω
θ
ω
ω
ω
ω
1
1
1
1
1
is
ie
is
m
Off
m
On
m
−
+
×





−




+
+
×




+
=
θ
ω
ω
1
1
1
                (17) 
is
ie
is
i
i
m
Off
m
On
m
m
N
m
N
+
−
×





−




+
−
×




+
−
=
−
=
θ
ω
ω
ρ
σ
1
1
1
     (18) 
By substituting 
Nσ
 and 
ρ
N  back to Eq. (10), we 
can derive 
)
(
_
OB se α
P
 for the four different cases of 
symbol errors. After we compute the symbol-error 
probability for the four different cases, our next step is to 
derive the uncorrectable probability of a codeword and 
the uncorrectable probability of a packet. We know there 
are 
NC
 codeword in a packet and the uncorrectable 
probabilities of the 
NC
 codeword are all different. Let 
1
1 ,0 ,...,
 ),
(
_
−
=
c
OB cuc
N
l l
P
, denote the uncorrectable 
probability of the 
lth
 codeword and let 
OB puc
P
_
 
49
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

denote the uncorrectable probability of a packet. By using 
the combination theory of probabilities, we can derive 
( )
_
l
P
OB cuc
 and 
OB puc
P
_
 as shown in Eq. (19) and (20). 
(
)
(
)
∑ ∑ ∏
=
−
=
−
=
−
























−
×
×





−
=
t
i
j
k
r
N
k
se
OB
r
k
se
OB
ij
k
k
cuc
OB
i
ij
k
k
ij
k
P
P
r
N
l
P
0
1
0
1
0
_
_
_
1 
1
( )
t
l
 (19) 
 
( )
(
)
∏
−
=
−
= −
1
0
_
_
1
1
NC
l
cuc
OB
puc
OB
l
P
P
         (20) 
IV. NUMERICAL RESULTS 
To study the influences of the four parameters, (i) the 
length of high bit errors (the on period), (ii) the length of 
low bit errors (the off period), (iii) the right-shift position 
(θ ), and (iv) the number of correctable symbols (t), we 
perform numerical simulations. Table III shows the 
parameters and their setting used in the simulation. 
TABLE III.  PARAMETER SETTINGS 
Parameter 
Setting 
1
m  
4 bits 
2
m  
8 bits 
on 
4/6/8 bits 
off 
8/6/4 bits 
σ  
0.1 
ρ  
0.0001 
A. 
Impact of Correctable Symbols 
First, we are interested in studying the impact of 
increasing the number of correctable symbols when the 
length of high bit errors is shorter than the length of low 
bit errors; i.e., on = 4 bits and off = 8 bits. From Figure 7, 
we can observe that both the packet uncorrectable 
probabilities of HRR and non-HRR curves drop off very 
quickly, when the number of correctable symbols (t) is 
increased from 1 to 3. Additionally, we can observe that 
the curves of 
OB puc
P
_
with PIS (the two dashed lines) are 
much lower than the curves of 
OB puc
P
_
 without using 
PIS (the two solid lines). The improvement of 
OB puc
P
_
 
by using PIS is more significant when t is small, which is 
quite beneficial for reducing packet overhead, since the 
number of redundancy bits in RS codes can be shorter. 
Another noticeable phenomenon is that although when 
θ  is smaller than 7, HRR with PIS are completely 
inverted to non-HRR with PIS, the curves of HRR with 
PIS do drop to zero when θ  is larger than 7.  
(a)   (on, off, t) = (4, 8, 1)
 
(b)   (on, off, t) = (4, 8, 2)
 
(c)   (on, off, t) = (4, 8, 3)
 
Figure 7.  Packet uncorrectable probability (on is smaller than off) 
From Figures 8(a) to 8(c), we show the packet 
uncorrectable probabilities when the on period (8 bits) is 
longer than the off period (4 bits). It is interesting to 
notice that when t is larger than 3 and θ  is smaller than 
6, the packet uncorrectable probabilities of HRR with PIS 
are higher than those curves without PIS. Of course, 
when t is smaller than 3 and θ  is larger than 6, the 
situations are completely inverted. Hence, from Figure 11, 
we have discovered that when the period of high bit 
errors exceeds the length of an HRR symbol (m = 4) and 
approaches to a non-HRR symbol (m = 8), it is better to 
encode packets with a small value of t; otherwise, there is 
no advantage achieved by using the proposed PIS. 
(a)   (on, off, t) = (8, 4, 1)
 
(b)   (on, off, t) = (8, 4, 2)
 
50
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

(c)   (on, off, t) = (8, 4, 3)
 
Figure 8.  Packet uncorrectable probability (on is larger than off) 
Figures 9 shows the comparisons in packet 
uncorrectable probabilities between UBEM and OBEM. 
Notice that the curves of UBEM and the curves of 
OBEM vary along with the following two parameters: (i) 
when the number of correctable symbols increases from 1 
to 5, the curves of UBEM dissever very quickly from 
those of OBEM; and (ii) when the right-shift position 
increases from zero to 8 bits, the gap between these two 
models becomes smaller. Since OBEM is more reactive 
to a real word than UBEM, it is rewarding to know that 
the proposed PIS can reduce packet uncorrectable 
probability in OBEM more significantly than that in 
UBEM. Another noticeable result is that no matter how 
we increase the period of high bit errors (the on period 
from 4 bits in 9(a) to 8 bits in 9(b)), HRR with PIS in 
OBEM always exhibits the lowest packet uncorrectable 
probability (near zero, in some cases). The relatively 
lower packet uncorrectable probability for HRR packets 
has demonstrated that the proposed PIS can successfully 
protect HRR packets from burst errors, while at the same 
time it does not sacrifice non-HRR packets from large 
uncorrectable bit errors.  
(a)   (on, off, θ) = (4, 8, 0)
 
(b)   (on, off, θ) = (8, 4, 8)
 
Figure 9.  Packet uncorrectable probability in UBEM vs in OBEM 
V. CONCLUSIONS 
In this paper, we have presented a packet interleaving 
scheme to reduce packet uncorrectable probability under 
burst errors in WSN. From the simulations, we have 
demonstrated that, no matter how we adjust the period of 
high bit errors, the proposed PIS behaves more resilient 
to burst errors in OBEM than in UBEM. Finally, by 
carefully adjusting the period of high bit errors and the 
right-shift positions, the PIS can reduce the uncorrectable 
probability of HRR packets to near zero. 
REFERENCES 
[1] 
F. Barac, K. Yu, M. Gidlund, J. Akerberg, and M. 
Bjrkman, 
“Towards 
Reliable 
and 
Lightweight 
Communication in Industrial Wireless Sensor Networks,” 
INDIN2012: IEEE 10th International Conference on 
Industrial Informatics, Beijing, China, Jul. 25-27, 2012. 
[2] 
S. Marinkovic and E. Popovici, “Network Coding for 
Efficient Error Recovery in Wireless Sensor Networks 
for Medical Applications,” 2009 First Int’l Emerging 
Network Intelligence, Sliema, Malta, Oct. 11-16, 2009. 
[3] 
B. Sklar, Digital Communications: Fundamentals and 
Applications, 2nd Ed. New Jersey, USA, 2001. 
[4] 
H. Chebbo, S. Abedi, T. A. Lamahewa, D. B. Smith, D. 
Miniutti, and L. Hanlen, “Reliable Body Area Networks 
Using 
Relays: 
Restricted 
Tree 
Topology,” 
Int’l 
Conference on Networking and Communications, Maui, 
Hawaiian Island, USA, Jan. 30 - Feb. 2, 2010. 
[5] 
R. V. Sampangi, S. R. Urs, and S. Sampalli, “A Novel 
Reliability Scheme Employing Multiple Sink Nodes for 
Wireless Body Area Networks,” 2011 IEEE Symposium 
on Wireless Technology and Applications (ISWTA), 
Langkawi, Malaysia, Sep. 25-28, 2011. 
[6] 
S. Kim, R. Fonseca, and D. Culler, “Reliable Transfer on 
Wireless 
Sensor 
Network,” 
First 
Annual 
IEEE 
Communications Society Conference on Sensor and Ad 
Hoc Communications and Networks, Santa Clara, 
California, Oct. 4-7, 2004. 
[7] 
E. Byrne, A. Manada, S. Marinkovic, and E. Popovici, 
“A Graph Theoretical Approach for Network Coding in 
Wireless Body Area Networks,” 2011 IEEE International 
Symposium on Information Theory Proceedings (ISIT), 
Saint Petersburg, Russia, Jul. 31 - Aug. 5, 2011. 
[8] 
Y. Hamada, K. Takizawa, and T. Ikegami, “Highly 
Reliable Wireless Body Area Network using Error 
Correcting Codes,” 2012 IEEE Radio and Wireless 
Symposium, Santa Clara, CA, USA, Jan. 15-18, 2012. 
[9] 
M. Luby, “LT Codes,” The 43rd Annual IEEE 
Symposium on Foundations of Computer Science, 
Vancouver, British Columbia, Canada, Nov. 16-19 2002. 
[10] K. Ishibashi, H. Ochiai, and R. Kohno, “Embedded 
Forward Error Control Technique for Low-Rate but Low 
Latency Communications,” IEEE Trans. on Wireless 
Comm., vol. 7, no. 5, pp. 1456-1460, May 2008. 
[11] M. Busse, T. Haenselmann, and W. Effelsberg, 
“Energy-Efﬁcient Data Dissemination for Wireless 
Sensor Networks,” Fifth IEEE Int’l Conference on 
Pervasive Computing and Communications Workshops, 
White Plains, New York, USA, Mar. 19-23, 2007. 
[12] K. Yu, F. Barac, M. Gidlund, J. Akerberg, and M. 
Bjorkman, “A Flexible Error Correction Scheme for 
IEEE 
802.15.4-based 
Industrial 
Wireless 
Sensor 
Networks,” 2012 IEEE Int’l Symposium on Industrial 
Electronics (ISIE), Hangzhou, China, May 28-31, 2012. 
[13] M. S. Srouji, Z. Wang, and J. Henkel, “RDTS: A 
Reliable Erasure-Coding Based Data Transfer Scheme 
for Wireless Sensor Networks,” 2011 IEEE 17th 
International Conference on Parallel and Distributed 
Systems, Tainan, Taiwan, Dec. 7-9, 2011. 
51
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-450-3
ICN 2016 : The Fifteenth International Conference on Networks (includes SOFTNETWORKING 2016)

