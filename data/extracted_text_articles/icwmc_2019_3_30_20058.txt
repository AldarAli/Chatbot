A Dynamically Carpooling Dispatching Algorithm for Improving Efﬁciency of
Self-Driving Taxis in the Connected Vehicles Environment
Hsu-Cheng Chung, Yu-Jung Chang, Kuo-Feng Ssu
Institute of Computer and Communication Engineering, National Cheng Kung University, Tainan, Taiwan
Email: q36054099@gmail.com, yjc@dcl.ee.ncku.edu.tw, ssu@ee.ncku.edu.tw
Abstract—Since there is a great number of ride demands during
the rush hour in major cities, passengers typically spend a lot of
time waiting for the available taxis among the limited number
of taxis. To address the issue, carpooling is a good way to
reduce the waiting time of passengers. Most of the current taxi-
sharing approaches have been proposed to deal with the taxi-
sharing problem by utilizing traditional vehicles. In this paper,
a dynamic taxi carpooling dispatching algorithm is developed
in the connected vehicles environment to provide real-time
taxi-sharing services. The approach schedules the proper taxis
to provide the services for passengers based on the locations
of taxis, the destinations of passengers, and the arranged
destinations of taxis. The algorithm has been implemented and
simulated by using the Simulation of Urban MObility (SUMO)
simulator. The results show that the algorithm improves the
service rate of taxis, the empty car rate of taxis, the average
waiting time of passengers, and the driving distance when taxis
are serving passengers.
Keywords–Intelligent
transportation
systems;
Dynamic
ridesharing
systems;
Taxi
dispatch
schedule;
Cooperative
dispatch mechanism; Connected vehicles.
I.
INTRODUCTION
With the rapid economic development of modern society,
taxi is one of the important public transportation, which
plays a vital role in the daily commuting for millions of
passengers in urban areas. However, there is a large number
of empty seating capacity of vehicles which are not fully
utilized during the rush hour of major cities. For example,
the survey conducted by the Federal Highway Adminis-
tration (FHWA) shows that average vehicle occupancy in
the US remains unchanged at 1.67 from 2009 to 2017 [1].
This result indicates the solution to under-utilized available
transportation resources is still a challenging issue.
To tackle the issue, carpooling is a good way to make
more efﬁcient use of the seating capacity of vehicles to
reduce the waiting time of passengers. Drivers share their
trips with one or more passengers who have similar travel
paths. Compared to the non-sharing scheme, the ridesharing
scheme utilizes fewer transportation resources to satisfy
the same quantity of ride demands. Therefore, the vehicle
occupancy rate can be signiﬁcantly increased by reducing
the number of empty seats by using carpooling via the
ridesharing scheme.
Several taxi-sharing approaches have been proposed for
providing taxi-sharing services. These approaches [2] [3] can
be broadly classiﬁed into two categories: static taxi-sharing
scheme and dynamic taxi-sharing scheme. First, the static
taxi-sharing schemes need prior knowledge of the informa-
tion of taxis and passenger requests for scheduling proper
taxis to satisfy passenger requests. However, the static taxi-
sharing scheme cannot provide the satisﬁed service for the
passengers that ask their rides at the varying locations and/or
at different time. Second, the dynamic taxi-sharing schemes
provide real-time taxi-sharing services without prior knowl-
edge of the information of taxis and ride requests. In the
most of the dynamic taxi-sharing approaches, the transport
is supplied by traditional vehicles driven by human drivers
to deliver passengers. Self-driving taxis will be one of the
most important transportation in the future. Waymo has
launched the commercial self-driving taxi service in Arizona
in the Unite States [4]. Self-driving taxis can cooperate with
each other to complete the tasks required from the cloud.
Consequently, the dynamic taxi-sharing scheme using the
self-driving taxi to transport the passengers could be a better
choice to improve the whole system efﬁciency.
In this paper, a Dynamic Taxi Ridesharing Dispatching
Algorithm is developed to provide real-time taxi-sharing
services in the connected vehicles environment. With the
proposed scheme, when passengers need rides, the method
will dispatch the proper taxis for these passengers who need
taxi-sharing services based on the location of taxis, the
arranged destination of taxis, and the destination of passen-
gers. The algorithm has been implemented and simulated
by using the SUMO simulator. The results show that the
proposed algorithm improves the service rate of the taxis,
decreases the empty car rate of taxis, saves 30.93% of the
average waiting time of passengers, and reduces 11.81% of
the driving distance when taxis are serving passengers.
The remainder of the paper is organized as follows.
Related work is described in Section II. The system model
is presented in Section III. The dynamically carpooling
dispatching algorithm is presented in Section IV. The per-
formance of the proposed scheme is evaluated in Section V.
Finally, Section VI concludes this paper.
II.
RELATED WORK
Various approaches aim to deal with taxi-sharing prob-
lems. These approaches can be broadly classiﬁed into two
categories. This section describes a summary of the static
taxi-sharing scheme and the dynamic taxi-sharing scheme.
A. Static Taxi-sharing Scheme
The static taxi-sharing schemes need prior knowledge
of the information of taxis and passenger requests for
scheduling the matches between taxis and passengers [3].
The static taxi-sharing problem can be viewed as one variant
of the static Dial-a-Ride problem (DARP) [5]. In the static
DARP, all transportation requests are known in advance.
39
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

Users specify pick-up and delivery requests between the
origins and destinations of the vehicle services. Transport is
supplied by a ﬂeet of vehicles that provide shared services.
The solution is to search for a set of minimum cost vehicle
routes that serve as many user requests as possible under
a set of constraints. Cordeau [6] proposed a branch-and-cut
algorithm for DARP and reduced both the CPU time and
the number of nodes explored in the branch-and-bound tree.
This proposed method cannot be used to solve large-scale
cases containing more than hundreds of users. Attanasio et
al. [7] introduced a number of parallel implementations for
the dynamic multi-vehicle dial-a-ride problem, based on a
Tabu search for the static DARP. The proposed algorithms
can meet a high percentage of user requests. Furthermore,
most of the static taxi-sharing approaches focus on using
either the ride reservation or the ﬁxed-point taxi station
to meet the ridesharing services [8]. Therefore, the static
taxi-sharing scheme cannot meet the passenger demands in
different locations and/or at different times.
B. Dynamic Taxi-sharing Scheme
The dynamic taxi-sharing schemes provide taxi-sharing
services without prior knowledge of the information of taxis
and ride requests. There are several dynamic taxi-sharing
schemes have been studied in several previous works [9]–
[16]. Most of these approaches utilize traditional vehicles to
transport passengers. The approaches also consider the proﬁt
of human drivers or interpersonal trust among the drivers and
the passengers. Ma et. al [5] developed a mobile-cloud based
real-time taxi-sharing system which considered that the
monetary constraints in ridesharing to provide incentives for
passengers and taxi drivers. Although monetary constraints
make the proposed model more realistic, some useful sched-
ules are discarded even if they can signiﬁcantly reduce the
waiting time of passengers. Huang et. al [17] proposed the
intelligent carpool system for drivers and passengers to ﬁnd
carpool matches at any time and in any place. The proposed
system utilized a genetic algorithm-based algorithm to solve
carpool service problems. The solutions typically require a
greater amount of computation time.
III.
SYSTEM ARCHITECTURE
This section describes the proposed system architecture.
First, the system overview and the assumptions are presented
in Section III-A. Then, the proposed scenario is illustrated
in Section III-B.
A. Assumptions
Figure 1 illustrates the proposed system architecture,
including a cloud, self-driving taxis, and passengers. There
are three main assumptions in the system. First, each of
the taxi participating in the system is the self-driving and
connected vehicle, which is equipped with Internet access
for mobile communication, and GPS receivers for obtaining
its current location. In addition, each taxi has sufﬁcient
power and the capability of computation to perform all of
the required operations for taxi-sharing services without the
assistance of human drivers. Each taxi automatically reports
Figure 1. System overview.
it current location and the information of its status to the
cloud. Second, passengers utilize the mobile application built
on a handheld device to interact with the cloud system. The
handheld devices with the GPS receivers provide current
locations of passengers and have the capability for mobile
communications. Third, the cloud has the capacity of com-
putation, storage, and communication to conduct all of the
operations for taxi-sharing services. The cloud continuously
collects and updates the information of taxis and passengers.
Real-time trafﬁc conditions are provided by the connected
vehicles environment.
B. Scenario
The cloud has the real-time location and status of taxis
and passengers. The real-time road conditions are also
available. When a passenger asks for a taxi, the passenger
submits a ride request to the cloud. Each request consists of
the origin and destination, the waiting time limit, the travel
time limit, and the magniﬁcation rate of detour distance of
the passenger’s trip. The passenger can specify the origin
location to be picked up, or the default location provided by
his/her handheld device. The waiting time limit denotes the
maximum time of the time a passenger is willing to wait. The
detour distance ratio to the original driving distance cannot
exceed the magniﬁcation rate. After the cloud receives the
new ride request, the proper taxis are assigned by the
algorithm based on the locations of taxis, the origin and
destination of the passenger. The passenger thereby can
check the waiting time for the taxis recommended by the
cloud. After the passenger selects the desired taxi, the reply
request will be sent back to the cloud. Once the cloud
receives the reply request, the dispatch command is sent
to the selected taxi. When the selected taxi receives the
command, the taxi will pick up the passenger according to
the schedule and the route given by the cloud.
IV.
DYNAMICALLY CARPOOLING DISPATCHING
ALGORITHM
This section describes the Dynamic Carpooling Dis-
patching Algorithm. As shown in Figure 2, the algorithm
consists of three stages: 1) Preprocess Phase; 2) Inference
Phase; 3) Dispatch Phase.
40
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

Figure 2. The ﬂow chart of the proposed algorithm.
A. Preprocess Phase
The cloud takes the real-time information of taxis, pas-
sengers, and the trafﬁc conditions as the input data. When
the cloud receives the taxi-sharing requests, the detailed
procedures of the algorithm will be conducted as follows.
Preprocess phase in the algorithm is a two-step pro-
cedure, which consists of Neighbor Filtering Stage and
Capacity Filtering Stage. According to the waiting time limit
of the passengers, Neighboring Filtering Stage ﬁlters out the
taxis among all taxis T, which cannot arrive at the start
locations of the requests in time. The eligible taxis which
can satisfy the request in this step are stored in the list TN. If
there is no eligible taxi in the TN to serve the requests, these
requests will be stored into the Unmatched Passenger Queue
for waiting for the next match. The match is performed every
two minutes in this paper.
Capacity Filtering Stage ﬁlters out the taxis from the
TN, whose available capacity limit is less than the requested
capacity. The remaining eligible taxis are stored in the
list TC. The seating capacity limit of each vehicle is set
as four.
B. Inference Phase
Inference phase is a three-step procedure, which consists
of Schedule Computing Stage, Time Limit Filtering Stage,
Figure 3. The examples of illegal and legal route schedules.
Figure 4. An example of the detour distance of ridesharing.
and Detour Distance Computing Stage. Schedule Computing
Stage schedules each legal route for each taxi in the TC
to satisfy the requirements of the requests by searching for
all possible combinations of the taxis to serve all of the
passengers in this match.
The examples of illeal and legal route schedules are
shown in Figure 3. A taxi T is dispatched to serve two
Passengers, P1 and P2, where S1 and S2 are the start
locations of P1 and P2, respectively; D1 and D2 are the
destination locations of P1 and P2, respectively. In order to
satisfy the two ride demands, the taxi has to visit S1, D2,
D1, and D2. Since not all of the routes are reasonable, some
illegal cases are eliminated to reduce the computation in this
phase. For example, the scheule (T→S1→D2→S2→D1)
is illegal because each passenger should get on the taxi
before getting off the taxi. On the other hand, the scheule
(T→S1→S2→D1→D2) is a legal case. As a result, the
number of legal route schedules can be computed as
n
X
i=1
(2PRi + PTi)!
2! × PRi
,
(1)
where n is the number of taxis in the TC; PRi is the number
of passengers who are picked up by the taxi Ti; PTi is the
number of passengers who ride in the taxi Ti.
After considering each possible route schedules for each
taxis Ti in the TC to serve each combination of the pas-
sengers, the shortest distance of each legal route schedule is
computed and stored in the STC.
41
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

When a new passenger submits a taxi-sharing request
for the taxi, Time Limit Filtering Stage will examine the
legality of the waiting time limit and the travel time limit
of those passengers who have already matched with the
taxi. Some schedules passed the Schedule Computing Stage
cannot satisfy the requirement of the requests. For example,
the ridesharing schedule with a new passenger could increase
the travel time of the original passenger who has sat in
the taxi, resulting in exceeding the travel time limit of this
passenger. Therefore, when a new passenger submits a taxi-
sharing request, the waiting time limit and the travel time
limit of the original passengers should be examined again.
Figure 4 shows an example of examining the legality of
the waiting time limit and the travel time limit. P1 is the
original passenger who is served by the taxi T, and P2 is a
new passenger who wants to be served by the taxi T. The
blue line is the original route of the taxi T, and the orange
line is the presumed best route schedule for the taxi T to
serve both P1 and P2. After P2 asks for the ride request,
the waiting time limit and the travel time limit of P1 and P2
will be calculated. The waiting time limit is expressed as
twi = tri + tl,
(2)
where tri is the time when the passenger submits a ride
request and tl is the waiting time limit of a passenger (the
default value is 10 minutes).
The travel time is related to the travel distance di and
the average velocity vi of the trip. The travel time can be
roughly predicted by dividing di by vi. Assume that the
average velocity of vi for each taxi is set as a ﬁxed constant.
Then, the travel time limit can be expressed as
tdi = twi + αdi
vi
,
(3)
where the detour rate of the passenger α is set as 1.5
(the maximum detour distance of the passenger trip is 1.5
times as long as the original detour distance). Algorithm 1
illustrates the pseudocode of eliminating the matches which
are not suitable for the ridesharing schedule.
After examining the legality of the waiting time limit
and the travel limit of each passenger in each legal route
schedule in the STC, the eligible taxis are stored in the TL
and the eligible schedules are stored in the STC. If there
is no eligible taxi in TL to serve the requests in this stage,
these requests will be stored into the Unmatched Passenger
Queue, waiting for the next match.
Detour distance computing stage computes the total
detour distance of the taxi, which serves all passengers in
the route schedule. Speciﬁcally, Detour distance computing
stage adds up each detour distance of each passenger, who
is beening served by the taxi in the route schedule. The
total detour distance of the taxi t denotes as dt, which is
stored in the set of DTL. The total detour distance DT of
all passengers Dp who are served by the taxi T can be
expressed as
DT =
X
Dp,
∀p ∈ PT ,
(4)
Algorithm 1 : Eliminating the improper match
Deﬁnition:
V : The set of taxi t, ∀t ∈ TC.
S: The set of schedule, sv ∀v ∈ V .
pv: The set of passenger p in v, ∀v ∈ V .
Algorithm:
for all sv in S do
repeat
pop mission m from sv
if m is start location of p ∈ pv then
if m does not meet the waiting time limit of p
then
remove sv from S
remove v from V
break
end if
end if
if m is destination of p ∈ pv then
if m does not meet the travel time limit of p then
remove sv from S
remove v from V
break
end if
end if
until p is empty
end for
where the PT consists of all original passengers who have
been served by the taxi and the new passenger who selects
the taxi for ridesharing.
Dp = D(T → dp) − D(T, sp, dp),
(5)
where Dp is the detour distance for a passenger p who
is one of the passengers served by the taxi T. sp and dp
are the start point and the destination of the passenger p,
respectively. D(T → dp) denotes the travel distance of the
passenger p with the ridesharing scheme. D(T, sp, dp) is the
travel distance of the passenger p with the non-ridesharing
scheme.
An example of computing the detour distance DT is
shown in Figure 5. In the beginning, the taxi T picks up
the passenger p1 at S1 and delivers p1 to his/her destination
in Figure 5(a). A few moments later, another passenger p2
asks for a ride. Figure 5(b) shows the shortest travel distance
for serving both p1 and p2. Figure 5(c) shows the difference
between p1’s driving schedules with ridesharing strategy and
non-sharing strategy.
The detour distance of p1 can be computed by sub-
tracting the blue schedule distance from the black schedule
distance, which is D(T, s2, s1, d2, d1) − D(T, s1, d1). Sim-
ilarly, the detour distance of p2 presented in Figure 5(d)
is D(T, s2, s1, d2) − D(T, s2, d2). Finally, the total detour
distance DT of the taxi T is calculated by adding up each Dp
who is served by the T. Note that there might not only one
passenger to be matched with the T when a new passenger
asks for a ride. Algorithm 2 illustrates the pseudocode of the
42
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

(a) Original route schedule with non-sharing.
(b) Fictitious route schedule with ridesharing.
(c) p1 detour distance illustration.
(d) p2 detour distance illustration.
Figure 5. An example of computing the detour distance DT .
Algorithm 2 : Detour Distance Computing Stage
Deﬁnition:
T: The set of taxi t, ∀t ∈ TL.
S: The set of schedule st, ∀t ∈ T.
R: The set of sorted route rst, ∀st ∈ S.
M: The set of sorted mission mst, ∀st ∈ S.
D: The set of total detour distance dt, ∀t ∈ T.
Algorithm:
for all dt in D do
dt = 0
end for
for all t in T do
for all mst in M do
for all m in mst do
if m is the destination of a passenger p then
origin dis
=
Dijkstra(v, p start)
+
Dijkstra(p start, p destination)
carpool dis = P Dijkstra(r) ∀r ∈ rst end
when m is arrived
end if
end for
end for
dt = carpool dis − origin dis
store dt to DTL
end for
Detour Distance Computing Stage. Note that the algorithm
calculated the distance between the locations by using the
Dijkstra algorithm. To reduce the computation load, the
calculated distance information is stored in the database for
the next utilization.
Taxi Matching Stage generates the Recommended Taxi
Queue QRecT . In the QRecT , the taxis are sorted based on
the following principles. First, the taxi with the smaller dTL
has the higher priority. Second, when there are more than
one taxis have the same dTL, the taxi closer to the passenger
will have the higher priority.
C. Dispatch Phase
Dispatch Phase sends the recommended taxi requests
to the passengers who need the taxi-sharing services. The
recommended taxi which is pushed from the Recommended
Taxi Queue deﬁnitely is the closest taxi with the shortest de-
tour distance to the passenger. If the passenger agrees to the
match, the selected taxi will be dispatched to the passenger
immediately. On the other hand, if the passenger disagrees
to the match and he/she sends an override reply back to the
cloud, then the lower priority taxi in the Recommended Taxi
Queue will be transferred to the passenger, reciprocally. The
procedure will be iteratively executed until there is no taxi to
be recommended in the Recommended Taxi Queue. When
the Recommended Taxi Queue is empty, the requests will
be pushed to the Unmatched Passenger Queue for the next
match.
V.
PERFORMANCE EVALUATION
In this section, the proposed algorithm is implemented
and simulated to evaluate its performance. First, the simula-
tion setting and evaluation metrics are introduced. Then the
simulation results are presented to illustrate the effectiveness
of the proposed algorithm.
A. Simulation Setting
The proposed algorithm is implemented and simulated
using the SUMO simulator [18]. As shown in Figure 6, the
43
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

Figure 6. Manhattan on OpenStreetMap.
road network data is obtained through Openstreetmap [19],
which is part of the Manhattan in New York City. The
environment with a size of 30 square kilometers contains
4370 road segments. The time for each simulation is 7200
seconds. There are 250 taxis to serve 2,200 ride requests
in the environment. In the simulation, it is assumed that the
taxis will arbitrarily roam in the map if the taxis do not serve
any ride request. Each taxi provides the taxi-sharing service
for up to 4 passengers at the same time. The taxis must obey
the maximum speed limit of the roads (60 km per hour).
The trip information of all passengers, including request
times, start positions, destination positions, are randomly
generated. The trip distance of each passenger ranges from
1.5 km to 12 km. The maximum waiting time for each
passenger is set to 10 minutes. The detour magniﬁcation
in the simulation is set to 0.5.
B. Performance Results
The performance result of each metric is the average
of 10 simulations. The proposed taxi-sharing algorithm was
benchmarked against the non-sharing scheme.
TABLE I. OVERALL AVERAGE TRAVEL TIME OF PASSENGERS
Time Type
Non-sharing Scheme
Taxi-Sharing Scheme
Waiting Time
760.07 (675.49-819.84) (s)
239.38 (233.66-250.83) (s)
Riding Time
888.2 (884.86-895.91) (s)
899.06 (895.36-903.46) (s)
Travel Time
1648.34 (1597.91-1708.81) (s)
1138.44 (1130.26-1152.19) (s)
1) Overall Average Travel Time of Passengers: Table I
shows the average waiting time, riding time, and travel time
of the passengers for both the non-sharing strategy and the
taxi-sharing strategy. The waiting time of the passenger
is deﬁned as the time between the passenger submits a
ride request and the passenger gets on the selected taxi.
The waiting time of the taxi-sharing strategy outperforms
the non-sharing strategy. Since the passengers can utilize
the taxi-sharing service with other passengers rather than
spend time waiting for a vacant taxi. The riding time of
the passenger is deﬁned as the time between the passenger
gets on the selected taxi and the passenger arrives at his/
her destination. Due to the additional detour distance for
Figure 7. Average riding distance of passengers.
serving the carpooling passengers, the taxi-sharing strategy
has a slightly longer average riding time than the non-sharing
strategy. The travel time of the passengers is deﬁned as the
sum of the waiting time and the riding time. Based on the
simulation results, the taxi-sharing method has the better
travel time on average.
2) Average Riding Distance of Passengers: Figure 7
depicts that the average riding distance of the taxi-sharing
approach is slightly longer than the non-sharing strategy.
The main reason is that the passengers with the non-
sharing approach are delivered to their destination with the
shortest routes. The result also explains why the non-sharing
algorithm has the better riding time.
TABLE II. COMPARISON RESULTS FOR THE SHARING AND
THE NON-SHARING
Distance Type
Non-sharing
Ridesharing
Total Driving Distance
6616.07 (km)
6602.47 (km)
Driving Distance when Serving Passengers
6544.01 (km)
5771.01 (km)
Driving Distance while Carrying Passengers
4435.22 (km)
4929.27 (km)
3) Driving Distance Comparison: Table II shows that the
comparison of the driving distances for both strategies. The
driving distance can be divided into three types. First, the
total driving distances of the two strategies are roughly the
same because the taxis never take a break (except waiting
for trafﬁc lights and passengers to get on or get off). Second,
the ridesharing strategy needs the shorter driving distance to
serve all passengers due to its better efﬁciency. Third, the
driving distance with carrying passengers for the ridesharing
strategy is larger. The results can indicate that the taxis need
the shorter distances to pick up the passengers.
TABLE III. COMPARISION OF CARPOOL RATE, EMPTY CAR
RATE AND IDLE CAR RATE
Rate Type
Non-sharing
Ridesharing
Carpool Rate
0.00%
26.55%
Empty Car Rate
32.96%
25.34%
Idle Car Rate
1.09%
12.59%
4) Comparison of Carpool Rate, Empty Car Rate, and
Idle Car Rate: The carpool rate, empty car rate and idle
car rate are showed in Table III.The carpool rate is the
proportion of the carpool participant among all passengers.
The average carpool rate is 26.55% in the proposed taxi-
44
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

Figure 8. Number of taxis with respect to varying numbers of requests
sharing strategy, which denotes that approximately one-
fourth of passengers share rides with others. An empty car
is deﬁned as if there is no passenger in the car; an idle
car is deﬁned as the car has no ride task to perform. The
non-sharing strategy has 1.09% idle car rate and 32.96%
empty car rate, so the strategy is not efﬁcient. On the other
hand, with the taxi-sharing strategy, the results show that
12.59% idle car rate and 25.34% empty car rate, which
demonstrate that the ridesharing system can achieve the
better ride performance.
5) Number of Taxis with respect to varying numbers of
requests: As shown in the Figure 8, when there are 400
ride requests, the taxi-sharing strategy can reduce 11% of
the number of the needed taxis to satisfy all the requests
compared to the non-sharing approach.
6) Service Rate of Taxis: Service Rate is deﬁned as the
average number of passengers who are served by a taxi per
hour. Figure 9 displays the performance of the service rate
with varying numbers of passenger requests. The service rate
of the proposed taxi-sharing approach is always higher than
the non-sharing strategy. In addition, the service rate of the
proposed method continues to grow as the number of the
request is increased from 1050 to 1250. The main reason
is that the proposed approach can alleviate the higher ride
demands during rush hour.
VI.
CONCLUSION
This paper develops a dynamic carpooling dispatching
algorithm to provide the ridesharing service in real time for
improving efﬁciency of self-driving taxis in the connected
vehicle environment. The algorithm has been implemented
and simulated by using the SUMO simulator. Compared to
the non-sharing strategy, the results demonstrate that the
algorithm enhances the service rate, reduces 30.93% of the
average waiting time of the passengers, and shortens 11.81%
of the driving distance during service.
ACKNOWLEDGMENT
This research was supported in part by the Ministry of
Science and Technology of Taiwan under Contracts 107-
2221-E-006-091.
Figure 9. Service rate with the different number of passenger requests.
REFERENCES
[1]
“National Household Travel Survey,” 2019, URL: https://nhts.ornl.
gov/ [accessed: May 17, 2019].
[2]
M. S. N. Agatz, A. Erera and X. Wang, “Optimization for dynamic
ride-sharing: A review,” European Journal of Operational Research,
vol. 223, no. 2, pp. 295–303, Dec. 2012.
[3]
M. Furuhata, M. Dessouky, F. Ord´o˜nez, M. Brunet, X. Wang, and
S. Koenig, “Ridesharing: The state-of-the-art and future directions,”
Transportation Research Part B: Methodological, vol. 57, pp. 28–46,
Nov. 2013.
[4]
“Waymo,” 2019, URL: https://waymo.com/ [accessed: May 17,
2019].
[5]
S. Ma, Y. Zheng, and O. Wolfson, “Real-time city-scale taxi rideshar-
ing,” IEEE Transactions on Knowledge and Data Engineering,
vol. 27, no. 7, pp. 1782–1795, July 2015.
[6]
J.-F. Cordeau, “A branch-and-cut algorithm for the dial-a-ride prob-
lem,” Operations Research, vol. 54, no. 3, pp. 573–586, May 2006.
[7]
A. Attanasio, J.-F. Cordeau, G. Ghiani, and G. Laporte, “Parallel tabu
search heuristics for the dynamic multi-vehicle dial-a-ride problem,”
Parallel Computing, vol. 30, no. 3, pp. 377–387, Mar. 2004.
[8]
J. Yuan, Y. Zheng, L. Zhang, X. Xie, and G. Sun, “Where to ﬁnd my
next passenger,” in Proceedings of ACM International Conference on
Ubiquitous Computing (UbiComp), Spet. 2011, pp. 109–118.
[9]
P. Chen, J. Liu, and W. Chen, “A fuel-saving and pollution-reducing
dynamic taxi-sharing protocol in vanets,” in IEEE Vehicular Tech-
nology Conference - Fall, Sept. 2010, pp. 1–5.
[10]
S. Cheng, J. Li, and G. Horng, “Game theory based recommenda-
tion mechanism for taxi-sharing,” in Proceedings of International
Conference on Advanced Information Networking and Applications
Workshops, May 2014, pp. 645–650.
[11]
H. Zheng and J. Wu, “Online to ofﬂine business: Urban taxi
dispatching with passenger-driver matching stability,” in Proceedings
of IEEE International Conference on Distributed Computing Systems
(ICDCS), June 2017, pp. 816–825.
[12]
J. Hargrave, S. Yeung, and S. Madria, “Integration of dynamic road
condition updates for real-time ridesharing systems,” in Proceedings
of IEEE International Conference on Mobile Ad Hoc and Sensor
Systems (MASS), Oct. 2017, pp. 585–589.
[13]
S. Yeung, E. Miller, and S. Madria, “A ﬂexible real-time ridesharing
system considering current road conditions,” in Proceedings of IEEE
International Conference on Mobile Data Management (MDM), June
2016, pp. 186–191.
[14]
D. Pelzer, J. Xiao, D. Zehe, M. H. Lees, A. C. Knoll, and H. Aydt, “A
partition-based match making algorithm for dynamic ridesharing,”
IEEE Transactions on Intelligent Transportation Systems, vol. 16,
no. 5, pp. 2587–2598, Apr. 2015.
45
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

[15]
J. P. Hanna, M. Albert, D. Chen, and P. Stone, “Minimum cost
matching for autonomous carsharing,” IFAC-PapersOnLine, vol. 49,
no. 15, pp. 254–259, July 2016.
[16]
D. Zhang, Y. Li, and F. Zhang, “Carpooling Service for Large-Scale
Taxicab Networks,” ACM Transactions on Sensor Networks (TOSN),
vol. 12, no. 3, pp. 18:1–18:35, Aug. 2016.
[17]
S. Huang, M. Jiau, and C. Lin, “A genetic-algorithm-based approach
to solve carpool service problems in cloud computing,” IEEE Trans-
actions on Intelligent Transportation Systems, vol. 16, no. 1, pp.
352–364, Feb. 2015.
[18]
“Simulation
of
Urban
MObility,”
2019,
URL:
http:
//sumo.sourceforge.net/ [accessed: May 17, 2019].
[19]
“Openstreetmap,” 2019, URL: https://www.openstreetmap.org [ac-
cessed: May 17, 2019].
46
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-719-1
ICWMC 2019 : The Fifteenth International Conference on Wireless and Mobile Communications

