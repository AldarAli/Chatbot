Breach-Free Scheduling of Reinforced Sensor
Barriers
Jorge A. Cobb
Department of Computer Science
The University of Texas at Dallas
Richardson, TX 75080-3021
U.S.A.
Email: cobb@utdallas.edu
Abstract—Intrusion detection is an important function of
wireless sensor networks. Due to their limited lifetime, rather
than covering the entire area of interest at all times, sensors
can be divided into barriers, where each barrier is a subset
of sensors that prevents the intruder from crossing the area.
However, a security problem was discovered, known as a barrier-
breach, where an intruder can ﬁnd a location in between two
consecutive barriers that allows the area to be crossed when one
barrier is replaced by the next. Given a set of barriers, deciding
if there is a breach-free schedule of these barriers is intractable.
This has led to the development of several heuristics. In a recent
work, we introduced reinforced sensor barriers, which prevent
the crossing of the area of interest in more than one direction,
and presented heuristics for obtaining the maximum number of
reinforced barriers. However, this work did not address obtaining
a breach-free schedule for these barriers. In this paper, we
present a heuristic to obtain a breach-free schedule of reinforced
barriers from a random placement of sensors in the area of
interest. We show via simulation that in practical scenarios the
heuristic achieves a schedule that is close to optimal.
Index Terms—sensor networks; barrier coverage; security
breaches
I. INTRODUCTION
A Wireless Sensor Network (WSN) consists of an area of
interest in which sensor nodes have been randomly placed.
Due to running on batteries, sensors have a limited lifetime [1].
One important use of a WSN is intrusion detection, in which
sensors monitor the area of interest and report to a base station
any anomalous presence. Typically, sensors have a sensing
range that is signiﬁcantly smaller that the area of interest, and
thus, multiple sensors need to be operating simultaneously.
Due to their limited lifetime, it is common to have more
sensors than necessary to cover the area. Sensors are divided
into groups, where each group covers the entire area. A sleep-
wakeup schedule is created, where one sensor group is active
and the remaining are asleep. Once the ﬁrst group’s battery is
close to exhaustion, the second group is activated, and so on.
The degree to which the area of interest is covered by
active sensors falls in two categories: full coverage and partial
coverage. In full coverage, the entire area is covered at all
times by the active sensors [2]–[5]. In partial coverage, only
certain regions are covered at a time by the active sensors.
Thus, any event occurring outside of covered area is not
detected [6]–[8].
A particular form of partial coverage is barrier coverage,
where each group of sensors forms a barrier across the area
such that intruders are prevented from crossing undetected.
There have been extensive studies of sensor barriers due to
their many applications [9]–[16]. Fig. 1(a) highlights a subset
of sensors that provide barrier coverage to the area. The
highlighted sensors will remain active and the rest asleep
until they are close to exhausting their battery power. If n
disjoint barriers are constructed, the protection lasts n times
the lifetime of a sensor. Fig. 1(b) shows the sensors divided
into four disjoint barriers.
The problem of dividing the sensors into the maximum
number of disjoint barriers has been solved in polynomial
time [11]. The approach is based on transforming the sensor
connectivity graph into a maximum ﬂow problem.
Subsequently, a vulnerability of sensor barriers, known as a
barrier breach, was discovered [17], [18]. For some barriers,
it is possible for an intruder to cross the area of interest after
activating one barrier and deactivating the previous one.
Fig. 1(b) illustrates barrier breaches. Four different sensor
barriers are displayed with different line types. If we use the
barriers in a sequential sleep-wakeup cycle (B1, B2, B3, and
ﬁnally B4), the users are protected for a total of four time units.
However, the order in which the barriers are scheduled affects
the effectiveness of the barriers. Instead, consider scheduling
B2 followed by B1. In this case, an intruder could move to
the point highlighted by a diamond, and after B2 is turned off,
the intruder is free to cross the area. Also, note that only one
of B3 or B4 is of use. If we activate B3 ﬁrst, then the intruder
can move to the location marked by the black star. When B4 is
activated and B3 deactivated, the intruder can reach the users
undetected. The situation is similar if B4 is activated ﬁrst, and
the intruder moves to the location of the grey star.
There have been several heuristics that generate a set of
sensors barriers and their breach-free schedule from randomly
placed sensors [17]–[20]. In [21], it is shown that, given
a set of disjoint barriers, obtaining the longest breach-free
schedule of the given barriers is intractable, and a probabilistic
algorithm is given for the problem. The complexity of ﬁnding
the longest breach-free schedule of barriers from a from a
random placement of nodes remains an open problem.
A stronger form of a barrier, called a reinforced barrier, was
24
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

intruder(
users(
(a) Sensor Barrier
intruder(
users(
B1#
B2#
B3#
B4#
(b) Barrier Breaches
Fig. 1. Sensor Barriers
introduced in our earlier work [22]. To illustrate this barrier,
consider Fig. 2(a), in which the area of interest is a rectangle.
The objective is to prevent an intruder from crossing the area
by entering from any of its sides and exiting via another side.
For example, intrusion I1 is a vertical intrusion, intrusion I2
is a horizontal intrusion, while I3 is a corner intrusion (by
turning from vertical to horizontal).
To prevent these intrusions, consider Fig. 2(b), where there
is a barrier of sensors from corner U1 to corner V1, and another
barrier from corner U2 to corner V2. Notice that these two
barriers do not need to be disjoint. By combining these two
barriers, none of the above intrusions are possible.
Heuristics to obtain the maximum number of reinforced
barriers were presented in [22]. However, the issue of barrier
breaches was not addressed. Note that barrier breaches are
still possible, as shown in Fig. 2(c). The ﬁgure consists of
two reinforced barriers drawn with different line styles. If we
schedule the solid line barrier ﬁrst, then an intruder can arrive
from the top side. Once we switch to the dashed-line barrier,
the intruder is free to exit via the right side. The issue is similar
if we schedule the dashed barrier ﬁrst.
In this paper, we consider the problem of obtaining a
maximum-length breach-free schedule of reinforced barriers
starting from a random placement of sensor nodes. We present
a parameterized algorithm based on the general approach
presented in [21]. The algorithm is exponential in the number
of barriers, which is expected to be small and is polynomial
in the number of sensor nodes. Via simulation we demonstrate
that the method produces schedules of near-optimal length.
The rest of this paper is organized as follows. Section II
presents background and deﬁnitions. In Section III, we present
our heuristic. Simulation results are presented in Section IV.
Concluding remarks are given in Section V.
II. BACKGROUND
In this section, we present deﬁnitions and discuss earlier
methods, before we present our heuristic in Section III.
A. Deﬁnitions
We consider a rectangular area where a set S of n sensor
nodes have been deployed randomly. A barrier consists of
a set B, B ✓ S, such that there is a sequence of sensors,
s1, s2, . . . , sk, such that the sensor ranges of si and si+1, 1 
i < k, overlap with each other, and furthermore, the sensing
range of s1 overlaps one of the sides of the rectangle, while the
sensing range of sk overlaps the opposite side of the rectangle.
Barrier B1 in Fig. 1(b) is an example. A barrier is vertical
if the sides being overlapped are the top and bottom, and is
horizontal otherwise.
A reinforced barrier R is a set of sensors such that a line
cannot be drawn starting from a side of the rectangle and
ending at a different side without crossing the sensing area of
any one of the sensors. Note that this requires the corners to
be covered, and it also implies that there is a subset R0 of
R such that R acts both as a horizontal and vertical barrier
(i.e., a diagonal barrier). By symmetry, R is the union of two
diagonal barriers.
An ordered pair (B1, B2) of horizontal barriers forms a
breach if there is a point p not covered by either barrier such
that a line can be drawn from the top of the area to p without
overlapping the sensing area of B1, and furthermore, a line
can be from p to the bottom of the area without overlapping
the sensing area of B2. A sequence (or schedule) of barriers
B1, B2, . . . , Bk is breach-free if every pair of consecutive
barriers in the sequence does not form a breach.
Similarly, an unordered pair (R1, R2) of reinforced barriers
forms a breach if there is a point p not covered by either barrier
such that a line can be drawn from some side of the area to p
without overlapping R1, and furthermore, a line can be drawn
to p to a different side of the area without overlapping R2.
B. Longest Barrier Schedule
Finding the largest number of horizontal disjoint barriers
has been solved in polynomial time by Kumar et al. [11] with
their algorithm known as Stint. The method builds a ﬂow graph
F where the maximum ﬂow corresponds to the number of
25
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

I1
I2
I3
(a) Area Intrusions
U1
V1
U2
V2
(b) Reinforced Barrier
U1
U2
V2
V1
(c) Reinforced Barrier Breach
Fig. 2. Reinforced Sensor Barriers
V
U
s1
s2
s3
s6
s5
s4
X1-
X1+
X2-
X2+
X3-
X3+
X4-
X4+
X5-
X5+
X6-
X6+
Fig. 3. Stint Maximum Flow Method
sensor barriers, and a path with non-zero ﬂow corresponds to
a barrier. A brief outline of the method is as follows, and a
sample graph F is illustrated in Fig. 3.
Create two nodes U and V representing the left and the right
borders, respectively. Then, for each sensor node si, create
two nodes, xi+ and xi−, with a directed edge (xi+, xi−) of
capacity one. This edge corresponds to the life of the sensor.
All other edges have a capacity of inﬁnity. For every sensor
si overlapping the left border, add the directed edge (U, xi+),
and for every sensor sj overlapping the right border, add the
directed edge (xj−, V ). Finally, for every pair of sensors si
and sj whose sensing area overlaps, add an edge (xi−, xj+)
and (xj−, xi+).
It is easy to show that a barrier-cover corresponds to a
path from U to V in F. Since the capacities are integers,
the maximum ﬂow f in F is an integer, which corresponds to
f edge-disjoint paths, and thus f node-disjoint barriers.
Most heuristics, such as [17], [18], create their schedule
of barriers by ﬁrst obtaining a set of barriers from the Stint
algorithm, followed by selecting a subset of these barriers that
do not cross each other. Another approach [21] is to simply try
all possible schedules obtained from the Stint barriers. If the
longest schedule is of length l, then the approach is exponential
in l, but polynomial in the number of sensor nodes. Due to this
V2
V1
U2
U1
Fig. 4. Reinforced Barrier Extreme Case
V2
V1
U2
U1
Fig. 5. Diagonal Barriers
exponential growth, a probabilistic algorithm was presented in
[21] that ﬁnds the longest schedule with high probability.
Note that the barriers chosen for the above methods are
obtained from the output of Stint. There is, however, no
guarantee that the set of barriers that can generate the longest
possible schedule are the barriers obtained from Stint.
III. BREACH-FREE REINFORCED STINT BARRIERS
In this section, we present our heuristic for obtaining the
longest breach-free schedule of reinforced barriers. As shown
26
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

in Fig. 2(b), two diagonal barriers are needed to form a re-
inforced barrier. Note that this is always the case even when
the diagonal barriers are not apparent. Consider for example
Fig. 4 where there is a sequence of sensor nodes covering all
three sides U1V2, V2V1, and V1U2. Given that the diagonal
barriers do not need to be disjoint (they will be activated
concurrently), then this sequence of nodes can be thought of
as two diagonal barriers, the ﬁrst from U1 to V1 along sides
U1V2 and V2V1, and the second from U2 to V2 along sides
U2V1 and V1V2.
Our approach consists in ﬁrst obtaining the maximum
number of disjoint diagonal barriers from U1 to V1, and
then combining them with the maximum number of disjoint
barriers from U2 to V2. This is illustrated in Fig. 5. Let
D1 = {B1,1, B1,2, B1,m1}, where |D1| = m1, be a max-
imal set of disjoint barriers from U1 to V1. Similarly, let
D2 = {B2,1, B2,2, B2,m2}, |D2| = m2, be a maximal set
of disjoint barriers from U2 to V2. Then, the union of any
two barriers B1,i and B2,j, where B1,i 2 D1 and B2,j 2 D2,
form a reinforced barrier, Ri,j. Note in particular that B1,i and
B2,j do not need to be disjoint since they will be activated
simultaneously. We denote the set of all reinforced barriers
with R, i.e., R = S
i,j Ri,j.
To obtain the set of barriers D1 and D2 we can take
advantage of Stint by running it twice: the ﬁrst time to obtain
D1 and the second time to obtain D2. To obtain D1, the ﬂow
graph F1 is built with an arc from U1 to each node xi+, where
si is a sensor whose sensing are overlaps U1’s corner. Also,
an arc is made from each xj− to V1, where the sensor area
of xj overlaps V1’s corner. The arcs between sensor nodes are
the same as before. A similar approach using U2 and V2 will
yield the set D2.
Our objective is to ﬁnd the maximum breach-free schedule
using the reinforced barriers in R. To accomplish this, we
build a graph G whose nodes are elements of R. An edge
exists from an element Ri,j to an element Rk,l if the pair
(Ri,j, Rk,l) does not constitute a breach. Obtaining the longest
breach-free schedule is equivalent to the problem of ﬁnding
the longest path in G starting at an arbitrary node and without
repeating nodes in the path.
The above approach is similar to the one used in [21], except
that the problem considered is obtaining a maximum breach-
free schedule of horizontal barriers. The barriers are obtained
from Stint, and a graph is built such that an arc corresponds
to a pair of horizontal barriers that do not form a breach.
There is a signiﬁcant difference in the case of reinforced
barriers that does not occur in horizontal barriers. That is,
reinforced barriers are not independent of each other. If a
barrier Ri,j is used somewhere in the schedule, then for any
i, Ri,l cannot appear in the same schedule. This is because
the diagonal barrier Bi 2 Di takes part in both reinforced
barriers Ri,j and Ri,l, and barrier Bi can only appear once
in a schedule. We refer to the pair Ri,j and Ri,l as being
incompatible barriers. Similarly, barrier Ri,j is incompatible
with barriers Rk,j for all k.
Note that, because incompatible barriers cannot appear in
a schedule, then the length of the schedule is upper bounded
by min(|D1|, |D2|), i.e., min(m1, m2). Without this restriction,
the length of the schedule could be as large as m1 · m2.
This restriction on the length of the schedule is of signiﬁcant
consequence, because ﬁnding the longest path in a graph
is an NP-Complete problem. A parameterized algorithm on
the length l of the schedule can be obtained using dynamic
programming combined with exploring all possible subsets of
the set of barriers [21], and hence, it is exponential in the
number of barriers. Since l is bounded by the number of
barriers, the running time is signiﬁcant for nontrivial problems.
This motivated the authors of [21] to present a more efﬁcient
but probabilistic algorithm.
On the other hand, with reinforced barriers, the longest
path of the graph is bounded by min(m1, m2), which yields
a signiﬁcantly smaller number. In addition, a diagonal barrier
must begin with a sensor whose area overlaps a corner, while
for horizontal barriers any sensor overlapping a side border can
be used as a starting point. Therefore, we leave the possibility
of a probabilistic algorithm for future work, and we consider
all possible paths of length at most min(m1, m2).
As a ﬁnal remark, the barriers obtained from Stint are not
guaranteed to be the set of barriers from which an optimal
schedule is obtained. Nonetheless, min(m1, m2) is an upper
bound on the length of a breach-free schedule of reinforced
barriers. The complete method is shown in Algorithm 1.
IV. SIMULATION RESULTS
In this section, we compare the performance of the Breach-
Free Reinforced Barriers (BFRB) algorithm against two upper
bounds. Our objective is to determine how close our algorithm
is in obtaining an optimal solution.
Our algorithm is compared against the Minimum Inter-
vention Paths (MIP) heuristic [22]. This is a heuristic we
presented for the problem of ﬁnding the maximum number
of reinforced barriers. Since it does not take barrier breaches
into account, we expect it to yield longer schedules than those
of our BFRB algorithm. MIP is based on a greedy strategy
that chooses a pair of diagonal barriers from D1 and D2 that
overlap the least number of other barriers. In this way, a greater
number of barriers are available for the subsequent round of
the algorithm. Our algorithm is also compared against the
upper bound m, where m = min(|D1|, |D2|). It is impossible
to obtain a schedule longer than m, regarldess of whether
breaches are present or not.
The area of interest is a square of size 500 ⇥ 500 meters.
We also simulated a rectangular area of dimension 400 ⇥ 600
meters. Sensor nodes are randomly deployed in each area,
ranging from 100 to 260. In addition, the radius of the sensing
area for sensors ranges from 60 to 130. Every point in our plots
corresponds to the average of 100 simulations.
Fig. 6 plots the sensor radius vs. the resulting reinforced
breach-free schedule length. The number of sensors is main-
tained constant at 250. As the radius increases, the diagonal
barrier sets D1 and D2 increase in size, and therefore, so does
the total number of reinforced barriers from which a schedule
27
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

Algorithm 1 Breach-Free Reinforced Barriers
Inputs: sensor set S and rectangular area A.
Output: breach-free schedule of reinforced barriers.
1: (U1, V2, V1, U2)  the four clockwise corners of A.
2: F  (VF , EF ); // (ﬂow graph)
3: VF  {U1, V1}; EF  ;;
4: for each s, s 2 S, do
5:
VF  VF [{xs+, xs−}; EF  EF [{(xs+, xs−, 1)};
6:
EF  EF [ {(U1, xs+, 1)} if U1 2 sensing area(s);
7:
EF  EF [ {(xs−, V1, 1)} if V1 2 sensing area(s);
8:
for
each
s0,
s0
2
S
^
s
6=
s0
^
overlapping sensing area(s, s0), do
9:
EF  EF [ {(xs+, x0
s−, 1)} [ {(x0
s+, xs−, 1)};
10:
end for
11: end for
12: F 0  Ford-Fulkerson-Max-Flow(F);
13: D1  hi; // empty sequence of diagonal barriers)
14: for each path P in F 0 with non-zero capacity do
15:
D1  D1 : barrier(P); // add the barrier
16:
// corresponding to path P
17: end for
18: m1  |D1|;
19: Obtain similarly D2 from U2 and V2;
20: m2  |D2|;
21: m  min(m1, m2);
22: for each i and j, 1  i  m1 ^ 1  j  m2, do
23:
Ri,j  D1(i) [ D2(j);
24: end for
25: G  (VG, EG); // (breach graph)
26: for each i and j, 1  i  m1 ^ 1  j  m2, do
27:
VG  VG [ {Ri,j};
28: end for
29: for each i, j, k, l, 1  i, k  m1 ^ 1  j, l  m2, do
30:
EG  EG [ {(Ri,j, Rk,l)}
31:
if (Ri,j, Rk,l) is not breached;
32: end for
33: Q  longest path (length at most m) in G.
34: return Q
can be obtained. Note that BRFB remains signiﬁcantly close
the the upper bound of m, and therefore, the breach-free
schedule lengths found are close to the maximum possible
schedule (breach-free or not).
We observe that our MIP heuristic, which is oblivious to
breaches, produces the longest possible schedules. We have
no formal results on the optimality of MIP, and it is unlikely
optimal, but from this performance it deserves further study.
Figure 7 plots the number of sensors vs. the resulting
reinforced breach-free schedule length. The sensor radius is
maintained at 90. The results are similar to those of the
previous ﬁgure. BRFB obtains schedules that are close in
length to those of the strict upper bound.
It is worth noticing that the number of schedules obtained is
relatively small. This is related to the fact that for a diagonal
 0
 2
 4
 6
 8
 10
 12
 50
 60
 70
 80
 90
 100
 110
 120
 130
 140
Breach-free schedule length
Sensor radius
MIP
BFRB
Upper Bound
Fig. 6. Radius vs. schedule length in square area.
 0
 1
 2
 3
 4
 5
 100
 150
 200
 250
Breach-free schedule length
Number of sensors
MIP
BFRB
Upper bound
Fig. 7. Number of sensors vs schedule length in square area.
barrier to exist, there has to be a sensor covering each of the
corners of the area. Given the random placement of sensors,
the number of sensors in these positions are few. In addition,
due to the upper bound m, which is the minimum of the
two sets of diagonal barriers, we expect the total number of
reinforced barriers (breach-free or not) to be small.
Fig. 8 and Fig. 9 are similar to Fig. 6 and Fig. 7, except
that the area is now a 400 ⇥ 600 rectangle. As before, BRFB
obtains schedules that are close in length to those of the strict
upper bound.
V. CONCLUDING REMARKS AND FUTURE WORK
We presented a heuristic for the reinforced breach-free
barriers problem, and we have shown that it performs well,
achieving schedule lengths close to the upper bound. The
heuristic suffers from the drawback that all schedules of
length m obtained from R have to be examined. Note that
|R| = m1 · m2, so a relatively small number of barriers, say,
D1 = D2 = 10, yields a signiﬁcantly number of possible
reinforced barriers, |R| = 100.
We considered two approaches to examine all schedules.
The ﬁrst is to use a dynamic programming technique similar
to that in [21], where, for every possible subset of R, a value
28
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

 0
 2
 4
 6
 8
 10
 12
 50
 60
 70
 80
 90
 100
 110
 120
 130
 140
Breach-free schedule length
Sensor radius
MIP
BFSB
Upper bound
Fig. 8. Radius vs. schedule length in rectangular area.
 0
 1
 2
 3
 4
 5
 100
 150
 200
 250
Breach-free schedule length
Number of sensors
MIP
BFRB
Upper Bound
Fig. 9. Number of sensors vs schedule length in rectangular area.
(the length of the longest schedule using the subset) needs to
be maintained. Above, this would require 2100 values.
The second approach, which we adopted, is to take advan-
tage of the small value of m, and build all possible schedules
of length m, ensuring that each addition to the schedule is
in agreement with the breach-free graph G, and furthermore,
that any new barrier added to the schedule is not incompatible
with earlier barriers in the schedule. Nonetheless, in the worst
case, the number of steps required is |R|m, which becomes
infeasible as m grows. Given the above difﬁculties, we will
explore probabilistic algorithms in the future and compare
their performance against the known upper bound.
Finally, in earlier work on breach-free horizontal barriers,
we developed algorithms that do not use the Stint method as
a source of barriers, but rather developed barriers in a top-
down approach ensuring that each new barrier does not create
a breach with earlier barriers [19] [20]. A similar approach
might be possible for the case of reinforced barriers, but
barriers would have to be constructed in parallel over all sides.
We will also leave this approach for future work.
REFERENCES
[1] I. F. Akyildiz, W. Su, Y. Sankarasubramaniam, and E. Cayirci, “Wireless
sensor networks: a survey,” Computer Networks, vol. 38, no. 4, March
2002, pp. 393–422.
[2] C. Huang and Y. Tseng, “The coverage problem in a wireless sensor
network,” in ACM Int’l Workshop on Wireless Sensor Networks and
Applications (WSNA), 2003.
[3] H. Zhang and J. Hou, “On deriving the upper bound of ↵-lifetime for
large sensor networks,” in Proc. of The 5th ACM Int’l Symposium on
Mobile Ad-hoc Networking and Computing (MobiHoc), 2004.
[4] Cardei, M., Thai, M.T., Y. Li, and W. Wu, “Energy-efﬁcient target
coverage in wireless sensor networks,” in INFOCOM, 24th Annual Joint
Conf. of the IEEE Computer and Comm. Societies, vol. 3, March 2005.
[5] M. Thai, Y. Li, and F. Wang, “O(log n)-localized algorithms on the
coverage problem in heterogeneous sensor networks,” in IEEE Int’l
Performance, Computing, and Comm. Conference, IPCCC, April 2007,
pp. 85–92.
[6] S. Gao, X. Wang, and Y. Li, “p-percent coverage schedule in wireless
sensor networks,” in Proc. of 17th Int’l Conference on Computer
Communications and Networks, ICCCN, August 2008, pp. 1–6.
[7] C. Vu, G. Chen, Y. Zhao, and Y. Li, “A universal framework for
partial coverage in wireless sensor networks,” in IEEE 28th Int’l Perf.
Computing and Comm. Conf. (IPCCC), December 2009, pp. 1–8.
[8] Y. Li, C. Vu, C. Ai, G. Chen, and Y. Zhao, “Transforming complete
coverage algorithms to partial coverage algorithms for wireless sensor
networks,” IEEE Transactions on Parallel and Distributed Systems,
vol. 22, no. 4, April 2011.
[9] S. Kumar, T. Lai, and A. Arora, “Barrier coverage with wireless sensors,”
in Proc. of the 11th Annual Int’l Conference on Mobile Computing and
Networking (MobiCom), 2005.
[10] A. Saipulla, C. Westphal, B. Liu, and J. Wang, “Barrier coverage of line-
based deployed wireless sensor networks,” in IEEE INFOCOM, April
2009, pp. 127–135.
[11] S. Kumar, T. Lai, M. Posner, and P. Sinha, “Maximizing the lifetime of
a barrier of wireless sensors,” IEEE Transactions on Mobile Computing,
vol. 9, no. 8, August 2010.
[12] H. Yang, D. Li, Q. Zhu, W. Chen, and Y. Hong, “Minimum energy cost
k-barrier coverage in wireless sensor networks,” in Proc. of the 5th Int’l
Conf. on Wireless Alg., Systems, and Applications (WASA), 2010.
[13] H. Luo, H. Du, D. Kim, Q. Ye, R. Zhu, and J. Zhang, “Imperfection
better than perfection: Beyond optimal lifetime barrier coverage in
wireless sensor networks,” in Proc. of The IEEE 10th Int’l Conference
on Mobile Ad-hoc and Sensor Networks (MSN), December 2014.
[14] D. Li, B. Xu, Y. Zhu, D. Kim, and W. Wu, “Minimum (k,w)-angle
barrier coverage in wireless camera sensor networks,” Int’l Journal of
Sensor Networks (IJSNET), 2014.
[15] L. Guo, D. Kim, D. Li, W. Chen, and A. Tokuta, “Constructing belt-
barrier providing quality of monitoring with minimum camera sensors,”
in 23rd Int’l Conf. on Computer Communication and Networks (IC-
CCN), August 2014.
[16] B. Xu, D. Kim, D. Li, J. Lee, H. Jiang, and A. Tokuta, “Fortifying
barrier-coverage of wireless sensor network with mobile sensor nodes,”
in Proc. of the 9th Int’l Conference on Wireless Algorithms, Systems,
and Applications (WASA), June 2014.
[17] D. Kim, J. Kim, D. Li., S. S. Kwon, and A. Tokuta, “On sleep-wakeup
scheduling of non-penetrable barrier-coverage of wireless sensors,” in
Proc. of the IEEE Global Communications Conference (GLOBECOM),
December 2012, pp. 321–327.
[18] D. Kim, H. Kim, D. Li, S. S. Kwon, A. O. Tokuta, and J. A. Cobb,
“Maximum lifetime dependable barrier-coverage in wireless sensor
networks,” Ad Hoc Networks, vol. 36, no. 1, Jan 2016.
[19] J. A. Cobb, “Improving the lifetime of non-penetrable barrier coverage
in sensor networks,” in IEEE 14th International Workshop on Assurance
in Distributed Systems and Networks (ADSN), June 2015, pp. pp. 1–10.
[20] J. Cobb, “In defense of stint for dense breach-free sensor barriers,” in
Int’l Conf. on Systems and Networks Communications (ICSNC), 2017.
[21] Z. Zhang, W. Wu, J. Yuan, and D.-Z. Du, “Breach-free sleep-wakeup
scheduling for barrier coverage with heterogeneous wireless sensors,”
IEEE/ACM Trans. on Networking, vol. 26, no. 5, 2018, pp. 2404–2413.
[22] H. Kim and J. A. Cobb, “Maximizing the lifetime of reinforced barriers
in wireless sensor networks,” Concurrency and Computation: Practice
and Experience, vol. 29, no. 23, 2017.
29
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-895-2
ICSNC 2021 : The Sixteenth International Conference on Systems and Networks Communications

