A Multi-UAS Simulator for High Density Air
Trafﬁc Scenarios
David Mart´ın-Lammerding
Department of Stats. Comput. Sci. Math
Public University of Navarre (UPNA)
Pamplona, Spain
email:david.martin@unavarra.es
Jos´e Javier Astrain
Department of Stats. Comput. Sci. Math
Public University of Navarre (UPNA)
Pamplona, Spain
email:josej.astrain@unavarra.es
Alberto C´ordoba
Department of Stats. Comput. Sci. Math
Public University of Navarre (UPNA)
Pamplona, Spain
email:alberto.cordoba@unavarra.es
Abstract—Unmanned Aerial Systems (UASs) have become
enormously popular as they improve many applications like
structural inspections, homeland security, delivering packages,
etc. UASs share the same airspace as manned aircrafts and thus
autonomous UAS operations and current airspace management
have to be integrated. It is recognized that the use of small
UASs and taxi-drones at lower altitudes is now a driving force
of economic development, but a safety risk when their num-
bers increase. UASs will ﬂy and make decisions autonomously
using only on-board sensors and processors. As the number of
simultaneous UAS ﬂights increase, keeping a safety airspace is
a challenge that implies that UAS navigation autonomy must be
veriﬁed for conﬂict avoidance in high density air trafﬁc areas. The
required scenarios to verify air trafﬁc management algorithms
and autonomous capabilities of UASs are complex to deploy and
UASs may collide, therefore simulations are of great importance.
This paper presents a conﬂict simulator of multiple UASs with
different equipment. The main purpose of the simulator is to
verify UAS subsystems, like collision avoidance, in different
scenarios with a combination of different equipped UASs and
ﬂight plans. To evaluate its effectiveness, we performed an
integrated simulation process for a Collision Avoidance Systems
(CAS) implementation where Hardware In the Loop (HIL) and
software simulations are combined to improve UAS subsystems
safety and to reduce the time-to-market.
Keywords—Simulator; HIL; UAS; autopilot; autonomous; CAS;
conﬂicts; anti-collision; air trafﬁc.
I. INTRODUCTION
The use of Unmanned Aerial Systems (UASs) in various
ﬁelds, such as military, policing, ﬁreﬁghting, etc. has evolved
in multiple UAS types with different characteristics, such as
size, speed and ﬂight range. Each UAS must be equipped with
new safety systems, like a Collision Avoidance System (CAS),
to ﬂy the shared airspace with other aircraft. CASs detect
airplanes in airspace, discover potential collision hazards and
perform maneuvers to avoid collisions. Rigorous simulations
of UAS trafﬁc beneﬁts application development of any UAS
subsystem, like CAS, and the integration of UASs in the
common air-space safely. Therefore, there is a real need of
a simulator that can combine multiple UASs with different
equipment and capabilities.
Accelerating, enhancing the development and testing of
CAS and other software elements that provide autonomy to
UAS are a key challenge. The logistical effort to deploy
multiple conﬂicting UASs imposes a high cost and complexity.
Evaluating the effectiveness of UAS systems requires an
automated process to simulate every new release.
In this paper, we present an UAS simulator, called SIMU-
drone, that is suitable for simulating high density air trafﬁc
operations with UASs. The simulator supports multiple UASs
in user-predeﬁned scenarios and in randomly automatic gener-
ated scenarios. Each simulation consists of multiple UASs with
a Flight Control Unit (FCU) and a Global Navigation Satellite
System (GNSS). Simulated UASs may have an autopilot, a
CAS, sensors for conﬂict detection (video-camera, LIDAR,
etc.) or a radio equipment to control it remotely by a pilot.
The main motivation for developing this simulator lies in
the necessity to generate multiple conﬂict scenarios with
combinations of multiple types of UASs and to integrate in
the simulations speciﬁc UAS subsystems executed on speciﬁc
hardware.
The rest of the paper is structured as follows. Section II
presents the state of the art of UAS simulators, Section III
deﬁnes the problem statement and Section IV describes our
contribution. The simulator is presented in Section V. Sec-
tion VI is devoted to presenting an experimental simulation.
Section VII presents the conclusions and references end the
paper.
II. RELATED WORK
Next, we review the main Commercial Off-The-Shelf
(COTS) UAS simulators available.
The SITL simulator is used for testing an autonomous
quadcopter [1]. It is intended for executing a FCU based
on ArduPilot in a PC. However, the SITL simulator does
not allow to simulate multiple UASs simultaneously. Other
UAS simulators focus on simulating the physical model of the
vehicle. Some vehicle simulators are XPlane [2], Flightgear
[3], Gazebo [4], JMavSim [5][6]. For our purposes, any of the
previously reviewed simulators requires a costly adaptation to
model UAS trafﬁc.
AirSim [7] is a visual simulator of different types of vehi-
cles, including UAS, based on the video game engine Unreal
Engine. It is focused on the development of AI algorithms
based on deep learning. Simulation time can be reduced but
at the cost of losing accuracy. However, response time and
multiple UASs simulations are limited as the simulation runs in
32
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

a desktop computer and it does not provide predeﬁned conﬂict
scenarios.
UTSim [8] is an UAS conﬂict simulator based on Unity.
Anti-collision algorithms can be integrated in the simulation
executed by UTSim, but UAS sub-systems can not be run
in HIL mode. There are air trafﬁc management simulators
that include UAS trafﬁc, such as BlueSky [9]. This type
of simulator is focused on air trafﬁc planning but not on
simulating conﬂicts and collisions. In [10], two simulators are
proposed: the TIMed State space Performance Analysis Tool
(TIM-SPAT) [11] and the CPN-tools [12]. The former requires
a complex conﬁguration. The latter is a limited tool with short
simulation conﬁguration capabilities.
In [10], an anti-collision system is simulated using TIMed
State space Performance Analysis Tool (TIM-SPAT)
[11],
developed at the Logistics and Aeronautics Unit of the Au-
tonomous University of Barcelona. But it has a complex
conﬁguration and development. Another tool used in [10] is
CPN-tools [12], a basic simulator with limitation in the UAS
equipment conﬁguration.
A Real-time Multi-UAV Simulator (RMUS) was presented
in [13]. It supports multiple UAVs, data collection and control
but lacks a ﬂexible conﬁguration of environments.
Multiple UASs simulators exist [14][15] but they are not
focused on testing multiple conﬂicts and their avoidance.
Table I classiﬁes the main UAS simulators using selected
capabilities: HIL simulation, multiple UASs simulation, and
external implementation/code integration in the simulator.
TABLE I
MAIN UAS SIMULATORS AND TOOLS FEATURES.
Ref
HIL
Multiple
Data
External code
simulation
UASs
link
integration
Airsim
[7]
✓
Gazebo
[4]
✓
UTSim
[8]
✓
✓
✓
RMUS
[13]
✓
✓
SIMUdrone
This
✓
✓
✓
✓
III. PROBLEM STATEMENT
UAS applications deployment require a security veriﬁcation
for the onboard systems to ﬂy in high density air trafﬁc
scenarios. Very Low Level airspace (VLL) is the space below
500 ft. above ground level. It is the part of the airspace
intended for new UAS applications and it will concentrate
most UAS conﬂicts. A conﬂict between two UASs occurs
when minimum separation, deﬁned as the protection radius,
rp, is lost. Figure 1 shows a conﬂict between local UAS and
remote UAS. A loss of separation does not always predict a
future collision, but it is a key safety indicator.
An UAS ﬂies over some particular locations, called way-
points. A waypoint is a location determined by GNSS. A ﬂight
plan consists of an ordered set of waypoints that the onboard
autopilot follows. A CAS deployed in an UAS is aimed at
maintaining a minimum safe separation between UASs. Once
a conﬂict is detected, a CAS diverts the UAS to a new safe
path, changing the ﬂight plan autonomously. The number of
simultaneous conﬂicts are denoted as nC.
UAS trafﬁc in VLL airspace consists of UASs with an
autopilot, remotely piloted UASs and even autonomous UASs.
Therefore, CAS must deal with conﬂicts with different UAS
types, capabilities and in random relative locations.
Most CASs for UASs are distributed so they run in an
onboard computer, commonly denoted as an embedded board.
However, the payload of the UASs limits the weight and the
energy consumption of the embedded board, as well as its
computing power.
One of the derived requirements from the above is that
the response time of the CAS running in an embedded board
should be considered in any simulation as it can reduce the
time to react.
Figure 1. Conﬂict between a local UAS and a remote UAS.
UAS software is necessarily integrated with hardware and
embedded systems for autonomous behavior. An intensive
testing with live-ﬂy ﬁeld experiments are costly and highly
time consuming. Therefore, simulations should combine HIL
simulations and other simulations based on software models.
IV. CONTRIBUTION
SIMUdrone is a novel multi-UAS simulator for high density
air trafﬁc scenarios suitable for urban environments. It pro-
vides a unique conﬂict generation framework with extensive
conﬁguration capabilities in order to simulate the variability
of situations in urban environments. Integration of external
software components and hardware in the simulations are two
key features of SIMUdrone.
SIMUdrone improves UAS safety and reduces the time to
market for UAS subsystems development as it implements
an automated integrated continuous simulation for each new
UAS subsystem release. The automated integrated continuous
simulation combines HIL simulations with simulation based
on software model.
SIMUdrone simpliﬁes the veriﬁcation of UAS subsystems,
like CAS, as it can generate extensive trafﬁc combinations to
simulate different scenarios. A large dataset of data from every
simulation is available to verify its behavior.
33
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

V. SIMUDRONE SIMULATOR
SIMUdrone simulates UAS trafﬁc, the effect of the envi-
ronment surrounding the UAS during the ﬂight, the onboard
equipment of the UAS and it can integrate external UAS
hardware using the HIL mode.
SIMUdrone is implemented in JAVA 8, HTML, CSS and
JS. The simulation output consists of multiple conﬁgurable log
ﬁles and a HTML5 conﬂict animation. A conﬂict animation
simpliﬁes the analysis of a simulation scenario and the results
obtained. It can be easily shared with others as it can be viewed
in any PC with a browser.
To generate conﬂicting UAS scenarios, SIMUdrone provides
custom scenarios, randomly generated with conﬁgurable UASs
types. UAS equipped with an autopilot can ﬂy following
a set of waypoints that can be conﬁgured, as well as the
ﬂying speed. UASs with a CAS integrated with the autopilot
can avoid conﬂicts by changing the predeﬁned ﬂight plan.
UASs remotely piloted can be also included in a simulation.
To simulate a remotely piloted UAS, SIMUdrone allows to
conﬁgure an area centered on the pilot where the UAS ﬂies
randomly for a time interval to limit its duration.
A. Architecture
SIMUdrone consists of multiple software components that
are combined to simulate a complete UAS system and a
conﬁgurable trafﬁc generator. A complete UAS system can be
simulated combining software models with a HIL simulation
to test a software component running on a speciﬁc piece of
hardware.
To simulate a ﬂight environment and provide sensor inputs
during simulation, we develop a virtual collaborative transpon-
der and a sensor system that generates conﬂict data. The
CAS log, the autopilot status and the scenario animation are
generated and stored in a proper format for each type.
SIMUdrone implements an autopilot and a reference CAS
implementation to facilitate the comparison with other imple-
mentations. The CAS implemented in SIMUdrone is based on
the Potential Field (PF) technique. PF is a collision avoidance
path calculation method that simulates a force ﬁeld where the
UAS is attracted to its ﬁnal destination and repulsed from
obstacles or conﬂicts [16], [17].
SIMUdrone implements two modes of operation, the HIL-
mode and the integrated-conﬂict-mode, as depicted in Figure 2.
The HIL-mode is devoted mainly to run a CAS implementa-
tion in the planned hardware that will be used as a companion-
pc on the UAS. The HIL-mode is a testbed that provides a
safe environment for testing any external systems in real time,
like CAS. SIMUdrone implements two adaptation layers, a
SIMUdrone Input Layer (SIL) and a SIMUdrone Output Layer
(SOL), to integrate external implementations running on a
speciﬁc piece of hardware. The communication between SIL,
SOL and SIMUdrone could be conﬁgured by a REST interface
or a serial communication using the MAVLink protocol.
A SIMUdrone HIL simulation can be deployed in two ways:
The ﬁrst consists of a single embedded board running the
CAS in order to proﬁle its response time and use it in a later
simulation. Therefore, a trusted CAS response time is obtained
and it is available for subsequent simulations. This is the
initial step before a complete software simulation is performed.
The two layers are adaptable and modular to simplify the
integration with external hardware. The HIL response time
proﬁling of SIMUdrone works as follows: SIMUdrone sends
conﬂict data to the input layer and receives the maneuver at the
output layer. SIMUdrone coordinates the two layers to obtain
the response time for each input-output.
The second consists of nC boards connected to SIMUdrone.
Each board runs the CAS of a simulated UAS whose FCU
and the rest of its equipment are software models instantiated
by SIMUdrone. Each board runs a CAS instance that receives
conﬂict data and sends avoidance maneuvers through the SIL
and SOL layers, respectively.
The integrated-conﬂict-mode is devoted to simulate multi-
ple UASs in a cluster using software models for the UAS
equipment, the environment and the communications. The
integrated-conﬂict-mode simulates nC conﬂicting UASs with
different equipment ﬂying in a conﬂict area. It simulates the
scenario in virtual time considering the real response time of
the UAS equipment, the latency of communications and the
delay of any onboard processing.
External implementations of UAS subsystems can be inte-
grated in the simulator as components or libraries linked to the
simulator code. However, UAS subsystems response time may
not be the same when running in a cluster. For this case, an
initial HIL simulation is required to provide data to conﬁgure
and tune a response time model.
B. Simulated scenarios
Simulated scenarios can be deﬁned programmatically. How-
ever, there are two pre-deﬁned scenarios for convenience, a
conﬂicting-area and a conﬂicting-point scenario.
A conﬂicting-area scenario consists of a rectangular air-
space area where nC conﬁgurable UASs ﬂy. A default conﬁg-
uration deﬁnes a two waypoint ﬂight plan for any autopilot-
equipped UAS. Initial UAS location, heading, speed and ﬂy
distance are randomly distributed using conﬁgured intervals.
This scenario is useful to test different densities of conﬂicts
and how a conﬂict inﬂuences others, as depicted in Figure 3.
In a conﬂicting-point, SIMUdrone simulates nC UASs that
converge in a collision point pC. To achieve this, SIMUdrone
deﬁnes a conﬂict-circle, whose center is the collision point pC.
Each UAS is randomly positioned on a conﬂict-circle circum-
ference. The minimum separation considered among UASs on
the conﬂict-circle circumference is a conﬁguration parameter.
The point pC is the center of the conﬂict-circle circumference.
Therefore, the ﬂigh plan is the diameter composed of three
points, the initial point on the circumference, w1, the center,
pC and w2. This scenario is useful when it is required to test
a CAS with a ﬁxed nC conﬂicting UASs in a limited area, as
depicted in Figure 4.
A conﬂicting-point simulation mission starts at waypoint
w1 and it is completed if the UAS arrives at w2 without being
involved in a collision. In addition to the conﬂict area around
34
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

(a)
(b)
Figure 2. SIMUdrone modes: (a) HIL mode (b) Conﬂict mode
Figure 3. Conﬂicting-area simulation of 9 UAS in a 5x5 Km. area. UAS3 is
an autonomous UAS equipped with a CAS that avoids a collision changing
its planned path (in green) to the one depicted in red. UAS7 is a remotely
piloted whose path revolves around a point as the pilot performs a visual line
of sight ﬂight. The rest of UAS are equipped with an autopilot.
point pC, there may be other conﬂict areas located at the
beginning of the ﬂight if the separation between UASs is lower
than the conﬂict distance conﬁgured. Animation examples are
available at [19] and [20].
VI. SIMUDRONE SIMULATION
Next, we present a SIMUdrone simulation conﬁgured to
show an automated integrated continuous simulation that com-
bines an HIL simulation and a software model simulation.
A. Conﬁguration
First, we review SIMUdrone general conﬁguration capabil-
ities. After that, we present the conﬁguration used for the
simulation.
SIMUdrone is a customizable simulator with a set of con-
ﬁguration parameters to simulate multiple conﬂict scenarios in
any airspace class, multiple UAS typologies, multiple payloads
and different ﬂight plans. Simulated UASs types available
in SIMUdrone are Vertical Take-Off and Landing (VTOL)
or copter. Their class are micro, mini light or small [18]
so their Maximun Take-Off Mass (mtom) is less than 150
Kg. This are the most common types in the VLL airspace.
Multiple UAS ﬂight altitudes can be simulated. Conﬂicts can
be avoided by changing altitude maneuvers but the limited
altitude in VLL airspace and the limited precision for latitude
measurement, restrict the crosses at different altitudes. The
PF implementation available in SIMUdrone does not change
altitude. Other known CAS implementations, that can be
simulated in any of the two SIMUdrone modes, may change
altitudes.
The simulated UAS can be conﬁgured in three types:
autopilot, autonomous with CAS and remotely piloted. The
autopilot and the autonomous UAS require a ﬂight plan deﬁned
with a set of waypoints, speeds between waypoints and ﬂight
altitudes. The remotely piloted UAS requires a pilot location
and a maximum distance from it to generate a random path
that is contained in a cylinder whose base is deﬁned by the
pilot location and the radius is the maximum distance for
the visual ﬂight allowed. SIMUdrone can be conﬁgured to
simulate the effect of wind and GNSS’s inaccuracies with
random variations of the bearing required to ﬂy to the next
waypoint.
SIMUdrone simulates conﬂict detection sensors, like an
ADS-B transponder or a vision camera. A simulated vision-
based detection system consists of a vision camera mounted
in the forward direction of the UAS on the symmetry axis.
The CAS implemented in SIMUdrone generates an escape
maneuver when the distance to a conﬂict is less than the
protection radius (rp). If the distance is less than the safety
radius (rs) the escape maneuver is sharper. A collision occurs
between two or more UASs if the distance between them is
35
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

(a)
(b)
Figure 4. Conﬂicting-point simulations.(a) Two UASs collide and a third one arrives its destination waypoint (b) Nine UASs approaching a collision point pC
less than the collision radius (rcc).
For the simulation performed, a speciﬁc set of simulation
parameters are selected and summarized in Table II.
TABLE II
MAIN SIMUdrone PARAMETERS CONFIGURED.
Parameter
Value
Typology of simulated UAS
Copter
UAS class
Light
Simulated UAS
All autonomous UAS with CAS
CAS integrated
SIMUdrone PF implementation
Onboard sensors
ADS-B and vision camera
nC
[2,9]
Protection radius (rp)
100 m
Safety radius (rs)
50 m
Collision radius (rcc)
5 m
Speed range (sp)
[20, 25] m/s
UAS distance to pC
[350, 650] m
Altitude (h)
50 m
GNSS inaccuracies distance
[-2, 20] m random
GNSS inaccuracies bearing
[0, 360] °
Wind effect bearing variation
[-4,4]°
Tables III and IV list the features of the equipment conﬁg-
ured in the simulation.
TABLE III
SIMULATED PARAMETERS OF THE VISION-BASED CAMERA.
Parameter
Value
Detection distance (dDT)
[300,350] m
Coverage angle (θ)
[140,160] degrees
Frequency (fz)
20 Hz
B. Simulation results
The SIMUdrone conﬂict simulation performed combines a
HIL simulation and two integrated-conﬂict-mode simulations
conﬁgured as conﬂicting-point scenarios.
TABLE IV
SIMULATED PARAMETERS OF A LOW POWER ADS-B TRANSPONDER.
Parameter
Value
Coverage distance (dCB)
[1500,2500] m
Frequency (fec)
1 Hz
The HIL simulation obtains a Response Time, RT, of the
SIMUdrone CAS implementation running in a PI3 embed-
ded board [21]. The SIMUdrone CAS runs in a PI3 board
connected to the main SIMUdrone instance via MAVLink.
SIMUdrone generates conﬂicts that are sent to the board and
keeps the conﬂict scenario state. Next, SIMUdrone waits for
the CAS response, updates the internal simulation state and
measures the response time.
The integrated-conﬂict-mode simulation is performed in
two different conﬂicting-point scenarios: One of the scenarios
simulates nC UASs without CAS and the other simulates nC
UASs with the CAS implemented in SIMUdrone using the
response time obtained from the previous HIL simulation.
Results of the simulations are shown in Table V. A simu-
lated mission with nC conﬂicting UASs is successful if every
UAS arrives to its destination waypoint. The success rate
measures how many iterations are successful. The number of
conﬂicts simulated are between 2 and 9. The upper value is
deﬁned using the results of a worst-case high trafﬁc volume
(maximum of 100000 ﬂights per day) presented in [22]. Every
simulation performed repeats 100 iterations for each scenario.
The performed SIMUdrone simulation shows that it allows
to combine multiple simulation modes in order to automate
the test of an UAS subsystem implementation. When a new
version of the UAS subsystem is available, SIMUdrone allows
to update the simulations results performing a new simulation
with the new implementation version. The integrated simula-
tion process conﬁgured in SIMUdrone runs the updated imple-
36
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

TABLE V
SUMMARY OF SIMULATIONS PERFORMED.
mean
success
Collided UASs
success
Collided UASs with CAS
(no CAS)
(equip CAS)
nC
RT (ms)
%
mean
sdev
%
mean
sdev
2
6.45
59
2.00
0.00
99
2.00
0.00
3
8.44
13
2.01
0.11
78
2.00
0.00
4
9.45
0
2.57
0.89
69
2.06
0.36
5
8.75
0
3.68
0.72
64
2.17
0.56
6
7.68
0
4.80
0.97
38
2.24
0.99
7
8.86
0
5.70
0.76
32
3.00
1.22
8
8.56
0
6.81
1.13
25
2.89
1.21
9
8.45
0
7.75
0.82
20
3.13
1.30
mentation in a embedded onboard, obtains updated response
times, updates the software model and simulates multiple
scenarios with UASs equipped with the new implementation.
VII. CONCLUSION
UAS evolution requires the rapid implementation and evo-
lution of UAS subsystems for its integration in air trafﬁc.
The veriﬁcation of such UAS subsystems must be performed
in simulations because it is expensive if it is physically
performed. Therefore, simulators are vital to evaluate proposed
algorithms and their performance in speciﬁc hardware. In
this paper, we present SIMUdrone, a simulator that combines
scenarios with multiple UASs, HIL simulations and the in-
tegration of external algorithms in any subsystem. It allows
to conﬁgure UASs with different equipment, like an ADS-B
transponder or a CAS, and with custom or random generated
ﬂight plans. Furthermore, SIMUdrone has been tested using
a combined HIL simulation with a software simulation of
nC conﬂicts to verify its capability to integrate and automate
a complete stack of continuous simulations. A continuous
simulation process reduces the time-to-market and improves
air trafﬁc safety.
Additional enhancements will be focused on the develop-
ment of more simulated components in order to test other
collaborative technologies, sensors or new conﬂict avoidance
algorithms. Another line of work is to improve the SIMUdrone
interoperability with algorithms implemented as external bi-
naries that can not be integrated in the code or executed in
HIL mode. Further developments of this work will include
integration in the HIL mode of hardware that uses V2X
(Vehicle-to-everything) communication protocols or Controller
Area Network (CAN) BUS. Future work will be focused on the
creation of a dataset with conﬂicts and resolution maneuvers
to be used for UAS air trafﬁc research and for development
of CAS.
REFERENCES
[1]
H. M. Qays, B. A. Jumaa, and A. D. Salman, “Design and implementa-
tion of autonomous quadcopter using sitl simulator,” Iraqui Journal of
Computers, Communications, Control and System Engineering, vol. 20,
no. 1, pp. 1–15, 2020.
[2]
R. Garcia and L. Barnes, “Multi-uav simulator utilizing x-plane,” in
Selected papers from the 2nd International Symposium on UAVs, Reno,
Nevada, USA June 8–10, 2009, Springer, 2009, pp. 393–406.
[3]
A. R. Perry, “The ﬂightgear ﬂight simulator,” in Proceedings of the
USENIX Annual Technical Conference, vol. 686, 2004.
[4]
N. Koenig and A. Howard, “Design and use paradigms for gazebo, an
open-source multi-robot simulator,” in 2004 IEEE/RSJ International
Conference on Intelligent Robots and Systems (IROS)(IEEE Cat. No.
04CH37566), IEEE, vol. 3, 2004, pp. 2149–2154.
[5]
Y. Jiang, J. Liao, and Q.-f. Chen, “Hardware-in-loop simulation system
for small rotor uav based on jmavsim,” Computer Simulation, 2019.
[6]
A. I. Hentati, L. Krichen, M. Fourati, and L. C. Fourati, “Simulation
tools, environments and frameworks for uav systems performance
analysis,” in 2018 14th International Wireless Communications Mobile
Computing Conference (IWCMC), 2018, pp. 1495–1500. DOI: 10.1109/
IWCMC.2018.8450505.
[7]
S. Shah, D. Dey, C. Lovett, and A. Kapoor, “Airsim: High-ﬁdelity
visual and physical simulation for autonomous vehicles,” in Field and
service robotics, Springer, 2018, pp. 621–635.
[8]
A. Al-Mousa, B. H. Sababha, N. Al-Madi, A. Barghouthi, and R.
Younisse, “Utsim: A framework and simulator for uav air trafﬁc
integration, control, and communication,” International Journal of
Advanced Robotic Systems, vol. 16, no. 5, p. 1 729 881 419 870 937,
2019.
[9]
J. M. Hoekstra and J. Ellerbroek, “Bluesky atc simulator project:
An open data and open source approach,” in Proceedings of the 7th
International Conference on Research in Air Transportation, FAA/Eu-
rocontrol USA/Europe, vol. 131, 2016, p. 132.
[10]
J. Tang, F. Zhu, and L. Fan, “Simulation modelling of trafﬁc colli-
sion avoidance system with wind disturbance,” IEEE Aerospace and
Electronic Systems Magazine, vol. 33, no. 4, pp. 36–45, 2018.
[11]
O. T. Baruwa, M. A. Piera, and A. Guasch, “Timspat–reachability
graph search-based optimization tool for colored petri net-based
scheduling,” Computers & Industrial Engineering, vol. 101, pp. 372–
390, 2016.
[12]
K. Jensen, L. M. Kristensen, and L. Wells, “Coloured petri nets
and cpn tools for modelling and validation of concurrent systems,”
International Journal on Software Tools for Technology Transfer,
vol. 9, no. 3, pp. 213–254, 2007.
[13]
A. H. Goktogan, E. Nettleton, M. Ridley, and S. Sukkarieh, “Real
time multi-uav simulator,” in 2003 IEEE International Conference on
Robotics and Automation (Cat. No. 03CH37422), IEEE, vol. 2, 2003,
pp. 2720–2726.
[14]
V. Rodriguez-Fernandez, H. D. Men´endez, and D. Camacho, “Design
and development of a lightweight multi-uav simulator,” in 2015 IEEE
2nd International Conference on Cybernetics (CYBCONF), IEEE,
2015, pp. 255–260.
[15]
M. A. Day, M. R. Clement, J. D. Russo, D. Davis, and T. H. Chung,
“Multi-uav software systems and simulation architecture,” in 2015
International Conference on Unmanned Aircraft Systems (ICUAS),
IEEE, 2015, pp. 426–435.
[16]
J.-H. Chuang and N. Ahuja, “An analytically tractable potential ﬁeld
model of free space and its application in obstacle avoidance,” IEEE
Transactions on Systems, Man, and Cybernetics, Part B (Cybernetics),
vol. 28, no. 5, pp. 729–736, 1998.
[17]
Y. Zhao, L. Jiao, R. Zhou, and J. Zhang, “Uav formation control with
obstacle avoidance using improved artiﬁcial potential ﬁelds,” in 2017
36th Chinese Control Conference (CCC), IEEE, 2017, pp. 6219–6224.
[18]
A. C. Watts, V. G. Ambrosia, and E. A. Hinkley, “Unmanned aircraft
systems in remote sensing and scientiﬁc research: Classiﬁcation and
considerations of use,” Remote Sensing, vol. 4, no. 6, pp. 1671–1692,
2012.
[19]
D.
Mart´ın-Lammerding.
(2021).
Two
uas
collision,
https://dronetology.net/vehicular/collision.html,
[Online].
Available:
https : / / dronetology . net / vehicular / collision . html (visited on
01/02/2022).
[20]
——,
(2021).
Dense
air
conﬂicts,
https://dronetology.net/vehicular/dense.html,
[Online].
Available:
https://dronetology.net/vehicular/dense.html (visited on 01/02/2022).
[21]
Raspberry
Pi
Foundation.
(2021).
Raspberry
Pi
3,
https://www.raspberrypi.org/, [Online]. Available: https : / / www .
raspberrypi.org/ (visited on 02/02/2021).
[22]
V. Bulusu, R. Sengupta, V. Polishchuk, and L. Sedov, “Cooperative and
non-cooperative uas trafﬁc volumes,” in 2017 International Conference
on Unmanned Aircraft Systems (ICUAS), IEEE, 2017, pp. 1673–1681.
37
Copyright (c) IARIA, 2022.     ISBN:  978-1-61208-974-4
VEHICULAR 2022 : The Eleventh International Conference on Advances in Vehicular Systems, Technologies and Applications

