Image Reconstruction using Partial Fuzzy Transform
Martina Daˇnkov´a∗, Viktor Pavliska†
National Supercomputing Centre IT4Innovations
Institute for Research and Applications of Fuzzy Modeling,
University of Ostrava
30. dubna 22, 701 03 Ostrava 1,
Czech Republic
Email: ∗martina.dankova@osu.cz, †viktor.pavliska@osu.cz
Abstract—We will introduce various extensions of ordinary bi-
nary operations to a specially chosen single dummy element
representing an undeﬁned or missing value. We will apply these
extensions to the Perﬁlieva’s fuzzy transform technique and
extend it appropriately to operate with this dummy element
too. The result of this extension will be called partial fuzzy
transform. Moreover, we will demonstrate the usefulness of our
approach using partial fuzzy transform technique on an image
reconstruction problem.
Keywords–Undeﬁned; Missing data; Error propagation; Fuzzy
transform; Image processing.
I.
INTRODUCTION
Undeﬁned or Missing (U/M) data as a source of various
bugs are a common problem in most scientiﬁc research do-
mains. Causes are various, e.g., computation exceptions, non-
terminating computation, mishandling of samples, measure-
ment error, non-response or division by zero. Such data are
needed to be represented in order to be correctly handled.
For this purpose, there exist various markers in programming
languages, e.g., Null, NaN, Inf. In this paper, we propose
to use a single dummy element denoted by ∗ to represent
U/M data, and we extend binary functions to operate with
∗ also [1]. As an output, we obtain several families of binary
functions due to variability of treating U/M data. Remark that
these extensions are analogous to the connectives of a partial
fuzzy logic [2].
Our main aim is to demonstrate the usefulness of the above-
mentioned extensions. For this purpose, we chose the ordinary
Fuzzy Transform (FT) technique introduced in [3] and its ap-
plication to an image reconstruction problem introduced in [4].
A brief description of FT, algorithms and their implementations
for Image Reconstruction (IR) using FT can be found in [5].
We have observed that algorithms for IR using FT in
all available sources lack an explanation of what happens
in case of exceptions in a computation process. We refer
mainly to the problem of the division by 0 when computing
components of the direct FT which often occurs in dam-
aged parts of an image. Moreover, the description of Multi-
Step Reconstruction Algorithm (MSRA) from [4] does not
correspond with experimental results presented in [4]. It is
because U/M parts of an input image are considered as having
value 0 which inﬂuences the ﬁnal inﬁlling of U/M areas of
images in each iteration step. The main problem lies in Step 5
of MSRA which states the following: “Update the mask by
deleting pixels whose reconstructed values are strictly greater
than zero”. Fulﬁlling this requirement leads to gradual falling
(with a growing number of iterations) of inﬁlled values to 0
and consequently to the darkening of the centers of inﬁlled
areas (see Figure 5). However, this is not the case of the
experimental results presented in [4]. Surprisingly, their results
are almost identical with ours (see Figure 6). A discussion on
differences between algorithms from [4] and our approach will
be explained in Section VI.
In this paper, we will present algorithms for an image
reconstruction based on FT which will be able to handle
U/M parts of images represented by ∗. For this purpose, we
will choose suitable extensions of elementary operations to ∗
according to our intuitive expectations on the behavior of FT
on U/M parts of an image which will result in a deﬁnition
of the so-called partial FT. In our approach, we encode U/M
areas of an image by ∗ and reconstructed parts are computed
only from the real image values.
The paper is organized as follows. In Section II, we
recall three basic extensions of binary functions from [1].
Perﬁlieva’s FT and partial FT are presented in Section III
and IV, respectively. Next, in Section V, we introduce algo-
rithms for image reconstruction using partial FT together with
illustrative examples. Finally, features of the used formalism
are summarized in Section VI.
II.
EXTENSIONS OF OPERATIONS TO U/M DATA
Extensions of connectives to undeﬁned truth values in
partial fuzzy logic [2] can be analogously carried for an
arbitrary binary function o: X2 → X as follows:
oB
y
∗
x
o(x, y)
∗
∗
∗
∗
oS
y
∗
x
o(x, y)
x
∗
y
∗
(1)
where ∗ ̸∈ X. We call oB the Bochvar-extension of o, oS the
Soboci´nski-extension of o
Moreover, if a ∈ X is an absorbing element of o, i.e.,
o(a, x) = o(x, a) = a then, we introduce the Kleene-extension
of o:
oK
a
y
∗
a
a
a
a
x
a
o(x, y)
∗
∗
a
∗
∗
(2)
Note that
•
oB, oS, oK operate on (X∪{∗})2 and take values from
X ∪ {∗}.
•
These extensions are motivated by classical four val-
ued logics.
5
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-709-2
COMPUTATION TOOLS 2019 : The Tenth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

•
Soboci´nski-style operations treat U/M inputs encoded
by ∗ as irrelevant and ignore them. In the case of
Bochvar-style operations, ∗ represents a fatal error,
and it terminates a computation. Kleene-style oper-
ations treat ∗ as a vincible error where ∗ is treated as
a fatal error up to the case of an absorbing element
which overwrites ∗.
•
An extension should be chosen due to a required
behavior of o in the case of U/M data.
III.
ORDINARY FUZZY TRANSFORM
Recall that FT is a well-established technique in the image
processing domain. Let us recall some applications, e.g., [6]
introduces an algorithm for pattern matching and provides
a comparison with existing methods, an image fusion was
elaborated in [7], and an image contrast enhancement can be
found in [8]. A higher order ordinary FT [9] was used in an
edge detection problem [10], as well as in an improvement of
image reconstruction method [11].
FT uses weighted arithmetic mean to compute transfor-
mation components and invert them as linear combination of
components with their weights. We recall a discrete FT from
[3] adjusted for 2-D case, where X = [a, b] × [c, d] ̸= ∅ ⊂ R2
and a continuous function f : X → R is given only at some
non-empty ﬁnite set of points D ̸= ∅ ⊆ X.
Let m, n ≥ 2, {xi}m+1
i=0
and {yj}n+1
j=0 be nodes such that
a = x0 = x1 < . . . < xm = xm+1 = b and c = y0 =
y1 < . . . < yn = yn+1 = d. Consider two ﬁnite sets of
fuzzy sets A = {A1, . . . , Am} and B = {B1, . . . , Bn}, where
each Ak and Bl are identiﬁed with their membership functions
Ak : [a, b] → [0, 1], Bl : [c, d] → [0, 1] for each k = 1, . . . , m
and l = 1, . . . , n.
Let A fulﬁll the following conditions, for each k =
1, . . . , m:
1)
Locality: Ak(x) = 0 if x ∈ [a, xk−1] ∪ [xk+1, b].
2)
Continuity: Ak is continuous on [a, b].
3)
Normality: Ak(x) = 1 for some x ∈ (xk−1, xk+1).
4)
Ruspini’s condition: Pn
i=1 Ai(x) = 1 for all x ∈
[a, b].
We shall say that A form a fuzzy partition of [a, b].
Often, we deal with the so called h-uniform fuzzy par-
tition A (see [4]) determined by the generating function
A : [−1, 1] 7→ [0, 1], which is assumed to be even, continuous,
bell-shaped and fulﬁll A(0) = 1. Fuzzy sets from a h-uniform
fuzzy partition are created as a shifted copy of a generating
function A.
Deﬁnition 1 Let A and B form fuzzy partitions of [a, b] and
[c, d], respectively. Let m = |A|, n = |B|, and moreover, let
A and B cover D, i.e., for each A ∈ A, B ∈ B there exist
(x, y) ∈ D such that A(x) > 0 and B(y) > 0. Then, a (direct
discrete) fuzzy transform of f w.r.t. A, B and D is deﬁned as
a m × n matrix
Fm,n[f] =


F11
F12
. . .
F1n
F21
F22
. . .
F2n
...
...
...
...
Fm1
Fm2
. . .
Fmn


where the (k, l)-th component Fk,l is equal to
Fk,l =
P
(c,d)∈D f(c, d)Ak(c)Bl(d)
P
(c,d)∈D Ak(c)Bl(d)
(3)
for each k = 1, . . . , m and l = 1, . . . , n.
Observe that the matrix of components consists of weighted
arithmetic means with weights given by the values of the
respective fuzzy sets from A and B. A linear combination
of components from Fm,n[f] and fuzzy sets from A and
B returns a continuous function on X called inverse fuzzy
transform.
Deﬁnition 2 The inverse discrete fuzzy transform of f
w.r.t. A, B and D is a function fF,m,n : X → R deﬁned as
fF,m,n(x, y) =
m
X
k=1
n
X
l=1
Fk,l·Ak(x)·Bl(y),
(x, y) ∈ X. (4)
We refer to the direct and inverse discrete FT from the above
deﬁnitions as the ordinary FT.
IV.
PARTIAL FUZZY TRANSFORM
Since f : X → R is given only at some non-empty ﬁnite set
of points, hence, it is total on D and partial on X. Therefore,
it can be considered undeﬁned on X \ D. This fact can be
formalized by extension of real-line by a dummy element ∗
(represents U/M value) to R∗ = R∪{∗} and f to f ∗ : X → R∗
as follows:
f ∗(x) =
f(x)
for x ∈ D;
∗
otherwise.
(5)
Now, we can introduce FT components for f ∗ as extended
weighted arithmetic means.
Deﬁnition 3 Let A, B and m, n be as in Deﬁnition 1 and
Pkl = {(x, y) ∈ X|Ak(x) · Bl(y) > 0}.
Then, a (direct discrete) partial fuzzy transform of f ∗ w.r.t. A,
B and D is deﬁned as a matrix of components
F ∗
m,n[f ∗] =


F ∗
11
F ∗
12
. . .
F ∗
1n
F ∗
21
F ∗
22
. . .
F ∗
2n
...
...
...
...
F ∗
m1
F ∗
m2
. . .
F ∗
mn


where
F ∗
k,l =
XS
(x,y)∈Pkl f ∗(x, y) ·B (Ak(x) · Bl(y))
X
(c,d)∈D∩Pkl Ak(c) · Bl(d)
B
(6)
for k = 1, . . . , n.
In this deﬁnition, we do not consider A and B to cover D.
It follows that F ∗
k,l ̸= ∗ if and only if there exists (x, y) ∈ D
such that x ∈ [xk−1, xk+1] and y ∈ [yl−1, yl+1].
6
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-709-2
COMPUTATION TOOLS 2019 : The Tenth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Observe that (6) can be equivalently written as
F ∗
k,l =
XS
(x,y)∈Pkl f ∗(x, y) ·B (Ak(x) · Bl(y))
X
(x,y)∈Pkl Ak(x) · Bl(y) · χD(x, y)
B
(7)
where χD denotes characteristic function of D.
An inverse transformation of F ∗
m,n[f ∗] to the space of
partial functions is deﬁned as follows:
Deﬁnition 4 The inverse discrete partial fuzzy transform of f ∗
w.r.t. A, B and D is a function f ∗
F,m,n : X → R∗ such that
f ∗
F,m,n(x, y) =
m
XB
k=1
n
XB
l=1
(F ∗
k,l ·K (Ak(x) · Bl(y)))
(8)
for all (x, y) ∈ X.
Convention 5 We denote a partial fuzzy transform brieﬂy
by FT∗.
This deﬁnition of FT∗ that operates on ∗-extended reals
allows us to ﬁll in “small” gaps on X between the given data
D by means of real values given by the inverse FT∗ while
“big” gaps are ﬁlled only on the edges and remain undeﬁned
otherwise. A meaning of “small” and “big” gaps is captured
by the width of supports of fuzzy sets in A and B.
V.
IMAGE RECONSTRUCTION USING PARTIAL FUZZY
TRANSFORM
In this contribution IR problem does not mean a fusion of
several images, but a problem of reconstruction of undeﬁned,
missing or corrupted part of a single input image. Methods
for solving this problem are often called image inpainting (or
image interpolation) methods. There are several approaches to
the problem of IR [12]. The F-transform based method falls to
the class of the interpolation techniques. For an overview and
a comparison of interpolation techniques, we refer to [13].
In this section, we will provide IR algorithms based on
FT∗ which ﬁll in U/M regions of the input image I. We will
assume that information about these regions (denoted by ω)
is available in the form of the input mask S having value ∗
for U/M data and 1 otherwise. A goal of IR algorithms is to
replace ω by values gained through computation on undamaged
regions of an input image. Here, we use FT∗ to do so.
Remark that inverse FT and FT∗ transform a matrix of
components to the space of 2-D continuous functions having
values in R. Therefore, we round the received real values of
the inverse FT∗ to the closest natural number from the interval
[0, 255] and ∗ remains untouched.
Recall that gray-scale digital images are represented as
functions on X ⊂ N2 with values in [0, 255] ⊂ N, i.e., as
mappings I : X 7→ [0, 255], where X = [1, M] × [1, N] and
[1, M], [1, N] are closed intervals on N.
In the following, let us consider a non-empty set ω ⊂ X
and parameters s, h ∈ N.
A. A Simple IR Algorithm Based on Partial FT
Let us brieﬂy sketch steps of the simple IR algorithm based
on FT∗ with the inputs I, ω, h > 1 and a generating function
A:
•
Rewrite values of I on ω by ∗ and denote the result
by I∗.
•
Compute m, n from h and generate h-uniform parti-
tions A and B using A.
•
Compute the direct and inverse FT∗ of I∗ w.r.t. A, B
and D.
•
Reconstruct a part of ω in I∗ using the inverse FT∗.
Inputs: Image I, damaged areas ω, width h > 1, generator A.
1)
Set I∗(x, y) =

∗,
∀(x, y) ∈ ω;
I(x, y),
otherwise.
2)
Set D = X \ ω.
3)
Compute m, n from h and generate h-uniform parti-
tions A and B using A.
4)
Compute the direct FT∗ of I∗ w.r.t. A, B and D, i.e.,
F ∗
m,n[I∗] by (6).
5)
Compute the inverse FT∗ of I∗ w.r.t. A, B and D,
i.e., I∗
F,m,n by (8).
6)
Set I∗(x, y) = I∗
F,m,n(x, y), for all (x, y) ∈ ω.
7)
Rewrite all ∗ by 0 in I∗.
Output: Image I∗.
B. An Iterative IR Algorithm Based on Partial FT
In this algorithm, we repeat the simple IR algorithm
described above with an increasing width h (determined by
the step s) until the whole ω is reconstructed. A detailed
description follows.
Inputs: Image I, damaged areas ω, width h > 1, generator
A, step s > 0.
1)
Set I∗(x, y) =

∗,
∀(x, y) ∈ ω;
I(x, y),
otherwise.
2)
Set D = X \ ω.
3)
Compute m, n from h and generate h-uniform parti-
tions A and B using A.
4)
Compute the direct FT∗ of I∗ w.r.t. A, B and D, i.e.,
F ∗
m,n[I∗] by (6).
5)
Compute the inverse FT∗ of I∗ w.r.t. A, B and D,
i.e., I∗
F,m,n by (8).
6)
Set I∗(x, y) = I∗
F,m,n(x, y), for all (x, y) ∈ ω.
7)
Set h = h + s and ω = {(x, y) ∈ I∗|I∗(x, y) = ∗}.
8)
If ω ̸= ∅ then go to 2) else output I∗.
Output: Image I∗.
Remark 6 In the case of RGB (where I : X 7→ [0, 255]3)
or another image representation model, we run the selected
algorithm in each channel separately with the same settings
of the input parameters.
Example 7 Consider A(x) = 1−|x|. We apply the simple and
iterative IR algorithms based on FT∗ to an image with small,
as well as large U/M areas visualized in Figure 1. Figures 2
and 3 show an effect of the simple algorithm with h = 2
and h = 3, respectively. A suitable choice of h (the parameter
determining fuzzy partitions) leads to an inﬁlling of U/M areas
7
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-709-2
COMPUTATION TOOLS 2019 : The Tenth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Figure 1. An original image with U/M areas.
Figure 2. Application of the simple IR algorithm based on FT∗ to the image
from Figure 1 with h = 2.
of a maximal vertical and horizontal width smaller than h.
Finally, an output of the iterative IR algorithm based on FT∗
with h = 2 and s = 1 is depicted in Figure 4. In this particular
example, both algorithms produce ﬁne reconstructions of small
U/M areas. In the case of the big U/M area in Figure 1, which
covers Lena’s face, some context based IR algorithm would be
more applicable.
Figure 3. Application of the simple IR algorithm based on FT∗ to the image
from Figure 1 with h = 3.
Figure 4. Application of the iterative IR algorithm based on FT∗ to the
image from Figure 4.
8
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-709-2
COMPUTATION TOOLS 2019 : The Tenth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Figure 5. MSRA (due to the description in [4]) applied to Figure 1.
(a) IMSRA applied to Figure 4.
(b) Difference between Figure 4 and
IMSRA.
Figure 6. An example of an output of the Implementation of MSRA
(IMSRA) provided in [5].
VI.
CONCLUSIONS
The most important features of FT∗ is a signiﬁcant simpliﬁ-
cation and correction of MSRA from [4] (and also other later
sources). Indeed, experimental results of MSRA are almost
identical with outputs of our iterative IR algorithm based on
FT∗ (see Figure 6). Observe that FT∗ handles automatically
U/M parts and they do not need to be explicitly encoded in
(6) and (8). Moreover, this particular application shows the
usefulness of the introduced formalism that deals with one
error code ∗ for an arbitrary exception and various extensions
of operations to ∗. Hence, we can choose a suitable extension
of the user operation due to our requirements on the behaviour
of ∗ and consequently, we do not need to take care of
any exception because it is correctly handled using extended
operations. In our opinion, this approach may be useful also in
other research domains and problem-solving techniques where
U/M data are present.
ACKNOWLEDGMENT
The work is supported by projects 16–19170S of GA ˇCR
and LQ1602 of MˇSMT ˇCR (NPU II).
REFERENCES
[1]
L. Bˇehounek and M. Daˇnkov´a, “Extending aggregation functions for
undeﬁned inputs,” in International Symposium on Aggregation and
Structures, 2018, pp. 15–16.
[2]
L. Bˇehounek and V. Nov´ak, “Towards fuzzy partial logic,” in Proceed-
ings of the IEEE 45th International Symposium on Multiple-Valued
Logics (ISMVL 2015), 2015, pp. 139–144.
[3]
I. Perﬁlieva, “Fuzzy transforms: Theory and applications,” Fuzzy Sets
and Systems, vol. 157, 2006, pp. 992–1023.
[4]
I. Perﬁlieva and P. Vlaˇs´anek, “Image reconstruction by means of F-
transform,” Knowledge-Based Systems, vol. 70, 2014, pp. 55–63.
[5]
P. Vlaˇs´anek, “Fuzzy image processing tutorials,” https://docs.opencv.
org/4.0.1/d7/d36/tutorial fuzzy.html, December 2018.
[6]
P. Hurtik and P. ˇStevuli´akov´a, “Pattern matching: overview, benchmark
and comparison with f-transform general matching algorithm,” Soft
Computing, vol. 21, no. 13, 2017, pp. 3525–3536.
[7]
F. Di Martino and S. Sessa, “Complete image fusion method based on
fuzzy transforms,” Soft Computing, 2017, pp. 1–11.
[8]
C. Reshmalakshmi, M. Sasikumar, and G. Shiny, “Fuzzy transform
for low-contrast image enhancement,” International Journal of Applied
Engineering Research, vol. 13, no. 11, 2018, pp. 9103–9108.
[9]
I. Perﬁlieva, M. Daˇnkov´a, and B. Barnabas, “Towards a higher degree
f-transform,” Fuzzy Sets and Systems, vol. 180, no. 1, 2011, pp. 3–19.
[10]
I. Perﬁlieva, P. Hod´akov´a, and P. Hurt´ık, “Differentiation by the f-
transform and application to edge detection,” Fuzzy Sets and Systems,
vol. 288, 2016, pp. 96–114.
[11]
P. Vlaˇs´anek and I. Perﬁlieva, “Patch based inpainting inspired by the f1-
transform,” International Journal of Hybrid Intelligent Systems, vol. 13,
no. 1, 2016, pp. 39–48.
[12]
M. Bertalmio, G. Sapiro, V. Caselles, and C. Ballester, “Image in-
painting,” in Proceedings of the 27th Annual Conference on Computer
Graphics and Interactive Techniques, ser. SIGGRAPH ’00.
New York,
NY, USA: ACM Press/Addison-Wesley Publishing Co., 2000, pp. 417–
424.
[13]
S. Fadnavis, “Image interpolation techniques in digital image process-
ing: An overview,” International Journal of Engineering Research and
Applications, vol. 4, 2014, pp. 70–73.
9
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-709-2
COMPUTATION TOOLS 2019 : The Tenth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

