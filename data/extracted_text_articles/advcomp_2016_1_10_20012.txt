A Non-repetitive Logic for Veriﬁcation of Dynamic
Memory with Explicit Heap Conjunction and
Disjunction
Ren´e Haberland
Kirill Krinkin
Saint Petersburg Electrotechnical University ”LETI”
Saint Petersburg, Russia
email: haberland1@mail.ru, kirill.krinkin@fruct.org
Abstract—In this paper, we review existing points-to Separa-
tion Logics for dynamic memory reasoning and we ﬁnd that
different usages of heap separation tend to be an obstacle. Hence,
two total and strict spatial heap operations are proposed upon
heap graphs, for conjunction and disjunction – similar to logical
conjuncts. Heap conjunction implies that there exists a free
heap vertex to connect to or an explicit destination vertex is
provided. Essentially, Burstall’s properties do not change. By
heap we refer to an arbitrary simple directed graph, which
is ﬁnite and may contain composite vertices representing class
objects. Arbitrary heap memory access is restricted, as well
as type punning, late class binding and further restrictions.
Properties of the new logic are investigated, and as a result
group properties are shown. Both expecting and superﬁcial
heaps are speciﬁable. Equivalence transformations may make
denotated heaps inconsistent, although those may be detected and
patched by the two generic linear canonization steps presented.
The properties help to motivate a later full introduction of a
set of equivalences over heap for future work. Partial heaps
are considered as a useful speciﬁcation technique that help
to reduce incompleteness issues with speciﬁcations. Finally, the
logic proposed may be considered for extension for the Object
Constraint Language.
Keywords. heap logic, points-to heap speciﬁcation and
veriﬁcation, spatial heap operation ambiguity.
I. INTRODUCTION
In contrast to automatically allocated memory, which re-
mains in the stack, dynamic memory refers to the main mem-
ory part that is altered by commands such as new, delete
and heap data assignments. The dynamic memory contains
heaps (see deﬁnition 2.1). Let us ﬁrst review a few important
deﬁnitions and discuss issues with heaps afterwards.
Jones et al. [1] deﬁne a heap as a contiguous subscripted
datastructure, and also, alternatively, as an organised graph
of “discontiguous blocks of contiguous words”. All allocated
memory cells have a reference and the liveness of a cell is
deﬁned by its reachability. The liveness is independent from
the program statement that creates a dynamic memory cell.
Reynolds [2] deﬁnes heaps (not to be mixed up with a
single heap) as the union of all mappings of address subsets
to non-empty value cells. Following this deﬁnition a single
heap would be some addresses pointing to some arbitrary
data structure. Reynolds mentions his intention goes back
to Burstall’s model [3]. Both refer to trees as implied data
structure - which, at least in Burstall’s proposition, denotes a
simple heap graph (deﬁnition 2.2 formally introduces it, for
the moment let us assume it is an arbitrary graph where edges
represent some relationship between heap vertices) as for
instance the expression x
a1,a2,a3/ y denotes some path within
the heap graph in Fig. 1. The graph starts at x and stops at
a heap cell which is also pointed by some local variable y
by visiting a1, a2, a3, which all may have some unspeciﬁed
content on its way there. Reynolds introduces the “⋆”-operator
for expressing that two heaps do not share common dynamic
memory regions. In contrast to Burstall Reynolds’ model
is slightly different: all except the start of a path from a
stacked variable denotes its value rather its cell location. As
shown in the graph in Fig. 2 by convention it is agreed that
stacked variables, such as x1, only have outgoing edges, where
all other vertices, such as x2, x3, x4, x5, x6, x7, denote some
concrete heap cell values and may have zero or more incoming
and zero or more outgoing edges.
If we like to parameterise a heap graph so it contained gen-
uine symbolic variables, we rather have to distinguish between
parameterised and ﬁxed variable meanings on each veriﬁcation
step. Reynolds introduces the “,”-operator to specify paths in
heap graphs. For example, when using “,” the above data-
structure could be fully speciﬁed by x1 7→ x2, x3, x4, x7 ∧
x5 7→ x6, x7. For comparison, the same data structure without
the path-operator “,” would be (x2 7→ x3 ⋆ x4 7→ x7 ⋆ x5 7→
x6) ∧ (x1 7→ x2 ⋆ x3 7→ x4 ⋆ x6 7→ x7) – we excuse
ourselves variable locations and content were mixed up in this
example for the sake of simplicity. Based on the “⋆”-operator
x
/ a1
/ a2
/ a3
/ a4
/ a5
`
u
O
y
O
Fig. 1. An arbitrary annotated heap graph with locals x, u and y pointing to
cells with some content a1, a3 and a4
1
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

x3
/ x4
!
x1
/ x2
=
x5
/ x6
/ x7
Fig. 2.
Heap graph sample consisting of two simply linked lists forming
inverted cactuses
and “7→” the so-called Separation Logic was proposed [2],[4]
and implemented [5]. The following example [2] demonstrates
the deﬁnition of a binary tree predicate (we call a predicate
“abstract” whenever it depends on parameters):
tree(l) ::= nil | ∃x.∃y : l 7→ x, y ⋆ tree(x) ⋆ tree(y)
The abstraction parameter l in Fig. 3 is some variable
symbol and tree denotes the recursively deﬁned predicate
implying the left branch does not intersect with any part of the
right branch, and vice versa. However, strictly speaking this
must not always be the case, since in the above speciﬁcation
tree(y) might be substituted by tree2(x, y), which could
hypothetically link back to x again and so would breach the
convention made previously – luckily, this can be excluded
in most cases, except when references to dynamic memory
are determined on runtime. For example, p[13+offset]
where offset is decidable on runtime only might be such
a scenario. The breach may be avoided for tree2 just by not
passing x neither recalling it globally. Even if the tree entirely
ﬁts into dynamic memory, remember x and y get stacked
once the tree is traversed: ﬁrst x, then y is accommodated at
the next available address because of “,”. The authors of this
paper are aware of dropping unbound heap memory access
may induce considerable practical restrictions, however, we
think this restriction can in many cases be overcome by a
modiﬁcation to the chosen data model.
By convention, whenever a vertex of the heap graph has
at most one outgoing edge, the heap graph is simple, e.g.
linearly-linked lists, trees and arbitrary heap graphs without
multiple edges between two vertices. W.l.o.g. we consider only
pointers that refer to particular heap cells or class objects that
may union several pointers to heap cells. We will further also
consider abstract predicates. In order to decide whether two
heaps indeed do not share a common heap, it is necessary to
check there exists no path from one heap graph to the other.
One alternative to Separation Logic is Shape Analysis [6].
It makes use of transfer functions in order to describe changes
to the heap by every program statement. Another approach, as
being demonstrated by Baby Modula 3 [7], uses a class-free
l
/
&
x
“,”

/ ...
y
/ ..._S
_OO
Fig. 3. Heap graph instance for the deﬁnition of a binary tree. The left x
child points to some content which may not interfere with the content pointed
to by y
object calculus and a single unique result register. This register
stores the result after each single statement and so allows to
refer to the state before and after running a particular state-
ment. Class-objects and their typeable theories are discussed
in [8],[7].
At this point it is worth noting that a points-to model is
considered in this paper due to its locality property w.r.t. heap
graphs, modiﬁcations do not usually require a full speciﬁcation
update due to its edge-based graph representation.
The inspiration for this paper, even if coming from a
different context, is [9], where a rather intuitive but incomplete
set of ”safe“ symmetry operations on pointers is proposed in
order to prove correctness of more complex pointer manipu-
lations. Safe operations, as rotation or shift, raise big practical
concerns as hard-to predict pointer behaviour even on very
small modiﬁcations as well as incompleteness gaps on pointer
rotations.
The main purpose of this paper is to present two new
context-free binary operations for heap conjunction and heap
disjunction, to show group properties hold and those can be
used for example for proof simpliﬁcations on proof rules in
the future.
Section I of this paper gave a brief overview of the topic
and related problems. Section II introduces brieﬂy Separation
Logic, it introduces a concluded deﬁnition of heap and heap
graph, and it comes with conventions for class objects and
heap memory alignment. The main part, section III deﬁnes
heap terms to be interpreted within heap formulae. Pointers
of pointers and arrays are only very brieﬂy discussed, heap
conjunction is introduced for basic (”heaplet“) and generalised
heaps (what is later expressed as heap term) as well as path
accessors (see observation 3.6). Properties of the conjunction
are investigated and established, canonisation steps are demon-
strated in order to overcome transient inconsistency, which
may occur from references no more alive. Heap inversion
is proposed as notational trick. In companion with other
properties it may eventually help to deﬁne equalities over
heaps and so improve the comparison with expected heaps in
the future. In particular, deﬁning a partially-ordered set over
conjunct heaps w.r.t. sub-graph inclusion, and distributivity
along with other properties would eventually help to deﬁne
for instance a satisﬁability-modulo-theory. Partial speciﬁcation
is introduced in section IV for objects. Discussions propose
an extension with aliases to the Object Constraint Language.
Finally, conclusions follow a short discussion.
II. HEAP SEPARATING LOGIC
Before going into more detail, let us ﬁrst ask whether we
cannot simply turn all dynamically allocated variables into
stacked, as it was proposed, for instance, by [10]. Often this
will indeed work, however, sometimes it is not a good idea
after all, because of performance issues [11], for instance.
More often the nature of the problem forbids general static
assumptions on stack bounds. An overview and numerous
deﬁnitions of dynamic memory may be found in [1].
2
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

The essence of Reynolds’ heap model and properties was
brieﬂy wrapped up in the previous section. So, one central
problem seems to be expressibility, which is the main purpose
of this paper. This section introduces a heap by referring to a
graph, followed by numerous model discussions and property
observations.
Deﬁnition 2.1. (concluded from Reynolds) A heap is deﬁned
as S
A⊆Addr A 7→ V aln with n ≥ 1, A being some address
set and V al is some value domain, for instance, integers or
inductively deﬁned structures containing A. A heap may be
composed inductively by other heaps as following:
H1 ⋆ H2, where H1 describes some heap graph assertion
H1 = (V1, E1) and in analogy to that H2 = (V2, E2), where
edges E = V × V and edges are directed, s.t. iff ∀v1 ∈ V1,
v2 ∈ V2 with v1 ̸= v2 and cases:
1st (Separation): (v1, v2) /∈ E1, and (v1, v2) /∈ E2.
2nd (Conjunction): ∃s ∈ V1, ∃t ∈ V2 : (s, t) ∈ E1 or (s, t) ∈
E2 then H1 or H2 contains some ⋆-separated s 7→ t.
Variables as well as pointers are stored in the stack, where
the content pointed to remains in heap memory (the following
domain equation [5] holds: Stack = V alues ∪ Locals).
Heap graph assertions are assertions about the heap graph
constructed by program statements manipulating the dynamic
memory. Those assertions are interpreted as true or false
depending on whether an associated concrete heap corresponds
or not. Deﬁnition 3.2 will introduce the syntax for heap
assertions.
Regarding deﬁnition 2.1 the overloading of the binary
operator ”⋆“ happens in two ways: one is to express two
heaps do not overlap, and the second way is to express
two heaps are somehow linked together by using transient
symbols. The ”⋆“-operator is a logical and spatial conjunction,
it links two prepositions about heaps together and it describes
heap entities which have some conﬁguration in space, both
consume different dynamic memory regions. On the one hand,
if we link strictly two separate heaps then we have to ﬁnd a
maximal matching in order to describe the given heap graph
entirely, which is impractical. On the other hand, separation
also seems to be a very elegant way to separate speciﬁcation
concerns locally: if there is an assertion regarding a particular
data structure in heap, this should involve at most only that
data structures and exclude unaffected ones. After all, the
above initial deﬁnition seems complicated enough, because it
is ambiguous and it refers to a single heap deﬁnition, which
should ideally not be too different from Reynolds’ initial and
rather intuitive deﬁnition of heaps – but as we have seen
unfortunately, it is. So, two strict operators would be desired
rather a single ”⋆“, one operator to strictly separate and one
to join heaps. Heaps shall be replaceable with symbolic place-
holders in order to beat ambiguity whilst analysing veriﬁcation
conditions. Moreover, syntax and semantic intention of heap
expressions shall be uniﬁed.
Once both heap operators are deﬁned, properties and equiv-
alences can be established separately. Finally, heap theories
and term algebras may eventually be proposed in future over
both heap operators. In deﬁnition 2.2 we ﬁrst need to formally
deﬁne what a heap actually is.
The underpinning theory behind [3] is the so-called Sub-
structural Logic [12], which is a higher-order logic, a logic
where, for instance, the contraction rule does no more hold,
constants have in fact turned into predicates that may be
quantiﬁed (details can be found in [12]). Contraction-freeness
[13] in this context has for our purpose the advantage of non-
repeating heap entities within a heap assertion. By repeating
we directly refer to points-to expressions as deﬁned later.
Deﬁnition 2.2. A (ﬁnite) heap graph is a directed connected
graph within the dynamic memory section which may contain
cycles, but must remain simple. Each vertex has a type-
dependent size and an unique memory address, but may not
overlap with other vertices. Every edge represents a relation-
ship, for instance, a pointer to some absolute memory address
or a relative jump ﬁeld displacement.
The absolute addresses are out of interest to the veriﬁcation.
The heap graph must be pointed by at least one stacked
variable, otherwise the so-deﬁned graph is considered as
garbage. Stacked variables may also point to one vertex, in
this case all except one variable are aliases of the variable
considered.
The emphasis lies on ﬁnite, since only arbitrary big but
ﬁnite address space shall be considered. The dynamic memory
shall be linearly addressable, however some operations new
and delete shall organise themselves how and where to
allocate or free heap memory. We restrict ourselves pointers
address correctly and sound, and for the purpose of this
paper we neither care too much about an optimal memory
coalescing strategy to pointers that is most likely expanded on
runtime, nor primarily about garbage collection issues. What
we concern about is only that there is a relationship between
a pointer and a pointed-by region within the heap memory
region, it does not even require a pointer contains an absolute
address within the dynamic memory range as it is not the
case with bi-directional XOR-calculated jump-ﬁelds, which
are relative pointer offsets depending on the address provided
”somehow“ by an actual vertex address.
Conventions 2.3. Objects are restricted w.l.o.g. to be
a) non-inner objects only. Inner objects may always be
modelled as with associated outer objects, so that there
a)
b)
Fig. 4. Schematic heap graph a) without direction, b) midpoints represent the
substituted graph obtained by encoding source and destination vertices
3
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

are references to different locations rather than all objects
being accommodated within one contiguous heap chunk.
b) Object ﬁelds and method names have to be all unique
w.r.t. to its visibility. W.l.o.g. clashing names, for instance
inherited names, are resolved by mangling the origin
name with visibility mode and information from the
deriving class. All references to mangled names need to
be taken into account. This task is primarily done during
the semantic program analysis phase.
c) Due to encapsulation, objects do not grow in size nor-
mally, and due to late binding object references may
keep invariant. However, the size of an object may
spontaneously change. Sub-class objects may suddenly
grow, but they may also shrink, depending on whether
the translating compilation phase does align memory
for non-used ﬁelds or not. If choosing a forced stack-
allocated memory alignment for objects, then an object
which is bound lately and passed alone to some procedure
may better be reordered within its memory chunk, s.t.
the growing part rises upwards on the stack. Because
the separating heap are non-contractive [3], object ﬁelds
speciﬁed once may not appear again within a conjuncted
heap expression.
d) Arrays as base type are currently ignored. Multiple edges
between the same two vertices are disallowed.
e) Sharing of same heap cells by multiple cells is allowed
to all object ﬁelds.
In order to stay consistent with the following deﬁnitions, a
simple check for the incidence relationship for memory cells
for a given heap graph needs to be introduced. A given heap
graph is composed of points-to heaplets meaning a directed
edge represents a location points to a heap address which
contains some value. The check requires all these heaplet con-
juncts are traversed and the desired heap graph shall be in an
edge-centric representation. However, whenever we like to de-
termine if two heap vertices are incident with each other or not,
we prefer a vertex-centric model encoding edges. So, we deﬁne
the following built-in predicates: reaches(x,y), reach-
es(x,Y), reaches(X,y), reaches(X,Y), where x is
a vertex and X denotes a vertex subset of a given heap graph
(y, Y in analogy).
Both interleaved representations in Fig. 4 (the vertex-centric
representation is marked by smaller ﬁlled midpoints on every
edge) are dual and convertible to each other. Midpoints encode
source and destination as one vertex and link with former
neighbouring vertices. Naturally, this mapping is bijective
(proof skipped). Since we in general need to interpret predi-
cates of at least ﬁrst order, we could do this now by describing
one heap graph by one conjunction of ”loc 7→ val“ pairs rather
than more complex forms.
Conventions 2.4. (Heap Alignment) Object ﬁelds do not
overlap, ﬁelds have distinguishing memory addresses. Pointers
to objects and its ﬁelds may alias. An object is expressed com-
monly by the points-to expression x 7→ object(fld1, fld2, ...).
It is agreed w.l.o.g. that object ﬁelds may not be accessed via
arithmetic displacements but only by a valid object access path
using the ”.“-operator and valid subordinate ﬁelds. W.l.o.g,
but still for the sake of full computability late binding is
skipped. A full support would imply the use of only the weakest
common heap to be chosen.
III. CONJUNCTION AND DISJUNCTION
Because of deﬁnitions 2.1, 2.2 and conventions 2.3, 2.4 we
describe a heap now by a term as following.
Deﬁnition 3.1. A heap term describes heap graphs and is
syntactically deﬁned as:
T ::=
loc 7→ val
... points-to heaplet
| T ◦ T
... heap conjunction
| T ∥ T
... heap disjunction
| true | false | emp
... partial heap spec
| ( T )
... subterm expression
where loc denotes a variable location, a location of a
compound object ﬁeld or a symbol representing some heap
variable, and val denotes some value of any arbitrary domain.
T describes the current heap state.
T can be considered as a formula since we do not restrict
ourselves in not considering variable scopes as long as the
syntax deﬁnition is obeyed. We further agree on that ◦ has
lower precedence than ∥, so a1◦a2∥a3 ≡ (a1◦a2)∥a3. For the
sake of notational simplicity, we do refer to loc 7→ val, which
besides is closer to Reynolds’ deﬁnition rather than Burstall’s.
However, we really should better refer in practice to the
address of the content being pointed to rather than the direct
domain value, which naturally may be composed. Hence,
we agree without any further notice on some polymorphic
notational helpers, like address(val), which will allow us to
address given values.
true implies certain (remaining) heap term(s) is a tautology,
regardless of the actual term(s). In analogy to that stands
false, which implements a contradiction. emp is a constant
built-in predicate implying a given heap must be empty to be
satisﬁable. This is why all three may be used to consume all
not explicitly listed ◦-conjuncted heaplets. The partial speciﬁ-
cation we get allows us to keep heap formulae simple, since we
now may implicitly include all unaffected, but still intended,
heaps belonging together. Partial speciﬁcations together with
abstract predicates raise modularity. This becomes particularly
of interest for class objects, where all ﬁeld heaplets generate
its own heaplet scope, which is different from the global non-
object scope (see convention 2.4). In fact we just discussed
extensions to our heap term deﬁnition, which ought to be
summarised:
Deﬁnition 3.2. Extended heap terms ET are heap terms with
constant formulae, negation and logical conjuncts:
ET ::=
T
... heap term
| p(α)
... abstract predicate call
|¬ET
... logical negation
| ET ∧ ET
... logical conjunction
| ET ∨ ET
... logical disjunction
4
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

The logical conjunctions do not really require more ex-
planations than already said. A predicate call to a previ-
ously deﬁned predicate may invoke all dependent subcalls,
although predicate calls are not classic procedure calls. An
brief introduction of Prolog using predicates and reasoning a
speciﬁc Hoare-calculus may be found in [14]. Predicates may
be parameterised by zero or more heap terms bound to the
predicate. Heap terms may be used as input or output terms,
or even both at the same time. Intentionally, heap terms are
used as sub-expressions in logical assertions. The veriﬁcation
of a predicate retrieves a Boolean value depending on if a
given formula is obeyed.
Observation 3.3. Pointers of pointers are syntactic sugar.
They do not fundamentally extend the expressibility of heap
graph assertions. Their only purpose w.r.t. heap terms is to
have an additional indirection level for increased program-
ming language ﬂexibility. They act as placeholder or symbol
variable for pointer locations.
By pointers of pointers neither the heap graph itself gets
extended nor the referenced heap in comparison with no
pointers of pointers. Symbolic variables and placeholders are
useful, because they may select numerous heaplets at once.
But, the ”,“-operator can do this already for linearly-linked
lists and this operator was found superﬁcial in terms of
expressibility. In addition to that, it should be noted, that
abstract predicates may also perform a selection of numerous
heap cells. Although not too useful in a theoretic manner, the
above conjecture does not necessarily exclude usability gains
in practice.
Deﬁnition 3.4. Heap conjunction H ◦ α 7→ β is deﬁned
as heap graph, where G = (V, E) is H’s heap graph
representation, H is a heap graph, and α 7→ β is a points-to
heaplet:







(V ∪ {α, β} ∪ β′,
if isFreeIn(α, H)
E ∪ {(α, β)} ∪ {(β, b)|b ∈ β′})
if H = emp
(V = E = ∅)
false
otherwise
where β′ = vertices(β) ⊆ V determines all heap graph
vertices being directly pointed by β, which in case β is an
object includes all of the ﬁelds pointing to some vertices. Since
α must be a unique location (for instance an object access
path) there may be only either one or no heap vertex matching
in isFreeIn for a given heap H. The assumption is there is
always exactly one matching free vertex for conjunction when
building up a heap graph from a scratch, otherwise two heaps
are not linkable.
Lets say we would like to join three points-to pairs a, b, c
together (see Fig. 5). First, a must be expressed either purely
by a itself or by emp ◦ a. Only then b might be connected to
a, iff additionally a contains actually a matching destination
vertex that is not being assigned elsewhere. Once we have a◦b,
only then the edge c may be connected as announced in the
previous step, and we ﬁnally obtain the heap graph as seen in
◦
a
/ ◦

◦
c
/ ◦
◦
b
/ ◦
O
◦
a
/ ◦
b
/ ◦
c
/ ◦
heap graph before ...
and after conjunction
Fig. 5. Heap graph before and after heap conjunction.
Fig. 5. Since we may also conjunct any kind of graphs, e.g.,
binary trees, we allow to vary the conjunction ordering as long
as the resulting graph is connected. For instance, a 7→ 5 would
be a valid heap conjunction, but a 7→ 5 ◦ b 7→ 5 would be not.
Notice that this way we still may express aliases if we want,
for instance the heap graph x ◦
/ ◦z
◦ y
o
could be
expressed as heap term x 7→ z ◦ y 7→ z.
In Fig. 5 all source and target vertices are simple and not
annotated. In general the vertices may naturally be simple or
compound in case of objects. For the sake of simplicity, only a
one-to-one connection is considered further, however assigning
multiple objects to ﬁelds at once might be a very convenient
method as long as the assignment is unambiguous, especially
when it comes to arrays where a separator might be needed.
Remark: Let Φ0 be some heap, then Φ = Φ0 ◦ a0 7→ b0 ⇔
∃(am 7→ bm) ∈ Φ0∧(am = a0, bm ̸= b0∨am ̸= a0, bm = b0).
Theorem 3.5. H1 ◦ H2 conjuncts two heaps H1 and H2, if
there exists at least one common vertex in each heap graph
representations. It is agreed by convention H1 ◦emp = emp◦
H1 = H1 holds.
Proof. This theorem is actually a generalisation of deﬁnition
3.4. In contrast to deﬁnition 3.4, the term on the right-hand side
of the generalisation of ◦ is searched for a matching vertex.
H1 ◦ H2 represents one connected heap graph. Both, H1 and
H2 may either be heaplet or a composition of heaplets of
kind a1 7→ b1 ◦ a2 7→ b2 ◦ · · · ◦ an 7→ bn. In order to show
the correctness of the theorem ﬁrst we need to show is that
if there is no common element in both heap graphs, then by
deﬁnition 3.4 we obtain false, which corresponds to what
we would obtain from a conjunction. Otherwise, if we do
have at least one common element, then inductively we do not
bother about further common elements. So, we link both heap
graphs up and the conjunction on heaps refers to connectible
heaps. Further common elements would meld existing heap
graph edges, the melded graph still is simply linked (but with
multiple bridges), otherwise this would mean at least source
or target of a melded heap graph edge would exclusively be
either in H1 or in H2, and in both H1 and H2 at the same time,
which is a contradiction, hence we just showed the theorem
holds.
Regarding the search for a matching element the a ◦ a-
decider mentioned later will resolve this practical issue.
Observation 3.6. In an abstract predicate locations may be
symbols. In order to increase reuse of abstract predicates for
5
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

different locations and different location kinds (primarily for
locals and object ﬁelds) it is agreed, that the ﬁeld accessor
”.“ is a left-associative binary operator.
Left-associativity means object1.field1.field2.field3 is
internally represented by (((object1).field1).field2).field3.
This way object access paths may be substituted by variable
symbols, which raise modularity and ﬂexibility of access paths
expressions.
Lemma 3.7. G = (Ω, ◦) is a monoid, where Ω denotes the
set of heap graphs and ◦ denotes heap conjunction.
Proof. In order to prove G is a monoid we need to show (i) Ω
is closed under ◦, (ii) ◦ is associative, and (iii) ∃ε ∈ Ω.∀m ∈
Ω : m ◦ ε = ε ◦ m = m.
First of all, by ω ∈ Ω we refer to a connected heap
graph over ”7→“-heaplets as being introduced in deﬁnition 3.1.
According to deﬁnition 3.4 ∀ω ∈ Ω : ω ◦ ω = false, which is
deﬁned. Alternatively, there may be only two cases for some
ω1, ω2 ∈ Ω: if ω1 and ω2 do have at least one joining vertex,
then according to theorem 3.5 the resulting heap graph is well-
deﬁned, otherwise the result is false (meaning ω1 and ω2
are disjoint). This way we have just shown that Ω is closed
under ◦ and that a ”meaningful“ heap graph conjunct may
be obtained by connectible heap graphs. The connection is
established successively.
Second, associativity needs to be demonstrated, namely that
m1 ◦ (m2 ◦ m3) = (m1 ◦ m2) ◦ m3 holds. When looking at
Fig. 5 we can immediately see the validity of both directions
of the equation, because it does not matter whether a and b
are joined ﬁrst, or a is connected to connected b ◦ c, since the
joining vertex of b remains invariant when altering the connect
ordering.
Now G forms a semi-group, we still need to show there
always exists some neutral element ε, so (iii) holds. This
follows, however, immediately from the generalised heap
theorem 3.5.
Remark: From (i) follows that c ̸∈ b ∧ c ̸= a: a 7→ b ◦
c 7→ d ≡ false, and that a 7→ b ◦ a 7→ d ≡ false holds.
Furthermore, it is intuitively clear that connecting two heap
graphs may be done using different joining vertices, regardless
of which joints are connected ﬁrst. The resulting heap graph
shall be the same due to conﬂuence, due to (ii) and, moreover,
due to the property being demonstrated later in deﬁnition 3.8.
Remark: Closeness (i) demonstrates the non-repetitiveness
property of a Substructural Logic (the Separation Logic as still
to be shown later) remains.
Theorem 3.8. G = (Ω, ◦) is an Abelian group.
Proof. Due to lemma 3.7, G is a monoid; hence we still need
to show (i) the existence of an inverse element for every heap
graph, s.t.
∀ω ∈ Ω.∃ω−1 ∈ Ω : ω ◦ ω−1 = ω−1 ◦ ω = ε
(1)
and (ii) ◦ is commutative.
Let us start to prove the induction with (ii): for the base case
”loc1 7→ var1◦loc2 7→ var2 = loc2 7→ var2◦loc1 7→ var1“ of
deﬁnition 3.1 the equivalence holds obviously. The inductive
case holds also as long as the conditions on ◦ are obeyed,
the proof induction can be deduced from Fig. 5, implying
commutativity holds for arbitrarily connected heaps. However,
when it comes to abstract predicate, the boundaries of a ◦-
connected heap graph term may vanish. This needs to be taken
into consideration by whoever writes the speciﬁcation.
Now, let us proceed with (i). We do have the problem of
ﬁnding an inverse for whatever heap we get. The question what
it means particularly raises immediately. If we think about
natural numbers as operating carrier set and an attempt to
invert addition, we factually introduce subtraction on integers.
The same happens to complex numbers as an extension of
real numbers. Nobody really is not able to count imaginary
numbers in practice. Nevertheless, this extension seem to
simplify basic calculations signiﬁcantly in applications. So,
why not assume for the moment and postulate equation (1)
right until found different?
And so, what does it intuitively mean ”to negate a heap“
? One could think of negating a points-to predicate affects
only the state or that there is just no such heap reference.
However, it does not really undo a heap reference after all.
A hypothetical ”not-points-to“ requires primarily some kind
of a ”transcendental heap removal“ – at the ﬁrst glance this
may indeed sound like a delicate problem, because up to now
we were only specifying what is in the heap. We shall also
be able to specify what is not in, but we had no chance
whatsoever to specify a predicate which states some heap must
be removed ”somehow“. Let us not bother about it too much
for the moment and focus instead only on equation (1). What
this equation actually states is a negated points-to a ̸7→ b rela-
tionship, or more generalised some negated heap H−1, s.t. by
convention a 7→ b ◦ a ̸7→ b = emp and a ̸7→ b ◦ a 7→ b = emp,
and more general: H ◦ H−1 = H−1 ◦ H = emp. This means
ω ◦ ω−1 removes a heap, and in fact it is an edge removal in
addition to an optional heap graph vertex removal in case there
are no more edges going to/leaving from the corresponding
heap vertex. It is now easy to see why H ◦ H−1 ◦ H ≡ H
holds. For demonstration let us have a look at Fig. 6. The heap
states before inversion d 7→ a ◦ a 7→ b ◦ c 7→ b, when applied
◦(a 7→ b)−1 we obtain d 7→ a ◦ a 7→ b ◦ c 7→ b ◦ (a 7→ b)−1
equals d 7→ a ◦ a 7→ b ◦ (a 7→ b)−1 ◦ c 7→ b equals
d 7→ a ◦ c 7→ b, which may not occur quite plausible at the
ﬁrst view yet, because both pointers do not interfere. Therefore
it is required to perform one generic step.
Canonization step I: If a bridge is removed from between
sub-heap graphs, then the conjunction needs to be replaced by
a heap disjunction.
For the example a bridge is detected between a and b, so ◦
may be substituted by ∥ in the remaining heap term, and so the
result appears plausible again. But for sake of completeness
heap graph vertices may need to be removed even completely.
This becomes urgent especially when it comes to object ﬁeld
locations.
6
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

a
/ b
d
O
c
O
conjunct:
(a 7→ b)−1
=⇒
a
( b
d
O
c
O
⇔
a
b
d
O
c
O
Fig. 6. Heap graph before and after inversion
Canonization step II: Remove some heap graph vertex a
entirely whenever there are no more references to it.
Applying those two canonization steps keeps the chosen
model sound and conﬂuent (proof skipped here).
Remark: We did not mention heap generalisations explic-
itly in the previous paragraphs, although it remains to the
reader to prove correctness of H ◦ H−1 ≡ emp (proof by
induction over ◦, use the fact that (g1 ◦ g2)−1 ≡ g−1
1
◦ g−1
2
holds, so there exists a homomorphism for .−1 w.r.t. ◦, refer
to lemma 3.9).
Convention: Condition (i) implies particularly emp ◦
emp−1 ≡ emp, because we agree on emp−1 ≡ emp.
Subsumption: H ◦ a 7→ b ◦ (a 7→ b)−1 denotes:
1) unlink edge between a and b
2) unlink/remove a if there are no more uses in H
3) unlink/remove b as well if no more uses in H
The group properties allow us to deﬁne equalities for the
separated heap theory. This will allow us, for instance, to
deﬁne arithmetic equalities, which applied will cause faster
convergence to a normalised heap representation. It will lower
the risk of highly bloated veriﬁcation rules and conclusively
it will lead us to a smaller logic in combination with partial
speciﬁcation (see section IV). Future work may include heap
arithmetics to be implemented by satisﬁability-modulo-theory
solvers, which will be integrated to the veriﬁcation process.
This approach does not only sound promising, but in fact it
was successfully proven concept in several different areas,
particularly for bloated and notoriously incomplete Hoare
logics.
Lemma 3.9. (g1 ◦ g2)−1 ≡ g−1
1
◦ g−1
2
holds for any heaplets
g1 and g2.
Proof. Lets generalise this lemma, let G = g1◦g2◦· · ·◦gn, we
need to show G◦G−1 = emp. This can be shown by induction
over n. In the base case (n = 1) we have g1 ◦ g−1
1
≡ emp,
which holds because of the existence of an inverse. For the
inductive step let G = (g1 ◦ g2 ◦ · · · ◦ gk)
|
{z
}
Gk
◦gk+1, then G ◦
G−1 = (Gk ◦ gk+1) ◦ (Gk ◦ gk+1)−1 denotes in the inverse
part a graph extension. The right part of this equation equals
Gk ◦ G−1
k
|
{z
}
emp
◦ gk+1 ◦ g−1
k+1
|
{z
}
emp
≡
emp (because of the inductive
inversion property).
Deﬁnition 3.10. Heap disjunction H ∥ a 7→ b deﬁnes heap H
and heaplet a 7→ b which do not interfere, iff GH is the heap
graph of H, GH = (V, E), and for all edges ( , a) ̸∈ E and
there exists no path from b to H, and there is no path back
from H to a.
That is why x.b ∥ x.c does not hold for any object x with
ﬁelds b and c, if there exists at least one common vertex on
any path from x.b or from x.c.
Let Σ = X0∥X1∥ · · · ∥Xn with n > 0 and Xj is of form
xj 7→ yj, then Σ = Σ0 ∥ a0 7→ b0 ⇔ ∀(aj 7→ bj) ∈ Σ0 :
aj ̸= a0 ∧ bj ̸= b0.
Theorem 3.11. G = (Ω, ∥) is a monoid and a group, if Ω is
the set of heap graphs and ∥ denotes heap disjunction.
Proof. In analogy to the previous lemma, ﬁrst of all,
∀m1, m2 ∈ Ω : m1∥m2, iff m1 and m2 have no common
joint, which is the case whenever there is no path from m1 to
m2, and there is not even an indirect heap graph surrounding
both m1 and m2. If m1 and m2 are different, then m1∥m2
must be a valid heap ∈ Ω again, because m1 is from a
different heap graph part than m2, and vice versa, so closeness
holds. Associativity holds obviously. emp may be chosen as
neutral element, so emp∥m1 = m1∥emp = m1, by default
let emp∥emp = emp hold. Last, we agree on the convention
s∥s−1 = s−1∥s = emp, which behaves similar to ◦. Heaps in
general obey this rule.
The heap-wise conjunction and disjunction may be ex-
pressed as following:
◦[B,C]
U ◦ B ∥ C
U ◦ B ◦ C
∥[B,C]
U ◦ B ◦ C
U ◦ B ∥ C
∥[B,C]; ◦[B,C]; ∥[B,C] ≡ ∥[B,C]
(2)
◦[B,C]; ∥[B,C]; ◦[B,C] ≡ ◦[B,C]
(3)
The operations ∥ and ◦ are dual and self-inverse as can be
seen from equations (2) and (3), where ”;“ is the statement
sequentializer. The equations do hold (direct proof, skipped
here), because of its self-inverse character and due to the
assertion that both speciﬁed heap vertices B and C, in fact,
exist.
Theorem 3.12. Distributivity holds for ∀a, b, c ∈ Ω for ◦ and
∥:
(i)
a ◦ (b∥c) = (a ◦ b)∥(a ◦ c)
(ii)
(b∥c) ◦ a = (b ◦ a)∥(c ◦ a)
Proof. (direct proof, skipped, take note of Fig. 7).
Remark: Since the neutral element for both operations,
◦ and ∥, is emp, there cannot be deﬁned a ﬁeld over both
operations, although lemma 3.7, theorem 3.8 and 3.12 hold,
and Ω is ﬁnite. Particular heaps would be ﬁnite. All operations
applied to ﬁnite heaps would be ﬁnite again.
Remark: In analogy to logical conjuncts ∧ and ∨ a
∥-normalform exists when the previous equalities are applied.
Lemma 3.9 can be applied for the inversion of generalised
heaps.
In order to optimize reasoning by minimizing graph size,
∥ should be moved upwards at most in heap terms, e.g., by
7
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

(∆ ∆∆)
G′′
1
G′
1
(∆ )
G′
2
(∆∆)
G1
(∆)
G2
( )
Fig. 7. A partially-ordered set (poset) can be deﬁned for heap graphs under
inclusion, the join operator is ◦.
applying distributivity rules or by reordering points-to heaps
so that the left-hand sides are ordered in lexicographical order
by its location. The motivation behind this is, for instance, to
optimize incremental veriﬁcation, so only affected heaps may
require re-calculations.
As seen in Fig. 7 a partially-ordered set can always be
deﬁned over inclusion of heap graphs. Despite there might
be an inﬁmum deﬁned as emp and some always existing
supremum, the complete heap graph, the structure is still not
a (complete) lattice due to non-holding connective properties
w.r.t. ∥ as meet for absorption. The poset G from Fig. 7
contains {G1, G2, G′
1, G′
2, G′′
1} and can be ordered by the
following ascending chains G1 ⊑ G′
1 ⊑ G′′
1, G2 ⊑ G′
1 and
G2 ⊑ G′
2 ⊑ G′′
1. The supremum is G′′
1, inf(G) = emp,
where ⊑ shall be deﬁned as the heap sub-graph relationship.
Obviously, if two heaps are not disjoint (this denotes emp
because of deﬁnition 3.4) they may always be connected with
each other in the corresponding Hasse-diagram. This join is
always valid because of (1st contradiction) a 7→ b ◦ a 7→ d
may not occur after a single heap conjunct, or any composite
heap in general (2nd contradiction) a 7→ b∥b 7→ d contradicts
the deﬁnition of ∥. However, it needs to be taken into consider-
ation that the inclusion-ordering mentioned may be destroyed
by applying inverse heaps if used arbitrarily (compare with
previous section), but those may usually, at least at the
moment, be used only in cases where a difference between
expected and actual heap graphs needs to be calculated rather
than a desired heap graph speciﬁcation, so the locality property
mentioned from section I remains untouched.
IV. PARTIAL HEAP SPECIFICATION
Having said earlier after deﬁnition 3.1 class objects may
be considered as containers of ﬁelds obj.f1 7→ .. ◦ obj.f2 7→
..◦obj.fn 7→ .., all ﬁelds constitute a scoped heap (in analogy
to single points-to local variables among abstract predicates).
Since class object ﬁelds may not exist independently from
other ﬁelds of the same class, they must by convention be ◦-
conjuncted. In contrast to locals, object ﬁelds too require a pos-
sibility to specify only parts, hence constants from deﬁnition
3.2 are parameterised to true(obj) or false(obj). Abstract
predicates modularise speciﬁcations, they can particularly be
used to specify objects from unrelated objects and locals. W.r.t.
the proposed stack-based implementation of a “a ◦ a”-decider
incoming and outgoing terms for abstract predicates may be
traced in order to skip re-verﬁciation of unaffected parts.
Deﬁnition 4.1. A partial heap speciﬁcation t(o) for some
object o is deﬁned as a ◦-conjunction of all remaining ﬁelds,
possibly none, that are not speciﬁed until t is used and unfold
in the current object scope. When t is used all actual ﬁelds
are unfold into the surrounding heap speciﬁcation, which are
not yet been speciﬁed in terms of the current scope of o.
Example 4.2. Lets say object a has three ﬁelds f1, g1 and
g2, and C[[]] denotes some (implicit) heap term denotation of
type (ET → ET) → {true, false}, where the ﬁrst extended
heap is supposed to be the expected and the second extended
heap is supposed to be the actual heap term then
C[[a.f1 7→ x ◦ true(a)]] =
C[[a.f1 ◦ a.g1 ◦ a.g2]]
=
C[[true(a) ◦ a.f1 7→ x]] ̸=
C[[p(a) ◦ a.f1 7→ x]]
where p is some abstract predicate denoting true(a). However,
C[[a.f1 7→ x ◦ p(a)]] would denote equality, because the stack-
oriented recognition ﬁnds all remaining ﬁelds even when
obfuscated beneath several predicate levels. C[[]] is a homo-
morphic mapping regarding ◦.
Example 4.3. C[[true(a) ◦ true(a)]] = C[[a.f1 ◦ a.g1 ◦ a.g2]]
◦ C[[true(a)]] = C[[a.f1 ◦ a.g1 ◦ a.g2]] ◦ emp(a).
V. DISCUSSIONS
By exchanging one ambiguous spatial heap operator by two
strict operations, the initial and core properties of a Sepa-
ration Logic did not change essentially, except an unbound
and arbitrary heap inversion as discussed in section IV. The
introduction of a strict normalform allows a linear and local
analysis of the heap terms without an eager comparison of still
non-matched conjuncts.
As mentioned in section III there arises the question of in-
consistency, whether in remote parts of the same speciﬁcation,
for instance, somewhere up or down relative to the current
abstract predicate calling stack, there are in fact two identical
heaplets or if there are any two pointers with the same location
multiple times. The reason beyond is non-repetitiveness.
This problem may be resolved in general only dynamically
during the veriﬁcation due to the undecidability of abstract
predicates due to the undecidability of the Halting-problem.
Hence a stack-based analysis for processing abstract pred-
icates is needed very similar to the operational semantics
provided by Warren [15] including processing of symbols and
back-references to the stack parameters, except that abstract
predicates require an adapted reasoning control (see [14]).
Applying Warren’s approach to strict heap conjunction and
disjunction will decide ∀a.a ◦ a. Because of ungrounded
symbols, a memoizer may not cope with global states in
abstract predicates.
Prolog is a general purpose logical programming language
[16]. We strongly believe Prolog may be used to reason
8
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

about extended heap terms and abstract predicates in order to
resolve key heap veriﬁcation problems, such as expressibility
restrictions [14]. One advantage of Prolog predicates over
classic one-way functions (as used in [4], for instance) is that
input and output terms may be considered as relation, unioning
exponentially many different combinations of input and output
vectors, skipping only those combinations where a relation is
not deﬁned. This is often the case when the corresponding
one-way function is either non-invertible, contains cuts or
arithmetic evaluations (e.g. by using the built-in predicate is).
There must be a strong correlation between input and output
vectors, s.t. a bijective mapping exists between both vectors
for the most common deﬁnition. Besides, Prolog predicates
containing cuts may always be rewritten w.l.o.g. cut-free.
Predicates containing is may be rewritten without as ground
term, e.g. a Church number, as long as it can be represented
as uniﬁable term, which is feasible even if not too elegantly.
The “Object Constraint Language” (OCL) [17] is a spec-
iﬁcation language for class-instantiated objects in companion
with the “Uniﬁed Modeling Language”. It implements a frag-
ment of the predicate logic, it supports some quantiﬁcation
of variables and supports collection types and ad-hoc poly-
morphism by sub-classing. It allows life-cycle speciﬁcation of
objects and class methods. However, OCL does not know of
pointer constraints like aliasing. If pointer constraints were
added to OCL and propagated down to code generation when
compiling user code, for instance, then code performance
could signiﬁcantly improve (compare with [14]). In com-
bination with abstract predicates the proposed modiﬁcation
of this paper may be used as proposition for an update of
the recent OCL recommendation w.r.t. the intrinsic points-
to model, particularly referring here to conventions 2.3, and
deﬁnitions 3.1 and 3.2. Presumably, this would also raise
expressibility, abstraction and higher modularity. Previous
attempts to demonstrate applications of Separation Logic to
Design Patterns can be found for instance in [4].
VI. CONCLUSIONS
At the beginning, the problem of verifying dynamic heap
was introduced. Related problems and the beneﬁt of the
heap separation model were provided. The description of
points-to assertions corresponds to heap-manipulating program
statements – in the chosen model the generated heap graph is
described edge-wise. The problem with the ⋆-operator was that
it may be used syntactically and semantically in two different
ways: for heap disjunction, but also for heap conjunction. This
caused the described issues. The introduction of two strict
heap operations allows heap terms to be interpreted simple. In
addition to this, partial object speciﬁcations make it promising
to understand and control better completeness w.r.t. incoming
heaps in heap formulae. Properties of both operations were
investigated and found restrictive, but still ﬂexible enough for
expressing arbitrary heap graphs. The integration of derived
rules to a SMT-solver requires further research. Finally an
extension of the current OCL was proposed.
ACKNOWLEDGEMENT
Some parts of this paper have been prepared within the
scope of project part of the state plan of the Board of Education
and Science of Russia (task # 2.136.2014/K).
REFERENCES
[1] R. Jones, A. Hosking, and E. Moss, The Garbage Collection Hand-
book: The Art of Automatic Memory Management, 1st ed. Chapman &
Hall/CRC Press, 2011.
[2] J. C. Reynolds, Separation Logic: A logic for shared mutable data
structures, in Lecture Notes in Computer Science, Springer, pp. 55–74,
2002.
[3] R. M. Burstall, Some techniques for proving correctness of programs
which alter data structures, in Machine Intelligence 7, B. Meltzer and
D. Michie (eds.), Edinburgh University Press, Scotland, pp. 23–50, 1972.
[4] M. Parkinson, Local reasoning for Java, Ph.D. thesis, Cambridge
University, England, 2005, 159p.
[5] J. Berdine, C. Calcagno, and P. W. O’Hearn, Smallfoot: Modular
automatic assertion checking with Separation Logic, in Lecture Notes
in Computer Science, Springer, pp. 115–137, 2005.
[6] M. Sagiv, T. Reps, and R. Wilhelm, Parametric shape analysis via 3-
valued logic, ACM Transactions of Programming Language Systems,
vol. 24(3), pp. 217–298, 2002.
[7] M. Abadi, Baby Modula-3 and a Theory of Object, Systems Research
Center, Digital Equipment Corporation, Technical Report, 1993.
ftp://gatekeeper.research.compaq.com/pub/DEC/SRC/research-
reports/abstracts/src-rr-095.html
[8] M. Abadi and K. R. M. Leino, A Logic of Object-Oriented Programs,
in TAPSOFT ’97: Proceedings of the 7th International Joint Confer-
ence CAAP/FASE on Theory and Practice of Software Development,
Springer, pp. 682–696, 1997.
[9] N. Suzuki, Analysis of Pointer ”Rotation”, Communications of the
ACM, vol. 25(5), pp. 330–335, 1982.
[10] B. Meyer, Proving pointer program properties - Part 1: Context and
overview, Part 2: The overall object structure, ETH Z¨urich, Journal of
Object Technology, 2003.
[11] A. W. Appel, Garbage collection can be faster than stack alloca-
tion, Information Processing Letters, vol. 25(4), pp. 275–279, 1987.
http://dx.doi.org/10.1016/0020-0190(87)90175-X
[12] K. Dosen, et. al, Substructural Logics, K. Dosen and P. Schroeder-
Heister (eds.) Clarendon Press, Oxford Science Publications, 1993, 386p.
[13] G. Restall, On logics without contraction,” Ph.D. thesis, Department of
Philosophy, University of Queensland, 1994, 278p.
[14] R. Haberland and S. Ivanovskiy, Dynamically allocated memory ver-
iﬁcation in object-oriented programs using Prolog, in Proceedings of
the 8th Spring/Summer Young Researchers’ Colloquium on Software
Engineering, A. Kamkin, A. Petrenko, and A. Terekhov (eds.), pp. 46–
50, 2014.
[15] D. H. Warren, Applied logic - its use and implementation as a program-
ming tool, SRI International, Menlo Park, California, USA, Technical
Report No. 290, 1983.
[16] L. Sterling and E. Shapiro, The Art of Prolog (2nd Edition): Advanced
Programming Techniques. MIT Press, Cambridge, Massachusetts, USA,
1994.
[17] Object Management Group (OMG), Object Constraint Language Spec-
iﬁcation, version 2.2, Feb 2010, http://www.omg.org/spec/OCL/2.2.
9
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-506-7
ADVCOMP 2016 : The Tenth International Conference on Advanced Engineering Computing and Applications in Sciences

