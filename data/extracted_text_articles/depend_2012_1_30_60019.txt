Dependable Design: Trade-Off Between the Homogeneity and Heterogeneity of
Functions and Resources
Jose Ignacio Aizpurua, E˜naut Muxika
Department of Signal Theory and Communications
University of Mondragon
Spain
{jiaizpurua,emuxika}@mondragon.edu
Abstract—Designing a dependable system by reducing costs
is a challenging issue. Traditional design strategies replicate
resources in order to improve fault-tolerant capabilities of the
system, which leads to increasing the hardware cost. Originated
from over-dimensioning decisions, we outline an approach to
identify and gather inherent compatible resources of the system
to accomplish equivalent functions. Inference of reconﬁguration
strategies from the inherent design redundancies of the system
not only decreases the hardware cost, but also maintains, or
even improves the dependability of the system.
Keywords-Dependable design, distributed and reconﬁgurable
systems, shared (quasi) redundancy.
I. INTRODUCTION
When designing a dependable system [1], redundancies
improve system safety and availability. However, the aggre-
gation of resources leads to higher costs and more failure
sources. Consequently, reliability decreases. Therefore, a
trade-off analysis between dependability and cost objectives
is necessary to design a dependable system.
In order to perform a function within distributed net-
worked control systems (NCSs), remote devices work in
cooperation. A sensor performs a measurement function and
sends it to a control algorithm through the network. The
control algorithm acts in consequence and sends actuation
commands to the remote actuator. Traditionally, sensors and
actuators accomplish a single function, while processing
units (PUs) handle multiple tasks. However, why not exploit
sensor and actuator strengths to perform as many functions
as they can?
Our design approach focus on NCSs operating under
massively networked scenarios, where a lot of PUs and
sensors are connected to a network for different purposes.
E.g., a train where the resources of each car are replicated
throughout the train cars or a building where room and ﬂoor
resources are replicated.
In this paper, we propose a system design approach for the
systematic identiﬁcation of replaceable functions including
those performed by sensors and actuators. To do so, the
physical location is the key driver. Subsequent steps allow
associating and deducing inherent design redundancies of the
system. This approach allows improving speciﬁcally system
availability and generally system dependability without ad-
ditional hardware cost.
The remainder of this paper is organised as follows: Sec-
tion II gives an overview of related research work. Section
III describes the generic functional modelling approach.
Section IV describes an overall reconﬁguration process for
designing a dependable system. Finally, Section V addresses
limitations and future objectives of our research.
II. BACKGROUND RESEARCH
This section is divided into two subsections: Subsection
II-A points out inspirations of our research and Subsection
II-B identiﬁes conceptually aligned works.
A. Research Inspiration
A straightforward way to add redundancies to a system
design is to explicitly replicate components. The objective
of the added resources is to provide failover capabilities to a
dedicated component failure. These replications are usually
done using passive and active redundancies.
Shared-redundancy [2] and quasi-redundancy [3] con-
cepts emerge from the utilization of components to compen-
sate for a failure, despite not being primarily used with this
objective. Replication of control functions over distributed
processing units (PUs) is done in such a way, that failed
functions are compensated using existing components. These
redundancies are implemented reconﬁguring the communi-
cation routes of the network and PUs.
Passive and active redundancies replicate the nominal
operation of the failed function and shared- and quasi-
redundancies make the failed function operate under de-
graded conditions. Note that shared- and quasi-redundancies
are a form of passive redundancies, i.e., they work only
when the primary resource fails.
In order to simplify the nomenclature, we name homo-
geneous resources those needed to perform passive/active
redundancies where the nominal operation is replicated and
heterogeneous resources those needed to perform shared-
/quasi-redundancies where failure of the nominal operation
is compensated (i.e., degraded operation).
13
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-212-7
DEPEND 2012 : The Fifth International Conference on Dependability

We reuse existing concepts grouping them to consider the
trade-off between the replication of resources and the reuse
of existing ones. Homogeneous resources lead to increasing
the hardware cost. However, the integration and implementa-
tion of these resources is not as difﬁcult as with the heteroge-
neous resources. The identiﬁcation of replaceable functions
and the adaptation of the existing architecture to beneﬁt
from compatibilities are the main challenges. Therefore, our
aim is to complement existing approaches with a method
to identify heterogeneous resources. This process enables a
systematic characterization of the replaceability properties of
the system, including those involving sensors and actuators.
B. Related Works
There is an increasing interest in automotive, avionics
and space industry for reusing existing hardware and/or
extracting system reconﬁguration behaviour.
DySCAS middleware [4] partially addresses our con-
siderations using a context-aware adaptation mechanism,
speciﬁed by execution and architecture aware contexts. The
former context uses distributed policies to detect deviations
and react, while the latter embeds meta-information of con-
ﬁguration reasoning (resource dependencies, QoS contracts,
compatibility, composability and dependability) within dy-
namically reconﬁgurable components. The approach deals
with task migrations to cope with hardware failures and
network balancing. A global node dynamically maintains for
the entire network the intentions of every node and decides
the possible conﬁgurations based on their requirements.
Each node locally performs admission control deciding if a
task is schedulable considering resource limitations (mem-
ory, CPU, bandwidth) and optimization of resources. The
middleware consolidates and disseminates the distributed
information.
Adler et al. [5] proposed a component-based modelling
and veriﬁcation method for adaptive embedded systems. The
approach aims at exploiting implicitly available redundan-
cies to react to system failures. It provides methodological
support for identifying and gathering reasonable system con-
ﬁgurations. To do so, each port of the functional component
is attached with a quality attribute (QA), which provides
means to connect compatible components. Based on QAs,
the adaptation behaviour of each component is determined
with the required qualities for activation (preconditions) and
inﬂuences on the provided qualities (postconditions). In or-
der to ensure the causality of the reconﬁguration sequences,
well-deﬁnedness properties are veriﬁed by using model-
checking and theorem proving techniques.
Integrated Modular Avionics (IMA) paradigm deﬁnes ro-
bust partitioning in onboard avionic systems so that one
computing module (Line Replaceable Unit (LRU)) is able
to execute one or more applications of different criticality
levels independently. The standardized generic hardware
modules forming a network leads to looser coupling between
hardware and software applications.
SCARLETT project [6] aims at designing reconﬁgurable
IMA architectures in order to mitigate the effect of failures
implementing functional and mitigation functions. Monitor-
ing and fault detection function aims at detecting com-
ponent failures. Once a permanent failure is detected, the
reconﬁguration supervisor manages the modiﬁcations of
conﬁgurations given the current conﬁguration and failed
module. Veriﬁcation activities check the correctness of the
system conﬁguration and the loaded data in the LRU. The
centralized supervisor determines a suitable conﬁguration
based on a reconﬁguration graph, which contains all pos-
sible conﬁgurations. Reconﬁguration policies and real-time
and resource constraints, deﬁne the set of reachable safe
transitions and states. In order to analyse the reconﬁguration
behaviour when failures occur, a safety model leads to
ﬁnding the combinations of functional failures. Based on
the same concepts, DIANA project [7] aims at distributing
these functionalities. This approach improves availability of
reconﬁguration mechanisms at the expenses of relying on a
complex, resource consuming communication protocol.
Based on the potential of the IMA paradigm as a means to
provide fault containment strategies, Montano and McDer-
mid [8] presented an autonomous dynamic reconﬁguration
system. Different information required for an effective dy-
namic reconﬁguration (task scheduling, hardware resources,
operating modes, mission objectives, faults and dependabil-
ity requirements) is gathered based on interactive Constraint
Satisfaction Problem theory. The approach divides hard con-
straints and soft constraints. While the former is compiled
off-line the latter can be added and retracted dynamically.
Additionally, human interaction is allowed by translating
his requirements into soft constraints and weighting the
reconﬁguration constraints so that higher priority decisions
can be controlled.
All these approaches address the integration of reconﬁg-
urability and dependability aspects. System reconﬁguration
requires being aware of the system health, its operating
modes as well as the behavioural and dependability re-
quirements. These tasks should be implemented in a (au-
tonomous) centralized or distributed supervisor and coordi-
nated by a communication algorithm. However, the system-
atic identiﬁcation of compatible resources has received scant
attention. Adler et al. [5] intuitively characterize the quality
attributes of the system components so that inter-component
compatibilities are identiﬁed. To the best of our knowledge,
no one is identifying and gathering replaceable resources
based on the physical location of hardware components. This
viewpoint may provide a useful systematic characterization
about the effect of placing components in determined places.
14
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-212-7
DEPEND 2012 : The Fifth International Conference on Dependability

III. GENERIC FUNCTIONAL DESIGN MODEL
The goal of this section is to formalize design concepts so
as to provide a systematic consideration of system functions,
resources and the relation between them. In order to identify
systematically compatible subfunctions, this model accounts
for the physical location early in the design phase. The
system is characterized in a top-down manner, parting from
a set of high-level (HL) functions (cf. Figure 1).
...
...
...
...
High-Level Function1
High-Level Function2
Main Function1
Main Function2
Physical LocationA
Physical LocationB
Physical LocationC
Subfunction4
Subfunction3
Subfunction2
Subfunction1
Res.3B
Res.3A
Res.2B
Res.2A
Res.1B
Res.1A
Impl.1A
(N)
Impl.1A
(D)
Impl.1B
(N)
Impl.2B
(N)
Impl.2A
(N)
...
Impl.3B
(FS)
Impl.3B
(N)
Impl.3A
(N)
Figure 1.
Generic Functional Design Model
Depending on the system HL functions, these are further
reﬁned into a set of main control functions (MFs). Our
design considerations focus on system reﬁnement from MFs
downwards to limit the scope of the analysis without losing
its generality. The physical location (PL) characterizes the
place in which these MFs are performed. A single MF
may cover different PLs or it may be replicated for each
PL (e.g., Temperature Control). A set of subfunctions (SFs)
deﬁne necessary and sufﬁcient means to perform the MFs.
Hence, the characterization of the system MFs is speciﬁed
as follows:
MainFunction.PhysicalLocation.Subfunction.Implementation
There may exist different versions of SF implementations
determined by the availability of resources. The resources
provide means to perform a SF using a set of hardware
resources, which may allocate software functions. Based on
the system means to perform the same SF with different re-
sources, we differ nominal, degraded and fail-safe versions.
The nominal (N) version, performs under initial functional
design characteristics. The set of Input (I), Control (C)
and Output (O) SF components necessary to perform the
nominal MF, in conjunction with the necessary resources to
address the system requirements, form the nominal design
conﬁguration.
When the I, C or O subfunction is lost due to the failure
of some resource, the conﬁguration to achieve an acceptable
outcome may have to change. There may be subfunctions,
which provide a degraded (D) but acceptable service, even
in presence of faults. Fail-safe (FS) versions emerge from
the need to cope with the insurmountable loss of resources,
which result in hazard occurrences. Predetermined solutions
should be deﬁned so as to avoid these situations.
According to this classiﬁcation, we deﬁne the con-
cept of compatible subfunctions. Two SFs are compati-
ble if their SFs match and they are within a compati-
ble PL. This compatibility would determine the accept-
able value for the produced outcome. The compatibility
of the PL depends upon the examined SF component.
The PL of each SF specify whether we are dealing with
a zone-level (e.g., Train.car.zone) or speciﬁc-level (e.g.,
Train.car.zone.location) SF. For I/O SFs performed within
the zone-level and depending on the I/O type itself, we con-
sider that the difference (if it exists) between the produced
outcomes of compatible subfunctions is acceptable (e.g.,
Temperature Control in adjacent compartments). However,
speciﬁc PLs, conﬁne the compatibility within a speciﬁc
physical space. Generally, output SFs are gathered within
this group, due to their speciﬁc actuation space. C subfunc-
tions, do not have an explicit dependency on the PL. They
are able to perform the C function provided it receives the
corresponding I values of the speciﬁc PL.
Emerging from these concepts, we make a comparison
between homogeneous and heterogeneous resources (cf. Ta-
ble I). To do so, we centre on the nominal MF conﬁguration
(cfg) and those which use homogeneous and heterogeneous
resources. Remember that since heterogeneous resources
focus on reusing distributed compatible resources, the MF
conﬁguration will vary from the nominal design implemen-
tation.
Table I
COMPARISON BETWEEN HETEROGENEOUS/HOMOGENEOUS
RESOURCES AND NOMINAL IMPLEMENTATION
Resources
SF
PL
I
C
O
cfg
Homogeneous
=
=
=
=
=
=
Heterogenous
=
≡
≡,=
≡,=
≡,=
≡
same(=); compatible(≡)
IV. RECONFIGURATION PROCESS
The process described throughout this section is based
on the application of the generic functional design model
(cf. Section III) to model, identify and gather compatibilities
and extract customized reconﬁguration mechanisms. We rely
on a running example in order to discuss and evaluate the
process.
A. Modelling Functions and Resources
The goal of the modelling process is to identify and gather
compatible functions performed with alternative resources.
The design model, makes these tasks possible, tracing from
system functions towards physically distributed implementa-
tions. For instance, consider the temperature control (MF1)
within a train car (cf. Figure 2).
15
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-212-7
DEPEND 2012 : The Fifth International Conference on Dependability

Car1
Zone A
Zone B
iCam
Sprinkler
Heat
Detector
Reference
Temperature
Heater
Sensor
Temperature
Car2
Open
Button
Valve
Open
Sensor
Close
Detector
Speaker
Zone A
Zone B
Figure 2.
Train Physical Topology
From MF1, temperature measurement, user’s temperature
reference, temperature control and heating SFs are charac-
terized (cf. Table II).
Table II
CHARACTERIZATION OF TRAIN CAR TEMPERATURE CONTROL
Main Function
PhysicalLocation
Subfunction
Implementation
Temperature
Control
Car1.ZoneA
MeasureTemp
SensorA
RefTemp
RefButtonA
TempControlAlgorithm
PID Control
Heating
HeaterA
Car1.ZoneB
MeasureTemp
SensorB
RefTemp
RefButtonB
TempControlAlgorithm
PID Control
Heating
HeaterB
If we proceed to model all functions, heterogeneous re-
sources are systematically identiﬁed. This process consist of
matching SF and PL tokens, in order to identify compatible
resources.
B. Identiﬁcation of Possible Redundancies
The layered modelling of functions, resources and physi-
cal locations allows identifying inherent redundancies from
multiple system functionalities. The systematic utilization of
the described modelling process permits gathering initially
different, but suitable, functions.
For instance, consider MF1 for both compartments (zone
A, B) of the train car (cf. Table II). Redundancies may
appear at input and control SFs. Input redundancies originate
from the utilization of a single temperature sensor for differ-
ent zones. Similarly, contiguous compartment temperature
reference values can be used to provide a degraded, but
acceptable, subfunction. Control SFs may be implemented
on any PU depending on its capabilities (e.g., memory,
execution time).
Once heterogeneous resources and possible redundancies
are identiﬁed, a strategy to avoid single point of failures
(SPOFs) could be to add homogeneous resources. As an
example, consider the management of heterogeneous re-
sources at the actuator level. Unless actuators are supplied
with explicit redundancies or compatible functions actuate
in a shared physical space, heterogeneous resources become
infeasible. Heating SF is not replaceable due to the lack of
suitable SFs within the same space. In these cases, homo-
geneous resources should be supplied in order to provide
switch over capabilities.
C. Resource Allocation
When analysing the resource allocation for MF1, some
architectural assumptions are made for exemplifying how
to customize the approach to a fully distributed system. It
is considered that sensors, user temperature references and
actuators are distributed in such a way, that they need a PU
in order to reach the rest of components using a network
communication protocol.
Additionally, even if for the purposes of this example
communication, fault detection and reconﬁguration failures
are not considered, we are expanding the modelling of
functions and resources to include them. The idea we are
developing is to attach fault detection algorithms to each
subfunction so that component and communication failures
can be detected. We also need to attach reconﬁguration
algorithms to each main function, which are responsible for
changing the homogeneus/heterogeneus resources using the
aforementioned fault detection outcomes.
Consequently, one sensor, one reference button, three PUs
and a heater connected through a communication network
constitute the nominal conﬁguration for the train car temper-
ature control for each zone (cf. Figure 3). Each PU allocates
different control algorithms so as to assure functionalities
in case of input subfunction failures: Open Loop (OL)
algorithm manages the omission of temperature measure-
ment and a default Set Point (SPA) enables handling user’s
temperature reference failure. Each SF must be allocated to
the available resources. To do this, the model deﬁned in
Subsection IV-A needs to be completed in order to address
the resource allocation decisions:
MF1.Car1.ZoneA.MeasureTemp.SensorA
MF1.Car1.ZoneA.MeasureTemp.SensorB
MF1.Car1.ZoneA.RefTemp.RefButtonA
MF1.Car1.ZoneA.RefTemp.RefButtonB
MF1.Car1.ZoneA.RefTemp.SPA.PUA1,A2,A3
MF1.Car1.ZoneA.TempControlAlgorithm.PID.PUA1,A2
MF1.Car1.ZoneA.TempControlAlgorithm.OL.PUA3
MF1.Car1.ZoneA.Heating.HeaterA
From the previous model, we can observe that there is
only one implementation for the Heating SF and therefore,
we can deduce that it is a SPOF. This method allows an
straightforward identiﬁcation of SPOFs.
D. Inference Process and Reconﬁguration
Once resource allocation decisions have been adopted,
this approach enables the extraction of alternative system
conﬁgurations. For instance, for MF1 in the train car, the
system conﬁgurations transit from nominal (N) conﬁgu-
rations, in which the initial resources are working (W)
correctly, to degraded conﬁgurations. These conﬁgurations
allow handling for example the failures of sensorA (Da),
16
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-212-7
DEPEND 2012 : The Fifth International Conference on Dependability

both sensors (Db), reference buttonA (Dc) and both reference
button failures (Dd). Further degradation occurs when the
communication network fails (De). These conﬁgurations are
illustrated in the Table III. Note that the purpose of this
example is not to provide an exhaustive analysis of all
existing conﬁgurations, but rather we want to illustrate a
subset of these conﬁgurations, to show the application of
the method without losing its generality.
Table III
CONFIGURATION EXAMPLES FOR ZONE A
Compatible Tokens: Implementations
N
Da
Db
Dc
Dd
De
MF1.Car1.ZoneA.MeasureTemp.SensorA
W
F
F
W
W
F
MF1.Car1.ZoneA.MeasureTemp.SensorB
W
F
F
MF1.Car1.ZoneA.RefTemp.RefButtonA
W
W
W
F
F
F
MF1.Car1.ZoneA.RefTemp.RefButtonB
W
F
F
MF1.Car1.ZoneA.RefTemp.SPA.PUA2
W
F
MF1.Car1.ZoneA.RefTemp.SPA.PUA3
W
MF1.Car1.ZoneA.TempControlAlg.PID.PUA1
W
W
W
W
F
MF1.Car1.ZoneA.TempControlAlg.OL.PUA3
W
W
MF1.Car1.ZoneA.Heating.HeaterA
W
W
W
W
W
W
We need to assign priorities to each implementation for
the SF components. This allows an automated generation
of conﬁgurations in the case of failure occurrences, e.g.,
the priorities for the MeasureTemp SF for MF1.Car1.ZoneA
would be {SensorA, SensorB}.
Figure 3 shows the network and the data ﬂow between
different PUs. The thick lines represent the physical mea-
surements of the sensors. The solid lines represent the
data transfers in nominal operation mode. The dashed lines
represent data transfers in a degraded operation mode when
PUA1 and PUB1 fail. Finally, the dotted lines with empty
arrowheads represent the data transfers in a degraded oper-
ation mode when PUA1, PUB1, PUA2 and PUB2 fail. In this
conﬁguration, PUA3 and PUB3 manage the temperature using
OL algorithms and default reference temperature values.
ZoneA
ZoneB
Car1
SensorA
UserRefA
UserRefB
SensorB
PUA1
PUA2
PUB2
PUB1
Network
PUA3
HeaterA
PUB3
HeaterB
Figure 3.
Train Car Logical Reconﬁguration Topology
V. CONCLUSION AND FUTURE WORK
In this paper, a dependable design strategy has been
sketched. Dedicated replication of system components sat-
isfy the avoidance of SPOFs. However, in some environ-
ments it is feasible and desirable to make use of existing
resources so that other compatible functions are supplied
with heterogeneous resources (e.g., trains, buildings).
Identiﬁcation and implementation of the proposed recon-
ﬁguration strategies will incur an extra cost. However, for
a given dependability level, this approach would reduce the
overall system hardware cost as heterogeneous resources are
systematically identiﬁed. Note that this is only true in the
previously mentioned environments.
We are developing the approach to support fault detection
and reconﬁguration. This will complete the method and we
will be able to evaluate the dependability gains and cost
trade-offs of this approach. Kazman et al. [9] propose a
trade-off analysis method, which enable the architectural
dependability-cost evaluation. This method could be inte-
grated with this approach. The ﬁnal goal is to obtain a
complete method, where a quasi-optimal solution is obtained
in a massively networked scenario.
In the cases where the dependability is critical, greater
architectural details should be considered (e.g., power sup-
plies, communication routes). This would allow evaluating
the needed homogeneus/heterogeneous resources.
REFERENCES
[1] A. Avizienis, J.-C. Laprie, B. Randell, and C. Landwehr, “Basic
concepts and taxonomy of dependable and secure computing,”
IEEE Trans. Dependable Secur. Comput., vol. 1, pp. 11–33,
January 2004.
[2] J. Wysocki, R. Debouk, and K. Nouri, “Shared redundancy as a
means of producing reliable mission critical systems,” in Proc.
of RAMS’04, 2004, pp. 376 – 381.
[3] J. Galdun, J. Ligus, J.-M. Thiriet, and J. Sarnovsky, “Relia-
bility increasing through networked cascade control structure
- consideration of quasi-redundant subsystems,” in IFAC Proc.
Volumes, vol. 17, 2008, pp. 6839–6844.
[4] R. Anthony, D. Chen, M. T¨orngren, D. Scholle, M. Sanfridson,
A. Rettberg, T. Naseer, M. Persson, and L. Feng, Autonomic
Communication.
Springer, 2009, ch. Autonomic Middleware
for Automotive Embedded Systems, pp. 169–210.
[5] R. Adler, I. Schaefer, M. Trapp, and A. Poetzsch-Heffter,
“Component-based modeling and veriﬁcation of dynamic adap-
tation in safety-critical embedded systems,” ACM Trans. Em-
bed. Comput. Syst., vol. 10, no. 2, pp. 20:1–20:39, Dec. 2010.
[6] P. Bieber, E. Noulard, C. Pagetti, T. Planche, and F. Vialard,
“Preliminary design of future reconﬁgurable ima platforms,”
SIGBED Rev., vol. 6, no. 3, 2009.
[7] C. Engel, A. Roth, P. H. Schmitt, R. Coutinho, and T. Schoofs,
“Enhanced dispatchability of aircrafts using multi-static con-
ﬁgurations,” in Proc. of ERTS’10, 2010.
[8] G. Montano and J. McDermid, “Autonomous and/or interac-
tive constraints-based software reconﬁguration for planetary
rovers,” in Proc. of ASTRA’08.
ESA/ESTEC, 2008.
[9] R. Kazman, M. Klein, and P. Clements, “ATAM: Method
for Architecture Evaluation,” SEI, Carnegie Mellon University,
Tech. Report CMU/SEI-2000-TR-004, 2000.
17
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-212-7
DEPEND 2012 : The Fifth International Conference on Dependability

