Fast and Automatic Veriﬁcation of Authentication and Key Exchange Protocols
Haruki Ota, Shinsaku Kiyomoto and Toshiaki Tanaka
Information Security Laboratory
KDDI R&D Laboratories, Inc.
Saitama, Japan
{haruki, kiyomoto, toshi}@kddilabs.jp
Abstract—Security in a peer-to-peer (P2P) system is not
considered, although it has many potential threats. In order to
make the whole P2P system secure, various security functions
require to be taken into consideration for these threats,
respectively. We take up authentication and key exchange
protocols as a target of the security functions in the P2P system.
These protocols can bear one duty in order to realize the
secure P2P system. It is preferable for authentication and key
exchange protocols to be veriﬁed automatically and rapidly
in accordance with security requirements. In order to meet
this requirement, we proposed the security veriﬁcation method
for the aforementioned protocols based on Bellare et al.’s
model and showed the veriﬁcation points of security properties
to verify their security efﬁciently. However, there are three
weaknesses in the aforementioned paper. In this paper, (1) we
describe the relations of the six veriﬁcation points, (2) explain
how the proposed method veriﬁes the aforementioned protocols
by providing one example and (3) show the validity of the
proposed method by verifying the security of 87 authentication
and key exchange protocols that were generated automatically.
Keywords-security veriﬁcation method; authentication and
key exchange protocols; veriﬁcation points;
I. INTRODUCTION
A. Motivation
Recently, a peer-to-peer (P2P) system, which is one of
the distributed network architectures, has been developed.
However, the security in the P2P system is not consid-
ered, although it has potential threats, such as viruses and
worms, illegal uses of data with copyrights, impersonation,
privacy issues and unauthorized access. For these threats,
the security functions, such as virus detection techniques,
digital rights management, cryptographic protocols, privacy
protection mechanisms and intrusion detection techniques,
require to be taken into consideration, respectively, in order
to make the whole P2P system secure. Then, we take up
the cryptographic protocols, in particular, authentication and
key exchange protocols as a target of the security functions
in the P2P system. In the authentication protocol, pair of
users can communicate with each other, while each user
knows who his/her communication partner is. In the key
exchange protocol, they can send and receive secret data
over an unreliable channel. Therefore, these protocols can
bear one duty in order to realize the secure P2P system.
For a considerable period, existing authentication and
key exchange protocols were designed by trial and error,
based on the designer’s understanding of security and cryp-
tographic techniques. Therefore, it is vital to be able to deal
with compromised protocols quickly. However, the process
of specialists designing authentication and key exchange
protocols is a time-consuming one and designing a new
protocol or modifying an existing protocol and verifying
its security are a lengthy process. As a result, there were
neither the methods to evaluate the authentication and key
exchange protocols formally nor the mechanisms to deal
with compromised protocols quickly.
B. Related Work
Two different types of methods have been proposed as
ways of verifying the security of authentication and key
exchange protocols: those based on a computational com-
plexity approach and those based on formal veriﬁcation.
As methods based on the computational complexity ap-
proach, Bellare, Pointcheval and Rogaway introduced the
ﬁrst indistinguishability-based formal model of security for
authentication and key exchange protocols [1], [2], [3].
Speciﬁcally, Bellare and Rogaway ﬁrst proposed 2-party mu-
tual authentication and authenticated key exchange protocols
in 1993 [1], and subsequently extended this to a 3-party
setting via the key distribution center with respect to key ex-
change protocols in 1995 [2]. In 2000, Bellare, Pointcheval
and Rogaway proposed provably secure password-based key
exchange and authenticated key exchange protocols, based
on the Bellare-Rogaway model [3]. Bellare et al. formulated
models that were secure against an off-line dictionary attack
and forward secrecy. Hereinafter, we call the model proposed
in [1], [2], [3] the “BPR model”. The BPR model became
the basis of a considerable number of subsequent research
studies in this area, such as those that investigated a simula-
tion paradigm [4] and a universally composable framework
[5]. However, the problem remained that the security of the
protocols still needed to be proved. That is, there was not
the automatic veriﬁcation method based on the BPR model
since it is very difﬁcult to implement the notations of the
provable security in the BPR model.
On the other hand, methods based on formal veriﬁ-
cation are classiﬁed into the following: methods based
7
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

on state machine approaches (e.g., the Dolev-Yao model
[6]), methods using model checkers (e.g., FDR (Failures
Divergences Reﬁnement)/CSP (Communicating Sequential
Processes) [7]), methods using algebraic systems (e.g., spi
calculus [8]), methods based on modal logic (e.g., BAN
(Burrows-Abadi-Needham) logic [9]) and methods based
on inductive approaches (e.g., Isabelle/HOL (Higher Order
Logic) [10]). However, these methods are less than optimal
as it takes a considerable amount of time to verify the
security of protocols and/or they cannot always verify the
security of protocols automatically.
In order to resolve the aforementioned problems, we
proposed a security veriﬁcation method for authentication
and key exchange protocols based on the BPR model [11],
[12], [13]. We generalized the process of the security proofs
based on the BPR model to implement it as a tool. In
particular, we showed the complete veriﬁcation points of
security properties for authentication and key exchange pro-
tocols so that the security of each protocol could be veriﬁed
rapidly and automatically [13]. The veriﬁcation points have
the characteristic that the authentication and key exchange
protocols are determined to be secure if they are satisﬁed
with at least one veriﬁcation point item of the security
property. However, there are the following three weaknesses
in [13].
1) The relations of the veriﬁcation points are not clear.
2) It is not clear how the proposed method veriﬁes the
authentication and key exchange protocols.
3) The veriﬁcation results for concrete protocols are not
shown using the proposed method.
C. Contributions
In this paper, we provide the following contributions in
order to improve the aforementioned weaknesses.
1) We describe the relations of the six veriﬁcation points
by considering the attack models and the security
targets.
2) We explain how the proposed method veriﬁes the
aforementioned protocols by providing one veriﬁca-
tion example, which is satisﬁed with the six security
properties.
3) We show the validity of the proposed method by ver-
ifying the security of the concrete authentication and
key exchange protocols and conﬁrming the veriﬁcation
results and veriﬁcation time.
D. Organization
The rest of this paper is organized as follows. We
introduce the BPR model in Section II. We review the
proposed security veriﬁcation method for authentication and
key exchange protocols and describe the relations of the
veriﬁcation points in Section III. We explain the veriﬁcation
example and the veriﬁcation results using the proposed
method in Section IV. Our conclusions are presented in
Section V and we present detailed tables of the veriﬁcation
points for the aforementioned protocols in Appendix.
II. BPR MODEL
This section introduces the security properties of the au-
thentication and key exchange protocols in the BPR model.
In the BPR model, Bellare et al. introduced new notions of
security: “matching conversation” of the authentication pro-
tocol and “semantic security” of the key exchange protocol
[1]. They formulated the following security properties from
real attacks, which are shown in brackets, for each notion
in accordance with the security requirements.
• Matching conversation (MC) [1]
In an authentication protocol, an adversary cannot alter
messages, send other messages, intercept messages or
deliver messages out of order.
– Security against an impersonation attack (MC-SIA)
[1]
An adversary cannot break an authentication proto-
col even when he/she controls all communications
between parties.
[Impersonation attack]
• Semantic security (SS) [1]
In a key exchange protocol, an adversary cannot dis-
tinguish between the session key and random session
key.
– Security against a passive attack (SS-SPA) [1], [2]
An adversary cannot break a key exchange proto-
col even when he/she eavesdrops on all communi-
cations between parties.
[Eavesdropping attack]
– Security against an active attack (SS-SAA) [1], [2]
An adversary cannot break a key exchange proto-
col even when he/she controls all communications
between parties. [Active attack (e.g., replay attack,
man-in-the-middle attack and so on)]
– Known key security (SS-KKS) [1], [2]
An adversary cannot obtain a target session key
even when he/she obtains session keys in other
sessions.
[Known key attack]
– Weak forward secrecy (SS-WFS) [2], [3]
An adversary cannot obtain the past session key
even when he/she obtains long-lived keys such
as the secret keys used in secret key encryption,
passwords or private keys used in public key
encryption.
[Corruption attack]
• Common item
– Resistance to an off-line dictionary attack (RODA)
[3]
An adversary cannot search for a password of a
party that corresponds to the recorded communi-
cation off-line from the dictionary.
[Off-line dictionary attack]
8
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

III. SECURITY VERIFICATION METHOD
This section reviews the proposed security veriﬁcation
method for authentication and key exchange protocols based
on the BPR model.
A. Procedure
This subsection describes the procedure of the proposed
method.
The veriﬁcation program (VP) veriﬁes the security of the
authentication and key exchange protocols in the following
manner.
1) The VP enumerates all cryptographic primitives and
data used in the authentication and key exchange
protocols. Principal cryptographic primitives are clas-
siﬁed as functions that are equivalent to the following
deﬁnitions.
• Secret key encryption (SKE)
Function for the purpose of encryption using the
pre-shared key.
• Encryption using password (EPW)
Function for the purpose of encryption using the
pre-shared password.
• Public key encryption (PKE)
Function for the purpose of encryption using the
public key.
• Difﬁe-Hellman family (DH)
Function for the purpose of key exchange using
the Difﬁe-Hellman method.
• Digital signature scheme (SIG)
Function for the purpose of generating the signa-
ture using the signing key.
• Hash function (HF)
Function for the purpose of generating the digest
without using the pre-shared key.
• Message authentication code scheme (MAC)
Function for the purpose of generating the digest
using the pre-shared key.
2) The VP sets up the following roles among the cryp-
tographic primitives enumerated in step 1 in the au-
thentication and key exchange protocols.
• Cryptographic primitives required for authenti-
cator generation in the authentication protocol
(PAG).
• Cryptographic primitives required for key gener-
ation in the key exchange protocol (PKG).
• Cryptographic primitives that appear in ﬂows and
include the password (PAF).
• Cryptographic primitives included in the argu-
ments of other cryptographic primitives (PAO).
• Cryptographic primitives that are not PAG, PKG,
PAF or PAO (PNA).
Here, we deﬁne a framework as g(f(A, B), C) with
respect to the aforementioned roles without loss of
generality. f and g denote the aforementioned roles
and A, B and C denote the values of the cryptographic
primitives or data enumerated in step 1, where other
arguments of f and g that are not related to the
veriﬁcation are ignored. In this case, the combinations
of f and g are as follows.
• g is the PNA and f is the PAG, PKG or PAF,
namely, f(A, B).
• g is the PAG, PKG or PAF and f is the PAO,
namely, g(f(A, B), C).
There are no other variants, since the VP sets up not
only the data but also the values of the cryptographic
primitives, as described in step 3.
3) The VP sets up the following elements in respect of
the values of the cryptographic primitives and data
enumerated in step 1 in accordance with the protocol
speciﬁcations.
• Data types
– General data (GD)
– Identity data (ID)
– Temporary data (TD)
– Long-lived key (LLK)
– Password (PW)
• Values types
– Fixed value (FV)
– Temporary value (TV)
• Values and data states
– Public state (PS)
– Secret state (SS)
4) The VP sets up the security properties deﬁned in
Section II according to the user’s requirement for the
authentication and key exchange protocols.
5) The VP checks the veriﬁcation points shown in Ap-
pendix, using the elements of step 3 for the security
properties of step 4 in the authentication and key
exchange protocols. If the authentication and key
exchange protocols are satisﬁed with at least one
veriﬁcation point item of the security property, then
the VP determines that these protocols are secure
against this security property. Then, the VP sets up
these elements and security properties in accordance
with the order of the protocol ﬂows for the values of
the cryptographic primitives and data that are related
to each attack. Here, the values and data states are
renewed, where public states are given priority over
secret states.
We provide the veriﬁcation example of the proposed
method in Section IV-A in order to show how to verify a
protocol.
B. Relations of Veriﬁcation Points
This subsection describes the relations of the six veriﬁca-
tion points.
9
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

We explain the relations of the six veriﬁcation points. The
VP sets up the data that are related to each attack in the
proposed method. Table I denotes the corresponding data
and the combinations of f and g. The security properties
are roughly classiﬁed into three as can be seen from the
combinations of f and g in Table I: MC-SIA, SS group (SS-
SPA, SS-SAA, SS-KKS and SS-WFS) and RODA. MC-SIA
and RODA are independent of the other security properties
since the former’s target is the authenticator and the latter’s
target is the ﬂows that include the password, respectively.
On the other hand, there are some relations in the SS
group since it has the same target as the key generation
function. First, SS-SPA is the weakest security level in the
SS group, that is, SS-SPA has the most veriﬁcation point
items. The veriﬁcation points of the remaining SS-SAA, SS-
KKS and SS-WFS are derived from that of SS-SPA. Second,
SS-SAA implies SS-SPA from the security properties, that
is, the veriﬁcation point of SS-SPA completely includes that
of SS-SAA. Third, the known key attack is equivalent to the
active attack, except that the adversary can obtain session
keys in other sessions. The veriﬁcation point of SS-KKS is
the same as that of SS-SAA since the data and values with
respect to the session keys in other sessions are only set
up in accordance with the known key attack. Finally, the
adversary can obtain the long-lived keys in the corruption
attack, which is different from the eavesdropping attack.
That is, the long-lived keys in the veriﬁcation point of SS-
SPA are modiﬁed into the public state from the secret state
in the veriﬁcation point of SS-WFS. Then, the inapplicable
items in the veriﬁcation point of SS-WFS need to be deleted.
We show the veriﬁcation points of MC-SIA, SS-SPA, SS-
SAA, SS-KKS, SS-WFS and RODA in Tables III – VII
of Appendix. See [13] with respect to how to derive the
veriﬁcation point of each security property.
IV. EVALUATION
This section shows the evaluation of the method proposed
in Section III.
A. Veriﬁcation Example
This subsection shows the veriﬁcation example of the
proposed method.
Table I
SETUP DATA AND COMBINATIONS OF f AND g FOR EACH SECURITY
PROPERTY.
MC-SIA
SS-SPA
SS-SAA
Data
All ﬂows
All ﬂows
All ﬂows
g
PNA
PAG
PNA
PKG
PNA
PKG
f
PAG
PAO
PKG
PAO
PKG
PAO
SS-KKS
SS-WFS
RODA
Data
All ﬂows
All ﬂows
All ﬂows
Other session keys
Long-lived keys
g
PNA
PKG
PNA
PKG
PNA
PAF
f
PKG
PAO
PKG
PAO
PAF
PAO
We verify the security of the authenticated key exchange
protocol using the proposed method as the example. This
protocol, which is satisﬁed with the six security properties:
MC-SIA, SS-SPA, SS-SAA, SS-KKS, SS-WFS and RODA,
is one of the authenticated key exchange protocols that
were automatically generated using an automatic generation
technique [14], as described in Section IV-B. Figure 1 shows
the protocol ﬂow. Parties P1 and P2 share a password pw
beforehand. The party P1 generates a random number x and
sends Epw(gx) to the party P2, where Epw is the encryption
using the password pw and gx is the Difﬁe-Hellman-based
public value. The party P2 generates a random number y
and sends Epw(H(gx ∥ gy) ∥ gy) ∥ H(gx) to the party
P1, where H is the hash function and gy is the Difﬁe-
Hellman-based public value. The party P1 sends H(gy) to
the party P2. Finally, the parties P1 and P2 share a session
key sk = H(gxy).
Then, the roles of cryptographic primitives and types and
states of data and values are set up for this protocol as items
1 and 2, respectively. Note that the states of data and values
are different for the case of SS-WFS and cases other than SS-
WFS in item 2. Also, the VP determines that this protocol
is secure against each security property, since f and g take
the corresponding cryptographic primitives and A, B and C
take the corresponding values of the cryptographic primitives
and data for the framework g(f(A, B), C) in item 3, where
“null” denotes empty.
1) Roles of cryptographic primitives:
• Cryptographic primitives
= {g1, g2, g3, g4, H1, H2, H3, H4, H5, E1, E2}
– g1 = gx [DH], g2 = gy [DH]
– g3 = (gy)x [DH], g4 = (gx)y [DH]
– H1 = H(g1 ∥ g2) [HF]
– H2 = H(g3) [HF], H3 = H(g4) [HF]
– H4 = H(g1) [HF], H5 = H(g2) [HF]
– E1 = Epw(g1) [EPW]
– E2 = Epw(H1 ∥ g2) [EPW]
P1
pw
pw
P2
x
R
←− Z∗
p
Epw(gx)
-
y
R
←− Z∗
p
Epw(H(gx ∥ gy) ∥ gy) ∥ H(gx)

H(gy)
-
sk = H(gxy)
sk = H(gxy)
Figure 1.
Protocol example, which is satisﬁed with the six security
properties: MC-SIA, SS-SPA, SS-SAA, SS-KKS, SS-WFS and RODA.
10
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

• PAG = {H5 (of P1), H4 (of P2)}
• PKG = {H2 (of P1), H3 (of P2)}
• PAO for PKG = {E2 (for H2), E1 (for H3)}
• PAF = {E1, E2}
2) Types and states of data and values:
• Types and states = {pw, x, y, g1, g2, g3, g4, H1,
H2, H3, H4, H5, E1, E2}
– pw = PW-PS (when SS-WFS)
– pw = PW-SS (except for SS-WFS)
– x = TD-SS, y = TD-SS
– g1 = TV-PS (when SS-WFS)
– g1 = TV-SS (except for SS-WFS)
– g2 = TV-PS (when SS-WFS)
– g2 = TV-SS (except for SS-WFS)
– g3 = TV-SS, g4 = TV-SS
– H1 = TV-PS (when SS-WFS)
– H1 = TV-SS (except for SS-WFS)
– H2 = TV-SS, H3 = TV-SS
– H4 = TV-PS, H5 = TV-PS
– E1 = TV-PS, E2 = TV-PS
3) Reasons that meet each security property:
• MC-SIA
– P1: null(H5 [HF](g2 [TV-SS], null), null)
– P2: null(H4 [HF](g1 [TV-SS], null), null)
• SS-SPA
– P1: null(H2 [HF](g3 [TV-SS], null), null)
– P2: null(H3 [HF](g4 [TV-SS], null), null)
• SS-SAA and SS-KKS
– P1: H2 [HF](E2 [EPW](pw [PW-SS], null),
g3 [TV-SS])
– P2: H3 [HF](E1 [EPW](pw [PW-SS], null),
g4 [TV-SS])
• SS-WFS
– P1: H2 [HF](E2 [EPW](pw [PW-PS], null),
g3 [TV-SS])
– P2: H3 [HF](E1 [EPW](pw [PW-PS], null),
g4 [TV-SS])
• RODA
– 1st ﬂow: null(E1 [EPW](pw [PW-SS],
g1 [TV-SS]), null)
– 2nd ﬂow: null(E2 [EPW](pw [PW-SS],
H1 [TV-SS]), null)
We explain the veriﬁcation process of P1 in MC-SIA as
an example. The VP sets up the items 1 and 2 by steps 1
∼ 3 of the proposed method. Here, PAG of P1 is H5 =
H(g2) and its PAO is null. Thus, the authenticator of P1
has the form of “null(H5 [HF](g2 [TV-SS], null), null)” for
the framework g(f(A, B), C), as described in item 3. In this
case, the aforementioned form is satisﬁed with the item of
the third row in Table III. That is, f is HF of PDH, A is
TV-SS of T*-SS and g, B and C are null.
B. Veriﬁcation Results
This subsection describes the veriﬁcation results using the
method proposed in Section III.
An automatic generation technique of the authentication
and key exchange protocols was proposed in [14], in relation
to this paper. In [14], eighty-seven types of authentication
and key exchange protocols, which are composed of 15
authentication (Auth), 22 key exchange (KE) and 50 authen-
ticated key exchange (AKE) protocols, were automatically
generated using this automatic generation technique. In
the automatic generation technique, the optimal protocol is
generated automatically when the following items are set up.
• Types: Auth, KE and AKE
• Cryptographic algorithms: algorithms that correspond
to SKE, EPW, PKE, DH, SIG, HF and MAC
• Security properties: MC-SIA, SS-SPA, SS-SAA, SS-
KKS, SS-WFS and RODA
• The numbers of ﬂows: 1, 2 and 3
Then, we veriﬁed the security of the aforementioned au-
thentication, key exchange and authenticated key exchange
protocols, using the proposed method. Table II shows the
veriﬁcation results, best, worst and average veriﬁcation time,
minimal, maximal and average protocol deﬁnition ﬁle size
for the authentication, key exchange and authenticated key
exchange protocols, respectively, where the unit of the
veriﬁcation time is the millisecond and the unit of the
protocol deﬁnition ﬁle size is the kilobyte. Symbols “Y”,
“N” and “—” denote that the protocol “meets”, “does not
meet” and “does not require” the corresponding security
property, respectively.
These results completely coincide with the security re-
quirements for the automatically generated protocols. The
veriﬁcation time is within 110 [ms] in the 87 authentication
and key exchange protocols, using a PC with an Intel
Pentium 4 2.6-GHz processor and 2.0-Gbyte RAM. On the
other hand, TRUST [15] takes 40 [ms] ∼ 1.8 [s] at the fastest
among the methods based on formal veriﬁcation [16]. We
cannot make a precise comparison between the proposed
method and the existing methods, since the performance of
the PC and the veriﬁed protocols are different from ours.
However, the proposed method can verify the security of
each protocol automatically and more quickly than most
existing methods, since our method takes 4.6 [ms] ∼ 110
[ms] from Table II. Furthermore, the size of the protocol
deﬁnition ﬁle is within 14.2 [KB] in the aforementioned
protocols and the program size is 1.25 [MB].
V. CONCLUSION
Various security functions require to be taken into con-
sideration for many potential threats, respectively, in order
to realize the secure P2P system. Then, we took up the
authentication and key exchange protocols as a target of the
security functions in the P2P system. These protocols can
11
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

Table II
VERIFICATION RESULTS IN AUTHENTICATION AND KEY EXCHANGE PROTOCOLS.
Types
MC
SS
RODA
Numbers
Veriﬁcation Time [ms]
Protocol Deﬁnition File Size [KB]
SIA
SPA
SAA
KKS
WFS
Best
Worst
Average
Minimum
Maximum
Average
Auth
Y
—
—
—
—
—
13
4.648
9.256
6.597
6.34
8.42
7.18
Y
—
—
—
—
Y
2
8.235
11.988
10.112
7.11
7.93
7.52
KE
—
Y
Y
N
N
—
3
8.948
16.451
11.590
4.79
5.66
5.09
—
Y
Y
Y
N
—
5
12.352
15.091
13.071
5.51
6.28
5.82
—
Y
Y
Y
Y
—
12
20.035
32.445
27.058
6.27
8.10
7.20
—
Y
Y
Y
N
Y
1
23.424
23.424
23.424
6.36
6.36
6.36
—
Y
Y
Y
Y
Y
1
39.138
39.138
39.138
7.69
7.69
7.69
AKE
Y
Y
Y
Y
N
—
20
30.215
67.539
40.519
7.27
9.68
8.39
Y
Y
Y
Y
Y
—
28
41.864
109.054
73.821
8.23
14.20
10.72
Y
Y
Y
Y
N
Y
1
64.928
64.928
64.928
8.77
8.77
8.77
Y
Y
Y
Y
Y
Y
1
88.700
88.700
88.700
9.90
9.90
9.90
bear one duty in order to realize the secure P2P system.
So far, we proposed the security veriﬁcation method for
the aforementioned protocols based on the BPR model and
showed the veriﬁcation points of security properties to verify
their security efﬁciently.
In this paper, we described the relations of the six veriﬁca-
tion points and explained the veriﬁcation example using the
proposed method. We also veriﬁed the security of 87 authen-
tication and key exchange protocols, which were generated
automatically. Then, we conﬁrmed that the veriﬁcation time
was within 110 [ms] and that the security properties of the
veriﬁcation results completely coincided with the security
requirements for the aforementioned protocols.
REFERENCES
[1] M. Bellare and P. Rogaway, “Entity authentication and key
distribution,” in Advances in Cryptology — CRYPTO’93, vol.
773.
Santa Barbara, CA: Springer-Verlag, Aug. 1993, pp.
232–249.
[2] M. Bellare and P. Rogaway, “Provably secure session key
distribution — The three party case,” in Proc. 27th Annual
ACM Symposium on Theory of Computing.
Philadelphia,
PA: ACM Press, May/Jun. 1995, pp. 57–66.
[3] M. Bellare, D. Pointcheval, and P. Rogaway, “Authenticated
key exchange secure against dictionary attacks,” in Advances
in Cryptology — EUROCRYPT 2000, vol. 1807.
Bruges,
Belgium: Springer-Verlag, May 2000, pp. 139–155.
[4] M. Bellare, R. Canetti, and H. Krawczyk, “A modular ap-
proach to the design and analysis of authentication and key
exchange protocols,” in Proc. 30th Annual ACM Symposium
on the Theory of Computing.
Dallas, TX: ACM Press, May
1998, pp. 419–428.
[5] R. Canetti, “Universally
composable
security:
A
new
paradigm for cryptographic protocols,” in Proc. 42nd An-
nual IEEE Symposium on Foundations of Computer Science
(FOCS 2001). Las Vegas, NV: IEEE Computer Society Press,
Oct. 2001, pp. 136–145.
[6] D. Dolev and A. Yao, “On the security of public key proto-
cols,” in Proc. 22nd Annual IEEE Symposium on Foundations
of Computer Science (FOCS 1981).
Nashville, TN: IEEE
Computer Society Press, Oct. 1981, pp. 350–357.
[7] A. Roscoe, “Modelling and verifying key-exchange protocols
using CSP and FDR,” in Proc. Eighth IEEE Computer Se-
curity Foundations Workshop.
County Kerry, Ireland: IEEE
Computer Society Press, Mar. 1995, pp. 98–107.
[8] M. Abadi and A. Gordon, “A calculus for cryptographic
protocols: The spi calculus,” Information and Computation,
vol. 148, no. 1, pp. 1–70, 1999.
[9] M. Burrows, A. Abadi, and R. Needham, “A logic of authen-
tication,” ACM Trans. on Computer Systems, vol. 8, no. 1,
pp. 18–36, 1990.
[10] L. Paulson, “Proving properties of security protocols by
induction,” Univ. of Cambridge, Cambridge, UK, Computer
Laboratory Tech. Rep. 409, 1996.
[11] H. Ota, S. Kiyomoto, and T. Tanaka, “Security Veriﬁcation
for Authentication and Key Exchange Protocols,” in Proc.
2008 International Symposium on Information Theory and
its Applications (ISITA 2008).
Auckland, New Zealand:
Computer Society Press, Dec. 2008, pp. 507–512.
[12] H. Ota, S. Kiyomoto, and T. Tanaka, “Security Veriﬁcation for
Authentication and Key Exchange Protocols,” International
Journal of Computer Science and Network Security, vol. 9,
no. 3, pp. 1–11, 2009.
[13] H. Ota, S. Kiyomoto, and T. Tanaka, “Security veriﬁcation for
authentication and key exchange protocols, revisited,” in Proc.
2010 IEEE 24th IEEE International Conference on Advanced
Information Networking and Applications Workshops. Perth,
Australia: IEEE Computer Society Press, Apr. 2010, pp. 226–
233.
[14] S. Kiyomoto, H. Ota, and T. Tanaka, “Security protocol dy-
namic generation and modiﬁcation mechanisms for ubiquitous
services,” in Proc. 11th International Conference on Wireless
Personal Multimedia Communications (WPMC’08), Lapland,
Finland, 2008.
12
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

[15] R. Amadio, D. Lugiez, and V. Vancackere, “On the symbolic
reduction of processes with cryptographic functions,” Theo-
retical Computer Science, vol. 290, no. 1, pp. 695–740, 2003.
[16] A. Bracciali, G. Baldi, G. Ferrari, and E. Tuosto, “A
coordination-based methodology for security protocol veri-
ﬁcation,” in Proc. 2nd International Workshop on Security
Issues with Petri Nets and other Computational Models
(WISP2004), vol. 121.
Bologna, Italy: Elsevier Science,
2004, pp. 23–46.
APPENDIX
This appendix presents detailed tables of the veriﬁcation
points referred to in Section III-B.
Tables III – VII show the veriﬁcation points of MC-SIA,
SS-SPA, SS-SAA, SS-KKS, SS-WFS and RODA. Table IV
shows the common veriﬁcation point of SS-SPA, SS-SAA
and SS-KKS and Table V shows the remaining veriﬁcation
point of SS-SPA, where the veriﬁcation points of SS-SAA
and SS-KKS coincide with Table IV. In addition, each
abbreviation symbol denotes the following.
• ALL denotes SKE, EPW, PKE, DH, SIG, HF or MAC.
• 6-SIG denotes SKE, EPW, PKE, DH, HF or MAC.
• SSM denotes SKE, SIG or MAC.
• S/S denotes SKE or SIG.
• SM denotes SKE or MAC.
• EPDH denotes EPW, PKE, DH or HF.
• PDHM denotes PKE, DH, HF or MAC.
• PDH denotes PKE, DH or HF.
• T*-*S denotes TD-PS, TD-SS, TV-PS or TV-SS.
• T*-SS denotes TD-SS or TV-SS.
• T*-SS+ denotes TD-SS, TV-SS or FV with LLK-SS.
• EXC denotes elements except for PW-PS and PW-SS.
Table III
VERIFICATION POINTS OF MC-SIA.
g
f
A
B
C
—
SSM
LLK-SS
T*-*S
—
—
EPW
PW-SS
T*-*S
—
—
PDH
T*-SS
—
—
SSM
SSM
LLK-SS
T*-*S
LLK-SS
ALL
SSM
LLK-SS
—
T*-*S
SSM
EPW
PW-SS
T*-*S
LLK-SS
ALL
EPW
PW-SS
—
T*-*S
SSM
PDH
T*-*S
—
LLK-SS
EPW
SSM
LLK-SS
T*-*S
PW-SS
EPW
EPW
PW-SS
T*-*S
PW-SS
EPW
PDH
T*-*S
—
PW-SS
PDH
SSM
LLK-SS
T*-*S
—
PDH
EPW
PW-SS
T*-*S
—
PDH
PDH
T*-SS
—
—
PDH
PDH
—
—
T*-SS
Table IV
COMMON VERIFICATION POINTS OF SS-SPA, SS-SAA AND SS-KKS.
g
f
A
B
C
SM
SSM
LLK-SS
T*-*S
LLK-SS
6-SIG
SSM
LLK-SS
—
T*-*S
SSM
EPW
PW-SS
T*-*S
LLK-SS
6-SIG
EPW
PW-SS
—
T*-*S
SM
PDH
T*-*S
—
LLK-SS
EPW
SSM
LLK-SS
T*-*S
PW-SS
EPW
EPW
PW-SS
T*-*S
PW-SS
EPW
PDH
T*-*S
—
PW-SS
PDH
SSM
LLK-SS
T*-*S
—
PDH
EPW
PW-SS
T*-*S
—
SIG
SM
LLK-SS
T*-*S
LLK-SS
Table V
REMAINING VERIFICATION POINTS OF SS-SPA.
g
f
A
B
C
—
SM
LLK-SS
T*-*S
—
—
EPW
PW-SS
T*-*S
—
—
PDH
T*-SS
—
—
EPW
PDH
—
—
T*-*S
PDH
PDH
T*-SS
—
—
PDH
PDH
—
—
T*-SS
SIG
PDH
T*-SS
—
LLK-SS
Table VI
VERIFICATION POINTS OF SS-WFS.
g
f
A
B
C
SSM
PDH
T*-SS
—
LLK-PS
S/S
MAC
LLK-PS
T*-SS
LLK-PS
EPW
PDH
T*-SS
—
PW-PS
EPW
MAC
LLK-PS
T*-SS
PW-PS
PDHM
SSM
LLK-PS
—
T*-SS
PDHM
EPW
PW-PS
—
T*-SS
PDH
PDH
T*-SS
—
—
PDHM
PDH
—
—
T*-SS
PDH
MAC
LLK-PS
T*-SS
—
MAC
SSM
LLK-PS
T*-SS
LLK-PS
MAC
EPW
PW-PS
T*-SS
LLK-PS
Table VII
VERIFICATION POINTS OF RODA.
g
f
A
B
C
—
SM
PW-SS
LLK-SS
—
—
EPDH
PW-SS
T*-SS+
—
SM
SSM
PW-SS
LLK-SS
LLK-SS
SM
EPDH
PW-SS
—
LLK-SS
EPW
SSM
PW-SS
LLK-SS
PW-SS
EPW
EPDH
PW-SS
T*-SS+
PW-SS
EPDH
EPDH
PW-SS
—
T*-SS+
PDH
SSM
PW-SS
LLK-SS
—
PDH
EPDH
PW-SS
T*-SS+
—
SIG
SM
PW-SS
LLK-SS
EXC
SIG
EPDH
PW-SS
T*-SS+
EXC
13
AP2PS 2010 : The Second International Conference on Advances in P2P Systems
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-102-1

