Weighted Branching Preorders and Distances:
Logical Characterization and Complexity
Louise Foshammer∗, Kim Guldstrand Larsen∗, Radu Mardare∗ and Bingtian Xue∗
∗Department of Computer Science, Aalborg University, Denmark
Email: {foshammer,kgl,mardare,bingt}@cs.aau.dk
Abstract—We investigate branching bisimulation for weighted
transition systems. It is known that branching bisimulation
is characterized by computational tree logic without the next
operator in the non-deterministic case. We demonstrate that the
weighted version of this logic characterizes a weighted version
of branching bisimulation, for which the decidability is NP-
complete. This leads us to investigating two fragments of this logic
allowing only upper bounds and either existential or universal
quantiﬁcation. The resulting existential and universal simulation
relations are decidable in polynomial time. We consider distance-
based analogues of weighted branching bisimulation and exis-
tential simulation and characterize these using fragments of the
aforementioned logic.
Keywords–Weighted transition systems; Weighted computational
tree logic; Characterization; Weighted branching bisimulation.
I.
INTRODUCTION
Classical process algebras, such as CCS, CSP and ACP
[1]–[3] provide formalisms for describing the behavior of
concurrent and interacting systems essential in terms of la-
beled transition systems. To capture the semantic equality of
processes several behavioral preorders and equivalences have
been considered, including the by now classical notion of
bisimulation equivalence introduced by Milner [4] and Park
[5]. Alongside the development of behavioral equivalences, an
overall quest has been identiﬁcation of corresponding temporal
or modal logics, in the sense that the behavioral equivalence
between two processes is in complete agreement with equality
between the sets of logical properties they satisfy [6], [7].
Another important issue has been identiﬁcation of behav-
ioral preorders and equivalences that permit internal activities
of processes to be abstracted away. The original notion of
observational equivalence by Milner [1] serve this precise
purpose, as does the later notion of branching bisimulation
introduced by Weijland and Van Glabbeck [8]. Branching
bisimulation equivalence has the remarkable additional prop-
erty of being completely characterized by several different and
natural modal logics, one of which is computational tree logic
(CTL) without the next operator [9].
Whereas labeled transition systems sufﬁce for describing
the reactive and functional behavior of processes, they lack
information about quantitative and non-functional aspects such
as time or resource consumption. This has motivated the
introduction and study of weighted transition systems, where
transitions are labeled with quantities [10], [11], e.g., real,
rational or integer values, allowing for the modeling of con-
sumption or production of resources.
In this paper, we revisit weighted transition systems to
identify useful behavioral relationships that are sensitive to
quantities while permitting abstraction from internal activities.
As a motivational example consider the following processes s
and t both ending in the inactive process 0:
s →5 0 and t →3 t′ →2 0
Assuming that the states s, t, t′ have the same atomic proposi-
tions, the intermediate state t′ may be considered unobservable,
and consequently s and t may be considered behaviorally
equivalent as they end up in 0 with the same overall weight. To
capture this situation in more generality, we extend in various
ways the idea of branching bisimulation and simulation with
weights. Aiming at extending [9], we consider a weighted
version of CTL [12] without the next operator with the purpose
of identifying interesting fragments and the various weighted
versions of branching bisimulation and simulation they charac-
terize. We allow for the systems to have reals as their weights,
but the logic can only have rationals in the parameters, it is
notable that we are, however, still able to capture the entire
behavior of the systems. The study of those fragments are of
importance because their weighted simulations are decidable in
polynomial time (in contract to the NP-complete decidability
of the full logic) while the logics can still specify interesting
properties. This is essential for developing efﬁcient tools.
Finally, we consider weighted branching bisimulation dis-
tances. Consider that the process s has a slightly perturbed
weighted transition, e.g., s →5+ϵ 0. Then, s and t are ex-
pected no longer to be weighted branching bisimilar. However,
following the recent trends in replacing equivalences with
metrics, and boolean answers with quantities [13]–[16], we
shall introduce and logically characterize notions of weighted
branching distance such that the distance between s and t will
decrease for decreasing values of ϵ.
The structure of this paper will be as follows; in Section II,
we introduce the preliminaries, Sections III-V each introduce
a weighted branching (bi)simulation variant, identify a charac-
terizing fragment of WCTL (without next) and determine its
complexity. Section VI introduces distances and ﬁnally Section
VII concludes the paper and describes future work.
II.
PRELIMINARIES
A weighted Kripke structure (WKS) is a straightforward
extension of Kripke structures, where weights, in the form of
non-negative reals, are added to each transition.
Deﬁnition 1 (Weighted Kripke Structure). A weighted Kripke
structure is a tuple K = (S, AP, V, →) , where S is a set of
states, AP is a set of atomic propositions, V : S → P(AP)
is a mapping from states to sets of atomic propositions and
→⊆ S × R≥0 × S is a labeled transition relation.
⋆
For simplicity, transitions are denoted by s →w s′ instead
of (s, w, s′) ∈→.
12
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

We say that a WKS K = (S, AP, V, →) is ﬁnite, if S and →
are ﬁnite; non-blocking, if for all states s ∈ S there is at least
one transition (s, w, s′) ∈→ that starts in s and rational if all
weights on transitions belong to Q≥0.
Example 1. In Figure 1(a), we show the WKS
K
=
(S, AP, V, →) , where S = {s1, s1
1, s1
2}, AP
= {p, q},
→ is deﬁned as s1
→3
s1, s1
→5
s1
1, s1
→2
s1
2 and
V(s1) = {p}, V(s1
1) = {q} and V(s1
2) = {q}.
Note that K is ﬁnite and rational, since it has a ﬁnite number
of states, a ﬁnite number of transitions and all weights are
rational. It is, however, not non-blocking, since there are no
transitions from either of the states s1
1 and s1
2.
⋄
To specify properties of WKSs, we introduce a weighted
extension of CTL (WCTL), where intervals are introduced on
the next and the until operators.
Deﬁnition 2 (Syntax of WCTL). Let AP be a set of atomic
propositions. The syntax of WCTL is given by
φ ::= p | ¬φ | φ1 ∧ φ2 | EXIφ | AXIφ
| E(φ1UIφ2) | A(φ1UIφ2),
where p ∈ AP and I = [l, u], where l, u ∈ Q≥0, l ≤ u.
⋆
Note that I can be any type of interval and that we allow
that l = u, such that the interval can be a single point.
The semantics of WCTL are given by the satisﬁability relation,
deﬁned inductively for an arbitrary non-blocking WKS K =
(S, AP, V, →) and an arbitrary state s ∈ S, as follows
•
K, s |= p iff p ∈ V(s),
•
K, s |= ¬φ iff s ̸|= φ
•
K, s |= φ1 ∧ φ2 iff s |= φ1 and s |= φ2,
•
K, s |= EXIφ iff there exists s →w s′, such that w ∈
I and s′ |= φ,
•
K, s |= AXIφ iff for all s →w s′ such that w ∈ I,
s′ |= φ,
•
K, s |= E(φ1UIφ2) iff there exists a trace
s →w1 s1 →w2 · · · →wk sk →wk+1 · · · , such that
there exists a state sk such that sk |= φ2, for all i <
k, si |= φ1 and Pk
i=1 wi ∈ I,
•
K, s |= A(φ1UIφ2) iff for all traces
s →w1 s1 →w2 · · · →wk sk →wk+1 · · · , there exists
a state sk such that sk |= φ2, for all i < k, si |= φ1
and Pk
i=1 wi ∈ I.
We use the other Boolean operators with their usual semantics.
Consider the following example.
Example 2. Return to the WKS
K = (S, AP, V, →) in
Figure 1(a). The state s1 satisﬁes, among others, the following
formulae: AX[1,3)p and E(pU[4,9]q), but not for instance
A(pU[0,7]q), because of the self-loop.
⋄
A well-known way of comparing WKSs is with weighted
bisimulation [4], [5], which is deﬁned in a way that ensures
complete matching of behavior where transitions are matched
one-to-one. Weighted bisimulation is completely characterized
by WCTL as proven by [17].
Note that in the models, we allow weights to be reals, while
in the logic, we only allow rationals. We describe the models
as general as possible, but as the logic has to be countable, we
will have to restrict ourselves to rationals. The logic is however
still able to encompass the behavior of the model, since we
can approximate the reals by rationals.
III.
WCTL WITHOUT NEXT
Let us now look at a fragment of WCTL for which we have
removed the next operator. As discussed in the introduction
we do not wish to reason about single transition steps in
our models, which explains the need to remove the next
operator. With the remaining operators we are able to reason
about a bound of the cost of arriving at some behavior, while
preserving behavior along the way.
Deﬁnition 3 (Syntax of WCTL−X). Let AP be a set of
propositions. The syntax of WCTL−X is given by
φ ::= p | ¬φ | φ1 ∧ φ2 | A(φ1UIφ2) | E(φ1UIφ2),
where p ∈ AP and I = [l, u], where l, u ∈ Q≥0.
⋆
The semantics of WCTL−X is given by the same satisﬁa-
bility relation as for WCTL.
We will now introduce a notion of weighted branching bisimu-
lation and observe that the bisimulation and the logic induces
the same relation on ﬁnite WKSs. We allow for a weighted
transition to be matched by a sequence of transitions with
identical accumulated weight, behavior is preserved in each
intermediate state and the end behavior is the same.
Deﬁnition 4. Given a WKS K = (S, AP, V, →) a weighted
branching bisimulation (WBB) is a relation R ⊆ S × S, such
that whenever (s, t) ∈ R
•
V(s) = V(t)
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk tk,
such that Pk
i=1 vi = w, (s′, tk) ∈ R and for all i < k,
(s, ti) ∈ R
•
for all t →v t′ there exists s →w1 s1 →w2 · · · →wk
sk, such that Pk
i=1 wi = v, (t′, sk) ∈ R and for all
i < k, (t, si) ∈ R
If there exists a weighted branching bisimulation relating
s and t, we say that s and t are weighted branching bisimilar
and denote it by s ≈I t. The relation ≈I will henceforth be
referred to as weighted branching bisimilarity (WBB).
⋆
The following theorem shows that WCTL−X characterizes
WKS up to WBB.
Theorem 1. Let K = (S, AP, V, →) be a ﬁnite WKS. Then
for all s, t ∈ S
s ≈I t iff [∀φ ∈ WCTL−X s |= φ ⇔ t |= φ].
Proof. (⇒) Suppose s ≈I t and s |= φ. Induction on the
structure of φ.
The case φ = E(φ1UIφ2): By deﬁnition s |= φ
iff
there exists
s →w1
s1 →w2
· · · →wk
sk → · · · s.t.
sk |= φ2, ∀i < k, si |= φ1 and Pk
i=1 wi ∈ I. As s ≈I t,
we have that for every step si →wi+1
si+1 there exists
ti →vi+1
1
ti
1 →vi+1
2
· · · →vi+1
hi+1 ti+1 such that ti+1 ≈I si+1,
∀j < hi+1, ti
j ≈I si and Phi+1
j=1 vi+1
j
= wi+1. By induction,
each state ti
j |= φ1 for j < k, the ﬁnal state tk |= φ2 and
Pk
i=1
Phi
j=1 vi
j = Pk
i=1 wi so by deﬁnition, t |= φ.
The case φ
=
A(φ1UIφ2): If t
̸→ trivially t
|=
φ.
Otherwise choose a trace π1 = t →v1 t1 →v2 · · · . For
13
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

s1
{p}
3
s1
1
{q}
s1
2
{q}
5
2
(a)
s2
{p}
s2
1
{q}
s2
2
{p}
3
2
2
3
(b)
s3
{p}
s3
1
{p}
s3
2
{q}
2
3
2
(c)
s4
{p}
s4
1
{p}
s4
2
{p}
s4
3
{q}
s4
4
{q}
1
2
2
1
3
2
(d)
s5
{p}
s5
1
{p}
s5
2
{q}
s5
3
{p}
1
1
1
1
1
(e)
Figure 1. Five WKSs. The following relations are true s1 ≈I s2, s3 ̸≈I s4, s3 ≤E s5, s4 ̸≤E s3, s3 ≤A s5, s4 ≈0
I s3 and s3 ≈1
I s4.
each step ti →vi+1 ti+1 by relation, we have that there exist
si →wi
1 si
1 →wi
2 · · · →wi
ki si+1, such that ti+1 ≈I si+1,
for all j < ki ti ≈I si
j and Pki
j=1 wi
j = vi+1. We therefore
know that there exists a trace π2 = s →w0
1 s0
1 →w0
2 · · · →w0
k0
s1 →w1
1 · · · →wh−1
kh−1 sh →wh
1 · · · such that for all i, we
have ti ≈I si, for all j < ki ti ≈I si
j and Pki
j=1 wi
j = vi+1.
Since s |= A(φ1UIφ2), we know that for π2 there must exist
some sh such that sh |= φ2, for all i < h and all j, we have
si
j |= φ1 and Ph−1
i=0
Pki
j=1 wi
j ∈ I. By construction of π2 this
means that for π1 there must exist a th such that th |= φ2, for
all i < h ti |= φ1 and Ph
i=1 vi = Ph−1
i=0
Pki
j=1 wi
j ∈ I. By
deﬁnition t |= A(φ1UIφ2).
(⇐) Deﬁne (s, t) ∈ R iff [∀φ ∈ WCTL−X
s |= φ ⇔ t |= φ]. We show that R is a WBB.
Suppose s →w s′ and let πi = t →vi
1 ti
1 →vi
2 · · · →vi
ki ti
ki
such that Pki
j=1 vi
j = w be traces out of t of weight equal
to w. Without loss of generality we can skip all traces with
zero-cycles, which means that since the Kripke structure is
ﬁnite there is only a ﬁnite number of traces πi of weight w,
i = 1, . . . , n. Assume that none of these traces match s →w s′,
which means that for each trace πi either (s′, ti
ki) /∈ R or there
exist a j < ki such that (s, ti
j) /∈ R. For each trace πi such
that (s′, ti
ki) /∈ R, i = 1, . . . , k, k ≤ n, there exists a formula
ψi such that s′ |= ψi and ti
ki ̸|= ψi and for each trace πi such
that (s, ti
j) /∈ R, i = k + 1, . . . , n, there exists a formula φi
such that s |= φi and ti
j ̸|= φi.
For a decreasing series of rationals uj such that limj→∞ uj =
w
and
an
increasing
series
of
rationals
yj
such
that
limj→∞ yj = w, we can create a series of formulae φj =
E
V
i∈[1,k] φiU[yj,uj]
V
i∈[k,n] ψi

for which s |= V
j φj, but
t ̸|= V
j φj, contradicting (s, t) ∈ R.
■
Consider a couple of examples of the use of this theorem.
Example 3. Consider Figure 1(a) and 1(b). Let us verify that
s1 and s2 are WBB. Transition s1 →3 s1 and s2 →3 s2
2
have to match each other, which means, we have to prove
that also s1 ≈I s2
2. This is trivially proved, since s1 and s2
2
are the same except for the transition s1 →5 s1
1, which is
matched by s2
2 →3 s2
2 →2 s2
1, since s1
1 ≈I s1
2 ≈I s2
1 trivially.
Transitions s1 →2 s1
2 and s2 →2 s2
1 match each other and
transition s1 →5 s1
1 is matched by s2 →3 s2
2 →2 s2
1, as we
know s1 ≈I s2
2.
We therefore know that any formula that is satisﬁed by either
s1 or s2 is also satisﬁed by the other.
⋄
Example 4. Consider Figure 1(c) and 1(d). We see that s3 and
s4 are not weighted branching bisimilar, since the transition
s4 →1 s4
1 cannot be matched from s3. This means, we can
ﬁnd a distinguishing formula between these two states. We
see that for φ = A(pU[2,5]q), s3 |= φ, but s4 ̸|= φ, since there
is a trace s4 →1 s4
1 →2 s4
2 →3 s4
4 for which the accumulated
weight is 6 before it reaches a state that satisﬁes q.
⋄
We can prove that WBB is a maximal ﬁxed point of a
suitable function FI deﬁned as follows.
Deﬁnition 5. Given a WKS
K = (S, AP, V, →) , deﬁne a
function FI : 2S×S → 2S×S such that given a relation R ⊆
S × S then (s, t) ∈ FI(R) if and only if
•
V(s) = V(t)
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk
tk, such that Pk
i=1 vi = w, (s′, tk) ∈ R and for all
i < k, (s, ti) ∈ R
•
for all t →v t′ there exists s →w1 s1 →w2 · · · →wk
sk, such that Pk
i=1 wi = v, (t′, sk) ∈ R and for all
i < k, (t, si) ∈ R
⋆
The function FI takes in a relation R that identiﬁes pairs
of states believed to be bisimilar and removes all pairs that fail
to be bisimilar in one step, when assuming that the states of
R are bisimilar. This means that the resulting relation is not
necessarily a bisimulation relation, since the assumption can
be wrong. When starting from the assumption that all states are
bisimilar, however, and applying FI until stability, i.e. ﬁnding
a maximal ﬁxed point, we are sure to have WBB.
We now determine the complexity of deciding WBB.
Theorem 2. Deciding WBB on ﬁnite rational WKSs is NP-
hard.
Proof. We use the integer knapsack problem, which is well-
known to be NP-complete [18], and show that it is polynomial
time reducible to the problem of deciding WBB.
In the integer knapsack problem, we are given a ﬁnite set E of
elements which each have a value vi ∈ Z≥0 and a weight wi ∈
Z≥0. We are further given positive integers p and c. Is there
an assignment of positive integers ai such that P
i aivi ≥ p
and P
i aiwi ≤ c? The integer knapsack problem is still NP-
complete if for all i vi = wi, so we want to assign positive
integers ai such that P
i aiwi = c. Let us assume that we have
a set E = {e1, . . . , en} of elements with weights (and values)
{w1, . . . , wn}, and our capacity is c.
The reduction generates two WKSs, as seen in Figure 2, such
that K1 = (S, AP, V, →), where S = {s}, AP = ∅, V(s) = ∅
and →= {(s, w1, s), . . . , (s, wn, s)} and K2 = (S, AP, V, →),
where S = {t, t′}, AP = ∅, V(t) = V(t′) = ∅ and →=
14
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

s
w1
wn
t
w1
wn
t′
w1
wn
c
Figure 2. Two WKSs K1 and K2 that are generated by reduction.
{(t, w1, t), . . . , (t, wn, t), (t′, w1, t′), . . . , (t′, wn, t′), (t, c, t′)}.
We demonstrate that there is a solution to the integer knapsack
problem if and only if the two states s and t are WBB.
(⇒) Suppose there exists a set of integers {k1, . . . , kn}
such that P kiwi = c. If we ignore the transition t →c t′ the
three states s, t and t′ are WBB. Hence the only reason why
s and t should not be WBB is if s cannot match the transition
t →c t′. But since, there exists a set {k1, . . . , kn} such that
P kiwi = c, s can do a series of transitions accordingly and
match transition t →c t′.
(⇐) Suppose the transition t →c t′ can be matched by
s →w1 s →w2 · · · →wk s such that P wi = c, note that
each →wi can be repeated as many times as necessary. This
is equivalent to the existence of a set {k1, . . . , kn} such that
P kiwi = c providing a solution to the integer knapsack
problem.
■
We have demonstrated that deciding WBB is at least NP-
hard, now let us prove that the problem is contained in NP.
We will need the following theorem, which is a reformulated
instance of a theorem proved by Nyk¨anen and Ukkonen [19].
Theorem 3. Given a WKS K = (S, AP, V, →) , s, t ∈ S and
a target cost k. The problem of deciding whether there exists
a trace in K from s to t of cost exactly k is NP-complete.
Theorem 4. Deciding WBB on a ﬁnite rational WKSs is
contained in NP.
Proof. WBB is the maximal ﬁxed point of FI, so we apply FI
repeatedly on S × S until the set of bisimilar states stabilizes.
Each time Fk
I (S × S) ̸= Fk−1
I
(S × S), meaning at least one
pair of states has been removed, we will apply FI once more.
This can be done a maximum of n = |S| times, before the
resulting set is empty. In each iteration, we have to check for
both state in each pair of bisimilar states if every transition
is matched. This means that for each state s we will for each
other state t (if (s, t) ∈ Fi
I ) check each transition s →w s′
and see if it can be matched by a trace from t as required.
This means that we will try to ﬁnd a path of cost w from t to
each of the states t′, where (s′, t′) ∈ Fi
I . This means applying
Theorem 3 at most n times for each transition s →w s′ for
each t. Since the problem can be solved by applying an NP-
complete problem a polynomial number of times the problem
is in NP.
■
By Theorem 2 and Theorem 4, we have the following
result.
Theorem 5. Deciding WBB on a ﬁnite rational WKSs is NP-
complete.
IV.
WCTL WITHOUT NEXT, UNIVERSALITY AND LOWER
BOUNDS
Using the entire WCTL without the next operator leads to
a deﬁnition of a bisimulation relation that is NP-complete. We
therefore limit ourselves further, to see if we can ﬁnd a relation
which is decidable in polynomial time, while still preserving
interesting properties in the logic. We limit ourselves to a
fragment of WCTL called EWCTL≤
−X in which we only
concentrate on upper bounds and the existential operator, while
still leaving out the next operator. This will enable us to
reason about a maximal bound on the cost of arriving to some
behavior, while preserving original behavior on the way.
Deﬁnition 6 (Syntax of EWCTL≤
−X). Let AP be a set of
atomic propositions. The syntax of EWCTL≤
−X is given by
φ ::= p | ¬p | φ1 ∧ φ2 | φ1 ∨ φ2 | E(φ1U≤uφ2),
where p ∈ AP and u ∈ Q≥0.
⋆
The semantics of EWCTL≤
−X is given by the same sat-
isﬁability relation as the semantics for WCTL, since we can
substitute any upper bound ≤ u with an interval [0, u].
Let us now develop a notion of branching simulation, such
that the simulation and the logic induces the same relation on
ﬁnite WKSs. We deﬁne the simulation from the same idea as
before, but now demand the cost of the matching trace to be
lower than the cost of the transition.
Deﬁnition 7. Given a WKS K = (S, AP, V, →) an existential
bounded simulation (EBS) is a relation R ⊆ S × S, such that
whenever (s, t) ∈ R
•
V(s) = V(t),
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk tk
such that Pk
i=1 vi ≤ w, (s′, tk) ∈ R and ∀i < k,
(s, ti) ∈ R.
If there exists an existential bounded simulation relating
s and t, we say that s and t are existential bounded similar
and denote it by s ≤E t. The relation ≤E will henceforth be
referred to as existential bounded similarity (EBS).
⋆
The following theorem shows that indeed EWCTL≤
−X and
EBS induce the same relation on ﬁnite WKSs. The proof of
the following theorem is as the proof of Theorem 1.
Theorem 6. Let K = (S, AP, V, →) be a ﬁnite WKS. Then
for all s, t ∈ S
s ≤E t iff [∀φ ∈ EWCTL≤
−Xs |= φ ⇒ t |= φ].
Consider two examples of the use of this theorem.
Example 5. Consider Figure 1(c) and 1(e). We can verify that
s3 and s5 are EBS. Transition s3 →2 s3
2 can be matched by
s5 →1 s5
2, since clearly s3
2 ≤E s5
2. Transition s3 →2 s3
1 can
be matched by s5 →1 s5
1 if s3
1 ≤E s5
1. We only have one
transition s3
1 →3 s3
2 which can be matched by s5
1 →1 s5
3 →1 s5
2
if s3
1 ≤E s5
3. There is the same transition s3
1 →3 s3
2 which can
be matched by s5
3 →1 s5
2.
⋄
Example 6. Consider Figure 1(c) and 1(d), s4 and s3 are not
EBS, since the transition s4 →1 s4
1 can only be matched
from s3 by doing nothing. Then, we need s4
1 ≤E s3, but the
transition s4
1 →1 s4
3 cannot be matched from s3. This means,
we can ﬁnd a distinguishing formula, such that s4 |= φ, but
s3 ̸|= φ. We choose φ = E(pU≤1E(pU≤1q)) to exemplify
this.
⋄
To compute EBS, we need to compute the maximal ﬁxed
point over a suitable function, deﬁned in the canonical way. We
can now ﬁnd all simulating states as ≤E= FM
E (S×S) for some
15
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

natural number M. This gives us a way of computing ≤E by
simply computing the non-increasing sequence F0
E(S × S) ⊇
F1
E(S × S) ⊇ F2
E(S × S) ⊇ · · · until it stabilizes.
Let us sketch an algorithm based upon this principle.
Algorithm 1. In a WKS
K = (S, AP, V, →) let n be the
number of states and m the number of transitions. We compute
≤E iteratively as described. The algorithm will stop after at
most n2 iterations, since we will remove at least one pair for
each iteration, starting from F0
E(S × S) = S × S.
Let Fn
E (S × S) be given. For each state s let Kn
s be the
projection of K to the set {t | (s, t) ∈ Fn
E (S × S)}. In Kn
s ,
we may by classic algorithm in O(n3) compute the shortest
path between all pairs of states. We write t →n,s
w
t′ if w is the
length of the shortest such path between t and t′.
We can now calculate our next iteration; for each (s, t) ∈
Fn
E (S × S), for each s →w s′, we check whether there
exists a t′ such that t
→s,n
v
t′ and t′
→v′
t′′ where
v + v′ ≤ w and (s′, t′′) ∈ Fn
E (S × S). If there exist such
t′ then (s, t) ∈ Fn+1
E
(S ×S) otherwise (s, t) /∈ Fn+1
E
(S ×S).
The check can be performed in O(n2). Thus, overall, ≤E can
be computed in O(n2 · (n · n3 + m · n · n2)) ≤ O(n7). We can
assume m ≤ n2, since we are only interested in the cheapest
transition between two states, so if two or more exist we will
disregard everyone but the cheapest.
V.
WCTL WITHOUT NEXT, EXISTENTIALITY AND LOWER
BOUNDS
We have now established a relation for a fragment of
WCTL with upper bounds and only the existential quantiﬁer
over paths, but we would like to be able to reason about
the universal quantiﬁer, which will allow us to model safety
properties, e.g., cost-bounded liveness properties. Let us look
at a fragment with this quantiﬁer instead.
Deﬁnition 8 (Syntax of AWCTL≤
−X). Let AP be a set of
atomic propositions. The syntax of AWCTL≤
−X is given by
φ ::= p | ¬p | φ1 ∧ φ2 | φ1 ∨ φ2 | A(φ1U≤uφ2),
where p ∈ AP and u ∈ Q≥0.
⋆
The semantics of AWCTL≤
−X is given by the same sat-
isﬁability relation as the semantics for WCTL, since we can
substitute any upper bound ≤ u with an interval [0, u].
Let us now develop a notion of weighted branching simulation,
such that whatever relation is induced by the simulation is also
induced by the logic. The idea of the simulation is basically
the same as for EBS except the simulating state has to have a
trace that is more expensive than the transition it matches.
Deﬁnition 9. Given a WKS K = (S, AP, V, →) a universal
bounded simulation (UBS) is a relation R ⊆ S × S, such that
whenever (s, t) ∈ R
•
V(s) = V(t),
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk tk
such that Pk
i=1 vi ≥ w, (s′, tk) ∈ R and ∀i < k,
(s, ti) ∈ R.
If there exists a universal bounded simulation relating s and
t, we say that s and t are universal bounded similar and denote
it by s ≤A t. The relation ≤A will henceforth be referred to
as universal bounded similarity (UBS).
⋆
s
∅
s1
{p}
3
t
∅
t1
∅
t2
{p}
3
2
2
Figure 3. A WKS K. The states s and t are not universally bounded similar,
but every formula that t satisﬁes is also satisﬁed by s.
The following theorem shows that we can go from UBS
to a relation induced by AWCTL≤
−X on ﬁnite WKSs. The
structure of the proof is as the proof for Theorem 1.
Theorem 7. Let K = (S, AP, V, →) be a ﬁnite WKS. Then
for all s, t ∈ S
if s ≤A t then [∀φ ∈ AWCTL≤
−Xt |= φ ⇒ s |= φ].
Note that we cannot go from a logic induced relation to our
simulation. This is clear from the following counterexample.
Example 7. Consider the WKS K in Figure 3. We will prove
that [∀φ ∈ AWCTL≤
−X if t |= φ then s |= φ, but s ̸≤A t].
Look at all possible traces from s and t;
πs = s →3 s1
πt
1 = t →2 t2
πt
2 = t →3 t1 →2 t2.
We prove that s ̸≤A t. If s ≤A t the transition s →3 s1 has
to be matched from t, this can only be done by πt
2, since πt
1
has too low a cost. Then either s1 ≤A t1 or both s ≤A t1
and s1 ≤A t2. The ﬁrst case is impossible since the atomic
propositions are different and the second is impossible, since
t1 does not have a transition of enough cost to match s →3 s1.
Now, we prove that [∀φ ∈ AWCTL≤
−X if t |= φ then s |= φ].
Induction on the structure of φ.
The case t |= A(φ1U≤uφ2): Split in cases u < 3 and u ≥ 3.
If u < 3 then t |= A(φ1U≤uφ2) only if t |= φ2. By induction
s |= φ2 and therefore s |= A(φ1U≤uφ2).
If u ≥ 3 then t |= A(φ1U≤uφ2) if either t |= φ2 or (t |= φ1,
t1 |= φ1 ∧ φ2 and t2 |= φ2). In the ﬁrst case by induction
s |= φ2, hence s |= A(φ1U≤uφ2). In the second case by
induction s |= φ1 and since s1 ≤A t2 by Theorem 7 s1 |= φ2,
therefore s |= A(φ1U≤uφ2).
⋄
Consider an example of how we can use Theorem 7.
Example 8. Consider Figure 1(c) and 1(e). We show that s3
and s5 are UBS. Transition s3 →2 s3
2 can be matched by
s5 →1 s5
1 →1 s5
3 →1 s5
2, if s3 ≤E s5
1 and s3 ≤E s5
3. Let us
prove that s3 ≤E s5
3. Transition s3 →2 s3
2 can be matched by
s5
3 →1 s5
3 →1 s5
3 →1 s5
2. Transition s3 →2 s3
1 can be matched
by s5
3 →1 s5
3 →1 s5
3 →1 s5
3. Let us prove that s3 ≤E s5
1.
Transition s3 →2 s3
2 can be matched by s5
1 →1 s5
3 →1 s5
3 →1
s5
2, since s3 ≤E s5
3. Transition s3 →2 s3
1 can be matched by
s5
1 →1 s5
3 →1 s5
3 →1 s5
3, since s3 ≤E s5
3. Let us return to the
main problem s3 ≤E s5. We only need to prove that transition
s3 →2 s3
1 can be matched. We can match with s5 →1 s5
1 →1
s5
3 →1 s5
3. Therefore s3 and s5 satisfy the same formulae.
⋄
As before, we can deﬁne a suitable function FA in the
canonical way such that the UBS is a maximal ﬁxed point
over this function. Again, we can ﬁnd all simulating states
as ≤A= FM
A (S × S) for some natural number M. This again
gives us a way of computing ≤A by simply computing the non-
increasing sequence F0
A(S ×S) ⊇ F1
A(S ×S) ⊇ F2
A(S ×S) ⊇
16
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

· · · until it stabilizes. To ﬁnd ≤A, we can use Algorithm 1,
only we have to ﬁnd the longest path between states instead
of the shortest.
VI.
DISTANCES
Since the notion of simulation and bisimulation is rather
restrictive, we turn our attention to distances between systems.
When working with weighted systems, it can often be bene-
ﬁcial to describe how well one system approximates another
instead of only reasoning about systems that are behaviorally
equivalent, since miniscule differences in weight will render
two systems not equivalent. The distances are based upon the
idea of two systems being the same to a certain degree, but
deviating by a percentage ε. To compare behavior for a system
at distance ε from another system, we introduce an ε-expansion
of formulae, which is deﬁned in the following recursive way.
Deﬁnition 10 (ε-expansion). The recursive ε-expansion of for-
mulae is given for an arbitrary ε ∈ Q≥0 by the following
•
If φ = x then φε = x, where x is a literal
•
If φ = φ1 ∧ φ2 then φε = φε
1 ∧ φε
2
•
If φ = E(φ1UIφ2) then φε = E(φε
1UIεφε
2)
•
If φ = A(φ1UIφ2) then φε = A(φε
1UIεφε
2),
where Iε is deﬁned as Iε = [l, u]ε = [l(1 − ε), u(1 + ε)].
⋆
Consider an ε-relation that takes WBB as a starting point.
Deﬁnition 11. Given a WKS K = (S, AP, V, →) and an ε ∈
R≥0 deﬁne a relation Rε ⊆ S ×S such that whenever (s, t) ∈
Rε then
•
V(s) = V(t)
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk tk,
such that Pk
i=1 vi ∈ [w(1−ε), w(1+ε)], (s′, tk) ∈ Rε
and for all i < k, (s, ti) ∈ Rε
If s and t are in this relation, we denote it by s ≈ε
I t.
⋆
We can now deﬁne a weighted branching distance.
Deﬁnition 12. Given a WKS K = (S, AP, V, →) and a rela-
tion Rε as described in Deﬁnition 11, the weighted branching
distance (WBD) between two states s, t ∈ S is given by
dI(s, t) = infε{(s, t) ∈ Rε}
⋆
Let us restrict WCTL−X to only encompass the existential
quantiﬁer, which also leads to the removal of negation on
formulae, and thereby get the following logic.
Deﬁnition 13 (Syntax of EWCTL−X). Let AP be a set of
atomic propositions. The syntax of EWCTL−X is given by
φ ::= p | ¬p | φ1 ∧ φ2 | φ1 ∨ φ2 | E(φ1UIφ2),
where p ∈ AP and I = [l, u], where l, u ∈ Q≥0.
⋆
The semantics of EWCTL−X is given by the same satisﬁ-
ability relation as the semantics for WCTL−X.
We prove that with the ε-expansion of formulae in EWCTL−X,
we can characterize the properties of WKSs up to WBD.
Theorem 8. Let K = (S, AP, V, →) be a ﬁnite WKS. Then
for all s, t ∈ S
s ≈ε
I t iff ∀ε′ ∈ Q≥0, ε ≤ ε′
[∀φ ∈ EWCTL−Xs |= φ ⇒ t |= φε′].
Proof. (⇒) Suppose s ≈ε
I t. Induction on the structure of φ.
The case φ = E(φ1UIφ2): Suppose s |= φ. By deﬁnition
s |= φ iff there exists s →w1 s1 →w2 · · · →wk sk → · · · ,
such that sk |= φ2, ∀i < k, si |= φ1 and Pk
i=1 wi ∈ I. As
s ≈ε
I t, we have that for every step si →wi+1 si+1 there exists
ti →vi
1 ti
1 →vi
2 · · · →vi
hi ti+1 such that ti+1 ≈ε
I si+1, ∀j <
hi+1, ti
j ≈ε
I si and Phi+1
j=1 vi+1
j
∈ [wi+1(1 − ε), wi+1(1 + ε)].
By induction, each state ti
j
|= φε′
1 , the state tk
|= φε′
2
and Pk
i=1
Phi
j=1 vi
j ∈ [Pk
i=1 wi(1 − ε), Pk
i=1 wi(1 + ε)] ⊆
[Pk
i=1 wi(1 − ε′), Pk
i=1 wi(1 + ε′)] so by deﬁnition t |= φε′.
The case φ = A(φ1UIφ2): Suppose s |= φ. If t ̸→ then
trivially t |= φε′. Otherwise suppose t →v1 t1 →v2 · · · . As
s ≈wbb t, we have that for every step ti →vi+1 ti+1 there exists
si →wi+1
1
si
1 →wi+1
2
· · · →wi+1
ki
si+1 such that si+1 ≈wbb
ti+1, ∀j
< ki, si
j
≈wbb
ti and vi+1
∈ [Pki
j=1 wi
j(1 −
ε), Pki
j=1 wi
j(1 + ε)] ⊆ [Pki
j=1 wi
j(1 − ε′), Pki
j=1 wi
j(1 + ε′)].
Since s |= A(φ1UIφ2), by deﬁnition for all s →w1 s1 →w2
· · · →wk sk → · · · exists sk |= φ2, such that ∀j < k, sj |= φ1
and Pk
j=1 wj ∈ I. Therefore there exists an h such that
sk ≈I th and ∀i < h, ∃j < k, ti ≈I sj and Ph
i=1 vi ∈
[Pk
i=1
Pki
j=1 wi
j(1−ε), Pk−1
i=0
Pki
j=1 wi
j(1+ε)]. By induction,
for all t →v1 t1 →v2 · · · →vh th → · · · , there exists th, such
that th |= φε′
2 , ∀i < h, ti |= φε′
1 and Ph
i=1 vi ∈ Iε′ so by
deﬁnition t |= φε′.
(⇐) Deﬁne (s, t) ∈ R iff [∀φ ∈ EWCTL−X if s |=
φ then t |= φε]. We show that R is a WBD.
Suppose s →w s′ and let πi = t →vi
1 ti
1 →vi
2 · · · →vi
ki ti
ki
such that Pki
j=1 vi
j ∈ [w(1 − ε), w(1 + ε)] be traces from t of
weight within [w(1−ε), w(1+ε)]. Without loss of generality,
we can skip traces with zero-cycles, which means that since
the WKS is ﬁnite there is a ﬁnite number of traces πi of weight
within [w(1−ε), w(1+ε)], i = 1, . . . , n. Assume none of these
traces match s →w s′, which means that for each πi either
(s′, ti
ki) /∈ R or there exists a j < ki such that (s, ti
j) /∈ R.
For each πi such that (s′, ti
ki) /∈ R, i = 1, . . . , k, k ≤ n, there
exists a formula ψi such that s′ |= ψi and ti
ki ̸|= ψε
i and for
each πi such that (s, ti
j) /∈ R, i = k + 1, . . . , n, there exists a
formula φi such that s |= φi and ti
j ̸|= φε
i.
This means that for a decreasing series of rationals uj such
that limj→∞ uj = w and an increasing series of rationals
yj such that limj→∞ yj = w, we can create a series of
formulae φj = E
V
i∈[1,k] φiU[yj,uj]
V
i∈[k,n] ψi

for which
s |= V
j φj, but t ̸|= V
j(φj)ε contradicting (s, t) ∈ R.
■
Consider the following example, illustrating the use of The-
orem 8, and the rational of letting the distance be asymmetric.
Example 9. Consider Figure 1(c) and 1(d). In Example 4 we
showed that s3 and s4 was not WBB. When looking at the
distance between them, we see that d(s3, s4) = 0, as s4 can
exactly match s3. Notice, however, that d(s4, s3) = 1. We
trivially match s4 →2 s4
2 →3 s4
4 with s3 →2 s3
1 →3 s3
2.
Transition s4 →1 s4
1 has to be matched with a transition of
weight within [1(1 − 1), 1(1 + 1)] = [0, 2], which is done
by matching with no transition from s3 (cost 0). We have to
show that s4
1 ≈1
I s3. The only transition that we cannot trivially
match is s4
1 →1 s4
3, which has to be matched by a transition
17
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

of weight within [0, 2], it can be matched by s3 →2 s3
2.
This means that whichever formulae in the logic that s3
satisﬁes is also satisﬁed by s4, but the formulae satisﬁed by s4
are only guaranteed to be satisﬁed by s3 in their ε-extensions.
For instance s4 satisﬁes E(pU[0,1]E(pU[0,1]q)), but s3 does
not. It does however satisfy the ε-extension of the formula
E(pU[0,2]E(pU[0,2]q)).
⋄
Consider EBS as our starting point to deﬁne an ε-relation.
Deﬁnition 14. Given a WKS K = (S, AP, V, →) and an ε ∈
R≥0 deﬁne a relation Rε ⊆ S ×S such that whenever (s, t) ∈
Rε then
•
V(s) = V(t)
•
for all s →w s′ there exists t →v1 t1 →v2 · · · →vk tk,
such that Pk
i=1 vi ≤ w(1 + ε), (s′, tk) ∈ Rε and for
all i < k, (s, ti) ∈ Rε
If s and t are in this relation, we denote it by s ≤ε
E t.
⋆
We can now deﬁne an existential bounded distance.
Deﬁnition 15. Given a WKS
K = (S, AP, V, →) and a
relation Rε as described in Deﬁnition 14, the existential
bounded distance (EBD) between states s, t ∈ S is given by
d≤(s, t) = infε{(s, t) ∈ Rε}
⋆
Let us return to the logic EWCTL≤
−X and prove that with
ε-expansions the logic characterizes EBD. The proof of the
theorem has the same structure as the proof of Theorem 8.
Theorem 9. Let K = (S, AP, V, →) be a ﬁnite WKS. Then
for all s, t ∈ S
s ≤ε
E t iff ∀ε′ ∈ Q≥0, ε ≤ ε′
[∀φ ∈ EWCTL≤
−Xs |= φ ⇒ t |= φε′].
It should be noted that neither WBD nor EBD are
(hemi)metrics as is usually the case, which stems from the
relativism in the deﬁnition of the distances. Future work should
include a classiﬁcation of these.
VII.
CONCLUSION AND FUTURE WORK
We have extended the idea of branching bisimulation with
weights in three distinct ways, relating to different fragments
of WCTL. We initially removed the next operator from the
logic, to allow for systems to be related even though they
performed speciﬁc behavior with different number of transi-
tions. The weighted branching bisimulation relation that was
characterized by this logic, turned out to be NP-complete,
which prompted us to look into other fragments of the logic.
We proved that for fragments allowing only upper bounds and
either the existential or the universal quantiﬁer we could decide
the resulting simulation relations in polynomial time.
We furthermore expanded these concepts into distance-like
relations. The distances build upon the ideas of the different
relations and were also characterized by fragments of WCTL,
when we introduced a relative expansion on formulae. Even
if the distances are not (hemi)metrics, they can however be
meaningfully interpreted as relative distances.
Notably, this work demonstrates that the real-valued
weights in the models can be described by only involving
rational parameters in the logics. The approximation of reals
by rationals are enough to describe this more general behavior.
This research opens a few promising future work direc-
tions. On one hand, designing a simulation relation which
characterizes the same relations as the logic with the universal
quantiﬁer is problematic and whether such a relation can be
deﬁned at all is an open problem. On the other hand, the
distance-like relations inspired by our semantics fail to satisfy
the triangle inequality. The characterization of such relations
is a promising research direction. Furthermore, computability
and complexity results related to these distances are open.
REFERENCES
[1]
R. Milner, A Calculus of Communicating Systems, ser. Lecture Notes
in Computer Science.
Springer, 1980, vol. 92.
[2]
C. A. R. Hoare, “Communicating sequential processes,” Commun. ACM,
vol. 21, no. 8, pp. 666–677, 1978.
[3]
J. A. Bergstra and J. W. Klop, “Algebra of communicating processes
with abstraction,” Theor. Comput. Sci., vol. 37, pp. 77–121, 1985.
[4]
R. Milner, Communication and concurrency.
Prentice hall New York
etc., 1989, vol. 84.
[5]
D. Park, “Concurrency and automata on inﬁnite sequences,” in The-
oretical Computer Science, ser. Lecture Notes in Computer Science,
P. Deussen, Ed.
Springer Berlin Heidelberg, 1981, vol. 104, pp. 167–
183.
[6]
M. Hennessy and R. Milner, “Algebraic laws for nondeterminism and
concurrency,” J. ACM, vol. 32, no. 1, pp. 137–161, Jan. 1985.
[7]
M. Browne, E. Clarke, and O. Grmberg, “Characterizing ﬁnite kripke
structures in propositional temporal logic,” Theoretical Computer Sci-
ence, vol. 59, no. 1, pp. 115 – 131, 1988.
[8]
R. J. van Glabbeek and W. P. Weijland, “Branching time and abstraction
in bisimulation semantics,” J. ACM, vol. 43, no. 3, pp. 555–600, 1996.
[9]
R. De Nicola and F. Vaandrager, “Three logics for branching bisimula-
tion,” J. ACM, vol. 42, no. 2, pp. 458–487, Mar. 1995.
[10]
K. G. Larsen and R. Mardare, “Complete proof systems for weighted
modal logic,” Theor. Comput. Sci., vol. 546, pp. 164–175, 2014.
[11]
K. G. Larsen, R. Mardare, and B. Xue, “Decidability and expressiveness
of recursive weighted logic,” in Perspectives of System Informatics - 9th
International Ershov Informatics Conference, PSI 2014, St. Petersburg,
Russia, June 24-27, 2014. Revised Selected Papers, 2014, pp. 216–231.
[12]
P. Buchholz and P. Kemper, “Model checking for a class of weighted
automata,” Discrete Event Dynamic Systems, vol. 20, no. 1, pp. 103–
137, 2010.
[13]
C. Thrane, U. Fahrenberg, and K. G. Larsen, “Quantitative analysis
of weighted transition systems,” The Journal of Logic and Algebraic
Programming, vol. 79, no. 7, pp. 689 – 703, 2010, the 20th Nordic
Workshop on Programming Theory (NWPT 2008).
[14]
K. G. Larsen, U. Fahrenberg, and C. R. Thrane, “Metrics for weighted
transition systems: Axiomatization and complexity,” Theor. Comput.
Sci., vol. 412, no. 28, pp. 3358–3369, 2011.
[15]
U.
Fahrenberg,
C.
Thrane,
and
K.
G.
Larsen,
“Distances
for
weighted transition systems: Games and properties,” arXiv preprint
arXiv:1107.1205, 2011.
[16]
L. de Alfaro, M. Faella, and M. Stoelinga, “Linear and branching system
metrics,” IEEE Trans. Software Eng., vol. 35, no. 2, pp. 258–273, 2009.
[17]
U. Fahrenberg, K. G. Larsen, and C. Thrane, “A quantitative charac-
terization of weighted kripke structures in temporal logic,” Computing
and Informatics, vol. 29, no. 6+, pp. 1311–1324, 2012.
[18]
M. R. Garey and D. S. Johnson, Computers and Intractability; A Guide
to the Theory of NP-Completeness.
New York, NY, USA: W. H.
Freeman & Co., 1990.
[19]
M. Nyk¨anen and E. Ukkonen, “The exact path length problem,” J.
Algorithms, vol. 42, no. 1, pp. 41–53, Jan. 2002.
18
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-466-4
COMPUTATION TOOLS 2016 : The Seventh International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

