Multi-Criteria Test Case Prioritization Using Fuzzy Analytic Hierarchy Process
Sahar Tahvili∗†, Mehrdad Saadatmand∗, Markus Bohlin∗
∗Swedish Institute of Computer Science (SICS), SICS Swedish ICT V¨aster˚as AB, Sweden
†M¨alardalen University, V¨aster˚as, Sweden
Email: {sahart, mehrdad, markus.bohlin}@sics.se
Abstract—One of the key challenges in software testing today is
prioritizing and evaluating test cases. The decision of which test
cases to design, select and execute ﬁrst is of great importance,
in particular considering that this needs to be done within tight
resource constraints on time and budget. In practice, prioritized
selection of test cases requires the evaluation of different test case
criteria, and therefore, test case prioritization can be formulated
as a multi-criteria decision making problem. As the number
of decision criteria grows, application of a systematic decision
making solution becomes a necessity. In this paper, we propose
an approach for prioritized selection of test cases by using the
Analytic Hierarchy Process (AHP) technique. To improve the
practicality of the approach in real world scenarios, we apply
AHP in a fuzzy environment so that criteria values can be
speciﬁed using fuzzy variables when precise quantiﬁed values
are not available. One of the advantages of the proposed decision
making process is that the deﬁned criteria with the biggest and
most critical role in priority ranking of test cases is also identiﬁed.
We have applied our approach on an example case in which
several test cases for testing non-functional requirements in a
systems are deﬁned.
Keywords–Software testing, Test case prioritization, MCDM,
Fuzzy AHP, NFR, Fault detection.
I.
INTRODUCTION
As the role of software systems in our daily life grows, it
becomes more and more important to evaluate and guarantee the
quality of such products and ensure that they correctly operate
and provide their expected functionality. One way toward this
goal is testing of the software product before releasing it to the
customers. In simple terms, testing basically means execution
of the software system and code with controlled input, in order
to evaluate its quality and identify potential problems in it.
Through testing, we can increase our conﬁdence in the quality
of the product.
In this context, it is reasonable to assume that the more tests
that are performed out of a diverse and high-quality test suite,
the greater should be our conﬁdence in the product quality be.
But in practice, there is usually limited resources (in terms of
time, budget, personnel, etc.) available and allocated for testing
activities.
Among different testing activities, our focus in this paper,
is on the prioritization of test cases in a test suite, regardless of
how they are created (i.e., manually implemented, automatically
generated, or a mixed approach). Considering such resource
limitations, it becomes very important that from all possible
test cases that can be considered for a system, a good subset,
which ﬁts the available resources will be selected. Selection of
appropriate test cases from a test suite can be done based on a
number of different criteria. Considering that in practice and
in industrial settings a test suite can consist of a large number
of different test cases, it is necessary to apply a systematic
approach for the selection of appropriate test cases (based on
the identiﬁed criteria) from the set of all test cases existing in
the test suite.
Generally, the term test case selection is used to refer to
the techniques which aim to reduce the number of test cases
that are executed. Test case prioritization techniques, on the
other hand, are used to order test cases in a way that the most
important ones, i.e., those which can lead to a higher and
increased rate of fault detection are run earlier [1]–[3]. Test
case prioritization can be particularly necessary in performing
regression testing which is also an expensive testing process [2],
[4] where (some) test cases are selected and executed several
times.
In [5], we have introduced an approach for prioritization
of test cases based on the result from model-based trade-
off analysis of non-functional requirements. In that approach,
by performing analysis on the model of non-functional re-
quirements, parts of the system that can have more severe
problems with respect to the satisfaction of such requirements
are identiﬁed. This is done by calculating a deviation indicator
value for non-functional requirements as part of the model
analysis.
Then, assuming that a cost-effort value for each test case and
a total cost-effort budget to perform testing activities are known,
we prioritize test cases that target requirements with higher
deviation indicator value (thus potentially more problematic
parts of the system) while ﬁtting the total cost-effort budget
available (prioritization and selection).
In this paper, the test case prioritization part of our work
in [5] is extended to enable prioritization decisions based
on multiple criteria. To enable this, we apply the Analytic
Hierarchy Process (AHP) technique. The importance of multi-
criteria test case prioritization solutions is also recognized and
emphasized in the literature, see for example [6].
Since in practice it is generally hard or sometimes impos-
sible to provide precise values for different criteria [7] and
properties of a test case such as fault detection probability, we
apply AHP in a fuzzy environment so that users can specify
criteria values in the form of fuzzy variables (e.g., high, low,
etc.) and thus make the overall approach more practical and
usable in real scenarios.
The term decision making in a fuzzy environment means
a decision making process in which the goals and/or the
constraints, but not necessarily the system under control, are
fuzzy in nature. This means that the goals and/or the constraints
constitute classes of alternatives whose boundaries are not
sharply deﬁned [8].
290
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

While in this paper a particular set of criteria are selected
based on which prioritization decisions are made, the fuzzy
AHP approach can be well used for any other set and number
of criteria. It should also be noted that in this context, our
test case prioritization approach in this paper, prioritizes and
orders test cases based on various criteria and not necessarily
and merely based on their early rate of fault detection, which
provides thus a broader scope of prioritization than what is
deﬁned, for instance, in [1], [3] for test case prioritization.
Another important property of the approach is that the
most critical decision criterion, i.e., the criterion which has the
biggest role in the ranking of test cases, is also identiﬁed. The
main contributions of the paper are thus the following:
•
a novel multi-criteria test case prioritization method
based on AHP,
•
application of the method in a fuzzy environment to
relax the need of having precise values for criteria,
•
an illustration of the method using a case study on
laptop customization, and
•
a brief analysis and discussion of the results.
The remainder of the paper is structured as follows. In
Section I-A, the related literature is reviewed. Section II gives
the theoretical background for fuzziﬁcation and fuzzy multiple-
criteria decision-making. In Section III, the proposed approach
and suitable test-case properties are described. Section IV gives
an example of applying fuzzy AHP to the testing of non-
functional properties of a customized laptop computer system.
Finally, Section V gives conclusions and recommendation for
future research.
A. Related Work
In [3], [4] the initial problem has been assumed as a
single criterion decision making problem. In [4] test cases have
been prioritized by the rate of fault detection and the authors
used a weighted average of the percentage of faults detected,
which is not a direct measure of the rate of fault detection. In
[3] the authors used a code-coverage based greedy algorithm
for prioritizing the test cases. Since single criterion decision
making is hard to cover a larger or more complex problem,
we investigate multi-criteria prioritization in the present work.
Techniques of multi-criteria decision making are in contrast
able to cover a large number of criteria for several test cases.
We further deﬁne the initial problem in a fuzzy environment by
using the linguistic variables. The effect of the criteria on the
test cases have been interpreted as a fuzzy set which allows
the expression of imprecise properties.
II.
BACKGROUND & PRELIMINARIES
Testing an embedded system is a costly activity in terms of
time and budget consumption. Considering these two limiting
factors in testing of a system and the aim of companies to reduce
time-to-market for their products, only a certain number of test
cases can be selected to execute. In this section, we introduce
AHP as a suitable decision making technique and redeﬁne this
method in a fuzzy environment. The AHP applies a Decision
Support System (DSS) model in selection of alternatives. DSS
is a computer based information system which supports data
mining, decision modelling and prioritization to solve structured
and unstructured problems [9].
A. Fuzziﬁcation
Fuzzy truth represents membership in vaguely deﬁned
sets, and variables over these sets are called fuzzy variables.
From a user perspective, fuzzy properties are often described
using linguistic variables. This section outlines the process of
transforming a linguistic value into a fuzzy value. For a full
introduction to fuzzy mathematics [10].
Deﬁnition 1: A linguistic variable indicates a variable
whose values are words or sentences in a natural or artiﬁcial
language [11].
As an example, a fuzzy property such as age could be described
using the values “young”, “fairly old”, and “middle-aged”.
Fuzziﬁcation consists of the process of transforming the
linguistic variables to fuzzy sets [12]. We use grade of
membership to associate a value, indicating the degree of truth,
to each linguistic term. Some basic concepts of fuzzy logic
which are relevant for this work is based on the deﬁnitions
provided by Zadeh [13], Yun Shi [12], Yang [14] and Kerre
[15], and are revisited here brieﬂy.
Deﬁnition 2: A fuzzy set is a pair (A, mA) where A is a
set and mA : A → [0, 1]; for each x ∈ A, mA(x) is called the
grade of membership of x in (A, mA).
The grades of membership of 0 and 1 correspond to the
two possibilities of truth and false in an ordinary set [13].
Let x ∈ A; then x is called fully included in the fuzzy set
(A, mA) if mA(x) = 1 and is called not included if mA(x) = 0.
The set {x ∈ A | mA(x) > 0} is called the support of (A, mA)
and the set is called a kernel, where x is a fuzzy member if
0 < mA(x) < 1 (see [14]).
One-dimensional membership functions have different
shapes such as triangular, trapezoidal or Gaussian shape. In
this paper, we use ﬁve triangular-shaped membership functions,
illustrated in Figure 1.
mA
0
1
1
3
5
7
9
Very Low
Low
Medium
High
Very High
Figure 1. The ﬁve fuzzy membership functions for the linguistic variables
Deﬁnition 3: A triangular fuzzy number (TFN) can be
deﬁned as a triplet M = (l, m, u) where l, m, u are real
numbers and l indicates low bound, m is modal and u represents
a high bound [16].
B. Fuzzy Multiple Criteria Decision Making
Multi-criteria decision making (MCDM) for structuring
decision problems and evaluating alternatives provides a rich
collection of methods [17]. The decision maker’s role in the
decision making situations is to evaluate the effect of different
criteria on the existing alternatives to choose the best one
among them. In addition, the decision makers will need to
choose an appropriate technique for decision making, which
depends on the problem statement, limitation and constraints.
Since Zadeh and Bellman and a few years later Zimmer-
mann developed the theory of decision support systems in
a fuzzy environment, different techniques such as TOPSIS
291
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

(The Technique for Order of Preference by Similarity to Ideal
Solution), QSPM (Quantitative Strategic Planning Matrix), AHP
and etc., have been developed for solving various multi-criteria
decision making problems [18].
In the present work, we use the fuzzy analytic hierarchy
process (FAHP), for solving our problem. The AHP approach
is an example of a heuristic algorithm, which based on the
comparison matrix with triangular fuzzy numbers (TFN). Here,
we provide a summary of how AHP is extended in a fuzzy
environment.
As some other decision making techniques, AHP has also
some weak points. One of the disadvantages of AHP is possible
disagreement between decision makers. If, for example, more
than one decision maker is working on the decision support
system, different viewpoints about the linguistic variables of
each criterion can complicate matters [19]. Therefore, using
a TFN instead of a constant has been suggested as a good
solution. By using Table I, the decision makers are able to
interpret the linguistic variables in the form of TFNs.
TABLE I. THE FUZZY SCALE OF IMPORTANCE
Fuzzy number
Description
Triangular fuzzy scale
Domain
mA(x)
˜9
Very High
(7, 9, 9)
7 ≤ x ≤ 9
(x − 7)/(9 − 7)
˜7
High
(5, 7, 9)
7 ≤ x ≤ 9
(9 − x)/(9 − 7)
5 ≤ x ≤ 7
(x − 5)/(7 − 5)
˜5
Medium
(3, 5, 7)
5 ≤ x ≤ 7
(7 − x)/(7 − 5)
3 ≤ x ≤ 5
(x − 3)/(5 − 3)
˜3
Low
(1, 3, 5)
3 ≤ x ≤ 5
(5 − x)/(5 − 3)
1 ≤ x ≤ 3
(x − 1)/(3 − 1)
˜1
Very Low
(1, 1, 3)
1 ≤ x ≤ 3
(3 − x)/(3 − 1)
As Table I represents, every linguistic variable has been
deﬁned by a TFN. In some disagreement situations, the
geometric mean of the TFNs can be used as a ﬁnal agreement.
As mentioned earlier, AHP is based on a series of pairwise
comparisons of alternatives and criteria.
In a fuzzy environment, the linguistic variables that we have
deﬁned in Table I based on the standard 9-unit scale [16], are
used to make the pairwise comparisons. The fuzzy comparison
matrix A = (˜aij)n×n can be formulated and structured as [20]:
A =




(111)
˜a12
. . .
˜a1n
˜a21
(111)
. . .
˜a2n
...
...
...
...
˜an1
˜an2
. . .
(111)




(1)
where ˜aij (i = 1, 2, ..., n, j = 1, 2, ..., m) is an element of the
comparison matrix and the reciprocal property of the compari-
son matrix is deﬁned as ˜aij = ˜a−1
ij . The pairwise comparisons
need to be applied on every criteria and alternatives, and the
values for ˜aij come from a predeﬁned set of fuzzy scale value
as showed in Table I. Then ˜aij represents, a TFN in the form
of ˜aij = (lij, mij, uij) and matrix A consists of the following
fuzzy numbers:
˜aij =
 1
i = j
˜1, ˜3, ˜5, ˜7, ˜9
or
˜1−1, ˜3−1, ˜5−1, ˜7−1, ˜9−1
i ̸= j
After we create the comparison matrix A, we need to ﬁnd a
priority vector of matrix A.
To make it, we need to calculate the value of fuzzy synthetic
extent ˜Si for each row in matrix A by [16]:
˜Si =
m
X
j=1
˜aij ⊗
"
n
X
i=1
m
X
j=1
˜aij
#−1
(2)
where ˜aij is a TFN, ⊗ is the fuzzy multiplication operator and:
m
X
j=1
˜aij =
 m
X
j=1
lij,
m
X
j=1
mij,
m
X
j=1
uij
!
, ∀i = 1, 2, ..., n,
(3)
also
"
n
X
i=1
m
X
j=1
˜aij
#−1
=
 
1
nP
i=1
m
P
j=1
uij ,
1
nP
i=1
m
P
j=1
mij ,
1
nP
i=1
m
P
j=1
lij
!
(4)
now we can compute the degree of possibility for the TFNs.
Deﬁnition 4: Let ˜a1 = (l1, m1, u1) and ˜a2 = (l2, m2, u2)
be two TFNs, the degree of possibility of ˜a1 to ˜a2, V (˜a2 ≥ ˜a1),
can be obtained as [16]:
V (˜a2 ≥ ˜a1) =







1
if m2 ≥ m1,
0
if l1 ≥ u2,
l1 − u2
m2 − u2 + m1 − l1
otherwise.
(5)
then the degree of possibility for a convex fuzzy number can
be calculated by:
V (˜a2 ≥ ˜a1) = hgt(˜a1 ∩ ˜a2) =
l1 − u2
m2 − u2 + m1 − l1
= d (6)
where d is the ordinate of the highest intersection point between
˜a1 and ˜a2 (see Figure 2) and the term hgt indicates the height
of fuzzy numbers on the intersection of ˜a1 and ˜a2 (see [16]).
0
1
V (˜a2 ≥ ˜a1)
l2
m2
m1
˜a2
˜a1
d
u1
xd
l1
u2
Figure 2. The degree of possibility for ˜a2 ≥ ˜a1
Point xd in Figure 2 indicates the point in the domain of ˜a1
and ˜a2 where the ordinate d is found [16]. Finally, we measure
the weight vector for the criteria, assuming:
d′(Ai) = min V ( ˜Si ≥ ˜Sj), j = 1, 2, ..., n, j ̸= i
where Ai(i = 1, 2, . . . , m) are the m decision alternatives and
n is the number of criteria, then the weight vector is obtained
by [16]:
W ′(Ai) = (d′(A1), d′(A2), ..., d′(Am))T , Ai(i = 1, 2, ..., m)
(7)
By normalizing Eq. (7) we are able to compute the
292
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

normalized weight vectors [21]:
W(Ai) = (d(A1), d(A2), ..., d(An))T
(8)
where W is a non-fuzzy number and represents the arrangement
of the alternatives.
Also by dividing the normalized weight for every criteria
on the sum of the normalized weight vectors, we are able to
compute the importance degrees of the criteria:
WCj =
W(Aj)
Pn
i=1 W(Ai), j = 1, ..., n
(9)
where WCj represents the importance degrees of a criterion
and n is the number of criteria.
In the next section through an example, we use FAHP by
the mentioned equations for solving a multi criteria decision
making problem.
III.
PROPOSED APPROACH
In this section, we describe our approach on how to use
FAHP to prioritize test cases. AHP serves as a powerful tool
in calculating weights to solve a multi-criteria decision making
problem, but this method is not able to handle uncertainty
in the decision problems and also ranking of AHP is partly
imprecise [22]. To solve decision making problems which
consist of uncertainty and vagueness, fuzzy sets provides a
pairwise comparison as an extension which provides a more
accurate description of the linguistic variables within the process
of decision making [22].
We summarize the steps of our approach for solving a
typical DSS problem in the following points:
1)
Criteria Identiﬁcation
2)
Alternative Determination
3)
Effect Measurement
4)
Fuzziﬁcation
5)
Apply AHP Technique for DSS
In the ﬁrst step of the proposed approach, we need to identify
different criteria which have direct effect on the alternatives, a
typical decision making problem can be deﬁned as single or
multiple criteria.
In the second step, we deﬁne and analyse some possible
solutions which are referred to the alternatives.
In the third step, we measure the effect of the criteria on
the every single alternatives, to perform this part, we can use
linguistic or numerical variables, which depends on the decision
making situation.
In the fuzziﬁcation part, we interpret our measurement into
a fuzzy set by using fuzzy rules and reasoning. Note that the
fuzziﬁcation part only applies to the linguistic variables, if we
have some numerical or sharp values for the effect measurement
part, we jump to the last step, which is applying a decision
making technique to solve the initial problem.
As last step, we suggest AHP technique for DSS, other
decision making technique such as TOPSIS, which covers the
fuzzy rules, can be applied in this part.
In our previous work [5], we assumed the cost-effort of the
test case as the only criterion in the decision making process.
The cost-effort estimation for a test case could, for example,
be the time, effort, and functional cost and budget that needs
to be spent to perform each test.
In the present work, we assume a multiple-criteria decision
making problem. The following set of test case properties are
considered in this work as the main criteria for prioritization
of test cases in the form of solving a DSS problem. The
approach is not, however, limited to any particular set of test
case properties as decision making criteria. In different systems
and contexts users can have their own set of key test case
properties based on which prioritization is performed.
•
Cost efﬁciency (C1) is used to capture the cost of
a test case implementation, hardware setup cost, test
case conﬁguration cost (environment parameters), etc.
The higher the cost efﬁciency degree of a test case,
the more favorable it is.
•
Time efﬁciency (C2) is used to refer to a test case
total execution time, test environment setup time and
test case creation time. A test case with higher time
efﬁciency is considered less time-costly.
•
Requirements coverage (C3) represents the number
of requirements tested and covered by the test case.
•
Fault detection probability (C4) indicates the average
probability of detecting a fault by each single test case.
•
Verdict Conclusiveness (C5) shows how conclusive
and informative the verdict and result of a test case is.
This is particularly interesting and more important for
extra-functional aspects of a system where the meaning
of a pass or fail result should be carefully investigated;
for instance, a failure for user-friendliness or scalability
[23].
•
Deviation Indicator (C6) is not per se and directly
a property of a test case but that of a requirement.
We have deﬁned it in our previous work in [5] as the
deviation degree of a requirement’s satisfaction level
from its ideal satisfaction level, i.e., when it is fully
satisﬁed. It is calculated during the analysis of the
requirements model. As it indicates which parts of a
system can potentially have more severe problems with
respect to the satisfaction of the requirements, we also
include and use this property as one of the decision
making criteria in the example case in this paper to
also prioritize for test cases that target requirements
with higher deviation indicator value.
IV.
CASE SCENARIO
In this section, through an example, we show how it
becomes possible to use the result of model-based analysis to
guide testing efforts. Hence, test cases can be prioritized by
applying Fuzzy AHP. The application of the non-functional
requirements (NFR) proﬁle in building and customizing a laptop
computer product, has been simulated by Figure 3. There are
several non-functional requirements that are deﬁned for this
system such as low boot-up time, increased battery life and
security and to satisfy each, several features are used and
applied.
For example, to satisfy the security requirement, having the
option to use the BIOS password checking at start up time and
also ﬁnger print mechanism for authentication are considered.
However, the use of such features has also impacts on other
parts of the system. For example, using a password check during
293
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

Figure 3. Analyzed model of the laptop system (Case Scenario)
the boot-up process affects the requirement to have low boot-
up time negatively. Similarly, adding the ﬁnger print feature
will add to the energy consumption of the system and thus
affects the battery life time. These impacts and dependencies
are established using the NFRImpacts links which are shown
in red colour in Figure 3. The magnitudes of these impacts
are stated on each of these links through the impactValue
property. Customer preferences are captured by setting the
priority properties. To test this system, there are 10 various
test cases that target and cover its different requirements. As
ﬁrst step in the proposed approach, we need to identify the
effective criteria and determine different alternatives.
Let A = {TC1, TC2, . . . , TC10} be the set of test cases
(alternatives) and C = {C1, C2, C3, ..., C6} represents a set of
the criteria that mentioned in proposed approach where C1 =
Cost efﬁciency, C2 = Time efﬁciency, etc.
Figure 4 illustrates the relationships between the criteria
and various test cases, as we see, the situation of decision
making is symmetric where every criteria have a direct effect
on every single test cases. The goal of this DSS problem is test
cases prioritization. In the third step, we measure the effect of
C1
Criteria:
C2
TC1
Alternatives:
C3
TC2
Test Case Prioritization
Goal:
C4
C5
C6
TC3
TC10
...
Figure 4. AHP hierarchy for prioritizing test cases
the criteria on the every single test cases. This effect has been
assumed by the linguistic variables (e.g., low, high, etc.) and
has been summarized in Table II.
TABLE II. THE PAIRWISE COMPARISON MATRIX FOR THE CRITERIA,
WITH VALUES VERY LOW(VL), LOW (L), MEDIUM (M), HIGH (H)
AND VERY HIGH (VH)
Test Case
Req. ID
C1
C2
C3
C4
C5
C6
TC1
RQ2
H
H
VH
H
VH
H
TC2
RQ1
M
M
H
M
M
VH
TC3
RQ1
M
H
H
H
VH
L
TC4
RQ3
VL
H
M
H
H
VH
TC5
RQ2
VH
M
M
VH
H
VH
TC6
RQ3
L
H
VH
H
VH
M
TC7
RQ1
M
L
L
VH
H
H
TC8
RQ3
VL
H
H
M
M
VH
TC9
RQ3
L
VH
VH
M
M
L
TC10
RQ2
VH
H
M
H
VH
M
The data in Table II are an empirical validation of the
criteria effects. In the fuzziﬁcation phase (step 4), we interpret
the effect of the various criteria on the test cases to a fuzzy
set, to do these, Figure 1 and Table I have been used. As last
step of the proposed approach, we apply AHP technique for
prioritizing the test cases by using Eqs. (1) to (8).
The fuzzy pairwise comparison matrices for the alternatives
and criteria becomes as follow by using Eq. (1):
C1 =







A1
A2
· · ·
A10
A1
˜1
˜2
. . .
˜2−1
A2
˜2−1
˜1
. . .
˜3
...
...
...
. . .
...
A10
˜2
˜3−1
. . .
˜1







C2 =







A1
A2
· · ·
A10
A1
˜1
˜2−1
. . .
˜5
A2
˜2
˜1
. . .
˜3
..
.
..
.
...
. . .
...
A10
˜5−1
˜3−1
. . .
˜1







C3 =







A1
A2
· · ·
A10
A1
˜1
˜4
. . .
˜1
A2
˜4−1
˜1
. . .
˜1
...
...
...
. . .
...
A10
˜1−1
˜1−1
. . .
˜1







C4 =







A1
A2
· · ·
A10
A1
˜1
˜6
. . .
˜2
A2
˜6−1
˜1
. . .
˜3
...
...
...
. . .
...
A10
˜2−1
˜3−1
. . .
˜1







C5 =







A1
A2
· · ·
A10
A1
˜1
˜8
. . .
˜1
A2
˜8−1
˜1
. . .
˜2
...
...
...
. . .
...
A10
˜6−1
˜3−1
. . .
˜1







C6 =







A1
A2
· · ·
A10
A1
˜1
˜5
. . .
˜9
A2
˜6−1
˜4−1
. . .
˜7
...
...
...
. . .
...
A10
˜9−1
˜8−1
. . .
˜1







TFNs are calculated by using Eq. (3) as explained in the
background section:
n
X
i=1
m
X
j=1
˜aij = (43.1, 72.4, 98.5)
and also Eq. (4) gives us the inverse of numbers:


n
X
i=1
m
X
j=1
˜aij


−1
= (0.023, 0.013, 0.010)
the value of fuzzy synthetic extent ˜Si can be obtained by using
Eq. (2):
S1 = (0.01, 0.09, 0.11), S2 = (0.02, 0.0.24, 0.21)
S3 = (0.01, 0.02, 0.03), S4 = (0.06, 0.23, 0.24)
S5 = (0.03, 0.33, 0.36), S6 = (0.01, 0.15, 0.18)
we determine the weight rating for each criteria by using Eq. (5),
294
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

deﬁne Vij = V ( ˜Si ≥ ˜Sj) then:
V12 = 1, V13 = 1, V14 = 1, V15 = 1, V16 = 1
V21 = 0.67, V23 = 1, V24 = 1, V25 = 1, V26 = 1
...
V61 = 0.66, V62 = 0.48, V63 = 0.20, V64 = 0.90, V65 = 0.07
In this step, we compute the normalized and unnormalized
weights for the criteria by using Eqs. (7), (8). The results have
been summarized in Table III:
TABLE III. THE WEIGHT OF THE CRITERIA
Criteria
Unnormalized Weight
Normalized weight
C1
0.58
0.02
C2
0.67
0.25
C3
0.28
0.01
C4
0.97
0.36
C5
0.02
0.22
C6
0.07
0.10
In the next step we compare the weights for every single
criteria with the alternatives, to avoid lengthy calculations we
summarize the result in Table IV.
TABLE IV. COMPARISON THE WEIGHTS OF ALTERNATIVES WITH
CRITERIA
Criteria
C1
C2
C3
C4
C5
C6
Weight
0.02
0.25
0.01
0.36
0.22
0.10
A1
0.333
0.096
0.460
0.520
0.595
0.409
A2
0.123
0.010
0.121
0.012
0.009
0.203
A3
0.201
0.014
0.198
0.258
0.239
0.257
A4
0.224
0.023
0.332
0.402
0.321
0.298
A5
0.233
0.025
0.351
0.430
0.475
0.319
A6
0.205
0.017
0.207
0.261
0.237
0.252
A7
0.221
0.020
0.210
0.298
0.245
0.264
A8
0.144
0.012
0.132
0.022
0.111
0.218
A9
0.104
0.003
0.110
0.008
0.005
0.098
A10
0.226
0.015
0.232
0.309
0.311
0.248
By normalizing the values in Table IV, we are able to
prioritize the test cases, the result has been illustrated in
Figure 5:
Test case 9
Test case 2
Test case 8
Test case 3
Test case 6
Test case 7
Test case 10
Test case 4
Test case 5
Test case 1
1.
(0.145)
2.
(0.119)
3.
(0.118)
4.
(0.110)
5.
(0.100)
6.
(0.097)
7.
(0.093)
8.
(0.076)
9.
(0.070)
10.
(0.068)
Figure 5. Test cases prioritization result
As can be seen, test case number 1 has the highest weight
0.145 among the test cases and it tests the requirement number
2. The proposed DSS approach prioritizes the test cases as the
following set:
{TC1, TC5, TC4, TC10, TC7, TC6, TC3, TC8, TC2, TC9}.
Moreover, via Eq. (9), the importance degrees of the criteria
are computed and summarized in Table V.
TABLE V. CRITERIA IMPORTANCE
Criteria
Importance
1. Fault Detection
0.37
2. Time Efﬁciency
0.26
3. Verdict Conclusiveness
0.22
4. Deviation Indicator
0.10
5. Cost Efﬁciency
0.02
6. Requirement Coverage
0.01
As can be seen, fault detection is identiﬁed as the most
critical decision criterion which has the highest weight 0.37
among all the criteria.
As mentioned earlier, the most critical criterion is the one
for which the smallest change in its current weight will alter
the existing ranking of the alternatives [24].
V.
CONCLUSION AND FUTURE WORK
In this paper, we introduced a test case prioritization
approach based on the fuzzy AHP decision making technique.
Our approach enables to rank test cases based on a set of
criteria and is particularly necessary when there is a limitation
(due to resource constraints) in selection and execution of test
cases for a system and it is not possible to run all the test
cases. We demonstrated how the approach is applied using an
example set of test case properties including cost efﬁciency, time
efﬁciency, verdict conclusiveness, etc., that serve as criteria in
the prioritization process. The approach is not, however, limited
to this particular set of criteria. The extension and use of AHP in
a fuzzy environment allows to specify the degree of a criterion
in each alternative (i.e., a test case) using linguistic variables
which relaxes the need of the users of the approach to specify
precise quantiﬁed values. This can improve the practicality and
adoption of the approach; for instance, where only estimated
and imprecise data are available. As part of the decision making
process, it was also identiﬁed which of the chosen criteria has
a higher role in determining the ranking of the test cases. Use
of this information on importance degree of each criteria in
other analyses of test cases would be another interesting topic
to further investigate.
As a future work, we are also going to examine other multi-
criteria decision making techniques in prioritization of test cases.
As another research direction of this work, ﬁnding a solution to
apply a test case prioritization approach as part of the test case
generation process would be an ideal scenario. Having such a
solution would then enable to only generate a set of test cases
which are analysed and deemed as feasible to execute with
respect to the available resources for test execution. As for other
works on test case prioritization techniques in the literature,
generally fault detection rate is mainly used as the single
important criterion in prioritizing and ranking of test cases.
In this paper, we have considered test case prioritization in a
broader aspect covering various and multiple criteria. Also in the
application of the proposed approach, same priority level and
importance was considered for all the criteria. If in a different
context, one or more criteria are considered more important than
the others (e.g., fault detection), a higher importance degree can
be assigned to them during the pair-wise comparison process
of the criteria. Considering the dependencies that can exist
between test cases is also another extension of this work which
we are currently investigating. Such dependency information
295
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

can as well be used in prioritization and ordering the execution
of test cases. Therefore, there is the potential to combine and
include it as another criterion in the decision making solution
we proposed in this paper or use it in a separate step before or
after the prioritization based on the other criteria.
VI.
ACKNOWLEDGEMENTS
This work was supported by VINNOVA grant 2014-03397
through the IMPRINT project and the Swedish Knowledge
Foundation (KKS) through the TOCSYC project. We would also
like to thank Stig Larsson, Wasif Afzal and Daniel Sundmark
for their constructive help and comments.
REFERENCES
[1]
S. Yoo and M. Harman, “Pareto efﬁcient multi-objective test case
selection,” in Proceedings of the 2007 International Symposium on
Software Testing and Analysis, ser. ISSTA ’07.
New York, NY, USA:
ACM, 2007, pp. 140–150.
[2]
H. Do, S. Mirarab, L. Tahvildari, and G. Rothermel, “The effects of time
constraints on test case prioritization: A series of controlled experiments,”
Software Engineering, IEEE Transactions on, vol. 36, no. 5, Sept 2010,
pp. 593–617.
[3]
A. Z. Dario Di Nucci, Annibale Panichella and A. D. Lucia,
“Hypervolume-based search for test case prioritization,” in Proceed-
ings of the 2015 Symposium on Search-Based Software Engineering
(SSBSE’15).
Bergamo, Italy: Springer, 2015, pp. 140–150.
[4]
G. Rothermel, R. Untch, C. Chu, and M. Harrold, “Test case prioritiza-
tion: an empirical study,” in Software Maintenance, 1999. (ICSM ’99)
Proceedings. IEEE International Conference on, 1999, pp. 179–188.
[5]
M. Saadatmand and M. Sj¨odin, “On combining model-based analysis
and testing,” in Information Technology:New Generations (ITNG), 10th
International Conference on, Las Vegas, USA, April 2013, pp. 260–266.
[6]
M. Harman, “Making the case for morto: Multi objective regression
test optimization,” in Software Testing, Veriﬁcation and Validation
Workshops (ICSTW), 2011 IEEE Fourth International Conference on,
March 2011, pp. 111–114.
[7]
T. L. Saaty, “How to make a decision:the analytic hierarchy process,”
European Journal of Operational Research, vol. 48, no. 1, 1990, pp.
9–26.
[8]
R. Bellman and L. Zadeh., “Decision making in a fuzzy environment,”
Management Science, 1970, pp. 141–164.
[9]
H. Jantan, A.Hamdan, and Z. Othman, “Intelligent techniques for
decision support system in human resource management.” 2010.
[10]
V. Nov´ak, I. Perﬁlieva, and J. Mockor, Mathematical principles of fuzzy
logic.
Springer Science & Business Media, 2012, vol. 517.
[11]
D. Rabunal Dopico and Pazos, Encyclopedia of Artiﬁcial Intelligence.
University of A Coruna, Spain, 2009, vol. 3.
[12]
Y. Shi, “A Deep Study of Fuzzy Implications,” Ph.D. dissertation, Ghent
University, 2009.
[13]
L. Zadeh, “Fuzzy sets,” Information and Control, 1965, pp. 338–353.
[14]
J. Yang and J. Watada, “Fuzzy clustering analysis of data mining:
Application to an accident mining system,” International Journal of
Innovative Computing, Information and Control, 2012, pp. 5715–5724.
[15]
E. E. K. B. De Baets, “Fuzzy relational compositions,” Fuzzy Sets and
Systems, vol. 60, no. 1, 1993, pp. 109 – 120.
[16]
Y.-C. Tang, “Application of the fuzzy analytic hierarchy process to the
lead-free equipment selection decision,” Business and Systems Research,
2011, pp. 35–56.
[17]
J. Malczewski, Multiple Criteria Decision Analysis and Geographic
Information Systems, M. Ehrgott, J. R. Figueira, and S. Greco, Eds.
Springer US, 2010, vol. 142.
[18]
C. Carlsson and R. Fuller, “Fuzzy multiple criteria decision making:
Recent developments,” Fuzzy Sets and Systems, vol. 2, no. 1, June 1996,
pp. 415–437.
[19]
K. Shahroodi, S. Amini, E. Shiri, K. S. Haghighi, and M. Najibzadeh,
“Application of analytical hierarchy process (ahp) technique to evaluate
and selecting suppliers in an effective supply chain,” Arabian Journal
of Business and Management Review, vol. 1, no. 8, April 2012.
[20]
T. Terano, Fuzzy Engineering Toward Human Friendly Systems.
Ohmsha, 1992, no. v. 2.
[21]
D.-Y. Chang, “Theory and methodology applications of the extent
analysis method on fuzzy ahp,” European Journal of Operational
Research, 1996, pp. 649–655.
[22]
G. Kabir and M. A. A. Hasin, “Comparative Analysis of AHP and Fuzzy
AHP Models for Multicriteria Inventory Classiﬁcation,” International
Journal of Fuzzy Logic Systems, vol. 1, no. 1, 2011, pp. 87 – 96.
[23]
R. M. Hierons, “Verdict functions in testing with a fault domain or test
hypotheses,” ACM Trans. Softw. Eng. Methodol., vol. 18, no. 4, Jul.
2009, pp. 14:1–14:19.
[24]
E. Triantaphyllou, B. Kovalerchuk, L. Mann, and G. M. Knapp,
“Determining the most important criteria in maintenance decision making,”
Journal of Quality in Maintenance Engineering, vol. 3, no. 1, 1997, pp.
16–28.
296
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-438-1
ICSEA 2015 : The Tenth International Conference on Software Engineering Advances

