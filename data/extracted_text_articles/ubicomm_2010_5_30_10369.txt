Wireless service developing for ubiquitous computing environments using J2ME
technologies
Jos´e Miguel Rubio
Escuela de Ingenier´ıa Inform´atica
Facultad de Ingenier´ıa, PUCV
Valpara´ıso, Chile
jose.rubio.l@ucv.cl
Claudio Cubillos
Escuela de Ingenier´ıa Inform´atica
Facultad de Ingenier´ıa, PUCV
Valpara´ıso, Chile
claudio.cubillos@ucv.cl
Abstract—From some years ago, technologies are ubiquitous,
omnipresent and integrated seamlessly in our common activi-
ties. There is a need for developing services and applications
that use all the capabilities of mobile devices available, for
connectivity and data processing. Java 2 Micro Edition (J2ME)
technology develops these services for use in a wide range
of devices, with portable code, and compatible with several
classes of hardware and software. Wireless communications
technologies (WiFi, Bluetooth) allow devices to communicate
with their environment. Bluetooth technologies are becoming
massive, and are present in the majority of these devices. This
kind of connectivity is possible using the J2ME Application
Programming Interfaces (APIs), but it requires some expertise
and a wide knowledge in order to implement these components.
This document proposes a framework focused towards the
service development using bluetooth technologies with more
simplicity. Also, it presents the design and implementation of
a mobile information service that uses this framework in a
ubiquitous environment.
Keywords-ubiquitous computing; wireless services; service
discovering; bluetooth; mobility.
I. INTRODUCTION
Using technology in daily tasks today is a very common
aspect of our lives, leaving behind the fact that we interact
with several classes of devices in every activity we do.
This was the vision of Mark Weiser [1], 18 years ago.
He wrote about environments that integrate computing with
common tasks, allowing the user to interact in natural ways
making computers nearly imperceptible. He designated this
integration as Ubiquitous Computing, talking about the ease
of access and availability of these technologies. This vision
is materialized in the proliferation of a wide range of devices
(mobile phones, Personal Digital Assistants: PDAs) and dif-
ferent connectivity options, (Short Message Service: SMS,
Bluetooth, GPRS: General Packet Radio Service, EDGE:
Enhanced Data rates for GSM of Evolution), giving multiple
interaction methods. In order to integrate these devices with
our common tasks in a more proﬁtable way, there are
several technologies centralized in building applications and
services for this class of devices. One of them is the J2ME
technology.
The next sections describe a simpliﬁed approach for using
J2ME technologies available for mobile device development.
A framework is proposed with components and development
directions for this class of devices. Different practical appli-
cations are proposed. Finally, a development of a mobile
information service is exposed, based on this framework,
mixing wireless and web technologies to access information
in a localized context.
II. THE J2ME PLATFORM
J2ME is a technology developed by Sun Microsystems
to build applications for mobile devices. It is different from
other major editions of Java (Java 2 Standard Edition (J2SE),
Java 2 Enterprise Edition (J2EE)); basically in a smaller
group of functionality that ﬁts the computing, memory and
data storing capabilities of limited devices.
A. Conﬁgurations and Proﬁles
To make a difference between different levels of capac-
ities, there are some conﬁgurations (minimal technological
requirements) and proﬁles (basic functionality and services)
to differentiate between device classes. A common conﬁgu-
ration is CLDC (Connected Limited Device Conﬁguration),
with minimal requirements of memory, power consumption,
and some kind of wireless connectivity, generally HTTP
(Hypertext Transfer Protocol) and SMS [2]. The common
proﬁle adopted by mobile devices is MIDP (Mobile Informa-
tion Device Proﬁle), that deﬁnes some required functionality
about user interface, data persistency, application lifecycle
and multimedia control [3].
B. User Interface
The user interface in J2ME offers a limited group of
components, based on limitations of screen size and reduced
keyboard functions of mobile devices. The user interface
is limited to selection lists, basic forms, text input dialogs,
and low-level screen painting (Canvas). The user inputs are
command buttons and an alphanumerical keyboard.
97
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

C. Connectivity
Different connectivity options have a centralized access
through Generic Connection Framework (GCF) APIs. GCF
allows connecting with any connection available (HTTP,
SMS, Bluetooth, local ﬁle system) using a uniﬁed API. Each
connection implemented is based on a generic connection
class, and extended to support speciﬁc functions related to
each particular connection implementation.
D. Optional Packages
To provide additional functions over the basic conﬁgu-
rations and proﬁles, there are some optional packages that
access extended functionality, standardized in different Java
Speciﬁcation Request (JSR). Table I lists typical optional
packages for mobile devices.
Table I
SOME OPTIONAL PACKAGES FOR J2ME
Speciﬁcation
Description
JSR-75
File system access and PIM
JSR-82
Bluetooth
JSR-120
Wireless Messaging (SMS)
JSR-135
Multimedia API
JSR-172
Web Services
E. J2ME-Enabled Devices
J2ME is the most available platform in the market.
There are several mobile devices today that allow executing
J2ME applications, basically mobile phones, smartphones,
and PDAs. In Windows Mobile (Pocket PC) systems a
commercial J2ME suite must be installed.
F. Application and Service Development in J2ME
There is a variety of tools and programming environments
that support the complete mobile development cycle: design,
coding, compilation, preveriﬁcation, packaging, tests, and
deployment. The main suite for J2ME programming is the
Wireless Toolkit from Sun Microsystems. Programming en-
vironments like Netbeans and Eclipse, integrate this toolkit
to allow developing J2ME applications. Emulation utilities
allow verifying applications for different device models.
Deploying applications to mobile devices are performed
through direct transfer (infrared, bluetooth) or a web down-
load. Usually, a JAR ﬁle (Java ARchive) is provided with all
the application components and resources. In some cases, a
JAD ﬁle (Java Application Descriptor) is required to simplify
the install process.
III. J2ME CONNECTIVITY
Mobile devices have a lot of connectivity options, even
more than some major device classes. This is one of the
main reasons for developing applications for J2ME-enabled
devices. A typical mobile phone can be converted into
a client’s email, web browser, game console, multimedia
player and even run business applications and perform online
commercial transactions.
A. HTTP/HTTPS Connectivity
In a typical J2ME device, at least HTTP connectivity is
required. The majority of online services are web-based.
The current increase of web technologies allows access to
a variety of contents (information, images, audio/video).
Some mobile devices cannot support all of them due to
it’s limitations in processing, memory or screen size. Many
online services (email, social networks) have a “mobile”
version or supply a J2ME client application.
B. Bluetooth Connectivity
Bluetooth is a wireless communication technology ori-
ented to connect different classes of device in a reduced
area (10-100mts), using low power consumption and a minor
complexity compared with other wireless technologies like
WiFi. Speciﬁed initially for the Bluetooth Special Interest
Group (SIG), composed by several industry leaders. The
current speciﬁcation adopted its version 2.1 [4]. From their
ﬁrst release, it has become a standard industry for wireless
transfer and personal area networks (PAN). The majority of
new mobile devices have included this technology, allowing
data transfers, network connections, use of headsets and
other wireless peripherals [6].
The bluetooth speciﬁcation allows inter-operating between
independent systems, deﬁning messages for each layer of the
protocol stack (high and low level), and between internal
subsystems (controller and host). To ensure interoperability
between applications some bluetooth proﬁles are deﬁned to
standardize mechanisms and protocols for different applica-
tions like ﬁle transfer, networking, printing, or synchroniza-
tion. Each proﬁle deﬁnes messages, procedures and rules
for the most common services. The Generic Access Proﬁle
(GAP) is the basis for all other proﬁles. Figure 1 shows the
hierarchy of basic bluetooth proﬁles [5].
Several mobile phones and PDAs offer standard bluetooth
services and integrate these services with personal informa-
tion management (PIM) utilities like contact management,
tasks and calendar events. There are many potential uses
for taking advantage of those functions, developing custom
services to allow users to interact with their environment
using these devices.
C. JSR-82: Java APIs for Bluetooth Wireless Technology
(JAWBT)
J2ME platform offers an additional API for accessing
the bluetooth technology: the JSR-82 optional package.
Motorola deﬁned the original speciﬁcation in 2002. Based on
the core bluetooth speciﬁcation, their objective is to deﬁne
a standard set of APIs that will enable an open, third-party
98
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

Figure 1.
Main Hierarchy of Bluetooth Proﬁles
application development environment for Bluetooth wireless
technology [8].
JAWBT deﬁnes a set of components to represent two
aspects of the bluetooth speciﬁcation: core elements and
the Generic Object Exchange Proﬁle (GOEP, also known
as OBEX). The javax.bluetooth package contains interfaces
and classes that represent the core speciﬁcation: devices,
data structures, service discovering, including the L2CAP
and SPP protocol. The javax.obex package is another in-
dependent set of elements that meets the speciﬁcation for
OBEX connections: header sets, authentiﬁcation, sessions
and operations for client/server connections [5].
IV. FRAMEWORK FOR BLUETOOTH-BASED SERVICE
DEVELOPMENT
The main motivation behind this framework is the high
potential of bluetooth technology as a mean for offering
extensive functionality in ubiquitous environments, using
common devices, standard protocols and data formats, en-
suring high interoperability in this class of environments.
This section shows the proposed framework for development
of bluetooth-based services. The main goal is to provide
ready-to-use components in applications that need bluetooth
connectivity.
A. Bluetooth Service Development
The JSR-82 API offer the core components for accessing
bluetooth technology, nevertheless, this does not provide
any direct implementation of common bluetooth proﬁles.
Each developer must implement standard or custom services
based on these components. To develop bluetooth based
services it is required some knowledge of the technology,
and API speciﬁcations. There are a few public projects that
offer these kind of components, but examples for coding
bluetooth services are basic and limited in functionality,
and do not provide full implementation of some basic and
useful services, leaving the implementation of these class of
services out of scope for some projects that would need it.
The goal is to deﬁne a common framework for direct
access of common bluetooth services, to quickly develop
any kind of bluetooth applications. The initial approach is
to get a set of components that implement basic bluetooth
proﬁles (Serial Port Proﬁle, Object Push Proﬁle), giving the
chance to extend and create new custom services based on
the core services. Also, it is deﬁned for some basic directions
using patterns and rules to make stable and optimal services.
The ﬁnal goal is to centralize the development efforts in the
main application, abstracting bluetooth detailed elements.
All components are based in the J2ME APIs: Generic
Connection Framework and Bluetooth.
B. Framework Components
The main areas of functionality that include this frame-
work are the following:
1) Bluetooth constants and data: Direct access to main
constants, attributes and UUIDs (Unique identiﬁers for
known services and protocols) deﬁned by the bluetooth
speciﬁcation.
2) Service publishing: Deﬁning and publishing standard
and custom services.
3) Service discovery: To enable discovering and selection
of remote services, access to attributes and properties and to
generate the service connection.
4) Bluetooth service connection: To provide the basic
implementation of service connection and for init custom
data transfers.
5) Logging and debugging: To help developers keep track
of the testing executions. Logging capacities for debugging
are implemented.
All
components
are
based
in
J2ME
APIs:
javax.microedition.io,
javax.bluetooth
and
javax.obex.
The
main
package
(btlibrary.core)
includes
the
only
core
components.
Additional
packages
add
speciﬁc
implementations.
C. Implementation
The core library components implement all basic func-
tionality areas, providing the basis for implementing or
extending additional elements. Figure 2 shows the core
classes and interfaces. To show some examples of the main
components and their logic, the following sections describe
the main relation and dependencies of these components, in
typical tasks like service publishing, service discovery and
client connections.
1) Service publishing: To publish a bluetooth service it
is required the following tasks:
• Setup the device as visible (discoverable).
• Identify the service (name, UUID, attributes).
• Wait for connections.
• Process each incoming connection.
• End the service.
99
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

Figure 2.
Classes and components of btlibrary.core
The class that implements this functionality is BTServer.
It provides methods for creating, identifying, starting or
stopping, and processes incoming connections, abstracting
the internal logic for these tasks. Figure 2 shows its main
methods.
2) Service discovery: The main tasks to discover remote
services are:
• Setup the discovery search pattern (the service UUID
and attributes required).
• Start the device discovery (or get a cached list of
previously known devices).
• Start a service discovery for selected devices.
• Select a service discovered and get the service address.
The class that implements this process is BTServiceScan-
ner. This class notiﬁes applications while new devices and
services are found, through the BTScannerListener interface.
Figure 3 shows some relations and messages to accomplish
this task, and the JSR-82 API calls involved.
3) Connecting bluetooth services: As a result of discov-
ery service tasks available service addresses are obtained.
To connect some some of these services we need the ser-
vice address. BTClient class implements this functionality,
including the discovery functions, allowing connection and
use of the service operations available.
As an example, a bluetooth ﬁle transfer proﬁle service
(FTP OBEX) offers functions for browsing remote folders,
sending, downloading or deleting ﬁles. The ObexFtpClient
class, based on BTClient, implements these functions. This
bluetooth client offers access to ﬁle transfer functions using
simple calls, abstracting the protocol and speciﬁcation logic.
Figure 4 shows client operations (connection, ﬁle listing
and transfer) and API calls involved in relation to bluetooth
APIs.
4) User interface deﬁnitions: An additional topic is a
deﬁnition of a generic user interface for use at interactive
Figure 3.
API calls involved in service discovery.
Figure 4.
Message sequences in a OBEX FTP service.
service discovery applications, in order to provide a common
GUI to control this process, to show discovery progress and
status. A graphical service selection interface must provide
the following functions:
• To show/hide the selection dialog.
• Show available devices/services while they are discov-
ered (or previously discovered).
• To control the service discovery process (canceling,
restarting).
• To select a device from the dialog list.
• To close the dialog and cancel the selection.
The formal deﬁnition is implemented in the Connection-
Dialog interface. Additionally, there has been implemented
a speciﬁc dialog for J2ME user interface (ConnectionDi-
alogME), that looks like the model shown in Figure 5.
5) Design Patterns: In order to make an easier service
design and application integration, there should be patterns
to develop bluetooth services and clients to help the process
to be simpler and faster. In general, there are simple steps to
accomplish in order to get a successful development, adding
basic and advanced examples in order to guide developers.
100
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

Figure 5.
Service discovery connection dialog for J2ME.
As an example, the service creation and publishing pro-
cess needs to consider some basic patterns and directions:
• To deﬁne the base/reference bluetooth proﬁle in order
to build the service: generally, a serial port proﬁle (SPP)
or an object exchange (OBEX) proﬁle.
• To deﬁne the service identiﬁer (UUID). If it is planned
to implement some standard bluetooth service, it must
assign the speciﬁc UUID designated.
• For standard bluetooth proﬁles or services, it must
follow all the ofﬁcial requirements deﬁned to ensure
interoperability.
• For custom services, the primary task is to deﬁne the
public interface, constants and data structures used to
exchange messages.
• To optimize connection resources and bandwidth, data
transfers must try to use the maximum packet length
available, avoiding small data transmissions.
• Due to limitations in the number of concurrent connec-
tions, timeout mechanisms are required to avoid block-
ing new connections when some previous connection
is lost or is still awaiting data.
V. APPLICATION FIELDS
Bluetooth services development can have multiple ap-
plications. There are several projects related to bluetooth
technologies and ubiquitous environments. All of them could
be simpliﬁed using the components of this framework. Some
typical application domains are presented in next sections.
A. Localized Information Services
An information service can provide or process data using
the user location as a context. For example a project that
allows a museum visitant to receive instant information (text,
images, audio/video) about paintings or other things located
near the current location or room using his mobile phone
with a J2ME application via bluetooth. The key aspect for
success is to identify the users and manage proﬁles, to
customize messages and the users experience.
B. Local Environment Interaction
Users can interact with the local environment when some
bluetooth-enabled devices are located near the user. For
example: a teacher enters the classroom and uses his mobile
phone to transfer the class slides and then starts and controls
the presentation using a bluetooth service running in a local
computer connected to a media projector.
C. Machine to Machine Communication (M2M)
Due to high interoperability and compatibility of bluetooth
protocols and proﬁles, it is possible to implement several
classes of device-to-device communication: synchronization,
data exchange, collaborative work and distributed applica-
tions.
D. Communications and Networks
In this area we may ﬁnd extended applications to add
new communication possibilities in a localized environment.
Chat or instant messaging applications, networked games,
Internet access for email, news, web browsers, database
access, remote access, audio/video streaming. Many internet-
based services are possible using a bluetooth service as a
gateway.
VI. PRACTICAL APPLICATION IN A MOBILE
INFORMATION SYSTEM
As a demonstration of use of this framework in a real
application for an ubiquitous environment, there has been
implemented a mobile information system for academicals
and communicational purposes. This system provides the
following functions to teachers and students:
• To publish general or group announcements (for teach-
ers, students, class groups, student groups, workgroups)
• To publish calendar events to achieve best attendance
to key activities and to complete important tasks.
• To send and receive private messages.
• To store a global directory to access contact information
from users (phone, email).
• To associate users with their mobile devices, in order
to receive notiﬁcations directly.
• To register user proﬁles and groups, ensuring security
and customized information access.
As the user interface for the service, there are some
alternatives:
• A web interface accessible via common web browsers.
With XHTML compliance allow mobile web browsers
to access the portal content in a simple format [7].
• A J2ME client application installed on mobile devices
to access portal content with a simpliﬁed browser with
http connection using a local bluetooth service acting
as gateway, giving some extra bluetooth-based features.
• A message interface using a local bluetooth service that
receives commands to process and trigger some type of
action, like changing user conﬁgurations or requesting
contacts.
A. Service Architecture
There are three main areas of implementation for this
service. Figure 6 shows the schematic composition of the
complete service.
101
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

1) Data Server: A typical HTTP server is the web content
provider and the data interface for some service components.
A database server is the global data container. Only one
computer acts as a data server.
2) Bluetooth Service: The bluetooth service is composed
by different minor bluetooth services and processes for
speciﬁc tasks: a HTTP gateway service for processing web
requests and responses; a notiﬁcation agent that discovers
nearby devices, retrieves messages, news or events asso-
ciated to the owner’s device and sends only new notiﬁ-
cations to each discovered device; a command reception
service reads messages sent by mobile devices to request
information, update proﬁle properties and obtains objects
like contacts, applications or events. There can be multiple
instances of this bluetooth service installed in any machine
connected to the Internet and with a bluetooth installed
device.
Figure 6.
Mobile information service architecture.
3) Mobile Device: It is the main user interface for this
service. It can get notiﬁcations automatically when it enters
in a bluetooth service area, using the internal object push
service activated in each device. Generally, this service inte-
grates the reception of special objects with some ”organizer”
functions. When it receives some contact, event or task they
are automatically saved or scheduled.
Also it allows sending commands to any bluetooth service
to request or set information, seeking online contacts, mes-
sages and resources and receives via a bluetooth the transfer
of the required content to get the J2ME client application
and update the contact list.
Finally, the J2ME client application installed in this device
can access the web site using the http gateway provided
by any bluetooth service in range, allowing direct access
to the web content in a simpliﬁed interface and providing
additional mobile and bluetooth related functions directly
like trigger phone calls or download content.
VII. CONCLUSIONS
J2ME technology allows developing services for a wide
range of devices. Bluetooth connectivity is highly supported
in newer devices and can interoperate with a variety of
device classes due to industry-adopted standard protocols
and formats. JSR-82 API is the access point to bluetooth
technology in J2ME. Bluetooth service development through
this API is a complex task.
This framework can simplify the service development pro-
viding direct access to common application requirements in
bluetooth-enabled applications: service discovery, publishing
and connecting to remote bluetooth services. There are
many possible applications of this technology for ubiquitous
computing environments: localized information services, en-
vironment interaction, machine-to-machine communication
and online and network applications.
Through developing a mobile information service based
on this framework shows one of many applications of
bluetooth technologies to common tasks. In this service we
have applied all aspects covered by the framework: creating,
discovering and connecting to standard and custom bluetooth
services. While in the design and implementation phases
some elements of this framework were improved, completed
and ﬁxed. The ﬁnal set of functionality provided by the
framework has been enough to start a proper bluetooth
service development. The future tasks are: optimizations for
several processes like service discovery, bandwidth usage,
multiple service synchronization, in order to simplify the
code to reduce library size and timeout strategies.
VIII. ACKNOWLEDGEMENT
This work has been partially funded by CONICYT
through Fondecyt Project No. 11080284 and the Pontiﬁcia
Universidad Cat´olica de Valpara´ıso (www.pucv.cl) through
Nucleus Project No. 037.215/2008 “Collaborative Systems”.
REFERENCES
[1] M. Weiser, “The Computer of the 21th Century”, Scientiﬁc
American, sept. 1991, pp. 94-100.
[2] Sun
Microsystems,
“JSR
139:
Connected
Limited
De-
vice Conﬁguration Speciﬁcation”, Version 1.1, 2003, from
http://jcp.org/en/jsr/detail?id=139 [accessed, May 3, 2010].
[3] Sun Microsystems, “JSR 271: Mobile Information Device
Proﬁle (MIDP)”, 2005, from http://jcp.org/en/jsr/detail?id=271
[accessed, May 3, 2010].
[4] Bluetooth
SIG,
“Bluetooth
Speciﬁcation”,
Version
2.1
+EDR, The Bluetooth Special Interest Group, 2007, from
http://www.bluetooth.com/SiteCollectionDocuments/Core V21
EDR.zip [accessed, May 3, 2010]
[5] Bluetooth SIG, “Bluetooth Speciﬁcation 1.1: Part K:10 Generic
Object Exchange Proﬁle (GOEP)”, 2001, pp. 310-338 from
http://www.bluetooth.com/SiteCollectionDocuments/GOEP SP
EC V12.pdf [accessed, May 3, 2010]
[6] SO
Sullivan,
“JSR82:
Past,
Present
and
Future
for
Java/Bluetooth
APIs”,
Rococo
Software,
2007,
from
http://www.rococosoft.com/weblog/archives/java bluetooth/jsr
82 tips techniques/ [accessed, May 3, 2010]
[7] W3C, “XHTML Basic 1.1”, W3C Recommendation, 2008,
from http://www.w3.org/TR/xhtml-basic/ [accessed, May 3,
2010].
[8] C. Bala Kumar, PJ Kline and TJ Thompson, “Bluetooth
Application Programming with the Java APIs”, Elsevier, 2004.
102
UBICOMM 2010 : The Fourth International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-100-7

