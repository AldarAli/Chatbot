Turbo Decoder VLSI Architecture with Non-Recursive max∗ Operator for 3GPP LTE
Standard
Ashfaq Ahmed, Maurizio Martina, Guido Masera
Department of Electronics & Telecommunication
Politecnico di Torino
Torino, Italy
Email: {ashfaq.ahmed, maurizio.martina, guido.masera}@polito.it
Abstract—This paper presents a highly parallel turbo decoder
architecture for 3GPP LTE standard with a new non-recursive
max∗ operator. High parallelism is introduced at several levels to
achieve high throughput, to meet LTE requirements. The decoder
supports all codes speciﬁed by LTE and features low complexity,
obtained by using the new non-recursive max∗ operator. The
decoder achieves a maximum throughput of 376.4 Mbps at
250 MHz, occupying an area of 1.62 mm2 on 90-nm Standard
Cell ASIC technology . The decoder shows better decoding
efﬁciency (Bits/Cycle/Iterations) and throughput to area ratio
(Throughput/mm2) than many of the previously implemented
decoders.
Keywords—3GPP LTE; iterative decoding; parallel turbo de-
coder; VLSI architecture
I. INTRODUCTION
Turbo codes [1] have gained huge attention in the last
twenty years. Indeed Turbo codes achieve Near Shannon
limit capacity, excellent error correction performance, intrinsic
parallelism and high coding gain which made them an eligible
candidate for a large number of wireless communication
standards e.g., WiMax [2], 3GPP LTE [3], UMTS-LTE [4],
CCSDS [5]. LTE (Long Term Evolution) is the next step
forward in cellular 3G and 4G services. It is designed to meet
carrier needs for high speed data and media transport as well as
high capacity voice support. The standard speciﬁes data rates
up to 100 Mbps in the down-link (two MIMO channels), 50
Mbps in the up-link (single channel) and 20 MHz bandwidth
channel.
VLSI implementation of turbo decoders is a challenging
task because of high throughput constraints of the standards. A
lot of research has been carried out to implement efﬁcient de-
coders satisfying area, speed and power constraints [6][7][8].
Typically two SISO (Soft Input Soft Output) processors are
concatenated in parallel in order to achieve high throughput.
Parallelism can be introduced in the decoding process at sev-
eral levels to improve decoding speed [9] e.g., using multiple
processors, exploiting the trellis representation parallelism to
decode a set of bits, internal parallelization by using multiple
windows in each processing element [10], which eventually
reduces the latency. However, highly parallel architectures
introduce high complexity in terms of hardware and logic.
In the proposed decoder architecture, several of previously
mentioned methods have been adopted to improve throughput,
along with a novel implementation of non-recursive max∗
operator [11]. In the non-recursive max∗ implementation the
complexity and overhead of the operator is reduced by com-
puting the n-input max∗ as a whole instead of recursively
applying the 2-input max∗ operation. In the low complexity
max∗ operator, the two maximums are calculated and using
the two outputs, the ﬁnal maximum is found.
The remainder of the paper is organized as follows. Section
II describes the code adopted in LTE. In this section the
explanation of BCJR algorithm, that is the core of turbo
decoding, is given. Section III details the proposed architecture
including the overview of the main modules, focusing on the
novelty in the architecture i.e., the non-recursive max∗. The
implementation results along with the comparisons are shown
in Section IV. Finally, the whole architecture is concluded in
Section V.
II. LTE TURBO CODES AND DECODING ALGORITHM
The 3GPP LTE turbo codes are based on the parallel
concatenation of two 8-state Convolutional Codes (CCs) and
one Quadratic Polynomial Permutation (QPP) interleaver [12].
The constituent code used in 3GPP LTE is a single binary
systematic CC. The generated input frame is fed into the
convolutional encoder of rate 1/3. An information sequence
u is encoded by a convolutional encoder, and an interleaved
version of u is encoded by a second convolutional encoder.
The initial values of the shift registers of the 8-state constituent
encoders are all zeros. After encoding of the current frame,
termination is performed: during the last three cycles of the
frame, values are input into the encoder to force it to the zero
state. The total number of output bits generated by the encoder
is L = 3 · K + 12, where 40 ≤ K ≤ 6144 is the frame length.
The last 12 bits are the trellis termination bits.
A. Decoder
The main processing elements inside each decoder are the
Soft-In–Soft-Out (SISO) modules [13] which executes the
Bahl–Cocke–Jelinek–Raviv (BCJR) algorithm [14], usually
in its logarithmic form [15]. The SISO module processes
the intrinsic log-likelihood ratios (LLRs), received from the
channel, of a coded symbol c and calculates the extrinsic in-
formation for the information bits u. The LLRs are exchanged
by the SISO modules through the interleaving/deinterleaving
permutation laws Π /Π−1. The output extrinsic LLR of symbol
u at the kth step is computed as
40
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-264-6
SPACOMM 2013 : The Fifth International Conference on Advances in Satellite and Space Communications

Figure 1. Complete Turbo Decoder
λ ext
k
= δ

∗
max
R1
{b}−
∗
max
R0
{b}− λ apr
k

(1)
where δ = 0.75 is a scaling factor [16]. The trellis transition
for input equal to ‘0’ is represented by Ro, whereas the trellis
transition due to input equal to ‘1’ is represented by R1. The
∗
max
Rx
ﬁnds transitions with maximum probability w.r.t. input
equal to x, where x ∈ {1,0}. λ apr
k
is the a-priori information
received from the other SISO module, whereas λ ext
k
is the
extrinsic information generated by the SISO at trellis step k
and it is transferred to the other SISO module by means of
the interleaver memory. b is deﬁned as,
b(k) = αk−1 (s)+ γk

s,s
′
+ βk−1

s
′
(2)
αk

s
′
=
∗
max
s

αk−1 (s)+ γk

s,s
′
(3)
βk−1(s) =
∗
max
s

βk

s
′
+ γk

s,s
′
(4)
γk

BMU
Mem
BMU
BMU
Processor
Processor
Mem
Processor
Mem
-Reg
-Reg
LLR
Intrinsic
-in
-in
-sel
-sel
-out
-out
Extrinsic
Bit out
(a) SISO Processor
+
+
llrY
llrA intrinsic
‘0’
γ0
γ1
γ2
γ3
(b) α or β Branch Metric
Unit (BMU)
PE-0
PE-1
PE-7
Normalization
0/ 0
1/ 1
7/ 7
0_out/
0_out
1_out/
1_out
7_out/
7_out
0
1
7
(c) α and β State Metric Unit
MAX-8
MAX-8
..
+
+
Scale
+
+
X00
X07
X08
X15
..
llrA
llrA
Intrinsic
Extrinsic
Bit_Out
-
-
(d) λ-Processor
Figure 2. SISO Processors and Its Major Modules
networks for data transfer from processors to memories and
from memories to processors, (iv) the address generator which
generates addresses using (7) and (v) the control unit. 3GPP
LTE standard uses QPP (Quadratic Permutation Polynomial)
[12], which has been proved to be contention free. The QPP
interleaver of size N can be expressed as,
f (xo) =

Table I. QUANTIZATION
No. of bits
Channel LLRs λ s,λ p
6
Ext./Intrinsics λ int.
8
Branch metrics γ
12
State Metrics α,β
12
the multiplexers at the inputs of α and β processors are sent
by the control signal, in order to pass the correct α′s and β ′s
to the processors at the end of one N/P bits and N/(P/NWP)
bits respectively. Similarly, the control unit is adaptive enough
to generate control signal for the data path in order to have
correct operation scheduling.
A. SISO processor
The SISO, shown in Fig. 2, is the main processing unit in
turbo decoding. In this work, 16 parallel SISO processors are
employed, each of which implements (1) to (5) to calculate the
extrinsic values and the output bits. The complete architecture
of the SISO unit is shown in Fig. 2. Each SISO gets channel
LLRs i.e., systematic and parity, the apriori information from
memories and the starting state metrics for α and β recursions
from other SISOs. The incoming frame is divided in P input
buffers, where P is the number of SISOs. Each SISO decodes
the corresponding input bits. So each SISO works on N
P bits,
where N is the block size. According to Fig. 2, the SISO
performs the following decoding operations:
1) The α-BMU (Branch Metric Unit) calculates the γs’
(branch metrics) combining the LLRs and the apriori
information using (5). At the same time, the BMU-MEM
stores all the incoming LLRs and the intrinsic informa-
tion. BMU-MEM is a LIFO memory. The architecture
of the BMU is shown in Fig. 2b.
2) After each calculation of α-BMU, the α-processor cal-
culates the 8 new αs’ using previous α and the γ coming
from BMU. Eight processing elements (PE-0 ... PE-
7) execute in parallel following (3). The new αs’ are
normalized subtracting the maximum from each of them.
Finally the calculated αs’ are stored in the α-MEM,
which is a LIFO memory as well. The architecture of
α-processor is shown in Fig. 2c.
3) When the αs’ for a complete window are calculated, the
β-BMU and the β-processor start calculating the the γs′
and βs’ respectively, in the backward direction using (5)
and (4).
4) The λ-processor executes in parallel with the β-
processor. So after each calculation of a β, the λ-
processor calculates the extrinsic, using (1), and also
estimates the output bit. The architecture is shown in
Fig. 2d.
Each SISO uses three different memories i.e., α-MEM, BMU-
MEM and the β-MEM. The α-MEM stores the αs’ while
traversing the trellis in the forward direction and the BMU-
MEM stores the incoming intrinsic and the a-priori LLRs. In
Table I, the number of bits required to represent each data
managed by the decoder is shown. Table II shows the total
memory utilization in the architecture.
Table II. MEMORIES USED IN THE ARCHITECTURE
Unit
Size (kbit)
α−MEM
36.864
BMU-MEM
9.216
β−local-MEM
24.576
Addr. LIFO
0.216
Addr. Init
114.56
Input Buff.
110.592
Output Buff.
6.144
Extrinsic Mem.
49.152
Total
351.32
B. Non-recursive max∗ operator
The λ-processor executes (1) and (2). In (1), the non-recursive
max∗ operator [11] is used to ﬁnd the maximum from all the
inputs. In general the max∗ operator is recursive in nature,
where on each recursion it ﬁnds the maximum from 2 inputs
and then the result is compared with the third one and so
on. In recursive max∗ for n input values the max∗ operator is
applied recursively n–1 times, From (8) it is evident that the
max∗ operator having n input values can be computed non-
recursively as it requires only knowledge of the maximum
among n values and an additive correction term depending on
the second maximum value among n values. The non-recursive
max∗ is implemented to ﬁnd the two maximum from the 8
inputs using a simple maximum ﬁnding tree and a small look-
up table (LUT), as shown in Fig. 3. Fig. 4 shows the max∗
implementation with 2 inputs, which is used in calculation of
(3) and (4). The max∗ operator can be given as
∗
max
i=1:n(xi) ≃ max
i=1:n(xi)+ log{[1 + exp(−δ)]}
(8)
The log{[1 + exp(−δ)]} in (8) is the correction term, which
is pre-computed and is stored in a small LUT. The difference
between the ﬁrst maximum and the second maximum , namely
δ, becomes the address for the LUT. The data from the LUT
is then added to the ﬁrst maximum to ﬁnd the max∗ output.
IV. RESULTS
To decrease the amount of memory and to increase the
throughput, large number of windows are used for large code
lengths. Each SISO processor works with up to 16 windows.
In this case, each SISO is decoding 384 bits. The window is
24 bit long. So at each clock cycle, the address generators
produce 16 addresses. The data from the memory and the
corresponding addresses from the address generators are fed
into the permutation network and ﬁnally based on the sorting
of addresses, the data reaches its destinations [18].
The throughput of the decoder is calculated as in [23]:
Throughput =
N × F
2.I

Table III. RESULTS COMPARISONS: Radix/Processor (Rdx/Proc.), CMOS Technology Process (Tech.), Iterations (Iter.), Clock Frequency (Freq.), Memory
(Mem), Active Area (Area), Normalized Area (N.A.), Throughput (TP.), Throughput to Area Ratio (TAR = Mbps/mm), Decoding Efﬁciency (DE =
Bits/Cycle/Iterations)
Design
Proposed
[6]
[7]
[8]
[17]
[20]
[18]
[21]
[22]
Standard
LTE
LTE,WiMAX
LTE
LTE
LTE
LTE
LTE
LTE
LTE,WiMAX,
DVB-RCS
Rdx./Proc.
2/16
4/8
2/8
2/8
2/64
4/8
2/16
2/32
4/2
Tech (nm)
90
130
90
90
65
130
90
90
65
Iter.
5
8
8
8
6
5.5
5
5.5
6
Freq.
250
250
275
275
400
300
200
486
520
Mem (Kb)
351.32
N/A
N/A
N/A
N/A
129
413.35
N/A
N/A
Area (mm2)
1.62
10.7
2.10
2.10
8.3
3.57
2.10
13.82
0.644
N.A. (mm2)
1.62
5.12
2.10
2.10
15.91
1.71
2.10
13.82
1.234
TP. (Mbps)
376.47
187.5
130
129
1310.72
390.6
284.4
1138
170
TAR
232.39
36.62
61.90
61.42
82.83
228.42
135.43
82.34
137.76
DE
7.53
6
3.78
3.75
19.66
7.16
7.11
12.88
1.96
0
0.5
1
1.5
2
10
−8
10
−6
10
−4
10
−2
10
0
Eb/No
BER
Block Size : 6144, Code Rate : 0.33, Siso : 16, Windows : 16
 
 
Recursive, Iteration : 9
Non−Recursive, Iteration : 9
Recursive, Iteration : 5
Non−Recursive, Iteration : 5
Figure 5. Bit Error Rate (BER), code rate 1/3
instead of 9 introduces a penalty of about 0.5 dB at BER
level 10−4, but offers increased throughput and reduced energy
dissipation.. It is also shown in Fig. 5 and 6 that the non-
recursive max∗ achieves slight gain over the recursive one.
The synthesis is carried out on Synopsys Design Vision
with 90 nm standard cell technology at a clock frequency
of 250 MHz. The proposed architecture achieves a maximum
throughput of 376.4 Mbps, occupying an area of 1.62 mm2.
Table III shows the comparison of the proposed architecture
with some already published decoders. The comparison is
carried out in terms of implementation technology, supported
codes and decoded modes, maximum achieved throughput,
internal parallelism and occupied area. The area of each
implementation is scaled up to 90 nm process technology
for fair comparison. The scaling factors of ( 90
130)2 and ( 90
65)2
are used for 130 nm and 65 nm technologies, respectively. A
parameter called Throughput to Area Ratio (TAR) [24] is used
to evaluate the area efﬁciency of the designed decoder. Another
metric used for comparison purposes is Decoding Efﬁciency
(DE), deﬁned as the number of decoded bits per clock cycle
per iteration. DE evaluates the degree of parallelism actually
offered by the decoder architecture. As shown in Table III,
the proposed architecture achieves better TAR than the other
0
0.5
1
1.5
10
−3
10
−2
10
−1
10
0
Eb/No
BER
Block Size : 6144, Code Rate : 0.33, Siso : 16, Windows : 16
 
 
Recursive, Iteration : 9
Non−Recursive, Iteration : 9
Recursive, Iteration : 5
Non−Recursive, Iteration : 5
Figure 6. Frame Error Rate (BER), code rate 1/3
implementations. The DE is better than [6], [7], [8], [20],
[18] and [22], whereas [17] and [21] achieve better DE,
but they are very expensive architectures, with huge area
occupation. So the proposed architecture achieves more than
sufﬁcient throughput for 3GPP LTE standard at the cost of
lower occupied area than required for most of the alternate
solutions.
V. CONCLUSION
In this paper, an already developed parallel turbo decoder
for 3GPP LTE standard is modiﬁed with a new architecture
of non-recursive max∗ operator. The analysis shows that with
the new max∗ operator, signiﬁcant area can be saved and
throughput enough to meet the standard requirement can be
achieved. The new max∗ operator is implemented with a very
simple logic i.e., by ﬁnding just the two maximums and then
adding them with a correction term, taken from a LUT.
REFERENCES
[1] C. Berrou, A. Glavieux, and P. Thitimajshima. "Near Shannon Limit
Error-Correcting Coding and Decoding: Turbo-Codes. 1". In Communi-
cations, 1993. ICC ’93 Geneva. Technical Program, Conference Record,
IEEE International Conference on, volume 2, page 1064, May 1993.
44
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-264-6
SPACOMM 2013 : The Fifth International Conference on Advances in Satellite and Space Communications

[2] "IEEE Standard for Local and Metropolitan Area Networks Part 16: Air
Interface for Fixed and Mobile Broadband Wireless Access Systems
Amendment 2: Physical and Medium Access Control Layers for Com-
bined Fixed and Mobile Operation in Licensed Bands and Corrigendum
1".
IEEE Std 802.16e-2005 and IEEE Std 802.16-2004/Cor 1-2005
(Amendment and Corrigendum to IEEE Std 802.16-2004), 2006.
[3] "3GPP TS 36.212 v8.0.0: Multiplexing and Channel Coding".
3rd
Generation Partnership Project, 2007-2009.
[4] "UMTS : Universal Mobile Telecommunications System". http://www.
3gpp.org/Technologies/Keywords-Acronyms/article/umts.
[5] "Consultive Committee for Space Data Systems Recommendation for
Space Data System Standards TM Synchronization and Channel Coding
CCSDS 121.0-B-2", Sep. 2003.
[6] J. H. Kim and I. C. Park. "A Uniﬁed Parallel Radix-4 Turbo Decoder
for Mobile WiMAX and 3GPP-LTE". In Custom Integrated Circuits
Conference, 2009. CICC ’09. IEEE, page 487, Sept. 2009.
[7] C. C. Wong and H. C. Chang. "Reconﬁgurable Turbo Decoder With
Parallel Architecture for 3GPP LTE System". Circuits and Systems II:
Express Briefs, IEEE Transactions on, 57(7):566, July 2010.
[8] C. C. Wong, Y. Y. Lee, and H. C. Chang.
"A 188-size 2.1mm2
Reconﬁgurable Turbo Decoder Chip with Parallel Architecture for 3GPP
LTE System". In VLSI Circuits, 2009 Symposium on, page 288, June
2009.
[9] G. Masera. "VLSI for Turbo Codes". In Keattisak Sripimanwat, editor,
Turbo Code Applications, page 347. Springer Netherlands, 2005.
[10] O. Muller, A. Baghdadi, and M. Jezequel. "Exploring Parallel Processing
Levels for Convolutional Turbo Decoding". In Information and Com-
munication Technologies, 2006. ICTTA ’06. 2nd, volume 2, page 2353,
April 2006.
[11] S. Papaharalabos, P. T. Mathiopoulos, G. Masera, and M. Maurizio.
"Non-Recursive max* Operator with Reduced Implementation Complex-
ity for Turbo Decoding". Communications, IET, 6(7):702, May 2012.
[12] "Multiplexing and Channel Coding, 3GPP TS 36.212 Version 8.4.0,
September 2008".
[13] S. Benedetto, G. Montorsi, D. Divsalar, and F. Pollara. "Soft-Input Soft-
Output Modules for the Construction and Distributed Iterative Decoding
of Code Networks".
European Transactions on Telecommunications,
9(2):155, Sep. 1998.
[14] L. Bahl, J. Cocke, F. Jelinek, and J. Raviv. "Optimal Decoding of Linear
Codes for Minimizing Symbol Error Rate (Corresp.)".
Information
Theory, IEEE Transactions on, 20(2):284, Mar. 1974.
[15] P. Robertson, E. Villebrun, and P. Hoeher. "A Comparison of Optimal
and Sub-Optimal MAP Decoding Algorithms Operating in the Log
Domain".
In Communications, 1995. ICC ’95 Seattle, ’Gateway to
Globalization’, 1995 IEEE International Conference on, volume 2, page
1009, Jun 1995.
[16] S. Papaharalabos, P. T. Mathiopoulos, G. Masera, and M. Maurizio.
"On Optimal and Near-Optimal Turbo Decoding using Generalized max
Operator". Communications Letters, IEEE, 13(7):522, July 2009.
[17] Y. Sun and J. R. Cavallaro. "Efﬁcient Hardware Implementation of a
Highly-Parallel 3GPP LTE/LTE-Advance Turbo Decoder". Integration,
the VLSI Journal, 44(4):305, July 2010.
[18] A. Ahmed, M. Awais, A. ur Rehman, M. Maurizio, and G. Masera.
"A High Throughput Turbo Decoder VLSI Architecture for 3GPP
LTE Standard".
In Multitopic Conference (INMIC), 2011 IEEE 14th
International, page 340, 2011.
[19] K. E. Batcher. "Sorting Networks and their Applications". In Proceed-
ings of the April 30–May 2, 1968, spring joint computer conference,
AFIPS ’68 (Spring), page 307, New York, NY, USA, May 1968. ACM.
[20] C. Studer, C. Benkeser, S. Belfanti, and Q. Huang.
"Design and
Implementation of a Parallel Turbo-Decoder ASIC for 3GPP-LTE".
Solid-State Circuits, IEEE Journal of, 46(1):8, Jan. 2011.
[21] S. M. Karim and I. Chakrabarti.
"High-Throughput Turbo Decoder
using Pipelined Parallel Architecture and Collision-Free Interleaver".
Communications, IET, 6(11):1416, July 2012.
[22] R. Al-Khayat, A. Baghdadi, and M. Jezequel. "Architecture Efﬁciency of
Application-Speciﬁc Processors: A 170Mbit/s 0.644mm2 Multi-Standard
Turbo Decoder". In System on Chip (SoC), 2012 International Sympo-
sium on, page 1, Oct. 2012.
[23] M. Maurizio, M. Nicola, and G. Masera.
"VLSI Implementation of
Wimax Convolutional Turbo Code Encoder and Decoder". Journal of
Circuits, Systems and Computers, 18(03):535, Sep. 2009.
[24] G. Masera, F. Quaglio, and F. Vacca. "Implementation of a Flexible
LDPC Decoder".
Circuits and Systems II: Express Briefs, IEEE
Transactions on, 54(6):542, June 2007.
45
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-264-6
SPACOMM 2013 : The Fifth International Conference on Advances in Satellite and Space Communications

