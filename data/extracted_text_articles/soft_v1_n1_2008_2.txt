14
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
Veriﬁcation of Evidence Life Cycles in Workﬂow Diagrams with Passback Flows ∗
Osamu Takaki, Takahiro Seino, Izumi Takeuti, Noriaki Izumi and Koichi Takahashi
National Institute of Advanced Industrial Science and Technology (AIST)
2-41-6 Aomi, Koto-ku, Tokyo 135-0064, Japan
{o-takaki, seino-takahiro, takeuti.i, n.izumi, k.takahashi}@aist.go.jp
Abstract
We introduce the Evidence Veriﬁcation Algorithm (EVA)
in this paper, which veriﬁes consistency of life cycles of ev-
idences (evidence documents) in workﬂow diagrams. We
used the AIST Workﬂow Language (AWL) as the syntax for
workﬂow diagrams, which has additional information about
evidences. A workﬂow diagram of AWL is essentially the
same as a Uniﬁed Modeling Language (UML) activity dia-
gram. EVA veriﬁes the existence of consistent sequences of
ﬂows between the occurrences of evidences in a workﬂow
diagram. It is important to verify consistency of life cycles
of evidences, since some defects in the workﬂow diagram
itself can be found by checking inconsistent life cycles of
evidences in a workﬂow diagram.
Keywords: workﬂow diagram, veriﬁcation, evidece life cy-
cle
1. Introduction
We deﬁne a consistency property of life cycles of evi-
dences described in a workﬂow diagram in this paper and
introduce an algorithm that veriﬁes the consistency prop-
erty. Here “evidence” is a technical term which means an
annotation on a workﬂow diagram, which denotes a doc-
ument on which information is written, and/or with which
something is approval, during the process of an operation.
Workﬂow diagrams play a central role in describing busi-
ness processes in the development of large-scale informa-
tion systems, especially in analyzing the requirements of
these systems. There have been several standard workﬂow
languages such as BPMN [1] or XPDL [15], and numerous
investigations into methodologies of verifying several con-
sistency properties in workﬂow diagrams (e.g., see [12]).
∗The authors are grateful to anonymous referees for their fruitful com-
ments. This work was supported by ’Service Research Center Infrastruc-
ture Development Program 2008’ from METI and Grant-in-Aid for Scien-
tiﬁc Research (C) 20500045.
However, verifying consistency properties in the life cy-
cles of documents, which are described in workﬂow dia-
grams, has not been sufﬁciently investigated. In large or-
ganizations such as large enterprises or governments, doc-
uments such as order forms, estimate sheets, speciﬁcation
descriptions, invoices, and receipts play signiﬁcant roles
for purposes of feasibility, accountability, traceability, or
transparency of business. Tasks involve workers with dif-
ferent roles in such organizations, and these are carried out
by circulating documents. Such documents are considered
as kinds of evidences for the purposes above. We describe
such documents with evidences in this paper. For simplic-
ity, we often call such documents themselves “evidences”.
Some evidences require ofﬁce workers to carry out vari-
ous tasks. Some evidences are manuals that teach workers
how to conduct tasks. Some workers check evidences and
sign them in when they accept their content. Therefore, nu-
merous actual operations are currently based on evidences
even if they are carried out with information systems. Con-
sequently, it is important to consider workﬂow diagrams
in which one can concretely and precisely describe the life
cycles of evidences to analyze requirements in developing
large-scale information systems.
When someone develops workﬂow diagrams, they often
make errors in describing evidences, because their states are
subtly affected by other evidences around them. Moreover,
many inconsistencies in evidences come from inconsisten-
cies in constructing the diagrams. The larger a diagram be-
comes, the harder it is to ﬁnd inconsistencies in evidences
that is in it.
However, verifying the consistency of evidence helps us
to conﬁrm correctness of the diagrams. In fact, we can ﬁnd
numerous defections and redundancies in ﬂows by ﬁnding
inconsistencies in evidences around the ﬂows. Therefore, it
is worth verifying evidences formally and/or automatically.
We deﬁne the consistency property of life cycles of ev-
idences in a workﬂow diagram in this paper, which is de-
scribed with a new language for workﬂow diagrams called
AIST Workﬂow Language (AWL), and introduce the Evi-
dence Veriﬁcation Algorithm (EVA), which veriﬁes the con-

15
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
sistency property of a given workﬂow diagram.
A workﬂow diagram of AWL is essentially the same as a
Uniﬁed Modeling Language (UML) activity diagram. The
control ﬂows in the workﬂow diagrams of AWL as well as
major workﬂow languages are described by arrows. More-
over, one can describe how to control evidences by using
the arrows in the workﬂow diagrams of AWL. Since most
operations are carried out with some speciﬁc evidences, it is
rational for a single arrow to denote both a control ﬂow and
a ﬂow of an evidence. By describing the ﬂows of evidences
with appropriate control ﬂows, one can easily describe and
understand the life cycles of the evidences. This paper tar-
gets AWL instead of UML, because AWL is used in the ac-
tual development of large-scale information systems at the
National Institute of Advanced Industrial Science and Tech-
nology (AIST) [9].
Roughly, the life cycles of evidences mean a series of
states of the evidences, and consistency of evidence life cy-
cles in a workﬂow means that the workﬂow has no incon-
sistent life cycles of evidences. A consistent evidence life
cycle is deﬁned in a workﬂow diagram with correct struc-
ture, where “correct structureff is deﬁned in [4] and [10].
EVA receives a workﬂow diagram as input data and re-
turns a list of subgraphs as output data, each of which de-
stroys a consistent evidence life cycle. EVA checks the “lo-
cal evidence conditions”, which we will deﬁne in this paper,
to verify the consistency of evidence life cycles in a work-
ﬂow diagram.
EVA is designed to verify life cycles of evidences in
acyclic workﬂow diagrams. We introduce the Removing
Algorithm of Passback Flows (RAPF), where a “passback
ﬂow” in a workﬂow diagram denotes a kind of ﬂow that ap-
pears at the boundary of a “main stream” and the “replay
of an operation” in the workﬂow diagram in order to apply
EVA to cyclic workﬂow diagrams. We will deﬁne passback
ﬂows in a workﬂow by using the graph-theoretical prop-
erties of the workﬂow diagram, and deﬁne RAPF, which
translates a workﬂow diagram into various workﬂow dia-
gram(s) with no passback ﬂows, which can be applied to
EVA.
We implemented both EVA and RAPF, and used them to
verify workﬂow diagrams in actual development at AIST.
Although both EVA and RAPF target workﬂow diagrams
of AWL, one can easily apply these algorithms to activity
diagrams of UML.
This paper is based on a previous paper [7] but differs
from it in three respects. First, we discuss the consistency
property of life cycles of evidence and its veriﬁcation algo-
rithm based on workﬂow diagrams in AWL instead of UML
activity diagrams. Second, we introduce RAPF to apply the
veriﬁcation algorithm to cyclic workﬂow diagrams. Third,
we add proofs of the main lemmas, which we omitted from
[7].
Figure 1. An example of a workﬂow diagram
The remainder of this paper is organized as follows. We
introduce AWL in Section 2 and explain the consistency of
life cycles of evidence in workﬂow diagrams in 3. We in-
troduce EVA in Sections 4 and 6. We deﬁne local evidence
conditions in Section 5 and introduce RAPF in Section 7.
Section 8 explains the experimental results, by using an
implementation of EVA. The experimental results indicate
EVA could effectively be used to test and verify the consis-
tency of life cycles of evidence to substantiate the construc-
tion of the workﬂow itself was consistent.
2. AIST workﬂow language
In this section, we explain a language of workﬂow di-
agrams [9], which is called “AWL” (AIST Workﬂow Lan-
guage). AWL is deﬁned to be appropriate to compose work-
ﬂow diagrams for human workﬂow easily, and to verify
consistency of evidence life cycles in workﬂow diagrams.
2.1. Overview of AWL
Comparing standard workﬂow languages such as BPMN
or XPDL, the main feature of AWL is that in a workﬂow
diagram of AWL one can assign to each activity a list of
evidences (evidence documents) which are used in the ac-
tivity.
The ﬁgure 1 is a workﬂow diagram describing a work
of planning of a research. In the diagram, the rectangles
and the pentacle denote operations needed for planning of a
research. The ﬁgures near the polygons above denote evi-
dences (evidence documents) used on the operations.
In this example, ﬁrst a researcher composes a proposal
of a research, and then a director checks the proposal. If
the proposal passes the checking, then the proposal is re-
turned to the researcher and he/she applies the budget on
an accounting and ﬁnance system based on the proposal,
and ﬁnally the proposal is stored by the researcher. If the

16
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
Figure 2. Shapes of nodes in workﬂow dia-
grams
proposal does not pass the checking, then the proposal is
returned to the researcher and he/she remakes the proposal.
In this paper, we discuss only control ﬂow and evidence
life cycles in a workﬂow diagram. Therefore, we omit no-
tions that are not relevant to control ﬂow of workﬂows or
evidences. For example, in this paper we do not consider
data ﬂows or actors in workﬂow diagrams.
2.2. Control ﬂow of AWL
In the perspective of control-ﬂow, workﬂow diagrams of
AWL are similar to those in BPMN or XPDL, which are the
most standard workﬂow languages, or workﬂows in previ-
ous researches such as [3], [5] or [13].
Deﬁnition 2.1 A workﬂow in the perspective of control-
ﬂow denotes a directed graph W := (node, ﬂow) that sat-
isﬁes the following properties.
1. node is a non-empty ﬁnite set, whose element is
called a node in W.
2. ﬂow is a non-empty ﬁnite set, whose element is called
a ﬂow in W. Each ﬂow f is assigned to a node called
a source of f and another node called a target of f.
3. Each node is distinguished, as follows: start, end, ac-
tivity, XOR-split (branch), XOR-join (merge), AND-
split (fork) and AND-join (rendezvous).
4. Whenever a ﬂow f has a node x as the target (or the
source) of f, x has f as an incoming-ﬂow (resp. an
outgoing-ﬂow) of x. The numbers of incoming-ﬂows
and outgoing-ﬂows of a node are determined by the
type of the node. We itemize them in the following
table.
incoming-ﬂows
outgoing-ﬂows
start
0
1
end
1
0
activity
1
1
XOR-, AND-split
1
≧ 2
XOR-, AND-join
≧ 2
1
Table 1. Numbers of incoming- and outgoing-
ﬂows of a node
5. W has just one start and at least one end.
6. Activity diagrams are “simple” graphs, that is, for each
activity diagram A, and for each nodes N1, N2 in A
there is one edge (ﬂow) from N1 and N2 at most.
Moreover, each activity diagram has no circle edge,
that is, there is no ﬂow from a node N to the same
node N.
7. For a node x in W, there exists a path on W from the
start node of W to x, where a path from s to x denotes
a sequence π = (f0, . . . , fn) of ﬂows in W such that
the source of f0 is s, the target of fn is x and that
the target of fi is the source of fi+1 for each i < n.
Moreover, there exists an end node e and another path
on W from x to e.
2.3. Evidence
By “an evidence” in workﬂow diagrams one means a pa-
per document or a data (a data ﬁle) of a document. In this
paper, we regard an evidence as a paper document, which
is composed, referred, re-written, judged, stored or dumped
in some activities. Unlike data ﬁles, an evidence does not
increase. Though one can make a copy of it, the copy is
regarded not to be the same thing as the original evidence.
Moreover, unlike data in a system multiple people can ac-
cess simultaneously, an evidence can not be used by multi-
ple people at the same time.
In formulating workﬂow diagrams, especially, those for
human workﬂows, evidences are still very important even
through a lot of paper documents are replaced by data (data
ﬁles) in information systems. In a workﬂow diagram of
AWL, evidences used in an activity is explicitly described
in the activity, in order to describe and verify life cycles of
evidences more correctly.
In the technical perspective, a list of evidences with
length at least 0 is assigned to an activity, and an evidence
E is deﬁned to be a triple (e, created, removed), where e
is a label, and created and removed are boolean values. In
what follows, we ﬁx a non-empty set E.
Deﬁnition 2.2 Evidence is a triple (e, created, removed),
where e is an element of E and created and removed are
boolean values, that is, they are elements of {true, false}.
For each evidence E := (e, created, removed), we call e
the evidence label of E.
Remark 2.3 In what follows, we denote E by the follow-
ing ways.
(i) If created = false and removed = false, then we
abbreviate E to “e”.
(ii) If created = false and removed = true, then we
abbreviate E to “(−)e”.

17
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
Figure 3. A workﬂow diagram of paper sub-
mission
(iii) If created = true and removed = false, then we
abbreviate E to “(+)e”.
(iv) If created = true and removed = true, then we ab-
breviate E to “(+)(−)e”.
For a workﬂow diagram W, we consider an allocation
which assigns to each activity in W a string of evidences.
Note that such an allocation may assign to some activities
the empty string, i.e., the string with length 0. By using
workﬂow diagrams, one can express a lot of workﬂows. In
order to explain evidences, we give an example of a work-
ﬂow diagram which explains how to submit a paper, as fol-
lows.
For each workﬂow diagram W, each activity A in W and
for each evidence E in the string assigned to A, we call E an
evidence on A and call A an activity having E. Moreover,
if the evidence label of E is denoted by e, we often call e
the evidence label on A and call A an activity having e.
Moreover, for simplicity, we often identify each evi-
dence with its evidence label. So, in what follows, we often
abbreviate “an evidence label” to “an evidence”.
Remark 2.4 In what follows, we assume that, for each
workﬂow diagram W and each activity A in W, A does
not have multiple evidences sharing the same evidence la-
bel. We call the condition the basic evidence condition. 1
Since each workﬂow diagram W is assume to satisfy the
basic evidence condition, if an activity A in W has an evi-
dence label e, A has just one evidence E with label e. So,
1We assume that each evidence can be differentiated from others even
if some evidences share the same content. For example, if E is the set of
documents, and if an evidence e is copied in an activity A, then one should
not consider that A has two es, but should consider that A has e and a copy
of e.
we often say that e is created (or removed) on A if A has an
evidence E having the (+)-mark (or the (−)-mark, respec-
tively).
3. Consistency properties of workﬂow dia-
grams
The main subject of this paper is to verify consistency
property of evidence life cycles in a workﬂow diagram.
However, the consistency property is closely related to an-
other consistency property of control ﬂow of a workﬂow
diagram. Thus, in this section, we ﬁrst explain consistency
property of control ﬂow of a workﬂow diagram, and then
we explain consistency property of evidence life cycles in
the workﬂow diagram.
In the following subsections of this section and the three
coming sections 4∼6, we will treat only acyclic workﬂow
diagrams. That is, we assume that any workﬂow do not have
a loop, where a loop denotes a sequence of ﬂows
N0 −→
f0 N1 −→
f1 · · · −−→
fn−1 Nn −→
fn N0.
We will treat cyclic workﬂow diagrams in Section 7.
3.1. Correctness of Workﬂows
Consistency veriﬁcation of workﬂows on the control
ﬂow perspective is one of the most important issues in re-
search area of workﬂow veriﬁcations. There are a lot of re-
searches of consistency properties of workﬂows in the view-
point of control ﬂow of them such as [2], [4], [5], [10], [11],
[13] and [14].
An inconsistency of structures of workﬂows comes from
a wrong combination of XOR-split/join nodes and AND-
split/join nodes. Such inconsistencies are known as “dead-
lock” and “lack of synchronization” [5]. An acyclic work-
ﬂow which is deadlock free and lack of synchronization free
is said to be “correct” [13].
Deﬁnition 3.1 For an acyclic workﬂow W, an instance of
W denotes a subgraph V of W that satisﬁes the following
properties.
1. V contains just one start node. Moreover, for each
node x in V , there exists a path on V from the start
node to x.
2. If V contains an XOR-split c, then V contains just one
outgoing-ﬂow of c.
3. If V contains a node x other than XOR-split, then V
contains all outgoing-ﬂows of x.
Deﬁnition 3.2 Let W be an acyclic workﬂow.

18
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
1. An instance V of W is said to be deadlock free if, for
every AND-join r in V , V contains all incoming-ﬂows
of r.
2. An instance V of W is said to be lack of synchroniza-
tion free if, for every XOR-join m in V , V contains
just one incoming-ﬂow of m.
Deﬁnition 3.3 An acyclic workﬂow W is said to be cor-
rect if every instance V of W is deadlock free and lack of
synchronization free.
Instances of a workﬂow diagram are not used not only
to deﬁne correctness property but also to deﬁne consistency
property of evidence life cycles in the workﬂow, which we
will deﬁne in the next section.
3.2. Consistency property of evidence life
cycles
Roughly, the “life cycle” of an evidence means that a se-
ries of states of the evidence. To be more exact, the life cy-
cle of an evidence e (in E) means when e is created, how e is
moved to some activities, and when e is removed (archived
or destroyed).
In order to deﬁne consistent life cycles of evidences in
workﬂow diagram in a rigorous manner, we introduce some
new concepts.
Since workﬂow diagrams have XOR-split nodes, one can
regard each activity diagram A as an gathering of ﬂow-
sequences, each of which is obtained from A based on
XOR-split nodes in A. Based on the point, we introduce
the following deﬁnition.
Deﬁnition 3.4 Let W be a workﬂow diagram and C the
set of all XOR-splits on W. Then, a phenomenon on W
denotes a function ψ : C → ﬂow(W) satisfying that ψ(c)
is an outgoing-ﬂow of c for each c ∈ C, where ﬂow(W)
denotes the set of all ﬂows in W.
Lemma 3.5 For a workﬂow diagram W and a phenomenon
ψ on W, there exists a unique instance V of W such that for
every XOR-split c in V the outgoing-ﬂow of c in V is ψ(c).
We refer to the instance V as W(ψ).
Conversely, for a instance V of W, there is a phe-
nomenon ψ with V = W(ψ).
The lemma above is easily shown.
One can consider each W(ψ) as the workﬂow diagram
obtained from W by extracting all activities and ﬂows
which take place under the phenomenon ψ.
Deﬁnition 3.6 For a workﬂow diagram W, a line in W is a
sequence of ﬂows in W
L = (A1 −−→
f1
A2 −−→
f2
· · · −−→
fn−1 An)
which satisﬁes the following properties.
(i) A1 is an activity or the start in W.
(ii) An is an activity or an end in W.
(iii) A2, . . . , An−1 are nodes in W, each of that is not any
activity, the start, nor any end.
For a line L above, A1 is called the source of L, An the
target of L and fn−1 the target ﬂow of L.
Deﬁnition 3.7 A line L is said to be equivalent to another
line L′ if L and L′ share the source and the target.
Deﬁnition 3.8 A sequence π of lines is said to be equiv-
alent to another sequence π′ of lines if there exist lines
L1, . . . , Ln and L′
1, . . . , L′
n such that
π = (A1 −−→
L1
A2 −−→
L2
· · · −−→
Ln−1 An)
π′ = (A1 −−→
L′
1
A2 −−→
L′
2
· · · −−→
L′
n−1 An)
and that, for each i = 1, . . . , n, Li is equivalent to L′
i.
L ∼ L′ (or π ∼ π′) denotes that L is equivalent to L′
(π is equivalent to π′, respectively). Note that every line is
equivalent to itself, and so is every sequence of lines.
Deﬁnition 3.9 Let W be an acyclic workﬂow diagram, ψ
a phenomenon of W and let e be an evidence in W. Then,
the consistent life cycle of e on W(ψ) is the sequence π of
lines in W(ψ)
π := (A0 −→
L0 A1 −→
L1 · · · −−→
Ln−1 An)
which satisﬁes the following properties.
(i) Every activity Ai has e.
(ii) e is created on A0.
(iii) e is not created on Ai for any i with 0 < i ≦ n.
(iv) e is removed on An.
(v) e is not removed on Ai for any i with i < n.
Deﬁnition 3.10 An acyclic workﬂow diagram W is said to
have consistent evidence life cycles if, for each phenomenon
ψ of W, each activity A in W(ψ) and for each evidence e
on A, there is an essentially unique consistent life cycle π
of e which contains A.
The statement “there is an essentially unique consistent
life cycle π of e containing A” means that there is a consis-
tent life cycle π of e containing A and that π ∼ π′ for each
consistent life cycle π′ of e containing A.

19
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
4. Veriﬁcation algorithm of evidence life cycles
The main body of this paper is to introduce an algorithm
verifying consistency of evidence life cycles in a given
acyclic workﬂow diagram, which is called EVA (Evidence
Veriﬁcation Algorithm).
Although details of EVA is described in the section 6, we
here explain input and output data and the main property of
EVA.
Input data of EVA: a correct workﬂow diagram W and all
instances {W(ψ)} of W.
Output data of EVA: a string consisting of pairs (L, e),
where L denotes a sequence of ﬂows and e an evidence.
Each (L, e) in output data denotes a defect of an evi-
dence life cycle in input data.
Theorem 4.1 For each correct workﬂow diagram W, if the
output data of W by EVA is the empty string, then W has
consistent evidence life cycles, and vice versa.
This theorem is a corollary of Lemma 6.2 described in
Section 6.
Remark 4.2 Here we omit explanations about how to ex-
tract instances from a workﬂow diagram and how to verify
correctness of it. For details, see [6]. One can also refer to
[2], [10], [11], [13] and [14],
5. Local evidence conditions
Actually, in order to verify consistency of evidence life
cycles of a given correct workﬂow diagram W, EVA checks
whether or not W satisﬁes “local evidence conditions”. In
order to explain there conditions, we ﬁrst introduce a propo-
sition and some deﬁnitions.
Proposition 5.1 For each workﬂow diagram W, each line
L and for each evidence e contained in L, just one of the
following properties holds.
(1) The source S and the target T of L share e, and e is not
removed on S and e is not created on T.
(2) The source S and the target T of L share e, and e is
removed on S, and e is created on T.
(3) The source S of L has e, e is removed on S, and the
target of L does not have e.
(4) The target T of L has e, e is created on T, and the source
of L does not have e.
(5) The target T of L has e and e is not created on T. More-
over, if the source S of L has e, then e is removed on S.
(6) The source S of L has e and e is not removed on S.
Moreover, if the target T of L has e, then e is created on T.
One can easily show the proposition above.
Remark 5.2 Let L be an line with source S and target T
activities, and let e be an evidence, for example, a document
used in S or T or both of S and T. Moreover, assume that L
contains no AND-split and no AND-join. Then, if S has e
and e is not removed on S, e should exist on T. Therefore,
(6) above can be regard as an wrong state. Similarly, if T
has e and e is not created on T, e should “come from” S,
and hence, (5) above can be regard as an wrong state as well
as (6).
We next assume that L has an AND-split F and another
line L′ has S as its source. Then, when S has e, e is not
removed on S, and when T does not have e, it is possible
that e “pass” from S to the target of L′. In such a case, one
can not assure that (6) is wrong. One can consider several
similar cases.
Deﬁnition 5.3 A pair (L, e) of a line L and an evidence e
is called a line-evidence.
Deﬁnition 5.4 To each line-evidence (L, e), we assign one
of the following states.
(1) SCS (State of Consistent Succession) if (L, e) satisﬁes
(1) in Proposition 5.1.
(2) SIR (State of Inconsistent Redundancy) if (L, e) satisﬁes
(5) in Proposition 5.1.
(3) SID (State of Inconsistent Defection) if (L, e) satisﬁes
(6) in Proposition 5.1.
(4) SCNS (State of Consistent Non-Succession) if (L, e)
satisﬁes one of (2)∼(4) in Proposition 5.1.
Deﬁnition 5.5 For a correct workﬂow diagram W, W is
said to satisﬁes local evidence conditions if, for each phe-
nomenon ψ of W, the restricted graph W(ψ) satisﬁes the
following conditions.
(1) For each line L in W(ψ) and for each evidence e, if
(L, e) is assigned SIR, then there exists a line L′ sharing
the target with L such that (L′, e) is assigned SCS.
(2) For each line L in W(ψ) and for each evidence e, if
(L, e) is assigned SID, then there exists a line L′ sharing
the source with L such that (L′, e) is assigned SCS.
(3) There are not two line-evidences (L, e) and (L′, e),
which are assigned SCS, and which share the source (or the
target), but which do not share any node as their targets (or
their sources, respectively).
The following lemma indicates that, for a workﬂow dia-
gram W, if W is correct, local evidence conditions sufﬁce
to verify consistency of evidence life cycles in W.
Lemma 5.6 For each correct workﬂow diagram W, if W
satisﬁes local evidence conditions, then W has consistent
evidence life cycles, and vice versa.
We show this lemma in Appendix A of this paper.

20
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
6. Deﬁnition of EVA
By virtue of Lemma 5.6, in order to verify consistency of
evidence life cycles of a given correct workﬂow diagram W,
it is sufﬁcient to check that W satisﬁes local evidence con-
ditions. So, we establish EVA as an algorithm ﬁnding line-
evidences (L, e) which violate local evidence conditions of
a given correct workﬂow diagram.
Deﬁnition of EVA
(I) Input and output data of EVA are described in Section 4.
(II) The content of EVA is deﬁned, as follows.
(EVA.1) Prepare three empty sets Suc, Inq and Res,
which are provided for recording line-evidences.
(EVA.2) Execute EV.2.1 and EV.2.2 below in parallel.
(EVA.2.1) For a given W, starting the start of W, search all
ﬂows f in W by an appropriate graph search algorithm, 2
and all lines with target ﬂow f.
(EVA.2.2) For each line L and for each evidence e con-
tained in L, check the state of (L, e), and classify (L, e),
as follows.
Case (i) where (L, e) is assigned SCS.
If L contains an AND-split or an AND-join, put (L, e)
into Suc. Otherwise, dump (L, e).
Case (ii) where (L, e) is assigned SIR.
If L contains an AND-join, put (L, e) into Inq. Oth-
erwise, put (L, e) into Res.
Case (iii) where (L, e) is assigned SID.
If L contains an AND-split, put (L, e) into Inq. Oth-
erwise, put (L, e) into Res.
Case (iv) where (L, e) is assigned SCNS.
Dump (L, e).
(EVA.3)
For
each
phenomenon
ψ
of
W,
execute
(EVA.3.1)∼(EVA.3.3) below.
(EVA.3.1) Set Suc(ψ) := Suc ∩ W(ψ) and Inq(ψ) :=
Inq ∩ W(ψ), where W(ψ) is regarded to be the set of line-
evidences on W(ψ).
(EVA.3.2) For each element (L, e) of Inq(ψ), check
whether or not there exists an element (L′, e) of Suc(ψ)
such that (L, e) and (L′, e) satisfy the property (1) or (2) in
the deﬁnition of local evidence conditions. If (L, e) does
not have such a (L′, c), put (L, e) into Res.
(EVA.3.3) Check whether or not there exist multiple ele-
ments of Suc(ψ) violating the property (3) in the deﬁnition
of local evidence conditions. If there exist such elements,
put them into Res.
(EVA.4) Output Res.
2We use a depth ﬁrst search algorithm for implementation of EVA.
Remark 6.1 In most cases, it does not need to prepare all
instances, since some instances W(ψ), . . . , W(ψ′) share
the same ﬁgure even though ψ, . . . , ψ′ are not the same.
At the last, we show correctness of EVA.
Lemma 6.2 (Correctness of EVA) For each correct work-
ﬂow diagram W, EVA terminates in ﬁnite steps. Moreover,
all lines violating local evidence conditions of W are con-
tained in the output of W by EVA, and vice versa. In par-
ticular, Theorem 4.1 holds.
We show this lemma in Appendix B.
7. Application of EVA to cyclic workﬂow dia-
grams
Until now, we have dealt with acyclic workﬂow dia-
grams. From now, we will discuss veriﬁcation of correct-
ness and consistency of evidence life cycles over cyclic
workﬂow diagrams. In order to apply EVA to cyclic work-
ﬂow diagrams, we extend the deﬁnitions of consistency
properties in the previous sections to those over cyclic
workﬂow diagrams. Thus, in order to extend the deﬁnitions
of consistency properties, we consider a translation of cyclic
workﬂow diagrams.
The main body of this section refers to [8].
Before deﬁning the translation, we explain an observa-
tion of “real” workﬂow diagrams.
7.1. Observation of real workﬂow diagrams
By virtue of investigation of about 460 workﬂow dia-
grams, which have been composed in development of real
large-scale information systems, we have the following ob-
servations about real workﬂow diagrams.
• Observation 1.
Most loops in workﬂow diagrams
contain ﬂows which we call “passback ﬂows”.
A passback ﬂow in a workﬂow diagram denotes a kind of
a ﬂow which appears at a boundary of a “main stream” and
a “replay of an operation” in the workﬂow diagram. For ex-
ample, in the ﬁgure 1, the main stream in the workﬂow is de-
scribed by the sequence of ﬂows between activities: “Make
a proposal”, “Check the proposal”, “Apply the proposal”
and “Store the proposal”. On the other hand, if the proposal
does not pass in the activity “Check the proposal”, the pro-
posal will be turned back to the previous activity “Make a
proposal” via the ﬂow labeled “no”. In this case, the re-
searcher have to replay the activity “Make a proposal”. So,
the ﬂow “no” is a passback ﬂow.
Workﬂow diagrams in the investigation above contain no
loop which is considered in usual programs and assured its

21
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
termination property. That is, most loops in the workﬂow
diagrams express replays of operations in the workﬂow di-
agrams. Thus, most loops contain passback ﬂows.
• Observation 2.
Every information described in a
workﬂow diagram is treated as a “static” information.
In particular, no information about operations after an
operation is turned back via a passback ﬂow.
For example, in the ﬁgure 1, in the case where a pro-
posal is turned back to the activity “Make a proposal” via
the passback ﬂow ”no“, the researcher should not “make”
a proposal, but “remake” the proposal. However, there is
actually no modiﬁcation for such a case in a workﬂow dia-
gram.
It maybe possible to reconstruct such a workﬂow so that
there is not such an inconsistency above which occurs on
the target of the passback ﬂow. Thus, one can select a pol-
icy which prohibit inconsistencies on the targets of pass-
back ﬂows like the example above. However, in many cases,
this constraint is so strong that workﬂow diagrams have too
large size or too complex structure. Therefore, in the real
development, they do not select such a policy. Thus, we
do not consider inconsistency between the target and the
source of a passback ﬂow in a workﬂow. Actually, from the
real workﬂow diagrams in the investigation, we also have
the following observation.
• Observation 3.
The change of evidences during a
passback ﬂow is not described in the workﬂow dia-
gram. In other words, even if there is some incon-
sistency between the evidences on the source node of
(the ﬁrst ﬂow of) a path containing a passback ﬂow and
those on the target node of (the last ﬂow of) the path,
one should not regard it as an error.
In principle, evidences on each node in a workﬂow di-
agram are described only when a job stream arrived at the
point for the ﬁrst time. For example, the activity “Make
a proposal” in the ﬁgure 1 has an evidence “(+)proposal”,
which is information described at the ﬁrst time when the
job stream arrives at the activity node from the start node.
The evidence “(+)proposal” is not what is described in the
case where a job stream arrives at the activity via the pass-
back ﬂow “no”. Therefore, we should not consider that the
evidence “proposal” in the activity “Check the proposal”
changes to the evidence “(+)proposal” in the activity “Make
a proposal” via the ﬂow “no”.
The observations above indicate that a veriﬁcation algo-
rithm should not output inconsistency between evidences on
the source node of a path containing a passback ﬂow and the
target node of the path as an error. As a consequence of the
discussion, we take the stance to deal with passback ﬂows
as special ones.
There maybe a workﬂow diagram in which a passback
ﬂow must not be regarded as a special one. We can not
apply our methodology to such cases. We do not care about
that, because such cases are rare.
7.2. Translation of cyclic workﬂow diagrams
In order to translate a cyclic workﬂow diagram into
those to which EVA are applicable, we remove all pass-
back ﬂows in the cyclic. In this section, we ﬁrst formalize
passback ﬂows in a workﬂow diagram, by using only graph-
theoretical properties of the workﬂow diagram. Moreover,
we introduce an algorithm which removes all passback
ﬂows in a given workﬂow diagram. For more details, see
[8].
A path (f1, . . . , fn) in a workﬂow diagram W satisfying
the following properties is called a lariat path.
1. The source of f1 is a start node in W.
2. The target of fn is the source of one of f2, . . . , fn.
3. For each i and j with i ̸= j, fi and fj do not share the
same source.
The last ﬂow fn of a lariat path σ := (f1, . . . , fn) is
called the tail of σ.
A path (f1, . . . , fn) in a workﬂow diagram W satisfying
the following properties is called a directly ending path.
1. The source of f1 is a start node in W.
2. The target of fn is an end node in W.
3. For each i and j with i ̸= j, fi and fj do not share the
same source.
In the following two paragraphs, we consider what a
passback ﬂow is.
First, a passback ﬂow heads in the opposite direction to
a primary job stream and reaches such a job stream. There-
fore, a passback ﬂow is the tail of a lariat path.
Next, consider a ﬂow contained in some directly ending
path. Then, the ﬂow is considered a member of a directly
ending path, and the change of evidences during the ﬂow is
described in the workﬂow diagram, even if it is the tail of a
lariat path. Therefore, the ﬂow is not considered a passback
ﬂow.
By virtue of the discussion above, we can formalize pass-
back ﬂows, as follows.
Deﬁnition 7.1 A ﬂow f in a workﬂow diagram W is called
a passback ﬂow if f is the tail of a lariat path in W and there
is no directly ending path in W which contains f.

22
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
Figure 4. A workﬂow diagram of proposal
submission
For example, in the ﬁgure 4, G is a passback ﬂow, while
F is not, even though F is the tail of a lariat path.
Now we deﬁne an algorithm RAPF (Removing Algo-
rithm of Passback Flows) [8], which translates a workﬂow
diagram W into some workﬂow diagram(s) with no pass-
back ﬂows, as follows.
1. Detect all ﬂows in W and record tails t1, . . . , tn of all
lariat paths in W.
2. Detect all directly ending paths and let p1, . . . , pm be
tails each of which is not contained in any directly end-
ing path. These tails are passback ﬂows in W.
3. Replace targets T1, . . . , Tm of p1, . . . , pm by new end
nodes E1, . . . , Em, respectively. These end nodes are
called additional end nodes. Note that the number of
incoming ﬂows of each Ti decreases.
4. Execute the following operations corresponding to the
number of incoming ﬂows of each Ti. (Note that each
Ti is an XOR-join or AND-join node.)
(a) If Ti has more than or equal to two incoming
ﬂows, then leave Ti as it is.
(b) If Ti has just one incoming ﬂow, then replace the
target of the incoming ﬂow by the target of the
outgoing ﬂow of Ti, and then remove Ti as well
as the outgoing ﬂow of Ti.
(c) If Ti has no incoming ﬂow, then replace the
source of the outgoing ﬂow of Ti by a new start
node and remove Ti. The new start node is called
a additional start node.
RAPF makes no new lariat path. Moreover, any ﬂow in
a directly ending path does not become not to be contained
Figure 5. RAPF may divide a workﬂow dia-
gram into multiple workﬂow diagrams
in any directly ending path by RAPF. Thus, we have the
following proposition.
Proposition. RAPF translates a workﬂow diagram W into
RAPF(W), each element in which is a workﬂow diagram
with no passback ﬂows.
RAPF may output multiple workﬂow diagrams.
We
show an example in the ﬁgure 5. The operation on this ex-
ample is executed mechanically by RAPF.
By RAPF, one can extend the deﬁnitions of correctness
and consistency of evidence life cycles of acyclic workﬂow
diagrams to those over cyclic workﬂow diagrams. In order
to do so, we only have to redeﬁne instances deﬁned in Def-
inition 3.1.
Deﬁnition 7.2 For an cyclic workﬂow W, an instance of
W denotes a subgraph V of RAPFW that satisﬁes the prop-
erties 1)∼3) in Deﬁnition 3.1.
By using the instances above, one can extend the deﬁni-
tions of correctness and consistency of evidence life cycles
of acyclic workﬂow diagrams to those over cyclic workﬂow
diagrams.
The role of RAPF is to extract a designer’s intention of
a workﬂow diagram. Here, the “designer’s intention” is the
intention which ﬂows to be exceptional ones around which
evidence life cycles should not be checked, and which ﬂows
to be usual ones around which evidence life cycles should
be checked. Such a designer’s intention is not completely
formalizable, and hence, RAPF may not extract the de-
signer’s intention completely. However, from the observa-
tion of actual workﬂow diagrams, we claim that RAPF has
enough ability to extract designers’ intentions about pass-
back ﬂows correctly.
RAPF is not an algorithm which translates cyclic work-
ﬂow diagrams to acyclic ones. Cyclic workﬂow diagrams
are not contained in the range of EVA. Moreover, some

23
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
cyclic workﬂow diagrams are not translated into acyclic
ones by RAPF. One can not apply EVA to such diagrams.
However, such diagrams are rare, and we do not care about
them.
8. Experimental results
The algorithm EVA is implemented as a java program
called “evidenceVeriﬁer”, the input data of which is an xml-
ﬁle expressing a workﬂow diagram, and the output data of
which is an xml-ﬁle expressing a string of line-evidences
which violate life cycles of evidences.
3 More properly
speaking, evidenceVeriﬁer has functions which execute the
following for each input data W.
(1) veriﬁcation of syntax and graph-theoretical properties
(for example, connectivity) of W.
(2) translation of W to (an) acyclic workﬂow diagram(s)
W ∗ by RAPF in Section 7.
(3) extraction of instances {S1, . . . , Sn} of W ∗.
(4) veriﬁcation of basic and local evidence conditions of
W ∗ based on {S1, . . . , Sn}.
In this paper, we omit explanations of algorithms which
(1) and (3) are based on (one can refer to [6] for the algo-
rithm of (3)).
By using the program, we verify a set of real workﬂows,
which is a subset of the set of workﬂows used to design a
real large enterprise application system of AIST. The subset
consists of 60 workﬂows. Each of them has 5∼34 nodes
and 5∼31 ﬂows. All workﬂows are reviewed in a manual
way in advance.
The output data of the workﬂows above by evidenceVer-
iﬁer are classiﬁed into the following types.
(i)
defects coming from complications of
structures of workﬂows
6
(ii)
defects coming from inconsistencies of
structures of workﬂows
8
(iii)
defects by trivial mistakes
26
(iv)
superﬂuous error messages
10
Every execution time is within 0.5 second.
Important defects are those in (i) and (ii).
Defects in (i) come from unexpected ﬂows of activities
in workﬂows. For example, 2 defects in (i) come from a
gap coming from changing ﬂows of activities in a workﬂow
in the later phases. It is difﬁcult to ﬁnd such defects by
manual.
Defects in (ii) come from designers’ essential misun-
derstanding on some activities or inconsistent structure of
3Properly speaking, input data express workﬂows corresponding to
workﬂow diagrams. Moreover, output data have several additional infor-
mations.
workﬂow diagrams. In particular, we could ﬁnd 3 inconsis-
tent ﬂows of activities by the defections in (ii) above. This
indicates that, in order to verify construction of a workﬂow,
it is worth to verify consistency of evidence life cycles in it.
Defects in (iii) are defects which come from forgetting
adding (+)-marks, forgetting removing (+)-marks, typos of
evidence labels or forgetting describing evidences.
The error messages in (iv) consist of 3 messages by de-
signers’ informal omission and 7 messages by the relations
to other workﬂow diagrams. As for designers’ omission,
designers sometimes omit some evidences on purpose. Our
program does not corresponds to such omissions. As for
the relations to other workﬂow diagrams, the program has
not yet been implemented any function analyzing relation-
ships between multiple workﬂow diagrams. For example,
there is a workﬂow A which is a successive part of another
workﬂow B, and an evidence E which is created in B and
still occurs in A. Then the designer does not add (+)-mark
to the ﬁrst occurrence of E on A. However, our program
outputs an error message to that. This is a superﬂuous error
message.
9. Conclusion and future work
In this paper, we have deﬁned a consistency property
of evidence life cycles of a workﬂow diagram in AWL
(AIST Workﬂow Language), and an algorithm EVA (Ev-
idence Veriﬁcation Algorithm), which veriﬁes the consis-
tency property of each workﬂow diagram. We also have de-
ﬁned local evidence conditions which are necessary and suf-
ﬁcient conditions for each workﬂow diagram to have con-
sistent evidence life cycles (Deﬁnition 5.5 and Lemma 5.6).
Moreover, we have shown that, for each correct workﬂow
diagram W, EVA can determine whether or not W has con-
sistent evidence life cycles (Theorem 4.1).
In Section 7, in order to apply EVA to cyclic workﬂow
diagrams, we introduce an algorithm to translate them into
acyclic ones. We ﬁrst formalize a passback ﬂow, which ex-
presses (a boundary of a main stream and) a reply of an
operation in a workﬂow. We formalize this ﬂow with only
graph-theoretical properties of the workﬂow diagram. We
then give an algorithm RAPF, which detects and removes
all passback ﬂows in a given workﬂow diagram, and which
translates cyclic workﬂow diagrams to acyclic ones, which
EVA is applicable to.
In Section 8, we experimented with an implementation
“evidenceVeriﬁer” of EVA and 60 workﬂow diagrams of
a real large enterprise application system, and have shown
that evidenceVeriﬁer could ﬁnd 38 defects of evidence life
cycles of the workﬂow diagrams and that we could ﬁnd sev-
eral defects of structure of the workﬂow diagrams from the
defects of evidence life cycles of them.
As a future work, we are developing the way to verify

24
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
other kinds of life cycles of workﬂow diagrams, for exam-
ple, life cycles of operations and data in databases which
are described on activities.
References
[1] Business Process Management Initiative (BPMI). Business
Process Modeling Notation (BPMN) Version 1.0. Technical
report, BPMI.org, 2004.
[2] H. Lin, Z. Zhao, H. Li, and Z. Chen. A novel graph reduction
algorithm to identify structural conﬂicts. In Proceedings of
the 35th Annual Hawaii International Conference on System
Science (HICSS). IEEE Computer Society Press, 2002.
[3] R. Liu and A. Kumar. An analysis and taxonomy of unstruc-
tured workﬂows. In Proceedings of 3rd International Con-
ference on Business Process Management (BPM), LNCS
3649, pages 268–284. Springer, 2005.
[4] W. Sadiq and M. E. Orlowska. On correctness issues in con-
ceptual modeling of workﬂows. In Proceedings of the 5th
European Conference on Information Systems (ECIS), pages
943–964, 1997.
[5] W. Sadiq and M. E. Orlowska.
Analyzing process mod-
els using graph reduction techniques. Information Systems,
25(2):117–134, 2000.
[6] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Taka-
hashi. Algorithms verifying phenomena independence and
abstracting phenomena subgraphs of UML activity dia-
grams. In Software Engineering Saizensen 2007, pages 153–
164. Kindaikagaku-sha (in Japanese), 2007.
[7] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Takahashi.
Veriﬁcation algorithm of evidence life cycles in extended
UML activity diagrams. In Proceedings of The 2nd Interna-
tional Conference on Software Engineering Advances (IC-
SEA 2007). IEEE Computer Society Press, 2007.
[8] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Taka-
hashi. Quality improvement of workﬂow diagrams based on
passback ﬂow consistency. In Proceedings of the 10th In-
ternational Conference on Enterprise Information Systems
(ICEIS 2008), pages 351–359. INSTICC, 2008.
[9] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Takahashi.
Workﬂow diagrams based on evidence life cycles. In Pro-
ceedings of the 8th Joint Conference on Knowledge - Based
Software Engineering 2008 (JCKBSE 2008), Frontiers in
Artiﬁcial Intelligence and Applications, pages 145–154. IOS
Press, 2008.
[10] W. M. P. van der Aalst. Veriﬁcation of workﬂow nets. In Ap-
plication and Theory of Petri Nets 1997, LNCS 1248, pages
407–426. Springer, 1997.
[11] W. M. P. van der Aalst.
The application of petri nets to
workﬂow management.
The Journal of Circuits, Systems
and Computers, 8(1):21–66, 1998.
[12] W. M. P. van der Aalst. Business process management de-
mystiﬁed: A tutorial on models, systems and standards for
workﬂow management.
In Lectures on Concurrency and
Petri Nets, LNCS 3098, pages 1–65. Springer, 2004.
[13] W. M. P. van der Aalst, A. Hirnschall, and H. M. W. Verbeek.
An alternative way to analyze workﬂow graphs. In Proceed-
ings of the 14th International Conference on Advanced In-
formation Systems Engineering (CAiSE), LNCS 2348, pages
535–552. Springer, 2002.
[14] H. M. W. Verbeek, T. Basten, and W. M. P. van der Aalst. Di-
agnosing workﬂow processes using woﬂan. The Computer
Journal, 44(4):246–279, 2001.
[15] Workﬂow Management Coalition (WfMC). Workﬂow Man-
agement Coalition Workﬂow Standard: Workﬂow Process
Deﬁnition Interface - XML Process Deﬁnition Language
(XPDL).
(WfMC-TC-1025), Technical report, Workﬂow
Management Coalition, Lighthouse Point, Florida, USA,
2002.
A. Proof of Lemma 5.6
In this subsection, we ﬁrst show that, for a correct work-
ﬂow diagram W, if W satisﬁes local evidence conditions,
then W has consistent evidence life cycles, and then we
show the converse proposition.
Here we consider only an acyclic workﬂow diagrams.
Deﬁnition A.1 For an acyclic workﬂow diagram W and a
node n in W, the degree of n in W denotes the maximum
of the lengths of the paths from the start node of W to n.
Moreover, the height of n in W denotes the maximum of
the lengths of the paths from n to some end node of W.
Let W be a correct workﬂow diagram, ψ a phenomenon
of W, A an activity in W(ψ) and let e be an evidence in A.
Now we construct a consistent evidence life cycles F of
e on W(ψ)
F := (A0 −−→
L0 · · ·
−−→
Ln−1 An
= A
= B0 −−→
R0
· · · −−→
Rm−1 Bm),
where Ln, . . . , L0, R0, . . . , Rm−1 and Rm are lines.
Claim 1. There is an essentially unique sequence of lines
A0 −−→
L0 · · · −−→
Ln−1 An = A which satisﬁes the following
properties
(i) Every activity Ai has e.
(ii) e is created on A0.
(iii) e is not created on Ai for any i with i > 0.
(iv) e is not removed on Ai for any i with i < n.
Proof of Claim 1. We construct A0 −−→
L0 · · · −−→
Ln−1 An, by
using induction on the degree of A in W.
(1) If e is created on A, then we set A0 to be A.
(2) Assume that e is not created on A. Then, by local evi-
dence conditions, there exists an essentially unique line L
with target A. Moreover, the source S of L contains e,

25
International Journal On Advances in Software, vol 1 no 1, year 2008, http://www.iariajournals.org/software/
which is not removed on S, and the degree of S is less than
that of A. Therefore, by induction hypothesis, there is an
essentially unique sequence of lines S0 → · · · → Sk = S.
Thus, we obtain the desired sequence S0 → · · · → Sk −→
L
A.
Moreover, by the deﬁnition of equivalence relation
on sequences of lines, the desired sequence is essentially
unique. 2
Claim 2. There is an essentially unique sequence of lines
A = B0 −−→
R0 · · · −−→
Rm−1 Bm which satisﬁes the following
properties
(i) Every activity Bi has e.
(ii) e is removed on Bm.
(iii) e is not created on Bi for any i with i > 0.
(iv) e is not removed on Bi for any i with i < m.
Proof of Claim 2. One can show the claim in the similar
way to the proof of Claim 1, by using induction on the
height of A in W. 2
By Claims 1 and 2, we obtain an essentially unique con-
sistent life cycle of e in W(ψ). Therefore, we have shown
that if W satisﬁes local evidence conditions, then W has
consistent evidence life cycles.
Now we assume that W has consistent evidence life cy-
cles and show that W satisﬁes local evidence conditions.
That is, we show that W(ψ) satisﬁes the properties (1)∼(3)
in Deﬁnition 5.5.
(1) Let L be a line in W(ψ) and (L, e) a SIR line-evidence.
Then, the target T contains e but e is not created on T. Thus,
by consistency of evidence life cycles in W, there exists an
essentially unique consistent evidence life cycle
A0 → · · · → Ak−1 −−→
Lk−1 Ak = T → · · · → An
with k > 0. Since Ak−1 contains e but e is not removed on
Ak−1, (Lk−1, e) is a SCS line-evidence. We have the result.
One can show the properties (2) and (3) in the similar
way to the proof of (1) above. 2
B. Proof of Lemma 6.2
Since it is clear that EVA terminates in ﬁnite steps, we
show that, for a given correct workﬂow diagram W, the
output of W by EVA is the set of all line-evidences which
violate local evidence conditions of W.
We ﬁrst remark that the division of line-evidences in the
step EVA.2.2 in the deﬁnition of EVA does not depend on
instances, since the state of a line-evidence (L, e) is deter-
mined only by the state of E on the source and the target of
L.
We now show that every line-evidence which violates the
property (1), (2) or (3) in Deﬁnition 5.5 is contained in the
set Res at the step (EVA.4) in the deﬁnition of EVA. Let
W(ψ) be an instance of W and (L, e) a line-evidence in
W(ψ).
(1) If (L, e) violates the property (1) in Deﬁnition 5.5,
(L, e) is assigned SIR, but there exists no SCS line-
evidence (L′, e) such that L′ is contained in W(ψ) and
shares the target with L. Thus, if L contains no AND-
join, (L, e) is put into Res in the step (EVA.2.2).(ii). If
L contains an AND-join, then (L, e) is put into Inq in
the step (EVA.2.2).(ii), and moved to Res in the step
(EVA.3.2). So, (L, e) is contained in Res in the step
(EVA.4).
(2) If (L, e) violates the property (2) in Deﬁnition 5.5, one
can obtain the same result in the similar way to (1)
above.
(3) If (L, e) violates the property (3) in Deﬁnition 5.5,
(L, e) is assigned SCS, and there exists another SCS
line-evidence (L′, e) such that L′ is also contained
in W(ψ) and shares the target or source with L.
Thus, (L, e) and (L′, e) are put into Suc in the step
(EVA.2.2).(i), and moved to Res in the step (EVA.3.3).
So, (L, e) is contained in Res in the step (EVA.4).
We ﬁnally show that every line-evidence in Res violates
the property (1), (2) or (3) in Deﬁnition 5.5. Let (L, e) be
a line-evidence in Res. Then, it is put in Res in the step
(EVA.2.2.(ii)), (EVA.2.2.(iii)), (EVA.3.2) or (EVA.3.3).
(1) If (L, e) is put in Res in the step (EVA.2.2.(ii)), (L, e)
is assigned SIR but L contains no AND-join. Thus, for
any instance W(ψ) which contains L, there is no line
which shares the same target with L, since L contains
no AND-join. So, (L, e) violates the property (1) in
Deﬁnition 5.5.
(2) If (L, e) is put in Res in in the step (EVA.2.2.(iii)),
one can show that (L, e) violates the property (2) in
Deﬁnition 5.5 in the similar way to (1) above.
(3) It is clear that every line-evidence which is put into
(EVA.3.2) or (EVA.3.3) violates one of the properties
in Deﬁnition 5.5.
Thus, we have completed the proof of Lemma 6.2. 2

