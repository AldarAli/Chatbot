Expurgated Codes for Detecting Jamming in Multi-level Memories
Yaara Neumeier
Faculty of Engineering
Bar-Ilan University
Email: yaara.neumeier@biu.ac.il
Osnat Keren
Faculty of Engineering
Bar-Ilan University
Email: osnat.keren@biu.ac.il
Abstract—Robust q-ary codes can efﬁciently detect jamming
in multilevel memories when q is a power of two. When q
is not a power of two, a binary information word has to be
converted and encoded into a q-ary codeword. This conversion
expurgates the code; some of the q-ary codewords are never
used. Unless properly designed, expurgation can signiﬁcantly
degrade the efﬁciency of the code in terms of its error detection
capability. This work presents a q-ary robust Quadratic-Sum
code for arbitrary q’s and analyzes the error masking probability
of the expurgated code when applied to multilevel memories. It
is shown that by wisely designing the converter, this degradation
can be minimized, and in some cases, the expurgated code’s
efﬁciency can be superior to the one of the original code. This
work suggests how to construct a converter to optimize code
properties.
Index Terms—Robust codes; Multi-level Memories; Jamming
attacks; Hardware security.
I. INTRODUCTION
Memory arrays are prone to jamming attacks [1], where
an adversary injects faults into the memory to alter a stored
value. The injected fault manifests itself as an additive error
of an arbitrary multiplicity; i.e., any number of bits may be
ﬂipped or distorted. [2]. Fault injection can be executed, for
example, using variations on voltage, temperature, white light,
laser, ion beams, etc. An attacker can inject faults into the
memory to change its content and then acquire information
about the system by analyzing its behavior [2].
Several countermeasures to jamming attacks on memories
have been proposed [2][3]. For example, one approach to
protect memories is to implement intrusion detection mech-
anisms based on active protection using tamper-proof box
and sensors to make the device physically inaccessible. Since
different sensors are used against different injection methods,
this method becomes expensive and inappropriate for simple,
small devices. Moreover, it is powerless against new types of
attacks that were not considered by the designers. Furthermore,
internal information about the design may help the attacker
bypass this protection. An alternative approach is to detect
the manifestation of the fault as an error using error detecting
codes.
Classic coding theory addresses the problem of the reliabil-
ity of information transmitted over a noisy channel or stored in
storage media. In classic coding theory, the errors are assumed
to be random with a relatively small probability. Consequently,
a reliability oriented code should protect the system from a
small number of random errors (small multiplicity). Many
known codes designed for reliability (such as the parity bit
code, Hamming code, BCH codes, etc) are linear [4], however;
in linear codes, all the errors that are codewords are never
detected. As a result, reliability oriented codes cannot be used
to provide security against an attacker that can inject any error.
Jamming can be detected by nonlinear robust codes capable
of detecting any non-zero error. The efﬁciency of these codes
is measured in terms of their error masking probability QM =
maxe̸=0 Q(e) where Q(e) is the probability that an error e is
masked by codewords in C. This probability depends on the
probability mass function of the codewords; that is,
Q(e) =
∑
c,c+e∈C
p(c),
where p(c) is the probability that c ∈ C is used.
The Quadratic-Sum (QS) code [5] is a nonlinear q-ary high-
rate robust code of length n and dimension k deﬁned over a
ﬁnite ﬁeld, i.e., for a q that is a power of a prime. When all the
codewords are equally likely to occur, the code is an optimum
code, and its error masking probability equals QC = q−(n−k)
[5]. If these conditions are not fulﬁlled, the performance of
the code may signiﬁcantly degrade [6].
The encoding complexity of a binary QS code is relatively
low with respect to other robust codes (e.g., the codes in
[7][8] which involve computations over ﬁnite ﬁelds of high
order); its k information symbols are treated as 2s symbols
from Fr
2 and its single redundant symbol x2s+1 is the sum
∑s
i=1 x2i−1x2i over Fr
2. This simple structure makes the code
an attractive countermeasure to jamming in binary and q-ary
multilevel memories, where q is a power of two.
However, in some cases, the code’s alphabet size is not a
power of two. Note that the number of levels in a multilevel
memory, l, may be a power of two. Nevertheless, the code’s
alphabet size q may be smaller than l. For example, in Write-
Once-Memory codes and rank-modulation codes the alphabet
size is smaller than the number of levels to enable several
write cycles to the same address before block-erasure. As far
as we know, all known robust codes ([5][7][8][9]) are deﬁned
over a ﬁnite ﬁeld, i.e., where q is a power of a prime, and
15
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

cannot be used in the case where the number of states is not
a power of a prime.
Another problem that arises when the code’s alphabet size is
not a power of two is that each binary information word has to
be converted to a q-ary word by a dedicated conversion circuit
[10]. A conversion circuit maps a binary vector of length k2 to
a q-ary vector of length kq. A conversion circuit is constructed
from sub-blocks, denoted DCCi. The input of each sub-block
is a binary w2-bit vector, and its output is a q-ary vector of
length wq. The values w2 and wq are chosen such that wq =
⌈w2 logq 2⌉. A schematic illustration of a multilevel memory
with a conversion circuit is shown in Figure 1. Since qwq <
2w2, some of the codewords of the (original) q-ary code C are
never used. When these unused words are chosen arbitrarily,
the error masking probability of the expurgated code, denoted
by M, can become higher than the error masking probability
of the original code.
Robust codes over ﬁnite ﬁelds for a non-uniform distribution
of codewords were discussed in [6][11][12]. In [6], the authors
showed that when most of the codewords appear with low
probability, which is the case for some Final State Machines
(FSMs), it is possible to avoid the worst case scenario by pre-
mapping the information word before the encoding. In [12], a
general approach for mapping the most probable codewords to
a predeﬁned set was suggested. In [11] the authors dealt with
the non-uniform characteristics of FSMs using randomized
masking. Another way to cope with a non-uniform distribution
of codewords is by embedding randomness [13][14]; these
codes are also deﬁned over ﬁnite ﬁelds. However, since the
random symbols are an integral part of the codeword, their rate
is lower than the rate of (deterministic-encoding) robust codes
such as the QS and the Punctured-Cubic/Square in [7][8].
These solutions are appropriate for applications where a small
portion of the states appear with high probability; they are less
suitable for applications such as multilevel memories where
some words never occur and other words appear with uniform
probability.
This paper expands the QS construction to codes over
integer rings, proves its robustness, and examines the security
related implications of applying expurgated codes on q-ary
memory systems with data conversion circuits in cases where
q is not a power of a prime. It is shown that by choosing M
properly, the practical error masking probability QM may be
even better than QC. The main ideas and results presented in
this paper are the following:
• A QS-based code C is robust over rings.
• The maximal error masking probability QM of code M
is bounded by
(2|M| − |C|)
p1|M|
≤ QM ≤
|C|
p1|M| < 2QC,
(1)
where p1 is the smallest divisor of q. Since p1 ≥ 2, an
expurgated code is robust; it can detect any nonzero error
with a probability greater than zero.
• If p1 = 2 there exists an expurgated code M, which
Figure 1. Multilevel memory system with data conversion circuit, protected
by encoder and a checker.
provides a smaller error masking probability, i.e., QM <
QC. If p1 ̸= 2 and
(p1 − 1)kq + 1 ≤ |C| − |M|
(2)
there exists an M with QM <
|C|
p1|M|.
• A code construction for M which minimizes QM in
cases where p1 = 2 for a given set of parameters, and
has
(2|M| − |C|)
p1|M|
≤ QM ≤ QC,
is presented.
The rest of this paper is organized as follows. Section II
deﬁnes and analyzes the Quadratic-Sum code for a general
q. Section III presents the expurgated code and the security
problem that arises when applying the codes to q-ary memories
where q is not a power of two. Then, lower and upper bounds
on the error masking probability are presented. Section IV
suggests how to choose M in cases where p1 = 2 to minimize
its error masking probability and Section V concludes the
paper.
II. THE EXTENDED QS CODE
Notations: Regular lowercase letters are used to represent
scalars. Boldface lowercase letters are used to denote row
vectors, e.g., x = (x1, . . . , xn) is a vector of length n, where
wH(x) denotes the Hamming weight of x. Double stroke
capital letters are used to denote algebraic structures, e.g., Fq
is a ﬁnite ﬁeld with q elements. Regular uppercase letters are
used to represent sets, e.g., S, where |S| is the number of
elements in S. Calligraphic capital letters are used to denote
codebooks, e.g., C.
Consider a multilevel memory whose levels are mapped into
symbols in an alphabet of size q. In this paper, we refer to
such a memory as a q-ary memory. The set of q symbols
with addition and multiplication form an algebraic structure.
If q = pt and p is prime, the algebraic structure is a ﬁnite
ﬁeld Fq; otherwise, it is a ring Rq in which operations are
computed modulo q. To simplify the text, when it is clear
from the context, we denote the algebraic structure by Zq,
and denote addition and subtraction by the symbols ⊕ and ⊖,
respectively.
16
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

Known robust codes are deﬁned over a ﬁnite ﬁeld, i.e., the
size of the alphabet, q, is a power of a prime. If the number
of different states (voltage levels) that a memory cell can have
in each write cycle is not a power of a prime, a robust code
over a ring is required. Note that the computation of all these
known robust codes over ﬁnite ﬁelds involves multiplication.
However, in the case of a ring, there are elements in the ring
with no multiplicative inverse, which may affect the analysis
and the resulting error masking probability. In this section we
introduce an extension of the QS code. The resulting code
is a robust code over a ring. The maximal error masking
probability of the extended code is different (higher) than the
maximal error masking probability of the original QS code
over a ﬁnite ﬁeld.
The QS code is deﬁned in [5] for the case where q is a
power of a prime (PoP). The number of redundancy symbols
in [5] is r ≤ k. The code can be extended for q’s which are
not necessarily PoPs as follows:
Construction 1. Let q = ∏v
i=1 piti where pi < pi+1. Let k =
2sr, where r = 1 if q is not a PoP. Let x = (x1, x2, . . . , x2s)
where xi ∈ Zr
q for 1 ≤ i ≤ 2s. The code QS code is
C = {(x, u) : x ∈ Z2s
q , u =
s
∑
i=1
x2i−1x2i ∈ Zr
q}.
Note that when q is not a PoP, we take r = 1 since a
larger r cannot improve the code’s efﬁciency. To simplify the
notation, from here on, unless otherwise stated, q is not a PoP.
The case where q is a PoP can be viewed as subcase of the
general case with p1 = q.
Let e
=
(ex, eu) be an error vector, where ex
=
(ex1, . . . ex2s) ∈ R2s
q
and eu ∈ Rq. The error is masked by
a codeword c if (x ⊕ ex, u ⊕ eu) ∈ C. In other words, the
error masking equation of the code is
s
∑
i=1
(x2i−1 ⊕ ex2i−1)(x2i ⊕ ex2i) =
s
∑
i=1
x2i−1x2i ⊕ eu.
(3)
Equivalently,
axT = b
(4)
where a ∈ R2s
q
and b ∈ Rq are
ai =
{
exi+1
if i is odd
exi−1
if i is even
, and b = eu ⊖
s
∑
i=1
ex2i−1ex2i.
Let B(a) be the set
B(a) = {b|∃x : axT = b}.
Clearly, B(a) = B(ex). To analyze which elements are in
B(a), it is convenient to use the greatest common divisor (gcd)
over a set of nonzero integers; deﬁne g(a) ∈ Rq as
g(a) = gcd({ai|ai ̸= 0} ∪ {q}).
The set B(a) contains all the multiples of g(a) modulo q.
Therefore |B(a)| =
q
g(a). In addition, for all 1 ≤ i ≤ 2s, ai
is also in B(a). For example, if q = 6, r = 1, k = 2 and
a = (0, 4), then g(a) = 2, B(a) = {0, 2, 4} and |B(a)| = 3.
Property 1. Let a ∈ R2s
q \ {0}. Then, (4) has qk|B(a)|−1
solutions if b ∈ B(a) and 0 solutions otherwise.
For uniformly distributed codewords, the number of solu-
tions of (4) for a given e deﬁnes the error masking probability;
Theorem 1. Let q not be a PoP. Let C be a QS code where the
codewords in C are uniformly distributed. The error masking
probability of C for any nonzero error e is Q(e) =
1
|B(a)| if
b ∈ B(a), and Q(e) = 0 otherwise. In particular, the maximal
error masking probability of the QS code is QC = 1/p1.
The set of all ex’s can be divided into subsets according to
their error masking probability. Let Ex be the set of ex’s that
have the maximal error masking probability. Any ex ∈ Ex
can be written as ex =
q
p1 ˜ex where ˜ex ∈ Zk
p1. Since B(ex) =
B(e′x) for all ex, e′x ∈ Ex, there are (p1k − 1)p1 distinct
error vectors e that maximize the error masking probability.
Example 1. Consider the case where q = 6, k = 2, and
r = 1. In this case, the set Ex = {03, 30, 33} and B(Ex) =
{0, 3}. Each one of the errors 030, 033, 300, 303, 330, 333 has
an error masking probability Q(e) = 0.5 = Q.
III. THE EXPURGATED CODE
Consider a k2-bit binary word to be stored in a q-ary
memory array where q is not a power of two. For converting
the binary word into a q-ary word of length kq, the k2 bits
are divided into blocks of w2 bits which are then mapped into
blocks of wq q-ary symbols; whereas,
⌊ k2
w2
⌋wq + ⌈(k2
mod w2) logq 2⌉ ≤ kq ≤ ⌈ k2
w2
⌉wq.
For simplicity, we assume that k2
w2 is an integer (however, our
results equally apply to non integers). Since q is not a power
of two, some of the q-ary vectors are never used; denote by
Dw the set of the combinations over in Fwq
q
that are never
used,
|Dw| = qwq − 2w2 < 2w2.
Denote by D ⊆ Zkq
q the set of q-ary vectors of length kq that
never occur at the output of the converter, and by M = Zkq
q \D
the set of vectors that can appear at the output of the converter.
Each vector in D corresponds to a codeword in C that is never
used; denote by D ∈ C the set of unused codewords, and by
M = C \ D the expurgated code,
|M|
=
|M| = 2k2 > |C|/2,
|D|
=
|D| = (qkq − 2k2) < |C|/2.
(5)
It is assumed that the codewords in M are uniformly dis-
tributed.
Clearly the error masking probability of M may be different
from the error masking probability of C. Denote by R(e) the
17
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

C
C
e
⊕
n
q
Ζ

	
		



	
			

	
	
	

			

		
	
 ⊕


 ⊕

 ⊕



 ⊕

 ⊕




 ⊕

Figure 2. Three types of errors in expurgated codes.
number of codewords that mask the error vector e,
RC(e) = |{c|c ∈ C and c ⊕ e ∈ C}|.
For uniformly distributed codewords we have, Q(e)
=
RC(e)/|C|. Denote by ΛC1,C2(e) the cross-correlation from a
code C1 to a code C2; i.e,
ΛC1,C2(e) = |{c|c ∈ C1 and c ⊕ e ∈ C2}|.
Since C = M ∪ D and M ∩ D = ∅ the autocorrelation of the
code C can be rewritten as
RC(e) = RM(e) + ΛM,D(e) + ΛD,M(e) + RD(e).
(6)
Figure 2 illustrates the contribution of each component in
(6) to RC(e) for three types of errors. The codewords of
expurgated code M and its shifted set (e + M) are shown in
red, and the codewords that correspond to D appear in light
gray. RM(e) is the number of codewords in the intersection of
the two red areas. The best case is shown on the left hand side
of the ﬁgure. Since RM(e) is the autocorrelation of code M,
the best case is where RM(e) = 0, however, it is impossible
to achieve this for all errors, since for each two codewords
c1, c2 ∈ M there is an error vector e such that c1 ⊕ e = c2.
The worst case is where RM(e) is maximized. The desired
case is where the maximal value of RM(e) is minimized.
A standard checker of a separable code uses the kq infor-
mation symbols that are read from the memory to compute the
expected redundant symbols. If the computed value matches
the value of the rq symbols stored in memory, the checker
declares that no error has occurred, otherwise, it raises a ﬂag.
Such a checker masks an error e with a probability
RM(e) + ΛM,D(e)
|M|
.
(7)
which may be higher than QM. This problem can be avoided
if the checker also veriﬁes that the received codeword belongs
to M (i.e., it veriﬁes that the information vector is a legal
output of the converter). Now the error masking probability is
reduced to the true error masking probability of M, i,e,
QM(e) = RM(e)
|M| .
In what follows we assume that the latter checker is used.
A. An upper bound on the error masking probability
Theorem 2. The expurgated code M is robust. Its error
masking probability is upper bounded by
QM ≤
|C|
p1|M| < 2
p1
= 2QC.
(8)
The error masking probability of the expurgated code de-
pends on the choice of the set M; in particular, QM(e) may
be larger, smaller, or identical to the error masking probability
of the original code. The following example demonstrates how
sensitive the error masking probability is to the choice of M.
Example 2. Consider the case where k2 = w2 = 6 bits of
information are converted to kq = wq = 2 symbols over alpha-
bet q = 10, and are protected by a single redundant symbol. In
this case, |C| = 102, |M| = 26 and |D| = |C|−|M| = 36. The
maximal error masking probability of the original QS code C
is QC = 0.5.
Let D = {10 − 19, 30 − 39, 50, 51 − 59, 70 − 75}. Consider
the error vector e = 050; the corresponding parameters
are a = 50 and b = 0. Note that for each x ∈ D,
axT = 5x1 ⊕ 0x2 ̸= 0; namely, all the vectors in D are
not in XC(050). Therefore, RM(050) = RC(050) = 50, and
the error masking probability is QM(050) = QM ∼ 0.78.
In the following section we introduce a method to choose a
D which provides a QM of 0.3125; this D consists of the
following vectors:
{02 − 09, 12 − 19, 20, 21, 24, 25, 30, 31, 34, 35, 40, 41
, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91}.
B. A lower bound on the error masking probability
Denote by XC(e) the set of the information words that mask
an error e,
XC(e) = {x|(x, u(x)) ∈ C and (x, u(x)) ⊕ e ∈ C}.
Note that |XC(e)| = RC(e).
The choice of Dw determines D, and hence D. Denote by
△(e) the difference between the number of codewords that
mask e in C and the number of codewords that mask it in M,
△(e) = RC(e) − RM(e).
If △(e) equals zero, RC(e) = RM(e) and QM(e) is max-
imized. If △(e) > 0 then RM(e) < RC(e) and QM(e) is
smaller than its upper bound. From (6) it follows that
△(e) = ΛM,D(e) + ΛD,M(e) + RD(e).
The sum ΛD,M(e) + RD(e) is the number of codewords
that mask e in C and are in D and therefore are not in M. In
fact, it equals the size of the intersection between the set of
codewords that mask e and the set of deleted codewords, that
is,
ΛD,M(e) + RD(e) = |D ∩ XC(e)|.
18
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

Similarly, denote by (D − ex) = {x ⊖ ex|x ∈ D}, then
ΛM,D(e) + RD(e) = |(D − ex) ∩ XC(e)|.
Therefore,
△(e) ≤ |D ∩ XC(e)| + |(D − ex) ∩ XC(e)|.
(9)
Thus,
△(e) ≤ 2|D|.
The rationale behind the choice of M (and hence, the choice
of D), is to decrease QM by decreasing the error masking
probability of the errors that maximize it in C; these errors
form the set Ex. In other words, denote by
△ =
min
e∈Ex,b∈B(ex)
△(e),
the minimal difference of the error masking probabilities over
all the errors that maximize QC(e). The goal is to maximize
△ so as to minimize QM.
Theorem 3. The error masking probability of M is
QM ≥ (|M| − |D|)
p1|M|
.
(10)
Proof. Let ex ∈ Ex. For all bi ̸= bj ∈ B(ex), we have,
{x|axT = bi} ∩ {x|axT = bj} = ∅.
Recall that the size of B(ex) is p1. Therefore, for each ex ∈
Ex there are p1 distinct non-empty and disjoint sets XC(e).
Consider the intersection of an arbitrary set S ⊆ Zkq
qr with
all the sets XC(e) where ex ∈ Ex. The minimal size of the
intersection is smaller or equal to the average; that is,
min
e,ex∈Ex and b∈B(ex)
|S ∩ XC(e)| ≤ |S|
p1
.
By applying this upper bound to the sets D and (D −ex), we
get,
△ ≤ min
e∈Ex
|D ∩ XC(e)| + |(D − ex) ∩ XC(e)| ≤ 2|D|
p1
.
Therefore, the minimal difference of the errors in Ex is upper
bounded by △ ≤ 2|D|/p1 for any D, and
QM = maxe̸=0 RC(e) − ∆
|M|
≥ (|M| − |D|)
p1|M|
.
C. The impact of the size of M on its error masking proba-
bility
Before we address the question of how to choose Dw (and
hence, D), we need to relate to cases where the choice of D
has no impact. In such cases, regardless of the choice of D,
the error masking probability coincides with the worst case
given in Th. 2; that is, △ = 0.
Theorem 4. If p1 = 2, it is always possible to choose D such
that △ > 0. If p1 ̸= 2 and
|D| ≥ (p1 − 1)kq + 1,
it is possible to choose D such that △ > 0; and similarly, if
|Dw| ≥ (p1 − 1)wq + 1
then it is possible to choose Dw such that ∆ > 0.
Proof ommitted.
IV. CONVERTER STRUCTURE
Usually, a converter is built from identical sub-blocks.
Hence, it is sufﬁcient to determine the set Dw of unused
vectors for a single sub-block. In this section, it is assumed
that p1 = 2; however, with a small modiﬁcation the results
can be applied to other cases. Recall that we assume that k2
w2
is an integer, and that kq =2s. The case where
k2
w2 is not an
integer can be viewed as a subcase of this case. The output of
the converter is a q-ary vector of length wq, x = (x1, . . . xwq).
We deﬁne a Hamming ball of dimension wq and radius p1
as the set
Hwq,p1 =
{
zj =
wq
∑
i=1
hjivi | hji ∈ {0, . . . , p1 − 1}
}
,
where vi = 0i−110wq−i−1 is a unite vector of Hamming
weight one.
The size of a Hamming ball is pwq
1 . If p1 = 2 then |Hwq,p1|
divides |Dw|. Hence, Dw can be a union of shifted disjoint
Hamming balls.
The following construction is designed to maximize ∆,
hence to minimize the error masking probability.
We start by deﬁning a set of offset vectors Γwq,
Γwq = {θ ∈ Zwq
q
| θ =
kq
∑
i=1
vip1ti,
ti ∈ {0, . . . , q
p1
− 1}}.
Notice that the symbols of θ are multiples of p1. Therefore,
for any two vectors θ1 ̸= θ2, the intersection (θ1 ⊕ Hwq,p1) ∩
(θ2 ⊕ Hwq,p1) is empty.
Construction 2 (Disjoint Hamming Balls). Deﬁne the set Dw
as
Dw =
∪
θi∈Θ
θi ⊕ Hwq,p1.
(11)
where Θ ⊆ Γwq is an arbitrary subset of offsets vectors, |Θ| =
|Dw|/p1wq.
Recall that each information word is a concatenation of
kq/wq vectors of length wq. If one of these vectors is in Dw,
the resulting information word is in D; if none of them is in
Dw, the resulting information word is in M. In other words,
the set of unused information words is
D =
∪
ψ∈Ψ
ψ ⊕ Hkq,p1,
19
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

where a vector ψ is in Ψ if at least one of its kq/wq portions
is a vector in Θ and the others are in Γwq.
Theorem 5. If D is chosen according to Const. 2 and p1 = 2
then
(|M| − |D|)
p1|M|
≤ QM(e) ≤ 1
p1
= QC.
Proof ommitted.
Is it possible to reach the lower bound on QM? Recall the
proof of Theorem 3; in the proof, an upper bound on ∆ was
obtained by adding the sizes of two sets. If these two sets are
disjoint, an equality holds. In other words, it is possible to
reach the lower bound on QM if for all x ∈ D, x /∈ D − ex.
The following example shows that in some cases this situation
cannot be avoided.
Example 3. Consider the case where q = 6, kq = wq = 3
and k2 = w2 = 7. In this case D is a union of 11 shifted
Hamming balls |D| = 11 · |H3,2| = 88, here |Ψ| = 11. In
fact, there are (q/2)3 = 27 possible vectors out of which
Ψ is chosen. Therefore, there must be at least two linearly
dependent vectors in Ψ. Without loss of generality, assume
that ψ1 = 002 and ψ2 = 004 are in Ψ. In this case, for
ex = 003 ∈ Ex and x = 005 we have,
x
=
(ψ2 ⊕ 001) ∈ D
x
=
(ψ1 ⊕ 000) ⊖ 003 ∈ D − ex
That is, x is both in D and D − ex.
V. CONCLUSION
This work analyzed the efﬁciency of robust codes when
used to protect multilevel memories. When the code’s alphabet
size, q, is not a power of two, the binary information must be
converted into a q-ary word. It was shown that this conversion
can signiﬁcantly degrade the error masking probability of
the codes. However, by wisely designing the converter, the
degradation of the code properties can be minimized. Bounds
on the practical error masking probability were given. A
construction for the converter in cases where the QS code
is applied to the multilevel memory was provided. It was
shown that this construction indeed reduces the error masking
probability of the resulting code.
ACKNOWLEDGMENT
This research was supported by the ISRAEL SCIENCE
FOUNDATION (grant No. 1200/12).
REFERENCES
[1] S. Skorobogatov and R. Anderson, “Optical fault induc-
tion attacks,” in Cryptographic Hardware and Embedded
Systems-CHES 2002.
Springer, 2003, pp. 2–12.
[2] A. Barenghi, L. Breveglieri, I. Koren, and D. Naccache,
“Fault injection attacks on cryptographic devices: Theory,
practice, and countermeasures,” Proceedings of the IEEE,
vol. 100, no. 11, pp. 3056–3076, 2012.
[3] H. Bar-El, H. Choukri, D. Naccache, M. Tunstall, and
C. Whelan, “The sorcerer’s apprentice guide to fault
attacks,” Proceedings of the IEEE, vol. 94, no. 2, pp.
370–382, 2006.
[4] R. E. Blahut, “Theory and practice of error control
codes,” Reading, 1985.
[5] M. Karpovsky, K. Kulikowski, and Z. Wang, “Robust er-
ror detection in communication and computational chan-
nels,” Spectral Methods and Multirate Signal Processing.
SMMSP’2007. International Workshop on.
[6] I. Shumsky, O. Keren, and M. Karpovsky, “Robustness
of security-oriented binary codes under non-uniform dis-
tribution of codewords,” in DEPEND 2013, The Sixth
International Conference on Dependability, 2013, pp.
25–30.
[7] Y. Neumeier and O. Keren, “Robust generalized punc-
tured cubic codes,” IEEE Transactions on Information
Theory, vol. 60, pp. 2813–2822, 2014.
[8] N. Admaty, S. Litsyn, and O. Keren, “Puncturing, expur-
gating and expanding the q-ary bch based robust codes,”
in Electrical Electronics Engineers in Israel (IEEEI),
2012 IEEE 27th Convention of, Nov 2012, pp. 1–5.
[9] M. Karpovsky and A. Taubin, “New class of nonlinear
systematic error detecting codes,” Information Theory,
IEEE Transactions on, vol. 50, no. 8, pp. 1818–1819,
2004.
[10] M.
Bauer,
“Data
path
for
multi-level
cell
memory,
methods
for
storing
and
methods
for
utilizing
a
memory
array,”
Mar.
24
2011,
uS
Patent
App.
12/956,977.
[Online].
Avail-
able:
http://www.google.com/patents/US20110069548
[accessed: 2016-5-22]
[11] K. D. Akdemir, G. Hammouri, and B. Sunar, “Non-linear
error detection for ﬁnite state machines,” in Information
Security Applications.
Springer, 2009, pp. 226–238.
[12] A. Levina and S. Taranov, “Spline-wavelet robust code
under non-uniform codeword distribution,” in Computer,
Communication, Control and Information Technology
(C3IT), 2015 Third International Conference on.
IEEE,
2015, pp. 1–5.
[13] R. Cramer, Y. Dodis, S. Fehr, C. Padr´o, and D. Wichs,
“Detection of algebraic manipulation with applications to
robust secret sharing and fuzzy extractors,” in Advances
in Cryptology–EUROCRYPT 2008.
Springer, 2008, pp.
471–488.
[14] Z. Wang and M. Karpovsky, “Robust fsms for crypto-
graphic devices resilient to strong fault injection attacks,”
in On-Line Testing Symposium (IOLTS), 2010 IEEE 16th
International.
IEEE, 2010, pp. 240–245.
20
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-492-3
DEPEND 2016 : The Ninth International Conference on Dependability

