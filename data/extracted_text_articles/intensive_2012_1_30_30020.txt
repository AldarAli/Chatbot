 
Native-based RIA Development Using Mobile Phone Methodologies to Improve the 
Overall Project Functionalities 
 
Jonathan Bar-Magen Numhauser 
Dept. of Computer Science 
University of Alcala 
Alcala de Henares, Spain 
jonathan.bar@edu.uah.es 
Jose Antonio Gutierrez de Mesa 
Dept. of Computer Science 
University of Alcala 
Alcala de Henares, Spain 
jantonio.gutierrez@uah.es
 
 
Abstract—In this article, a work at progress will be exposed 
on a study that is being elaborated by our investigation team 
regarding the working methods of Resource Intensive 
Applications (RIA) development. Using previous experience in 
software development for limited devices and applying our 
previous investigation work on collaborative component based 
development for web frameworks this work elaborates a 
complete workflow for RIA development, resulting in an 
improvement of the RIA functionalities and work development 
time. These improvements derived in an enhancement of the 
developing process by reducing time and increasing component 
recycling. 
  
Keywords—Methodology; 
Optimization; 
Workflow; 
Collaborative; Benchmark. 
I. 
 INTRODUCTION 
The following article will expose in details a 
development methodology that originally was oriented to 
mobile phone's software development. The purpose of this 
is to obtain circumstantial statistic information on the 
functionality of Resource Intensive Applications (RIA) 
application that apply these methodologies, and as a 
consequence analyze the possible improvements to the 
overall development process that may allow the creation of 
an alternative working methodology. 
Mobile phone's software development is well known in 
the computer science field. The most significant technology 
to cover this working environment was the Java 2 Micro 
Edition (J2ME) [11]. For many years, such a technology 
was used for mobile phone's software development, as well 
as other smaller technological environments like Symbian 
and Research in Motion (RIM) [12]. 
Apart from the available programming languages and 
the virtual machines that allowed the programs to execute 
correctly, to have a successful impact on the mobile phone's 
market, there was an urging need to cover the largest 
amount of targeted devices, and depending on the device's 
characteristics, the number of possible versions of the same 
program could have resulted on an average of 30 different 
versions. 
The creation of a methodology to reduce the developing 
cost was in place and as consequence such methodology 
was designed, coming hand in hand with tools that allowed 
the correct functionality of the established steps [1]. The 
results were significant reducing the cost in time and work 
effort of software development for mobile devices.  
This success was rapidly studied and as a result derived 
in the study of its availability for other technological fields, 
in particular RIA development, which is being explained in 
this document. The work in process described in this project 
has taken place for the last year, studying many aspects of 
the software development life cycle, applying it on real 
cases, and collecting the results for further analysis. It aims 
to expose this investigation work, and its future objectives. 
The paper will initially describe the environmental pre-
requisites, following a detailed explanation of the available 
components as well as the problem at hand, and ending with 
the exposing a few results of the practical experiment. 
 
II. 
LIMITED RESOURCES DEVICES METHODOLOGY 
As it was stated in the introduction, the motivation for 
this investigation work is to reduce considerably the 
development time of RIAs as well as improve their 
functionality to make the resulting software optimal for 
network based activity. 
At first it was decided, based on experience and statistic 
results to promote the native software development, which 
consists in adapting the resulting software application to 
each hardware, in contrary with developing in automatic 
multi-platform adaptability, originated from the Java basic 
motto: "Develop it once and run it anywhere" [10]. This 
significant decision in the approach may not seem optimal, 
but we can confirm that this new limitation opened other 
alternatives and new needs to ensure the software 
functionality and quality in the targeted devices. 
RIA development in the present day is as diverse as the 
mobile phone's market. To ensure maximum impact on the 
market RIA projects require the developers to manufacture a 
PC version as well as a mobile version, which include 
mainly 3 different dominant technologies, Android, Cocoa 
and RIM [12].  
9
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-188-5
INTENSIVE 2012 : The Fourth International Conference on Resource Intensive Applications and Services

 
Regardless 
the 
specific 
native 
technology, 
the 
development in each different technology is what will 
ensure a correct and fully powerful functionality of the 
resulting RIA. The project will cover the largest amount of 
devices and will allow an optimized feedback. 
Software development for limited resources devices 
forces the developer to pay more attention to details, 
improving his development skills and requiring the highest 
experience to ensure that the application will correctly work 
with the variety of limitations. One of the main obstacles in 
the current market is the large amount of flaws in the 
resulting applications, and even though the common excuse 
is the difficulty of developing in such devices, there is no 
excuse in not using the past experience to avoid repeating 
those same mistakes. The definition of a methodology 
intends to offer a solution to this problem. 
Some of the characteristics that form this optimized 
methodology consist of debugging, which may sound 
trivial, but considering the limitations of each device it end 
being more complicated. Not to mention that the debugging 
requires passing through 2 experienced developers. 
Debugging and testing are strongly linked, and as more 
documentation is available, the better [2]. 
Documentation 
is 
another 
characteristic 
of 
this 
methodology. Once a device is fully documented, and a 
great database with all the limitations, hardware bugs, and 
tricks is established, the developing process will reduce its 
dependency on experienced developers and allow a high 
level development for more less experienced developers. 
An example of this characteristics are either JMEPolish, 
which offers a consistent online mobile devices database 
with many of the possible flaws and problems a developer 
may encounter, as well as newer databases created by 
institutions like Adobe for graphical based development in 
devices, or Eclipse for raw JME development. 
This same process will be adapted on a greater scale for 
the methodology of a RIA development, to improve the 
collective knowledge. 
Another characteristic is the creation of common 
libraries, and the use of code pre-processing tools to allow a 
more dynamic composition of resulting applications, and so 
reducing the great effort of code modification in every 
existing version of the RIA. 
As a result of applying this methodology, the impact was 
significant on mobile phone devices. The development 
process before the existence of such methodology, on a 
practical tested enterprise, was the creation of a base version 
on a specific device, followed by its adaptation on the 
variety of devices to which the software was targeted. The 
process was based on creating for each device an 
independent version, increasing the possibility for mistake 
and reducing the developer time to add new functionalities. 
The lack of resources affected the time the developers had 
to add and improve the common development library as 
well as improving the feedback in documentation. 
Following the implementation of this methodology, and 
the consequent improvements based on experimental data, 
the process time dropped significantly, to a 300 percent 
average, in an exponential curve that stabilized. The 
program optimization to each targeted device was also 
significantly improved, allowing the programs to run 
fluently. 
Figure 1 describes a resulting developing process based 
on the established methodology. 
 
III. 
RIA NATIVE DEVELOPMENT METHODOLOGY 
As a result experience from the mobile phone devices 
methodology and the gradual evolution of the RIA market in 
the last few years, we stumble upon the fact that much of the 
used 
characteristics 
in 
the 
mobile 
phone 
device 
methodology could be migrated to RIA development 
considering the new network types and its application on a 
broader devices network. 
The market has evolved to include a various number of 
electronic devices that come along with its specific native 
technology, which will serve us greatly if we applied the 
already developed and tested methodology detailed in the 
previous section. 
Our work in the actual phase consist in applying the 
methodology developed for mobile device on RIA 
development of a prototype program, so we can evaluate the 
time, functionality, and improvements to the methodology 
as well as the organization that lays behind it. 
While in limited devices software development we had 
to consider as the highest priority the limited resources, in 
RIA we have to reorder the priorities to turn the 
development on multiple devices as a united modular 
project resulting in managing the RIA as a compendium of 
modules [4]. Those modules represent many of the 
functionalities required from the RIA, and each will have in 
its time a representation in a device.  
The possible structure may be described as followed: 
(Figure 2) 
- RIA structured as a collection of modules. 
- Module is a collection of version modules. 
- Each version module is a representation of the module on a 
specific device. 
The creation of a united database from which the 
members of the development team may acquire information 
will be similar as in the case of limited devices 
development. The difference will consist that in the RIA 
case we seek to cover more than limited devices, but also a 
variety of devices from PCs to TVs and etc. 
The impact on the functionality of each module version 
will be proportional to the experimental experience joined 
by the documental database gathered. Our speculations 
point that an improvement will be most significant on the 
optimization level of the program allowing the RIA to 
function substantially better and take advantage of the 
maximum resources accessible in each device for the RIA. 
10
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-188-5
INTENSIVE 2012 : The Fourth International Conference on Resource Intensive Applications and Services

 
IV. 
INVESTIGATION WORK OBJECTIVE 
One of the reasons for which we started with the study 
of this methodological alternative is because of our past 
experiences with RIA applications. From this we have 
noticed in many fields of work a lack of organization, and 
we couldn't find an already established agile methodology to 
apply in our case. 
We have been working with SCRUM [3], and a 
developed collaborative components methodology that was 
design as well by our team, but still it was mainly oriented 
to light applications and not intensive. 
Our team has also worked on mobile phones 
methodologies, and we saw a much more adequate 
methodology in these than in the agile alternative. The main 
reason is because in this case we are dealing with multiple 
devices for RIA, which require by itself a custom made 
organization. 
So the objective for which we are working is to obtain 
metric information on the impact of this kind of 
methodology over RIA applications. To obtain a possible 
derivative of the mobile phones methodology as well as the 
collaborative components methodology, that will permit the 
establishment of a more adequate working method for the 
development of RIA. 
The wished result is that the methodology will allow the 
investigator to begin a development work on a RIA, but 
underneath the RIA will be oriented and targeted to a 
broader network of devices, which will form a feedback 
network and improve the functionality of the RIA by taking 
advantage of the maximum capacity of each device in the 
network (native based development). 
V. 
EXPECTED METHODOLOGICAL STRUCTURE 
The resulting methodology is expected to form a 
dynamic structure that will allow a constant modification 
system. In addition to the standard working methods that 
abound, this methodology pretends to depend on a number 
of tools and standards that will establish the necessary steps 
to successfully create a complex RIA. 
In the assumption that the basic steps of development, 
analysis, design, and maintenance will be fulfilled, we 
consider the need to add some basic roles, to ensure the 
quality of the methodology [5]. 
To implement a rich and optimized documentation 
database a documentation expert should be considered for 
the workflow. The role of Documentation Engineer is a 
possible option to certify the quality of the resulting support 
documentation and its administration. 
Developers with experience in limited resources devices 
are recommended for the development steps of the working 
method. Their experience is always welcome, and their 
developing methods will significantly affect the resulting 
optimization of the RIA. 
In addition, we are studying the possibility of adding 
collaborative based roles, to improve the recycling of 
modular components [6]. Being the case of RIA, and the 
necessity of ensuring the development quality of each 
module and its module versions, the sharing of existing 
modules and distribution of the developing work, reducing 
the developing time and allowing a more detailed feedback 
of the work taken place will improve the functionality 
results of the upcoming RIAs. 
An international communication manager (ICM) as well 
as a global project manager will be an adequate 
incorporation to the working team [1]. 
Tools to control the versioning of the RIAs have been 
developed and are now on prototype stage, but can be 
confirmed as very useful and growing in importance inside 
the workflow. 
 
VI. 
DOCUMENTATION DEPENDENCY 
Documentation in our upcoming methodology will have 
a main role. Its impact on previous mythologies stated in 
this work, in specific the mobile devices methodology had 
seriously effect on the resulting data, improving the overall 
work process, and allowing the users of this work process to 
adapt its steps in a variety of targeted software. 
The reason for adopting this step, regardless the extra 
resources needed to invest in it consists in the need to 
maintain a certain control on the manufacturing of the RIA 
product. Eventually even if in this particular case, the 
documentation process may take place depending on the 
targeted devices; it is always recommended, based on our 
previous experience on mobile methodologies, to execute an 
exhaustive documentation process, which will allow a rich 
feedback for both the methodology as well as the project life 
cycle. 
 
VII. 
OVERALL PROGRESS 
In the last year of work, the results were the following. 
The first step of achieving an initial prototype for modules 
and modules version was successfully completed, and in 
consequence we achieved favorable results of RIA modules 
operating on a variety of devices. 
A structural design was established for the creation of 
such RIA projects, complying with the need for 
documentation and first steps of the resulting new work 
method. The technology and previous methodology required 
us to adapt the development steps to comply with the 
characteristics of a RIA project, and a first glance of this 
was successfully achieved not long ago.  
Our effort to achieve a unified local development 
environment for native software development began to show 
a logical structure. Adding to this environment the 
development rules established for each module and native 
context, enforced a number of changes to the original 
hypothesis that had to be applied to comply with the overall 
compatibility. 
Following the defined development structure in Model-
View-Controller MVC, each environmental technological 
11
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-188-5
INTENSIVE 2012 : The Fourth International Conference on Resource Intensive Applications and Services

 
context (layer) covered a certain percentage of the Model, 
the View and the Controller modules.  
Database information would be treated under a database 
native 
technological 
script, 
example 
MySql. 
This 
technological context would be limited to Model treatment, 
even if database scripts in general can manage Controller 
actions, this action was associated with the management 
script on the server side, example PHP scripting technology. 
Both database and script management technologies will 
be treated on the server sides, and will comply with the 
overall Model and Controller requirement of a global 
project in our methodology. 
On the Client side we will end up having the intensive 
application, RIAs that will comply with the View and 
Controller requirements of the global project. 
This general structure will ensure an independent 
technological development for each native context, and as a 
result allow the creation of a component based development 
methodology, requiring the expertise of members in each of 
the 
native 
context, 
and 
establishing 
a 
successful 
communication channel on a technological level between 
the layers as well as between the members of each layer. 
The development requirements will be the core on which 
our methodology will thrive, complying with the general 
characteristics of an Agile Methodology, basing most of the 
productive work on the developing teams. 
The 
use 
of 
limited 
resources 
development 
methodologies in each of the layers will result in a trust 
worthy system, improving the execution result in each layer 
individually, and enhancing the overall result of the global 
project in general. 
These results were documented, and allowed the creation  
of a working connection between the lately known IOT 
"Internet of Things" development methodologies and RIA 
based development methodology, establishing that for each 
native system in its appropriate development context by 
combining those systems in an unified global project using 
the necessary roles and developing steps acquired from the 
previous investigation works, the reach of the overall 
projects increase substantially[5]. 
Possible example devised from such connection may be 
RESULTA, a project developed in the context of the 
ministry of industry in Spain with the purpose of improving 
the companies work effort in general developing project. 
RESULTA was a project developed in multiple entities, and 
on multiple platforms and native contexts, and successfully 
we were able to combine the multiple scenarios and create a 
unified project applying the concepts detailed above. 
At present, we are proceeding with the enrichment of the 
modules and the modules database, the creation of a 
feedback system to allow upgrades and the establishment of 
other development steps in the out coming methodology. 
We expect to achieve a working prototype that complies 
with the steps achieved in the following months, we had as 
an objective to achieve it during the month of November, 
but we encountered some structural difficulties, which will 
postpone our results. 
 
ACKNOWLEDGMENT 
The University of Alcala for facilitating its installations. 
The OTRI of the University of Alcala for allowing the 
transition of knowledge for practical use. 
 
REFERENCES 
 
[1] Bar-Magen J., Gutierrez Martinez J., De Marcos L. and 
Gutierrez de Mesa J., 2010, Colaborative and Component 
Based Software Development Methodology, Proceedings of 
the IADIS International Conference Applied Computing, 
Rumania, pp. 287-290 
[2] Griss M. L., 1997, Software Reuse Architecture, Process, and 
Organization for Business Success, Proceedings of the Eighth 
Israeli Conference on Computer Systems and Software 
Engineering, Israel,  pp. 86-98. 
[3] Murphy C., 2004, Adaptive Project Management Using 
Scrum, Methods & Tools Global knowledge source for 
software development professionals, Volume 12 - Number 4, 
pp. 10-23. 
[4] Menkovski V., Exarchakos G., Liotta A. and Cuadra-Sánche 
A., 2011, A Quality of Experience management module, 
International Journal on Advances in Intelligent Systems, 
Volume 4 Number 1 & 2, pp. 13-19. 
[5] Grambo G. and Oberhause R., 2011, Contextual Injection of 
Quality Measures into Software Engineering Processes, 
International Journal on Advances in Software, vol 4 no 1 & 
2, pp. 76-99. 
[6] Ribaud V., Saliou P., Saliou P. and Y. Laport C.,2011, 
Towards Experience Management for Very Small Entities, 
International Journal on Advances in Software, vol 4 no 1 & 
2, pp. 218-230. 
[7] Gargantini A., Riccobene E. and Scandurra P.,2010, 
Combining Formal Methods and MDE Techniques for 
Model-driven System Design and Analysis, International 
Journal on Advances in Software, vol 3 no 1 & 2, pp. 1-18. 
[8] Fross M. Wake, 2003, How to Select a QA Collaboration 
Tool, Methods & Tools Global knowledge source for software 
development professionals, Volume 11 - Number 1, pp. 26-31 
[9] Ponder M., 2004,  Component-Based methodology and 
Development Framework for Virtual and Augmented Reality 
Systems Unified, École Polytechnique Fédérale de Lausanne, 
Rumbaugh 
[10] Dabbs Halloway S., 2002, Component Development for the 
Java(TM) Platform, Addison-Wesley Longman Publishing 
Co., Inc.  Boston, MA, USA. 
[11] Barchino R. Experiences in applying mobile technologies in 
an 
e-learning 
environment. 
International 
Journal 
of 
Engineering Education. 2007;23(3):454-459. 
[12] Chia-Chi Teng. Mobile Application Development: Essential 
New Directions for IT. Information Technology: New 
Generations (ITNG), 2010 Seventh International Conference 
on 2010:471. 
 
 
 
 
12
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-188-5
INTENSIVE 2012 : The Fourth International Conference on Resource Intensive Applications and Services

 
 
  
Figure 1: Practical workflow for a prototype RIA based on optimized methodology development.  
 
Figure 2: Modular distribution of an RIA. 
13
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-188-5
INTENSIVE 2012 : The Fourth International Conference on Resource Intensive Applications and Services

