Combined Algorithm for Voronoi Diagram
Construction as it Applies to Dynamic Ride Sharing
Anton Butenko and Jorge Marx G´omez
Department of Computing Science
Carl von Ossietzky University of Oldenburg
Oldenburg, Germany
anton.butenko@uol.de, jorge.marx.gomez@uni-oldenburg.de
Abstract—Standard Voronoi diagram decomposes a plane into
cells with a common closest site. This structure is widely used in
computational geometry in application to the nearest neighbor
problem. Using Euclidean metric is the most straightforward
solution, however, in urban environment it may lead to insuf-
ficient accuracy that is crucial in such applications as dynamic
ride sharing. Deviations in determining the nearest meeting point
are especially significant under the presence of obstacles: water
reservoirs, railway tracks, highways, industrial zones as well
as hilly terrain. Here, we propose a combined approach for
city Voronoi diagram construction in general metric space. A
transportation network is modelled as weighted graph, so that
the route consists of a foot-walking part and shortest path
in graph. Presented algorithm constructs continuous Voronoi
diagram for a plane using the individual graph Voronoi cells
as generator objects. Evaluation for the specific city topography
shows that the described algorithm provides more accurate
results in comparasion with the standart Voronoi diagram.
Index Terms—Voronoi diagram; dynamic ride sharing.
I. INTRODUCTION
Ride sharing applications are aimed at connecting drivers
and passengers in an optimal way. What this optimal way
means depends a lot on the specific mobility solution phi-
losophy and its target audience. Nevertheless, most of them
face such optimization problem as the nearest neighbor search:
identifying the point from a set of points which is the closest
to a given point according to some measure. The mobility
application Instaride [3] developed for the spontaneous shared
trips is driven by an instant matching algorithm. It connects
drivers and passengers in real time based on the user’s mobile
device positioning (satellite navigation data, triangulation in
mobile network) [2]. In order to minimize the driver’s efforts
and his route detour, the finite set of preselected fixed points
is used for passengers’ pick-up and drop-off (named meeting
points, in general). Preselection of the meeting points is
determined by the environmental conditions and is based on
criteria such as parking opportunity, presence of pedestrian
zones and easily recognizable landmarks. Such an approach
leads to the problem of finding the nearest meeting point
for users (both drivers and passengers) based on their real-
time positions. The paper structure is the following. The
Introduction explains the problem’s origin. In Section II, we
describe the concept of the presented approach and introduce
the terms and notation. Sections III and IV describe two parts
of the algorithm: discrete and continuous. In Section V, the
algorithm steps are given in detail. Section VI presents the
algorithm efficiency evaluation for the specific city topography.
Section VII concludes our work.
II. VORONOI DIAGRAM IN A GENERALIZED METRIC SPACE
One of the most effective ways to solve problems related
to the nearest neighbor search is to use the Voronoi diagram.
We introduce the following notation here: Lρ is a metric space
with the corresponding function ρ : L×L → R+ that satisfies
metric axioms. Then, Or(x) = {z : ρ(x, z) < r} is the open
metric ball with radius r ∈ R+, Sr(x) = Or(x) \ Or(x)
is the metric sphere and Λ(x, y) = {z : ρ(x, z) = ρ(y, z)}
is the bisector of x and y. It splits Lρ into the half-spaces
D(x, y) = {z : ρ(x, z) < ρ(y, z)} and, lying on the other
bisector side D(y, x) = {z : ρ(y, z) = ρ(x, z)}. For a given
finite set of seeds S = {s1, ..., sk} ∈ Lρ, the Voronoi cell
related to si is expressed as
V R(si, S) =
\
i̸=j
D(si, sj)
(1)
and the Voronoi diagram of S:
V (S) =
[
i̸=j
V R(si, S) ∩ V R(sj, S).
(2)
Being the most straightforward solution, a Voronoi diagram
based on the Euclidean distance provides tolerable approxima-
tion in the urban environment if the points are located quite far
apart within the uniform transportation network. In other cases,
the results are significantly worse: for short distances, for a
sparse roads network, in areas with irregular topography, under
the presence of one way roads, or in application to suburbs
stretched along the roads forming axon-like structures. Natural
obstacles such as rivers, lakes, vegetation zones, ravines and
mountains as well as urban (railways, highway, industrial zone,
pipelines) play a particularly important role in complicating
the route of movement between two points. The use of other
metric functions may improve the accuracy; however, another
problem arises: in some cases, the bisector dimension may
be more than 1 (this is true even for the Manhattan distance
ρ(x, y) = P |x1 − y1| + |x2 − y2|) applicable to the regular
rectangular streets network.
52
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

In a number of works, the graph represents the streets
network. The discrete network Voronoi diagram is then con-
structed while the metric used is the link between nodes (e.g.,
Yomono [6]). However, such models do not allow shortcuts,
which are often used by pedestrians to shorten the routes.
Aichholzer et al. [4] consider a plane with Manhattan distance
and isothetic transportation network. There are also several
works that use the generalized concept of Voronoi region
(needle) proposed by Bae and Chwa [7].
The approach presented in this work is aimed at being
applicable for the non-orthogonal street structure with curvi-
linear street segments. At the same time, as the ride sharing is
spontaneous, we strive to avoid excessive model complexity;
only walking to/from meeting points is assumed for the pas-
senger. In addition, being flexible to the possibility of using the
available network bandwidth data, the model should also work
with the minimum information of this kind. Thus, we believe,
the task of developing an optimal method for constructing a
Voronoi diagram for a similar class of problems is to find a
balance between complexity, accuracy and flexibility in using
available data, as the latter may vary a lot in different regions.
The main idea of the approach presented below is to
construct a discrete Voronoi diagram on a graph and then
transform the obtained cells into the seeds or generator objects
for the continuous Voronoi diagram on the plane. The latter
represents the partition of the plane with a transportation
network into proximity regions for the set of the given meeting
points. The algorithm overview is presented below while
individual steps are discussed in detail in sections III-IV.
1. Geospatial data preprocessing. The necessary information
is: land use, coordinates of the roads.
2. Voronoi diagram construction on the graph representing
transportation network.
3. Cell of the constructed discrete diagram with their co-
ordinates are used as the seeds for continuous Voronoi
diagram on a plane.
As a result, continuous combined Voronoi diagram for the
meeting points is constructed. This algorithm had been tested
for Oldenburg city centre [1] and then applied for pedestrians
on the area with radius 7 km around the city centre containing
79 meeting points (Fig. 1).
III. VORONOI DIAGRAM ON THE GRAPH
We consider the area of interest as a rectangular domain
Ω ⊂ R2 containing the city transportation network, providing
fixed routes. This network is modelled as a weighted graph
G(V, E), where E = {ei} is the set of edges, representing
roads and streets and V
= {vk} are the graph vertices,
corresponding to the intersections and the deadlocks. Non-
negative edge weights w(ei) determine some proximity mea-
sure between the vertices connected by the edge ei.
Depending on data availability, it can be, e.g., edge length or
edge travel time. The latter depends on the segment’s capacity,
inclination, or traffic. Setting ρG(vi, vj) in an ordinary way
as the weights sum of the shortest path between vi and vj ,
one can consider VρG as a metric space. Without additional
Fig. 1. Oldenburg with the suburbs (OpenStreetMap [5]).
Fig. 2. Graph representing transportation network with the meeting points.
constraints, it is true for the undirected graph as ρG always
satisfies the symmetry axiom. It is not so in the directed graph
case, nevertheless inward and outward Voronoi diagrams with
corresponding asymmetric metric function can be considered
instead. In application to the present nearest neighbor search
inward diagram is a general approach that represents both
types of movement: driving by car and walking. Taking
into account that there are no one-way pedestrian roads and
omitting the height difference for simplicity, one can assume
that the undirected graph provides good representation for
walking on foot in the mild regions.
Hence, we can build a Voronoi diagram on the graph
G(V, E) with respect to the meeting points S = {s1, .., sk} ⊂
V (Fig. 2).
53
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

The Voronoi diagram brakes up the set of vertices into the
direct sum of the Voronoi cells V = V1 ⊕ ... ⊕ Vk, where
Vi = V R(si, S). Let Ei(si) be a set of edges connecting
vertices within Vi. Then E = E1 ⊕ ... ⊕ Ek + E0, where
E0 is the set of ”border” edges whose vertices belong to the
different cells.
The following steps describe a computational algorithm
for constructing a Voronoi diagram on a graph. The city
transportation network representation as a graph G(V, E) is
obtained from the OpenStreetMap (OSM) project geodata [5].
The project provides free editable geographic database of
the world. In this work we use Python package Osmnx to
download, model and project geospatial OSM data. The rest
of the code is also written in Python using such packages
as NumPy, Shapely, Matplotlib, Networkx, GeoPandas and
others.
At the first step geospatial data of this region is downloaded
and projected to Gauss-Kr¨uger projection in which all further
computations take place. Thus, current data structure appears
as a weighted graph with the certain geometrical coordinates
for nodes and edges. Second, locations of the meeting points
are added to the set of graph vertices (Fig. 2). Since graph
order for the individual town lets allows it, brute-force can be
used for the Voronoi diagram construction: ∀v ∈ V find the
distance on the graph ρG(v, si), i = 1, k using the Dijkstra
algorithm. If sj satisfies ρG(v, sj) = min
i
ρG(v, si), then
v ∈ V R(sj). This computaion can be easily and effectively
parallelized as long as there is no need for data transfer
between the threads. Set V is split up into disjoint subsets
by the processor cores number. Then nodes of each subset
are divided into the groups according to their proximity to
a certain seed. Finally, the results are combined together.
Finding terms Vk for direct sum decomposition of V allows
to determine corresponding graph edges subsets Ek belonging
to which clearly indicates the nearest seed – meeting point for
each e ∈ E \ E0.
IV. PLANAR VORONOI DIAGRAM
Constructed according to the previous section, the Voronoi
diagram on the graph does not indicate the nearest meeting
point for the surface points lying outside the graph edges. As
graph V (G, E) can be considered not only as a topological
structure but set of geometrical objects: points and lines with
the certain coordinates, each subset Em corresponds to the
lines set E′
m on R2. It should be noted that in general
two seeds may intersect (Fig. 4). Normally it happens un-
der presence of the multi-level roads interchanges, tunnels,
crossroads with the prohibition for movement in the certain
direction but, in general, may have a connection with the roads
congestion and bandwidth. Although such cases represent
a small proportion of the total number of cases, the need
to process them significantly complicates the procedure for
bisector construction (section IV-C).
Fig. 3. Voronoi diagram on the graph.
A. Planar metric function
As long as there is no exact information about travel
routes outside the transportation lines, it is natural to assume
movement along a straight line in the direction of the nearest
transportation network segment. However, this simplification
does not take into consideration the presence of natural
and man-made obstacles: buildings, fences, water reservoirs,
ravines, vegetation and industrial zones, farmland as well
as private and restricted access areas. In suburbs and rural
surroundings such objects can occupy a large area, therefore
bypassing them significantly complicates the route. On the one
hand, it is possible here to consider a geometrical problem of
building an optimal curvilinear route between a given point
and a transportation network that does not intersect impassable
regions. The length of such a route is then used as a metric
function.
On the other hand, the problem of identifying impassable
regions from generally available geospatial data can be more
difficult than it seems. Although some obstacles can confi-
dently be considered as impassible, for others it is hard to
54
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Fig. 4. Geometrically overlapping cells of Voronoi diagram on the graph.
determine their real degree of obstruction. This applies to a
lesser extent to movement by car, but is relevant enough for
pedestrians who tend to take shortcuts. For example, taking
a shorter route by moving through a vegetation zone may
depend on vegetation type, density, soil type, time of year,
weather, time of day (due to the illumination factor). Thereby,
not only spatial, but short- and long- term time variation of
site passability occurs. Even the water reservoirs can freeze
in winter and become passable. Additional socio-behavioral
aspects play a role in relation to the zones forming artificial
obstacles. For them obstruction may depend on such factors:
if they are actively used or abandoned; if there security guards
and/or CCTV; the kind of fence around the perimeter; legal
consequences of a violation. The same applies to the crossing
the railways and highways outside the permitted spots.
It should be noted that there is likely a connection between
shortcut usage and benefits of route reduction. In contrast,
a high local crime rate can drastically reduce pedestrians’
willingness to walk outside of the streets. Moreover, tendency
to follow formal prohibitions varies in different cultures and
regions [9]: while in some cases a prohibition sign is enough,
in others even concrete fence is useless. It seems that up-
to-date information regarding the passibility of shortened or
alternative routes should come via some pedestrians’ feedback
system. Satellite imagery can help with the determining of
vegetation properties and recognition of footpaths. Neverthe-
less, leaving this approach for the future stage of work, we
currently use the Euclidean distance as a metric function.
B. Search for the equidistant points
Considering {E′
1, ..., E′
k} as seeds in (2) and Euclidean
metric ρ2 as ρ, Voronoi diagram V (E′) can be constructed.
Obviously, ρ2(M, E′
m) is the distance between M ∈ R2 and
the nearest to M point of E′
m.
The first step is to find the metric sphere Sr(E′
m) for
E′
m with the given radius r. The metric sphere analytically
obtained for the straight line segment consists of two cou-
ples of straight line segments and circular arcs. As far as
even curvilinear roads are represented in E′
m as polygonal
chains, Sr(E′
m) is expressed as the individual spheres union’s
perimeter. By the definition, for two seeds and any point
M ∈ Ω : M ∈ Sr(E′
m) ∩ Sr(E′
n) ⇒ M ∈ Λ(E′
m, E′
n).
Therefore, finding sufficient number of such equidistant points
as equal radius spheres intersection, allows to determine with
some precision the bisector within the domain through further
interpolation. Let B′
r denote the set Sr(E′
m)∩Sr(E′
n). Giving
to the radius r variation with some step: rk+1 = rk + ∆r
(k = 0, 1, ...) we compute all coresponding metric spheres
intersections B′
r. Here rk ∈ [rmin, rmax], where rmin =
1
2ρ2(E′
m, E′
n) and rmax is the minimum radius rk that satisfies
the condition B′
rk ̸⊂ Ω. Choice for the ∆r depends on two
aspects. First, the set of obtained equidistant points should be
adequate for the proper bisector line representation. Second,
the excessive precision should be avoided to reduce computa-
tional complexity at this algorithm stage. For this reason, the
variable radius increment step is chosen: ∆r(k) = ∆rk:
∆rk =



f · ∆rk−1
if E′
m ∪ E′
n ⊂
[
l=m,n
Or(E′
l),
∆r0
otherwise
(3)
The radius increment step remains constant unless both
seeds are located within the open balls union, hereafter it
grows geometrically. Fig. 6 (top) illustrates how it affects com-
puted points distribution. In the computations below ∆r0 = 6
meters and f = 1.25. As a result, for each pair E′
m, E′
n we
obtain a set of equidistant points as combination:
B′(E′
m, E′
n) =
[
∀rk
B′
rk(E′
m, E′
n)
(4)
C. Bisector construction
A goal of the current step is to construct a continuous bisec-
tor from the set of equidistant points B′
mn = B′(E′
m, E′
n) =
{Qi}NB
i=0, Qi ∈ R2. Bisector Λ = Λmn constructed from
B′ = B′
mn should satisfy the following conditions:
1. Λ
is
a
finite
set
of
simple
curves
without
self-
intersections.
2. Λ contains maximum number of points from B′.
3. Each curve in Λ intersects Ω in two points making the
domain partition possible.
4. Λ does not intersect with E′
m and E′
n.
The problem of such line set construction is to separate
points into groups (if necessary) and arrange them in each
group in a correct order for interpolation.
55
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Fig. 5. Equidistant points as equal radius metric spheres intersection.
Assuming E′
m
T E′
n = Ø, Λ = Λmn will consist of one
line L that can be obtained with the following procedure. Let
denote Lω as a tuple of points.
1. Select arbitrary the initial point Q0 ∈ B′ : Q0 ∈ Ω.
Assign Lω = (Q0); B′ = B′ \ {Q0}.
2. Find Q1 ∈ B′ : Q1 ∈ Ω that is the nearest to Q0 point
in B′.
Set Lω = (Q0, Q1), B′ = B′ \ {Q1}, n = 2.
3. For Lw = (Qj0, ..., Qjn−1) find Qα
n, Qβ
n ∈ B′ such that:
a) ρ2(Qα
n, Qj0) = min
Q∈B′ ρ2(Q, Qj0).
If ρ2(Qα
n, Qj0) < ρ2(Qα
n, Qjn−1) then place Qα
n as the
first element in Lω and set B′ = B′ \ {Qα
n}.
b) ρ2(Qβ
n, Qjn−1) = min
Q∈B′ ρ2(Q, Qjn−1).
If ρ2(Qβ
n, Qjn−1) < ρ2(Qβ
n, Qj0) then place Qβ
n as the
last element in Lω and set B′ = B′ \ {Qβ
n}.
4. Assign n = n + 1; repeat step [3.] until B′ is not empty
5. Compute L as the linear interpolation of Lω.
In other words, the process of points arrangement is the
sequential increment of the polygonal chain from the two
ends. Testing shows that this approach, which is based on
simple proximity, provides sufficient accuracy in the vast
majority of cases. However, for some closely located seeds
with irregular outlines containing combinations of convex and
concave elongated segments it may lead to: skipping some
of B′ points. Also obtained with interpolation line L can: a)
contain loops; b) intersect with the seeds. Thus, this resulting
L requires examination and, if necessary, must be rebuilt. In
exeptional cases in order to enhance the algorithm robustness,
a simplified bisector can be constructed. A possible option in
such a case is an analytically obtained straight line – bisector
Fig. 6. Computed equidistant points.
of the seeds centroids.
D. Overlapping seeds processing
In this section case E′
m
T E′
n
̸=
Ø will be covered
(Fig. 7, 8). The above described procedure for the bisector
construction does not work correctly under this condition.
In the test performed for Oldenburg this was observed 9
times among 3081 pairs. The approach is the following: the
procedure [1] – [5] from the previous section is performed
recursively with the additional constraints for Λ = {Lj}p
j=1:
Lj
\
j̸=i
Li = Ø and Lj
\
E′
l = Ø.
(5)
Here choice l = m or l = n is voluntary. The process
of bisector construction for the intersected seeds is presented
below. Numbers in square brackets refer to the algorithm steps
for the individual line from section IV-C.
I. Assign a value to l; Set j = 0.
II. Set B′ = B′
j.
1. Perform step [1.].
2. Find Q1 as in [2.]. Set B′ = B′ \ {Q1}.
If Q0Q1 intersects E′
l then repeat the current step.
Otherwise set Lω = (Q0, Q1).
3. Let ξ ∈ {α, β}. If Qj0Qξ
n does not intersect E′
l then
perform for Qξ
n steps [3.a] or [3.b].
4. Perform step [4.].
5. Perform step [5.].
III. Add L into Λ.
Set B′
j+1 = B′
j \ Lω, j = j + 1.
56
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Fig. 7. Equidistant points for the overlapping seeds: single intersection.
Fig. 8. Equidistant points for the overlapping seeds: multiple intersections.
IV. Repeat steps II, III until card(B′
j
T Ω) < K∗.
Using K∗ = 0 is possible although it reduces algorithm
robustness. In certain cases, a few equidistant points may be
left unused due to the algorithm simplifications. As a result of
steps I-III, we obtain lines set Λ.
It is worth to mention that computations on the step of
bisesector construction as well as on the step of searching
for the equidistant points allows effective parallelization: one
thread is allocated for each seeds pair.
E. Voronoi cells construction
For
the
certain
seed
E′
m
each
computed
bisector
Λmn splits the domain in two parts: Ω
=
Ω
+
n ⊕ Ω
−
n:
E′
m ⊂ Ω
+
n, E′
m ̸⊂ Ω
−
n. If the bisector consists of a single line
then it cuts the domain in two polygons. Otherwise multiple
bisectors divide the domain into one simply connected region
and one multiply connected region consisted of two or more
subregions (Fig. 9). According to the Voronoi cell definition:
V R(E′
m, E′) =
\
i=1,k
Ω
+
i .
(6)
Making a reverse substitution E′
m → Em → sm we get
V R(sm, S) as the cells of the combined continuous Voronoi
diagram based on metric functions ρ2 and ρG. In practice,
due to the limited accuracy for bisector computation Ω =
S V R(sm, S) S R. While cells overlay is not possible, the
voids R = {Rj} between cells may occur. Simple procedure
is used here to dispose of this areas of uncertainty: each void
is merged with the cell that has the largest common border
with it.
Fig. 9. Domain partition. Overlapping seeds case.
57
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

V. EVALUATION
As mentioned above, test computations were performed for
the area with radius 7 km around Oldenburg city centre. The
selected region consists of urban, suburban and rural areas. It
also includes a variety of natural and man-made obstacles:
highways, railways, water reservoirs, industrial and vegetation
zones. For a given region with 79 selected meeting points,
we construct analytically the standard Voronoi diagram based
on the Euclidean distance (diagram I) and the combined
one in a way described above (diagram II). After the cells
construction through half-spaces intersection, 151 void region
remained within the domain. Their total area ≈ 0.1 km2 that
is 0.05% of domain area. The area of the two largest voids
is approx. 99% of total void area while 131 are smaller than
1 m2. After merging the voids with the computed cells the
final diagram is obtained (Fig. 11).
For comparison of Voronoi diagrams of types I and II, the
following value is used as measure of difference:
∆S =
1
S(Ω)
X
i
S(C1
i \ C2
i ) =
1
S(Ω)
X
i
S(C2
i \ C1
i ), (7)
where C1
i and C2
i are the cells for the same seed in dia-
grams I and II correspondingly. For the considered example
∆S ≈ 18%. One can expect the bigger difference for higher
number of meeting points and, consequently, smaller cells.
Also, for 3501 random locations uniformly distributed within
the domain, we determine the nearest meeting point in three
ways: a) from diagram I; b) from diagram II; c) by computing
the routes to all the meeting points with the Openrouteservice
engine [10] and detecting the meeting point corresponding to
the minimum route length. The results are the following. The
nearest meeting points obtained from diagrams I and II are
not equal in 18% what is consistent with ∆S value. Meeting
points are different from the obtained with Openrouteservice
for 17% (diagram I) and 10% (diagram II).
VI. CONCLUSION
There are several steps to be performed next in the context
of this work. First, the potential of using additional bandwidth
data must be analyzed. Second, impassable region processing
must be implemented in planar Voronoi diagram construc-
tion. Third, the presented approach must be tested for the
different regions and other methods of travelling, e.g., cars
and bicycles. Nevertheless, at this stage, one can conclude
that, despite the number of simplifications, the described
algorithm provides more accurate results in comparison with a
standard Voronoi diagram. At the same time, the processing of
complex topography features requires further study since they
are probably the main reason for the remaining imprecision.
These include multi-level road crossings, tunnels, elongated
geometric objects and natural obstacles.
Fig. 10. Classic Voronoi diagram.
Fig. 11. Combined Voronoi diagram.
REFERENCES
[1] A. Butenko and J. Marx G´omez, “Combined algorithm for Voronoi
diagram construction in application to dynamic ride sharing,“ MOBIL-
ITY 2022: The Twelfth International Conference on Mobile Services,
Resources, and Users, pp. 5-8, Porto, Portugal, 2022.
[2] M. Eilers et al., “An instant matching algorithm in the context of ride-
hailing applications, using isochrones and social scoring”, In:, (Hrsg.),
Informatic 2021.
[3] Instaride, https://instaride.webflow.io, retrieved: November 2022.
[4] O. Aichholzer, F. Aurenhammer, and B. Palop, “Quickest Paths,
Straight Skeletons, and the City Voronoi Diagram”, Discrete and
Computational Geometry, 31. pp. 17-35, 2004,doi:10.1007/s00454-
003-2947-0. Gesellschaft f¨ur Informatik, Bonn, pp. 103-114, 2021,
doi:10.18420/informatik2021-007.
[5] https://www.openstreetmap.org, retrieved: November 2022.
[6] Yomono H. Yomono, “The Voronoi diagram on a network”, Technical
report, Nippon Systems Co, Tokyo, 1991.
58
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

[7] S. W. Bae and K.-Y. Chwa, “Voronoi Diagrams with a Transportation
Network on the Euclidean Plane,” Int. J. Comput. Geometry and Appl.,
vol. 16, pp. 101-112, 2004, doi:10.1007/978-3-540-30551-4 11.
[8] https://github.com/gboeing/osmnx, retrieved: November 2022.
[9] G. Bierbrauer, ”Reactions to violation of normative standards: a cross-
cultural analysis of shame and guilt”, International Journal of Psychol-
ogy, vol. 27, pp. 181-193, 1992, doi: 10.1080/00207599208246874.
[10] https://openrouteservice.org, retrieved: November 2022.
59
International Journal on Advances in Telecommunications, vol 15 no 3 & 4, year 2022, http://www.iariajournals.org/telecommunications/
2022, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

