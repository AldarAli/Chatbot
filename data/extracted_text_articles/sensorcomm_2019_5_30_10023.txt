An OPC UA PubSub MQTT Conﬁguration Tool
Zepeng Liu
LTCI, T´el´ecom Paris
Institut Polytechnique de Paris, France
Email: zepeng.liu@telecom-paris.fr
Patrick Bellot
LTCI, T´el´ecom Paris
Institut Polytechnique de Paris, France
Email: patrick.bellot@imt.fr
Abstract—With the ongoing progression of incorporating massive
emerging technologies into industrial systems, Information and
Communication Technology (ICT) based systems face increasing
difﬁculties of vertical and horizontal integration. One main objec-
tive of industrial system integration is to use ﬂexible and scalable
communication technology to fulﬁll requirements on the different
levels of an automation pyramid. With the Client/Server model
being the de facto standard in industrial automation at upper
levels, Open Platform Communication Uniﬁed Architecture (OPC
UA) is extended by adding a new communication architecture,
called Publish Subscribe, to provide asynchronous information
exchange capabilities. An OPC UA PubSub and Message Queuing
Telemetry Transport (MQTT) based conﬁguration tool is intro-
duced in this paper. It can be easily added to any C/C++ OPC
UA Server/Client implementation.
Keywords–IoT; OPC UA; MQTT.
I.
INTRODUCTION
Major advances in ICT have contributed to signiﬁcant
changes in the manufacturing domain, from the ofﬁce to the
ﬁeld level. The massive ICT integrated industrial systems were
deployed not only following the success of the Internet, which
has broadly spread the idea of ubiquitous connectivity, but also
because of increasing global competition [1].
In retrospective, the progress of the network of “things” in
the manufacturing ﬁeld has encountered different stages. From
the beginning of the 1970s, Computer Integrated Manufactur-
ing (CIM) was ﬁrst introduced into manufacturing systems and
designed for ﬁeld-level engineering process management. This
was followed by Product Data Management (PDM), networks
within engineering departments that were responsible for prod-
uct data and connection. Since the 1990s, the emerged Product
Lifecycle Management (PLM) concept adopted services and
interfaces provided by PDM to manage all product-related
information, from product design, production, maintenance
to retirement, essentially, the entire product life cycle. The
Digital Factory concept was proposed at the turn of the
century, and aims to simulate a real factory by integrating data,
models, and the engineering process [2]. Enterprise Resource
Planning (ERP) was derived from its Manufacturing Resource
Planning (MRP) predecessor rather than tailored to particular
market sectors. ERP aims at being a framework for integration
of all business-related information including material and pro-
duction management, human resource management, ﬁnancial
accounting, etc. Below the ERP, the Manufacturing Execution
System (MES) accomplishes the short-term planning task and
acts the role of bridge between strategic level and control level
[3].
Figure 1. ISA 95 Automation Pyramid and development
Though it was difﬁcult to convey the idea of ubiquitous
connectivity during the ﬂedgling IT and communication tech-
nologies of the 1980s, even data exchange on a broad scale
within the factory was almost impossible to implement; CIM,
PDM, and PLM were consequently unheard of at that time.
Fortunately, the automation pyramid was established and is
still evolving up to present day, as depicted in Figure 1.
Eventually, the idea of product data as a basis for meaningful
communication became a prerequisite for Industrial Internet of
Things (IIoT) [4].
While PLM and the Digital Factory established a data
backbone of IIoT, hardware for manufacturing, the evolution
of mechatronics, and Cyber-Physical System (CPS) consider
communication between subsystems and networked nodes as
a necessary part of future mass customization manufacturing
[5]. The systems described by multi-disciplined theories need
to be integrated for manufacturing, which means various pieces
of the system need to be implemented: networks, interfaces,
databases, and various speciﬁc functions for manufacturing [4].
97
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

Overall, the trend of industrial automation is continuously
evolving from local functionality to complex and systematic
architecture. However, at least one area of industrial automa-
tion that deserves one’s attention is how to use appropriate
technologies to exchange and share information among various
industrial components. For example, the Germany Industrie 4.0
[6] focuses on improving the vertical and horizontal integration
of manufacturing system components. Solutions should be
characterized by necessary technical, syntactic and seman-
tic interoperability, and provide interaction-based information
exchange and data communication capabilities. Among the
solutions, OPC UA is one of the most up-to-date standards
satisfying these requirements.
The main contribution of this paper is to present: 1) our
implementation of the new extension of OPC UA, the OPC UA
speciﬁcation part 14 [7], and 2) an OPC UA PubSub MQTT
conﬁguration tool. The implementation includes necessary
PubSub related entities, communication parameters and con-
ﬁguration steps. In order to facilitate the conﬁguration of OPC
UA Publisher and Subscriber, and reduce local conﬁguration
work, the OPC UA PubSub MQTT conﬁguration tool is able
to provide ﬂexible conﬁgurations to OPC UA Publisher and
Subscriber. Both the OPC UA PubSub component and the
conﬁguration tool are programmed in C and C++, so that the
implementation could be easily integrated into other C/C++
projects.
This paper is organized as follows. Section II provides
an overview of OPC UA and its latest speciﬁcations; part 14
OPC UA PubSub and MQTT will be introduced. Section III
describes a conﬁguration tool for parameters of MQTT and
OPC UA PubSub. Finally, in Section IV, we conclude the paper
and discuss future studies.
II.
OPC UA AND MQTT
A. OPC UA and OPC UA PubSub
Classic Object Linking & Embedding for process control
(OPC) is a series of speciﬁcations developed by an industrial
automation task force in 1996 for providing real-time commu-
nication capabilities to the Component Object Model(COM)
or the Distributed Component Object Model (DCOM) based
industrial equipment. Its successor, OPC UA, was released in
2006 and integrated classic standards (e.g., OPC Data Access,
OPC Historical Data Access, etc.) into a single standard.
Nowadays, OPC UA is a widely recognized standard in indus-
trial automation and is known for its interoperability, platform
independence, securing communication, and scalability [8].
The latest speciﬁcation of OPC UA Part 14 PubSub in-
troduces PubSub logical components for Publisher and Sub-
scriber, deﬁnes necessary communication parameters, and pro-
vides conﬁguration procedures. In this section, we will present
the OPC UA’s interoperability, its communication capabilities,
and the new added speciﬁcation, PubSub.
1) Interoperability: Manufacturing companies face increas-
ing global competition and market pressures which inversely
drive them to adopt emerging and competitive technologies.
However, manufacturing plants are often forced to invest a
great deal of time on the installation, setup, and maintenance
of such systems along with the difﬁculties of transferring
existing automation systems to new ones and the adaptability
to different suppliers’ products. Therefore, more ﬂexibility and
Figure 2. Automation Pyramid with OPC UA
vertical and horizontal integration
adaptability within the automation system are required for
future industrial automation.
Industrial automation systems based on Service-Oriented
Architecture (SOA) emerged as a promising solution thanks to
its advantages, such as integration capabilities and ﬂexibility.
Services provided by such components, machines, and systems
are ﬂexible and not tied to production tasks, but rather are a
part of the service set, and invokable for other equipment [9].
Numerous technologies and speciﬁcations are created by
following the SOA principle. For example, OPC UA, Devices
Proﬁle for Web Services (DPWS), EXI, CoAP, RESTful,
Distributed Service Bus, Complex Event Processing (CEP),
etc. European projects Service Infrastructure for Real-time Em-
bedded Networked Applications (SIRENA) [10] and Service-
Oriented Cross-layer infRAstructure for Distributed smart Em-
bedded devices (SOCRADES) [11] have implemented SOA-
based approaches by using DPWS as a framework and base
technology. Moreover, the Industrie 4.0 initiative regards inter-
operability as an essential part of future industrial automation,
which implies industrial equipment within a plant should
be able to understand, share, and process information from
the equipment of different manufacturers. The Industrie 4.0
initiative has also resulted in the Reference Architecture Model
Industrie 4.0 (RAMI4.0), which is a three-dimensional archi-
tecture showing structurally Industrie 4.0 related approaches
and participants. The RAMI4.0 is based on SOA and ensures
the vertical and horizontal integration of industrial system
components [12].
The OPC Foundation’s vision is to provide a new standard
to bridge the differences among industrial ICT. OPC UA fulﬁlls
SOA requirements of industrial automation and has already
been successfully used in several projects, automation and
control systems, such as Beck-hoff TwinCAT [13], Siemens
SIMATIC [14], B&R Automation Studio [15], etc.
Communication interfaces provided by OPC UA make
Industrie 4.0 compliant communications between the control
98
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

Figure 3. OPC Uniﬁed Architecture
level and MES, as well as MES and ERP possible [16] [17],
as seen in Figure2. The OPC Foundation speciﬁed an object-
oriented information model which can be used as a baseline
to match the application’s needs. The base information model
is speciﬁed in OPC UA speciﬁcation Part 5 (the Information
Model) [18] by using instances and types deﬁned in OPC UA
speciﬁcation Part 3 (the Address Space Model) [19]. OPC
UA meta model uses instances and types provided by the
base information model to describe other information models
(e.g., Data Access, Historical Data Access, Alert and Con-
ditions, speciﬁc industrial domain information models, etc.)
and to build the OPC UA server address space. Together with
OPC UA infrastructures, Service Sets, Transport, Discovery,
Security and Robustness, OPC UA enables interoperability at
the semantic level. The multi-layered architecture is shown in
Figure 3.
Along with information model related speciﬁcations, OPC
Foundation works with other organizations for providing the
dedicated industrial-domain speciﬁcations, such as the OPC
Uniﬁed Architecture for AutoID, the OPC Uniﬁed Architecture
for MTConnect , the OPC Uniﬁed Architecture / PLCopen
Information Model, etc.
For legacy COM/DCOM based OPC systems, OPC UA
speciﬁcation protects legacy OPC standards by using an OPC
UA Wrapper software or OPC UA Proxy to enable the com-
munication between COM/DCOM based OPC Client/Server
and OPC UA based server/client [20].
2) Communication capability: Following the initial tran-
sition of industrial automation communication from dedi-
cated automation networks (ﬁeldbus systems) to Ethernet-
based networks [21], and following industrial communication
technologies with requirements, such as real-time, low-latency,
etc., numerous standards and solutions have been proposed
by researchers in recent decades. Industrie 4.0 poses new
requirements for future manufacturing; smart factories use
communication technologies to improve connectivity quality
and efﬁciency at lower costs. These improvements can be guar-
anteed by two Industrie 4.0 objectives: cross-layer structural
connectivity and semantic interoperability of components and
systems along with open vendor-independent architecture [22].
As a result, communication takes places at every layer of the
automation pyramid. It can be expected that the Internet of
Things (IoT), Cyper-Physical System (CPS), Time Sensitive
Network (TSN), etc., together with ICT technologies will
create new opportunities for making information exchanges
more efﬁcient and comprehensive [23].
There are various industrial systems (e.g., ERP, MES,
Supervisory Control And Data Acquisition [SCADA], Dis-
tributed Control System, PLCs, etc., as seen in Figure 2) that
exist in industrial automation; the communication complexity
among them is explicit [24]. The research in [25] presents the
requirements of the Industrie 4.0 vertical and horizontal com-
munication aspects and the author indicates communications
from factory level to ﬁeld level could be categorized in the
following way:
•
Enterprise level and Control level. Between the enter-
prise level and control level, cyclic communication
with various latencies would be employed to meet the
requirements of enterprise applications. The enterprise
applications (e.g. the software used for tracking from
materials to the ﬁnal products) are usually running on
PCs and providing the best-effort trafﬁc with reliable
transmission.
•
Human Machine Interface (HMI) and Control level.
HMI applications running on a PC or mobile device
communicate with a control level device within la-
tency 100ms, and provide the best effort trafﬁc with
a reliable transmission.
•
Control-to-Control (C2C). C2C communication be-
tween high level embedded devices provides latency
less than 1ms and prioritized trafﬁc with an unreliable
transmission.
•
Control and Field level. The latency of communication
between control level and ﬁeld level devices is smaller
than 1µs. The communication provides scheduled traf-
ﬁc with unreliable transmission.
According to different requirements and resources, indus-
trial solution providers choose the Client/Server mode or the
PubSub mode to implement communication between industrial
devices or systems.
1)
Client/Server mode
Physical industrial devices could be an OPC UA
Client or an OPC UA Server or both, depending on
the requirements. For example, if a ﬁeld level device
is used as an OPC UA Client, timely updates could
be “pushed” to the OPC UA server. If a sensor is
used as an OPC UA Server, physical world values
can be accessed by the OPC UA Client through the
server’s address space. If the sensor is used as both
client and server, both mechanisms mentioned above
are available. However, with the connection-oriented
communication, the Client/Server mode requires a
great deal of resource allocation when devices are
used as an OPC UA Server. This could potentially
cause problems, especially for embedded devices.
2)
PubSub mode
Different from the Client/Server modes connection-
oriented communication and a one-to-many sce-
nario, PubSub enables a many-to-many communi-
cation paradigm to address new, ﬂexible, and scal-
able industrial application scenarios, especially for
resource-constrained embedded devices.
The PubSub speciﬁcation describes broker-based and
brokerless-based communication between the sender
(Publisher) and the receiver (Subscriber).
99
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

Figure 4. MQTT Publish/subscribe process
In broker-based mode, the Publisher sends a Net-
workMessage to the broker. Then, the broker dis-
patches a NetworkMessage to subscribers according
to the topic subscribed. NetworkMessages are created
by using a PublishedDataSet deﬁned DataSetMes-
sages and topics. The broker-based mode decouples
the communication between the entities in space,
time, and synchronization.
In brokerless mode, the Publisher and Subscriber
communication depends on the infrastructure pro-
vided by the network with less latency. Transport
protocols, such as Advanced Message Queuing Pro-
tocol (AMQP), Message Queue Telemetry Transport
(MQTT), OPC UA UDP, and OPC UA Ethernet can
be used for message transmission.
B. MQTT (Message Queue Telemetry Transport)
MQTT is a topic-based Publish/Subscribe protocol. It is
characterized as a simple, lightweight messaging protocol
and aims at connecting resource constrained devices and
low-bandwidth, high-latency or unreliable networks by using
Message Oriented Middleware [26]. In Figure 4, the MQTT
Subscriber sends a subscribe(topic) to inform the broker
(Message Oriented Middleware) the topic which interests it,
the MQTT Publisher sends a Pub(topic,data) message to the
broker, if there is a match between the MQTT Publishers topic
and the MQTT Subscribers topic, the broker then transfers
the Pub(topic, data) message to the subscriber. The MQTT
Subscriptions and publications can only be made on a speciﬁed
set of topics. That means, the MQTT Publisher/Subscriber can
only use the topics which are ﬁxed during the design phase of
an application.
III.
OPC UA PUBSUB MQTT CONFIGURATION TOOL
In order to facilitate the distribution of data and control
commands among various industrial components, many OPC
UA based projects have been taking place during recent
years. The research presented in [27] uses OPC UA and
MQTT for SCARA robot’s control command transmissions
and monitoring data collections. The control commands are
sent by an OPC UA Server running on computer A to an OPC
UA Client integrated gateway, then be relayed to a SCARA
robot. The monitoring data collected from the SCARA robot
will be sent by the gateway’s MQTT Publisher to a broker
running on computer B for further distribution. The MQTT
messages’ topic is ﬁxed in the implementation. Another re-
search [28] presents a solution for low-level integration of
Figure 5. OPC UA Publisher&Subscriber and the conﬁguration tool
CPSs. The proposal is described as “a Plug&Play solution
that allows plugging a self-describing device producing self-
described data to a larger system”. The solution utilizes OPC
UA Server/Client mode and Semantic Web technologies to
achieve integration at various levels. The devices described
in the research are OPC UA Server based sensors, and the
related conﬁguration is ﬁxed during the development phase.
Though the sensor conﬁguration is repeatable during the design
and development phase, the introduction of our OPC UA
PubSub and conﬁguration tool would provide more ﬂexibility
to device manufacturers and users to set up the OPC UA
PubSub enabled devices and systems according to the speciﬁc
application scenario.
A. OPC UA PubSub Conﬁguration Procedure
In our implementation, the OPC UA Server is extended
with PubSub related parameters and conﬁguration procedures,
thus the OPC UA Server is used as the Publisher. We use
the subscriber of a MQTT implementation, Mosquitto [29], as
our Subscriber. Correspondingly, the Subscriber is extended
with PubSub related parameters and conﬁguration procedures,
too. The Publisher, the Subscriber, and the conﬁguration tool
are shown in Figure 5. The conﬁguration tool is based on
the OPC UA Client to which a pair of sockets is added
for conﬁguration transmission. Before the conﬁguration tool
launching, the OPC UA Publisher, the OPC UA Subscriber,
and the Mosquitto broker are launched. After the connec-
tions between the conﬁguration tool and OPC UA Publisher
and Subscriber are successfully established, the connections
between the Mosquitto broker and OPC UA Publisher and
Subscriber would be established. Then, the operator launches
the conﬁguration tool, edits the conﬁguration in the tool’s GUI
(see Figure 6) and sends it to the OPC UA Publisher and
OPC UA Subscriber. The OPC UA Subscriber will subscribe
with a speciﬁed topic and the OPC UA Publisher will start
collecting data from the nodes, which are speciﬁed by the
conﬁguration, and creates DataSetMessages. DataSetMessages
are packed into NetworkMessage for publishing.
After the security channel and session are established
between the conﬁguration tool and the OPC UA Publisher, the
operator can browse nodes of a View by using a View service
and Query Service provided by the OPC UA. The View is a
subset of the AddressSpace, which includes the data source
nodes. These data source nodes will be speciﬁed by the user
in the conﬁguration ﬁle for ”pushing” data to other local or
remote components of the industrial system. Available data
100
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

Figure 6. OPC UA PubSub MQTT Conﬁguration Tool Graphic User
Interface
sources (nodes listed in the View) are displayed in the widget
“Variables” of the GUI. The conﬁguration tool can retrieve
related nodes information (e.g., NodeID, Attributes, etc.) and
display them in the widget named “Variables Information”
of the GUI. Conﬁguration parameters conﬁgured by the user
can be saved locally in preﬁxed text format, or previewed in
the “Information” widget of the GUI before being sent to the
Publisher and Subscriber.
The work thread pubsub server conﬁg of the OPC UA
Publisher uses the acquired parameters to initiate and create
entities of the OPC UA Publisher, such as DataSet Col-
lectors, DataSet Writers, and WriterGroups. Another work
thread pubsub mosquitto publisher of the OPC UA Publisher
is responsible for the output collection of ﬁeld devices, creation
of DataSetMessages and NetworkMessages, and publishing of
MQTT. Correspondingly, the Subscriber is able to subscribe
topics conﬁgured by the tool, receiving a NetworkMessage
and decoding a DataSet received for further usage.
B. OPC UA PubSub Components and Parameters
The OPC UA Server and Client can be extended ei-
ther as an OPC UA Publisher or Subscriber depending on
the scenario. Existing PubSub entities in our implementation
that require conﬁguration include: the DataSet Collector, the
DataSet Writer and Writer Group at the Publisher’s end, and
message topic at the OPC UA Subscriber’s end. Transport
protocol mappings and message mappings are grouped into
different data types and/or classes. Parameter values are se-
rialized and sent in preﬁxed text format to the Publisher
and the Subscriber. Conﬁguration parameter data types, such
as DataSetMetaDataType, PublishedDataSetDataType are used
for the OPC UA Publisher and the OPC UA Subscriber.
DataSetWriterDataType and WriterGroupDataType are used
in the OPC UA Publisher side. DataSetReaderDataType and
ReaderGroupDataType are used in the OPC UA Subscriber.
The descriptions of the functionalities of each parameter are
given below:
•
DataSetMetaDataType. It describes the content and
semantics of a DataSet. The data structure DataSet-
MetaDataType deﬁnes the ﬁeld data type and data
Figure 7. Conﬁgured OPC UA Publisher and OPC UA Subscriber
structure of a DataSet (e.g., ﬁeld name, data type, unit,
etc.). The parameter is edited in the widget “Item”
tab of the conﬁguration tool’s GUI. The parameter
is received by both the Publisher and the Subscriber
who are interested in a certain DataSet. The Publisher
uses it to orderly ﬁll collected ﬁled values in the
DataSetMessage. The Subscriber uses DataSet ﬁeld
types and data structure descriptions for decoding the
received DataSet.
•
PublishedDataSetDataType. It is used to conﬁgure
a DataSet collector and ﬁlter of the Publisher. The
parameter is conﬁgured in widget “Collector Settings”
tab of the conﬁguration tool GUI. The DataSet col-
lection uses NodeId and AttributeId of a Node in
AddressSpace to continually collect values produced
by the Node, and ﬁlls the individual ﬁeld of the
DataSet.
•
DataSetWriterDataType. It provides necessary infor-
mation to DataSetWriter of the Publisher for the
creation of the DataSetMessage from the DataSet.
The parameter is conﬁgured in widget “Collector
Settings” tab of the conﬁguration tool GUI. A speci-
ﬁed number of DataSetWriters would be created by
using this parameter. A DataSetMessage is created
from the DataSet speciﬁed by the PublishedDataSet.
The DataSet ﬁeld of a DataSetMessage may exist
in different forms (Variant, DataValue, or RawData)
according to the DataSetMessageContentMask of the
DataSetWriter.
•
WriterGroupDataType. This parameter conﬁgures the
NetworkMessage creation process. The NetworkMes-
sage is the container of DataSetMessages. It is con-
ﬁgured in widget “WriterGroup Settings” tab of the
conﬁguration tool GUI. A speciﬁed number of Writer-
Groups would be created by using this parameter. The
parameter indicates also the MQTT related parame-
ters, such as the NetworkMessage topic of a certain
WriterGroup and the Quality of Service (QoS) of the
connected broker.
IV.
OPC UA PUBSUB COMMUNICATION EXPERIMENT
Figure 7 shows a validation experiment of data distribution
between our conﬁgured OPC UA Publisher and OPC UA
Subscribers. The OPC UA Publisher is conﬁgured by the
conﬁguration tool for publishing real-time mouse coordinates.
The coordinates data are produced by dynamic libraries loaded
101
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

after the OPC UA Publisher is launched. Coordinates x and y
are described in an XML ﬁle and mapped into the address
space as Variables. Their NodeIds are 66663 and 66662,
respectively. The coordinates are published in three topics:
“Topic MOUSE X, “Topic MOUSE Y, and “Topic MOUSE
XY. The OPC UA Subscribers A and B show that they received
topics from the conﬁguration tool and are waiting for the
operators topic choice for each OPC UA Subscriber. In our
experiment, we let the OPC UA Subscriber A subscribe with
topic MOUSE X and OPC UA Subscriber B subscribe with
Topic MOUSE Y. Then, the OPC UA Subscribers send topic-
subscriptions to the broker and start receiving MQTT messages
that interest them.
V.
CONCLUSION AND FUTURE WORK
Firstly, this paper provided a brief history of ICT applied in
the manufacturing ﬁeld, from CIM to present-day Industrie 4.0.
It also introduced OPC UA and related application scenarios.
Then, we introduced its new speciﬁcations, the OPC UA Part
14 PubSub, and highlighted two OPC UA’s speciﬁc features,
namely, the interoperability and communication capabilities.
This was followed by a description of a conﬁguration tool
that we propose and its implementation is undergoing. The
conﬁguration tool can be easily added to any C/C++ OPC UA
implementation. We tested it with our own implementation of
an OPC UA Publisher and Subscriber. But our work is not
integrated into other OPC UA implementations due to access
limit to their nodes and attributes. We presented some neces-
sary conﬁguration parameters for applying OPC UA PubSub
communication following Part 14 of the speciﬁcations. Future
research and implementation are planned on the performance
test of OPC UA PubSub, supporting of asynchronous message
queues, and cybersecurity through Network Message encryp-
tion and decryption. When compared with manually editing
the conﬁguration for each OPC UA Server/Client and loading
it locally, the conﬁguration tool can provide ﬂexible and
modiﬁable conﬁgurations to an OPC UA Publisher/Subscriber.
ACKNOWLEDGMENT
This work is part of the project WIZARD, a FEDER-FSE,
Operational Program of CORSE project.
REFERENCES
[1]
J.-Q. Li et al., “Industrial internet: A survey on the enabling technolo-
gies, applications, and challenges,” IEEE Communications Surveys &
Tutorials, vol. 19, no. 3, 2017, pp. 1504–1526.
[2]
S. Terzi et al., “Product lifecycle management-from its history to its new
role,” International Journal of Product Lifecycle Management, vol. 4,
no. 4, 2010, pp. 360–389.
[3]
T. Sauter, S. Soucek, W. Kastner, and D. Dietrich, “The evolution of fac-
tory and building automation,” IEEE Industrial Electronics Magazine,
vol. 5, no. 3, 2011, pp. 35–48.
[4]
S. Jeschke, C. Brecher, T. Meisen, D. ¨Ozdemir, and T. Eschert, “Indus-
trial internet of things and cyber manufacturing systems,” in Industrial
Internet of Things.
Springer, 2017, pp. 3–19.
[5]
H. Xu, W. Yu, D. Grifﬁth, and N. Golmie, “A survey on industrial
internet of things: A cyber-physical systems perspective,” IEEE Access,
vol. 6, 2018, pp. 78 238–78 259.
[6]
“Industrie
4.0,”
2019,
URL:
https://www.plattform-i40.de/PI40/
Navigation/EN/Industrie40/WhatIsIndustrie40/what-is-industrie40.html
[retrieved: Sep. 2019].
[7]
“Opc 10000-14 - part 14: Pubsub,” 2018, URL: https://opcfoundation.
org/developer-tools/speciﬁcations-uniﬁed-architecture/part-14-pubsub/
[retrieved: Sep. 2019].
[8]
“Opc ua technology,” 2019, URL: https://opcfoundation.org/about/
opc-technologies/opc-ua/ [retrieved: Sep. 2019].
[9]
F. Jammes and H. Smit, “Service-oriented paradigms in industrial
automation,” IEEE Transactions on industrial informatics, vol. 1, no. 1,
2005, pp. 62–70.
[10]
H. Bohn, A. Bobek, and F. Golatowski, “Sirena-service infrastructure
for real-time embedded networked devices: A service oriented frame-
work for different domains.” in ICN/ICONS/MCL, 2006, p. 43.
[11]
D. S. et al., “Socrades: A web service based shop ﬂoor integration
infrastructure,” in The internet of things.
Springer, 2008, pp. 50–67.
[12]
“Reference
architectural
model
industrie
4.0
(rami4.0),”
2019,
URL:
https://www.plattform-i40.de/PI40/Redaktion/EN/Downloads/
Publikation/rami40-an-introduction.html [retrieved: Sep. 2019].
[13]
“Beck-hoff twincat,” 2019, URL: https://www.beckhoff.com/twincat/
[retrieved: Sep. 2019].
[14]
“Siemens simatic,” 2019, URL: https://w3.siemens.com/mcms/topics/
en/simatic/pages/default.aspx [retrieved: Sep. 2019].
[15]
“Br
automation,”
2019,
URL:
https://www.br-automation.com/en/
technologies/opc-ua/opc-ua-br/ [retrieved: Sep. 2019].
[16]
M. M¨uller, E. Wings, and L. Bergmann, “Developing open source
cyber-physical systems for service-oriented architectures using opc ua,”
in 2017 IEEE 15th International Conference on Industrial Informatics
(INDIN).
IEEE, 2017, pp. 83–88.
[17]
M. Melik-Merkumians et al., “Towards opc ua as portable soa middle-
ware between control software and external added value applications,”
in Proceedings of 2012 IEEE 17th International Conference on Emerg-
ing Technologies & Factory Automation (ETFA 2012).
IEEE, 2012,
pp. 1–8.
[18]
“Opc 10000-5 - part 5: Information model,” 2019, URL: https:
//opcfoundation.org/developer-tools/speciﬁcations-uniﬁed-architecture/
part-5-information-model/ [retrieved: Sep. 2019].
[19]
“Opc 10000-3 - part 3: Address space model,” 2019, URL: https:
//opcfoundation.org/developer-tools/speciﬁcations-uniﬁed-architecture/
part-3-address-space-model/ [retrieved: Sep. 2019].
[20]
“Upgrade
your
legacy
opc
systems
to
opc
ua,”
2019,
URL:
https://opcconnect.opcfoundation.org/2017/12/
upgrade-your-legacy-opc-systems-to-opc-ua/ [retrieved: Sep. 2019].
[21]
J.-D. Decotignie, “Ethernet-based real-time and industrial communica-
tions,” Proceedings of the IEEE, vol. 93, no. 6, 2005, pp. 1102–1117.
[22]
O. Givehchi, K. Landsdorf, P. Simoens, and A. W. Colombo, “Interop-
erability for industrial cyber-physical systems: An approach for legacy
systems,” IEEE Transactions on Industrial Informatics, vol. 13, no. 6,
2017, pp. 3370–3378.
[23]
M. Wollschlaeger, T. Sauter, and J. Jasperneite, “The future of industrial
communication: Automation networks in the era of the internet of things
and industry 4.0,” IEEE Industrial Electronics Magazine, vol. 11, no. 1,
2017, pp. 17–27.
[24]
A. Balador, N. Ericsson, and Z. Bakhshi, “Communication middleware
technologies for industrial distributed control systems: A literature
review,” in 2017 22nd IEEE International Conference on Emerging
Technologies and Factory Automation (ETFA).
IEEE, 2017, pp. 1–6.
[25]
A. Eckhardt, S. M¨uller, and L. Leurs, “An evaluation of the applicability
of opc ua publish subscribe on factory automation use cases,” in 2018
IEEE 23rd International Conference on Emerging Technologies and
Factory Automation (ETFA), vol. 1.
IEEE, 2018, pp. 1071–1074.
[26]
“Mqtt,” 2019, URL: http://mqtt.org/faq [retrieved: Sep. 2019].
[27]
T. Mizuya, M. Okuda, and T. Nagao, “A case study of data acquisition
from ﬁeld devices using opc ua and mqtt,” in 2017 56th Annual
Conference of the Society of Instrument and Control Engineers of Japan
(SICE).
IEEE, 2017, pp. 611–614.
[28]
V. Jirkovsk`y, M. Obitko, P. Kadera, and V. Maˇr´ık, “Toward plug&play
cyber-physical system components,” IEEE Transactions on Industrial
Informatics, vol. 14, no. 6, 2018, pp. 2803–2811.
[29]
“Mosquitto,” 2019, URL: https://mosquitto.org/ [retrieved: Sep. 2019].
102
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-744-3
SENSORCOMM 2019 : The Thirteenth International Conference on Sensor Technologies and Applications

