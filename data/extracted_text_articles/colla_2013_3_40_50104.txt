MobWEL - Mobile Context-Aware Content-Centric
Workﬂow Execution Language
Anna Kocurova, Samia Oussena, Peter Komisarczuk
School of Computing and Technology
University of West London
London, UK
Anna.Kocurova, Samia.Oussena, Peter.Komisarczuk@uwl.ac.uk
Tony Clark
School of Engineering and Information Sciences
Middlesex University
London, UK
Email: T.N.Clark@mdx.ac.uk
Abstract—Collaboration among people has been empowered
by using mobile devices in daily life. However, increasing user
demands for a better mobile collaboration experience require
constant evolution and adaptation of existing mobile collaborative
technologies. In this paper, the collaborative workﬂow technology
is adapted to enhance mobile peer-to-peer collaboration. With
context awareness integrated, workﬂows are adapted to collabo-
rators’ needs and circumstances. Extra management support for
content behaviour is incorporated in order to increase content
awareness in workﬂows and enable communicating progress
among collaborators. This paper introduces MobWEL, a context-
aware content-centric workﬂow language designed for mobile
peer-to-peer collaboration. MobWEL extends BPEL, using con-
structs from existing workﬂow approaches, Context4BPEL and
BPELlight, and adopting elements from the BALSA workﬂow
model.
Index Terms—mobile; peer-to-peer; context-aware; content;
workﬂows.
I. INTRODUCTION
Mobile phones have become ubiquitous, opening new pos-
sibilities for collaboration, communication and sharing ideas
in real-time. Using smartphones allows people to remain
productive regardless of their geographical locations and col-
laborate while on the move. However, with the spread of
mobile technologies, collaborators expect to have tools that
support collaboration, content sharing and management. The
raising user expectations for mobile collaboration include the
demand for an intelligent mobile collaborative environment
which responds to people’s needs.
Collaborative workﬂow is a widely accepted technology
which offers rich support for multi-party collaboration, co-
ordination of distributed teamwork and content sharing. With
the arrival of mobile computing on the scene, mobile devices
have been integrated into workﬂow management scenarios
and the technology has been adapted for various sets of
requirements. Smanchat et al. [1] states that when work-
ﬂows are utilised in ubiquitous environments, adaptability and
context-awareness are the features that should be included
in the workﬂow mechanism. Earlier workﬂow management
approaches based on a server-client model required centralised
workﬂow management systems deployed on servers. However,
this centralised approach is impractical in various situations
in which people prefer to collaborate solely by using mobile
devices. A typical example of such a situation can be a meeting
between business partners who share private information.
Moreover, in the centralised architectural style, control and
management of workﬂows is driven by a central management
unit with mobile devices behaving only as thin clients. The
central management unit makes all important decisions and
drives the whole workﬂow execution without considering the
current situation of users, and the context the devices reside
in. In this work, Dey’s deﬁnition of context is used: ’context is
any information that can be used to characterize the situation
of an entity’ [2].
The need for a mobile device-centric workﬂow process and
systems that manage the workﬂow processes in a completely
distributed manner has been recognised in the work of Pa-
junen and Chande [3]. Mobile collaboration in the distributed
manner, also labelled as mobile peer-to-peer collaboration,
enables data and content distribution by direct exchange.
Additionally, all decisions can be made by mobile devices
and based on local, context information, thereby adapted to
current collaborators’ circumstances and needs. The work
presented in this paper tackles the problem associated with
representing context information available on a single mobile
device, and using context information to shape peer-to-peer
workﬂow execution. Context describes the current situation
of a user, a device or an environment regarding a speciﬁc
purpose. By expressing the context model explicitly for each
workﬂow scenario, each mobile device can monitor, acquire
and process only required context information. By adapting
workﬂow logic to consume context information, the workﬂow
execution can become more dynamic and responsive to an
individual collaborator’s situation.
Additionally, workﬂow processing often involves content
manipulation such as reviewing and approving proposals
or pictures. Mobile content such as picture, document or
video/audio is usually user-generated or adapted for use on
mobile devices. Mobile content is described by metadata
and can be semantically enriched by context metadata such
as location where it was created. Creating, processing and
disposition of content are the basic stages of its lifecycle. How-
ever, content can ﬂow through a more complex management
process involving stages such as content editing, reviewing
or approving. Workﬂow process activities modify content or
61
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

its metadata. By way of illustration, if a proposal has been
approved, its metadata specifying the state of approval has
been changed, the proposal is considered as being in the
’Approved’ state and often shortly referred as ’approved’. So
at any given instant of time, content is in a speciﬁc state
that is deﬁned by values of its metadata. There are several
beneﬁts to increasing content awareness in mobile workﬂows
and integrating advanced content management capabilities in
the workﬂow management system. Firstly, content behaviour is
visible and its lifecycle is expressed as explicitly as the process
logic is. Secondly, especially in peer-to-peer collaboration,
content state-related information can be used signiﬁcantly in
communicating progress among collaborators. Dissemination
of such information enables easier content synchronisation
over a number of devices. Furthermore, there can be rela-
tionships and dependencies between various content items.
For example, the proposal can have more sections edited by
co-workers on their devices. Receiving regular information
about each section state would enable faster processing of the
proposal.
This paper develops the ideas presented in our previous
work [4] and presents our solution for increasing context and
content awareness in the collaborative workﬂow technology.
In particular, a mobile context-aware content-centric work-
ﬂow execution language (MobWEL) is introduced and an
architecture of a workﬂow management system that carries
out MobWEL workﬂows is described. The remainder of the
paper is structured as follows. Section 2 presents the usage
scenario. An overview of related work is given in Section 3.
Domain analysis and the constructs of the MobWEL language
are described in Section 4. The MobWEL workﬂow language
is presented in Section 5. Section 6 outlines the logical
architecture of the MobWEL workﬂow management system.
This paper is concluded in Section 7.
II. MOBILE PEER-TO-PEER COLLABORATION SCENARIO
The concept introduced in this paper is illustrated by using
the following usage scenario. A team of ten designers work
on interior design of buildings. Designers often work out in
the ﬁeld using smart phones to communicate and directly
share pictures. Although each design project is assigned to
a particular designer, design decisions are never done by a
single person. The following work pattern is used to complete
projects:
1) Designer Jane takes a picture of a new room design by
using her smart phone.
2) A simple rating system is used to quickly assess design
ideas. Jane adds her own rating to the picture.
3) The picture is sent to her fellow co-workers. They work
out in the ﬁeld so each of them can review the picture
by using own mobile phone.
4) Reviewer’s subjective opinion can be captured by adding
a comment.
5) Reviews and comments are sent back to Jane. She
ﬁnally reassesses her idea according to opinions of other
designers.
6) If the idea is good, the picture is sent for ﬁnal approval
to customer.
7) Approved picture is added to Jane’s completed work.
The real work pattern can be abstracted into a collaborative
workﬂow. However, the workﬂow is not adapted to individual
collaborator’s needs. Context and content awareness could
enrich the workﬂow, as shown in Fig. 1.
The simpliﬁed workﬂow process is illustrated from a user’s
point of view in the middle of the ﬁgure. It shows three
roles that participate in this collaboration: Interior Designer,
Reviewer and Customer. The lifecycle of picture is outlined
on the left side. The picture can go through a number of states
such as Initial, Reviewed, Assessed, Approved or Final. Tasks
Fig. 1.
Collaborative Workﬂow
62
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

or activities that can inﬂuence a change of the picture state
are marked. For instance, if the Review task is performed,
the picture can move to the Reviewed state or if the Approve
task is performed, the picture may go to the Approved state.
Relevant context data are shown on the right side of the ﬁgure.
Context information can be used in several ways. Firstly, it can
enrich picture such as location can specify the place where the
picture is taken. Secondly, Jane can specify that only pictures
with rating larger than her Rating User Preference (RatingUP)
can move from the Initial state to the Reviewed state. So if the
RatingUP is set to 3 and the rating added to the picture is 4,
then the picture can be sent to be reviewed. Finally, knowing
work context and current availability of fellow co-workers
would enhance the mobile collaboration. For instance, the
picture can be sent only to those co-workers who are currently
available to review it (Reviewer’s Availability = YES).
III. RELATED WORK
A. Workﬂow Contextualisation
Workﬂow contextualisation has been addressed in a num-
ber of works [5][6][7], however, there are many research
challenges to make context-aware workﬂow systems ready
for practical use. Three main research challenges related
to a context-aware process design have been recognised by
Rosemann et al. [8]: context description, design for context
and process adaptation. Context description refers to the
identiﬁcation and description of context variables relevant for
a business process, respectively to a relevant context model.
This includes the integration of the context model with an
existing metamodel of a process modelling language. Design
for context refers to the incorporation of contextual elements
in the design of business process. In particular, how the
knowledge can be embedded and utilised in the process design
for context. Finally, Process adaptation considers the support
for context-aware business processes.
Although the need for an explicit context description and
identiﬁcation of context variables that inﬂuence process design
and execution has been highlighted, using context in applica-
tions is difﬁcult because of the nature of context information.
Numerous general context frameworks have been already de-
veloped to facilitate context modelling, recognition, reasoning
and management. One of the earlier widely acknowledged
works, the Context Toolkit introduced by Salber et al. [9],
provides a framework for context modelling and management
based on context widgets. Focus on mobile platforms aiming to
simplify the development of context-aware mobile applications
has been addressed in another context management framework
proposed by Korpipaa et al. [10]. The framework employs the
context manager to provide control between the acquisition
and use of context information by applications. One of the con-
text management approaches introduces a preference context
model for representing context-dependent application require-
ments [11]. Based on the existing frameworks, a summary of
the requirements, which should be met in the development
of context modelling and reasoning techniques, has been
elaborated by Bettini et al. [12]. An original and holistic view
of the existing approaches for context data distribution for
mobile ubiquitous systems has been undertaken by Bellavista
et al. [13].
There have been various context management frameworks
developed. However, the frameworks are either too general and
designed to be used with a wide range of context-aware appli-
cations, or the frameworks are designed for a speciﬁc class of
scenarios and a particular set of requirements. However, we
believe that the context modelling and management approach
need to be adapted for the problem it is applied to. Thereby,
to provide different types of context information described
in the usage scenario, a layered, self-contained approach to
context acquisition has been designed and described in our
previous work of Kramer [14]. In this paper, the use of
context information is also considered, thereby, the approach
is extended and the extended approach to a workﬂow-speciﬁc
context representation and management is described.
Following the same vision that workﬂow meta-models
should support context modelling and its use in workﬂows,
a context-aware workﬂow process model has been developed
by Wieland et al. [15]. The implemented process model based
on Business Process Execution Language (BPEL) has been
named Context4BPEL. Context4BPEL enables modelling of
context-aware workﬂows directly without hiding the context
usage in the invoked web services. The approach is based
on the context-related concepts such as context event, context
query and context decision. Context4BPEL workﬂow man-
agement system has been coupled with the Nexus context-
provisioning platform, therefore, the use of the concepts in
Context4BPEL follows the Nexus access pattern. The concepts
have been adopted in our workﬂow language. However, the
Nexus provisioning platform is not suitable for our scenario
as it has been developed as a framework that supports a global
context model, as described by Grossman et al. [16]. In our
work, only local context situations of mobile devices need to
be monitored, thus the context provider should reside on each
device. It means that the Context4BPEL context-related con-
cepts have been adapted in order to be used in alignment with
our context provisioning platform and proposed workﬂow-
speciﬁc context management approach.
B. Object Awareness in Workﬂows
So far, however, too little attention has been paid to con-
tent processed in process-centric workﬂows. Many workﬂow
approaches are organised around process-centric and activity-
centric workﬂow models, which are relatively ﬂat with limited
focus on artifacts processed in workﬂows. Some data-centric
and artifact-centric workﬂow models have been developed,
however, Hull et al. [17] states that the ﬁeld of artifact-centric
workﬂows is still in infancy. The need for more data-driven
and object-aware workﬂow processes has been recognised in
the research community and various approaches, presented in
this section, have been developed to outline or address the
associated challenges.
The belief that traditional process modelling approaches
which focus on activities fail to capture informational structure
63
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

relevant to the business contexture has been supported by
Liu et al. [18]. Business artifacts, such as Purchase Order or
Insurance Claim, are seen as an additional dimension with
which business analyst can model their business. A business
artifact has been described as ’identiﬁable, self-describing
unit-of-information through which business stakeholders add
value to the business’. Therefore, the artifact has an id to be
uniquely identiﬁed within the business and its attributes are
so named that their use within the domain is apparent. This
approach highlights the need for discovering and modelling of
the artifact behaviour.
The issue that entity, such as content or business artifact,
is integrated in workﬂows as an input or output of an activity
and the effects of how performed activities inﬂuence entity’s
behaviour are not visible, motivated the development of the
Business Artifacts with Lifecycles, Services and Associations
(BALSA) workﬂow model [19]. The artifact-centric workﬂow
model comprises four key elements or dimensions: business
artifact information model, business artifact (macro-level) life-
cycle, services, and associations. By varying the paradigms
used to specify the information model, lifecycle, services
and associations, numerous BALSA models can be obtained.
For example, the information model might be speciﬁed as
attributes with scalar values or XML; the lifecycle might be
speciﬁed by using ﬂowcharts or ﬁnite state machines; and the
services might be speciﬁed in black box or BPEL activities.
The choice among the various paradigms depends on the
intended area of application. Therefore, the BALSA workﬂow
model is ﬂexible in its use and provides a guided framework
how to develop a customised artifact-centric workﬂow ap-
proach. This motivated us to use some aspects of the BALSA
model in building the MobWEL workﬂow approach for mobile
platform.
Another framework for integrated process and object life
cycle modelling has been developed by Wahler [20]. Business
objects processed by business processes can be associated with
distinct states abstracted from the details of the performed
tasks. The states mark the milestones of the overall processing,
and are useful in communicating progress to stakeholders
who are unaware of the exact process logic. Unlike other
approaches which base entity lifecycles on variants of ﬁnite
state machines, Hull et al. [21] introduces the guard-stage-
milestone lifecycle model. The model is an evolutionary
work on previous approaches based on business entities with
lifecycles, but is more declarative than ﬁnite machines and
supports hierarchy within a single entity instance.
Object-awareness in process-centric workﬂows is still very
limited, and a holistic approach to integrate data, processes
and users is undertaken in the development of the PHILhar-
monicFlows framework by K¨unzle et al. [22].
Most of the presented studies support the use of a process
model and an object model as two complementary assets in
object-aware workﬂows. However, research to date has tended
to focus on the lifecycle of the artifact without considering its
adaptation to context changes and its evolution in peer-to-peer
workﬂow execution. This motivates the need for MobWEL
workﬂows to support context-awareness in both models and
be designed for peer-to-peer collaboration.
IV. DOMAIN ANALYSIS
The objective of this work is to enhance mobile peer-
to-peer collaboration by developing context-aware content-
centric workﬂows. Such workﬂows can be described by a
workﬂow language that possesses the following main charac-
teristics: a) is executable in a mobile peer-to-peer environment;
b) is context-aware; and c) is content-centric. Building the
workﬂow language from scratch would have been inefﬁcient
and impractical. Moreover, there have been many suitable
existing workﬂow constructs with well-deﬁned semantics that
could have been reused. This section describes the MobWEL
constructs that have been produced by domain analysis.
A. Peer-to-peer collaboration
Peer-to-peer collaboration imposes requirements on func-
tional aspects of workﬂows. Workﬂow partitions are executed
on mobile devices, therefore, the workﬂow language must
provide the support to describe control ﬂows in the partitions.
The second requirement is that messages and information
need to be exchanged directly between peers. To satisfy this
requirement, asynchronous conversation needs to be supported
and coordinated.
BPEL has been used as a base for MobWEL because
of its characteristics. BPEL is platform-agnostic; expressed
entirely in XML; extensible and adaptable; a widely accepted
and adopted workﬂow standard language with well-deﬁned
semantics; and provides robust interaction model that enables
peer-to-peer conversation. Although BPEL has been designed
for processes in a Web Service world, it can be adapted for
mobile peer-to-peer workﬂow execution. Strong coupling of
process logic with the web services technology in BPEL is not
very convenient and ﬂexible approach to be used for mobile
peer-to-peer interactions. Workﬂow participants and their roles
are known beforehand so a much lighter interaction model can
be used.
BPELlight is a WSDL-less BPEL extension which de-
couples process logic from interface deﬁnition [23]. The
BPELlight approach allows modelling of the workﬂow process
independently of Web service technology by introducing a
single type of interaction activity. The interaction activi-
ties (<receive>, <reply>, <invoke>, <pick>) deﬁned in
BPEL 2.0 are resumed by single <interactionActivity>.
In addition, BPELlight processes can be modelled without
specifying interface deﬁnitions (port types), hence they can be
used in non-WS environment. By discarding the static spec-
iﬁcation of port types, this approach enables direct message
exchange between workﬂow partners. The BPELlight approach
offers better ﬂexibility than BPEL and is more suitable for
the description of peer-to-peer mobile workﬂows in which
all participating and interacting parties are known beforehand.
Hence some concepts deﬁned in BPELlight have been adopted
in MobWEL. The <interactionActivity> has been further
64
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

adapted for the use of collaboration-related context infor-
mation. An optional collaborationContext attribute has been
added to determine whether the availability of collaborator(s)
should be consider when a message is sent.
B. Context Management
To make workﬂows context-aware, workﬂows need to have
the ability to react to context changes and adapt their behaviour
to the changed environment. To achieve this, workﬂows need
to be adapted for the use of context information in two ways:
• context information can be queried when needed,
• context changes and events need to be captured and
handled at any time of the workﬂow execution.
The
Context4BPEL
context-related
concepts
have
been
adopted in the MobWEL workﬂow approach to support both
ways of the use of context information.
In addition, to ensure that only relevant and meaningful
context information is consumed, the abstraction level of the
delivered context data should be raised. There are numerous
reasons why the context raw data should be processed before
its consumption in workﬂows. Firstly, the raw context data
is heterogeneous and inconsistent. Secondly, if a context pro-
visioning platform distributes the raw context data, workﬂow
management system would need to deal with irrelevant context
information or make context-related decisions very often.
To prevent these situations, high-level context information
is derived. For example, knowing when battery level is low
might inﬂuence decisions whether certain operations should
be performed or not. If a consuming workﬂow requires being
informed only about the change when the battery level drops
down to 5 %, constant notiﬁcations about every battery level
change would be completely inefﬁcient. By specifying a high-
level context information such as LOW for battery level in a
range between 0% and 5% and HIGH for a range between
5% and 100% would ensure that the context-aware workﬂow
is notiﬁed only when the context value is changed from HIGH
to LOW.
Further, relationships and dependencies between various
context information can be indicated through the accommoda-
tion of context aggregation. An example of context aggregation
is illustrated in Fig. 2.
Fig. 2.
Example of context aggregation
Work context of interior designers is expressed as a context
aggregation of three user preferences: At work, Work Prefer-
ence and Status. Context values for the At work context are
YES and NO representing the designer’s work status. Each
designer can specify own work preference, for illustration
purposes only OFFICES, HOUSES and SHOPS are shown.
The Status is used to show whether collaborator is currently
busy. Availability of the designer has an informative character
to indicate whether the task can be taken by the person.
The context value of Availability is determined from children
context values by using associated rules. The aggregated
context value can be: (Availability-YES) or (Availability-NO).
C. Content Behaviour
Adding the content management support means that work-
ﬂows should be adapted to use content state-related informa-
tion similarly as they use context information:
• content state can be queried,
• content state-related changes and events are captured and
handled at any time of the workﬂow execution.
To achieve this, some ideas developed in the BALSA workﬂow
model seem to be practical and applicable for modelling
of content-centric mobile workﬂows, despite the fact that
context awareness has not been considered in this model.
Two elements of the model, namely the Business Artifact
Information Model and the Business Artifact Lifecycle have
been adopted in our workﬂow approach. Firstly, the substance
of the Business Artifact Information Model has inspired us
to consider the content-related data. To gain control over
processed content and its behaviour, a set of certain content-
related metadata that is accessible and manageable by the
workﬂow management system needs to be identiﬁed before-
hand. This can be brieﬂy illustrated by an example from usage
scenario. If there is a rating system created for pictures, an
attribute called ’ratingScore’ should be associated with each
picture to hold an information about added rating. By adding
the metadata to a picture, the information can be accessed
at any time and can be used to make certain management
decisions.
Secondly, the concept of the BALSA Business Artifact
Lifecycle element is adopted in the construction process of
our context-aware content lifecycle. Similarly, the context-
aware content lifecycle is represented by a variant of ﬁnite
state machines. Generally, a state machine contains a number
of states, each state corresponding to a stage in the content
lifecycle. Therefore, a content state is an essential construct
in the content lifecycle. Content might move from one stage
to another. The connections between two states are called
transitions. When content is created, it is in an initial state
with no incoming transition. At the end of its evolution, there
is a ﬁnal state that indicates the end of its lifecycle and
has no outgoing transition. Between the initial and the ﬁnal
state, there are states with incoming and outgoing transitions.
Conditions may be attached to these transitions. A condition
can depend on a certain value of content attribute or external
event.
A context change is an external event that can trigger
a transition between two content states. Because of this,
conditions placed on transitions need to be modiﬁed to deal
65
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

with context. With context considered, two possible situations
can happen.
• In the ﬁrst situation, the further evolution of content
depends on the current context of the execution envi-
ronment. For example, if a rating has been added to a
picture, the picture moves to the Rated state.
After that, based on available context information, the
picture can go to either the Ready to Review or Archived
state, see Fig. 3a. So if the added picture ratingScore is
greater than or equal to the value of the user preference,
the picture goes to the Ready to Review state. Otherwise,
it is moved to the Archived state. In this situation,
context information has to be acquired at real time.
When context information is obtained, the conditions are
evaluated. Context information presented in this example
is simpliﬁed, considering only RatingUP as a representant
of the current context.
• In the second situation, the transition between two content
states occurs only when speciﬁc context emerges. The
situation is illustrated in Fig. 3b. Rating added to the
picture is stored in the ratingScore attribute. For example,
it can have a value of ’2’. Current RatingUP is set to ’3’,
therefore the picture cannot move to the Ready to Review
state at this time. Instead, it waits whether any context
change in the RatingUP happens. The picture remains
in the Rated state until the RatingUP is changed and
becomes less than or equal to ’2’. In contrast to the ﬁrst
situation, this situation requires an awaiting, monitoring
and ﬁltering mechanism for context events.
Fig. 3.
Context conditions
Therefore, to distinguish between these situations, two types
of context conditions are created: context-driven condition
(CDC) and context-aware condition (CAC).
D. Support for context and content awareness
Based on the requirements outlined for context and con-
tent awareness, the control ﬂow has to be adapted for
information querying and events handling. Again, BPEL
has the potential to be extended to fulﬁl the requests.
Firstly, BPEL provides event handlers to deal with occurring
events. Event Handlers can be used if a context change
or a content state-related change occurs. Secondly, using
BPEL constructs for conditional branching, such as switch
or while, enables to query information at decisions points.
To query context information or content state-related in-
formation, two extension functions need to be supported:
(Object contextValue) mobwel:getContextValue(String contextName)
(String contentState) mobwel:getContentState(String contentVariable)
The use of the functions is illustrated in Fig. 4.
Fig. 4.
Example of the use of the extension functions
Constructs presented in this section have been accommo-
dated in the design of the MobWEL workﬂow language. The
language is deﬁned next.
V. MOBWEL LANGUAGE DEFINITION
This section introduces the MobWEL workﬂow language.
Firstly, the anatomy of a MobWEL workﬂow is outlined
(Fig. 5).
Fig. 5.
Anatomy of MobWEL workﬂow
MobWEL workﬂows are designated for mobile peer-to-
peer collaboration, thereby a number of roles and workﬂow
participants can be involved in the workﬂow execution. Work-
ﬂow participants have assigned roles, each role performs only
activities deﬁned in an allocated workﬂow partition.
MobWEL workﬂows are composed of various constituents,
which are either role-speciﬁc, explicitly deﬁned for each
participating role, or role-independent, deﬁned same for all
participating roles. The workﬂow constituents are described
next.
A. Group Identiﬁcation
In collaborative workﬂows, tasks are performed by collab-
orators. In this concept, workﬂow collaborator is a person
who uses a mobile device to collaborate, share content and
communicate with other team members in order to achieve a
common goal. To execute workﬂows in peer-to-peer collab-
oration, each mobile device needs to be given the relevant
details about fellow collaborators. The Group Identiﬁcation
workﬂow constituent speciﬁes all Collaborators participating
in a workﬂow and their associated Roles (Fig. 6).
Each Collaborator is described by personal name and the
attributes which identify collaborator’s mobile device such as
66
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

Fig. 6.
Metamodel of Group Identiﬁcation
phone number, Wi-Fi and Bluetooth MAC addresses (assum-
ing that a collaborator uses only one device to collaborate). A
collaborator can play more than one role in a workﬂow (not
in same workﬂow instance). A good example is given in our
usage scenario where Jane can play the role of designer but
also the role of reviewer if asked to review a picture created
by her co-worker. Therefore, the Roles element describes roles
involved in workﬂow. Each Role can be played by a number
of actors, each Actor refers to a Collaborator and is identiﬁed
only by the phoneNo attribute of the collaborator. This enables
collaborators to be associated with more roles.
B. Workﬂow-Speciﬁc Context Deﬁnition
Context Deﬁnition Metamodel, see Fig. 7, expresses all the
constructs, concepts and relationships between the constructs
needed to build workﬂow-speciﬁc context deﬁnition models.
Fig. 7.
Metamodel of Context Deﬁnition
The workﬂow speciﬁc context deﬁnition modelling ap-
proach allows building context models that are speciﬁc for
each workﬂow partition. It enables to express context aggrega-
tions, sets of values and other attributes related to a workﬂow
partition.
Context is described by its contextName, Context Type and
Values Set. For example, context can have the name: Status,
the context type of User Preference, and the context values set:
{Busy, Available, Not Set}. A high-level Context Value can be
derived from raw context data. We use the Values Descriptor
construct to associate the high-level context values with raw
data. Two examples: Range and Coordinates are outlined. For
instance, LOW as a high-level context value for battery can be
deﬁned for a range with ’minValue set to 0’ and ’maxValue
set to 5’ (%). Coordinates are used to specify a location or a
place of interest.
Composite context, dedicated for context aggregation, is
designed as a context container. It is a subtype of Context
and inherits its attributes and behaviour. A composite context
can be built as an aggregation of other composite and atomic
contexts. Based on the context values of child contexts, Rule
is used to determine a context value of the composite context.
Therefore, the composite context values set can be fully
deﬁned by workﬂow designers. For example, the context value
of Availability can be deﬁned as YES if the current values of
At work is YES, Work Preference is HOUSE and Status is
AVAILABLE.
Workﬂow Attributes are the attributes required for better
functioning of the workﬂow management system. Firstly, the
workﬂow management system does not need to obtain context
information of all deﬁned contexts. For example, in order
to execute a workﬂow step, it might need to obtain only
context information: Availability-YES without knowing that
the context value of At work is set to YES or the value
of Status is set to AVAILABLE. Therefore, each context is
associated with the workﬂowActive attribute which can be set
to true if a particular workﬂow is interested in listening to
changes of this context, respectively to false if the context
is only auxiliary and its values do not directly inﬂuence the
workﬂow execution. Secondly, the consumption attribute is
used to identify the consumption of context information within
the workﬂow management system.
C.
Context-Aware Content Lifecycle Deﬁnition
A number of content items can be processed across multiple
mobile devices in a MobWEL workﬂow case, each content
item following its own content lifecycle. The evolution of
content items is distributed across all collaborators, therefore
a set of content lifecycles is deﬁned once and remain same
for all workﬂow partitions. Based on the design speciﬁcations
presented in the previous section, the metamodel for a context-
aware content lifecycle has been constructed. All constructs
related to a content lifecycle and their relationships are shown
on the metamodel in Fig. 8.
Fig. 8.
Metamodel of Content Lifecycle
There are two parts presented, one representing content
information model and another representing content lifecycle.
Lifecycle is described by its lifecycleName. The lifecycle can
describe the behaviour of several content items, however, in a
particular deﬁnition it can be associated only with one Content
item. The Content item is characterised by its contentType
67
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

such as image, audio or video and a set of workﬂow-speciﬁc
Metadata, each metadata of a speciﬁc metadataType. Fur-
thermore, Lifecycle is composed of a number of States and
Transitions. State is characterised by stateName and roleName.
The latter attribute determines the role associated with the
ownership of the state. Each Transition has a source and
target State and can be associated with a Condition. To trigger
the transition of the content item between the source and
target state, the associated condition must evaluate to true.
There are two subtypes of conditions, MetadataCondition and
ContextCondition. Fulﬁllment of MetadataCondition depends
on the value of particular metadata. ContextCondition depends
on certain context and can be ContextAware or ContextDriven.
D. Process Control Flow
The main part that integrates other constituents is the control
ﬂow of the MobWEL workﬂow. MobWEL extends BPEL,
therefore, the major part of its syntax and semantics have
been inherited from BPEL. The focus is put on constructs
that have been introduced or existing constructs that have been
conceptually modiﬁed. These constructs depicted in Fig. 9 are
as follows:
• MobWEL Workﬂow Process: A workﬂow process iden-
tiﬁed by its unique targetNamespace. The groupIdentiﬁ-
cation, contentLifecycleDescription and contextDeﬁnition
attributes specify namespaces of deﬁnitions of group
identiﬁcation, content lifecycle and context.
• Variable: A variable is used in a standard BPEL process.
The variables used for content items have the default
value for the variable type set to ’content’.
• Lifecycle: This element refers to the description of an
explicitly deﬁned content lifecycle. Each lifecycle is
speciﬁed by its name and resource, a path to the explicit
deﬁnition. A variable of a content type must be also
associated with the lifecycle. More lifecycles can be
declared within one workﬂow process.
• ContextDeﬁnition: This element refers to the explicit con-
text model. The contextDeﬁnitionSource attribute speci-
ﬁes the path to the context deﬁnition model. A workﬂow
process can have zero or one context deﬁnition declared.
• CollaboratorsGroup: A group of collaborators is ex-
plicitly deﬁned and imported in the workﬂow deﬁnition
through this element. It is speciﬁed by its groupName and
groupSource, a path to the group description. A workﬂow
process has one group of collaborators declared.
• Partner and Conversation: A declaration of partners and
conversations involved in collaboration. The constructs
are adopted from the BPELlight workﬂow deﬁnition. A
workﬂow process can have one or more partners.
• MobWEL Activity: A base type for MobWEL activity.
• InteractionActivity: An interaction activity adopted from
BPELlight used for all interaction activities between
partners and adapted for collaboration-related context.
• ContentActivity: An activity with an informative charac-
ter. The activity is used to access content-related data
stored in process variables and communicate them out to
external parties.
Fig. 9.
MobWEL constructs
Most of the introduced constructs are global declarations in
the process. Only interactionActivity and contentActivity are
speciﬁc activities used in the description of the control ﬂow.
VI. MOBWEL WORKFLOW MANAGEMENT SYSTEM
MobWEL workﬂows are carried out on mobile devices.
Management and execution of MobWEL workﬂows in a
distributed manner across a number of devices require an
adapted workﬂow management system that is deployed on
each device. In this section, the architecture of such mobile
workﬂow management system is described.
The high-level architecture of the MobWEL workﬂow man-
agement system is shown in Fig. 10.
Fig. 10.
High-Level Logical Architecture
The system is composed of the following components: Con-
text Provider, Context Manager, Content Manager, MobWEL
Engine, and Peer-to-peer Interaction Manager.
A. Context Provider
Context Provider is a component responsible for context
monitoring, acquiring, processing, aggregating and dissemi-
nating. Context Provider interprets context models and creates
corresponding internal data structures. Each particular context
concern is managed through a self-contained context compo-
nent. When a context change occurs, raw context data is pro-
cessed, and context information in the AppKey-ContextName-
ContextValue-ContextDate format is broadcasted to interested
parties.
68
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

B. Context Manager
Context Manager acts as intermediator between Context
Provider and other internal workﬂow management compo-
nents. It manages the use and consumption of context infor-
mation and drives context routing to other components of the
MobWEL workﬂow management system at run-time.
It
contains
mechanisms
to
synchronously
and
asyn-
chronously communicate with Context Provider. To commu-
nicate effectively, both components need to be aware about
the same contexts. When the deﬁnition for a new workﬂow is
deployed to Context Manager, Context Manager also passes
it to Context Provider. Because of this, the same workﬂow-
speciﬁc context deﬁnition is deployed to both components,
but they extract different information from it. While Context
Provider is more interested in extracting information related
to context hierarchies and context reasoning, Context Manager
focuses only on active contexts. Context Manager extracts
contextName, contextValuesSet, workﬂowID and workﬂowUse
for all contexts labelled as workﬂow-active. This ensures that
Context Provider broadcasts context messages that are related
to the workﬂows deployed in the workﬂow management sys-
tem, and Context Manager can process them further. Context
Manager has implemented a mechanism that monitors and
ﬁlters messages broadcasted by Context Provider. As opposed
to this asynchronous way of communication, Context Manager
contains also a mechanism that enables synchronous binding to
Context Provider and supports querying of context information
at real time.
Context information is consumed within the workﬂow man-
agement system in several ways. Based on the workﬂow-
speciﬁc context consumption value extracted from the con-
text deﬁnition, Context Provider knows which component is
interested in obtaining the context information. For example,
if it is content-related, Content Manager is informed, if it is
workﬂow-related, MobWEL engine gets the context notiﬁca-
tion. Context Manager also persists last context values.
C. Content Manager
Content Manager provides advanced content management
functionalities and manages content lifecycles. This compo-
nent parses the Context-aware content lifecycle elements of
the MobWEL workﬂow deﬁnition. Each lifecycle element
contains description of content-related metadata and descrip-
tion of content lifecycle. Content-related data is persisted and
managed by using Content Provider. When workﬂow case
is instantiated, multiple content items are created that follow
the same lifecycle. Content State Transition System is used to
manage and control content lifecycles.
D. MobWEL Engine
MobWEL Engine is the execution engine and the heart of
the MobWEL workﬂow management system that parses and
instantiates workﬂows, and provides an overall control over the
management and execution of MobWEL workﬂow instances.
The MobWEL engine is based on a BPEL engine. Sliver is
an open source lightweight workﬂow engine that supports the
execution of SOAP services and BPEL processes on a wide
range of devices, and communication protocols [24]. This
BPEL engine has been used as a base for the MobWEL engine.
The MobWEL engine contains a main parser and an
execution unit. The parser interprets the whole MobWEL
workﬂow deﬁnition and invokes corresponding parsers in other
components for parsing of all workﬂow constituents.
The execution unit extends the BPEL execution unit, there-
fore, only the support for the execution of constructs intro-
duced in the MobWEL language, namely interactionActivity
and contentActivity, has to be added. The semantics for inter-
actionActivity is inherited from BPELlight. The contentActivity
has only an informative character with a simple role to inform
Content Manager and its execution does not change the data
ﬂow, thereby it is handled in the same manner as other BPEL
activities and its internal execution depends on the action
speciﬁed in the activity.
E. Peer-To-Peer Interaction Manager
Peer-to-peer Interaction Manager manages communication
and messages transmissions with other mobile devices. Event
Handlers handle incoming messages from other devices and
requests coming from mobile applications or services. An
event handler can be designed for each form of communication
such as incoming binary data message, multimedia message, or
messages coming via Bluetooth connection. Structured infor-
mation and messages are sent between devices as a sequence
of bytes, Message Parser is used to convert workﬂow-related
data and objects into such message format that can be trans-
mitted across the network. The parser also extracts workﬂow
objects from incoming messages. Identity Manager is used to
store and manage the details about participating collaborators.
The details include collaborators’ names, their roles, and other
data needed for device-to-device communication.
F. Validation
To prove that the theory is functional, concrete research
artefacts have been constructed. Firstly, the metamodel of
MobWEL workﬂow language has been mapped into an XML
schema. The MobWEL XML Schema is a tool that can be
used by workﬂow designers who would be able to model and
deﬁne the concrete workﬂows in an XML format. Secondly,
formal MobWEL semantics has been deﬁned. Finally, software
prototypes have been implemented for the Android platform.
Context provider operates on a mobile device and can be
built as an internal component of the workﬂow manage-
ment system, which provides services solely to the Mob-
WEL workﬂow management system. However, there might
be numerous context-aware applications running on the same
mobile device which need to use the same context provisioning
services. Thereby, Context Provider has been implemented
as an external component, and named ContextEngine. The
remaining components of the MobWEL workﬂow manage-
ment system have been implemented as a system named
CAWEFA (Context-Aware Workﬂow Engine For Android). A
MobWEL workﬂow deﬁnition has been constructed for the
69
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

usage scenario. The workﬂow deﬁnition has been deployed to
CAWEFA and ContextEngine, and instantiated several times.
The expected behaviour of each workﬂow instance expressed
by using the MobWEL semantics has been compared with
the actual behaviour of running workﬂow instances. The
conducted experimentation and obtained results have shown
that the MobWEL workﬂow language can be used to describe
executable mobile context-aware content-centric workﬂows.
VII. CONCLUSION AND FUTURE WORK
In this paper, we have presented MobWEL, a context-
aware content-centric workﬂow language designed for mobile
peer-to-peer collaboration, and the architecture of a MobWEL
workﬂow management system. One of our main goals has
been to build a language which is context-aware, visualises
and integrates content behaviour, and supports peer-to-peer in-
teraction. We have extended BPEL, considered the dimensions
of the data-centric approach proposed in the BALSA model,
and adopted some existing constructs from Context4BPEL
and BPELlight. In this paper, only a ﬁrst milestone in the
deﬁnition, management and execution of MobWEL workﬂows
has been presented.
Integration of context and content awareness into the work-
ﬂow technology offers numerous beneﬁts. Firstly, by adding
context deﬁnitions to the workﬂow description, the execution
of workﬂow partition can be adapted to individual collabora-
tor’s needs and situation in the current run-time environment.
Secondly, additional content management functionalities en-
able to monitor content behaviour and disseminate progress
to other peers. However, there have been also some limi-
tations discovered that should be addressed in future work.
For example, the development of the MobWEL language has
been tailor-made for a speciﬁc class of workﬂows. It would
be interesting to use and validate the MobWEL workﬂow
approach in other scenarios. Further, although integration of
context awareness enables workﬂow adaptation to individual
user needs and preferences, the proposed approach requires a
prediction of possible context situations beforehand. However,
context emerges in the moment and cannot be fully predicted.
In addition, content sharing between devices might be a
time consuming and costly operation, especially when one
collaborative task may be accomplished by a number of actors
with the same role but only few of them might be able to
perform the task. So another valuable extension of this work
would be in the development of an appropriate content sharing
strategy.
A major limitation of this work is that it is up to workﬂow
designers to construct MobWEL workﬂows in a way that
ensures the consistency between the process-based workﬂow
models and associated content lifecycle(s). Thereby, further
work is required to establish a MobWEL workﬂow design
methodology.
REFERENCES
[1] S. Smanchat, S. Ling, and M. Indrawan, ”A survey on context-aware
workﬂow adaptations,” in Proceedings of the 6th International Confer-
ence on Advances in Mobile Computing and Multimedia, 2008, pp.
414–417.
[2] A. K. Dey, ”Understanding and using context,” in Personal and Ubiqui-
tous Computing, vol. 5, 2001, pp. 4–7.
[3] L. Pajunen and S. Chande, ”Developing workﬂow engine for mobile
devices,” in Enterprise Distributed Object Computing Conference, 2007,
pp. 279–286.
[4] A. Kocurova, S. Oussena, P. Komisarczuk, and T. Clark, ”Context-
aware content-centric collaborative workﬂow management for mobile
devices,” in Second International Conference on Advanced Collaborative
Networks, Systems and Applications, 2012, pp. 54–57.
[5] M. Rosemann, J. Recker, and C. Flender, ”Contextualisation of business
processes,” in International Journal of Business Process Integration and
Management, vol. 3(1), 2008, pp. 47–60.
[6] O. Saidani and S. Nurcan, ”Context-awareness for adequate business
process modelling,” in Third International Conference on Research
Challenges in Information Science, 2009, pp. 177–186.
[7] M. Adams, A. Ter Hofstede, N. Russell, and W. Van der Aalst, ”Dynamic
and context-aware process adaptation,” in Handbook of Research on
Complex Dynamic Process Management: Techniques for Adaptability
in Turbulent Environments/Ed. MM Wang, Z. Sun, 2009, pp. 104–140.
[8] M. Rosemann and J. Recker, ”Context-aware process design: Exploring
the extrinsic drivers for process ﬂexibility,” in The 18th International
Conference on Advanced Information Systems Engineering, Proceedings
of Workshops and Doctoral Consortium, 2006, pp. 149–158.
[9] D. Salber, A. Dey, and G. Abowd, ”The context toolkit,” in Proceedings
of the SIGCHI Conference on Human Factors in Computing Systems:
the CHI is the limit, 1999, pp. 434–441.
[10] P. Korpipaa, J. Mantyjarvi, J. Kela, H. Keranen, and E. Malm, ”Man-
aging context information in mobile devices,” in Pervasive Computing,
vol. 2(3), 2003, pp. 42–51.
[11] K. Henricksen and J. Indulska, ”Developing context-aware pervasive
computing applications: Models and approach,” in Pervasive and Mobile
Computing, vol. 2(1), 2006, pp. 37–64.
[12] C. Bettini et al., ”A survey of context modelling and reasoning tech-
niques,” in Pervasive and Mobile Computing, 2010, pp. 161–180.
[13] P. Bellavista, A. Corradi, M. Fanelli, and L. Foschini, ”A Survey of
Context Data Distribution for Mobile Ubiquitous Systems,” in ACM
Computing Surveys, vol. 45(1), 2013, pp. 1–49.
[14] D. Kramer, A. Kocurova, S. Oussena, T. Clark, and P. Komisarczuk, ”An
Extensible, Self Contained, Layered Approach to Context Acquisition”
in Proceedings of the Third International Workshop on Middleware for
Pervasive Mobile and Embedded Computing, 2011, pp. 1–6.
[15] M. Wieland, O. Kopp, D. Nicklas, and F. Leymann, ”Towards Context-
aware Workﬂows,” in CAISE 07 Proceedings of the Workshops and
Doctoral Consortium, 2007, pp. 11–15.
[16] M. Grossmann et al., ”Efﬁciently managing context information for
large-scale scenarios,” in Pervasive Computing and Communications,
2005, pp. 331–340.
[17] R. Hull, ”Artifact-centric business process models: Brief survey of
research results and challenges,” On the Move to Meaningful Internet
Systems: OTM 2008, pp. 1152–1163.
[18] R. Liu, K. Bhattacharya, and F. Wu, ”Modeling business contexture and
behavior using business artifacts,” in Advanced Information Systems
Engineering, 2007, pp. 324–339.
[19] K. Bhattacharya, R. Hull, and J. Su, ”A data-centric design methodology
for business processes,” in Handbook of Research on Business Process
Management, 2009, pp. 503–531.
[20] K. Wahler, ”A Framework for Integrated Process and Object Life Cycle
Modeling,” PhD Thesis, 2009.
[21] R. Hull et al., ”Introducing the guard-stage-milestone approach for
specifying business entity lifecycles,” in Web Services and Formal
Methods, 2011, pp. 1–24.
[22] V. K¨unzle and M. Reichert, ”PHILharmonicFlows: towards a framework
for object-aware process management,” in Journal of Software Mainte-
nance and Evolution: Research and Practice, vol. 23, 2011, pp. 205–244.
[23] J. Nitzsche, T. Van Lessen, D. Karastoyanova, and F. Leymann,
”BPELlight,” in Proceedings of the 5th International Conference on
Business Process Management, 2007, pp. 214–229.
[24] G. Hackmann, M. Haitjema, C. Gill, and G. Roman, ”Sliver: A bpel
workﬂow process execution engine for mobile devices,” in Service-
Oriented Computing, 2006, pp. 503–508.
70
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-287-5
COLLA 2013 : The Third International Conference on Advanced Collaborative Networks, Systems and Applications

