Regulated Walking for Multipod Robots 
Jörg Roth 
Nuremberg Institute of Technology 
Faculty of Computer Science 
Nuremberg, Germany 
e-mail: Joerg.Roth@th-nuernberg.de
 
 
Abstract— Following a computed path is a fundamental task 
for robot motion. The goal is to compensate error effects, such 
as slippage and create a movement that minimizes the differ-
ence between planned and real positions. This problem be-
comes even more difficult in case we have legged mobile robots 
instead of wheeled robots. In this paper, we present an 
approach to regulate paths for multipods. It is based on 
explicit slippage detection and re-uses a trajectory planning 
component to compute regulation trajectories. The approach is 
implemented and tested on the Bugbot hexapod robot. 
Keywords – Multipods; Hexapod; Autonomous Walking; 
Path-Following; Trajectory Regulation. 
I. 
INTRODUCTION  
Multipod robots are robots with multiple legs, inspired by 
insects. Their main advantage is that they can walk over 
rough terrain or go over small obstacles. In contrast to bipe-
dal robots, multipods have a stable footprint, thus the control 
does not have to consider dynamics or balancing issues. 
In the context of task execution, a robot must follow a 
planned path to a target. Walking usually is slower than driv-
ing, but we have to face new problems: walking is much 
more imprecise. In addition, we have the concept of gaits – 
we first have to plan sequences of leg movements (i.e., servo 
commands) to move the whole robot. Even though we may 
consider multipods as holonomic vehicles, we get non-
holonomic constraints as a result of gait execution capabili-
ties. Certain sensor configurations may cause further restric-
tions. For example, a sensor that prevents falling downstairs 
ideally points in front, thus we may prefer forward walking. 
Our approach is based on the following ideas: 
 
We introduce the concept of virtual odometry to ab-
stract from complex walking gaits. 
 
We measure and compensate slippage as main 
source of disturbance. 
 
We compute regulation trajectories to a pose ahead 
on the formerly planned path. 
 
To compute regulation trajectories we use the same ap-
proach as for the global path planning. However, as the re-
gulation trajectories are much shorter, the planning is much 
faster. 
In section 2, we present related work. In section 3, we 
present our regulation approach. Experiments are presented 
in section 4. Section 5 concludes the paper. 
II. 
RELATED WORK 
Research on path following and trajectory tracking has a 
long tradition in control theory [4][11][18]. The basic goal is 
to provide a formal representation of the so-called control 
law [1]. Both, the vehicle and trajectories are strongly 
formalized in order to derive quality statements, in particular 
regarding the controller's stability [2]. 
Model Predictive Control (MPC) [9][12] is based on a fi-
nite-horizon continuous time minimization of predicted 
tracking errors. At each sampling time, the controller gener-
ates an optimal control sequence by solving an optimization 
problem. The first element of this sequence is applied to the 
system. The problem is solved again at the next sampling 
time using the updated process measurements and a shifted 
horizon. 
Sliding Mode Control (SMC) is a nonlinear controller 
that drives system states onto a sliding surface in the state 
space [15][20]. Once the sliding surface is reached, sliding 
mode control keeps the states on the close neighborhood of 
the sliding surface. Its benefits are accuracy, robustness, easy 
tuning and easy implementation. 
The Line-of-Sight path following principle leads a robot 
towards a point ahead on the desired path. It is often used for 
vessels [6] or underwater vehicles [19]. The approaches dif-
fer how to reach the point ahead. Examples are arcs, straight 
lines or Dubins paths. 
Another approach explicitly measures and predicts slip-
page, in particular of wheeled robots. As this is often a main 
source of disturbance to follow a path, it is reasonable to 
model it explicitly. In [10], effects on motors are measured 
for this. [16] uses GPS and inertial sensors and applies a Kal-
man filter to estimate slippage. 
The majority of vehicles that are considered for the path 
following problem are wheeled robots because their behavior 
can formalized easily. Multipods are only rarely taken into 
account. [5] presents trajectory planning and control for a 
hexapod that mainly keeps the robot balanced in rough ter-
rain. 
Pure Pursuit describes a class of algorithms that project a 
position ahead on the planned trajectory and create a regula-
tion path to reach this position (e.g., an arc). Early work 
about Pure Pursuit is [17]. The basic version only tries to 
reach a position ahead without considering the robot's 
orientation [3]. Improvements dynamically adapt the look-
ahead distance [8]. 
15
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

III. 
THE REGULATION APPROACH 
In contrast to easy to formalize wheeled robots, we have 
to face issues that make it difficult to apply a traditional ap-
proach based on control theory. First, walking is in general 
more error-prone than driving. As a result, we cannot exe-
cute regulation trajectories as precisely as expected. Second, 
as multipods may be different in the capabilities to execute 
certain gaits, we want to consider the set of possible walking 
commands as black box. As a consequence, it is not useful to 
integrate kinematic properties into the model. Finally, our 
regulation mechanism should directly consider obstacles and 
an arbitrary cost function, again given as black boxes. A cer-
tain regulation trajectory may not only be based on regula-
tion parameters, but also on the environment. 
Our approach was inspired by the pure pursuit idea. We 
project the current position ahead to the target and try to get 
there. We extend the basic idea in two ways: 
 
We try to reach a planned configuration, i.e., posi-
tion and orientation. 
 
We are not restricted to a certain primitive trajectory 
(e.g., arc) to reach the configuration ahead, but exe-
cute a full trajectory planning step. 
 
We re-use the trajectory planning both to compute a full 
plan to the final target, as well as for the regulation approach. 
As a benefit, both components produce output that can di-
rectly be used as walking command by the motion system. In 
particular, the motion capabilities are modeled in one place 
in the system. But we have to face two issues: 
 
As the regulation component permanently calls a tra-
jectory planning, we have to consider execution 
time. In our approach, we thus apply an efficient 
trajectory planning approach [13]. 
 
As we do not explicitly model a control law, we 
have to consider sources of disturbance, foremost the 
slippage effect. 
 
The regulation is embedded into a data flow as presented 
in Figure 1. We have the following major components: 
Navigation provides a point-to-point route planning in 
the workspace (i.e., without dealing with the robot's orienta-
tion). This component does not consider non-holonomic con-
straints. It computes a line string of minimal costs that in par-
ticular avoids obstacles. This component is useful to segment 
the overall path planning task. 
Trajectory Planning computes a walkable sequence of 
trajectories and considers non-holonomic constraints. 
Trajectory Regulation permanently tries to hold the 
planned trajectories, even if the position drifts off. 
Simultaneous Localization and Mapping (SLAM) con-
stantly observes the environment and computes the most 
probable own location and location of obstacles by motion 
feedback and sensors (e.g., Lidar or camera). The current er-
ror-corrected configuration is passed to all planning compo-
nents. Observed and error-corrected obstacle positions are 
stored in an Obstacle Map for further planning tasks. 
The Evaluator computes costs of routes and trajectories 
based on the obstacle map and the desired properties. Cost 
values may take into account the path length, expected ener-
gy consumption or the amount of turn-in-place operations. 
Also, the distance to obstacles could be considered, if, e.g., 
we want the robot to keep a safety distance where possible. 
The Motion System is able to execute and supervise walk-
ing commands by formalized gaits. It also considers slippage 
and provides Virtual Odometry. These concepts are de-
scribed in the following sections.  
In this paper, we assume Navigation, Trajectory Plan-
ning and SLAM already exist. We may use an approach as 
described in [13] for this. We here focus on Trajectory Regu-
lation. 
A. Gaits 
Multipods can walk in different ways. First, we can look 
at the actual trajectory, e.g., straight forward, sideways (i.e., 
crab gait), arc or turn in place. Second, we can distinguish 
the gait that defines the time sequence of legs on the ground 
(stance phase) or swing in moving direction (swing phase). 
An important observation: we can deal with trajectory and 
time sequence independently. This means, the respective 
trajectory shape is not influenced by the sequence pattern. 
Figure 2 shows the two phases for a specific leg. Let 
(fxi, fyi) denote neutral foot position. It marks the center of a 
stance movement from (fxi, fyi)+(sxi, syi) to (fxi, fyi)–(sxi, syi) in 
local robot coordinates. In world coordinates, the foot re-
mains on the ground at the same position (in the absence of 
slippage). We assume the stance movement is linear or can at 
least be linearly approximated. 
In the swing phase, the leg is lifted and moved in walking 
direction. The gaits define the cooperation of legs in the 
respective phases. Many gaits are known, e.g., Tripod, Wave, 
Ripple that differ in stability and propulsion [14]. We assume 
gait execution and the choice for a certain gait is encapsu-
lated in the Motion System component. 
 
Figure 1.  Data flow to execute walking tasks 
 
Figure 2.  Gait movement phases 
16
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

B. Virtual Odometry 
Leg movement with a complex timing pattern is difficult 
to handle in the context of trajectory planning and regulation. 
For geometric computations the model of turning wheels is 
more convenient. This leads to the idea of virtual odometry: 
We transform walking to corresponding wheeled movement. 
We could think of roller-skates attached to the multipod's 
legs while the legs remain in neutral position. To fully de-
scribe gait movement with the help of virtual odometry we 
need 
 
the neutral position (fxi, fyi), 
 
the stance vector (sxi, syi) for each leg i, 
 
the time tst that the gait resides in stance phase for a 
complete step of one stance and one swing phase. 
 
Note that tst depends on the respective gait (e.g., Tripod 
or Wave). For a small time t, a foot of leg i moves along the 
vector 
 





 

yi
xi
st
s
s
t
t
2

(1)
in local robot coordinates. We derivate over time. Not 
necessarily all legs move along the same vector, thus the ro-
bot's pose changes over time by 
 












 




 




   










yi
xi
st
yi
xi
yi
xi
y
x
s
s
t
f
f
f
f
2
,


(2) 
Here,  denotes a function that computes a roto-transla-
tion which maps all positions of the first list to positions of a 
second list, meanwhile minimizing the mean square error. 
There exists an approach based on Gibbs vectors [7] to set up 
and solve a linear equation system for . 
For   0, the robot walks along an arc with center 
 















 





y
x
y
x
c
c
1
/ 2)
1/ tan(
/ 2)
1/ tan(
1
2
1



(3) 
and curve angle . For  = 0, the robot walks along a 
straight line with direction (x, y). Considering both cases, 
the moving distance for a leg i over time t is 
 







 
 

 




  

0
 
if
0
if 
)
(
2
2
2
2



y
x
y
yi
x
xi
i
c
f
c
f
t
t

(4) 
Note that a turn in place is considered as arc movement 
with arc center in the robot's center. 
We call i(t) the virtual odometry. It represents the ex-
pected portion of the overall moving distance of each foot 
when walking. 
C. Slippage Detection and Compensation 
In contrast to the expected walking distances, we now 
compute the real distances. We assume sensors (e.g., Lidar) 
and respective SLAM mechanisms that permanently measure 
the robot's real position. We consider these mechanisms as 
black box, but expect they detect the real pose change (x', 
y', ') after walking a time t. We assume during t, only a 
single movement pattern is executed. This obviously is 
wrong, if there is a change in the trajectory (e.g., changing 
from arc to straight). However, for small t, we can model 
both patterns by a single ('average') pattern, thus expect only 
small errors. 
For given (x', y', ') we can apply formulas (3) and (4) 
to get the real walking distances I'(t). We define 
 
)
('
)
(
t
t
S
i
i
i


 


(5)
as the leg-specific slippage factors and 
 


i
iS
L
S
1

(6)
as the general slippage factor, where L is the number of 
legs. Obviously S1 in reality. S describes the slippage prop-
erty of the current bottom's pavement. E.g., S=2 means, the 
robot walks half as far as expected when executing a certain 
trajectory. The Si describe slippage per leg and could indi-
cate malfunctions in leg servos or feet that do not properly 
touch the ground. 
We are able to compensate slippage in two ways: 
 
Only compensate the general slippage. 
 
Also consider leg-specific slippage. 
 
The assumption is: what we measured recently is a good 
estimation for the nearer future. E.g., if we walk on a slip-
pery floor, we can consider the respective slippage factor to 
execute next trajectories because it is likely to reside on the 
same floor for a certain time. 
To consider the general slippage factor, we have to ex-
tend the respective trajectory by the discovered factor, e.g.: 
 
Walking straight over a certain distance, we have to 
multiply the planned distance by S. 
 
Walking on an arc, we have to multiply the planned 
arc angle by S. 
 
To consider the leg-specific slippage is more difficult. 
The problem: these factors do not only affect the trajectory 
length, but also its shape. E.g., if we want to walk straight 
with different factors Si for left and right legs, the robot 
effectively walks on an arc instead. A first approach would 
be to extend the respective stance vectors. E.g., if for a spe-
cific leg we get Si=2 (i.e., leg produces only half of the ex-
pected propulsion), we could multiply (sxi, syi) by 2 to com-
pensate this effect. This however is not always possible be-
cause the stance vector length is limited – either by the me-
17
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

chanics, or because neighbor legs should not collide during 
walking. We usually are only able to shorten the stance vec-
tors. Our approach is thus to compute 
 
)
max(
max
iS
S

, 
/ max
~
S
S
S
i  i

(7) 
We use Smax as the general factor to extend the trajectory 
and multiply each leg's stance vector by 
iS~ . Note that
iS~ 1, 
thus a stance vector only can get smaller. 
It depends on the respective scenario, whether the com-
pensation only should consider the general slippage or apply 
a leg-specific compensation. The latter is only reasonable, if 
we actually expect a leg-specific slippage that may be result 
of malfunctioned legs. 
D. Regulation Trajectories 
When walking on a planned trajectory, the real position 
differs from the planned position. This is because the execu-
tion of walking commands is never absolutely accurate due 
to slippage and minimal mechanical impreciseness. The task 
is to compensate the differences during walking and to meet 
the planned trajectories. This problem is related to control 
theory, where a system tries to produce a desired output with 
the help of controllable input values. In the case of trajectory 
regulation, however, the desired output is a pose that usually 
cannot directly be achieved by adapting single values or by a 
primitive walking operation. Due to non-holonomic con-
straints a sequence of trajectories usually is required. 
Even though a certain multipod may support holonomic 
locomotion, not all trajectories may be suitable to get to the 
planned trajectory. E.g., we may have a cost function that 
considers a safety distance to obstacles, or we expect an 
ultrasonic sensor to always point in walking direction. To 
compute a regulation trajectory we thus need an additional 
planning step that (similar to the navigation and trajectory 
planning) minimizes a certain cost function. 
To explain our approach, we need some definitions. First, 
we need a function TP that provides a trajectory planning 
from start pose s to target pose t. 
 

)
,
),( ,
,
,
(
)
(


t
t
t
s
s
TP s
T
y
x
y
x
i 

(8) 
The result (Ti) is a sequence of primitive trajectories, i.e., 
expressible by simple walking commands (e.g., arc or 
straight). TP takes into account the route points from the 
navigation, the cost function and the obstacle map. We can 
consider TP as black box, but solutions are widely known. 
We, e.g., may use Rapidly-exploring Random Trees (RRT). 
Our implementation is based on sets of maneuvers that are 
combined using a Viterbi approach [13]. 
We further need to identify an expected pose e of a cur-
rent pose c. 
 

)
,
,
( ),(
)
,
,
(


c
c c
E T
e
e
e
y
x
i
y
x


(9) 
Expected means: the intended pose for a pose that is not 
on the planned path. If the multipod remains on the trajectory 
sequence, c and e are equal. But if the current pose leaves the 
planned trajectory, we have to introduce a notion of 'nearest 
pose on the trajectory', whereas we may have different 
definitions for this. The function E may be stateful or state-
less. A stateful implementation observes the current walking 
task and identifies the expected pose based on walking time 
or virtual odometry. As an example: we could measure the 
walking distance since the start of walking on (Ti) and iden-
tify the pose that has the respective distance from the start. A 
stateless implementation only identifies the nearest trajectory 
point based geometric distance computation. 
We finally need a function A that projects the current ex-
pected pose ahead. 
 

e d
A T
a
a
a
i
y
x
( ), ,
)
,
,
(
 

(10) 
Here, d describes, how much the current expected pose is 
projected ahead in target direction. Figure 3 illustrates the 
idea. 
i
Figure 3.  Idea of regulation-ahead 
We now compute a trajectory sequence (Ri) that brings 
the robot back to the originally planned trajectory. Our ap-
proach is to compute 
 





d 
c
c c
E T
A T
c
TP c c
R
y
x
i
i
y
x
i
) ,
,
,
( ),(
( ),
),
,
,
(
)
(



(11) 
The major benefit: we do not have to introduce a new ap-
proach to plan regulation trajectories, but re-use the function 
TP. One could suggest to bypass regulation trajectories and 
directly compute TP(c, t). However, the pose ahead is much 
closer to the current pose, thus a planning much more effi-
cient. Furthermore, we do not expect obstacles between cur-
rent and ahead pose, as the original path already is planned to 
be obstacle-free. In reality, we can compute (Ri) periodically, 
e.g., twice a second, without noticeable delay. 
We finally have to think about d: 
 
For a small d, we force the robot to walk on sharp 
turns to restore the planned trajectory sequence. 
 
For a large d, the robot walks a long time parallel to 
the planned trajectory before it reaches the meeting 
point. 
 
Both lead to higher costs – either because the path gets 
significantly longer or because the robot walks on positions 
with higher costs, besides the planned trajectory. Figure 4 
illustrates these effects. In this example, we planned a linear 
18
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

trajectory and the real position is besides the linear trajectory 
with distance p, but with correct orientation angle. 
If both p and d are large, usual regulation trajectories 
contain two arcs. If p and d are small, the regulation trajec-
tory may be a spiral that starts in opposite direction, because 
arcs cannot be unlimited tight. This situation is unwanted, as 
the regulation first enlarges the distance to the planned 
trajectory. 
We want to investigate this effect. As a first observation, 
it heavily depends on the walking capabilities, in particular 
the set of primitive trajectories and minimal arc radii, in 
addition the cost function. We thus cannot give a general 
specification of a 'good' d. However, we can provide an idea 
to discover d for a respective scenario. 
Let | (Ri) | be the length of the regulation trajectories. We 
define 
 
d
R
q
 ( i )

(12) 
as the stretch factor. It specifies how much longer the 
regulation path is compared to the planned path. Figure 5 
shows typical curves of q. We used the trajectory planning of 
the Bugbot [13] for this chart. We planned only forward 
walking and penalized a turn in place with high costs. 
Due to the effect presented in Figure 4 (right), small d re-
sult in high q. At a certain point (here at d=40 cm) q is close 
to 1.0. For d>40 cm, we get only minor improvements of q. 
As a result, d=40 cm is a good choice for our setting. 
This is only an example for a certain scenario. If we want 
to discover an appropriate d for other scenarios, we have to 
consider the range of expected position errors (here p), but 
also the expected orientation errors. 
IV. 
EXPERIMENTS 
We implemented our trajectory regulation approach on 
the Bugbot (Figure 6). Bugbot is an 18-DOF hexapod based 
on the Trossen PhantomX Mark III platform. We added a Li-
dar device and further sensors for collision detection. A 
Raspberry PI 3B is used for main computations, e.g., route 
and trajectory planning, SLAM and trajectory regulation. As 
described in [13], the trajectory planning function TP in 
equation (8) can efficiently compute a first trajectory in less 
than 1 ms, even on the Raspberry PI. TP already considers 
obstacle avoidance and can integrate arbitrary cost functions. 
Even though we fully tested the approach on this plat-
form, it was difficult to create a huge number of different ex-
periments in reality. E.g., it is costly to test the slippage 
detection for different floors and different slippage factors. It 
is also a problem to adjust leg-specific slippage in reality in a 
fine-grained manner. We thus created a simulation environ-
ment that simulates the Bugbot on hardware- and physical 
level. A physical simulation component is able to compute 
gravitation, slippage and collision effects. The control soft-
ware is the same as on the real hardware, i.e., the simulator's 
Bugbot model is able to create sensor values and carries out 
native servo commands. 
Figure 7 shows an example to illustrate the effects of 
 
Figure 4.  Effects of large and small d, p 
0
5
10
15
20
25
10
15
20
25
30
35
40
45
50
55
60
65
70
75
80
85
90
95
d
q
p=5
p=10
p=15
p=20
p=25
Figure 5.  Typical stretch factors (d, p in cm) 
 
Figure 6.  The Bugbot 
Figure 7.  Simple walking scenario 
19
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

slippage compensation and regulation. We artificially as-
signed a leg-specific slippage of 2.0 for the three left legs. 
This means, without any compensation, the robot walks a left 
arc when planned to walk right (Figure 7 top, left). With slip-
page detection and compensation, the shape of the planned 
path is mainly represented. But because the compensation is 
applied not before a small learning phase, the shape is ro-
tated at the beginning (Figure 7 top, right). 
Figure 7 bottom shows the regulation. On the left we see 
an effect when the regulation tries to meet the planned path. 
Because the regulation trajectories are not executed properly, 
we see a constant offset. On the right, we finally see both 
mechanisms – after a learning phase, the planned trajectory 
is reproduced very precisely. 
Figure 8 shows a more complex example. Here we as-
signed again a leg-specific slippage of 2.0 and in addition a 
general slippage of 2.0. This represents a very difficult 
scenario. In the execution, both mechanisms were applied. 
We can see a great congruence of planned and walked path.  
V. 
CONCLUSIONS 
This paper presented an approach to the path following 
problem for multipods. We formalized gaits and introduced 
virtual odometry to abstract from the respective leg configu-
ration. Slippage detection and compensation is used to map 
planned trajectories to movement commands that are exe-
cuted more precisely. We compute regulation trajectories 
with the help of efficient trajectory planning already used for 
long-range path planning to the final target. 
The look-ahead distance currently is based on the devel-
oper's experience. Whereas small distances may lead to 
instabilities, larger distances only increase the time to meet 
the planned path and increase the cost value, thus are less 
critical. However, in the future we also want to make the 
ahead-distance as part of the controllable state.  
REFERENCES 
[1] S. Blažič, “A novel trajectory-tracking control law for 
wheeled mobile robots”, Robotics and Autonomous Systems 
59, 2011, pp. 1001–1007 
[2] R. W. Brockett, “Asymptotic stability and feedback stabiliza-
tion", in R. W. Brockett, R. S. Millman, and H. J. Sussmann, 
(eds.), Differential geometric control theory, Birkhauser, 
Boston, 1983, pp. 181–191 
[3] S. Choi, J. Y. Lee, and W. Yu, “Comparison between Position 
and Posture Recovery in Path Following”, 6th Intern. Conf. on 
Ubiquitous Robots and Ambient Intelligence (URAI), 2009 
[4] D. Dacic, D. Nesic, and P. Kokotovic, “Path-following for 
nonlinear systems with unstable zero dynamics”, IEEE Trans. 
Autom. Control, Vol. 52, No. 3, 2007, pp. 481–487 
[5] H. Deng, G. Xin, G. Zhong, and M. Mistry, “Gait and 
trajectory rolling planning and control of hexapod robots for 
disaster rescue applications”, Robotics and Autonomous 
Systems, 2017, pp. 13–24 
[6] T. I. Fossen, K. Y. Pettersen, and R. Galeazzi, “Line-of-Sight 
Path Following for Dubins Paths With Adaptive Sideslip 
Compensation of Drift Forces”, IEEE Trans. on Control 
Systems Technology, Vol. 23, No. 2, March 2015 
[7] J. W. Gibbs, “Elements of Vector Analysis”, New Haven, 
1884 
[8] T. M. Howard, R. A. Knepper, and A. Kelly, “Constrained 
Optimization Path Following of Wheeled Robots in Natural 
Terrain”, in O. Khatib, V. Kumar, and D. Rus (eds.) Ex-
perimental Robotics. Springer Tracts in Advanced Robotics, 
Vol 39. Springer, 2008 
[9] K. Kanjanawanishkul, M. Hofmeister, and A. Zell, “Path 
Following with an Optimal Forward Velocity for a Mobile 
Robot”, Elsevier IFAC Proceedings Volumes, Vol. 43, No. 
16, 2010, pp. 19–24 
[10] L. Ojeda, D. Cruz, G. Reina, and J. Borenstein, “Current-
Based Slippage Detection and Odometry Correction for 
Mobile, Robots and Planetary Rovers”, IEEE Trans. on 
Robotics, Vol. 22, No. 2, April 2006 
[11] A. Morro, A. Sgorbissa, and R. Zaccaria, “Path following for 
unicycle robots with an arbitrary path curvature”, IEEE Trans. 
Robot., Vol. 27, No. 5, 2011, pp. 1016–1023 
[12] J. E. Normey-Rico, J. Gómez-Ortega, and E. F. Camacho, “A 
Smith-predictor-based generalised predictive controller for 
mobile robot path-tracking”, Control Engineering Practice 
7(6), 1999¸ pp. 729–740 
[13] J. Roth, “A Viterbi-like Approach for Trajectory Planning 
with Different Maneuvers”, 15th International Conference on 
Intelligent Autonomous Systems (IAS-15), June 11-15, 2018, 
Baden-Baden, Germany, pp. 3–14 
[14] J. Roth, “Systematic and Complete Enumeration of Statically 
Stable Multipod Gaits”, to be published 
[15] J. J. E. Slotine, “Sliding controller design for nonlinear 
systems”, Int. J. Control, 40, 1984, pp. 421–434 
[16] C. C. Ward and K. Iagnemma, “Model-Based Wheel Slip De-
tection for Outdoor Mobile Robots”, IEEE Intern. Conf. on 
Robotics and Automation Rome, Italy, April 10-14 2007 
[17] R. Wallace, A. Stentz, C. E. Thorpe, H. Moravec, W. 
Whittaker, and T. Kanade, “First results in robot road-
following”, Proc. of the 9th Intern. Joint Confe. on Artificial 
Intelligence (IJCAI ’85), Vol. 1 , Los Angeles, Calif, USA, 
Aug. 1985, pp. 66–71 
[18] P. Walters, R. Kamalapurkar, L. Andrews, and W. E. Dixon, 
“Online Approximate Optimal Path-Following for a Mobile 
Robot”, 53rd IEEE Conference on Decision and Control 
December 15-17, 2014. Los Angeles, California, USA 
[19] M. S. Wiig, W. Caharija, T. R. Krogstad, and K. Y. Pettersen, 
“Integral Line-of-Sight Guidance of Underwater Vehicles 
Without Neutral Buoyancy”, Elsevier, IFAC-Papers Online, 
Vol. 49, No. 23, 2016, pp. 590–597 
[20] J.-M. Yang and J.-H. Kim, “Sliding Mode Control for 
Trajectory Tracking of Nonholonomic Wheeled Mobile 
Robots”, Proc. 1998 IEEE International Conference on 
Robotics and Automation 
 
Figure 8.  Complex walking scenario 
20
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-706-1
ADAPTIVE 2019 : The Eleventh International Conference on Adaptive and Self-Adaptive Systems and Applications

