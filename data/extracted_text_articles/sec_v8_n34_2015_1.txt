109
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Terminal Virtualization Framework for Mobile Services
 
Tao Zheng, Song Dong 
Orange Labs International Center 
Beijing, China 
e-mail: {tao.zheng | song.dong}@orange.com 
 
 
Abstract 
- 
Terminal 
virtualization 
focuses 
on 
applying 
Information Technology (IT) virtualization technology to the 
terminals, and realizes the full or parts of terminal functions 
extension or migration to other devices on the network, such as 
resource reducing, information sharing, data synchronization, etc. 
It is becoming increasingly clear that more and more features of 
terminal virtualization and mobile computing on the edge will be 
used in practice. However, some issues are raised with terminal 
virtualization, such as security, privacy, Quality of Service (QoS), 
efficient 
transmission, 
computation/functions 
offloading 
management, etc. In this paper, after analyzing above issues, a 
mobile terminal virtualization framework is proposed to solve 
them. Then the implementation methods of the proposed 
framework modules are presented in detail, which are based on 
popular the terminal Operating System (OS) and some current 
technologies. This framework provides a better transparent 
experience to users from free handover on network to unified 
sensors usage.  
Keywords - terminal virtualization; mobile cloud computing; 
computation offloading; QoS; Content Centric Networking (CCN); 
fountain code; Quality of Experience (QoE). 
I. 
 INTRODUCTION 
This paper extends our earlier work [1] presented at the 
Eleventh International Conference on Networking and Services 
(ICNS 2015).  
With the explosive growth of mobile terminals in recent 
years, user preferences have shifted from traditional cell 
phones and laptops to smartphones and tablets. In recent years, 
there are abundant applications in various categories, such as 
entertainment, health, games, business, social networking, 
travel and news, running at mobile terminals. The burden of 
computation on the terminals has been raised rapidly and more 
functions and sensors are required to be applied to them. 
Mobile cloud computing and terminal virtualization are 
proposed to handle these issues, which are able to provide tools 
to the user when and where it is needed irrespective of user 
movement, hence supporting location independence. Indeed, 
“mobility” is one of the characteristics of a pervasive 
computing environment where the user is able to continue ones 
work seamlessly regardless of the movement. 
Advances in the portability and capability of mobile 
terminals, together with widespread Long Term Evolution 
(LTE) networks and WiFi access, have brought rich mobile 
application experiences to end users. Undoubtedly, mobile 
broadband terminals, such as smart phones, tablets, wireless 
dongles and some data-intensive apps have caused an 
exponential increase in mobile Internet Protocol (IP) data usage, 
and they use up the mobile bandwidth. The demand for 
ubiquitous access to a wealth of media content and services 
will continue to increase, as indicated in a report by Cisco  [2]: 
the Compound Average Growth Rate (CAGR) of global IP 
traffic from mobile terminals is 57% from 2014 to 2019, which 
is triple CAGR from fixed Internet. 
In addition, the resource-constrained mobile terminals, 
especially with limited battery life, have been a barrier to the 
improvements of mobile applications and services. While new 
smart phones with bigger screens, faster Central Processing 
Units (CPUs), and larger storage are launched continually, and 
the bandwidth of wireless networks has increased hundreds of 
times 
from 
the 
second-generation 
wireless 
telephone 
technology to the fourth-generation wireless telephone 
technology in just a few years, the development of batteries has 
lagged far behind the development of other components in 
mobile terminals. In fact, faster CPUs, larger displays and 
multimedia applications consume more battery energy. The 
limitations of computation resources and sensors are other 
stumbling blocks for services development. Mobile cloud 
computing and terminal virtualization can help to resolve this 
issue. 
Mobile cloud computing and terminal virtualization have 
been the leading technology trends in recent years. The 
increasing usage of mobile computing is evident in the study 
by Juniper Research, which states that the consumer and 
enterprise market for cloud-based mobile applications is 
expected to rise to $9.5 billion by 2014  [3]. Mobile cloud 
computing/terminal virtualization is introduced to resolve the 
conflicts mentioned above, where the cloud serves as a 
powerful complement to resource-constrained mobile terminals. 
Rather than executing all computational and data operations 
locally, mobile cloud computing/terminal virtualization takes 
advantage of the abundant resources in cloud platforms to 
gather, store, and process data for mobile terminals. Many 
popular mobile applications have actually employed cloud 
computing to provide enhanced services. More innovative 
cloud-based mobile applications like healthcare monitoring and 
multiplayer online mobile games are also under development.  
The objective of the paper is to introduce the concept of 
terminal virtualization and study the related issues and research 
status. On this basis, a proposal terminal virtualization 
framework is finally presented and discussed on the 
implementation. This framework provides a better transparent 
experience to users through utilizing various techniques and 
based on the current terminal OS. 

110
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
This paper is organized as follows. In Section II, we 
introduce the concept and current status of terminal 
virtualization. In Section III, capabilities and functions 
extension are analyzed. In Section IV, a terminal virtualization 
framework for mobile networks is presented. Implementation 
method of the proposed framework in detail is presented in 
Section V. Finally, Section VI summarizes the conclusions. 
II. 
TERMINAL VIRTUALIZATION 
Terminal virtualization helps to relieve the local resource-
constrained problem through offloading some tasks to the 
cloud and utilizing capabilities and functions in the cloud. First, 
the scope of terminal virtualization needs to be clarified. Then, 
drivers and benefits are proposed. Finally, some challenges are 
raised by terminal virtualization. 
A. The scope of terminal virtualization 
From the virtualization point of view, mobile cloud 
computing can support a part of terminal virtualization scenario. 
There are two scenarios as following. 
 
Full Virtualization Scenario 
The requirement for full terminal virtualization mainly 
comes from some enterprises. In these enterprises, employees 
are buying their own terminals and want to connect to the 
enterprise network so that they can do their work with greater 
flexibility. However, the employees also do not want to give up 
user experience and freedom at the cost of complex IT security 
policies. In order to achieve this goal, terminal virtualization is 
becoming a very attractive choice because it offers flexibility 
and addresses the concerns over privacy of personal data while 
also delivering the security requirements of the enterprise. On 
the other side of the ecosystem, the terminal makers and 
carriers will benefit from terminal virtualization because they 
are able to more easily replicate the features found in various 
terminals and also deliver more features at a lower cost.  
Full terminal virtualization is not an ordinary schema for 
public mobile customers. In general way, the terminal is sold 
with a pre-determined OS and customers can use services 
based on this OS. 
 
Partial Virtualization Scenario 
Broadly speaking, mobile cloud computing can be as one 
kind of partial terminal virtualization, a part of terminal 
computation powers and functions can be virtualized into the 
remote networked cloud. Terminals can get local experience 
through running remote apps or some information located in 
the remote cloud. 
This scenario is more practiced and popular at present. 
Some applications employ this method to add enhanced 
functions or improve user experience. Even cloud phone 
appears and is deeply merged with networking services for user 
convenience. In this paper, we mainly focus on the partial 
virtualization scenario. 
B. Drivers and benefits of terminal virtualization 
Terminal virtualization facilitated the fusion of mobile 
terminal and cloud service that provides a platform wherein 
some computing, storing and data abstraction tasks are 
performed by the cloud and mobile terminal simply seeks an 
access to them. In the following, we show the drivers and 
benefits of terminal virtualization. 
 
Limitless Storage Space 
Now, instead of memory cards for more space, the cloud 
storage can provide limitless space for applications, even with 
the help of terminal virtualization framework/middleware they 
do not need to care about the location of the storage. 
 
Improved Processing Facility 
The price of a mobile terminal is largely dependent on its 
CPU’s speed and performance. With the help of terminal 
virtualization, all the extensive and complex processing is done 
at the cloud level, thereby enhancing the mobile terminal’s 
performance without upgrading the terminal’s CPU. 
 
Save Radio Access Network (RAN)/Access Bandwidth 
& Resources 
With the tremendous increase in mobile bandwidth 
consumers and user’s throughput, RAN/access resources have 
become more valuable than before. When some functions and 
computation tasks are offloaded into cloud, the result instead of 
the original metrical is sent to the terminal, so the RAN/access 
bandwidth can be saved for other use. 
 
Enhanced Battery Life 
Terminal virtualization lends a very strong helping hand to 
battery life of terminals. With most of the processing handled 
by the cloud, the battery life is enhanced, thereby making the 
most optimum use of the remaining recharge cycles. 
 
Improved User Experience 
The above mentioned features will improve the end-user 
experience substantially, especially the experience from low-
end terminals. 
 
Economic Factors 
For the consumers, terminal virtualization can bring some 
new functions and improved capabilities to the old terminal 
without spending one penny. For operators, the benefits come 
from saved network resources and flexible service deployment 
by terminal virtualization. 
 
Reserving for Upcoming Technologies 
Terminal virtualization is adapted to the tremendous pace 
of development technologies and works most efficiently with 
the upgrades. Through separating the implementation from the 
function body, upcoming technologies can be easily introduced 
to the terminals. 
C. Challenges 
In this section, we argue that some issues in terminal 
virtualization have not been sufficiently solved satisfactorily. 

111
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Energy-efficient Transmission 
Wireless networks are stochastic in nature: not only the 
availability and network capacity of access points vary from 
place to place, but the downlink and uplink bandwidth also 
fluctuates due to weather, building/geographical shields, 
terminal mobility, and so on. Measurement studies [4] show 
that the energy consumption for transmitting a fixed amount of 
data is inversely proportional to the available bandwidth.  
Computation/Data offloading can save energy only if heavy 
computation is needed and a relatively small amount of data 
has to be transferred. Energy efficiency can be substantially 
improved if the cloud stores the data required for computation, 
reducing data transmission overhead. Bandwidth allocation and 
admission control mechanisms in cellular base stations and 
access points may guarantee network connectivity to a certain 
extent, but cannot eliminate the stochastic nature of wireless 
links. An alternative approach is to dynamically adjust 
application partitioning between the cloud and mobile 
terminals according to network conditions, although it is 
challenging to quickly and accurately estimate the network 
connectivity with low overhead. 
Energy-efficient transmission is also critical when 
exploiting the cloud to extend the capabilities of mobile 
terminals. Frequent transmissions in bad connectivity will 
overly consume energy, making the extended capabilities 
unattractive, as battery life is always the top concern of mobile 
users. A solution called eTime  [5] is to adaptively seize the 
timing opportunity when network connectivity is good to pre-
fetch frequently used data while deferring delay-tolerant data.  
 
Security 
There are several aspects of terminal virtualization security, 
including antivirus, authentication, data protection, and digital 
rights management. Security vulnerability can cause serious 
problems, including property damage, cloud vendor economic 
loss, and user distrust. Since mobile terminals are resource-
constrained, locally executed antivirus software can hardly 
protect them from threats efficiently. A current solution is to 
offload the threat detection functionality to the cloud. 
Nevertheless, since a pure cloud antivirus relies on cloud 
resources, it is difficult to deal with malware that can block the 
terminal’s Internet connection. 
Besides, authentication is critical for access to sensitive 
information, such as bank accounts and confidential files. With 
constrained text input on mobile terminals, users tend to use 
simple passwords, making mobile applications more vulnerable 
to authentication threats. To solve this issue, Chow et al.  [6] 
build up an authorization platform where users are identified by 
their habits (e.g., calling patterns, location information, and 
web access). The platform routinely records user behavior 
information. When a server receives an authorization request, it 
redirects the request to an authorization engine, which uses the 
aggregated behavior information and an authorization policy to 
decide whether to accept the request or not. 
 
 
 
Privacy 
Since mobile terminals are usually personal items, privacy 
must be considered when leveraging the cloud to store and 
process their confidential data remotely.  
A secure data processing framework [7] can be used into 
terminal virtualization, where critical data are protected by the 
unique encryption key generated from the user’s trusted 
authority and stored in an area named Extended Semi-Shadow 
Image isolated from the public domain. Even when storage is 
breached in the cloud, unauthorized parties including the cloud 
vendor cannot obtain the private data.  
Another particular privacy issue for mobile users is the 
leakage of personal location information in location-based 
services. To address the issue, a method called “location 
cloaking” [8] makes user location data slightly imprecise 
before submitting them to the cloud . But the imprecise data 
sometimes cannot provide relevant or satisfactory results to 
users in certain applications. Therefore, location cloaking 
should be adaptively tuned to balance the trade-off between 
privacy and result accuracy. 
 
Real-time Requirements and Service QoS 
When terminal virtualization and mobile computing are 
applied, QoS will become more important. How to guarantee 
the related data or stream to be transmitted in time determinates 
the services’ failure or success.  
While different applications offer different functionality to 
end users, the primary service Key Quality Indicators (KQIs) 
across the application’s customer facing service boundary for 
end users of applications generally include service availability, 
service latency, service reliability, service accessibility, service 
throughput, 
and 
application 
specific 
service 
quality 
measurements. 
III. 
COMPUTATION OFFLOADING  & FUNCTIONS EXTENSION  
Terminal 
virtualization 
enables 
enhanced 
mobile 
experiences that were previously impossible on resource-
constrained and function-constrained mobile terminals. Many 
commercial mobile applications use the cloud to bring about 
rich features. They usually employ a client-server framework 
that consists of two parts, which run on the mobile terminal and 
the cloud, respectively. Essentially, cloud computing helps 
extend the capabilities and functions of mobile terminals in 
some aspects. 
A. Capabilities & Functions extension 
Through terminal virtualization, the capabilities and 
functions can be reallocated between terminal and cloud, as 
shown in the following examples 
 
Computation-intensive Task  
At 
present, 
many 
applications 
nowadays 
support 
speech/picture/video recognition. The models for recognition 
and high-quality synthesis must be trained with millions of 
samples in thousands of examples. This computation-intensive 
task is infeasible on a mobile terminal and should be offloaded 
to the cloud.  

112
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Figure 1.  The procedure of computation offloading 
 
 
Remote Sensors/Inductors 
Because of the limitation from terminal itself (low-end 
model lacking some sensors or inductors) or other conditions 
(e.g., distance exceeding the maximum length of sensors), 
some services cannot work well. However, these services can 
work through getting and storing related information from 
mobile cloud platform. From the terminal point of view, its 
functions are extended. 
 
Application Portability 
It allows for the rapid transfer of applications (which may 
occur on the fly), providing the freedom to optimize, without 
the constraints of the location and required resources of the 
virtual appliances. The precise but extensible definition of the 
services provided by the application platform is the key to 
ensuring application portability.  
B. Computation offloading Decision 
To overcome resource constraints on mobile terminals, a 
general idea is to offload parts of resource-intensive tasks to the 
cloud (centralized server or other peers). Since execution in the 
cloud is considerably faster than that on mobile terminals, it is 
worth shipping code and data to the cloud and back to prolong 
the battery life and speed up the application. This offloading 
procedure is illustrated in Fig. 1. The application will be 
separated to several computation units/tasks according to 
functions or calling relations. Then some of the computation 
units/tasks will be offloaded to could devices to be executed 
remotely. At last, the executing results will be returned to the 
terminal as if the total application is executed locally.   
There are several technologies to realize the runtime 
environment in the cloud, and the major differences between 
offloading techniques lie in the offloading unit and partitioning 
strategies. 
 
Client–Server Communication Mechanism 
In 
the 
Client–Server 
Communication, 
process 
communication is done across the mobile terminal and cloud 
server via protocols, such as Remote Procedure Calls (RPC), 
Remote Method Invocation (RMI) and Sockets. Both RPC and 
RMI have well supported APIs and are considered stable by 
developers. However, offloading through these two methods 
means that services need to have been pre-installed in the 
participating terminals.  
Spectra  [9] and Chroma [10] are the examples of systems 
that use pre-installed services reachable via RPC to offload 
computation. Hyrax [11] has been presented for Android 
smartphone applications, which are distributed both in terms of 
data and computation based on Hadoop ported to the Android 
platform. Another framework based on Hadoop is presented 
in  [12], for a virtual mobile cloud focusing on common goals 
where mobile terminal are considered as resource providers. 
Cuckoo  [13] presents a system to offload mobile terminal 
applications onto a cloud using a Java stub/proxy model. The 
Mobile Message Passing Interface (MMPI) framework [14] is a 
mobile version of the standard Message Passing Interface (MPI) 
over Bluetooth where mobile terminals function as fellow 
resource providers. 
 
Mobile Agent 
Scavenger [15] is another framework that employs cyber-
foraging using WiFi for connectivity, and uses a mobile code 
approach to partition and distribute jobs. Using its framework, 
it is possible for a mobile terminal to offload to one or more 
agents and its tests show that running the application on 
multiples in parallel is more efficient in terms of performance. 
However, the fault tolerance mechanism is not discussed and 
since its method is strictly about offloading on agents and not 
sharing, it is not really dynamic. Also, its agents are all 
desktops and it is unclear if Scavenger is too heavy to run on 
mobile phones. 
 
Virtualization/Virtual Machine (VM) Migration 
The execution cannot be stopped when transferring the 
memory image of a VM from a source terminal to the 
destination server  [16]. In such a live migration, the memory 
pages of the VM are pre-copied without interrupting the OS or 
any of its applications, thereby providing a seamless migration. 
However, VM migration is somewhat time-consuming and the 
workload could prove to be heavy for mobile terminals.  
VM migration is used by a majority of frameworks, 
including Cloudlets [17], Maui [18], CloneCloud [19], and 
MobiCloud [20]. Virtualization greatly reduces the burden on 
the programmer, since very little or no rewriting of applications 
is required. However, full virtualization with automatic 
partitioning is unlikely to produce the same fine grained 
optimizations as that of hand coded applications, although 
rewriting each and every application for code offload is also 
not practical. Maui actually does not rely on pure VM 
migration as done in CloneCloud and Cloudlets, but uses a 
combination of VM migration and programmatic partitioning. 
However, in cases where the mobile terminal user is within 
range of an agent terminal for a few minutes, using VM 
migration may prove to be too heavyweight, as is pointed out 
by Kristensen  [15], which uses mobile agents in light of its 
suitability in a dynamic mobile environment. 

113
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Figure 2.  Hierarchical structure of the framework 
C. Applications 
The following lists the current applications using terminal 
virtualization concept, from functions extension to complex 
computing tasks.  
 
Mobile Cloud Phone 
Mobile cloud phone differs from other smart phones in that 
it does not need to download and store apps and content on the 
phone; it instead accesses personal information and runs 
programs stored on remote network servers, via the cloud. 
YunOS 3.0 [21], developed by Alibaba, debuts officially 
with cloud-based service for movie, taxi and other reservations 
on October 20th, 2014. It comes with the brand new service 
Cloud Card, which runs entirely in the cloud and offers the user 
the option to select movie tickets, taxi services and more. 
 
Cloud Storage and Video Adaption 
Through terminal virtualization, some part of data that is 
stored in the cloud instead of stored on the terminal can be 
treated as local data. And video stored in cloud platform can be 
adapted to appropriate format and code streaming fitting for the 
terminal when the terminal requests this video. 
 
Image and Natural Language Processing 
For this kind of applications, the complex computation jobs, 
which are difficult for local operating OS, should be offloaded 
to the cloud platform and the mobile terminal just holds some 
interface functions. Image and voice recognition, search, 
adaption, 
natural 
language 
translation, 
and 
Artificial 
Intelligence (AI) machine conversation, etc., which belong to 
this kind of applications, can be implemented on some low-end 
phones with the help of computation offloading. 
 
Augmented Reality (AR) 
Algorithms in augmented reality are mostly resource and 
computation-intensive, posing challenges to resource-poor 
mobile devices. These applications can integrate the power of 
the cloud to handle complex processing of augmented reality 
tasks. Specifically, data streams of the sensors on a mobile 
device can be directed to the cloud for processing, and the 
processed data streams are then redirected back to the device. It 
should be noted that AR applications demand low latency to 
provide a life-like experience.  
IV. 
PROPOSED FRAMEWORK FOR MOBILE SERVICES 
This section proposes a mobile terminal virtualization 
framework based on mobile OS. The framework locates in the 
middleware layer between OS kernel and applications, as 
shown in Fig. 2, which proxies the calls between the apps and 
the OS and provides the virtualization function to apps using 
networks, remote cloud platforms and services through OS, 
hardware and network.  
A. The framework overview 
The framework illustrated in Fig. 3 is composed of four 
processing 
modules: 
application 
virtualization 
module, 
computation virtualization module, storage virtualization 
module and network virtualization module, and a management 
module. 
In the framework, processing modules are in charge of 
receiving and responding the callings from applications to OS. 
Management module is used to manage the framework, 
including security management, configuration management, 
network and cloud service monitoring, etc.    
B. Component Modules  
As shown in Fig. 3, the processing modules are able to 
choose the best method to process the calling according to the 
current status of mobile network bandwidth, local resources, 
terminals hardware limitation and remote cloud resources. 
Meanwhile, the framework provides local calling responses to 
the applications and shields the actual calling responses. 
 
Application Virtualization Module 
This module is in charge of processing the functions 
extension of applications. When the application accesses the 
terminal’s hardware, for example one kind of sensor, this 
module will check if it is available. If not, this module is 
responsible for finding a same remote available sensor in the 
cloud to satisfy the application’s demand and providing the 
response with the result from the remote sensor to the 
application. 
 
 
Figure 3.  The functions of processing modules 

114
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Computation Virtualization Module 
This module takes charge of monitoring the terminal’s 
computation resource and analyzing the computation request 
from applications. When the computation resource is 
constrained (for example, the CPU usage is more than 85%) or 
some applications with sophisticated computing power are run 
(for example, virtual reality service, language processing, etc., 
it can be configured in advance), this module will offload some 
computation tasks to the remote cloud server and provide the 
processing result to the applications. 
 
Storage Virtualization Module 
This module is in charge of monitoring the terminal’s 
storage resource and providing the remote cloud storage to 
applications. Through this module, the local applications can 
use cloud storage provided by different Service Providers (SPs), 
such as Baidu, Tencent, Huawei, etc., as using a local storage. 
At the same time, this module monitors the speed and status of 
the remote cloud storages and provides the best one to 
applications.   
 
Network Virtualization Module 
This module is in charge of monitoring the terminal’s 
network status and providing the best one or binding different 
network accesses to increase the data throughput according to 
the applications’ demand.  
 
Management Module 
The management module is responsible for managing the 
framework. The security function including network security 
and resources security is an important function in this module. 
Other management functions include all kinds of configuration 
management, for example, some resources and offloading 
thresholds, and remote resource monitoring, for example, all 
kinds of cloud services, network status. 
V. 
FRAMEWORK IMPLEMENTATION 
We are implementing an early-phase prototype based on 
Android OS according to the proposed framework in our lab. 
The following part discusses the implementation of the 
modules, where network virtualization module and the storage 
virtualization module are relatively easier to be implemented 
than other three modules in the framework.  
 
 
Figure 4.  The overview of network virtualization function 
 
A. Network Virtualization Implementation 
Network virtualization means that services and applications 
just make the networking call and do not have to be concerned 
with the details of network environment, e.g., the network type 
(WiFi/3G/4G), the network failure and recovery, how to use 
multiple network paths (priority/traffic offloading) .  
The network virtualization module employed a method [22] 
to implement the network access independence, for example, 
using multiple access paths simultaneously, switching between 
access paths according to the current network environment, and 
recovering the access path automatically. A local proxy in 
terminal and a remote proxy in network cooperate to 
implement the functions of network virtualization module. And 
the applications and services are able to automatically adapt the 
change of network and are not affected by it. 
The system overview is illustrated in Fig. 4. It is composed 
of terminal local proxy and remote proxy. A local proxy built 
in the terminal is responsible for relaying the conversation 
between applications and network. The remote proxy 
exchanges Data packets with the local proxy through the 
Transmission Control Protocol (TCP) or User Datagram 
Protocol (UDP) based tunnel established over multiple 
heterogeneous links in the content centric way.  
The remote proxy fetches the content from the outer server 
in the Internet to satisfy the terminal’s request. The main 
reason for using two proxies is that the tunnel between the two 
proxies can help Content Centric data stream penetrate the 
network. 
The working environment can be IPv4 or IPv6. In IPv6 
network, the remote proxy can be assigned with different IPv6 
addresses including unicast address, multicast address and 
anycast address. Given the unicast address, the terminal 
establishes the tunnel with the single specific remote proxy. 
The multicast addressing refers to the configuration where the 
terminal can set up the tunnels concurrently connecting the 
collection of remote proxies. The anycast addressing makes the 
terminal build the tunnel to the nearest remote proxy among 
several candidates. 
Since the service session in the scheme is identified with 
the Uniform Resource Identifier (URI) that is independent of 
the IP addresses associated with the different connections to the 
network, the terminal can keep the ongoing session alive as 
long as the content identifier is invariant. The dynamics due to 
the connection switching in the mobile scenario is only visible 
in the tunnel running over the TCP or UDP sessions managed 
by the local proxy. 
CCN is an alternative approach to the architecture of 
networks, which was proposed by Xerox PARC within the 
Content Centric Networking (CCNx) [23] project. From the 
network perspective, in CCN, network entities in ordinary 
network are replayed by data entities. 
Unlike state-of-the-art multi-path approaches such as Multi-
Path Transmission Control Protocol (MP-TCP), CCN can help 
us to hide some network control implementing details with the 
help of the ‘connection-less’ nature of CCN. In the network 
virtualization solution, we utilize the CCN concept rather than 

115
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
CCN protocol, thus it is not necessary to consider the change of 
network access paths through fountain codes to encapsulate 
data packets.  
The service session coupling with the remote proxy avoids 
the problem of Domain Name System (DNS) resolution 
potentially confronted with the multi-homed terminal. Since the 
remote proxy acts as the agent of the terminal for content 
acquisition, the terminal has no need for DNS resolution except 
to forward the request message to the remote proxy. The update 
on the access router is additionally not mandatory anymore 
because the conversion between IP address and URI is 
executed in the sense of application layer. 
In this solution, fountain codes are used to transport data 
packets between two proxies. The reasons of choosing fountain 
codes as the encapsulation technology are shown as follows. 
Fountain codes are rateless in the sense that the number of 
encoded packets that can be generated from the source message 
is potentially limitless. Regardless of the statistics of the 
erasure events on the channel, the source data can be decoded 
from any set of K’ encoded packets, for K’ slightly larger than 
K. Fountain codes can also have very small encoding and 
decoding complexities and automatically adapt the change of 
multiple access paths to avoid the implementation of path 
control details [24]. 
In this module, the source hosts simply transfer as many 
packets with the different coding schemes as possible to the 
destination hosts without concerns over the reordering induced 
in various paths. It increases the data throughput and avoids the 
complicated reconciliation between the multiple paths. 
The local proxy and remote proxy, fountain encoding and 
decoding had been implemented in our lab. The test-bed is 
illustrated in Fig. 5. Because there is no mobile data access in 
the lab, we chose two WiFi interfaces and Access Points (AP) 
to simulate two access paths. On this test-bed, we tested 
various combinations of two access paths and handover 
between them. The data delivery between the laptop and 
Internet cannot be interrupted during the transition among these 
scenarios. The test result validated the feasibility and validity 
of network virtualization solution. 
 
 
Figure 5.  The test-bed for network virtualization 
 
 
Figure 6.  The flowchart of storage virtualization function 
B. Storage Virtualization Implementation 
The storage virtualization module adds online storage 
services/cloud platforms into the system storage as a directory, 
which can be accessed by the applications like a local one. 
When the directory is accessed, the storage virtualization 
module will automatically exchange the data with the online 
storages/cloud platform. Another issue we need to be 
considered is security, including the storage location security 
and the transport security. The detail implementation of 
security is discussed in part E in Section V.  
The flowchart of storage virtualization function is shown in 
Fig. 6.  
When the system storage APIs are called, the usage of local 
storage will determine whether to call the remote storage APIs. 
If the remote storage is called, the confidentiality data will be 
stored in the remote safe platform through secure transmission 
mode (refer to part E) and the data without security 
requirement will be transported to some online storages 
through Internet, such as Baidu, Huawei online storage services.   
C. Application Virtualization Implementation 
To implement application virtualization, some operating 
system calls accessing local hardware need to be intercepted 
and rewritten. The functions to access online hardware resource 
will be added into the application virtualization module. 
For example, some kinds of sensors are supported by 
Android OS, which are defined in APIs. The sensors include 
accelerometer sensor, gravity sensor, gyroscope sensor, light 
sensor, linear acceleration sensor, magnetic field sensor, 
proximity sensor, rotation vector sensor, temperature sensor   
and pressure sensor. The last two sensors are relatively rare in 
most of the terminals. So, the remote sensors can be used to get 
some information for the applications as local calls through the 
application module.  

116
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Figure 7.  Changed sensor framework in application virtualization module 
 
Fig. 7 shows the new sensor framework for terminal 
virtualization. In this framework, the original Sensor Hardware 
Abstraction Layer (HAL) is rewritten. Some new functions are 
added to the new HAL, including determining if remote sensor 
services should be accessed, sending the request to remote 
sensors and receiving the response and updating information. 
The new block, remote sensor manager, is the interface 
between the local system and remote sensor services. It is 
responsible for exchanging the sensor information, including a 
remote sensor list for the local system, and the terminal’s 
Global Position System (GPS) information for remote sensor 
services to acquire the terminal’s position and remote sensor’s 
information corresponding to the terminal's position. 
D. Computation Virtualization Implementation 
In the computation virtualization module, we plan to take 
different approaches according to the type of tasks. For 
example, for the tasks requiring sophisticated computing power 
defined in advance, RPC/RMI method will be used; for the 
independent tasks undefined in advance, virtual machine 
migration will be used.   
Offloading the computation tasks to remote execution can 
be a solution to go over the limitations of mobile terminal’s 
computing power and can be seen as a way for extending 
terminal battery. Remote execution leverages the high 
computation capacity of the server to extend the poor one of 
the terminal and battery through energy savings. Similarly, 
thanks to the increased memory of the remote server, it is 
possible to provide a large set of applications to the mobile user, 
which are difficult to be run on the terminals. 
However, computation offloading is energy efficient only 
under various conditions. It is vital to look at what happened in 
context. So, the computation offloading algorithm is very 
important in the computation virtualization module. 
Maui [18] and CloneCloud [19] can be considered as 
solutions. In Maui, Microsoft’s researchers presented a fine-
grained solution to reduce programmers work by partitioning 
the application code automatically, deciding at runtime which 
methods should be offloaded to be remotely executed. Maui 
formulates the problem as an Integer Linear Programming 
(ILP). A comparison of the energy consumption of three 
applications (face recognition application, video game and 
chess game) pointed out that energy savings from 27% up to 
80% can be achieved. However, this approach works only on 
Microsoft Windows OS and requires only one server serving 
each application, which is not scalable to handle many 
applications.  
In CloneCloud, a more coarse-grained offloading approach 
is proposed that offloading is performed by a modified Dalvik 
VM automatically. Meanwhile, this approach requires pre-
processing on the client side, which can also lead to excessive 
network traffic from the cloud network to the terminal. 
These two approaches do not provide QoE guarantees for 
mobile users in case of computation offloading. Moreover, the 
impact of mobile environment in the matter of quality of radio 
interface according to the position of the end user in the cell 
has not been considered in these solutions.  
A solution named Mobile Application’s Offloading (MAO) 
algorithm was proposed [25], which considers a combination of 
multiple constraints including CPU, State of Charge (SoC) of 
the battery, and bandwidth capacity. MAO also evaluates the 
performance of CPU intensive and I/O interactive applications. 
The objective is to focus on job offloading, which is a 
convenient way to achieve energy consumption optimization if 
certain constraints are satisfied.  
The specificities of MAO algorithm with respect to other 
two offloading algorithms are points out by Table I. “Network 
Conditions” refers to the fluctuated quality of the radio 
interface and “User Mobility” refers to the position of the end 
user within the cell. Compared with Maui and CloneCloud, 
MAO considers all five aspects, such as QoE, user mobility 
and SoC of battery. So, it is more applicable to mobile terminal 
with limited battery. 
 
TABLE I.  
COMPARISON OF COMPUTATION OFFLOADING ALGORITHMS 
Aspects 
QoE 
satisfaction 
Network 
Conditions 
User 
Mobility 
CPU 
SoC 
Maui 
No 
Yes 
No 
Yes 
No 
CloneCloud 
No 
Yes 
No 
Yes 
No 
MAO 
Yes 
Yes 
Yes 
Yes 
Yes 

117
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Figure 8.  The updated MAO algorithm flowchart 
 
Based on the MAO algorithm, we added one aspect, the 
CPU load, and embodied QoE as Round-Trip Time (RTT) to 
the server and access network bandwidth. The updated 
flowchart is shown in Fig. 8.   
E. Security Function Implementation in Management 
Module 
Because the terminal virtualization needs to transport some 
vital information, such as VM, part of application, users’ 
identification related, security issues are very important to 
avoid exposing it to the network directly.  
To implement the security function in the management 
module, the data communication should to be encrypted to 
ensure integrality and confidentiality.  
Therefore, considering these characteristics in this security 
case, a solution based on public-key cryptography is proposed 
[26], also known as asymmetric cryptography. 
 
 
In this solution, the cloud platform is employed as the 
server-side to implement the key management and server-side 
encryption/decryption function.  
When the terminal communicates with the server with 
security transport, the specific steps are described below. Fig. 9 
and Fig. 10 show the steps of the security function. 
Uplink (from the terminal to the server) 
Step 1: the server in the cloud platform generates public 
key and private key and sends the public key to the Operation 
Administration and Maintenance (OAM).  
Step 2: when the terminal needs to communicate safely 
with the server, the terminal gets the public key of the server 
from OAM. Then the terminal first generates a MD5 [27] of 
the sending information for the server to validate the integrality 
of it. Next, the terminal encrypts the sending information and 
MD5 digest using the public key of the server. 
Step 3: the terminal sends the encrypted packet to the 
server through the network. 
Step 4: the server decrypts the packet received using its 
private key; 
Step 5: the server generates its own MD5 of the decrypted 
information and compares it with the MD5 received from the 
terminal to determine the integrality of the packet received. If 
the two MD5s are equal, the information received is reliable. 
Otherwise, the information has been tampered and should be 
discarded and retransmitted.  
 
 
Figure 9.  The uplink steps of the security function 

118
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
 
Figure 10.  The downlink steps of the security function 
 
Downlink (from the server to the terminal) 
Step 1: the terminal generates public key and private key 
after it boots and sends the public key to the OAM.  
Step 2: when the server needs to communicate safely with 
the terminal, the server gets the public key of the terminal from 
OAM. Then the server first generates a MD5 of the sending 
information for the terminal to validate the integrality of it. 
Next, the server encrypts the sending information and MD5 
digest using the public key of the terminal. 
Step 3: the server sends the encrypted packet to the 
terminal through the network. 
Step 4: the terminal decrypts the packet received using its 
private key; 
Step 5: the terminal generates its own MD5 of the 
decrypted information and compares it with the MD5 received 
from the server to determine the integrality of the packet 
received. If the two MD5s are equal, the information received 
is reliable. Otherwise, the information has been tampered and 
should be discarded and retransmitted. 
VI. 
CONCLUSION AND FUTURE WORK 
Terminal virtualization has overlapped with some areas, 
such as mobile peer-to-peer computing, application partitioning, 
and context-aware computing, but it still has its own unique 
challenges. There is still a long way to go before terminal 
virtualization is widely used.  
In this paper, we try to build up a unified framework to 
cover all aspects of terminal virtualization using current 
technologies and platforms. We analyze some aspects of 
current terminal virtualization, highlight the motivation for it, 
and present its functions, applications and some challenges. 
And on this basis, we proposed a terminal virtualization 
framework for mobile services. In this framework, four 
processing modules and one management module are 
employed to handle the resource requests from apps and shield 
the details for accessing cloud services. Then we gave some 
implementation details of these modules.  
In the future work, we shall consider analyzing the 
performance of the prototype in this framework, and give some 
improved recommendations on the performance. 
REFERENCES 
[1] T. Zheng and S. Dong, “Terminal Virtualization for Mobile Services,” 
ICNS 2015, pp. 31-37. 
[2] “Cisco Visual Networking Index: Forecast and Methodology, 2014–
2019,” 
http://www.cisco.com/c/en/us/solutions/collateral/service-
provider/ip-ngn-ip-next-generation-network/white_paper_c11-
481360.html, May 2015. 
[3] “Mobile Cloud Applications & Services,” Juniper Research, 2010. 
[4] N. Balasubramanian, A. Balasubramanian, and A. Venkataramani,  
“Energy Consumption in Mobile Phones: a Measurement Study and 
Implications for Network Applications,” Proc. ACM IMC, 2009, pp. 
280-293. 
[5] P. Shu, F Liu, H. Jin, M. Chen, F. Wen, and Y. Qu, “eTime: Energy-
Efficient Transmission between Cloud and Mobile Devices,” Proc. IEEE 
INFOCOM, 2013, pp. 195-199.  
[6] R. Chow et al., “Authentication in the Clouds: a Framework and Its 
Application to Mobile Users,” Proc. ACM Cloud Computing Security 
Wksp. 2010, pp. 1-6. 
[7] D. Huang, Z.Zhou, L. Xu, T. Xing, and Y. Zhong, “Secure Data 
Processing Framework for Mobile Cloud Computing,” Proc. IEEE 
INFOCOM, 2011, pp. 614-618. 
[8] R. Cheng, Y. Zhang, E. Bertino, and S. Prabhakar, “Preserving User 
Location Privacy in Mobile Data Management Infrastructures,” Proc. 
Wksp. Privacy Enhancing Technologies, 2006, pp. 393-412. 
[9] J. Flinn, S. Park, and M. Satyanarayanan, “Balancing performance, 
energy, and quality in pervasive computing,” Proc. IEEE ICDCS 2002, 
pp. 217-226. 
[10] R. Balan, M. Satayanarayanan, S. Park, and T. Okoshi, “Tactics-based 
remote execution for mobile computing,” Proc. ACM Mobisys, 2003, pp. 
273-286. 
[11] E. E. Marinelli, “Hyrax: cloud computing on mobile devices using 
MapReduce,” Masters Thesis, Carnegie Mellon University, 2009. 
[12] G. Huerta-Canepa, and D. Lee, “A virtual cloud computing provider for 
mobile devices,” Proc. ACM MCS 2010, article No. 6. 
[13] R. Kemp, N. Palmer, T. Kielmann, and H. Bal, “Cuckoo: a computation 
offloading framework for smartphones,” Proc. ACM Mobisys, 2010, pp. 
59-79. 
[14] D. C. Doolan, S. Tabirca, and L.T. Yang, “Mmpi a message passing 
interface for the mobile environment,” Proc. ACM Mobisys, 2008, pp. 
317-321. 
[15] M. Kristensen, “Scavenger: transparent development of efficient cyber 
foraging applications,” Proc. IEEE  PerCom, 2010, pp. 217-226. 
[16] C. Clark, et al., “Live migration of virtual machines,” Proc. of the 2nd 
conference on Symposium on Networked Systems Design & 
Implementation, USENIX Association, 2005, vol 2, pp. 273-286. 
[17] M. Satyanarayanan, P. Bahl, R. Caceres, and N. Davies, “The Case for 
VM –based Cloudlets in Mobile Computing,” IEEE Pervasive 
Computing, vol. 8, no. 4, 2009. 

119
International Journal on Advances in Security, vol 8 no 3 & 4, year 2015, http://www.iariajournals.org/security/
2015, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
[18] E. Cuervo et al., “Maui: Making Smartphones Last Longer with Code 
Offload,” Proc. ACM MobiSys, 2010, pp. 49-62. 
[19] B. Chun, S. Ihm, P. Maniatis, M. Naik, and A. Patti, “Clonecloud: 
Elastic Execution Between Mobile Device and Cloud,” Proc. ACM 
EuroSys, 2011, pp. 301-314. 
[20] D. Huang, X. Zhang, M. Kang, and J. Luo, “MobiCloud: Building 
Secure Cloud Framework for Mobile Computing and Communication,” 
Proc. IEEE SOSE, 2010, pp. 27-34. 
[21] http://www.yunos.com, YunOS, November 2015. 
[22] T. Zheng and D. Gu, “Traffic Offloading Improvements in Mobile 
Networks,” ICNS 2014, pp. 116-121. 
[23] http://www.ccnx.org, CCNx, November 2015. 
[24] J. Byers, M. Luby, M. Mitzenmacher, and A. Rege, “A digital fountain 
approach to reliable distribution of bulk data,” Proc. ACM SIGCOMM 
'98, pp. 56-67. 
[25] A. Ellouze, M. Gagnaire, and A. Haddad, “A Mobile Application 
Offloading Algorithm for Mobile Cloud Computing,” Proc. IEEE 
MobileCloud 2015, pp. 34-40. 
[26] http://www.merkle.com/1974/, R. C. Merkle, November 2015. 
[27] http://en.wikipedia.org/wiki/MD5, November 2015. 
 

