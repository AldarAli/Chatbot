Search and Navigation in Semantically Integrated Document Collections
Saˇsa Neˇsi´c, Fabio Crestani, Mehdi Jazayeri
Faculty of Informatics,
University of Lugano
Lugano, Switzerland
{sasa.nesic, fabio.crestani, mehdi.jazayeri}@usi.ch
Dragan Gaˇsevi´c
School of Computing and Information System,
Athabasca University
Athabasca, Canada
dgasevic@acm.org
Abstract—The paper presents a novel approach to seman-
tic search and navigation in ofﬁce-like document collections.
The approach is based on a semantic document model that
we have developed to enable unique identiﬁcation, semantic
annotation, and semantic linking of document units of ofﬁce-
like documents. In order to semantically annotate document
units and to link semantically related document units, we ﬁrst
conceptualize document units’ semantics and represent them by
vectors of ontological concepts and their corresponding weight
vectors. In the semantic search, we represent a user query by a
query’s concept vector, which is generated in the same way as
document units’ concept vectors, and then determine the search
results by measuring the similarity between the query’s and
the document units’ concept weight vectors. After the search,
by following the semantic links of a selected document unit, the
user can navigate through the document collection and discover
semantically related document units. Results of the preliminary
evaluation, conducted with a prototype implementation, are
promising. We present a brief analysis of these results.
Keywords-semantic search, semantic linking and navigation;
I. INTRODUCTION
During the last decade a considerable number of ontology-
driven information retrieval approaches [1], [2], [3], [4]
has been developed to enhance the search and retrieval
by making use of available semantic annotations and their
underlining ontologies. Central to the ontology-driven in-
formation retrieval is the problem of having substantial
amount of accurate semantic annotations. Most existing
semantic annotation approaches [5] are based on the syn-
tactic matching of ontological concept descriptions against
document content. In spite of advanced data mining and
NLP techniques applied in these approaches, usually poor
and ambiguous concept descriptions lead to insufﬁcient and
inaccurate semantic annotation. Few approaches, such as [2],
try to enhance the semantic annotation by extending the set
of syntactic matches with related concepts from the ontol-
ogy, discovered by utilizing formal ontological semantics.
Such concepts are usually referred to as semantic matches.
The combination of the syntactic and semantic matching can
increase the amount of semantic annotations, but it opens the
problem of the concept relevance [6]. Therefore, one of the
most important issues in this scenario is how to assess the
relevance weight of the discovered semantic matches and to
use only the most relevant of them.
In this paper we present a uniﬁed solution that should
enable efﬁcient semantic search and navigation in document
collections holding semantically related data. The solution is
based on the novel document representation model, namely
semantic document model (SDM) [7] which comprises the
publishing document data in RDF, the semantic annotation
and indexing of document data by weighted ontological
annotations and the semantic linking of related data within
the document collections. By the weighted annotations,
which we calculate based on the semantic distances between
concepts in the annotation ontology, we intend to improve
the semantic search in document collections. By the pub-
lishing document data in RDF and the semantic linking of
document data, we intend to enable client applications to
easily navigate between documents and to discover seman-
tically related data.
The rest of the paper is organized as follows. In Section
II we outline main characteristics of the SDM model. In
Section III we describe our approach to concepts discovery
in document units, especially focusing on a novel, concept
exploration algorithm that we apply in the semantic match-
ing. Section IV explains the way we use the discovered
concepts for the semantic annotation, indexing and linking
of document units of a given document collection. In Section
V we present the semantic search and navigation services,
which utilize the semantic annotations and links to search
and navigate in semantically integrated document collec-
tions. In Section VI we discuss the results of the preliminary
evaluation that we conducted as a proof of concept. We
conclude the paper with Section VII, giving some ﬁnal
remarks and discussing our plans for the future work.
II. SEMANTIC DOCUMENT MODEL
We have created a novel document representation model,
namely semantic document model (SDM) [7], aiming
to provide the infrastructure for the unique identiﬁca-
tion, the semantic annotation and the semantic linking
of ﬁne-grained units of document data. SDM represents
document data as RDF [8] linked data, providing an
RDF node for each document unit. Document units are
55
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

uniquely identiﬁed by the means of HTTP dereferenca-
ble URI of their RDF nodes, semantically annotated by
ontological concepts from domain ontologies, and linked
to other document units by RDF links that model hierar-
chical, structural and semantic relationships among them.
SDM is formally described by the smd ontology [7],
which speciﬁes possible types of document units (e.g.,
sdm:paragraph,
sdm:section,
sdm:table
and
sdm:illustration), types of hierarchical and structural
relationships among document units (e.g., sdm:hasPart,
sdm:isPartOf and sdm:belongsTo), and the seman-
tic annotation and the semantic linking interfaces.
The
semantic
annotation
interface
consists
of
the
sdm:Annotation entity with its two properties: the
sdm:annotationConcept property that holds a ref-
erence to the concept from an annotation ontology and
the sdm:conceptWeight property that determines the
relevance of the annotation concept for the document
unit it annotates. The semantic linking interface con-
sists of the sdm:SemanticLink entity and the follow-
ing properties: the sdm:unitOne and sdm:unitTwo,
which
hold
the
document
units
to
be
linked,
the
sdm:relationshipConcept property that holds the
reference to the ontological concept that annotates both
units and determines the type of the semantic relationship,
and the sdm:linkStrength property that determines the
strength of the semantic relationship between the document
units. As we can see from the speciﬁcation of the semantic
annotation and the semantic linking interfaces, both of them
require the concepts from domain ontologies that conceptu-
alize human-readable information stored in document units.
Therefore, the concept discovery represents the foundation
of the semantic annotation and linking in SDM.
III. CONCEPTS DISCOVERY IN DOCUMENT UNITS
The concept discovery that we propose, combines the
syntactic matching of lexically expanded concept descrip-
tions with the semantic matching by applying the concept
exploration algorithm. In the rest of the section we ﬁrst
describe the main characteristics of the proposed syntactic
and the semantic matching and then give detailed description
of the concept exploration algorithm.
A. Syntactic and Semantic Matching
Any domain ontology can be represented as a graph
O := (C, R, HC, HR) where C = {c1, c2, c3, ..., cn} is
a set of concepts, R = {r1, r2, ..., rm} is a set of relations
and HC, HR are hierarchies deﬁning a partial order over
concepts and relations respectively. Moreover, each concept
is described with a set of labels. For example, the set of
labels of the concept ci is Li = {li1, li2, ..., lim}. In practice,
however, ontology engineers provide only one label for
each ontology concept or even neglect to label concepts
considering human readable parts of concept URIs to be
concept labels [5]. In order to cope with this problem,
which can lead to inefﬁcient syntactic matching, prior to
the syntactic matching we perform the lexical expansion
of the concept descriptions with related terms from lexical
dictionaries such as WordNet [9].
The objective of the syntactic matching is to analyze
the content of a document unit (DU) and to check if
some of the concept labels, appear in it. For the concepts
whose labels appear in the DU, we calculate the concept
weight by taking into account the following: 1) the labels’
origin factor that makes distinction between original concept
labels and those from the lexical expansion, 2) the labels’
frequency of occurrence in the DU and 3) the inverse
DU’ frequency in a document collection. The result of the
syntactic matching is the concept vector of the DU and
the corresponding concept weight vector. For example, if
we have a document unit d that is being annotated, after
the syntactic matching we got the following concept vector:
−→d = [c1, c2, ..., cr];
ci ∈ C and the corresponding concept
weight vector −−→
WC(d) = [wc1, wc2, ..., wcr], where wci is the
relevance weight of the concept ci for the document unit d.
The objective of the semantic matching is to extend
the concept vector −→d , which is formed as a result of
the syntactic matching, with semantically related concepts
from the annotation ontology. By applying the concept
exploration algorithm, which we explain in detail in the
following section, to each of the document unit’s syntactic
matches, we discover the document unit’s semantic matches
and form the expanded concept vector −→d e = [c1, c2, ..., cr,
ce1, ..., cem]. For each of the semantic matches cej the
algorithm calculates the semantic distance SDistc(cej, ci)
from the initial syntactic match ci ∈ −→d . The weight wcej
of the semantic match cej for the document unit d is then
calculated by the following formula:
wcej = wci ∗ β−SDistc(cej,ci);
β > 1
(1)
where wci is the weight of the syntactic match ci and
β is a generic coefﬁcient. We devised the formula (1)
so that it satisﬁes boundary conditions regardless of the
value of coefﬁcient β. For the ﬁrst boundary condition
SDistc(cej, ci) = 0, meaning that the concepts cej and
ci are semantically identical, wcej
= wci, that is, the
weight of the semantic match is the same as the weight
of the initial syntactic match. For the second boundary
condition SDistc(cej, ci) → ∞, meaning that the concepts
cej and ci are semantically unrelated, wcei → 0, that is,
the weight of the semantic match tends towards zero. For
SDistc(cej, ci) ∈ (0, ∞), the optimal value of coefﬁcient
β has to be experimentally determined. For the evaluation,
which results we discuss in Section VI, we used the expo-
nential constant e as the value of coefﬁcient β thus making
(1) belongs to the family of negative exponential functions.
56
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

B. Concept Exploration Algorithm
The main assumption on which the concept exploration
algorithm runs is the possibility to associate numerical
values to ontological relations in the annotation ontology
and to form the weighted ontology graph. We refer to
these values as the relation semantic distances (SDistr).
Moreover, we distinguish between two types of the relation
semantic distance: 1) SDistr
D→R(r) determining semantic
distance of the concepts belonging to the domain (D) of
the relation r from the concepts belonging to the range
(R) of r, and 2) SDistr
R→D(r) determining the semantic
distance of the concepts belonging to the range of r from the
concepts belonging to the domain of r. In general, the values
of the relational semantic distances can be: 1) speciﬁed
at design time of the ontology by the domain experts, 2)
experimentally devised by using a controlled knowledge/data
base and 3) learned over time by exploiting the ontology in
real world applications within the ontology domain. Based
on our experience the choice between these three strategies is
strongly domain-dependent. A combination of the strategies
is also valid.
The general idea of the algorithm (see Algorithm 1) is to
explore the ontology graph starting from the input concept
to ﬁnd all concepts which satisfy the given semantic distance
constraint (SDc) and the given path length constraint (PLc).
SDc is the maximum allowed semantic distance between the
input and target concepts. PLc is the maximum number of
hops (i.e., ontology relations) allowed to belong to a path
between the input and target concepts. The algorithm takes
the following input: the weighted ontology graph Ow formed
by associating values of the relation semantic distances to the
ontology relations, the input concept c, the semantic distance
constraint SDc, and the path length constraint PLc. The
output consists of a vector of discovered related concepts
−→
Ce and a vector of the semantic distances −−→
SDe between the
discovered concepts and the input concept. The algorithm
starts by the Paths1(Ow, c, PLc) function (line 3) which
constructs a set of all possible acyclic paths P, starting from
the input concept c and whose length is less than PLc.
Next, (line 4) the Concepts(P) function extracts all concepts
from the set of paths P and forms a distinct set of extracted
concepts C. Next, (line 6) for each concept ci ∈ C function
Paths2(c, ci, P) returns a set of paths Pi (Pi ⊆ P) which
start in concept c and end in concept ci. Next, (line 8) for
each path pij ∈ Pi between c and ci, function SDistp(pij)
calculates the semantic distance of the path that we refer
to as the path semantic distance (SDistp). The function
actually sums the relation semantic distances of relations
that make the path. For those relations rk ∈ pij with the
same direction as a direction c → ci, the function takes
SDistr
R→D(rk) while for rk with the direction c ← ci, the
function takes SDistr
D→R(rk).
Algorithm 1 Concept Exploration Algorithm
1: INPUT Ow, c, SDc, PLc
2: OUTPUT −→
Ce, −−→
SDe
3: P = Paths1(Ow, c, PLc) = {p1, ..., pm} {ﬁnds all
paths from c with a length ≤ PLc}
4: C = Concepts(P) = {c1, ..., cn} {extracts all concepts
from the set of paths P}
5: for all ci such that ci ∈ C do
6:
Pi = Paths2(c, ci, P) = {pi1, ..., pik} {ﬁnds a set of
acyclic paths Pi ⊂ P between c to ci}
7:
for all pij such that pij ∈ Pi do
8:
SDistp(pij) {calculates the semantic distance of
path pij}
9:
end for
10:
SDistc(ci, c) {calculates the semantic distance of the
concept ci from c}
11: end for
12: −→
Ce = [c1, ..., cp], ci ∈ C and SDistc(ci, c) ≤ SDc
13: −−→
SDe = [SDistc(c1, c), .., SDistc(cp, c)]
After the algorithm calculates the path semantic distances
of all paths Pi, it calculates the semantic distance of concept
ci from the input concept c by applying function (2). We
call this semantic distance the concept semantic distance
(SDistc). SDistc(ci, c) can be also considered as the rela-
tion semantic distance SDistr
R→D(r(c, ci)) of a new single
relation r(c, ci) from the concept c to ci.
SDistc(ci, c) = SDistr
R→D(r(c, ci)) =
1
kP
j=1
1
SDistp(Pij)
(2)
We designed function (2) so that it prioritizes the impact
of those paths with the small path semantic distance, in
determining the concept semantic distance. Finally, the
algorithm discards all concepts from the set C which do
not satisfy the SDc constraint, and forms the output vector
of the discovered related concepts −→
Ce, along with the vector
of their semantic distances −−→
SDe from the input concept c.
IV. SEMANTIC DOCUMENTS ANNOTATION, LINKING
AND INDEXING
The semantic annotation of document units deﬁned by
SDM refers to the process of linking the discovered onto-
logical concepts and their weights to document units’ RDF
nodes, via the SDM annotation interface. If documents of a
given document collection are annotated by concepts from
the same, shared domain ontology, then implicit semantic
relationships between their document units can easily be
identiﬁed and made explicit. For example, if two document
units are annotated by the same ontological concept, it means
that they share some semantics and there is an implicit
semantic relationship between them. By setting up explicit
57
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

RDF links between RDF nodes of document units, based
on the SDM linking interface, we bring the collection’s data
into an integrated information space. Following the semantic
links, the user can easily navigate in this information space
and discover semantically related data. Moreover, by expos-
ing the SPARQL HTTP endpoints [8] to RDF repositories
of the document collections, we can enable the integration
of distant document collections. In this way, the user can
navigate through semantically related data belonging to
different document collections as well.
Finally, besides the semantic annotation and linking, the
discovered concepts are also used for the concept indexing
of the document units. The concept index contains a list
of concepts (i.e., concept identiﬁers) from the annotation
ontologies, each of which is assigned a list of the document
units it annotates. For each document unit in the concept’s
list, the index also stores the weight of the concept for the
document unit. The concept index plays the key role in the
semantic search that we discuss in the next section.
V. SEMANTIC SEARCH AND NAVIGATION
In this section we describe the semantic search and the
semantic navigation services, which we have developed as
parts of a broader, service oriented architecture called the
Semantic Document Architecture - SDArch [10]. These two
services provide the mechanisms for the semantic search
and navigation in the collections of documents represented
by SDM. In order to provide the user interface to the
SDArch services, we have developed a set of tools called
’SemanticDoc’ and integrated them into MS Ofﬁce as add-
ins. Further information about the SDArch services and
SemanticDoc tools can be found on our project web page
[11].
The search process normally starts with the user construct-
ing a query that reﬂects her information needs. As the initial
form of the user query, the semantic search service takes a
free text query. The service then models the semantic mean-
ing of the query by forming a weighted query concept vector,
which we refer to as a semantic query. The search service
actually applies the syntactic and the semantic matching
to discover ontological concepts, which conceptualize the
semantic meaning of the query. For each discovered concept,
the service calculates its relevance weight to the query and
forms a weighted query concept vector. The way the search
service forms semantic queries is quite similar to the process
of the concepts discovery (Section III) in document units.
Having both the document units and the user query repre-
sented in the same way, by their weighted concept vectors,
the rest of the search process proceeds as follows. From
the concept index of the selected document collection, the
search service discovers document units which are indexed
by the concepts from the semantic query. Then, the service
calculates the similarity between the discovered document
units and the semantic query, by computing the similarity
between the document units’ concept vectors and the query’s
concept vector. At the end, the service ranks the document
units based on the calculated similarity and retrieves the
ranked list of the document units.
The semantic navigation service enables users to traverse
document collections by navigating along the semantic links.
The navigation process assumes the existence of an ex-
ploratory interface through which the users interact with the
semantic navigation service (i.e., SemanticDoc [11] tools).
The navigation process starts by the user browsing the initial
document unit and clicking on one of the unit’s annotation
concepts (i.e., concept label). This activates the navigation
service, which takes the URIs of the document unit and the
concept, forms a SPARQL query (see Fig. 1), and executes
it against the collection’s RDF repository. Since the initial
document unit can be linked to many document units via
the same semantic link, thus the query can return multiple
document units. The query orders the return document units
by the strength of the semantic links between them and
the initial document unit. After the query execution, the
navigation service sends the list of the document units to
the browse in which the user browses their details.
PREFIX sdm : <h t t p : / / www. semanticdoc . org / sdm . owl#>
SELECT ? t a r g e t U n i t
? s t r e n g h t
WHERE{? l i n k
sdm : r e l a t i o n s h i p C o n c e p t
concept a32c154
? l i n k
sdm : unitOne
unit b42c177
? l i n k
sdm : unitTwo ? t a r g e t U n i t
? l i n k
sdm : l i n k S t r e n g t h
? s t r e n g t h
}
ORDER BY ? s t r e n g t h
Figure 1.
Example of a SPARQL query executed by the navigation service
VI. EVALUATION
In order to evaluate the usability of the semantic search
and navigation services we conducted a usability study
in which we considered the user effectiveness, efﬁciency
and satisfaction in using the services, while preparing a
course material. Both, the quantitative measures (e.g., task
execution time, number of window switches and number of
mouse clicks) and the users’ subjective feedback, collected
by the evaluation questionnaire and the series of interviews,
showed positive results. The detailed discussion on the
usability study can be found in [12]. In this paper, however,
our focus is on the experimental evaluation of the semantic
annotation (i.e., the concept discovery) and the semantic
search.
The experimental evaluation that we discuss hereafter, was
designed more as a proof of concept; it was not meant to
address issues of scalability or efﬁciency. The document
collection that we used in the experiments was composed of
170 Word documents (2735 paragraphs - document units of
interest for these experiments) containing records for steel,
aluminum, copper, titanium, and other metals. We optioned
the collection from KEY-to-METALS [13] company, which
58
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

Semantic relation
Representation
SDistr
R→D(r)
SDistr
D→R(r)
hypernym
skos : broader
1 − δhyper = 0, 53
1 − δhypo = 0, 16
hyponym
skos : narrower
1 − δhypo = 0, 16
1 − δhyper = 0, 53
holonym
skos : relatedPartOf
1 − δholo = 0, 88
1 − δmero = 0, 84
meronym
skos : relatedHasPart
1 − δmero = 0, 84
1 − δholo = 0, 88
synonym
owl : equivalentClass
1 − δsyn = 0, 30
1 − δsyn = 0, 30
identical
owl : sameAs
0
0
Table I
RELATION SEMANTIC DISTANCES IN METALS ONTOLOGY
Strategy
Number
Number of
Number of
Avg. weight
Avg. weight
of concepts
syn. matches
sem. matches
of syn. match.
of sem. match.
S1
211
1524
-
2.56
-
S2
343
3182
-
3.62
-
S3
672
3182
6714
3.62
2.43
S4
795
3182
11102
3.62
1.12
S5
924
3182
23716
3.62
0.27
Table II
CONCEPT DISCOVERY RESULTS FOR STRATEGIES (S1-S5)
maintains one of the world’s most comprehensive metals
database. As the annotation ontology we used the Metals
ontology, which we also got from the same company. The
ontology contains over 3, 500 concepts about metals and
their applications. It is an OWL ontology which conforms
to the SKOS speciﬁcation [6]. SKOS deﬁnes a family of
relations such as skos : narrower, skos : broader and
skos : related for expressing simple relationships between
concepts within an ontology.
Table I shows a subset of semantic relations in the Metals
ontology, along with their SKOS and OWL representations
and values of the relation semantic distances. The values
of the relation semantic distances were assessed based on
the results of the experimental studies [14]. In these studies
the authors measured the semantic similarity/relatedness be-
tween terms in WordNet, connected via the hypernymy, hy-
ponymy, holonymy, meronymy and synonymy relations, and
produced the following values: δhyper = 0.47, δhypo = 0.84,
δholo = 0.12, δmero = 0.16 and δsyn = 0.70. Value δr = 0
means that two terms are semantically unrelated via relation
r, and δr = 1 that the terms are semantically identical. We
calculate the values of the relation semantic distances as
1 − δr and take into account the fact that hypernymy and
hyponymy as well as holonymy and meronymy are mutually
inverse relations. Moreover, the Metals ontology contains
the owl : sameAs relation which links two semantically
identical concepts/individuals, so that both of the relation
semantic distances have been assessed as zero.
In order to evaluate the semantic annotation, we have
transformed the document collection by applying ﬁve dif-
ferent concept discovery strategies: S1 - simple syntactic
matching, S2 - lexically expanded syntactic matching, and
S3, S4, S5 - lexically expanded syntactic matching and the
semantic matching with SDC = 1, 2, 3 respectively. The
last three strategies comprise all the features (i.e., lexical
expansion, syntactic matching and semantic matching) of
our concept discovery approach. They only differ in the
value of the SDC (semantic distance constraint) parameter
of the concept exploration algorithm (Section III-B). The
value of the path length constraint is ﬁxed at PLc = 3 for
these evaluation tests.
As a result of the transformation we obtained ﬁve se-
mantic document collections, each of which having the
corresponding concept index. Table II shows for each of the
concept discovery strategy: 1) the distinct number of con-
cepts from the annotation ontology that have been involved,
2) the total number of syntactic and semantic matches, that
is, the number of document units in which the concepts have
been discovered by the syntactic and the semantic matching
respectively and 3) the average weights of the syntactic and
semantic matches calculated based on 20 randomly chosen
document units. Comparing results of S1 and S2 which
both implement only syntactic matching, we can see that
the lexical expansion of concept descriptions increases the
number of discovered concepts from 211 to 343 and the total
number of syntactic matches from 1524 to 3182 but also the
average weight of syntactic matches from 2.56 to 3.62. In
other words, these increases show that the lexical expansion
improves both the quantity and quality of the annotation.
The next three strategies S3 − S5 produce the same number
of syntactic matches as S2 (i.e., 3182), since the syntactic
matching stays intact, but they increase the number of the
semantic matches (i.e., 6714; 11102; 23716). On contrary,
the average weight of the added semantic matches decreases
(i.e., 2.43; 1.12; 0.27). This shows that with higher values
of the semantic distance constraint (SDc) we can get more,
but less relevant semantic matches.
To evaluate the performance of the proposed semantic
search we formed ﬁve queries related to the data of the
evaluation document collection and asked three KEY-to-
59
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

Figure 2.
Interpolated precision of S1-S5 at standard recall points
METALS engineers to assess the relevance of document
units (i.e., paragraphs) of the collection to the queries. The
queries were then executed against each of the ﬁve semantic
document collections. Fig. 2 shows interpolated precision
at standard recall points. Comparing the P-R curves of S1
and S2 we can see that the lexically expanded syntactic
matching outperforms from the simple syntactic matching in
both recall and precision. Moreover, all three strategies (i.e,
S3, S4, S5) which include the semantic matching, further
increase overall precision and recall. Comparing their P-R
curves and by knowing that they differ only in the value of
the semantic distance constraint (i.e., SDc = 1, SDc = 2,
SDc = 3) we can observe that there is an optimal value
for the concept semantic distance (SDistc) with regard to
optimal precision and recall. It means that the semantic
matches, which concept semantic distance is higher than the
optimal one, reduce retrieval performances. In our evaluation
the optimal value of the concept semantic distance falls in a
range between 2 and 3, since the precision of S4 is higher
than of S3 but then it drops for S5.
The results of the preliminary evaluation indicate that
the proposed concept discovery approach has potential to
enlarge the amount of semantic annotations and to improve
the performances of DUs search and retrieval, not just in
terms of better recall, but also in terms of better precision.
VII. CONCLUSIONS
In this paper we present an ontology-driven approach to
semantic search and navigation in semantically integrated
document collections. The semantic integration of document
collections is achieved by the novel semantic document
representation that comprises the publishing document data
in RDF, the semantic annotation and indexing of document
data with weighted ontological annotations and the semantic
linking of related data. The results of both, the usability
study and the experimental evaluation of the semantic anno-
tation and search are promising. In the future work, we plan
to continue with the evaluation of our approach, addressing
issues such as the scalability, efﬁciency and applicability of
the approach to document collections of different domains.
REFERENCES
[1] J. F. Song, W. M. Zhang, W. Xiao, G. hui Li, and Z. ning
Xu, “Ontology-Based Information Retrieval Model for the
Semantic Web,” in Proc. of the Int. Conf. on e-Technology,
e-Commerce and e-Service, 2005, pp. 152–155.
[2] C. Rocha, D. Schwabe, and M. P. de Arag˜ao, “A hybrid
approach for searching in the semantic web,” in Proc. of the
13th international conference on World Wide Web, 2004, pp.
374–383.
[3] A. Kiryakov, B. Popov, D. Manov, and D. Ognyanoff, “Se-
mantic annotation, indexing, and retrieval,” J. Web Sem.,
vol. 2, no. 1, pp. 49–79, 2004.
[4] D. Vallet, M. Fern´andez, and P. Castells, “An Ontology-Based
Information Retrieval Model,” in Proc. of the ESWC, 2005,
pp. 455–470.
[5] V. Uren and et al., “Semantic Annotation for Knowledge
Management: Requirements and a Survey of the State of the
Art,” J. Web Sem., vol. 4, no. 1, pp. 14–28, 2006.
[6] J. Tuominen, M. Frosterus, and E. Hyv¨onen, “ONKI SKOS
Server for Publishing and Utilizing SKOS Vocabularies and
Ontologies as Services,” in Proc. of the European Semantic
Web Conference, 2009, pp. 768–780.
[7] S. Neˇsi´c, “Semantic Document Model to Enhance Data and
Knowledge Interoperability,” Annals of Information Systems,
Springer, vol. 6, pp. 135–162, 2009.
[8] C. Bizer, T. Heath, and T. Berners-Lee, “Linked Data - The
story so far,” Int. Journal on Semantic Web and Information
Systems, vol. 5, no. 3, pp. 1–22, 2009.
[9] WordNet, “http://wordnet.princeton.edu/.”
[10] S. Neˇsi´c, M. Jazayeri, and D. Gaˇsevi´c, “Semantic Document
Architecture for Desktop Data Integration and Management,”
in Proc. of the 22nd International Conference on Software
Engineering and Knowledge Engineering, 2010, pp. 73–78.
[11] Semantic Documents, “http://www.semanticdoc.org/.”
[12] S. Neˇsi´c, M. Jazayeri, M. Landoni, and D. Gaˇsevi´c, “Using
semantic documents and social networking in authoring of
course material: An empirical study,” in Proc. of the 10th
IEEE International Conference on Advanced Learning Tech-
nologies, 2010, pp. 666–670.
[13] KeyToMetals, “http://www.keytometals.com/.”
[14] Z. Gong, C. W. Cheang, and L. H. U, “Multi-term Web Query
Expansion Using WordNet,” in Proc. of the 17th Database
and Expert Systems Applications Conference, DEXA, 2006,
pp. 379–388.
60
SEMAPRO 2010 : The Fourth International Conference on Advances in Semantic Processing
Copyright (c) IARIA, 2010               ISBN: 978-1-61208-104-5

