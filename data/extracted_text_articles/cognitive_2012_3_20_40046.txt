Indoor User Tracking with Particle Filter 
 
Incheol Kim 
Department of Computer Science 
Kyonggi University 
Suwon, Korea 
kic@kyonggi.ac.kr 
Eunmi Choi, Huikyung Oh 
Department of Computer Science 
Kyonggi University 
Suwon, Korea 
{allychoi, ohkv770}@kyonggi.ac.kr
 
 
Abstract—Recently there have been developed a number of 
mobile personal assistants, which can provide their users with 
useful location-based services. In this paper, we propose a 
WiFi fingerprint-based localization algorithm for tracking the 
accurate position of a smartphone user in indoor environment. 
To meet high complexity of localization in a large continuous 
environment, our algorithm incorporates a graph-based space 
representation, a linear interpolation-based observation model, 
and three component motion models into the particle filter 
framework. In experimental evaluation, our WiFi localization 
algorithm showed high accuracy and robustness in indoor 
tracking. 
Keywords-WiFi fingerprint; indoor tracking; particle filter; 
probabilistic model 
I. 
 INTRODUCTION 
The location information of a user plays a key role in 
various mobile services. In outdoor environment, GPS is a 
common solution for obtaining location information, but it 
does not work well in indoor environments. WiFi 
fingerprint-based indoor positioning systems [1,2] are 
currently attracting interest, since they can reduce installation 
costs. WiFi network modules are readily embedded in a 
variety of mobile devices, and WiFi APs are commonly 
installed in modern buildings. However, indoor localization 
using WiFi signal strength has the problem of unpredictable 
signal propagation through indoor environments. To meet 
this 
uncertainty 
problem 
of 
WiFi 
fingerprint-based 
localization, many probabilistic/statistic approaches have 
been proposed [2,3]. The best known of them is the particle 
filter, in which the posterior probability distribution of the 
current position of a user is represented and propagated using 
the set of weight samples. For the particle filter localization 
to be successfully used in a large continuous indoor 
environment, however, decisions should be made on the 
following 
important 
factors: 
a 
space 
and/or 
state 
representation to reduce the size of the state space, an 
observation model to generate likelihoods at locations for 
which no calibration data is available, and a motion model to 
predict the accurate position of a pedestrian. 
In this paper, we propose a WiFi fingerprint-based 
localization algorithm for tracking the position of a 
smartphone user in indoor environment. To meet high 
complexity of   localization in a large continuous 
environment, our algorithm incorporates a graph-based space 
representation, an effective observation model, and three 
component motion models into the particle filter framework. 
In experimental evaluation, our WiFi localization algorithm 
showed high accuracy and robustness in indoor tracking. 
The next section presents the representation of an indoor 
environment and the state of a pedestrian roaming within the 
environment. Section III describes the WiFi fingerprint map 
and the observation model built up from the calibration data 
set. Section IV details the motion model for tracking a 
pedestrian’s motion in an effective manner. Section V 
describes precisely the particle filter algorithm for tracking 
the WiFi-enabled smartphone user’s position in real-time 
settings. Section VI explains the experiments for evaluating 
the performance of our WiFi-based localization algorithm. 
Section VII concludes and discusses future work. 
II. 
REPRESENTATION OF ENVIRONMENT 
We represent an indoor environment as a graph G=(V, E), 
where V is a set of vertices indicating pre-determined 
locations in the environment, and E is a set of edges 
connecting two adjacent vertices. Figure 1 shows an example, 
representing one floor in a research building.  
 
 
Figure 1. Graph representation of an indoor environment. 
 
Considering important environmental factors such as the 
layout of corridors and rooms, the position of WiFi APs 
(WiFi Access Points), the typical motion pattern of residents, 
the number and the position of vertices are usually decided. 
We assume a WiFi-equipped smartphone user moves only 
along the edges of the graph. Hence, an instant position of 
the user can be viewed as a point on an edge et, and the state 
xt of the user is represented as a tuple <et, st, dt, mt>, as 
illustrated in Figure 2.  
59
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-218-9
COGNITIVE 2012 : The Fourth International Conference on Advanced Cognitive Technologies and Applications

 
 
 
 
 
 
 
Figure 2. The state of a user roaming in an indoor environment at time t. 
 
et represents the edge the user currently walks along, and 
st indicates the starting vertex the user entered the edge 
through. dt represents the distance from the position of the 
starting vertex to the current position of the user, and mt  
expresses the motion state indicating whether the user is 
moving or stopped.  
III. 
WIFI FINGERPRINT MAP AND OBSERVATION MODEL 
To enable online tracking with the particle filter, we need 
an observation model to tell the likelihood of observing the 
specific WiFi signal strength at a certain location in the 
environment. In fingerprint-based localization systems, this 
observation model and so-called WiFi fingerprint map are 
obtained from the calibration data. To collect the calibration 
data over the environment, we scanned WiFi signal strength 
vectors at the locations indicated by the vertices v∈V on 
the graph. Each entry of the calibration data consists of the 
WiFi signal strength vector and the location label, that, a 
pair of <WiFi RSS vector, location>. We assume the 
likelihood of observing the specific signal strength at a 
certain location is a Gaussian distribution. Assume there 
exist |A| number of APs (Access Points) discovered in the 
indoor environment. In practice, the WiFi fingerprint map 
includes |V|x|A| number of Gaussian distributions, each of 
them represented by two parameters: the mean μp and the 
variance σp
2 of WiFi signal strength of each AP as 
measured from each vertex p. Based on these two 
parameters μp and σp
2 of the WiFi distribution at the 
location xp, we can compute the likelihood p(z|xp) of 
observing the specific signal strength z at the location xp, as 
formulated in the equations (1) and (2). 
 
  
)
2
)
exp( (
2
1
)
|
(
2
2
2
p
p
p
p
z
p z x
σ
μ
πσ
−
−
=
         (1) 
   
∏
=
−
−
=
k
i
p
p
p
p
z
z x
p
1
2
2
2
)
2
)
exp( (
2
1
)
( |
σ
μ
πσ
r
   (2) 
 
To obtain a full observation model covering over an 
entire large continuous state space, we should be able to 
compute likelihoods at locations for which no calibration 
data is available. As illustrated in Figure 3, we can estimate 
(μp, σp
2), the likelihood distribution parameters at an arbitrary 
location xp on an edge by linearly interpolating (μi, σj
2) and 
(μj, σj
2), the WiFi distribution parameters of its two end 
vertices xi and xj. This means that if we know the likelihood 
distributions of any two vertices, the distribution at every 
location on the edge connecting these vertices can be also 
estimated by using the linear interpolation. 
 
 
Figure 3. Linear interpolation to compute the likelihood distribution. 
 
The linearly interpolated mean signal strength μp and the 
variance σp
2 can be computed by: 
 
||
||
||
||
||
||
j
i
j
i
p
i
j
p
p
x
x
x
x
x
x
−
⋅
−
+
⋅
−
=
μ
μ
μ
   (3) 
||
||
||
||
||
||
2
2
2
j
i
j
i
p
i
j
p
p
x
x
x
x
x
x
−
⋅
−
+
⋅
−
=
σ
σ
σ
  (4) 
Therefore, by building the WiFi fingerprint map in the 
form of the annotated graph G=(V, E), where each vertex is 
annotated with the mean and the variance of the WiFi signal 
strength distribution at the corresponding location, we can 
obtain a complete observation model covering over the entire 
space. 
IV. 
THREE COMPONENT MOTION MODELS 
In order to track effectively a WiFi-equipped smartphone 
user with the particle filter, we need a well-defined motion 
model of the user as well as a precise observation model. In 
this paper, we define the motion model p(xt|xt-1) by 
integrating three component models: motion state transition 
model p(mt|mt-1), edge transition model p(et|et-1), and motion 
distance model p(dt). 
A. Motion State Transition Model 
Motion 
state 
transitions 
p(mt|mt-1) 
represent 
the 
probability of motion state mt  being moving or stopped 
given the previous state. Table 1 shows an example of the 
motion state transition model.  
 
TABLE I. AN EXAMPLE OF THE MOTION STATE TRANSITION MODEL 
)
|
(
p mt mt−1
 
t
m  
stopped 
moving
mt−1
 
stopped
0.55 
0.45
moving
0.25 
0.75
 
B. Edge Transition Model 
Edge transitions p(et|et-1) represent the probability of 
choosing the next edge when reaching a vertex. They are 
60
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-218-9
COGNITIVE 2012 : The Fourth International Conference on Advanced Cognitive Technologies and Applications

stored at each vertex of the graph. An example of the edge 
transition model is illustrated in Figure 4.  
 
 
Figure 4. An example of the edge transition model p(et|et-1). 
 
C. Motion Distance Model 
Motion distance model p(dt) represents the probability of 
going away at distance d from the previous position. The 
distance d is sampled according to the Gaussian distribution 
with the mean μd and the variance σd
2: p(d) ~ N(μd σd
2). The 
mean μd and the variance σd
2 are manually set based on 
typical motion patterns of pedestrians, or learned from a 
specific user group’s training data. 
Sampling from the resulting motion model is done as 
follows. When xt-1 = <et-1, st-1, dt-1, mt-1> is on an edge in the 
graph, we first sample the motion state mt with probability 
proportional to p(mt|mt-1). If mt = stopped, then xt is set to be 
xt-1. Otherwise, if mt = moving, then we randomly draw a 
moving distance d according to the Gaussian distribution 
N(μd σd
2). For this distance d, we determine whether the 
motion along the edge results in a transition over the end 
vertex of et-1. If not, then dt = dt-1 + d and et = et-1, st = st-1. 
Otherwise, we set dt = dt-1 + d + | et-1 | and the next edge et is 
sampled with probability p(et|et-1), and then st is set to the 
starting vertex of the edge et .  
As a summary, we define the motion model p(xt|xt-1) as 
follows.  
)
,
( ;
)
|
(
)
|
(
2
1
1
d
d
t
t
t
t
t
N d
moving m
p m
p x x
μ σ
⋅
=
=
−
−
)
 
)
( ,
)
|
(
1
1
−
− ⋅
=
+
t
t
t
t
x x
stopped m
p m
δ
, 
where 
⎩
⎨
⎧
≠
=
=
−
−
−
1
1
1
0
1
)
,
(
t
t
t
t
t
t
x
x
if
x
x
if
δ x x
                 (5) 
 
⎩
⎨
⎧
≠
=
=
−
−
−
−
−
−
1
1
1
1
1
1
)
|
) (
( |
)
|
(
)
|
(
t
t
t
t
t
t
t
t
t
t
t
t
e
e
if
p x x
p e e
e
e
if
p x x
p x x
)
     (6) 
 
V. 
PARTICLE FILTER FOR INDOOR TRACKING 
Particle filters provide a sample-based implementation of 
general Bayes filters [4,5]. The key idea of particle filters is 
to represent posterior over the state xt by sets Xt of M 
weighted samples: Xt = {<xt
[m], wt
[m]> | m = 1, . . ., M}. Here 
each xt
[m] is a sample state, represented by the tuple <et
[m], 
st
[m], dt
[m], mt
[m]> in our work, and wt
[m] is an importance 
weight of the state. Particle filters apply the recursive Bayes 
filter update to estimate posteriors over the state space. The 
basic form of the particle filter updates the posterior of the 
smartphone user’s state according to the algorithm 
summarized in Figure 5. In this algorithm, the probability 
p(xt|xt-1) is the same one defined as motion model in the 
Section IV, while the probability p(zt|xt) is the same one 
defined as observation model in the Section III. The input of 
this algorithm is the particle set Xt-1, along with the most 
recent measurement zt. The algorithm then first constructs a 
temporary particle set 
t
X) by systematically processing each 
particle 
]
[
1
m
tx −
in the input particle set Xt-1. Subsequently, it 
transforms these particles into the set Xt, which approximates 
the posterior distribution of the smartphone user’s state xt. 
Line 4 generates a hypothetical state 
tx [ m ]
for time t based on 
the particle
]
[
1
m
tx −
, and this step involves sampling from the 
distribution p(xt|xt-1). Line 7 calculates for each particle 
tx [ m ]
 
the so-called importance factor, denoted by
w t[ m ]
. The 
importance is the probability of the measurement zt under the 
particle
tx [ m ]
. Line 11 through 15 implemented resampling 
by drawing with replacement M particles from the temporary 
set 
t
X) . 
VI. 
EXPERIMENTAL EVALUATION 
To evaluate the performance of our WiFi localization 
algorithm, we conduct experiments with a WiFi-equipped 
Android smartphone in the same indoor environment as 
shown in Figure 1. The size of the environment is about 52 m  
x 18 m, and the average length of edges on the graph is about 
2.5 m. 
 
1
Algorithm Particle_filter(
Xt−1
, 
tz ) 
2
t
X)
=
t
X ={} 
3
for m=1 to M do
4
// Prediction Step 
5
Sample 
tx[m]
with probability 
)
|
(
p xt xt−1
 
6
// Update Step 
7
tw[m]
= 
)
|
(
[m]
p zt xt
  
8
t
X)
= 
t
X)
 + <
tx[m]
, 
tw[m]
> 
9
endfor 
10
11
for m=1 to M do
12
// Resample Step 
13
Draw i with probability ∝ 
tw[m]
 
14
Add 
tx[i]
to 
t
X  
15
endfor 
16
return 
t
X  
Figure 5. The particle filter algorithm. 
61
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-218-9
COGNITIVE 2012 : The Fourth International Conference on Advanced Cognitive Technologies and Applications

 
A. Accuracy 
In this test, we evaluate the accuracy of our localization 
algorithm by measuring the average error distances during 5 
repeated traverses on along 3 different paths in the 
environment.  Additionally, we investigate how the 
localization accuracy changes as the number of particles 
increases. Figure 6 shows the result of experiments. We find 
out that neither there are remarkable differences in error 
distance among different paths, nor among different particle 
numbers (200 ~ 400). The average error distance for 
individual paths is just about 0.94 m ~ 1.2 m. This result 
makes sure the high accuracy of our WiFi localization 
algorithm. In our experiments, when the number of particles 
is 250, we get the best performance. 
 
 
Figure 6. Number of particles vs. localization error. 
B. Robustness 
In this test, we evaluate the robustness of our WiFi 
localization algorithm by investigating how the localization 
accuracy changes as the number of WiFi access points(APs) 
decreases. Figure 7 shows the result of experiments. 
 
Figure 7. Number of APs vs. localization error. 
 
We find out that until the number of APs decreases from 
16 to 7, the average error distance for individual paths 
remains shorter than 1.5 m. That is, while the number of APs 
decreases to a certain degree, the localization accuracy does 
not decrease remarkably. This result makes sure the high 
robustness of our localization algorithm to meet possible 
changes of the WiFi environment. 
 
VII. CONCLUSIONS 
We proposed a WiFi fingerprint-based localization 
algorithm for indoor user tracking. To track the position of a 
smartphone user in a large continuous environment, our 
algorithm incorporates a graph-based space representation, a 
linear interpolation-based observation model covering over 
the entire space, three component motion models into the 
particle filter framework. Through experiments, we proved 
the high accuracy and robustness of our localization 
algorithm. Our WiFi fingerprint-based localization algorithm 
has the limitation that it needs a large pre-built WiFi 
fingerprint map of the environment. A lot of effort and time 
is necessary to construct such a large WiFi fingerprint map. 
To overcome this limitation, we are now extending our 
algorithm to adopt some techniques [6,7] from SLAM 
research communities. 
ACKNOWLEDGMENT 
This work was supported by the GRRC program of 
Gyeonggi province. 
REFERENCES 
[1] J. Biswas and M. Veloso, "WiFi Localization and Navigation 
for Autonomous Indoor Mobile Robots", Proc. of IEEE 
International Conference on Robotics and Automation  
(ICRA), 2010. [retrieved: June, 2012] 
[2] F. Duvallet and A. D. Tews, "WiFi Position Estimation in 
Industrial Environments Using Gaussian Processes", Proc. of 
IEEE/RSJ Int. Conf. on Intelligent Robots and Systems 
(IROS), 2008. [retrieved: June, 2012] 
[3] B. Ferris, D. Hahnel, and D. Fox, "Gaussian Processes for 
Signal Strength-Based Location Estimation", Proc. of 
Robotics Science and Systems, 2006. [retrieved: June, 2012] 
[4] F. Gustafsson, F. Gunnarsson, N. Bergman, and U. Forssell, 
"Particle Filters for Positioning, Navigation, and Tracking", 
IEEE Transactions on Signal Processing, Vol.50, No.2, pp. 
425-437, 2002. [retrieved: June, 2012] 
[5] S. Thrun, W. Burgard, and D. Fox, Probabilistic Robotics, 
MIT Press, 2005. [retrieved: June, 2012] 
[6] B. Ferris, D. Fox, and N. Lawrence, “WiFi-SLAM Using 
Gaussian Process Latent Variable Models”, Proc. of Int. Joint 
Conf. on Artificial Intelligence (IJCAI), 2007. [retrieved: June, 
2012] 
[7] J. Huang, D. Millman, M. Quigley, D. Stavens, S. Thrun, and 
A. 
Aggarwal, 
“Efficient, 
Generalized 
Indoor 
WiFi 
GraphSLAM”, Proc. of IEEE Int. Conf. on Robotics and 
Automation (ICRA), 2011. [retrieved: June, 2012] 
 
 
 
62
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-218-9
COGNITIVE 2012 : The Fourth International Conference on Advanced Cognitive Technologies and Applications

