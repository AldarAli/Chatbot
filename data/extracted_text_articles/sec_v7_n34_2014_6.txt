Respecting User Privacy in Mobiles: Privacy by Design Permission System for Mobile
Applications
Karina Sokolova∗†, Marc Lemercier∗
∗University of Technology of Troyes
Troyes, France
{karina.sokolova, marc.lemercier}@utt.fr
Jean-Baptiste Boisseau†
†EUTECH SSII
La Chapelle Sain Luc, France
{k.sokolova, jb.boisseau}@eutech-ssii.com
Abstract—The Privacy by Design concept proposes to integrate
respect for user privacy into systems managing user data from the
early design stage. This concept has increased in popularity and
the European Union (EU) is enforcing it with a Data Protection
Directive. Mobile applications have emerged onto the market
and the current law and future directive are applicable to all
mobile applications designed for EU users. It has so far been
shown that mobile applications do not suit the Privacy by Design
concept and lack transparency, consent and security. Current
permission systems are judged as unclear for users. In this
paper, we introduce a novel permission model suitable for mobile
application that respects Privacy by Design. We show that such
adapted permission system can improve not only the transparency
and consent but also the security of mobile applications. Finally,
we propose an example of the use of our system in mobile
application.
Keywords–permission, permission system, mobile, privacy by
design, privacy, transparency, control, Android, iOS, application,
development, software design, pattern, mobility, design, modelling,
trust
I.
INTRODUCTION
The idea of this paper was ﬁrst outlined in [1] and extended
in this article.
Mobile devices continue to gain in popularity. Thousands
of services and applications are proposed on mobile markets
and downloaded every day. Smart devices have a high data
ﬂow, processing and storing large amounts of data including
private and sensitive data. Most applications propose personal-
ized services but simultaneously collect user data even without
the user’s awareness or consent. More and more users feel
concerned about their privacy and care about the services
they use. The survey conducted by TRUSTe in February 2011
shows that smartphone users are concerned about privacy even
more than about security (second in the survey results) [2].
Nowadays, people are aware of the lack of privacy, espe-
cially while using new technological devices where informa-
tion is collected, used and stored en masse (Big Data). Privacy
regulation aiming to control personal data use is in place in
many countries. European Union privacy regulation includes
the European Data Protection Directive (Directive 95/46/EC)
and the ePrivacy Directive. United States regulation includes
the Children’s Online Privacy Protection Act (COPPA) and
the California Online Privacy Protection Act of 2003 (OPPA).
Canada has the Personal Information Protection and Electronic
Documents Act (PIPEDA) concerning privacy.
The Privacy by Design (PbD) notion proposes to integrate
privacy from the system design stage [3] to build privacy-
respecting systems. PbD proves systems can embed privacy
without sacriﬁcing either security or functionality. Some PbD
concepts are already included in European data legislation;
the notion is considered to be enforced in European Data
Protection Regulation, therefore, systems made with PbD are
compliant with the law. An application of PbD notions is
not only a beneﬁt for users but also a legal obligation for
developers.
The PbD concept was ﬁrst presented by Dr Ann Cavoukian.
She proposes seven key principles of PbD enabling the de-
velopment of privacy-respecting systems. The system should
be proactive, not reactive, embed the privacy feature from the
design stage, integrate Privacy by Default, respect user privacy,
data use should be transparent to the end user and the user
should have access to the mechanism of control of his data.
Full functionality and end-to-end security should be preserved
without any sacriﬁce [3].
Mobile privacy was discussed in ’Opinion 02/2013 on apps
on smart devices’ by the Article 29 Data Protection Working
Party [4], in which the opinion on mobile privacy and some
general recommendations were given. The article states that
both the Data Protection Directive and the ePrivacy Directive
are applicable to mobile systems and to all applications made
for EU users. Data Protection Regulation is also applicable
to mobile systems. The article deﬁnes four main problems of
mobile privacy: lack of transparency, lack of consent, poor
security and disregard for purpose limitation.
Many reports such as [5] propose recommendations on
mobile privacy improvement repeating basic privacy notions
(e.g., data minimization, clear notices) but the exact patterns
or technical solutions are missing.
Permission systems are embedded in mobile systems and
are a crucial part of mobile security and privacy. Nowa-
days, permission systems do not follow Privacy by Design
notions. Many works concentrate on analysing and mod-
elling the current permission systems [6][7][8], on improv-
ing current permission systems to give more control to the
user [9][10][11][12] or to add additional transfer permis-
sions [13], on visual representation of permissions [14], on
110
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

user perceptions of current permission systems [15][16][17],
on data ﬂow analyses (possible data leakage detection)
[18][19][20] and on current permission enforcement and veri-
ﬁcation [21][22][23][24].
Few works try to redeﬁne permission systems. In [25],
authors propose an ontology where the right is given to an
actor to take action on data. Rules are deﬁned using SWRL
language. Complex rules forbidding or allowing data access
under a particular condition can be added to the policy. It is
not clear what other action than the ’access’ is supported by
the ontology. A ﬁrewall was implemented on Java and ported
to Android. The perception of users and the applicability to
real applications is not disguised.
Authors of [26] propose a per-data permission system:
more ﬁne grained than Android default permissions. Access
permissions are granted by data stored in SQLite databases
and the access can be restricted by a piece of data - column
(only phone number, only names from contacts) or by group
- raws (only work contacts can be accessed) and mixed - cell.
Privacy policy is expressed with subject having (1) or not
having (0) access to an object. The permission system was
implemented on Android and included used contact list data
access permissions.
Current works are often limited by the data they can
manage (use only geolocation data, SMS, address book, etc.),
number of actions (most include only the ’access’ action).
Most works modify the functionality of current permission
systems: allow permission to be revoked, return fake or empty
data to the functionality. The perception of users and the
applicability to real applications is often not disguised.
To our knowledge no work has been conducted on redeﬁn-
ing the permission system to ﬁt the Privacy by Design notion
or on adding the purpose to permissions.
The remainder of the paper is organized as follows: Section
II describes current permission systems of iOS and Android
and points out problems regarding Privacy by Design. Sec-
tion III introduces our proposal: the pattern of the privacy-
respecting permission system. We show that it can cope with
the transparency, consent and purpose-disregard problems and
also improve security. Section IV shows the application of our
novel permission system to the real mobile application. The
paper ends with a conclusion and future works.
II.
EXISTING MOBILE PERMISSION SYSTEMS
In this section, we present current iOS and Android per-
mission systems and evaluate those systems regarding the PbD
notion. We take into account the full functionality allowed by
the permission system, privacy by default, transparency and
the control notions.
•
Full functionality: possibility to use all functionalities
available on the platform.
•
Privacy by Default: the default conﬁgurations of the
system are privacy protective.
•
Transparency: user should clearly understand what
data is used, how and for what purpose.
•
Control: user should have full control over his personal
data use.
We consider the privacy policy to be very important for the
proactive and transparent system, therefore, we present the
state of application privacy policy in both systems.
A. Permissions
iOS and Android have different strategies in regard to
access to the device data. The iOS platform gives non-native
applications access only to the functionalities listed in privacy
settings: location services, contacts, calendar, reminder, photos,
microphone and Bluetooth (sensitive data, such as SMS and
e-mails are not shared at all). Recently, the connection to
Facebook, Twitter, Flickr and Vimeo was added to the platform
(iOS7). Full functionality is given up for privacy reasons as
applications cannot use the full power of the platform but only
a limited number of functionalities.
An iOS application should have permission to access the
information listed above. By default, an installed application
has no permission granted. The application displays a pop-
up explaining what sensitive data it needs before accessing
it. The user can accept or decline permission. If permission
is declined, the corresponding action is not executed. If the
permission is accepted, the application obtains access to the
corresponding data. The user is asked to grant permission only
once, but he can enable or disable such permission for each
application in privacy settings integrated by default into the
iOS. iOS thereby maintains transparency, control and privacy
by default.
The Android system remains on the sharing principle.
Full functionality is preserved: applications have access to all
native applications’ data and can expose the data themselves.
Applications need permission to access the data, but unlike
iOS, users should accept the full list of permissions before
installing an application. While all permissions are granted, an
application has full access to the related data. Some Android
permissions tagged as ’dangerous’ can be prompted to the user
every time the data is going to be accessed, but it is rarely the
case. Users see the list of dangerous permissions on the screen
before installing the application.
Android proposes more than 100 default permissions and
developers can add supplementary permissions. Multiple works
show that users do not understand many default permissions
and fail to judge the application privacy and security correctly
using the full permission list [15][17]. Permissions do not
clearly show what data is used for and how. Moreover, some
other studies show the abusive usage of Android permissions
by developers [27].
Some users do not check the Android permission list
because they need a service and they know that all permissions
should be accepted to obtain it. Android permission lists
look like a license agreement on a desktop application that
everybody accepts but very few actually read [28].
Android user does not have any control over permis-
sions once the application is installed: permissions cannot
be revoked. Android does not include an iOS-like system
permission manager (privacy settings) by default, therefore,
the user has to enable or disable the entire functionality to
disable access to related data (e.g., Wi-Fi or 3G for Internet
connection; GPS for geolocation) or to use additional privacy
enhancing applications.
111
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

TABLE I
ANDROID AND IOS PERMISSION SYSTEMS COMPARISON
Full Func-
tionality
Default
Settings
Transpa-
rency
Control
Android
+
-
-
-
iOS
-
+
-/+
+
Both iOS and Android default permission systems mostly
inform about data access, but not about any other action that
can be completed with the data. For example, no permission
is needed to transfer the data. Android and iOS include
permissions for functionalities that can be related to personal
data transfer, such as Bluetooth and Internet. Permissions can
be harmless to users, but there is no indication of whether
personal data is involved in a transaction. This decreases the
transparency of both platforms.
Android and iOS permissions do not include purpose ex-
planation. An iOS application helps to understand the purpose
by asking permission while in use, but if an application has
a granted permission once for one functionality it could use
it again for a different purpose without informing the user.
Android users can only guess what permission is used for and
whether the use is legitimate.
Table I shows the system differences regarding four main
privacy notions: full functionality, transparency, control and
privacy by default. One can see that the current Android
permission system is lacking in transparency, control and
default privacy; iOS sacriﬁces functionality and also lack of
transparency. Permissions are often functionality-related and
users fail to understand and to judge them. Personal data use
is unclear and the purpose is missing.
B. Privacy Policy
Users should choose applications they can trust. Apple
ensures that applications available on the market are potentially
harmless, although Android users should judge the application
for themselves with the help of information available on
the market. The AppStore and Google Play provide similar
information: name, description, screenshots, rating and user
reviews.
The transparency and the proactivity of the system can be
improved by including the privacy policy in the store. A user
can be informed about the information collected and stored
before he downloads the application. Without any privacy pol-
icy, the user can hardly evaluate the security and privacy of the
application, only the functionality and stability of the system.
In their feedback, users often evaluate the functionalities and
user interfaces and report bugs, but they rarely indicate privacy
and security problems.
iOS does not require developers to include the privacy
policy in the application but only in applications directed at
children younger than 13 years old. Apple encourages the use
of privacy policy in the App Store Review Guidelines and
iOS Developer Program License Agreement. Apple speciﬁes
that developers should ensure the application is compliant with
all laws of the country the application is distributed in. On
viewing the App Store Review Guidelines one can see that all
Privacy by Design fundamental principles and data violation
possibilities are covered by Apple veriﬁcation. However, the
exact evaluation process used by Apple remains secret and
some privacy-intrusive applications may appear in the store.
Until recently, Apple authorized the use of device identiﬁca-
tion. This identiﬁcation number was not considered private.
Many applications used this number to uniquely identify their
users, therefore, many applications were considered privacy
intrusive [29].
Google Play Terms of Service do not require any pri-
vacy policy to be added to the Android applications. Google
provides an option to include the privacy policy but does
not verify or enforce it. Google Developers Documentation
provides recommendations and warns that the developer has a
responsibility to ensure the application is compliant with the
laws of the countries in which the application is distributed.
Some developers include a license agreement and privacy
policy. According to [30] only 48% of the top 25 Android paid
applications, 76% of the top 25 Android free applications, 64%
of iOS paid applications and 84% of iOS free applications have
included the privacy policy. Android includes the permission
list in the store and this can be considered a privacy policy,
but, as previously discussed, the list is unclear to the ﬁnal user.
III.
PRIVACY-RESPECTING PERMISSION SYSTEM
Mobile phones have signiﬁcant data ﬂow: information can
be received, stored, accessed and sent by the application. Data
can be entered by the user, retrieved from the system sensors
or applications, come from another mobile application, arrive
from servers or from other devices. Data can be shared on the
phone with another application, with servers or other device.
The permission system is integrated into mobile operating
systems; well designed, it makes a proactive privacy-respecting
tool embedded in the system.
We propose to focus permissions on data and the action that
can be carried out on this data, rather than on the technology
used. The deﬁnition of purpose of the data use is included in
our permission system.
Privacy Policy should be short and clear. Users should
have a global vision of the data use and functionalities before
they install an application. Users rarely read long involved
policies, especially when they want a service and feel they
have no choice but to accept all permissions. Our permission
system enables a simple policy to be generated with a list of
permissions.
A. Permission deﬁnition
We model our permission system with an access control
model. We choose discretionary access control where only data
owner can grant access. The user should be able to control the
data, therefore, we consider the user is a unique owner of all
information related to him.
Rapp is a set of rules assigned to the application. We
deﬁne a rule as an assignment of the Right over an Object
to a Subject. The rule triplet is deﬁned as follows:
∀rule ∈ Rapp, rule = (s, r, o)
(1)
where s = Subject, r ∈ Right, o ∈ Objects
112
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

We deﬁne a mobile application as a Subject. Each mobile
application is associated with the unique identiﬁcation number
can be used as a Subject.
Subject = Mobile Application ID
(2)
Objects are the user-related data, such as e-mail, contact list,
name and surname, phone number, address, social networks
friend list, etc. As the permission system is data-centred, the
deﬁnition of data should be as precise as possible.
Objects = {Phone#, Name, Contacts, · · · }
(3)
Each application needs to use a piece of personal data to
perform a particular action and with a speciﬁc goal. Users
give the Right to the application according to this action and
this goal. To deﬁne Right we have to introduce Action and
Purpose.
Each action is one of all the actions, denoted Actions,
that can be carried out on user private data by the application:
load, read, modify, store and transfer. We deﬁne the Actions
as follows:
Actions = {Read, Modify, Load, Store, Transfer}
(4)
where
Read is a read-only access to the data that is already stored
on the phone.
Modify is an action permitting the replacement or update
of a piece of personal data already stored in the system.
Load represents an action bringing new information to the
phone from a distinct server, Internet or mobile sensor such as
GPS, etc.
Store action indicates a new piece of private data will be
saved on the device.
T ransfer action indicates some private data is transmitted
from the device to the server or another device.
Purpose is assigned by the application developer and
depends on the service. For example, purpose could be ’retrieve
forgotten password’, ’display on the screen’, ’calculate the
score’, ’send news’, ’retrieve nearest restaurant’ and ’attach
to the message’.
Purpose = {Retrieve forgotten password, · · · }
(5)
We deﬁne a permission right, denoted Right, for all actions
except the Store action as a combination of one element of
Actions and one element of Purposes.
To respect the minimisation principle, any personal data
should be stored on a mobile device only the period of time that
is necessary for the functionality. We deﬁne the set of rights,
denoted Right, with the action equal to Store having an
additional parameter, time, informing about the time storage.
We deﬁne the period [0, T] as an application lifetime.
∀r ∈ Right, r =
(action, purpose)
if (r∗)
(action, purpose, time)
if (r ∗ ∗)
(6)
(r*) action ∈ Actions − {Store}
(r**) action = Store
where purpose ∈ Purposes, time ∈ [0, T].
The time storage can indicate the number of days, hours
or months data is stored or the time regarding the application
lifecycle: until the application is closed, until the application
is stopped, until the application is uninstalled. All personal
data available during the deinstallation of the application is
deleted regardless of the deﬁned period, as it cannot exceed
the application lifetime.
B. Object: private data
Using existing mobile permissions and mobile forensic
techniques on iOS and Android phones we identiﬁed some
private data that can be accessed on the smartphone by an
application. Below is an exhaustive list of personal information
that can be found on a mobile phone.
Contact list
1)
Type (phone, Facebook, Twitter, Skype) or associated
service names
2)
Name
3)
Surname
4)
Nickname
5)
E-mail
6)
Picture
7)
Address
8)
Website
9)
Company
10)
Birthday
11)
Job title
12)
Signiﬁcant other
Calendar
1)
Calendar name
2)
Appointment subject
3)
Appointment location
4)
Appointment starting date
5)
Appointment ending date
6)
Appointment starting time
7)
Appointment ending time
8)
Appointment status
9)
Appointment notes
10)
Appointment attendees’ full names
SMS
1)
SMS type (incoming, outgoing)
2)
Time
3)
Sender’s Name
4)
Sender’s phone number
5)
Text content
6)
Multimedia content (small images)
MMS
1)
MMS type (incoming, outgoing)
2)
Time
3)
Sender’s Name
4)
Sender’s phone number
5)
Text content
113
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

6)
Multimedia content (images, photos, video, contact
information, etc.)
Call logs
1)
Call type (incoming, outgoing, missed)
2)
Caller’s Name
3)
Caller’s phone number
4)
Voice messages
Location
1)
Exact location: latitude and longitude
2)
Approximate location: latitude and longitude
3)
Address
4)
Street
5)
City
6)
Country
Stored Multimedia
1)
Type (image, audio, video)
2)
Multimedia content
3)
META data (date, geolocation)
Other
1)
Sensors multimedia (newly created image, audio,
video)
2)
Mobile phone usage statistics (last used applications,
conﬁgurations)
3)
Device unique id, SIM id
4)
Web browser history
5)
User accounts information (login, password, tokens)
6)
Documents from external or internal storages
7)
Currently displayed screen (screen shots)
8)
Push messages
9)
Bank account information
10)
Biometric information
11)
Medical records
12)
Social networks and other mobile applications’ data
We identiﬁed 26 Android permissions giving access to per-
sonal data including location, accounts, SMS, MMS, camera,
audio and video content, mobile user activities, calls, contacts,
calendar, saved documents, external storage data and screen
shots. Android group Personal info contains only 16 read and
write permissions where only 5 permissions give read access
to personal data. Other permissions are distributed between
Location, Messages and Hardware control groups. One can see
that very few permissions exist on Android to protect personal
data, compared to the large amount of personal data that can
be available on a mobile device.
C. Permission use restrictions
To reduce the ﬂexibility of permission usage by an appli-
cation and to give more control to the user, we propose to
add to each rule several simple restrictions. Each permission
is associated with permission restrictions under which the user
accepts the permission. Restrictions should be simple for the
user to set up.
Each Restriction contains an action type from the set
of action types denoted ActionTypes. We deﬁne two ac-
tion types: automatic action, denoted Automatic, and an
action that will be explicitly launched by the user, denoted
UserEvent
ActionTypes = {Automatic, UserEvent}
(7)
UserEvent action is launched via the user interface by
the user triggering a particular event. Automatic action is
launched by an application and can include regular access,
update and transfer of the data or automatic insertion of a
complementary piece of data (e.g., automatic attachment of
the geolocation data to the message, automatically ﬁll in the
form, automatically synchronise the data with the server, etc.).
Automatic action can be triggered without any action by the
user.
UserEvent restrictions attach the permission to a partic-
ular user event. We deﬁne Restriction for the UserEvent
action type as follows:
∀res ∈ Restriction,
res = (rule, action − type, user − trigger − event)
(8)
where action − type = UserEvent, rule ∈ Rapp, action −
type = UserEvent and user −trigger −event is a concrete
user event intercepted by an application.
Automatic action can be triggered by the system with a
certain frequency or can be associated with a trigger event
(e.g., send message, create new message, etc.) or both. We
deﬁne Restriction for the Automatic action type as follows:
∀res ∈ Restriction,
res = (rule, action − type, frequency, event)
(9)
where action−type = Automatic, rule ∈ Rapp, frequency
represent the number of times per day/week/month the action
can be performed by an application; event is an event asso-
ciated to the action launch: application is opened, screen is
shown, message is sent (button is clicked), form is ﬁlled in,
etc.
Frequency is not a mandatory parameter. One permission
can have several restrictions: it can be associated with several
different user or application events.
D. Permission state
Each rule should be explicitly asked of the user to be
assigned. Thus, each rule has a State: granted or revoked.
The rule is granted with corresponding restrictions, the rule
is revoked entirely. To respect the Privacy by Default notion
the default State of the permission in installed applications is
Revoked. Only the user can modify the State of permission
with an explicit action via the user interface.
We propose to deﬁne the State as follows:
State(rule, time) =
Granted,
user accepts the rule
Revoked,
user declines the rule
State(rule, 0) = Revoked
(10)
where rule ∈ Rapp, time ∈ ]0, T].
The State of a rule r1 ∈ Rapp changes over the application
lifetime. The diagram in Figure 1 shows an example of state
modiﬁcation.
114
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Figure 1.
Example of state modiﬁcation diagram for a given permission
E. User control
User should have a choice of granting the permission
permanently, of revoking the permission permanently or of
conﬁrming the permission usage with the user each time. We
introduce the rule Check.
Check(rule, time) =
True,
confirmation required
False,
no confirmation
Check(rule, 0) = True
(11)
where rule ∈ Rapp, time ∈ ]0, T]
If the Check parameter is set to True, than the State
passes to Revoked and is ignored by the system. The permis-
sion is granted or revoked each time by the user via the user
interface allowing execution of the functionality, thereby the
Restriction of the permissions is also ignored.
If the Check parameter is set to False, the system veriﬁes
the permission State and Restriction in order to execute the
functionality.
To respect the ’Privacy by Default’ notion we set the default
Check parameter to True.
F. Permissions interconnection
Each permission is associated with the purpose, thereby
each permission is associated with one particular functionality.
Several permissions may be needed to assure one functionality
and the developer can give the user a choice of using one
permission or another. Several permissions can be grouped by
functionality in two ways: all permissions are needed to assure
the functionality.
We deﬁne the GroupType parameter as follows:
GroupType = {ALL, ONE}
(12)
where ALL shows all permissions are necessary to assure the
functionality. ONE shows only one of the listed permissions
is necessary to achieve the functionality.
The ALL parameter can be expressed as a single permis-
sion that should be accepted or declined by the user or by
one activation button grouping all permissions. To respect the
minimisation principle, all permissions linked to a particular
functionality should be Revoked if at least one permission was
declined by the ﬁnal user.
Figure 2.
Activity diagram for the rule deﬁnition
The ONE parameter can be expressed by the user interface
as a group of radio buttons or as one permission with a
drop-down list(s) on parameters that differ from permission
to permission (e.g., data, usage frequency). If at least one
permission is given by the user, the corresponding functionality
will be assured and other permissions will be Revoked. For
example, an application can assure the service with different
types of geolocation data: latitude and longitude, city and the
street name and the city only. Developers can propose that the
user choose one of the types of geolocation data.
Several permissions can be grouped to add dependencies
and an acceptance rule. We deﬁne the Group parameter as
follows:
∀group ∈ Group
group = (group − type, {rulex, ruley, · · · })
(13)
where group − type ∈ GroupType; rulex ∈ Rapp; ruley ∈
Rapp
115
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Figure 3.
Activity diagram: permission management.
G. Permission in action
The developer should deﬁne the permission for all personal
data (Object) used in the application (Subject) before making
the application available on the market. Permission restrictions
and permission groupes should also be deﬁned. Figure 2 shows
the recapitulative schema of the permission deﬁnition.
The permission (rule) is stored inside the application
with its current State and Check parameters. The default
State is Revoked. The default Check is True. Developers
should verify that the permission is fully displayed with
the corresponding object, action, purpose and restrictions and
requested at least once and that the user is able to grant
or revoke this permission. Finally, the user should stipulate
the settings with all rule ∈ Rapp to be able to Grant or to
Revoke individual permissions in later use.
The simple privacy policy can be generated from the list
of deﬁned rules and added to the store.
The activity diagram in Figure 3 shows the permission
management cycle from the permission request to the permis-
sion usage authorisation/non-authorisation.
When one permission is required by the application, sys-
tems ﬁrst veriﬁes the parameter Check. If Check is set
to True the system generates the message including all
information about the required permission. Users can accept
Figure 4. Sequence diagram: ﬁrst use of one permission or a use or permission
in ’user check’ mode.
or to decline the permission as well as switch permission
management to automatic (Set Check to False). According to
the user answer the permission is authorised or non-authorised.
Check is set to False means an automatic permission man-
agement is enabled. System veriﬁes the permission’s Status.
If permission Status is Revoked, then the permission is
non-authorised. If permission Status is Granted, then the
systems check corresponding Restrictions. If Restrictions
are respected, the permission is authorised, otherwise the
permission is non-authorised.
The sequence diagram in Figure 4 shows the one case of
permission management when the permission is used for the
ﬁrst time or the Check parameter is set to True. For example,
the user wants to invite a friend to play a game together,
the application needs permission to access the list of contacts
and full name with emails to send an invitation mail. System
veriﬁes the parameter Check that is set to ’true’. System
generates the message for the user explaining the permission
needed, the user accepts the permission. Now user can choose
the friend he wants to invite.
The sequence diagram in Figure 5 shows the patterns in
Figure 5. Sequence diagram: use of one permission without user conﬁrmation.
116
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Figure 6.
Example of usage modiﬁcation diagram for a given permission
action when the permission is used automatically without user
conﬁrmation: Check parameter is set to False. Permission
that does not require user conﬁrmation can be used by an
application if, and only, the permission status is Granted and
all Restrictions are respected. For example, the user wants to
automatically attach his geolocation (city) to the ﬁrst message
it sends per day. The permission to load the city from the GPS
is needed to attach it to the message. Permission is restricted
with a particular event - create new message - and a frequency,
once per day. When the user creates a new message, the system
veriﬁes the Status of the described permission. As Status is
granted, the system veriﬁes the Restriction - permission was
not used yet today, therefore, the permission use is authorised.
One can see that the time in which permission can be used
by an application is shorter than the time in which permission
is Granted. UserEvent action-type permissions can only be
used following a particular user event, therefore, permission
becomes active only punctually. Automatic permissions are
limited by the deﬁned frequency or an event. The usage
diagram is depicted in Figure 6
IV.
APPLICATION
In this section, we propose an example of permission
system made for the application of trust evaluation of friends
on social networks named Socializer 1.0 [31]. We choose this
application because its service is based on private information
and cannot be anonymous, the PbD notion should be integrated
into this application.
This application needs user friend lists of different social
networks (Facebook, Twitter, LinkedIn) and the contact list
to view friends and mutual friends to calculate the overlap
of friends in different social networks and contact list and to
evaluate the trust of Facebook friends.
The following private data can be used by the application:
1)
List of contacts from mobile address book: name,
surname
2)
Facebook friends list: name, surname
3)
List of mutual Facebook friends for each Facebook
friend: name, surname
4)
Twitter friends list: Name, Surname
5)
Daily Facebook messages for each Facebook friend
6)
Calculated trust score
Contact list is found on the smartphone, therefore, the
application needs an Access right.
r1 = (s, (Read, p1), ContactList)
where s is a Subject deﬁned as the application Socializer 1.0;
pr1 = calculate the trust scores.
The application will load the user contact list on user event:
onClick on the button ”load contact list”.
res1 = (r1, UserEvent, e1)
where e1 is a user event: onClick on the button ’load contact
list’;
Social networking friends lists should usually be retrieved
from the server of a given social network, therefore, the load
and store actions should be deﬁned. The Facebook friends list
with the contact list are essential to assure the overlap and
trust functionality.
r2 = (s, (Load, p1), FacebookFriendList)
r3 = (s, (Store, p1, t1), FacebookFriendList)
res2 = (r2, UserEvent, e2)
res3 = (r3, UserEvent, e2)
where t1 is a storage time deﬁned as: while the application
is installed; e2 is a user event: onClick on the button ”load
Facebook friends list”;
For each Facebook friend, the list of mutual friends with
the user is necessary for trust calculation.
r4 = (s, p1),
FacebookMutualFriendLists)
res4 = (r4, UserEvent, e3)
where e3 is a user event: onItemClick on the user name in the
list of users for trust calculation;
A list of friends from other social networks improves the
scores of overlap and trust.
r5 = (s, (Load, p2), TwitterFriendList)
r6 = (s, (Store, p2, t1), TwitterFriendList)
res5 = (r5, UserEvent, e4)
res6 = (r6, UserEvent, e4)
where e4 is a user event: onClick on the button ”load Twitter
friends list”; p2 = improve the trust score;
r7 = (s, (Load, p2), LinkedInFriendList)
r8 = (s, (Store, p2, t1), LinkedInFriendList)
res7 = (r7, UserEvent, e5)
res8 = (r8, UserEvent, e5)
where e5 is a user event: onClick on the button ”load LinkedIn
friends list”;
The second functionality of the application is to evaluate
the behaviour of Facebook and Twitter friends to indicate
117
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

potentially dangerous contacts. The behaviour evaluation is
calculated by analysing the messages published by the given
friend over time. The application needs a permission to load
messages.
r9 = (s, (Load, p2), TwitterFriendMessages)
res9 = (r9, Automatic, ∅, e6)
res9 = (r9, Automatic, f1, e7)
where p3 is a purpose deﬁned as ’calculate the Twitter friends
behavior’; f1 is an action frequency: ones per day; e6 is a
user event: onSlideDown on the list of messages; e7 is an
application event: onApplicationStarted.
r10 = (s, (Load, p3), NewFacebookFriendMessages)
res10 = (r10, Automatic, ∅, e6)
res10′ = (r10, Automatic, f1 e7)
where p3 is a purpose deﬁned as ’calculate the Facebook
friends behaviour’.
The third functionality proposes to view today Facebook
and Twitter messages on the screen for the user.
r11 = (s, (Store, p4, t2),
TodayTwitterFriendMessages)
res11 = (r11, Automatic, f1 e7)
res11′ = (r11, Automatic, ∅, e6)
where p4 is a purpose deﬁned as ’view today Twitter mes-
sages’; t2 is a storage time deﬁned as: one day.
r12 = (s, (Store, p5, t2),
TodayFacebookFriendMessages)
res12 = (r12, Automatic, f1, e7)
res12′ = (r12, Automatic, ∅, e6)
where p5 is a purpose deﬁned as ’view today Facebook
messages’;
The user has the option of sharing the scores by posting
new messages on Facebook and Twitter. The user can also
contribute to the research by sending the anonymized trust
and behaviour statistics to the developer. Those actions should
be taken with the user’s express consent.
r13 = (s, (Transfer, p6),
FacebookFriendTrustScore)
res13 = (r13, UserEvent, e7)
where p6 is a purpose deﬁned as ’share results on Facebook’;
e7 is a user event: onClick on the button ’share’.
r14 = (s, (Transfer, p7),
FacebookFriendTrustScore)
res14 = (r14, UserEvent, e7)
TABLE II
TABLE RECAPITULATING PERMISSIONS NEEDED FOR THE APPLICATION
(LAST COLUMN IS A PERMISSION GROUP NUMBER)
Object
Action
Purpose
#
Contacts list
Read
Calculate Trust
1
Facebook friends
list
Load;
Store
Facebook mutual
friends
Load
Twitter friends
list
Load;
Store
Improve
Trust
2
LinkedIn friends
list
3
Twitter messages
Load
Tw. friends
behaviour
4
Facebook
messages
Fb. friends
behaviour
5
Today Tw.
messages
Store;
(1 day)
View Tw.
messages
6
Today Fb.
messages
View Fb.
messages
7
Trust score
Transfer
Publish to
Twitter
8
Publish to
Facebook
9
Trust and
behaviour
Transfer
Contribute to
research
10
where p7 is a purpose deﬁned as ’share results on Twitter’.
r15 = (s, (Transfer, p8), AnonymizedTrust)
r16 = (s, (Transfer, p8), AnonymizedBehavior)
res16 = (r16, UserEvent, e8)
where p8 is a purpose deﬁned as ’contribute to the improve-
ment of the methodology’; e8 is a user event: onClick on the
button ’help research’.
The ﬁnal application has 16 rules required by the applica-
tion for full functionality.
Rapp = {r1, r2, r3, · · · , r15, r16}
Those rules can be combined into groups. The rules r1, r2, r3
and r4 have a common purpose, all rules should be accepted to
achieve the functionality mentioned in the purpose: ’calculate
the trust’.
group1 = (ALL, {r1, r2, r3, r4})
Similarly, r5 should be grouped with r6 and r7 with r8.
group2 = (ALL, {r5, r6})
group3 = (ALL, {r7, r8})
The rules from r9 to r16 should be accepted one by one to
achieve the aforementioned purpose (to achieve the function-
ality). Finally, we obtain 10 permissions to be added to the
application to propose control to the user. Table II recapitulates
permissions.
To compare with actual permission systems, (a) iOS
118
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

requires contact list, Facebook and Twitter access permis-
sions. (b) Android requires ’internet’, ’read contacts’ and
’get accounts’ access permissions. Facebook and Twitter con-
nections are managed with APIs that require permissions to be
declared on the platform, but the permission management will
not be available for users in the mobile application by default.
iOS permissions give a certain transparency to the user but
Android permissions are vague.
We obtained more ﬁne-grained control of the application
and the data including permissions to all necessary personal
data, actions carried out on this data and corresponding pur-
poses. The recapitulation table (Table II) clearly shows what
data are used for what purpose. This kind of table can be added
to the privacy policy to improve transparency. Restrictions
should also be added to the table. We did not add restrictions
to the table due to the limited space.
V.
CONCLUSION AND FUTURE WORK
We modelled a permission system for a mobile applica-
tion including Privacy by Design. This permission system is
data-oriented, thus, the ﬁnal user can easily understand what
personal data is involved. We include actions that are missing
from current iOS and Android permission systems, such as
load and transfer, that improve transparency of the application.
We also included simple restrictions to better control data use.
The novelty is to include the purpose of the data use in
the permission system. The clear purpose will help users to
understand better why the data is used and to judge whether
this permission is needed. Purpose in permission also forces
developers to apply the minimization principle: a developer
cannot use the data if he cannot deﬁne the clear purpose of
usage. The compulsory purpose deﬁnition should help guard
against the abusive permission declaration ’in case’. Finally,
purpose gives the user more ﬁne-grained control, as the same
data can be allowed to be used for one functionality but
not for another. It is important for our system to integrate
clear purpose and not a vague explanation (e.g., ’measure the
frequency of application utilization’ instead of ’improve user
experience’).
PbD states that the user should have control over his data
and be Privacy by Default, therefore, permissions used in the
application are revoked by default. Users should be clearly
informed and asked to grant permission. Moreover, users
should keep control of permissions during all the application
use time, therefore, the permission setting must be available.
Our permission system helps developers to be compliant
with the law; it deﬁnes what permissions the developer should
add to the application, but in the current state it cannot
ensure that all necessary permissions are really added. Our
pattern indicates to the developer what should be added to the
application to be more transparent, but if he decides to transfer
data without asking permission, the pattern allows this (even if
it is against European law). The privacy policy generated can
give the ﬁrst indication permitting evaluation if the data use is
reasonable and the purpose is clear. Manual veriﬁcation of an
application can show the anomaly in permission system use.
We aim to build a framework for the automatic manage-
ment of a new permission system to simplify the developers’
work. We target the Android system ﬁrst as it is more crucial
due to the more open communication and data sharing, and
the vagueness of the current permission system.
The impact of new privacy-respective permission systems
on users and developers could be measured by conducting real-
life experiments. We aim to measure the impact of integration
of the new permission system on design and development time,
as well as particular situations and difﬁculties in applying the
pattern. We have an additional hypothesis that the explicative
application with high transparency improves user experience
and leads to more positive perception of the same applica-
tion, therefore the use of our permission system beneﬁts the
application owner.
REFERENCES
[1]
K. Sokolova, M. Lemercier, and J. B. Boisseau, “Privacy by Design
Permission System for Mobile Applications,” in PATTERNS 2014, The
Sixth International Conferences on Pervasive Patterns and Applications,
2014, pp. 89–95.
[2]
TRUSTe. Consumer Mobile Privacy Insights Report. [retrieved: Apr.,
2011]
[3]
A. Cavoukian, “Privacy by design: The 7 foundational principles,” 2009.
[4]
E. data protection regulators, “Opinion 02/2013 on apps on smart
devices,” EU, Tech. Rep., Feb. 2013.
[5]
K. D. Harris, “Privacy on the go,” California Department of Justice,
Jan. 2013, pp. 1–27.
[6]
W. Shin, S. Kiyomoto, K. Fukushima, and T. Tanaka, “Towards For-
mal Analysis of the Permission-Based Security Model for Android,”
in Wireless and Mobile Communications, 2009. ICWMC ’09. Fifth
International Conference on. IEEE Computer Society, 2009, pp. 87–92.
[7]
K. W. Y. Au, Y. F. Zhou, Z. Huang, P. Gill, and D. Lie, “Short paper:
a look at smartphone permission models,” in SPSM ’11 Proceedings
of the 1st ACM workshop on Security and privacy in smartphones and
mobile devices.
ACM, Oct. 2011, pp. 63–67.
[8]
R. Stevens, J. Ganz, V. Filkov, P. T. Devanbu, and H. Chen, “Asking
for (and about) permissions used by Android apps,” MSR, 2013, pp.
31–40.
[9]
A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “MockDroid: trad-
ing privacy for application functionality on smartphones,” in HotMobile
’11: Proceedings of the 12th Workshop on Mobile Computing Systems
and Applications, ser. HotMobile ’11.
ACM, Mar. 2011, pp. 49–54.
[10]
P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, “These
aren’t the droids you’re looking for: retroﬁtting android to protect
data from imperious applications,” in Proceedings of the 18th ACM
conference on Computer and communications security, ser. CCS ’11.
ACM, Oct. 2011, pp. 639–652.
[11]
M. Nauman, S. Khan, and X. Zhang, “Apex: extending Android
permission model and enforcement with user-deﬁned runtime con-
straints,” in ASIACCS ’10: Proceedings of the 5th ACM Symposium
on Information, Computer and Communications Security.
ACM, Apr.
2010, pp. 328–332.
[12]
Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh, “Taming Information-
Stealing Smartphone Applications (on Android),” in Trust and Trust-
worthy Computing.
Berlin, Heidelberg: Springer Berlin Heidelberg,
2011, pp. 93–107.
[13]
S. Holavanalli et al., “Flow Permissions for Android,” in Automated
Software Engineering (ASE), 2013 IEEE/ACM 28th International Con-
ference on, 2013, pp. 652–657.
[14]
J. Tam, R. W. Reeder, and S. Schechter, “Disclosing the authority
applications demand of users as a condition of installation,” Microsoft
Research, 2010.
[15]
S. Egelman, A. P. Felt, and D. Wagner, “Choice Architecture and
Smartphone Privacy: There’s a Price for That,” in Proceedings of the
11th Annual Workshop on the Economics of Information Security
(WEIS), 2012.
119
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

[16]
M. Lane, “Does the android permission system provide adequate
information privacy protection for end-users of mobile apps?” in 10th
Australian Information Security Management Conference, Dec. 2012,
pp. 65–73.
[17]
P. G. Kelley et al., “A conundrum of permissions: Installing applications
on an android smartphone,” in Proceedings of the 16th International
Conference on Financial Cryptography and Data Security, ser. FC’12.
Berlin, Heidelberg: Springer-Verlag, 2012, pp. 68–79.
[18]
A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in CCS ’11: Proceedings of the 18th ACM
conference on Computer and communications security.
ACM, Oct.
2011, pp. 627–638.
[19]
M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS: Detecting Privacy
Leaks in iOS Applications.” 2011.
[20]
C. Gibler, J. Crussell, J. Erickson, and H. Chen, “AndroidLeaks: Auto-
matically Detecting Potential Privacy Leaks in Android Applications
on a Large Scale,” in Trust and Trustworthy Computing.
Berlin,
Heidelberg: Springer Berlin Heidelberg, 2012, pp. 291–307.
[21]
T. Vidas, N. Christin, and L. Cranor, “Curbing android permission
creep,” in In W2SP, 2011.
[22]
Y. Zhang et al., “Vetting undesirable behaviors in android apps with
permission use analysis,” in CCS ’13: Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security.
ACM,
Nov. 2013, pp. 611–622.
[23]
W. Xu, F. Zhang, and S. Zhu, “Permlyzer: Analyzing permission usage
in Android applications,” Software Reliability Engineering (ISSRE),
2013 IEEE 24th International Symposium on, 2013, pp. 400–410.
[24]
W. Luo, S. Xu, and X. Jiang, “Real-time detection and prevention
of android SMS permission abuses,” in SESP ’13: Proceedings of
the ﬁrst international workshop on Security in embedded systems and
smartphones.
ACM, May 2013, pp. 11–18.
[25]
J. Vincent, C. Porquet, M. Borsali, and H. Leboulanger, “Privacy Pro-
tection for Smartphones: An Ontology-Based Firewall,” in Information
Security Theory and Practice. Security and Privacy of Mobile Devices
in Wireless Communication.
Berlin, Heidelberg: Springer Berlin
Heidelberg, 2011, pp. 371–380.
[26]
S. Bugiel, S. Heuser, and A.-R. Sadeghi, “mytunes: Semantically linked
and user-centric ﬁne-grained privacy control on android,” Center for
Advanced Security Research Darmstadt, Tech. Rep. TUD-CS-2012-
0226, Nov. 2012.
[27]
A. P. Felt, K. Greenwood, and D. Wagner, “The effectiveness of appli-
cation permissions,” in WebApps’11: Proceedings of the 2nd USENIX
conference on Web application development.
USENIX Association,
Jun. 2011, pp. 7–7.
[28]
R. B¨ohme and S. K¨opsell, “Trained to accept?: a ﬁeld experiment on
consent dialogs,” in CHI ’10: Proceedings of the SIGCHI Conference
on Human Factors in Computing Systems. ACM, Apr. 2010, pp. 2403–
2406.
[29]
E. Smith, “iPhone applications and privacy issues: An analysis of
application transmission of iPhone unique device identiﬁers UDIDs,”
October 2010.
[30]
“Mobile Apps Study,” Future of Privacy Forum (FPF), pp. 1–16, Jun.
2012.
[31]
C. Perez, B. Birregah, and M. Lemercier, “A smartphone-based online
social network trust evaluation system,” Social Network Analysis and
Mining, vol. 3, no. 4, 2013, pp. 1293–1310.
120
International Journal on Advances in Security, vol 7 no 3 & 4, year 2014, http://www.iariajournals.org/security/
2014, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

