145
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Incremental veriﬁcation of consistency properties of large-scale workﬂows from
the perspectives of control ﬂow and evidence life cycles ∗
Osamu Takaki, Izumi Takeuti, Takahiro Seino, Noriaki Izumi and Koichi Takahashi
National Institute of Advanced Industrial Science and Technology (AIST)
2-41-6 Aomi, Koto-ku, Tokyo 135-0064, Japan
{o-takaki, takeuti.i, seino-takahiro, n.izumi, k.takahashi}@aist.go.jp
Abstract
We investigate consistency properties of workﬂows from
the perspectives of control ﬂow and evidence life cycles
for incremental veriﬁcation for large-scale workﬂows. For
modeling complicated business processes in developing
large-scale information systems, it needs to develop large-
scale workﬂows that consist of a lot of small workﬂows. As
a workﬂow becomes larger and larger, it becomes harder
and harder to verify the workﬂow. Therefore, it is useful
to verify large-scale workﬂows “incrementally”, that is, to
verify small workﬂows before they are integrated to form the
large-scale workﬂows. However, in order to verify a work-
ﬂow incrementally, it is necessary to consider consistency
properties of not only a whole workﬂow but also a subgraph
of the whole workﬂow.
Thus, we extend the correctness
property of acyclic workﬂows to that of acyclic workﬂows
with multiple starts and/or ends. Correctness of workﬂows
is one of the most important consistency properties for im-
proving workﬂow quality from the control ﬂow perspective.
Extended correctness is a natural extension of the original
correctness property and is preserved in the vertical com-
position and vertical division of workﬂows. We also deﬁne
a consistency property for evidence life cycles in workﬂows
with multiple starts. Moreover, in order to validate the con-
sistency properties above for incremental veriﬁcation, we
investigate real workﬂows and explain how to verify the
consistency properties by using an example.
Keywords: workﬂow, veriﬁcation, correctness, evidence
life cycle, incremental veriﬁcation
∗This work was supported by ’Service Research Center Infrastructure
Development Program 2008’ from METI and Grant-in-Aid for Scientiﬁc
Research (C) 20500045.
1. Introduction
For developing large-scale information systems, it needs
to model business processes that the systems support. A
workﬂow, or a workﬂow diagram, is one of the most well
known speciﬁcations for modeling of business processes.
As business processes become more and more complicated,
the workﬂows for modeling them become larger and larger.
In the requirements analysis stage of developing large-scale
information systems, for example, a number of engineers
are needed for developing the workﬂows, which are divided
into a number of smaller workﬂows. As a result, it has be-
come harder for an engineer to verify the overall workﬂow
in one operation. A method is thus needed for verifying
large-scale workﬂows. One approach is to develop and ver-
ify workﬂows in parallel. We call such an approach “in-
cremental veriﬁcation”. For incremental veriﬁcation, small
workﬂows should be veriﬁed before they are integrated to
form a large scale workﬂow. However, in order to verify
a workﬂow incrementally, it is necessary to consider con-
sistency properties of not only a whole workﬂow but also
a subgraph of the whole workﬂow, that can not completely
satisfy the deﬁnition of a usual workﬂow. Thus, it needs to
re-consider conventional consistency properties of a work-
ﬂow from several perspectives.
Verifying the consistency of workﬂows from the control
ﬂow perspective is important, and several consistency prop-
erties have been deﬁned and several veriﬁcation methods
have been developed. Correctness is one of the most stan-
dard consistency properties of acyclic workﬂows from the
control ﬂow perspective [10] (also [6] and [17]). However,
these properties and methods can only be used to verify the
overall workﬂow as a whole, not to incrementally verify
workﬂows.
In this paper, we extend the correctness property to en-
able us to verify workﬂows incrementally.
We consider
workﬂows with multiple starts and/or multiple ends and ex-
tend the correctness of existing workﬂows to that of the ex-
tended workﬂows. A workﬂow in standard workﬂow lan-

146
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
guages, such as XPDL [23] and YAWL [19], has a sin-
gle start and a single end. Veriﬁcation of the consistency
properties of workﬂow subgraphs requires consideration of
workﬂows that may have multiple starts and/or multiple
ends.
Extended correctness is a natural extension of the orig-
inal correctness. Extended correctness is preserved in the
vertical composition and division of the workﬂows. Ex-
tended correctness is a necessary and sufﬁcient condition
for obtaining a workﬂow with a single start and a single
end. The workﬂow is correct in the sense of the original cor-
rectness property. It is obtained from a workﬂow satisfying
extended correctness by appending appropriate workﬂows.
This paper is based on a previous one [13]. The main
difference between them is the deﬁnition of a consistency
property of evidence life cycles in a workﬂow with mul-
tiple starts and/or multiple ends. Here “evidence” means
an annotation on a workﬂow, which denotes a document
on which information is written, and/or with which some-
thing is approval, during the process of an operation. In
[12] and [14], this property for a workﬂow with a single
start is deﬁned, based on “instances” of the workﬂow. We
deﬁne the property for a workﬂow with multiple starts, by
using “closed” subgraphs of the workﬂow. We deﬁne closed
subgraphs of a workﬂow in this paper, while instances of a
workﬂow are deﬁned elsewhere [9]. Given this consistency
property, one can incrementally check evidence life cycles
in a workﬂow with multiple starts.
This paper also generalizes preservation theorems of ver-
tical composition and workﬂow division (see Theorem 4.2
in this paper or ([13], Theorem 4.2)). This generalization,
which is described in Theorem 4.4 in this paper, is easier to
understand than that previously presented ([13], Appendix
B).
The remainder of this paper is organized as follows. We
deﬁne workﬂows with multiple starts and/or multiple ends
and deﬁne vertical composition and workﬂow division in
Section 2. We give a deﬁnition of an extended version of the
original correctness property over acyclic workﬂows with a
single start and a single end in Section 3. We refer to this
correctness property as “extended correctness”. We show
the fundamental theorems of extended correctness in Sec-
tion 4. We also give a deﬁnition of consistency of evidence
life cycles in a workﬂow with multiple starts and/or multiple
ends in Section 5. The deﬁnition is based on the previous
one for a workﬂow with a single start [12]. We discuss the
validity of extended correctness, consistency of evidence
life cycles and incremental workﬂow veriﬁcation based on
the consistency properties in Section 6. Using an example,
we investigate real workﬂows and explain how to incremen-
tally verify control ﬂow consistency for a large workﬂow.
We discuss related work in Section 7 and summarize the
key points in 8.
Figure 1. Shapes of nodes in workﬂows
2. Workﬂows
In this section, we deﬁne workﬂows. Moreover, we de-
ﬁne certain composition and division of workﬂows. Work-
ﬂows in this paper are essentially the same as those in pre-
vious studies such as [10], [6] and [17], except the point
that a workﬂow in this paper may have multiple starts and
ends. There are several languages of workﬂows with multi-
ple starts and ends (see Section 7).
In this paper, we discuss workﬂows only on the control
ﬂow perspective. Therefore, we omit notions that are not
relevant to control ﬂow of workﬂows. For example, in this
paper we do not consider data ﬂow or actors in workﬂows.
Deﬁnition 2.1 (Workﬂows) A workﬂow denotes a directed
graph W := (node, arc) that satisﬁes the following prop-
erties.
1. node is a non-empty ﬁnite set, whose element is
called a node in W.
2. arc is a non-empty ﬁnite set, whose element is called
an arc in W. Each arc f is assigned to a node called a
source of f and another node called a target of f.
3. Each node is distinguished, as follows: trigger, ter-
minal, input, output, activity, XOR-split, XOR-join,
AND-split and AND-join.
We employ the symbols in Figure 1 to describe nodes
in a workﬂow in this paper.
4. Whenever an arc f has a node x as the target (or the
source) of f, x has f as an incoming-arc (resp. an
outgoing-arc) of x. The numbers of incoming-arcs and
outgoing-arcs of a node are determined by the type of
the node. We itemize them in the following table.
incoming-arcs
outgoing-arcs
trigger, input
0
1
terminal, output
1
0
activity
1
1
XOR-, AND-split
1
≧ 2
XOR-, AND-join
≧ 2
1
Table 1. Numbers of incoming- and outgoing-
arcs of a node
5. W has at least one start and at least one end.

147
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
6. For a node x in W, there exists a trigger or an input
s and a path on W from s to x, where a path π from
s to x denotes a sequence π = (f0, . . . , fn) of arcs in
W such that the source of f0 is s, the target of fn is x
and that the target of fi is the source of fi+1 for each
i < n. Moreover, there exists a terminal or an output e
and another path on W from x to e.
Remark 2.2 In the previous paper [13], a workﬂow W is
restricted to be a connected graph. That is, [13] assumes
that, for each nodes x and y in W, there exists a sequence
(x0, . . . , xn) consisting of nodes of W such that x0 = x,
xn = y and that there exists an arc in W between xi and
xi+1 for each i < n.
However, in this paper, we also
consider a workﬂow which is not connected. The reason
why we consider some unconnected graphs as workﬂows is
only because we have to consider unconnected workﬂows
in Theorem 4.4 in Section 4. Actually, one can regard a
workﬂow as a connected graph when they do not consider
the theorem above.
Remark 2.3 In what follows, triggers and inputs are called
“start nodes” or “starts”. Moreover, terminals and outputs
are called “end nodes” or “ends”.
WF(n, m) denotes the set of all workﬂows with n starts
and m ends and WF := ∪
n,m WF(n, m). For a subgraph
V of a workﬂow W, arc(V ) denotes the set of all arcs in
V , start(V ) the set of all starts in V and end(V ) the set
of all ends in V .
We next deﬁne vertical composition and division of
workﬂows.
Deﬁnition 2.4 (Vertical composition of workﬂows) Let
W1, W2 ∈ WF, E ⊂ end(W1) and S ⊂ start(W2).
Moreover, assume that there exists a bijection f from E to
S. Then, W1 ∗f W2 denotes the workﬂow obtained from
W1 and W2 by executing the following procedures.
(1) Remove all ends of E and their incoming-arcs.
(2) Remove all starts in S and their outgoing-arcs.
(3) For the source x of the incoming-arc of each end e in E
and the target y of the outgoing-arc of each start f(e)
in S, add the arc from x to y.
W1 ∗f W2 is called the vertical composition of W1
and W2 by f, and the arcs made in (3) above are called
connecting-arcs from W1 to W2 by f.
For simplicity, in the remainder of this paper, we omit
“f” in W1 ∗f W2 and identify each e ∈ E with f(e) ∈ S.
Example 2.5 The workﬂow in Figure 2 is the vertical com-
position of workﬂows W1 and W2, where the bijection
function is expressed by two dot-lines in Figure 2, which
maps e1 to s1 and e3 to s2.
Figure 2. Vertical composition of workﬂows
Remark 2.6 In fact, all elements of E should be output
nodes and those of S input nodes. However, it is not im-
portant to distinguish terminal nodes and output nodes (or
trigger nodes and input nodes). Therefore, for simplicity, in
the remainder of this paper, we assume that a start node de-
notes an input node only and an end node denotes an output
node only, respectively.
Deﬁnition 2.7 (Vertical division of workﬂows) For a
workﬂow W, if there exist workﬂows W1 and W2 with
W = W1 ∗ W2, then W is said to be vertically divided
into W1 and W2.
3. Correctness and extended correctness
In this section, we explain correctness of workﬂows with
a single start, which is deﬁned in [10], and deﬁne an ex-
tended version of correctness, which we call extended cor-
rectness, and which is deﬁned on workﬂows with multiple
starts and multiple ends. Several basic theorems of extended
correctness is shown in Appendix A.
In the remainder of this paper, we consider only acyclic
workﬂows, which have no loop. In what follows, a work-
ﬂow denotes an acyclic workﬂow.
Deﬁnition 3.1 For a workﬂow W and a start s in W, an
instance of W from s denotes a subgraph V of W that sat-
isﬁes the following properties.
(1) V contains s but does not contain any start except s.
Moreover, for each x ∈ V , there is a path on V from s
to x.
(2) If V contains an XOR-split c, then V contains a single
outgoing-arc of c.
(3) If V contains a node c other than XOR-split, then V
contains all outgoing-arcs of c.
For a workﬂow W, INS(W) denotes the set of all in-
stances of W and INS(W, s) the set of all instances of W
from s.

148
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Figure 3. Four workﬂows
Example 3.2 We explain instances of workﬂows, by using
the four workﬂows in Figure 3.
(1) The workﬂow WI has three instances U I
1, U I
2 and U I
3,
where U I
1 is the path from the start s1 to the end e1, U I
2
is the path from s2 to e1 and U I
3 is the path from s2 to
e2.
(2) The workﬂow WII has similar instances U II
1 , U II
2 and
U II
3 to those in WI.
(3) The workﬂow WIII has two instances U III
1
and U III
2 ,
where U III
1
is the path from s1 to e1, and U III
2
consists
of the path from s2 to e1 and that from s2 to e2.
(4) The workﬂow WIV has similar instances U IV
1
and U IV
2
to those in WIII.
Deﬁnition 3.3 Let W be a workﬂow.
(1) A subgraph V of W is said to be deadlock free if, for
every AND-join r in V , V contains all incoming-arcs
of r.
(2) A subgraph V of W is said to be lack of synchroniza-
tion free if, for every XOR-join m in V , V contains a
single incoming-arc of m.
Correctness is a consistency property of workﬂows in the
viewpoint of control ﬂow of them (cf. [10] or [17]). This
property was deﬁned on workﬂows with a single start and
a single end in [10] and [17]. One can easily extend cor-
rectness into that over workﬂows with a single start and
multiple ends by using instances of W. So, we consider
correctness as a consistency property of a workﬂow that has
a single start but may have multiple ends.
Deﬁnition 3.4 (Sadiq and Orlowska [10]) A workﬂow W
with a single start is said to be correct if every instance V
of W is deadlock free and lack of synchronization free.
From now, we extend the correctness property above for
workﬂows with multiple starts and/or multiple ends. In or-
der to deﬁne the extended correctness, we introduce some
basic concepts.
Deﬁnition 3.5 For a workﬂow W and a non-empty sub-
graph V of W, V is said to be closed if each node x in
V satisﬁes the following properties.
(1) If x is an XOR-split, then V contains a single outgoing-
arc of x and the incoming-arc of x.
(2) If x is an XOR-join, then V contains a single incoming-
arc of x and the outgoing-arc of x.
(3) Otherwise,
V
contains all incoming-arcs and all
outgoing-arcs of x.
For a workﬂow W and a set of starts in W, CL(W)
denotes the set of all closed subgraphs of W and CL(W, S)
the set of all closed subgraphs V of W with start(V ) = S.
Note that, unlike instances of workﬂows, a closed sub-
graph of a workﬂow may not be connected as a graph.
Example 3.6 We explain closed subgraphs of workﬂows,
by using the previous four workﬂows in Figure 3.
(1) All instances U I
1, U I
2 and U I
3 of WI are also closed sub-
graphs of WI. Moreover, U I
1 ∪ U I
3 is an unconnected
closed subgraph of WI.
(2) The workﬂow WII has two closed subgraphs U II
1 ∪ U II
2
and U II
3 in Example 3.2.2.
(3) All instances U III
1
and U III
2
of WIII are also closed sub-
graphs of WIII.
(4) WIV has a single closed subgraph, that is WIV itself.
Deﬁnition 3.7 Let W be a workﬂow.
(1) For U1, U2 ∈ INS(W), U1 and U2 are said to con-
ﬂict on an XOR-split c if U1 and U2 share c but the
outgoing-arc of c in U1 differs from that in U2.
(2) Let U be a set of some instances of W and c an XOR-
split. Then, U is said to conﬂict on c if there exists a
pair (U, U ′) on U that conﬂicts on c.
Deﬁnition 3.8 Let W be a workﬂow and S be a non-empty
subset {s1, . . . , sn} of start(W). Then, S is called an in-
port of W if S satisﬁes the following properties: for each
Ui ∈ INS(W, si) (i = 1, . . . , n), if {U1, . . . , Un} is not
conﬂict on any XOR-split in W, then U1∪· · ·∪Un is closed.

149
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Example 3.9 We explain in-ports of workﬂows, by using
the previous four workﬂows in Figure 3.
(1) There are three non-empty subsets of start(WI): {s1},
{s2} and {s1, s2} (= start(WI)). INS(WI, s1) =
{U I
1} and U I
1 is a closed subgraph by Example 3.6.1.
So, {s1} is an in-port of WI. Similarly, {s2} is also an
in-port of WI. However, {s1, s2} is not an in-port of
WI, since {U I
1, U I
2} is not conﬂict on any XOR-split in
WI, but U I
1 ∪ U I
2 is not closed (cf. Examples 3.2.1 and
3.6.1).
(2) WII, too, has three non-empty subsets {s1}, {s2} and
{s1, s2} of start(WII). However, {s1} is not an in-
port of WII, since {U II
1 } is not conﬂict on any XOR-
split in WII, but U II
1
is not closed (cf.
Examples
3.2.2 and 3.6.2). Similarly, {s2} is not an in-port of
WII. Moreover, {s1, s2} is not an in-port of WII, since
{U II
1 , U II
3 } is not conﬂict on any XOR-split in WII, but
U II
1 ∪ U II
3 is not closed.
(3) WIII has two in-ports {s1} and {s2}.
However,
{s1, s2} is not an in-port of WIII, since {U III
1 , U III
2 }
is not conﬂict on any XOR-split in WII, but U III
1
∪ U III
2
is not closed (cf. Examples 3.2.3 and 3.6.3).
(4) WIV has a single in-ports {s1, s2} (cf. Examples 3.2.4
and 3.6.4).
Deﬁnition 3.10 Let W be a workﬂow and I a subset of the
power set of start(W). Then, W is said to satisfy extended
correctness for I if the following properties hold.
(1) I is a set of some in-ports of W.
(2) start(W) is covered with I, that is, every s
∈
start(W) is contained in some element of I.
We call the I above a covering in-port family of W.
Deﬁnition 3.11 A workﬂow W is said to satisfy extended
correctness if W satisﬁes extended correctness for some
covering in-port family.
Deﬁnition 3.12 Let W be a workﬂow.
(1) For an in-port I of W, the set {end(V )|V
∈
CL(W, I)} is called the out-port family of W for I and
denoted by O(W, I).
(2) For an in-port family I of W, the set {(I, O(W, I))|I ∈
I} is called the out-port assignment of W to I and de-
noted by O∗(W, I).
For the assignment O∗(W, I) of a workﬂow W to an in-
port family I, ∪ O∗(W, I) denotes ∪
I∈I O(W, I), that is
the set of all out-ports of W for all in-ports in I. That is,
∪ O∗(W, I) = {end(V )|V ∈ CL(W, I) & I ∈ I}.
Example 3.13 We explain extended correctness of work-
ﬂows and out-port assignments of them, by using the previ-
ous four workﬂows in Figure 3.
(1) By Example 3.9.1, WI satisﬁes extended correctness for
{{s1}, {s2}}. Moreover,
O∗(WI, {{s1}, {s2}}) =
{({s1}, {{e1}}), ({s2}, {{e1}, {e2}})}.
(2) By Example 3.9.2, WII does not satisfy extended cor-
rectness.
(3) In the same way as WI, WIII satisﬁes extended correct-
ness for {{s1}, {s2}}. Moreover,
O∗(WIII, {{s1}, {s2}}) =
{({s1}, {{e1}}), ({s2}, {{e1, e2}})}.
(4) By Example 3.9.4, WIV satisﬁes extended correctness
for {{s1, s2}}. Moreover,
O∗(WIV, {{s1, s2}}) = {({s1, s2}, {{e1, e2}})}.
4. Fundamental theorems of extended correct-
ness
In this section, we show fundamental theorems of ex-
tended correctness. These theorems are utilized for incre-
mental veriﬁcation for large-scale workﬂows. Proofs of the
theorems in this section are shown in Appendix A.
The ﬁrst theorem shows that extended correctness is a
conservative extension of original correctness.
Theorem 4.1 For a workﬂow W with a single start, W is
correct if and only if W satisﬁes extended correctness.
Theorem 4.1 insures that extended correctness adequate
property to be a natural extension of original correctness.
We next show that extended correctness is preserved by
vertical composition and division of workﬂows. For sim-
plicity, we ﬁx workﬂows W1, W2, a non-empty subset E0
of end(W1), a non-empty subset S0 of start(W2), and as-
sume that there exists a bijection f : E0 → S0. We also
identify E0 with S0 and abbreviate the vertical composition
W1 ∗f W2 to W1 ∗ W2.
We ﬁrst show the theorem above in a special case (The-
orem 4.2), and then show that in the general case (Theorem
4.4).
Theorem 4.2 Assume that end(W1) = E0(= S0) =
start(W2) and let I be a covering family of start(W1).
Then, the vertical composition W1 ∗ W2 satisﬁes extended
correctness for I if and only if
(1) W1 satisﬁes extended correctness for I, and
(2) W2 satisﬁes extended correctness for ∪ O∗(W1, I).

150
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Figure 4. Obvious extension of a workﬂow
Deﬁnition 4.3 Let W be a workﬂow, and for i = 1, . . . , n,
let fi be an arc with source a start node and with tar-
get an end node.
Then, the obvious extension of W by
{f1, . . . , fn}, which is described by W[f1, . . . , fn], denotes
the unconnected workﬂow obtained from W by adding arcs
f1, . . . , fn.
We illustrate W[f1, . . . , fn] by Figure 4.
Theorem 4.4 Let S2 := start(W2) − S0 1 and I be a cov-
ering family of start(W1) ∪ S2. Then, the vertical com-
position W1 ∗ W2 satisﬁes extended correctness for I if and
only if
(1) W1 satisﬁes extended correctness for
{I ∩ start(W1)|I ∈ I & I ∩ start(W1) ̸= ∅}.
(2) W2 satisﬁes extended correctness for
{O ∩ start(W2) | O ∈
∪
O∗(W1[f1, . . . , fk], I)
& O ∩ start(W2) ̸= ∅},
where f1, . . . , fk denote arcs with source a start node and
with target an end node (see Figure 5).
Theorems 4.2 and 4.4 claim that one can verify extended
correctness of a workﬂow W := W1 ∗ · · · ∗ Wn by calcu-
lating of the in-port families and the out-port assignments
of W1, . . . , Wn. In the usual case, the calculation is not so
complicated since most workﬂows have at most three start
nodes (see Section 6).
Example 4.5 Consider WI, WIII and WIV in Figure
3.
Then, by the function f
:
{e1, e2}
→
{s1, s2}
with f(e1)
=
s1 and f(e2)
=
s2, one can con-
sider nine vertical compositions WX ∗ WY ,
where
X and Y
are I, III or IV, respectively.
By Exam-
ple 3.13,
∪ O∗(WI, {{s1}, {s2}})
=
{{e1}, {e2}},
∪ O∗(WIII, {{s1}, {s2}})
=
{{e1}, {e1, e2}}
and
∪ O∗(WIV, {{s1, s2}})
=
{{e1, e2}}.
Therefore, by
Theorem 4.2, WI ∗ WI, WI ∗ WIII and WIV ∗ WIV satisfy
extended correctness, but there is no other composition that
satisﬁes extended correctness.
1For sets X and Y , “X − Y ” denotes the difference set {x ∈ X|x ̸∈
Y }.
Figure 5. W1[f1, . . . , fk]∗W2[g1, . . . , gm] (= W1 ∗
W2)
Figure 6. Another type of composition
On the other hand, since WII does not satisfy extended
correctness (see Example 3.13.2), one can obtain no work-
ﬂow satisfying extended correctness by composing WII and
any workﬂow.
Remark 4.6 It is not a trivial problem whether a consis-
tency property of workﬂows is preserved in certain compo-
sition or division of them. As an example, we give another
composition WA♯WB of workﬂows WA and WB in the way
of Figure 6. Note that there exists control ﬂow between WA
and WB in both directions. While WA does not satisfy ex-
tended correctness, WA♯WB satisﬁes extended correctness.
Therefore, the composition does not satisfy a property sim-
ilar to Theorem 4.2 (or Theorem 4.4).
As the last part of this section, we deﬁne “extensible
property” of workﬂows and show that the property is equiv-
alent to extended correctness.
Deﬁnition 4.7 For a workﬂow W, W is said to be exten-
sible if there exists a workﬂow W0 such that W0 ∗ W is
correct.
Theorem 4.8 For a workﬂow W, W is extensible if and
only if W satisﬁes extended correctness.

151
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
If a workﬂow W is extensible, it is possible that one can
complete a correct workﬂow (with a single start) from W
by extending W “vertically”. On the other hand, Theorem
5.1 in [4] assures that one can modify a correct workﬂow
W with a single start and multiple ends to that with a sin-
gle start and a single end, which is essentially equivalent to
W. So, Theorem 4.8 assures that, if W satisﬁes extended
correctness, one can complete a correct workﬂow with a
single start and a single end by extending W vertically and
modifying the extended workﬂow in the way in the proof of
Theorem 5.1 in [4].
Theorem 4.8 also assures that, if a workﬂow W does not
satisfy extended correctness, one can not complete any cor-
rect workﬂow from W by extending W vertically. For ex-
ample, since WII in Figure 3 does not satisfy extended cor-
rectness, one can not complete any correct workﬂow from
WII by extending it vertically. This means that, if one likes
to complete a correct workﬂow from WII, one has to modify
WII itself. So, it is useful to check extended correctness of
an incomplete workﬂow (= a workﬂow with multiple starts
and/or multiple ends) in the making of a correct workﬂow,
since one may have an opportunity to modify structure of
the incomplete workﬂow before it grows too large to mod-
ify the structure easily.
5. Consistency of evidence life cycles in a work-
ﬂow with multiple starts
In the previous papers [12] and [14], we deﬁne a consis-
tency property of life cycles of “evidences” in a workﬂow
with a single start. We here deﬁne a similar consistency
property for a workﬂow with multiple starts.
“evidence” is a technical term which means an annota-
tion on a workﬂow, which denotes a document on which
information is written, and/or with which something is ap-
proval, during the process of an operation. For simplicity,
we often call such documents themselves “evidences”. In
large organizations such as large governments, evidences
such as order forms, estimate sheets, invoices, and receipts
play signiﬁcant roles for purposes of feasibility, account-
ability, traceability, or transparency of business. Numerous
actual operations are currently based on evidences even if
they are carried out with information systems. Therefore, it
is important to consider workﬂows in which one can con-
cretely and precisely describe the life cycles of evidences to
analyze requirements in developing large-scale information
systems.
Roughly, the life cycles of evidences mean a series of
states of the evidences, and consistency of evidence life cy-
cles in a workﬂow means that the workﬂow has no incon-
sistent life cycles of evidences. In [12] and [14], we deﬁne
a consistent property of evidence life cycles in a workﬂow
with a single start, by using instances of the workﬂow. We
here deﬁne that in a workﬂow with multiple starts, by using
closed subgraphs of the workﬂow.
We precede the deﬁnition of the consistency property by
that of evidences in a workﬂow.
5.1. Evidence
This subsection refers to [14]. We here regard an ev-
idence as a paper document, which is composed, referred,
re-written, judged, stored or dumped in some activities. Un-
like data ﬁles, an evidence does not increase. Though one
can make a copy of it, the copy is regarded not to be the
same thing as the original evidence. Moreover, unlike data
in a system multiple people can access simultaneously, an
evidence can not be used by multiple people at the same
time.
In the technical perspective, a list of evidences with
length at least 0 is assigned to an activity, and an evidence
E is deﬁned to be a triple (e, created, removed), where e
is a label, and created and removed are boolean values. In
what follows, we ﬁx a non-empty set E.
Deﬁnition 5.1 Evidence is a triple (e, created, removed),
where e is an element of E and created and removed are
boolean values, that is, they are elements of {true, false}.
For each evidence E := (e, created, removed), we call e
the evidence label of E.
Remark 5.2 For simplicity, we abbreviate evidences by the
following ways.
(i) (e, false, false) is abbreviated to “e”.
(ii) (e, false, true) is abbreviated to “(−)e”.
(iii) (e, true, false) is abbreviated to “(+)e”.
(iv) (e, true, true) is abbreviated to “(+)(−)e”.
For a workﬂow W, we consider an allocation which as-
signs to each activity in W a string of evidences. Note that
such an allocation may assign to some activities the empty
string, i.e., the string with length 0. By using workﬂows,
one can express a lot of workﬂows. In order to explain ev-
idences, we give an example of a workﬂow which explains
how to submit a paper, as follows.
For each workﬂow W, each activity A in W and for each
evidence E in the string assigned to A, we call E an evi-
dence on A and call A an activity having E.
Remark 5.3 In what follows, we assume that, for each
workﬂow diagram W and each activity A in W, A does
not have multiple evidences sharing the same evidence la-
bel. We call the condition the basic evidence condition.

152
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Figure 7. Workﬂow of paper submission
Since each workﬂow diagram W is assumed to satisfy
the basic evidence condition, if an activity A in W has an
evidence label e, A has just one evidence E with label e.
So, we often say that e is created (or removed) on A if A
has an evidence E having the (+)-mark (or the (−)-mark,
respectively).
Example 5.4 In the workﬂow in Figure 7, a paper P is cre-
ated on the activity “Make a paper P”, and it is removed on
the activity “Submit the paper and the registration form”.
The evidence also appears on the activities “Revise the pa-
per” and “Explain the content of P to your boss”.
5.2. Consistency property of evidence life
cycles in a workﬂow with multiple
starts
We here deﬁne a consistency of evidence life cycles in
a workﬂow with multiple starts. This subsection also refers
to [14].
Roughly, the “life cycle” of an evidence means that a
series of states of the evidence. In order to deﬁne consistent
life cycles of evidences in workﬂow in a rigorous manner,
we introduce some new concepts.
Deﬁnition 5.5 For a workﬂow W, a line in W is a sequence
of arcs in W
L = (A1 −−→
f1
A2 −−→
f2
· · · −−→
fn−1 An)
which satisﬁes the following properties.
(i) A1 is an activity or the start in W.
(ii) An is an activity or an end in W.
(iii) A2, . . . , An−1 are nodes in W, each of that is not any
activity, the start, nor any end.
For a line L above, A1 is called the source of L, An the
target of L and fn−1 the target arc of L.
Deﬁnition 5.6 A line L is said to be equivalent to another
line L′ if L and L′ share the source and the target.
Example 5.7 The workﬂow in Figure 7 has 10 lines, as
follows:
(f1), (f2f3), (f2f7), (f4), (f5), (f6f13),
(f8f9f12f13), (f8f10), (f11f12f13) and (f14).
Deﬁnition 5.8 A sequence π of lines is said to be equiv-
alent to another sequence π′ of lines if there exist lines
L1, . . . , Ln and L′
1, . . . , L′
n such that
π = (A1 −−→
L1
A2 −−→
L2
· · · −−→
Ln−1 An)
π′ = (A1 −−→
L′
1
A2 −−→
L′
2
· · · −−→
L′
n−1 An)
and that, for each i = 1, . . . , n, Li is equivalent to L′
i.
L ∼ L′ (or π ∼ π′) denotes that L is equivalent to L′
(π is equivalent to π′, respectively). Note that every line is
equivalent to itself, and so is every sequence of lines.
Deﬁnition 5.9 Let W be a workﬂow, V a closed subgraph
of W and let e be an evidence in W. Then, the consistent
life cycle of e on V is the sequence π of lines in V
π := (A0 −→
L0 A1 −→
L1 · · · −−→
Ln−1 An)
which satisﬁes the following properties.
(i) Every activity Ai has e.
(ii) If A0 is not the target of any line with source an input
node, then e is created on A0.
(iii) e is not created on Ai for any i with 0 < i ≦ n.
(iv) If An is not the source of any line with target an output
node, then e is removed on An.
(v) e is not removed on Ai for any i with i < n.
Deﬁnition 5.10 A workﬂow W is said to have consistent
evidence life cycles if, for each closed subgraph V of W,
each activity A in V and for each evidence e on A, there is
an essentially unique consistent life cycle π of e on V which
contains A.
The statement “there is an essentially unique consistent
life cycle π of e on V containing A” means that there is
a consistent life cycle π of e on V containing A and that
π ∼ π′ for each consistent life cycle π′ of e containing A.

153
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Example 5.11 The workﬂow in Figure 7 has two closed
subgraph. The ﬁrst closed subgraph (called U) consists of
all nodes except the activity “Explain the content ...” and
all arcs except f10 and f11. The second one (called V )
consists of all nodes and all arcs except f9.
For an evidence P in Figure 7, U has just one con-
sistent evidence life cycle of P: ((f2f7)(f8f9f12f13)).
V also has just one consistent evidence life cycle of P:
((f2f7)(f8f10)(f11f12f13)). For another evidence R,
U and V share the same consistent evidence life cycle of R:
((f5)(f6f13)). Moreover, they have no other consistent
evidence life cycle of R. Therefore, the workﬂow in Figure
7 has consistent evidence life cycles.
For the consistency property of evidence life cycles in
a workﬂow with multiple starts, one can also have similar
theorems to those in Section 4. Actually, one can easily
show the following theorems.
Theorem 5.12 For a workﬂow with a single start, the origi-
nal consistency property of evidence life cycles in the work-
ﬂow (cf. [14], Deﬁnition 3.10) is equivalent to that in Deﬁ-
nition 5.10.
Theorem 5.13 Let W1 and W2 be workﬂows, E0
:=
{A1, . . . , An} ⊂ end(W1), S0
:= {B1, . . . , Bn} ⊂
start(W2), and f a bijection E0 → S0 with f(Ai) = Bi.
Then, W1 ∗f W2 has consistent evidence life cycles if and
only if so do W1 and W2 and, for any line A → Ai in W1
and another line Bi → B in W2, the following properties
hold.
(i) For an evidence E on A, if E is not removed on A and
if B is not any end node, then B also has E and E is
not created on B.
(ii) For an evidence E on B, if E is not created on B and
if A is not any start node, then A also has E and E is
not removed on B.
The consistency of evidence life cycles in a workﬂow
does not need extended correctness of the workﬂow. How-
ever, it is meaningless to deﬁne the consistency of evidence
life cycles in a workﬂow which does not satisfy extended
correctness. We show this claim by using a workﬂow W ∗
II
in Figure 8.
W ∗
II has two closed subgraphs, both of which satisﬁes the
conditions in Deﬁnition 5.10. So, W ∗
II has consistent evi-
dence life cycles. However, the structure of W ∗
II is the same
as that of WII in Figure 3, and hence, W ∗
II does not sat-
isfy extended correctness. Actually, if the director returns
the proposal P, the secretary can not receive it nor send it
to the administration division. This example claims that,
for a workﬂow which does not satisfy extended correctness,
Figure 8. Wrong workﬂow
the semantics of the consistency of evidence life cycles in
the workﬂow becomes ambiguous. Conversely, extended
correctness of a workﬂow assures that the consistency of
evidence life cycles in the workﬂow has the semantics we
expect if one do not have to consider any set of start nodes
which is not contained in the in-port family of the workﬂow.
6. Discussion
In this section, in order to validate extended correctness,
consistency of evidence life cycles and their fundamental
theorems in Sections 4 and 5, we investigate real workﬂows
and explain how to verify the consistency properties of a
workﬂow by incremental veriﬁcation.
6.1
Observations
We ﬁrst investigate 154 workﬂows, which have been de-
veloped in requirement analysis for a real information sys-
tem that helps one to manage personnel affairs. Each work-
ﬂow has 10 to 30 nodes.
The observations are shown in the previous work [13].
Observation 1
Among the 154 workﬂows above, there
are 101 workﬂows that have connections to other work-
ﬂows. For example, there exists a large workﬂow that con-
sists of 12 small workﬂows. 2 We describe the large work-
ﬂow in Figure 9, where W1, . . . , W12 describe the small
workﬂows in the large workﬂow. In this ﬁgure, we simplify
the small workﬂows. Especially, we omit all activity nodes
in the small workﬂows.
We also classify 154 workﬂows on the numbers of their
start nodes. Then, we have the following result. The result
claims that, in most cases, the maximal in-port family and
its out-port assignment of a workﬂow are not very large.
2We often consider a “large workﬂow” to be a set of workﬂows that
have connections to one another.

154
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Figure 9. Large workﬂow W
number of start nodes
1
2
3
4
5
6
16
number of workﬂows
121
24
5
1
1
1
1
Table 2. Classiﬁcation of 154 workﬂows on
the numbers of start nodes
Observation 2
In most cases, even if two workﬂows are
connected to each other, there is only one-way control ﬂow
between the two workﬂows. For example, while there is
control ﬂow from W2 to W3 in Figure 9, there is no control
ﬂow from W3 to W2. As far as the 154 workﬂows above,
there are about 80 connections of two workﬂows, but, there
are only 2 connections that have control ﬂow between work-
ﬂows in both directions (one can see an example of such a
connection in Figure 6). Therefore, at least as far as the 154
workﬂows, vertical composition sufﬁciently covers connec-
tions between workﬂows.
Observation 3
As far as the 154 workﬂows, the order of
development of the small workﬂows does not completely
correspond to the direction of control ﬂow of large work-
ﬂows that consist of the small workﬂows. Moreover, there
are some large workﬂows that plural engineers work to-
gether to develop. In fact, W in Figure 9 has been devel-
oped by two system engineers. In a case like this, incre-
mental veriﬁcation is especially useful, since it is possible
that one of the engineers can obtain only an incomplete set
of workﬂows in W.
Summary of the observations
The ﬁrst observation
claims that about two thirds of the 154 workﬂows are con-
nected to other workﬂows and that about one ﬁfth of the
154 workﬂows have multiple starts. The second observation
claims that, while there are about 80 pairs that are vertically
composed, only two pairs are composed but not vertically
composed. This means that 97.5 percent of all pairs that
Figure 10. Workﬂows U and V
are composed are vertically composed. The last observa-
tion claims that the order of development of small work-
ﬂows does not completely correspond to the direction of
control ﬂow of a large workﬂow consisting of them. By the
observations, one can claim that it is meaningful to consider
incremental veriﬁcation for a large-scale workﬂow that con-
sists of small workﬂows with multiple starts or vertically
composed.
6.2
Application
In order to validate extended correctness, consistency of
evidence life cycles of a workﬂow and the fundamental the-
orems of them, we here explain how to verify the consis-
tency properties by incremental veriﬁcation, by using two
workﬂows U and V in Figure 10, that are vertically com-
posed.
As we explained in the third observation in the previ-
ous section, U and V have been developed regardless of the
control ﬂow of U ∗V . For example, assume that only V has
been developed. Dislike original correctness, one can verify
control ﬂow consistency of V based on extended correct-
ness. Let V do not satisfy extended correctness. Then, by
Theorems 4.2 and 4.4, whatever one develops U, U ∗V will
never satisfy extended correctness. This means that he/she
should modify V at this point when V turn out not to satisfy
extended correctness. Similarly, one can verify consistency
of evidence life cycles of V even if V has multiple starts.
He/She should also modify evidence life cycles of V at this
point when V turn out not to have consistent evidence life
cycles.
Moreover, assume that V has been modiﬁed to satisfy
extended correctness (and to have consistent evidence life
cycles) and that U has been developed additionally. If the
workﬂow U does not satisfy extended correctness or con-
sistency of evidence life cycles, then neither does U ∗ V .
Therefore, he/she should modify U at this point.
If the
workﬂow U satisﬁes extended correctness, he/she can know
whether or not U ∗ V satisﬁes extended correctness, by
checking conditions of the in-port families of V and the
out-port assignments of U (see the comment immediately
after Theorem 4.2). Similarly, If the workﬂow U has con-
sistent evidence life cycles, he/she can know whether or not

155
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
U ∗ V has consistent evidence life cycles, by checking the
conditions (i) and (ii) in Theorem 5.13.
As above, one can develop and verify the large workﬂow
U ∗ V in parallel. Incremental veriﬁcation is a useful ap-
proach, especially in the case of development of large-scale
workﬂows.
7. Related work
The deﬁnition and fundamental theorems of extended
correctness are based on the previous work [13]. In this
paper, we show Theorem 4.4 by a simpler way than that of
the similar theorem in [13].
There are a lot of researches of consistency properties of
workﬂows in the viewpoint of control ﬂow of them such as
Aalst [15], Sadiq and Orlowska [9], Aalst [16], Sadiq and
Orlowska [10], Verbeek et al. [21], Lin et al. [6], and Aalst
et al. [17]. However, these researches deal with veriﬁcation
for a workﬂow with a single start and a single end as a com-
plete workﬂow. In fact, a workﬂow in standard workﬂow
languages such as XPDL [23] and YAWL [19] has a single
start and a single end.
An open workﬂow net by Aalst et al. [18] can be con-
sidered to be a workﬂow with multiple starts and ends, and
their “weak termination” essentially corresponds to sound-
ness (correctness). Another well known workﬂow language
EPC [3] has workﬂows with multiple starts and ends. By
Mendling and Aalst [8], a semantics of EPC is given. Based
on the notions above, one can obtain another extended cor-
rectness over (acyclic and cyclic) workﬂows with multiple
starts and ends. However, the important point in this paper
is that our extended version of correctness is a conservative
extension of original correctness and it is preserved in verti-
cal composition and division of workﬂows. These theorems
are important for incremental veriﬁcation based on the ex-
tended correctness. Since [18] and [8] have different pur-
poses from ours, they do not show similar results about their
extended correctness properties to our properties above. It
is expected to show similar theorems based on correctness
properties in [18] and [8].
By Dehnert and Aalst [2], Dongen et al.
[20], and
Mendling et al.
[7], veriﬁcation systems of consistency
properties of workﬂows in EPC are developed. However,
in order to verify consistency of workﬂows in EPC with the
systems, users have to set start nodes which are ﬁred at the
initial point or the systems have to check all combinations
of start nodes ﬁred at the initial point. So, these approaches
differ from ours.
A standard workﬂow model by Kiepuszewski et al. [4]
also may have multiple starts and/or multiple ends. How-
ever, the semantics of the workﬂows in [4] is based on an
assumption that a petri net modeling a workﬂow has a token
on each initial place in every initial marking. Therefore, the
correctness property of workﬂows deﬁned in [4] is essen-
tially the same as original correctness.
Kindler et al. [5] investigate “local soundness” for each
sub-workﬂow in a workﬂow and “global soundness” for
the whole workﬂow. The veriﬁcation approach in [5] uses
“scenario” that are used to verify global soundness of a
workﬂow W from veriﬁcation of local soundness of sub-
workﬂows constituting W.
So, the approach veriﬁes a
workﬂow based on necessary data for the workﬂow instead
of the set of all sub-workﬂows of the workﬂow. Moreover,
the ways to divide or compose workﬂows differ from ours.
Siegeris and Zimmermann [11] also investigate cor-
rectness properties of workﬂows to verify consistency of
a whole workﬂow based on veriﬁcations of that of sub-
workﬂows of the workﬂow. The veriﬁcation approach for
a workﬂow is based on veriﬁcation for all sub-workﬂows
constituting the workﬂow. Moreover, the ways to divide or
compose workﬂows in [11] differ from ours, too.
On the other hand, in the previous papers [12] and [14],
we investigate consistency of evidence life cycles in a work-
ﬂow with a single start. We extend the previous work for a
workﬂow with multiple starts.
Wang and Kumar [22] investigate document-driven
workﬂow systems, where “documents ” are essentially the
same concept as evidences.
They propose a framework
for designing and managing workﬂows based on struc-
tures and states of documents. While our framework man-
ages control-ﬂow based workﬂows with evidences, their
framework manages document-driven workﬂows. Thus, the
meaning of the veriﬁcation for their workﬂows differs from
that of consistency of evidence life cycles in control-ﬂow
based workﬂows.
8. Conclusion
In this paper, we extend the results in our previous work
[13], by adding consistency property of evidence life cycles
in a workﬂow with multiple start nodes. The consistency
property of evidence life cycles is based on that in a work-
ﬂow with a single start node in [12].
The purpose of this paper is to develop an incremental
veriﬁcation methodology for large-scale workﬂows. As a
basis for the veriﬁcation methodology, we have deﬁned ex-
tended correctness of an acyclic workﬂow with multiple
starts and multiple ends. Extended correctness is a con-
servative extension of original correctness property over an
acyclic workﬂow with a single start (Theorem 4.1). We also
consider vertical composition and division of workﬂows,
and show that extended correctness is preserved in these
operations on workﬂows (Theorems 4.2 and 4.4). We also
characterize extended correctness of a workﬂow as extensi-
ble property (Theorem 4.8).

156
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
In Section 5, we deﬁne a consistency property of evi-
dence life cycles in a workﬂow with multiple starts, and
show two fundamental theorems of the consistency (Theo-
rems 5.12 and 5.13).
In Section 6, we investigate real 154 workﬂows in order
to validate incremental veriﬁcation for a large-scale work-
ﬂow that consists of small workﬂows with multiple starts
and/or vertically composed. Moreover, in order to validate
extended correctness, consistency of evidence life cycles of
a workﬂow and the fundamental theorems of them, we ex-
plain how to verify the consistency properties by using an
example.
Since the workﬂow language in this paper is simple and
conventional, one can apply the deﬁnitions and the theo-
rems of the consistency properties in this paper for incre-
mental veriﬁcation for acyclic workﬂows in other languages
such as BPMN [1] and XPDL.
Extended correctness, consistency of evidence life cy-
cles and their theorems in this paper enable us to develop a
concrete method to the consistency properties of large-scale
workﬂows incrementally. Our next challenge is to develop
a tool that helps one to verify large-scale workﬂows by the
incremental methodology.
References
[1] Business Process Management Initiative (BPMI). Business
Process Modeling Notation (BPMN) Version 1.0. Technical
report, BPMI.org, 2004.
[2] J. Dehnert and W. M. P. van der Aalst. Bridging the gap
between business models and workﬂow speciﬁcations. In-
ternational Journal of Cooperative Information Systems,
13(3):289–332, 2004.
[3] G. Keller, M. Nuttgens, and A. W. Scheer.
Semantische
Prozessmodellierung auf der Grundlage Ereignisgesteuerter
Prozessketten (EPK).
Technical Report 89, Institut fur
Wirtschaftsinformatik Saarbrucken, Saarbrucken, Germany,
1992.
[4] B. Kiepuszewski, A. H. M. ter Hofstede, and W. M. P.
van der Aalst. Fundamentals of control ﬂow in workﬂows.
Acta Informatica, 39(3):143–209, 2003.
[5] E. Kindler, A. Martens, and W. Reisig.
Inter-operability
of workﬂow applications: Local criteria for global sound-
ness.
In Business Process Management: Models, Tech-
niques, and Empirical Studies (BPM), LNCS 1806, pages
235–253. Springer, 2000.
[6] H. Lin, Z. Zhao, H. Li, and Z. Chen. A novel graph reduction
algorithm to identify structural conﬂicts. In Proceedings of
the 35th Annual Hawaii International Conference on System
Science (HICSS). IEEE Computer Society Press, 2002.
[7] J. Mendling, M. Moser, G. Neumann, H. M. W. Verbeek,
B. F. van Dongen, and W. M. P. van der Aalst. Faulty epcs
in the sap reference model. In International Conference on
Business Process Management (BPM), LNCS 4102, pages
451–457. Springer, 2006.
[8] J. Mendling and W. M. P. van der Aalst. Formalization and
veriﬁcation of epcs with or-joins based on state and con-
text. In Proceedings of the 19th International Conference on
Advanced Information Systems Engineering (CAiSE), LNCS
4495, pages 493–453. Springer, 2007.
[9] W. Sadiq and M. E. Orlowska. On correctness issues in con-
ceptual modeling of workﬂows. In Proceedings of the 5th
European Conference on Information Systems (ECIS), pages
943–964, 1997.
[10] W. Sadiq and M. E. Orlowska.
Analyzing process mod-
els using graph reduction techniques. Information Systems,
25(2):117–134, 2000.
[11] J. Siegeris and A. Zimmermann. Workﬂow model compo-
sitions preserving relaxed soundness. In Proceedings of 4th
International Conference on Business Process Management
(BPM), LNCS 4102, pages 177–192. Springer, 2006.
[12] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Takahashi.
Veriﬁcation algorithm of evidence life cycles in extended
UML activity diagrams. In Proceedings of The 2nd Interna-
tional Conference on Software Engineering Advances (IC-
SEA 2007). IEEE Computer Society Press, 2007.
[13] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Takahashi.
Incremental veriﬁcation of large scale workﬂows based on
extended correctness.
In Proceedings of the 3rd Interna-
tional Conference on Software Engineering Advances (IC-
SEA 2008). IEEE Computer Society Press, 2008.
[14] O. Takaki, T. Seino, I. Takeuti, N. Izumi, and K. Takahashi.
Veriﬁcation of evidence life cycles in workﬂow diagrams
with passback ﬂows.
International Journal On Advances
in Software, 1(1), 2008 (to appear).
[15] W. M. P. van der Aalst. Veriﬁcation of workﬂow nets. In Ap-
plication and Theory of Petri Nets 1997, LNCS 1248, pages
407–426. Springer, 1997.
[16] W. M. P. van der Aalst.
The application of petri nets to
workﬂow management.
The Journal of Circuits, Systems
and Computers, 8(1):21–66, 1998.
[17] W. M. P. van der Aalst, A. Hirnschall, and H. M. W. Verbeek.
An alternative way to analyze workﬂow graphs. In Proceed-
ings of the 14th International Conference on Advanced In-
formation Systems Engineering (CAiSE), LNCS 2348, pages
535–552. Springer, 2002.
[18] W. M. P. van der Aalst, N. Lohmann, P. Massuthe, C. Stahl,
and K. Wolf.
From public views to private views:
Correctness-by-design for services. In Informal Proceedings
the 4th International Workshop on Web Services and Formal
Methods (WS-FM), LNCS 4937, pages 139–153. Springer,
2007.
[19] W. M. P. van der Aalst and A. H. M. ter Hofstede. YAWL:
Yet another workﬂow language.
Information Systems,
30(4):245–275, 2005.
[20] B. F. van Dongen, W. M. P. van der Aalst, and H. M. W. Ver-
beek. Veriﬁcation of epcs: Using reduction rules and petri
nets. In Proceedings of the 17th Conference on Advanced In-
formation Systems Engineering (CAiSE), LNCS 3520, pages
372–386. Springer, 2005.
[21] H. M. W. Verbeek, T. Basten, and W. M. P. van der Aalst. Di-
agnosing workﬂow processes using woﬂan. The Computer
Journal, 44(4):246–279, 2001.

157
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
[22] J. Wang and A. Kumar. A framework for document-driven
workﬂow systems. In Proceedings of 3rd International Con-
ference on Business Process Management (BPM), LNCS
3649, pages 285–301. Springer, 2005.
[23] Workﬂow Management Coalition (WfMC). Workﬂow Man-
agement Coalition Workﬂow Standard: Workﬂow Process
Deﬁnition Interface - XML Process Deﬁnition Language
(XPDL).
(WfMC-TC-1025), Technical report, Workﬂow
Management Coalition, Lighthouse Point, Florida, USA,
2002.
A. Basic theorems and proofs of theorems
In this section, we show some basic theorems of ex-
tended correctness and theorems in Section 4.
Deﬁnition A.1 Let W be a workﬂow and C the set of all
XOR-splits on W.
Then, a phenomenon on W denotes
a function ψ : C → arc(W) satisfying that ψ(c) is an
outgoing-arc of c for each c ∈ C.
Lemma A.2 For a start s and a phenomenon ψ, there exists
a unique instance for ψ from s, that is, there exists a unique
instance V from s such that for every XOR-split c in V the
outgoing-arc of c in V is ψ(c).
Proof. Trivial. □
Lemma A.3 Let W be a workﬂow, s a start in W, π a path
on W from s and ψ a phenomenon on W. Moreover, as-
sume that, for an XOR-split c in W, if c is the source of an
arc in π, then ψ(c) is contained in π. Then, the instance of
W for ψ from s contains π.
Proof. By induction on the length of π. □
Lemma A.4 For a workﬂow W, W is covered with
INS(W), that is, every arc f in W is contained in some
instance of W.
Proof. Let f be an arc in W. Then, there exists a path π
with ﬁrst element the outgoing-arc of some start s of W and
last element f. So, by Lemma A.3, π is contained in some
instance in INS(W, s). □
Lemma A.5 For a workﬂow W, every closed subgraph of
W is deadlock free and lack of synchronization free.
Proof. Trivial. □
Proposition A.6 Let W be a workﬂow and {U1, . . . , Un} a
set of some instances in W that is not conﬂict on any XOR-
split in W. Then, U := U1 ∪ · · · U2 is closed if and only if
U is deadlock free and lack of synchronization free.
Proof. By Lemma A.5, U is deadlock free and lack of syn-
chronization free if U is closed. So, we assume that U is
deadlock free and lack of synchronization free and show
that U is closed.
(1) Let x be an XOR-split.
Then, since x is contained
in some instance Ui, the incoming-arc of x and some
outgoing-arc(s) of x are contained in U. Moreover, since
{U1, . . . , Un} is not conﬂict on any XOR-split in W, the
outgoing-arc of x that is contained in U is single.
(2) Let x be an XOR-join.
Then, since x is contained
in some instance Ui, the outgoing-arc of x and some
incoming-arc(s) of x are contained in U. Moreover, since
U is lack of synchronization free, the incoming-arc of x in
U is single.
(3) Let x be an AND-join. Then, since x is contained in
some instance Ui and U is deadlock free, the outgoing-arc
of x and all incoming-arcs of x are contained in U.
(4) Let x be another type node. Then, since x is contained
in some instance Ui, all incoming-arcs and outgoing-arcs of
x are contained in U. □
Lemma A.7 Let W be a workﬂow and I an in-port of W.
(1) For every s ∈ I and U ∈ INS(W, s), there exists a
closed subgraph V with V ⊇ U.
(2) For every s ∈ I and U ∈ INS(W, s), U is lack of
synchronization free.
Proof. (1) Let ψ be a phenomenon such that U is the in-
stance for ψ from s. Then, for each si ∈ I there exists the
instance Ui for ψ from si. Since {U1, . . . , Un} does not
conﬂict on any XOR-split, U1 ∪ · · · ∪ Un is closed. More-
over, for some i ≦ n, s = si and hence U = Ui by Lemma
A.2.
(2) By (1) above, there is a closed subgraph V with V ⊃ U.
Thus, we have the result since V is lack of synchronization
free by Lemma A.5. □
Lemma A.8 For a workﬂow W satisfying extended cor-
rectness and a covering in-port family I of W, W is cov-
ered with ∪
I∈I CL(W, I). Especially, W is covered with
CL(W).
Proof. By Lemmas A.4 and A.7.(1). □
Lemma A.9 Let W be a workﬂow satisfying extended cor-
rectness and I a covering in-port family of W.
Then,
end(W) is covered by ∪ O∗(W, I) := ∪
I∈I O(W, I).
Proof. By Lemma A.8. □
Lemma A.10 For a workﬂow W with a single start, if W
satisﬁes extended correctness, then W is correct.
Proof. Let W have only a single start s. Then, W has a
single in-port {s}. So, by Def.3.8, every instance is a closed
subgraph. Thus, by Lemma A.5, we have the result. □

158
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Lemma A.11 Every correct workﬂow satisﬁes extended
correctness.
Proof. Every instance of a correct workﬂow W is a closed
subgraph of W. So, for the start s of W, {s} is the in-port
of W. □
Proof of Theorem 4.1
By Lemmas A.10 and A.11. □
Deﬁnition A.12 Let W1
∈
WF(n, m) and W2
∈
WF(m, l).
(1) Let V be a subgraph of W1 ∗ W2. Then, V ⌈W1 de-
notes the subgraph of W1 uniquely obtained from V ∩
W1 by adding all possible ends in W1 that correspond
to connecting-arcs contained in V . Similarly, V ⌈W2 de-
notes the subgraph of W2 uniquely obtained from V ∩ W2
by adding all possible starts in W2 that correspond to
connecting-arcs contained in V .
(2) For a subgraph V1 of W1 and a subgraph V2 of W2, if
there exists a subgraph V of W1 ∗ W2 with V ⌈W1 = V1
and V ⌈W2 = V2, then V1 and W2 are said to be able to be
composed, and V1 ∗ V2 denotes the subgraph V above.
Lemma A.13 Let W1
∈
WF(n, m) and W2
∈
WF(m, l).
(1) For each S ⊂ start(W1 ∗W2) and each V ∈ CL(W1 ∗
W2, S), V ⌈W1 is a closed subgraph in CL(W1, S) and
V ⌈W2 is that in CL(W2, end(V ⌈W1)).
(2) Conversely, for each V1 ∈ CL(W1) and for each V2 ∈
CL(W2, end(V1)), if V1 and V can be composed in W1 ∗
W2, then V1 ∗ V2 is a closed subgraph of W1 ∗ W2.
Proof. Trivial. □
Lemma A.14 Let W1
∈
WF(n, m) and W2
∈
WF(m, l). If W1 satisﬁes extended correctness for a cover-
ing in-port family I and if W2 satisﬁes extended correctness
for ∪ O∗(W1, I) := ∪
I∈I O(W1, I), then W1 ∗W2 satisﬁes
extended correctness for I.
Proof. We show that each I ∈ I is an image of W1∗W2. Let
I := {s1, . . . , sn} ∈ I and Ui ∈ INS(W1 ∗ W2, si) (i =
1, . . . , n), and assume that {U1 . . . , Un} is not conﬂict on
any XOR-split in W1 ∗ W2. Then, Ui⌈W1 ∈ INS(W1, si)
for each i ≦ n, and {U1⌈W1 . . . , Un⌈W1} is not conﬂict
on any XOR-split in W1. Since I is an image of W1, U 1 :=
U1⌈W1 ∪ · · · ∪ Un⌈W1 is a closed subgraph of W1.
On the other hand, U 2 := U1⌈W2∪· · ·∪Un⌈W2 consists
of instances in W2, that have elements of end(U 1) as the
starts. Moreover, the set of all the instances in W2 above
is not conﬂict on any XOR-split in W2. Therefore, since
end(U 1) ∈ O(W2, I) ⊂ ∪ O∗(W2, I), U 2 is a closed sub-
graph of W2. Since U = U1 ∗ U2, by Lemma A.13.2, U is
a closed subgraph of W1 ∗ W2. So, we have the result. □
Lemma A.15 Let W1
∈
WF(n, m) and W2
∈
WF(m, l). If W1 ∗ W2 satisﬁes extended correctness for
a covering in-port family I, then so is W1 and W2 satisﬁes
extended correctness for ∪ O∗(W1, I).
Proof. We ﬁrst show that W1 satisﬁes extended correctness
for I. Let I := {s1, . . . , sn} ∈ I and Ui ∈ INS(W1, si) for
i ≦ n. Moreover, assume that {U1, . . . , Un} is not conﬂict
on any XOR-split in W1. Then, there exists a phenomenon
ψ1 on W1 such that each U is the instance for ψ1 from si.
So, we can have a phenomenon ψ on W1 ∗ W2 such that
the restriction of ψ to W1 is ψ1. Thus, for each i ≦ n,
there exists the instance U ∗
i of W1 ∗ W2 for ψ from si. So,
U ∗
i ⌈W1 = Ui for each i ≦ n, and {U ∗
1 , . . . , U ∗
n} is not
conﬂict on any XOR-split on W1 ∗ W2. So, since I is an
image of W1 ∗ W2, U ∗
1 ∪ · · · ∪ U ∗
n is a closed subgraph of
W1 ∗ W2. Therefore, by Lemma A.13.1, U1 ∪ · · · ∪ Un is a
closed subgraph of W1. So, I is an image of W1.
We next show that W2 satisﬁes extended correctness
for ∪ O∗(W1, I).
Let E is an element {e1, . . . , em} of
∪ O∗(W1, I) and Ui ∈ INS(W2, ei) for i ≦ m. More-
over, assume that U := {U1, . . . , Um} is not conﬂict on
any XOR-split in W2. Then, there exists a closed subgraph
V1 in W1 such that start(V1) ∈ I and that end(V1) = E.
So, we can have instances U 1
1 , . . . , U 1
k in W1 such that
V1 = U 1
1 ∪ · · · ∪ U 1
k. For each j ≦ k, we have the subset
Uj of U by Uj := {U ∈ U : start(U) ∈ end(U 1
j )}.
Then, for each j ≦ k, U ∗
j
:= U 1
j ∗ (∪ Uj) is an in-
stance of W1 ∗ W2, and {U ∗
1 , . . . , U ∗
k} is not conﬂict on
any XOR-split on W1 ∗ W2. So, since W1 ∗ W2 satisﬁes
extended correctness for I, U ∗
1 ∪ · · · ∪ U ∗
k is a summation in
W1 ∗ W2. Therefore, by Lemma A.13.1, U1 ∪ · · · ∪ Um =
(U ∗
1 ∪ · · · ∪ U ∗
k)⌈W2 is a summation in W2, and hence, E
is an image of W2. □
Proof of Theorem 4.2
By Lemmas A.14 and A.15. □
Proof of Theorem 4.4
By the deﬁnition of a vertical
composition (Deﬁnition 2.4), W1 ∗ W2 is the same as
W1[f1, . . . , fk] ∗ W2[g1, . . . , gm] in Figure 5 (see also Fig-
ure 2). So, the extended correctness of W1 ∗ W2 for I is
equivalent to that of W1[f1, . . . , fk] ∗ W2[g1, . . . , gm] for I.
So, by Theorem 4.2, it is equivalent to the following prop-
erties (i) and (ii).
(i) W1[f1, . . . , fk] satisﬁes extended correctness for I
(ii) W2[g1, . . . , gm] satisﬁes extended correctness for
∪ O∗(W1[f1, . . . , fk], I).
Now we ﬁrst show that the property (i) above is equiv-
alent to (1) in Theorem 4.4.
For a subgraph V
of
W1[f1, . . . , fk], V is closed in W1[f1, . . . , fk] if and only
if V ∩ W1 is closed in W1. Thus, for an element I of I with

159
International Journal On Advances in Software, vol 2 no 1, year 2009, http://www.iariajournals.org/software/
Figure 11. Workﬂow W0
I ∩start(W1) ̸= ∅, I is an in-port of W1[f1, . . . , fk] if and
only if I ∩ start(W1) is that of W1. Therefore, since I is a
covering family of start(W1[f1, . . . , fk]), the property (i)
is equivalent to (1) in Theorem 4.4.
The property (i) implies that ∪ O∗(W1[f1, . . . , fk], I) is
a covering family of start(W2[g1, . . . , gm]). Therefore,
when (i) holds, one can show that the property (ii) is equiv-
alent to (2) in Theorem 4.2 in the similar way to the case of
(i) above. Thus, the extended correctness of W1 ∗ W2 for
I is equivalent to the properties (1) and (2) in Theorem 4.4.
□.
Lemma A.16 For a non-empty ﬁnite set S and a subset S
of the power set of S with S = ∪ S, there exists a cor-
rect workﬂow W that has a single start s and that S =
O(W, {s}).
Sketch of the Proof.
Instead of showing this lemma
directly, we give an example S
:=
{s1, s2, s3} and
S
:=
{{s1}, {s2}, {s3}, {s1, s2}, {s1, s3}, {s2, s3}, S}
(=the power set of S), and illustrate a workﬂow W0 sat-
isfying the properties in this lemma for the S and S above
by Figure 11. (All workﬂows satisfying the properties in
this lemma can be constructed in similar forms to W0.)
Each outgoing-arc of the XOR-split c in W0 (see Figure
11) corresponds to an element of S. Moreover, the numbers
of outgoing-arcs of AND-splits x1 ∼ x4 in W0 correspond
to the numbers of elements of {s1, s2}, {s1, s3}, {s2, s3}
and S, respectively. Note that outgoing-arcs corresponding
to {s1}, {s2} and {s3} do not have any AND-split, since
{s1}, {s2} and {s3} have a single element, respectively.
Obviously, W0 is correct, and the ex-port family of W0
for the in-port {s} is S. □
Proof of Theorem 4.8
By Theorem 4.2 and Lemma A.16.
□

