Review of Trust-based File Sharing in Cloud Computing
Edna Dias Canedo and Robson de Oliveira 
Albuquerque 
Electrical 
Engineering Department – ENE – University 
of Brasília – UNB 
Brasília – DF, Brazil, 70910-900.  
E-mails: {ednacanedo@unb.br}{robson@unb.br} 
Rafael Timóteo de Sousa Junior 
Electrical 
Engineering Department – ENE – University 
of Brasília – UNB 
Brasília – DF, Brazil, 70910-900.  
{desousa@unb.br} 
 
Abstract—The recent advances in cloud computing have risen 
a number of unforeseen security related issues in different 
aspects of cloud environments. Among these, the problem of 
guaranteeing secure access to computing resources in the cloud 
is gathering special attention. In this paper, we address open 
issues related to trust in cloud environments proposing a new 
trust model for cloud computing which considers a higher level 
view cloud resources. 
Keywords-Cloud 
Computing; 
Distributed 
Computing; 
Security; Integrity; Confidentiality; Trust and Availability. 
I. 
 INTRODUCTION  
The widespread use of Internet connected systems and 
distributed applications has triggered a revolution towards 
the adoption of pervasive and ubiquitous cloud computing 
environments. These environments allow users and clients to 
purchase computing power according to necessity, elastically 
adapting to different performance needs while providing 
higher availability. Several web-based solutions, such as 
Google Docs and Customer Relationship Management 
(CRM) [2] applications, now operate in the software as a 
service model. Much of this flexibility is made possible by 
virtual computing methods, which can provide adaptive 
resources and infrastructure in order to support scalable on-
demand sales of such applications. Virtual computing is also 
applied to stand-alone infrastructure as a service solutions, 
such as Amazon Elastic Cloud Computing (EC2) and Elastic 
Utility Computing Architecture Linking Your Programs to 
Useful Systems (Eucalyptus) [2]. 
As a result, the cloud computing frameworks and 
environments are able to address different issues in current 
distributed and ubiquitous computing systems.   
The availability of infrastructure as a service and 
platform as a service environments provided a fundamental 
base for building cloud computing based applications. It also 
motivated the research and development of technologies to 
support new applications. As several large companies in the 
communications and information technology sector have 
adopted cloud computing based applications, this approach is 
becoming a de facto industry standard, being widely adopted 
by different organizations.  
Since the adoption of the cloud computing paradigm by 
IBM Corporation around the end of 2007, other companies 
such as Google (Google App Engine), Amazon (Amazon 
Web Services (AWS), EC2 (Elastic Compute Cloud) and S3 
(Simple Storage Service)), Apple (iCloud) and Microsoft 
(Azure Services Platform) have progressively embraced it 
and introduced their own new products based on cloud 
computing technology [11]. However, cloud computing still 
poses risks related to data security in its different aspects 
(integrity, confidentiality and authenticity). 
In this paper, we review the main cloud computing 
architecture patterns and identify the main issues related to 
security, privacy, trust and availability. In order to address 
such issues, we present a high level architecture for trust 
models in cloud computing environments. 
This paper is organized as follows. In Section II, we 
present an overview of cloud computing, presenting a 
summary of its main features, architectures and deployment 
models. In Section III, we present related works. In Section 
IV, we introduce the proposed trust model. Finally, in 
Section V, we conclude with a summary of our results and 
directions for new research. 
II. 
CLOUD COMPUTING  
Cloud computing refers to the use, through the Internet, 
of diverse applications as if they were installed in the user’s 
computer, independently of platform and location. Several 
formal definitions for cloud computing have been proposed 
by industry and academia. We adopt the following 
definition: “Cloud computing is a model for enabling 
convenient, on-demand network access to a shared pool of 
configurable computing resources (e.g., networks, servers, 
storage, applications, and services) that can be rapidly 
provisioned and released with minimal management effort or 
service provider interaction” [14]. This definition includes 
cloud architectures, security, and deployment strategies. 
Cloud computing is being progressively adopted in 
different business scenarios in order to obtain flexible and 
reliable computing environments, with several supporting 
solutions available in the market. Being based on diverse 
technologies (e.g. virtualization, utility computing, grid 
computing 
and 
service 
oriented 
architectures) 
and 
constituting a whole new computational paradigm, cloud 
computing requires high level management routines. Such 
management activities include: (a) service provider selection; 
(b) virtualization technology selection; (c) virtual resources 
allocation; (d) monitoring and auditing in order to guarantee 
Service Level Agreements (SLA).  
44
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

Computational trust can be leveraged in order to establish 
an architecture and a monitoring system encompassing all 
these needs and still supporting usual activities such as 
planning, provisioning, scalability and security. Chang et al. 
[15] present a few challenges related to security, 
performance and availability in the cloud. 
A. Characteristics of Cloud Computing 
One advantage of cloud computing is the possibility of 
accessing applications directly from the Internet, with minor 
requirements of user computing resources. There are other 
significant advantages and disadvantages [13], as shown in 
Table I.  
In cloud computing environments, the user does not need 
to know all the structure of the system that he is part of. For 
instance, the user does not need to be aware of information 
such as how many servers execute a given tool, hardware 
and software configurations, scalability measures physical 
data center location. Being relieved of managerial duties, the 
user can simply and transparently access the applications and 
tools necessary for performing his main business activities. 
TABLE I.  
ADVANTAGES AND DISADVANTAGES OF CLOUD 
COMPUTING 
Advantages 
Disadvantages 
Lower IT infrastructure cost 
Requires a constant Network 
connection 
Increased computing power 
Dependable of network bandwidth 
Unlimited storage capacity 
Features might be limited 
Improved compatibility between 
operating Systems 
Stored data might not be secure 
Easier group collaboration 
If the cloud loses your data, you will 
not have access to your information.  
Universal access to documents 
 
Cloud computing combines a shared and statistical 
service model. It presents three basic characteristics [1]: a) 
hardware infrastructure architecture – based on low cost 
scalable clusters. The computing infrastructure in the cloud 
is composed of a great number of low cost servers, such as 
standard X86 server nodes; b) collaborative development of 
basic services and applications with maximal resource 
utilization, thus improving traditional software engineering 
processes. 
In 
the 
traditional 
computational 
model, 
applications become completely dependent on the basic 
services; c) the redundancy among several low cost servers is 
guaranteed through software. Since a large number of low 
cost servers is used, individual node failures cannot be 
ignored. Therefore, node fault tolerance must be taken into 
account in the design of software.  
B. Cloud Computing Architecture 
Cloud computing architecture is based on layers. Each 
layer deals with a particular aspect of making application 
resources available. Basically there are two main layers: a 
lower and a higher resource layer. The lower layer comprises 
the physical infrastructure and is responsible for the 
virtualization of storage and computational resources. The 
higher layer provides specific services. These layers may 
have their own management and monitoring system, 
independent of each other, thus improving flexibility, reuse 
and scalability. Figure 1 presents the cloud computing 
architectural layers [11].  
 
Figure 1.  Cloud Computing Architecture [11] 
C. Software as a Service  
Software as a Service (SaaS) provides all the functions of 
a traditional application, but provides access to specific 
applications through Internet. The SaaS model reduces 
concerns with application servers, operating systems, 
storage, application development, etc. Hence, developers 
may focus on innovation, and not on infrastructure, leading 
to faster software systems development. 
SaaS systems reduce costs since no software licenses are 
required to access the applications. Instead, users access 
services on demand. Since the software is mostly Web based, 
SaaS allows better integration among the business units of a 
given organization or even among different software 
services. Examples of SaaS include [2]: Google Docs and 
Customer Relationship Management (CRM) services. 
D. Platform as a Service   
Platform as a Service (PaaS) is the middle component of 
the service layer in the cloud. It offers users software and 
services that do not require downloads or installations. PaaS 
provides an infrastructure with a high level of integration in 
order to implement and test cloud applications. The user does 
not manage the infrastructure (including network, servers, 
operating systems and storage), but he controls deployed 
applications and, possibly, their configurations [4]. 
PaaS provides an operating system, programming 
languages and application programming environments. 
Therefore, it enables more efficient software systems 
implementation, as it includes tools for development and 
collaboration among developers. From a business standpoint, 
PaaS allows users to take advantage of third party services, 
increasing the use of a support model in which users 
subscribe to IT services or receive problem resolution 
instructions through the Web. In such scenarios, the work 
and the responsibilities of company IT teams can be better 
managed. Examples of SaaS [2] include: Azure Services 
Platform (Azure), Force.com, EngineYard and Google App 
Engine.  
45
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

E. 
Infrastructure as a Service   
Infrastructure as a Service (IaaS) is the portion of the 
architecture responsible for providing the infrastructure 
necessary for PaaS and SaaS. Its main objective is to make 
resources such as servers, network and storage more readily 
accessible by including applications and operating systems. 
Thus, it offers basic infrastructure on-demand services. IaaS 
has a unique interface for infrastructure management, an 
Application Programming Interface (API) for interactions 
with hosts, switches, and routers, and the capability of 
adding new equipment in a simple and transparent manner. 
In general, the user does not manage the underlying 
hardware in the cloud infrastructure, but he controls the 
operating systems, storage and deployed applications. 
Eventually he can also select network components such as 
firewalls. 
The term IaaS refers to a computing infrastructure, based 
on virtualization techniques that can scale dynamically, 
increasing or reducing resources according to the needs of 
applications. The main benefit provided by IaaS is the pay-
per-use business model [4]. Examples of IaaS [2] include: 
Amazon Elastic Cloud Computing (EC2) and Elastic Utility 
Computing Architecture Linking Your Programs To Useful 
Systems (Eucalyptus). 
F. 
Roles in Cloud Computing 
Roles define the responsibilities, access and profile of 
different users that are part of a cloud computing solution. 
Figure 2 presents these roles defined in the three service 
layers [3]. 
  
 
Figura 2.  Roles in cloud computing [3]. 
 
The provider is responsible for managing, monitoring 
and guaranteeing the availability of  the entire structure of 
the cloud computing solution. It frees the developer and the 
final user from such responsibilities while providing services 
in the three layers of the architecture.  
Developers use the resources provided by IaaS and PaaS 
to provide software services for final users. 
This multi-role organization helps to define the actors 
(people who play 
the 
roles) in 
cloud computing 
environments. Such actors may play several roles at the same 
time according to need or interest. Only the provider 
supports all the service layers.     
G. Cloud Computing Deployment         
According to the intended access methods and 
availability of cloud computing environments, there are 
different models of deployment [4]. Access restriction or 
permission depends on business processes, the type of 
information and characteristics of the organization. In some 
organizations, a more restrict environment may be necessary 
in order to ensure that only properly authorized users can 
access and use certain resources of the deployed cloud 
services. A few deployment models for cloud computing are 
discussed in this section. They include private cloud, public 
cloud, community cloud and hybrid cloud, which are briefly 
analyzed below. 
Private: In this model, the cloud infrastructure is 
exclusively used by a specific organization. The cloud may 
be local or remote, and managed by the company itself or by 
a third party. There are policies for accessing cloud services. 
The techniques employed to enforce such private model may 
be implemented by means of network management, service 
provider configuration, authorization and authentication 
technologies or a combination of these. 
Public: Infrastructure is made available to the public at 
large and can be accessed by any user that knows the service 
location. In this model, no access restrictions can be applied 
and no authorization and authentication techniques can be 
used. 
 Community: Several organizations may share the cloud 
services. These services are supported by a specific 
community with similar interests such as mission, security 
requirements and policies, or considerations about flexibility. 
A cloud environment operating according to this model may 
exist locally or remotely and is normally managed by a 
commission that represents the community or by a third 
party. 
Hybrid: Involves the composition of two or more 
clouds. These can be private, community or public clouds 
which are linked by a proprietary or standard technology that 
provides portability of data and applications among the 
composing clouds. 
III. 
RELATED WORKS 
In this section, we present related works in the fields of 
security, file systems and trust in the cloud. 
A. Security in the Cloud  
A number of technologies have been employed in order 
to provide security for cloud computing environments. The 
creation and protection of security certificates is usually not 
enough to ensure the necessary security levels in the cloud. 
Cryptographic algorithms used with cloud applications 
usually reduce performance and such reduction must be 
restricted to acceptable levels [21]. 
Cloud computing offers users a convenient way of 
sharing a large quantity of distributed resources belonging to 
different organizations. On the other hand, the very nature of 
the cloud computing paradigm makes security aspects quite 
more complex. Trust is the main concern of consumers and 
service providers in a cloud computing environment [7]. The 
46
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

inclusion of totally different local systems and users of quite 
diverse environments brings special challenges to the 
security of cloud computing. On one hand, security 
mechanisms must offer users a high enough level of 
guarantees. On the other hand, such mechanism must not be 
so complex as to make it difficult for users to use the system. 
The openness and computational flexibility of popular 
commercially available operating systems have been 
important factors to support the general adoption of cloud 
computing. Nevertheless, these same factors increase system 
complexity, reduce the degree of trust and introduce holes 
that become threats to security [7]. 
Huan et al. [22] investigate the different security 
vulnerability assessment methods for cloud environments. 
Experiments show that more vulnerabilities are detected if 
vulnerable tools and servers are in the same LAN. In other 
word, the hackers can find an easier way to get the target 
information if it is on the same LAN of compromised 
systems. Experimental results can be used to analyze the 
risk in third party compute clouds. 
Popovic et al. [23] discuss security issues, requirements 
and challenges that Cloud Service Providers (CSP) face 
during cloud engineering. Recommended security standards 
and management models to address these are suggested both 
for the technical and business community. 
B. Filesystem Security 
As the number of devices managed by users is 
continually increasing, there is a growing necessity of 
synchronizing several hierarchically distributed file systems 
using ad-hoc connectivity.  Uppoor et al. [6] present a new 
approach for synchronizing of hierarchically distributed file 
systems. Their approach resembles the advantages of peer-
to-peer synchronization, storing online master replicas of 
the shared files. The proposed scheme provides data 
synchronization in a peer-to-peer network, eliminating the 
costs and bandwidth requirements usually present in cloud 
computing master-replica approaches. 
The work in [9] presents CDRM, a scheme for dynamic 
distribution of file replicas in a cloud storage cluster. This 
scheme periodically updates the number and location of file 
block replicas in the cluster. The number of replicas is 
updated according to the actual availability of cluster nodes 
and the expected file availability. The dynamic distribution 
algorithm for replica placement takes into account the 
storage and computational capacity of the cluster nodes, as 
well as the bandwidth of the communication network. 
An implementation of the proposed scheme using an open 
source distributed file system named HDFS (Hadoop 
Distributed File System) is discussed. Experimental 
measurements point out that the dynamic scheme 
outperforms existing static file distribution algorithms. 
C. Trust 
The concepts of trust, trust models and trust management 
have been the object of several recent research projects. 
Trust is recognized as an important aspect for decision-
making in distributed and auto-organized applications [19] 
[20]. In spite of that, there is no consensus in the literature 
on the definition of trust and what trust management 
encompasses. In the computer science literature, Marsh is 
among the first to study computational trust. Marsh [19] 
provided a clarification of trust concepts, presented an 
implementable formalism for trust, and applied a trust 
model to a distributed artificial intelligence (DAI) system in 
order to enable agents to make trust-based decisions.  Marsh 
divided trust into three categories: 1. Basic Trust – This is 
the level of trust which represents the general trust 
disposition of agent X ∈2 A at time t. 2. General Trust – 
Given agents x, y ∈A, the general trust Tx(y)t represents 
the amount of trust that x has in y at time t. 3. Situational 
Trust – Given agents x, y ∈ A, and a situation α, the 
situational trust Tx(y,α)t represents the amount of trust that 
x has in y in situation α at time t. 
Beth et al. [20] also proposed a trust model for distributed 
networks. They derived trust recommendations from direct 
trust and gave them formal representations, as well as rules 
to derive trust relationships and algorithms to compute trust 
values. Josang et al. [24] describe a trust model where 
positive and negative feedback about a specific member is 
accumulated. The model is based on the Bayesian network 
model, using the beta probability density function to 
calculate a member’s expected future behavior. 
Trust is considered to be more than the authorized nature 
of security relations between human societies, which achieve 
stable and healthy operation, to a large extent thanks to the 
trust relationship between the individuals, groups and 
organizations. Therefore, in a large number of dynamic user-
oriented open network environments, the study of the trust 
relationships between the trust-based security mechanisms to 
ensure the safe operation of distributed applications has 
become a fundamental topic. Currently, most scholars have 
reached a consensus that trust should have three important 
features [25], which are discussed bellow.  
1) Subjectivity (different entities of the same view of 
things which will be affected by factors such as individual 
preferences may vary); 
2) The expected probability (the degree of trust can be 
extracted and formalized as the estimated likelihood of a 
given event); 
3) Relevance (trust is an aspect of things, for specific 
content). 
In recent works on trust, mainly two distinct methods are 
used for subjective trust reasoning: probabilistic reasoning 
based on statistical hypothesis testing; and approaches based 
on fuzzy theory, expert systems and artificial intelligence 
techniques. However, these methods do not fully reflect the 
essential nature of trust. Subjective trust, in essence, is based 
on the belief that it has great uncertainty. In the subjective, 
objective world, random and fuzzy uncertainties are the two 
main forms that have become the industry consensus [26]. 
Thus, the axiomatic methods based on probability theory or 
47
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

fuzzy set theory do not achieve a comprehensive assessment 
of trust information. 
D. Trust in the Cloud  
Trust and security have become crucial to guarantee the 
healthy development of cloud platforms, providing solutions 
for concerns such as the lack of privacy and protection, the 
guarantee of security and author rights.  
Privacy and security have been shown to be two 
important obstacles concerning the general adoption of the 
cloud computing paradigm. In order to solve these problems 
in the IaaS service layer, a model of trustworthy cloud 
computing which provides a closed execution environment 
for the confidential execution of virtual machines was 
proposed [5]. This work has shown how the problem can be 
solved using a Trusted Platform Module. The proposed 
model, called Trusted Cloud Computing Platform (TCCP), 
is supposed to provide higher levels of reliability, 
availability and security. In this solution, there is a cluster 
node that acts as a Trusted Coordinator (TC). Other nodes in 
the cluster must register with the TC in order to certify and 
authenticate its key and measurement list. The TC keeps a 
list of trusted nodes. When a virtual machine is started or a 
migration takes place, the TC verifies whether the node is 
trustworthy so that the user of the virtual machine may be 
sure that the platform remains trustworthy. A key and a 
signature are used for identifying the node. In the TCCP 
model, the private certification authority is involved in each 
transaction together with the TC [5]. 
Shen et al. [7] presented a method for building a 
trustworthy cloud computing environment by integrating a 
Trusted Computing Platform (TCP) to the cloud computing 
system. The TCP is used to provide authentication, 
confidentiality and integrity [7]. This scheme displayed 
positive results for authentication, rule-based access and 
data protection in the cloud computing environment. 
 Cloud service providers (CSP) should guarantee the 
services they offer, without violating users’ privacy and 
confidentiality rights. Li et al. [8] introduced a multi-
tenancy trusted computing environment model (MTCEM). 
This model was designed for the IaaS layer with the goal of 
ensuring a trustworthy cloud computing environment to 
users. MTCEM has two hierarchical levels in the transitive 
trust model that supports separation of concerns between 
functionality and security. It has 3 identity flows: a) the 
consumers, who hire the CSP cloud computing services; b) 
the CSP, that provides the IaaS services; c) the auditor 
(optional, but recommended), who is responsible for 
verifying whether the infrastructure provided by the CSP is 
trustworthy on behalf of users. In MTCEM, the CSP and the 
users collaborate with each other to build and maintain a 
trustworthy cloud computing environment. 
Zhimin et al. [12] propose a collaborative trust model for 
firewalls in cloud computing. The model has three 
advantages: a) it uses different security policies for different 
domains; b) it considers the transaction contexts, historic 
data of entities and their influence in the dynamic 
measurement of the trust value; and c) the trust model is 
compatible with the firewall and does not break its local 
control policies. A model of domain trust is employed. Trust 
is measured by a trust value that depends on the entity’s 
context and historical behavior, and is not fixed. The cloud 
is divided in a number of autonomous domains and the trust 
relations among the nodes is divided in intra and inter-
domain trust relations.  The intra-domain trust relations are 
based on transactions operated inside the domain. Each node 
keeps two tables: a direct trust table and a recommendation 
list. If a node needs to calculate the trust value of another 
node, it first checks the direct trust table and uses that value 
if the value corresponding to the desired node is already 
available. Otherwise, if this value is not locally available, 
the requesting node checks the recommendation list in order 
to determine a node that has a direct trust table that includes 
the desired node. Then it checks the direct trust table of the 
recommended node for the trust value of the desired node. 
The process continues until a trust value for the desired 
node is found in a direct trust table of some node. The inter-
domain trust values are calculated based on the transactions 
among the inter-domain nodes. The inter-domain trust value 
is a global value of the nodes direct trust values and the 
recommended trust value from other domains. Two tables 
are maintained in the Trust Agents deployed in each 
domain: form of Inter-domain trust relationships and the 
weight value table of this domain node. 
In [17] a trusted cloud computing platform (TCCP) which 
enables IaaS providers to offer a closed box execution 
environment that guarantees confidential execution of guest 
virtual machines (VMs) is proposed. This system allows a 
customer to verify whether its computation will run 
securely, before requesting the service to launch a VM. 
TCCP assumes that there is a trusted coordinator hosted in a 
trustworthy external entity. The TCCP guarantees the 
confidentiality and the integrity of a user’s VM, and allows 
a user to determine up front whether or not the IaaS enforces 
these properties. 
The work [18] evaluates a number of trust models for 
distributed cloud systems and P2P networks. It also 
proposes a trustworthy cloud architecture (including trust 
delegation and reputation systems for cloud resource sites 
and datacenters) with guaranteed resources including 
datasets for on-demand services.  
IV. 
HIGH LEVEL TRUST MODEL FOR FILE SHARING 
According to the review and related research [5] [6] [7] 
[8] [10] [12] [17], it is necessary to employ a cloud 
computing trust model to ensure the exchange of files among 
cloud users in a trustworthy manner.  In this section, we 
introduce a trust model to establish a ranking of trustworthy 
nodes and enable the secure sharing of files among peers in a 
public cloud.  
We propose a trust model where the selection and trust 
value evaluation that determines whether a node is 
48
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

trustworthy can be performed based on node storage space, 
link and processing capacity. For example, if a given client 
has access to a storage space in a public cloud, it still has no 
selection criterion to determine to which cloud node it will 
send a particular file.  
When a node wants to share files with other users, it will 
select trusted nodes to store this file through the following 
metrics: 
processing 
capacity 
(the 
average 
workload 
processed by the node, for example, if the node’s processing 
capacity is 100% utilized, it will take longer to attend any 
demands), storage capacity and link (better communication 
links and storage resources imply greater trust values, since 
they increase the node’s capacity of transmitting and 
receiving information). The trust value is established based 
on queries sent to nodes in the cloud, considering the metrics 
previously described. 
 
Figure 3. Proposed Trust Model. 
Each node maintains two trust tables: direct trust table 
and the recommended list. a) If a node needs to calculate the 
trust value of another node, it first checks the direct trust 
table and uses the trust value if the value for the node exists. 
If this value is not available yet, then the recommended lists 
are checked to find a node that has a direct trust relationship 
with the desired node the direct trust value from this node’s 
direct trust table is used. If there’s no value attached, then it 
sends a query to its peers requesting information on their 
storage space, processing capacity and link. The trust values 
are calculated based on queries exchanged between nodes.  
 b) The requesting node will assign a greater trust value to 
nodes having greater storage capacity and / or processing and 
better link. 
The trust value of a node indicates its suitability for 
storage and cloud operations. This value is calculated based 
on the historical interactions of the node, being represented 
by Tnp, for a given node. Its value may range from 0 to 1. As 
we have previously stated, the value of Tnp is calculated from 
queries exchanged between nodes regarding their overall 
system capacities. Figure 3 presents a high level view the 
proposed trust model, where the nodes query their peers to 
obtain the information needed to build their local trust table.        
In this model, a trust rank is established, allowing a node 
A to determine whether it is possible to trust a node B to 
perform storage operations in a public cloud. In order to 
determine the trust value of B, node A first has to obtain 
basic information on this node. Figure 4 depicts the query 
exchange process used for gathering the necessary trust 
information from a node B by a node A. 
 
 
Figure 4. Scenario of Information Request 
Node A needs to exchange a file in the cloud and wants 
know if the node B can be trusted to store and send the file. 
The protocol Trust Model can be described as follows: In 
step 1, A sends a query to B regarding its storage capacity, 
operating system, processing capacity and link. In step 2, B 
sends a response to he query sent by A, providing the 
requested information. In step 3, node A evaluates the 
information received from B and, if the information is 
consistent, it is stored in A’s local trust table. In general, the 
trust of node A in node B, in the context of a public cloud 
NP, can be represented by:  
b
np
np
a b
V
T
=
,
                                   (1) 
Where 
b
np
V is the trust value of B in the public cloud NP 
analyzed by A and 
np
a b
T ,  represents the trust of A in B, in the 
public cloud NP. According to the definition of trust, 
b
np
V  
equals the queries sent and received (interaction) by A and B 
in the cloud NP. 
The trust information may be stored as individual records 
of interaction with the respective node, being recorded in a 
local database that contains information about the behavior 
of each node in the cloud. Thus, the trust of node A in node 
B in the cloud NP can be represented by: 
j
V
T
j
i
b
npi
fnp
a b
∑
=
=
1
,
, for j > 0                (2) 
fnp
a b
T ,
 represents the final trust of A in B in the cloud NP, 
while j represents the number of interactions / querys 
between nodes A and B in the cloud NP. 
V. 
CONCLUSION 
    We have presented an overview of the cloud 
computing paradigm, as well as its main features, 
architectures and deployment models. Moreover, we 
49
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

identified the main issues related to trust and security in 
cloud computing environments.  
In order to address these issues, we proposed a trust 
model to ensure reliable exchange of files among cloud users 
in public clouds. In our model, the trust value of a given 
node is obtained from a pool of simple parameters related to 
its suitability for performing storage operations. Nodes with 
greater trust values are subsequently chosen for further file 
storage operations.  
As a future work, we plan to implement the proposed 
trust model and analyze node behavior after the ranking of 
trustworthy nodes is established.       
ACKNOWLEDGMENT 
This work resulted from applyed research supported by 
Dell Computers of Brazil and the Brazilian Ministry of 
Planning, Budget and Management. 
REFERENCES 
[1] Chen Kang and Zen WeiMing, “Cloud computing: system 
instance and current research,” Journal of Software, pp. 
20(5):1337-1347. 2009. 
[2] Minqi Zhou, Rong Zhang, Dadan Zeng, and Weining Qian, 
“Services in the cloud computing era: a survey,” Software 
Engineering Institute. Universal Communication. Symposium 
(IUCS), 4th International. IEEE Shanghai, pp. 40-46. China.  
978-1-4244-7821-7 (2010).  
[3] A. 
Marinos 
and 
G. 
Briscoe, 
“Community 
cloud 
computing,” in First 
International Conference Cloud 
Computing, CloudCom, volume 5931 of Lecture Notes in 
Computer Science,  pp. 472–484. Springer (2009). 
[4] P. Mell and T. Grance, The NIST Definition of Cloud 
Computing (Draft). National Institute of Standards and 
Technology. 
http://csrc.nist.gov/groups/SNS/cloud-
computing. 2009. 30 may 2011. 
[5] Wang Han-zhang and Huang Liu-sheng, “An improved 
trusted cloud computing platform model based on DAA and 
Privacy CA scheme,” IEEE International Conference on 
Computer Application and System Modeling (ICCASM 
2010). 978-1-4244-7235-2. 2010.  
[6] S. Uppoor, M. Flouris, and A. Bilas,  “Cloud-based 
synchronization of distributed file system hierarchies,” 
Cluster Computing Workshops and Posters (CLUSTER 
WORKSHOPS), IEEE International Conference,  pp. 1-4. 
2010. 
[7] Zhidong Shen, Li Li, Fei Yan, and Xiaoping Wu, “Cloud 
Computing System Based on Trusted Computing Platform,” 
Intelligent 
Computation 
Technology 
and 
Automation 
(ICICTA), IEEE International Conference on Volume: 1, pp. 
942-945. China. 2010. 
[8] Xiao-Yong Li, Li-Tao Zhou, Yong Shi, and Yu Guo, “A 
Trusted 
Computing 
Environment 
Model 
in 
Cloud 
Architecture,” Proceedings of the Ninth International 
Conference on Machine Learning and Cybernetics,  978-1-
4244-6526-2. Qingdao,  pp. 11-14. China. July 2010.  
[9] Qingsong Wei, Bharadwaj Veeravalli, Bozhao Gong, 
Lingfang Zeng, and Dan Feng, “CDRM: A Cost-Effective 
Dynamic Replication Management Scheme for Cloud Storage 
Cluster,” 2009 IEEE International Conference on Cluster 
Computing (CLUSTER), pp. 188-196, 2010. 
[10] Kai Hwang, Sameer Kulkareni, and Yue Hu, “Cloud Security 
with Virtualized Defense and Reputation-Based Trust 
Mangement,” 2009 Eighth IEEE International Conference on 
Dependable, Autonomic and Secure Computing (DASC ’09), 
pp. 717-722, 2009. 
[11] Xue Jing and  Zhang Jian-jun, “A Brief Survey on the 
Security Model 
of Cloud 
Computing,” 2010 Ninth 
International Symposium on Distributed Computing and 
Applications 
to 
Business, 
Engineering 
and 
Science 
(DCABES), Hong Kong IEEE, pp. 475 – 478.  Aug 2010. 
[12] Zhimin Yang, Lixiang Qiao, Chang Liu, Chi Yang,  and 
Guangming Wan, “A collaborative trust model of firewall-
through based on Cloud Computing,” Proceedings of the 2010 
14th International Conference on Computer Supported 
Cooperative Work in Design. Shanghai, China. pp. 329-334, 
14-16. 2010. 
[13] M. Miller, Cloud Computing – Web-Based Applications That 
Change the Way You Work and Collaborate Online, Que 
Publishing, Pearson Education, Canada 2008. 
[14] P. Mell and T. Grance, "Draft nist working definition of cloud 
computing - v15," 21. Aug 2009. 
[15] T. Dillon, Chen Wu, and E. Chang, “Cloud Computing: Issues 
and Challenges,” 24th IEEE International Conference on 
Advanced Information Networking and Applications (AINA),  
pp. 27-33. Australia, 2010.  
[16] Li Xiaoqi, Lyu M R, and Liu Jiangchuan. “A trust model 
based routing protocol for secure AD Hoc network,” 
Proceedings of the 2004 IEEE Aerospace Conference, pp. 
1286-1295. 2004. 
[17] N. Santos, K. Gummadi, and R. Rodrigues, “Towards Trusted 
Cloud Computing,” Proc. HotCloud. June 2009.  
[18] Kai Hwang, Sameer Kulkareni, and Yue Hu, “Cloud Security 
with Virtualized Defense and Reputation-Based Trust 
Mangement,” 2009 Eighth IEEE International Conference on 
Dependable, Autonomic and Secure Computing (DASC), 
Chengdu,  pp.717-722. China 2009. 
[19] S. P. Marsh, “Formalising Trust as a Computational 
Concept”, Ph.D. Thesis, University of Stirling, 1994.  
[20] T. Beth, M. Borcherding, and B. Klein, “Valuation of trust in 
open networks,” In ESORICS 94. Brighton, UK, November 
1994. 
[21] H. Takabi, J. B. D. Joshi, and G. Ahn, “Security and Privacy 
Challenges in Cloud Computing Environments,” IEEE 
Security and Privacy, vol. 8, no. 6, pp. 24-31, Nov./Dec. 
2010, doi:10.1109/MSP.2010.186. 
[22] Huan-Chung Li, Po-Huei Liang, Jiann-Min Yang, and 
Shiang-Jiun Chen, “Analysis on Cloud-Based Security 
Vulnerability Assessment,” 2010 IEEE 7th International 
Conference on e-Business Engineering (ICEBE), pp. 490-494, 
2010. 
[23] K. Popovic and Z. Hocenski,   “Cloud computing security 
issues and challenges,” MIPRO, 2010 Proceedings of the 33rd 
International Convention, pp. 344-349, 24-28 May 2010 
URL: http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumb
er=5533317&isnumber=5533310. 
[24] A. Jøsang and R. Ismail, “The Beta Reputation System,” In 
Proceedings of the 15th Bled Electronic Commerce 
Conference,  pp. 17-19. June 2002. 
[25] A. Abdul-Rahman and S. Hailes, “A distributed trust model,” 
In Proceedings of the 1997 New Security Paradigms 
Workshop,  pp. 48-60, 1998.  
[26] A. Jφsang and S. J. Knapskog, “A metric for trusted systems,” 
Global IT Security,  pp. 541-549, 1998. 
[27] Zhao-xiong Zhou, He Xu, and Suo-ping Wang, “A Novel 
Weighted Trust Model based on Cloud,” AISS: Advances in 
Information Science and Service Sciences, Vol. 3, No. 3, pp.  
115- 124,  April 2011. 
50
MESH 2011 : The Fourth International Conference on Advances in Mesh Networks
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-147-2

