Content Modeling Based on Concepts in Contexts
Hans-Werner Sehring
Content and Collaboration Solutions
T-Systems Multimedia Solutions GmbH
Dresden, Germany
Email: hans-werner.sehring@t-systems.com
Abstract—Content management is a generic term for dif-
ferent tasks dealing with content modeling, the creation and
management of content instances, and the delivery of content
as part of applications or documents. We studied content
models for real-world entities in the area of Concept-oriented
Content Management. In addition to content modeling, there
is agreement that content heavily depends on context in most
cases. Therefore, content management has to devise ways to
consider context in its models and processes. In this paper we
apply a novel generic content modeling language to address
the modeling demands arising from content management that
is augmented with context information.
Keywords-content management; content modeling; context;
contextualization; personalization.
I. INTRODUCTION
Content management is a generic term for different tasks
dealing with content modeling, the creation and management
of content instances, and the delivery of content as part of
applications or documents.
The deﬁnition of content is manifold. In particular, there
are two basic notions of content: (1) (purely) digital content
that is an entity of its own, and (2) content that is used to de-
scribe real-world entities. The latter employment of content
is used for entities that cannot adequately be represented by
structured data alone. One class of such content are product
descriptions as found in product information management
(PIM) applications. Catalogs seek to visualize products in
an attractive way. Another class are complex entities, in
particular ones from non-technical domains that do not rely
on formal representations. In those domains content often
represents (states of) a process, e.g., the inception, creation,
and use of a work of art in art history.
We study content models for such real-world enti-
ties in the area of Concept-oriented Content Management
(CCM) [6]. This paper presents a generic content modeling
language to address the modeling demands from that area.
There seems to be agreement that content depends on
context in most cases. This insight recently starts to have
an increasing impact on content industry. Therefore, content
management has to devise ways to consider context in its
models, functions, and processes.
In this paper, we present a modeling language that allows
combining different modeling approaches, including content
description, classiﬁcation, and contextualization.
The paper is organized as follows: In Section II, we
formulate requirements for content models that describe
entities in contexts. Section III deﬁnes a modeling lan-
guage applicable for this kind of content representation.
How typical modeling tasks are solved by that language is
discussed in Section IV. The paper closes with conclusions
in Section V.
II. CONTENT MODELING REQUIREMENTS
Content management requirements as laid out in the
introduction demand for adequate content structures. To
this end, content modeling is of central importance for
content management applications. Typical content modeling
approaches are discussed in this section.
A. Content Description
A range of modeling concepts and languages for the de-
scription of content has emerged. Figure 1 gives an overview
over the most commonly used modeling techniques.
Digital content itself, from a technical point of view,
simply consists of binary data representing a text, an image,
a sound, etc. By adding descriptive information such data is
enriched in order to be perceivable as content.
The basic level of content management is established by
meta data and descriptive information that further describe
the data or the entity represented by it, respectively. Clas-
siﬁcation, e.g. by tagging, can be seen as a speciﬁc kind of
descriptive information that enables additional functionality
like ﬁltering and clustering. Classiﬁcation is particularly
useful if classiﬁers are related to each other, e.g. by narrower
term and broader term relationships. Such relationships are
provided by taxonomies and ontologies, e.g. deﬁned explic-
itly or by description logic expressions, or freely assigned
tags from which folksonomies are derived.
In CCM we also investigate extensional descriptions of
content by providing a sample set for terms as epistemic
structures. As an example three images describing the con-
cept “strength” are shown in Figure 1 on the left-hand
side. A similar approach is taken by automatic classiﬁcation
systems that take instances as a training set.
Many content management approaches rely on schema
deﬁnitions that are based on the object-oriented paradigm.
Though object-orientation offers many beneﬁcial features
18
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

Figure 1.
Content modeling approaches.
like inheritance and polymorphism, it is in several respects
not well suited for those tasks.
In particular, the rigid distinction between classes and in-
stances often is an obstacle for content modeling. Classes are
supposed to provide a “blueprint” for instances. Instances are
not supposed to deviate from the given form. This hinders
the modeling of, e.g., variants, roles, and materializations
that both represent views on one speciﬁc instance.
Furthermore, object-orientation is based on one single
class hierarchy. In content management one typically has to
deal with classes of different kinds. One main distinction is
the one between structural deﬁnitions (“a book has a title and
an author”) and domain-speciﬁc classiﬁcation information
(“there are books on computer science and on mathemat-
ics”). Typically, the different kinds of classiﬁcation exhibit
different characteristics [4].
This paper presents a novel language with properties that
make it suitable for content modeling. It borrows from
the object-oriented paradigm, but it abstracts from certain
concepts. This way it provides a basis for an integration of
the above-mentioned modeling techniques.
B. Content Contextualization
In addition to content descriptions as provided by the
approaches sketched in the previous section, the notion of
context is of importance for content. There is agreement in
the content management community that context is central
to the task outlined in the introduction (“if content is king,
context is the kingdom” [3]). Various studies underline the
importance of context for content management [1].
The use of content is heavily inﬂuenced by the context
of the user and the circumstances under which content was
created. The context of content has to be considered with
respect to modeling, interpretation, and delivery of content.
By introducing context into content models the deﬁnition
of content variants as well as of the history of content
creation and use is supported.
Context enables an extended content interpretation, with
practical applications for content analysis and retrieval as
well as the computation of recommendations. The value of
content for a speciﬁc use can be judged if the current work
context of the user is known, as well as the history of a
particular piece of content by means of data provenance.
Modern content-based applications include a context-
dependent delivery. Knowledge about the context of the user
allows a personalized content presentation. For delivery the
context often also refers to the publication channel and the
device on which documents are displayed.
III. MINIMALISTIC META MODELING LANGUAGE
The Minimalistic Meta Modeling Language (M3L, pro-
nounced “mel”) is a modeling language that is currently
under development and that has not been reported about yet.
Though its further development is not particularly directed
at content modeling, the rationale behind the language is
based on the modeling tasks discussed in this paper.
M3L offers a rather minimalistic syntax that is completely
covered by the following grammar (in BNF):
model
::=
⟨prop-list⟩
def
::=
⟨id⟩“is”⟨id-list⟩
[“{”⟨prop-list⟩“}”[⟨production-rule⟩]
|⟨production-rule⟩|“; ”]
19
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

ref
::=
⟨id⟩[“from”⟨id⟩]
id-list
::=
(“a”|“an”|“the”)⟨ref⟩[“, ”⟨id-list⟩]
prop-list
::=
⟨def⟩[⟨prop-list⟩]
production-rule
::=
“|−”⟨ref⟩“; ”
id
::=
...(reqular expression of identiﬁers)
The production for identiﬁers has been omitted. It is a typical
lexer rule that deﬁnes identiﬁers as character sequences.
Identiﬁers may—in contrast to typical formal languages—be
composed of any character sequence. Quotation is used to
deﬁne identiﬁers containing whitespace.
The semantics of M3L statements will be discussed in the
subsequent sections.
The descriptive power of M3L lies in the fact that the
formal semantics is rather abstract. There is no ﬁxed domain
semantics connected to M3L deﬁnitions.
A. Concept Deﬁnitions and References
A M3L deﬁnition consists of a series of deﬁnitions (⟨def⟩
in the grammar deﬁnition above). Each deﬁnition starts with
a previously unused identiﬁer that is introduced by the def-
inition and may end with a semicolon, e.g.: NewConcept;
We call the entity referenced by such an identiﬁer a
concept.
The keyword is introduces the optional reference to a
base concept. An inheritance relationship as known from
object-oriented modeling is established between the base
concept and the newly deﬁned derived concept. This rela-
tionship leads to the visibility of the concepts deﬁned in
the context (see below) of the base concept to be visible in
the derived concept. Furthermore, the reﬁned concept can
be used wherever the base concept is expected (similar to
subtype polymorphism).
As can be seen in the grammar, the keyword is always
has to be followed by either a, an, or the. The keywords
a and an are synonyms for indicating that a classiﬁcation
allows multiple sub concepts of the base concept:
NewConcept is an ExistingConcept;
NewerConcept is an ExistingConcept;
There may be more than one base concept. Base concepts
can be enumerated in a comma-separated list:
NewConcept is an ExistingConcept,
an AnotherExistingConcept;
The keyword the indicates a closed reﬁnement: there
may be only one reﬁnement of the base concept (the
currently deﬁned one), e.g.:
TheOnlySubConcept is the SingletonConcept;
Any further reﬁnement of the used base concept(s) leads to
an error.
Apart from the deﬁnition of new concepts the above
expressions can be used to augment a concept deﬁnition
if the leading identiﬁer already has been introduced. E.g.,
the following expressions lead to the same deﬁnition of the
concept NewConcept as the above variant:
NewConcept;
NewConcept is an ExistingConcept;
NewerConcept is an AnotherExistingConcept;
B. Content and Context Deﬁnitions
Concept deﬁnitions as introduced in the preceding section
are valid in a context. Deﬁnitions like the ones seen so
far add concepts the topmost of a tree of contexts. Curly
brackets open a new context, e.g.:
Person { name is a String }
Peter is a Person {"Peter Smith" is the name}
Employee { salary is a Number }
Programmer is an Employee;
PeterTheEmployee is a Peter, a Programmer {
30000 is the salary }
PeterTheMusician is a Peter, a Musician {
Oboe is a playedInstrument }
In this example, we assume that concepts String and
Number are already deﬁned. In practice, the concept 30000
should also be given. If not, it will be introduced locally in
the context of PeterTheEmployee, preventing reuse of
the identical number.
M3L has visibility rules that correlate to contexts. Each
context deﬁnes a scope in which deﬁnition identiﬁers are
valid. Concepts from outer contexts are visible in inner
scopes. E.g., in the above example the concept String
is visible in Person because it is deﬁned in the top-
most scope. salary is visible in PeterTheEmployee
because it is deﬁned in Employee and the context is
inherited. salary is not valid in the topmost context and
in PeterTheMusician. Contexts with those names may
be deﬁned later on, though.
Tying a context to a concept can be interpreted in different
ways. This is elaborated in Section IV.
Contexts can be referenced using the projection op-
erator from in order to use concepts across contexts:
salary from Employee.
C. Narrowing and Production Rules
M3L allows assigning one production rule to each con-
cept. Production rules ﬁre when an instance comes into
existence that matches the deﬁnition of the left-hand side
of the rule. They replace the new concept by the concept
referenced by the right-hand part of the rule.
The following shows an example:
Person {
female is the sex; married is the status
} |- Wife;
Whenever a female Person who is married shall be
created then a Wife is created instead.
Production rules are usually used in conjunction with
M3L’s narrowing of concepts. Before a production rule is
applied, a concept is narrowed down as much as possible.
Narrowing is a kind of matchmaking process to apply the
most speciﬁc deﬁnition possible.
20
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

If a base concept fulﬁlls all deﬁnitions—base concepts
and constituents of the context—of a derived concept, then
the base concept is taken as an equivalent of that derived
concept. If a production rule is deﬁned for the derived
concept, this rule is used in place of all production rules
deﬁned for any super concept.
The following code shows an example of combined nar-
rowing and production rules:
Person { sex; status }
MarriedFemalePerson is a Person {
female is the sex; married is the status
} |- Wife;
MarriedMalePerson is a Person {
male is the sex; married is the status
} |- Husband;
There is a concept Person. Whenever an “instance”
(a derived concept) of Person is created, it is checked
whether it actually matches one of the more speciﬁc
deﬁnitions. A married female Person is replaced by
Wife, a married male Person by Husband, and every
other Person is kept as it is:
Person {
Person {
male is the sex }
→
male is
the sex }
Person {
female is the sex;
→
Wife
married is the status }
Person {
male is the sex;
→
Husband
married is the status }
IV. CONTENT MODELING WITH THE M3L
In this paper the M3L is used for concept-oriented content
management as motivated in Section II. This section dis-
cusses content modeling aspects and their formulation using
the M3L.
A. Content Modeling
The goal of the application of M3L for content manage-
ment is to deﬁne content in a context, where both content
and context consist of an identiﬁer and nested sub contents
or contexts. This leads to the following interpretations of a
concept deﬁnition A{B;}: it may represent ...
• content A with partial content B,
• content B in a context A, or
• a context A with a subcontext B.
Object-orientation has difﬁculties modeling class and
instance variants (Section II-A). Figure 2 illustrates the
distinct layers found in object-oriented systems. Objects
are instances of classes. Classes can in turn be viewed as
instances of metaclasses. The layer of metaclasses is closed;
metaclasses can be modeled as instances of metaclasses.
In model management systems there may additionally be
a meta meta layer. Furthermore, there are relationships
between instances (association, aggregation) and between
classes (specialization, generalization).
Metaclass
Class
Instance
object : Class
Class
MetaClass
Class : ConcreteClass
AbstractClass
ConcreteClass
<<instanceOf>>
<<instanceOf>>
<<instanceOf>>
Figure 2.
Levels of object-oriented models.
M3L abstracts from these distinct layers and allows
interpreting concepts as classes, instances, or variants of
instances. An expression A is a B can be interpreted in
the following ways:
• A is a type, B is its super type,
• A is an instance of type B, or
• A is a variant, role, or similar of instance B.
Expressions with one of the above interpretations are used
for various purposes:
• to structure content, e.g.:
Picture is a Content {
imgFile is a ByteArray ;
title is a String }
Here, Picture is a content class that deﬁnes two
attributes imgFile and title, each of them with
“type” information.
• to present content in a context, e.g.:
PoliticalIconography is a Context {
bonaparteCrossesTheAlps is a Picture }
A concrete Picture is put in a context that helps,
e.g., interpreting it.
• to deﬁne a context hierarchy, e.g.:
PoliticalIconography is a Context {
StrengthSymbols is a Context }
The area of Political Iconography is deﬁned as a context
with the domain of symbols of strength as one of the
speciﬁc contexts it includes.
These basic modeling means are used for various aspects
of content models, some of which are discussed in the
subsequent sections.
B. Domain Reuse
Contexts are often deﬁned by a combination of other con-
texts. This way, existing models may (eventually partially)
be reused. Reuse is achieved by putting concepts into new
contexts. By the additional contextualization content can
receive a new meaning or contribute to an additional use
case. As part of the combination of contexts, reused concepts
may be adapted for new contexts.
21
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

For the following example assume classes Arts and
History to be deﬁned that represent the respective re-
search disciplines.
ArtHistory {
Artist is the Artist from Arts;
Painter is the Painter from Arts;
Sculptor is the Sculptor from Arts;
Epoch is the Epoch from History;
Artwork {
title is a String;
artist is an Artist;
epoch is an Epoch }
Painting is an Artwork {
artist is a Painter }
Statue is an Artwork {
artist is a Sculptor } }
The example shows the deﬁnition of a new context for art
history that is composed of concepts from the domains of
arts and history. The idiom C is the C from M makes
concepts available in the newly deﬁned context: the keyword
from addresses a source context M from which to import a
concept C. A new concept is deﬁned in the current context
as the only reﬁnement of the original concept, but does not
add any structure. This way it effectively provides a copy
of the original concept from the source context.
C. Variants
Concept deﬁnitions in M3L provide a direct means to
deﬁne variants of a concept in different contexts. Variants of
a concept in one context are deﬁned by means of reﬁnement.
The following code shows a quite simple example:
Peter is a Person;
PeterTheEmployee is a Peter, a Programmer;
PeterTheHobbyMusician is a Peter, a Musician {
Oboe is the playedInstrument }
We model a Person named Peter. Speciﬁc information
on Peter is given in a context-speciﬁc way. E.g., the fact
that Peter works as a programmer is stated by a con-
cept describing Peter as an employee. A different aspect
of Peter’s life are his hobbies: in the example he is a
Musician who—given that Musician deﬁnes a concept
playedInstrument—is stated to play the oboe.
D. Revisions
In some applications concepts exist in different revisions.
Revisions and their relationship have different meanings.
Typical content management systems record revisions to
reﬂect the process of content creation. This is often required
for legal reasons that demand content states to be repro-
ducible.
When modeling real-world entities through content there
is an additional need for revisions. Real-world entities de-
velop over time, so that representations of content may in
fact have to cover the process of invention, creation, use, etc.
This is particularly true for entities considered in history
and art history. In order to reﬂect a process that typically
manifests itself in states of the entity under consideration
there have to be concepts for those states. The concepts are
reﬁnements of one common concept.
The following example shows two states of the famous
painting “Napoleon Crossing the Alps”:
NapoleonCrossingTheAlps is a Painting;
HistoricalContext {
NapoleonCrossingTheAlpsSymbol
is a NapoleonCrossingTheAlps, a Strength; }
Museum {
NapoleonCrossingTheAlpsArtwork
is a NapoleonCrossingTheAlps, a Classic; }
There is a state where the Painting is/was used as
a political instrument to visualize strength. Another state
represents the painting as a piece of art that is used because
of its famousness (independent of the original intention).
E. Personalization
Content management users are provided with predeﬁned
concepts that they typically want to tailor to their needs by
means of personalization. We investigated the use of person-
alization for research, teaching, and software engineering.
For example, a model deﬁnition like that for Political
Iconography above is typically provided as a standardized
model. Though standardization is of importance for the
cooperation within a domain it is often too restrictive for
individual work. Therefore, researchers want to personalize
given models both in structure and in content [6].
The following shows an example for the Political Icono-
graphy model as shown above:
MyPI is a PoliticalIconography {
Architect
is the Architect from Architecture;
Building is an Artwork {
artist is an Architect } }
Here some individual researcher decided to not only consider
paintings and sculptures to be pieces of art with political
relevance, but to also considers buildings etc. To this end, a
new context is declared and the relevant concept is imported.
Inner concepts can be personalized by recursively apply-
ing the shown reﬁnement. This way, both sub contexts and
aggregated content can be personalized.
F. Content Clusters
Classiﬁcation of content is used as a parameter to many
operations on content. Classiﬁcation leads to (or is derived
from) a clustering of the set of content objects with respect
to some notion of content semantics.
Clusters deﬁne contexts in which content can be inter-
preted, delivered, queried, etc. To this end, the notion of
context typically incorporates not just one concept at a time,
but considers complex contexts for scenarios characterized
by multiple aspects of content.
As an example, consider a structure like the following:
22
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

Tag;
someTag is a Tag;
Content { ... }
someContent is a Content, a someTag;
A type Content is used to create content objects of a
certain structure. These objects can be classiﬁed by assigning
tags to them. Using M3L’s principles, tags are created as
Tag objects that are used as additional base concepts for
content objects.
M3L’s production process allows deriving context in-
formation based on content. As an example consider the
following code:
Location { lat is an Int; lon is an Int }
geoLocationOfHamburgPort is a Location {...}
Event {
date is a Timestamp }
LocalEvent is an Event {
Location location }
822ndAnniversaryOfPortOfHamburg
is a LocalEvent
{
geoLocationOfHamburgPort is the location;
05/06/2011 is a date;
05/07/2011 is a date;
05/08/2011 is a date }
In this example we deﬁne basic categories for spatial and
temporal classiﬁcation. LocalEvent is deﬁned as the base
concept for content that carries characteristics from both
these classiﬁcation domains.
New content can be created—independent of these
deﬁnitions—like this:
myPhoto is a Photo {
... is the imgData;
geoLocationOfPortOfHamburg is the location;
05/07/2011 is the date }
Since
myPhoto
fulﬁlls
all
requirements
of
a
822ndAnniversaryOfPortOfHamburg, myPhoto is
classiﬁed accordingly.
The determination of context from content can be used
for a range of operations on content. In particular, there are
several uses of pattern-based analysis in community-based
content collections like support for queries, tag suggestions
for newly added content, and summaries generated for large
collections [5].
An increasing number of applications aims to guide users
by presenting recommendations for content that is supposed
to be of interest to the user. Recommendations heavily
depend on context, typically including the tracked users and
the user for whom to compute recommendation. The model
of a user context may, for instance, consist of an explicit user
proﬁle and implicit user tracking information. Recommenda-
tions can be deﬁned as personalized content by composition
of existing content [2]. In M3L such recommendations can
be deduced by applying production rules.
V. CONCLUSION
Content modeling is of practical importance, both for
digital content as well as for content-based descriptions of
real-world entities. New applications demand for extended
modeling support. Recently, context information was iden-
tiﬁed as a key ingredient to powerful content models.
Existing content modeling approaches can cover most
content modeling requirements, but they are not well in-
tegrated. Some model aspects, in particular variants of
instances with dynamic classiﬁcation in changing contexts
can only be expressed by auxiliary constructs in many cases.
The Minimal Meta Modeling Language as an abstract
modeling language (M3L) is a proposal to an integrated
content and context modeling approach. The expressive
power of the M3L supports content management tasks
in an integrated way, providing modeling constructs for
application-speciﬁc models.
ACKNOWLEDGMENT
The author would like to thank Joachim W. Schmidt and
Sebastian Bossung for fruitful discussions about content
modeling. Numerous project partners who participated in
research projects on the topic are acknowledged. The author
owes a debt to his employer, the T-Systems Multimedia
Solutions GmbH, for supporting the scientiﬁc work that ab-
stracts and extends the insights gained in practical projects.
REFERENCES
[1] From content to context to engagement – the future of web
content management is context. Executive focus white paper,
Ektron, Inc., 2010.
[2] Zeina Chedrawy and Syed Sibte Raza Abidi. An adaptive per-
sonalized recommendation strategy featuring context sensitive
content adaptation. In Proceedings Adaptive Hypermedia and
Adaptive Web-Based Systems, 4th International Conference,
pages 61–70. Springer, 2006.
[3] Neil Clemmons. If content is king. . . context is the kingdom. . . .
http://experiencematters.criticalmass.com/2007/12/07/if-
content-is-king-context-is-the-kingdom/, December 2007. last
visited May 26 2011.
[4] Joseph Goguen. An introduction to algebraic semiotics, with
application to user interface design.
In Computation for
Metaphors, Analogy, and Agents, pages 242–291. Springer,
1999.
[5] Lyndon Kennedy, Mor Naaman, Shane Ahern, Rahul Nair, and
Tye Rattenbury. How ﬂickr helps us make sense of the world:
Context and content in community-contributed media collec-
tions. In Proceedings of the 15th International Conference on
Multimedia (MM2007), pages 631–640. ACM, 2007.
[6] Hans-Werner Sehring and Joachim W. Schmidt.
Beyond
databases: An asset language for conceptual content manage-
ment. In Proceedings of the 8th East European Conference
on Advances in Databases and Information Systems, ADBIS
2004, pages 99–112. Springer-Verlag, 2004.
23
CONTENT 2011 : The Third International Conference on Creative Content Technologies
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-157-1

