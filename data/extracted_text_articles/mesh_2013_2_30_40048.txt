Flow Classiﬁcation in Delay-Aware NUM-Oriented Wireless Mesh Networks
Przemyslaw Walkowiak, Maciej Urbanski, Mateusz Poszwa, Radoslaw Szalski
Institute of Control and Information Engineering
Poznan University of Technology
Poznan, Poland
Email: {przemyslaw.walkowiak, maciej.urbanski, mateusz.poszwa, radoslaw.szalski}@put.poznan.pl
Abstract—The Network Utility Maximisation (NUM) framework
is one of the most widely investigated approaches for designing
the resource management system for wireless mesh networks. In
order to perform the NUM-oriented per-ﬂow network resource
management, data ﬂows have to be recognised and classiﬁed.
Relevant solutions that are constituents of the state-of-the-art
NUM frameworks are insufﬁcient, since they are able to dif-
ferentiate between various network ﬂows only according to the
transport layer protocol used. The paper describes improvements
introduced to an existing DANUM System (DANUMS) imple-
mentation. They provide means for ﬂexible ﬂow classiﬁcation
enabling more accurate utility estimation for more diverse types
of ﬂows. The solution improves DANUMS’ ability to assign
appropriate utility functions suitable for different types of trafﬁc.
The experiments show that the enhanced framework enables
improving the performance of the DANUMS.
Keywords-DANUMS; wireless mesh networks; Network Utility
Maximisation; trafﬁc classiﬁcation
I.
INTRODUCTION
As the wireless network access is becoming more and more
widespread, the needs of its users grow. When the demands
exceed the network’s capacity, not all ﬂows can be served
equally well. NUM [1] aims to manage network resources
in an optimal way, which ensures maximal satisfaction of
network users. DANUMS [2] provides NUM functionality by
identifying and classifying ﬂows, as well as by measuring and
acting on changes of their utility. It is an application of and an
enhancement to the NUM model providing delay awareness.
The framework improves the fairness of the resource allocation
among ﬂows with different delay requirements. DANUMS has
been designed to work in wireless mesh networks [2].
DANUMS is a part of the architecture developed within the
Carrier-grade delay-aware resource management for wireless
multi-hop/mesh networks (CARMNET) project [3] referred
to as CARMNET architecture. This architecture consists of
multiple components (see Figure 1): a routing component in
the form of Optimised Link State Routing Protocol daemon
(OLSRd), a custom SIP User Agent integrated with a Linux
Loadable Kernel Module (LKM), a user interface (WebUI)
and an IP Multimedia Subsystem (IMS) platform. SIP User
Agent is responsible for asynchronous communication between
LKM and the IMS. The user interface is a WWW application
that allows users to bind utility functions to various types of
trafﬁc. The WebUI also provides insight into statistics about
transmitted trafﬁc and network usage cost.
Internet
CARMNET Node
User space
Kernel space
DANUMS SIP
User Agent
IP Stack
DANUMS
LKM
OLSRd
DANUMS
plug-in
WebUI
IMS
netlink
IP
Figure 1.
Architecture of the CARMNET network [3].
In NUM, network resource allocation is performed on per-
ﬂow basis. The ﬂow classiﬁcation is necessary for recognition
of ﬂow-to-application associations. Once the ﬂow’s category
is identiﬁed, its utility can be computed according to its
characteristics. Bidirectional ﬂows, which can be referred to
as request-response ﬂows, also should be properly identiﬁed
as their performance may affect each other’s utility. TCP
ﬂows’ rate and responsiveness depend on the timely delivery
of ACK segments. Thus, it is desirable to prioritise request
and response ﬂows similarly in order to avoid unnecessary
congestion window reductions due to excessive ACK segments
queueing. Moreover, recognition of response ﬂows is beneﬁcial
from the business perspective, which is important in the
CARMNET architecture integrating Authentication, Authori-
sation and Accounting (AAA) and charging functionality [3].
Each node that generates trafﬁc should have control over both
request and response ﬂows’ virtual prices (see Section III).
The basic DANUMS implementation [2] differentiates
ﬂows according only to the transport layer protocol. While
effective for basic scenarios, this solution is not versatile
enough to control media streams with different needs. This
paper describes a practical implementation of a more robust
33
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-299-8
MESH 2013 : The Sixth International Conference on Advances in Mesh Networks

method for ﬂow classiﬁcation and recognition of response
ﬂows.
The paper structure is as follows. Related work is described
in Section II. Section III introduces the Delay-aware Network
Utility Maximisation (DANUM) model and provides its main
purposes. Section IV discusses the problem of ﬂow classiﬁca-
tion. Methods of recognition of response ﬂows are described
in Section V. Experiments and their results are described in
Sections VI and VII, followed by conclusion in Section VIII.
II.
RELATED WORK
Many NUM systems determine utility of ﬂows according
to the ﬂows’ throughput only [4]–[7]. Such an approach is not
sufﬁcient to effectively measure the utility of delay-sensitive
ﬂows. DANUMS, on the other hand, takes the delay into
consideration as well [2].
The work [6] presents a policy ensuring constant worst-
case delay, however, the utility function used in a maximisation
scheme is based only on throughput. In [4], it is assumed
that the mechanism based on providing inelastic ﬂows with
bandwidth exceeding their injection rate ensures satisfying
their end-to-end delay requirements. The framework presented
in [5] considers only TCP ﬂows. Solutions presented in [7]
require modiﬁcation of a network card driver, which does not
comply with the basic assumptions of CARMNET [3].
In order to estimate the ﬂow’s utility accurately, its type
has to be determined. Advanced techniques, such as payload
examination [8], machine learning algorithms [9], [10] or
solutions based on neural networks [11], have been used for
this purpose. However, DANUMS is also aimed at serving
mobile nodes, which may be power-constrained. For this
reason, classiﬁcation methods for DANUMS should not be
computationally complex.
III.
DANUM SYSTEM
The aim of the DANUM model is to provide an optimal
packet scheduling policy regarding the maximisation of the
network users’ satisfaction. It targets the maximum of the
network utility (a sum of utility of all ﬂows within the
network):
max
X
r∈S
Ur(xr, dr),
(1)
where S denotes a set of ﬂows within the network; xr – rate
of ﬂow r; dr – delay of ﬂow r; Ur – the utility function of
ﬂow r. In other words, DANUMS aims at solving the NUM
problem in a delay-aware way.
The relation between measurable ﬂow transmission quality
parameters and its utility is modelled by means of a utility
function. Each function corresponds to ﬂows of a given type
or, more precisely, to ﬂows with speciﬁc network requirements.
In DANUMS the utility is determined not only according to
the ﬂow’s throughput, but also to its end-to-end delay. Each
ﬂow may have a distinct utility function since it may prioritise
different network performance parameters. Assigning utility
functions to ﬂows is a task of the Flow Classiﬁer described in
Section IV.
It has been proven that the Max-Weight Scheduling (MWS)
algorithm is a solution to the standard throughput-oriented
NUM problem formulation [12]. The DANUMS applies the
MWS algorithm to virtual queue levels in order to determine
the next ﬂow queue to transmit a packet from.
A virtual queue is deﬁned as a product of ﬂow’s packet
backlog level and a virtual price of a single packet. Packet’s
virtual price is a value of the derivative of a utility function
assigned to the ﬂow. In other words, the more utility a ﬂow
would gain from improving its network performance parame-
ters (e.g., by lowering its delay), the higher is the virtual price.
The virtual price plays an important role in packet scheduling
as well as inﬂuences the cost of CARMNET network usage.
DANUMS LKM is responsible for packet queueing, mea-
suring ﬂows’ characteristics, as well as applying utility func-
tions and the backpressure scheduling algorithm. Packets
scheduled by DANUMS are relayed to the network interface
output buffer, the level of which is kept low as a result of
using Layer-2 Queue level Estimation [13]. Possible routes
acquisition and explicit signalling of virtual queues is done
through modiﬁed OLSRd. The details concerning the DANUM
and its implementation can be found in [2], [13]–[15].
IV.
FLOW CLASSIFICATION FRAMEWORK FOR DANUMS
Flows can be divided into two general groups: throughput-
demanding and delay-sensitive. They roughly correspond to
the TCP- and UDP-based trafﬁc, respectively. Such a division
was used in DANUMS prior to implementation of the Flow
Classiﬁer presented in this section. However, for some scenar-
ios, this simple classiﬁcation is insufﬁcient. The application of
the classiﬁcation subsystem in DANUMS allows a more ﬁne-
grained ﬂow classiﬁcation. The more trafﬁc classes a given
NUM system is able to recognise, the more accurately the
utility functions may reﬂect the requirements of different types
of trafﬁc.
Flow Classiﬁer used in DANUMS is a cascade of simple
ﬁlters (see Figure 2). Flow’s properties are checked against
rules deﬁned for each of the ﬁlters. Each rule is a pair
composed of ﬁlter-speciﬁc constraints and a ﬂow type. If any
of the rules matches the ﬂow, i.e., the ﬂow’s properties meet
the rule’s constraints, the classiﬁcation yields a ﬂow type
assigned to the matching rule as a result. An unspecialised
utility function is assigned if all the ﬁlters fail to classify
the ﬂow. Using this utility function is equivalent to setting a
constant virtual price for each packet, i.e., excluding the ﬂow
from the evaluation of NUM.
Response ﬂow recognition
Classiﬁcation by application name
Classiﬁcation by port numbers
Classiﬁcation by application protocol
Classiﬁcation by transport protocol
Figure 2.
Overview of the Flow Classiﬁcation Framework for DANUMS.
Arrows denote the order of applying the ﬁlters.
34
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-299-8
MESH 2013 : The Sixth International Conference on Advances in Mesh Networks

A. Classiﬁcation by a transport layer protocol
Classiﬁcation by the transport layer protocol is the sim-
plest solution, nevertheless, it lacks the ability to differentiate
speciﬁc uses of each of the protocols. An example of different
TCP protocol applications can be provided: the comfort of Web
navigation depends on low delay, whereas comfort of sending
an e-mail does not.
B. Classiﬁcation by source and destination port numbers
A common way to determine ﬂow’s type is to assume
that the trafﬁc of a certain service or an application is bound
to a predeﬁned port. The advantage of this approach is that
the port numbers are already known to the classiﬁer, so no
additional processing is needed to determine them. However,
this assumption usually holds true only for services using the
well-known ports provided they were not conﬁgured to use
non-standard ports. Moreover, some application layer protocols
can be used with random ports, or even different transport
protocols. For the given reasons, the method assuming that
the trafﬁc of a certain service or an application is bound to
a predeﬁned port would require constant reconﬁgurations to
ensure an optimal classiﬁcation of ﬂows.
C. Classiﬁcation by an application layer protocol
In order to address the limitations of the above-described
approaches, classiﬁcation by the application layer protocol has
been considered. The transport layer and network layer proto-
cols’ headers do not provide any indication of the application
layer protocol used. Therefore, it has to be determined by a
direct analysis of the payload data, which is a complex task and
should be delegated to an external program such as l7-ﬁlter [8].
However, its kernel-space implementation is known to cause
problems on SMP-enabled processors [16], and the use of the
user-space implementation in critical systems is discouraged
by its authors [16]. Due to these disadvantages as well as lack
of well tested alternatives, this classiﬁcation method was not
yet implemented.
Even if it was possible to use some version of the l7-ﬁlter to
classify ﬂows, some of its patterns return false results [17] and
the cost of this method is considerably higher than the cost of
other methods discussed here. This may have an inﬂuence both
on performance and energy consumption. The latter aspect is of
great importance for the use of mobile nodes, which DANUMS
is designed for [2].
D. Classiﬁcation by ﬁlename of sending application
It is possible to use locally available information to au-
tomatically determine the ﬁlename of the application sending
the ﬂow. Moreover, it is much more probable that the node’s
user is able to state the name of the application she uses, than
that she is able to determine the port numbers bound to ﬂows
sent by the application. Thus, this method supports associating
ﬂows with desired utility functions chosen by the user through
the WebUI.
On the other hand, some applications send many types
of ﬂows simultaneously. A VoIP client, for example, is re-
sponsible for setting up sessions, sending multimedia streams
and reporting statistics by means of SIP, RTP and RTCP
protocols respectively. It is essential to choose a utility function
meant for the protocol whose transmission quality impacts the
application usability the most (in this case – RTP). In this
approach, heterogeneous ﬂows sent by a single application are
assigned the same utility function, which is, obviously, not the
optimal assignment.
E. Combining the classiﬁcation methods
Each of the aforementioned methods has disadvantages,
which render each of them insufﬁcient when used separately.
Some of the disadvantages may be avoided or minimised by
combining several classiﬁcation methods.
Response ﬂows are already classiﬁed by their destination
nodes (referred to as “owners”). They are treated specially and
should be ﬁltered out ﬁrst.
The most desired classiﬁcation criterion is the application
layer protocol used for the ﬂow payload. Unfortunately, as
discussed above, it is computationally expensive to determine.
For this reason, classiﬁcation based on regular expressions
should be preceded by less complex methods. Classiﬁcation
by the sending application ﬁlename is unreliable in case
of applications that send multiple ﬂows of various types.
Nevertheless, it reﬂects the end user’s needs most strictly, so
it should be the ﬁrst ﬁlter for request ﬂows. Classiﬁcation by
the transport layer protocol can serve as a fallback mechanism
for ﬂows which fail to be classiﬁed by any other criteria. The
ﬁnal order of ﬁlters is illustrated in Figure 2.
V.
RECOGNITION OF REQUEST AND RESPONSE FLOWS
A request ﬂow originating from one node and addressed
to the other is usually accompanied by a response ﬂow
transmitted in the opposite direction. These two ﬂows provide
a duplex point-to-point connection between two nodes.
However, as far as DANUMS is concerned, a node which
initiates a request ﬂow should also be charged for the response
ﬂow. Such a node is marked as the “owner” of both ﬂows.
Information about ﬂow “ownership” is propagated by OLSRd
along the ﬂow’s path and allows the ﬂow classiﬁer to differ-
entiate request and response ﬂows.
If the ﬂows were considered separately, a utility function
would be assigned to each of them by the source node. Such a
scheme would have undesirable consequences. Let us consider
a scenario in which the requesting node assigns a utility
function demanding a very low delay to a certain type of ﬂow,
but the responding node user does not require such low delay
for that type of ﬂow. Even though the requests could be sent
quickly, thanks to the assigned utility function, the perceived
utility of network may not be satisfying for requesting node’s
user, as the response ﬂow may fail to be prioritised by the
replying node.
Another example of undesirable consequence of mismatch-
ing utility functions is related to the CARMNET business
model [3]. When the source node is outside the CARMNET
network, the destination node is charged for the transmission
of the ﬂow. Were the ﬂows considered separately, their utility
would be decided by the node at the border of the CARMNET
network (an Internet-sharing node), which forwards the ﬂow to
the destination node inside the CARMNET network. Since the
35
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-299-8
MESH 2013 : The Sixth International Conference on Advances in Mesh Networks

utility of a ﬂow is closely related to its virtual price, it should
not be set by a node other than the one which is charged for
transmitting the ﬂow.
For the aforementioned reasons, a mechanism for recog-
nising response ﬂows has been implemented that enables two
methods for response ﬂows’ virtual price adjustment. Their
performance has been evaluated in Section VI.
1) Copying the request ﬂow’s virtual price: The informa-
tion about the virtual price of each ﬂow, encapsulated in the
Queue Report Message (QRM) packets [15], is propagated
through the network along the ﬂow’s path. Therefore, it is
available for the replying node and can be applied to the re-
sponse ﬂow. This simple method does not require the replying
node to analyse the ﬂow to which virtual price is applied or to
fetch requesting node’s proﬁle. However, the potential issues
this method introduces need to be considered.
In DANUMS, characteristics of a certain path are measured
on per-ﬂow basis. When the network is congested, throughput
and delay measured at both endpoints of a ﬂow may differ
signiﬁcantly. Undesired consequences of using this method
may also arise when request and response ﬂows’ requirements
differ. Such situation is illustrated by the ﬁrst experiment
described in Section VI-B1.
2) Calculating the request ﬂow’s new virtual price by
applying a utility function at the replying node: The other
method of controlling the virtual price of a response ﬂow is
to assign a utility function chosen by the requesting node.
This information can be retrieved from IMS by sending the
Get Proﬁle message [3]. While ﬂows’ owner node can assign
the same utility function to both request and response ﬂows,
its parameters will differ from those measured on each end-
point of respective ﬂows. Network characteristics perceived at
both nodes may be inﬂuenced by factors such as congestion,
asymmetry of links or choice of routes. Therefore, it is more
accurate to calculate the ﬂow’s virtual price at the transmitting
node, whether or not it is the ﬂow’s “owner”.
VI.
EXPERIMENTS
A. Testbed
Experiments have been performed in a wireless network
testbed called wnPUT [18]. The wnPUT testbed deployment
approach has been inﬂuenced by the Distributed Embedded
System Testbed (DES-Testbed) [19] architecture. Currently our
testbed consists of about 20 PC-class machines, each equipped
with two network interfaces, wired and wireless. The wired
network is used for out-of-band management. The wireless
connections are used for experimentation purposes only. Each
testbed node runs a Debian GNU/Linux distribution.
A
B
C
Internet
P1
P1
P1
P1
Figure 3.
Copying the ﬂow’s virtual price. A – CARMNET node, B –
CARMNET Relaying node, C – CARMNET Internet Sharing node, P1 –
Virtual price calculated at Node A
A
B
C
getProﬁle(A)
Internet
P1
P2
P1
P2
Figure 4.
Applying utility function at replying node. A – CARMNET node,
B – CARMNET Relaying node, C – CARMNET Internet Sharing node, P1 –
Virtual price calculated at Node A, P2 – Virtual price calculated at Node C
The testbed allows for an easy and automated experiment
execution. It handles parsing of the experiment description
ﬁles, setting up wireless network, conﬁguring topology, ex-
ecuting speciﬁed commands and, ﬁnally, gathering results.
Experiments are described using the scenario ﬁles written in
XML. The syntax of those ﬁles is an extension of the DES-
CRIPT [20] language used in DES-Testbed [19]. The uniﬁed
format of experiment description ﬁles has many beneﬁts such
as portability and expressiveness, as well as allowing the
experiments to be performed on different testbeds. Although
the testbed framework was heavily modiﬁed, the phases of
experimentation remain as deﬁned in the previous work [18],
[19]. Status of performed commands and the DANUMS LKM
is acquired in real-time by means of rsyslogd and visualised
by a monitoring system in order to make the analysis easier.
Due to space constraints, currently all nodes are directly
connected to each other in a wireless mesh network sharing the
same collision domain. Taking the wireless networks charac-
teristic into account, in which even nodes separated by 2 hops
might interfere with each other, it has been assumed that 2-
hop topology can be simulated by blocking trafﬁc on software
level. Thus, the wnPUT testbed framework allows user to
specify desired topology, which is attained with iptables
rules generated automatically during experiment initialisation.
B. Experiment scenarios
In order to illustrate the beneﬁts of recognising response
ﬂows, two experiment scenarios were prepared. Their purpose
is to show possible undesirable outcome of miscalculating
ﬂows’ virtual price, which may result from taking wrong mea-
surements under consideration. For both scenarios, the linear
topology consisting of three nodes was used (see Figure 3).
In both experiments, Node A initiates communication by
sending data to Node C. Since Nodes A and C are not directly
connected, Node B forwards the ﬂow in order to provide
connection between them. Node C responds with a reverse
ﬂow addressed to Node A.
In the ﬁrst experiment, Node C marks the destination of the
response ﬂow (Node A) as its owner in order to inform relaying
nodes (Node B) that the ﬂow’s virtual price has to be copied
from Queue Information Block (QIB) blocks corresponding to
the request ﬂow. In the second experiment, Node C fetches
the proﬁle of Node A and applies the utility function corre-
sponding to the served ﬂow in order to determine response
ﬂow’s virtual price. These two experiments correspond to the
methods of adjusting the virtual price described in Section V.
36
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-299-8
MESH 2013 : The Sixth International Conference on Advances in Mesh Networks

1) Experiment 1: The ﬁrst experiment illustrates a possible
undesired consequence of using the method based on virtual
price copying described in Section V-1. This scenario models
a VoIP call (labelled as “RTP C→A” in Figure 5 and Figure 6)
made during a HTTP ﬁle transfer (labelled as “HTTP C→A”).
The experiment starts with a HTTP request (labelled as “HTTP
A→C”) sent from Node A to Node C. Its size was artiﬁcially
enlarged to 5MB for experiment clarity purposes. Node C
responds to the requester with a 25MB HTTP response, one
second after receiving the request. While the response is
being transmitted, Node C initiates a 35-second long RTP
ﬂow at constant rate of 2.5Mbit/s addressed to Node A. The
experiment ends when both ﬂows originating from Node C are
terminated.
2) Experiment 2: In the second experiment, timing and
characteristics of ﬂows are the same as in Experiment 1. The
only difference is the virtual price of the response ﬂow, which
is now calculated at Node C according to the method described
in Section V-2.
C. Utility functions assignment
For RTP ﬂows, the following utility function was used [15]:
UU(x, d) =
wu

0
1000
2000
3000
4000
5000
6000
7000
Delay
[ms]
0
1
2
3
4
5
6
Average Rate
[Mbit/s]
0
50
100
150
200
250
Queue
(Node C)
[packets]
0
50
100
150
200
250
300
350
Queue
(Node B)
[packets]
1
10
100
1000
Virtual Price
[denarii]
1
10
100
1000
10000
100000
20
30
40
50
60
70
80
90
100
Virtual Queue
(Node C)
[denarii]
HTTP A→C
RTP C→A
HTTP C→A
Figure 6.
Results of Experiment 2.
nodes to acquire and store users’ proﬁles, as well as to
perform additional calculations. Most importantly, after all, this
approach achieves the highest stability.
The implementation of the ﬂow classiﬁer improved ﬂex-
ibility of DANUMS by enabling the use of utility functions
adapted to speciﬁc applications’ requirements. However, the
classiﬁcation could likely be enhanced even further by intro-
ducing more reliable or more ﬁne-grained, but still power-
efﬁcient (in terms of the battery power consumption caused
by necessary computations) ﬁlters. Adding the possibility of
combining multiple criteria into a single rule may also be
beneﬁcial to the quality of ﬂow classiﬁcation.
ACKNOWLEDGEMENT
Supported by a grant from Switzerland through the Swiss
Contribution to the enlarged European Union (PSPB-146/2010,
CARMNET).
REFERENCES
[1]
F. Kelly, “Charging and rate control for elastic trafﬁc,” European
Transactions on Telecommunications, vol. 8, no. 1, Jan. 1997, pp. 33–
37. [Online]. Available: http://doi.wiley.com/10.1002/ett.4460080106
[2]
A. Szwabe, P. Misiorek, and P. Walkowiak, “Delay-Aware NUM
system for wireless multi-hop networks,” in European Wireless 2011
(EW2011), Vienna, Austria, Apr. 2011, pp. 530–537.
[3]
M. Glabowski and A. Szwabe, “Carrier-Grade Internet Access Sharing
in Wireless Mesh Networks: the Vision of the CARMNET Project,”
The Ninth Advanced International Conference on Telecommunications,
Jun. 2013, in print.
[4]
U. Akyol, M. Andrews, P. Gupta, J. D. Hobby, I. Saniee, and A. Stolyar,
“Joint scheduling and congestion control in mobile ad-hoc networks,” in
The 27th IEEE International Conference on Computer Communications
(INFOCOM 2008), Apr 2008, pp. 619–627.
[5]
B. Radunovi´c, C. Gkantsidis, D. Gunawardena, and P. Key, “Horizon:
Balancing TCP over multiple paths in wireless mesh network,” in
Proceedings of the 14th ACM international conference on Mobile
computing and networking, MobiCom 2008, 2008, pp. 247–258.
[6]
M. Neely, “Delay-based network utility maximization,” In Proc. IEEE
INFOCOM 2010, 2010, pp. 1–9.
[7]
A. Warrier, S. Janakiraman, S. Ha, and I. Rhee, “DiffQ: Practical
differential backlog congestion control for wireless networks,” in The
28th IEEE International Conference on Computer Communications
(INFOCOM 2009), Apr. 2009, pp. 262–270.
[8]
Application Layer Packet Classiﬁer for Linux. [Online]. Available:
http://l7-ﬁlter.clearfoundation.com [retrieved: Jun., 2013]
[9]
N. Williams, S. Zander, and G. Armitage, “A preliminary performance
comparison of ﬁve machine learning algorithms for practical IP trafﬁc
ﬂow classiﬁcation,” ACM SIGCOMM Computer Communication
Review, vol. 36, no. 5, Oct. 2006, pp. 5–16. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=1163593.1163596
[10]
I. Anantavrasilp and T. Sch¨oler, “Automatic ﬂow classiﬁcation using
machine learning,” in Software, Telecommunications and Computer
Networks, 2007. SoftCOM 2007. 15th International Conference on.
IEEE, 2007, pp. 1–6.
[11]
M. Ilvesm¨aki, M. Luoma, and R. Kantola, “Flow classiﬁcation
schemes in trafﬁc-based multilayer IP switching–comparison between
conventional
and
neural
approach,”
Computer
Communications,
vol. 21, no. 13, Sep. 1998, pp. 1184–1194. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0140366498001637
[12]
L. Tassiulas and A. Ephremides, “Stability properties of constrained
queueing systems and scheduling for maximum throughput in multihop
radio networks,” IEEE Transactions on Automatic Control, vol. 37,
no. 12, Dec. 1992, pp. 1936–1949.
[13]
A. Szwabe, P. Misiorek, and P. Walkowiak, “Protocol Architecture
for DANUM Systems,” Poznan University of Technology, Institute of
Control and Information Engineering, Tech. Rep. IAII-595, Apr. 2010.
[14]
A. Szwabe, “DANUMS: The First Delay-Aware Utility Maximization
System for Wireless Networks,” in Proc. of NEM Summit - Towards
Future Media Internet. NEMS 2009, Sep. 2009, pp. 59–64.
[15]
A. Szwabe, P. Misiorek, and P. Walkowiak, “DANUM System for
Single-hop Wireless Mesh Networks,” In Proceedings of 2010 Inter-
national Conference on Future Information Technology (ICFIT 2010),
volume 1, Changsha, China, IEEE Press, Dec. 2010, pp. 365–369.
[16]
Application Layer Packet Classiﬁer for Linux – Getting started.
[Online]. Available: http://l7-ﬁlter.clearfoundation.com/docs/readme#
getting started [retrieved: Jun., 2013]
[17]
L7-ﬁlter
supported
protocols.
[Online].
Available:
http://l7-ﬁlter.
sourceforge.net/protocols [retrieved: Jun., 2013]
[18]
A. Nowak, P. Walkowiak, A. Szwabe, and P. Misiorek, “wnPUT
Testbed Experimentation Framework,” in Distributed Computing and
Networking, ser. Lecture Notes in Computer Science, L. Bononi,
A.
Datta,
S.
Devismes,
and
A.
Misra,
Eds.
Springer
Berlin
Heidelberg, 2012, vol. 7129, pp. 367–381. [Online]. Available:
http://dx.doi.org/10.1007/978-3-642-25959-3 27
[19]
The Distributed Embedded Systems Testbed (DES-Testbed) Webpage.
[Online]. Available: http://www.des-testbed.net [retrieved: Jun., 2013]
[20]
M. G¨unes¸, F. Juraschek, B. Blywis, and O. Watteroth, “DES-CRIPT - A
Domain Speciﬁc Language for Network Experiment Descriptions,” in
Next Generation Wireless Systems 2009 – Proceedings, N. Chilamkurti,
Ed., Mar. 2010.
38
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-299-8
MESH 2013 : The Sixth International Conference on Advances in Mesh Networks

