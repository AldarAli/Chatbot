Physics-Based Methods for Distinguishing Attacks from Faults
Gregory Provan
Riccardo Orizio
School of Computer Science
University College Cork
Cork, Ireland
Email: g.provan, r.orizio@cs.ucc.ie
Abstract—Cyber-physical systems (CPSs) are a key
framework for analysing a range of systems, from power
plants to automobiles. One recent trend has been using
this framework for security analysis. This article uses
physics-based methods for distinguishing attacks from
faults. We frame a CPS as a discrete-time linear system
that can switch between various modes. By encoding
faults and attacks each as speciﬁc modes, we build CPS
models that incorporate the impact of a range of types
of fault and attack. We then use this CPS model to
isolate (and distinguish between) a fault and an attack.
We illustrate our approach on a hydraulic benchmark
system.
Keywords–model-based security; model-based diagno-
sis; state identiﬁcation.
I.
Introduction
The study of Cyber-Physical Systems (CPSs) [1] is
attracting great interest, due to the signiﬁcance of the
applications that a CPS can model. For example, CPSs
can model nuclear power plants, air-traﬃc control systems,
smart cities, etc.
Recently, researchers have been focusing on identifying
and defending against attacks on a CPS, e.g., [2], [3],
[4], [5]. A broad range of approaches have been used for
attack modeling and detection, none of which is fully
comprehensive in terms of the range of attacks that can
be identiﬁed [2], [3].
This article focuses on using physics-based models to
isolate attacks on a system. We assume that a CPS is an
instance of a hybrid system, in that the system can operate
in a variety of distinct behaviours, which we call modes.
For example, an aircraft can be in take-oﬀ or cruise mode,
or it can operate in one of several faulty modes. We use
system mode identiﬁcation approaches [6], together with
appropriate attack models, to compute an attack on a
system.
In our approach, we create a ﬁrst-principles physics-
based model of the CPS and its control system. We
explicitly create modes depicting the impact of faults on
the CPS. We assume that an attacker may inject data
into the CPS to mimic faults that occur naturally. As a
consequence, we also include physics-based attack models.
Our objective is to analyze which faults can be dis-
tinguished from attacks using limited sensors in the CPS
(most real-world systems have limited sensors available).
This analysis enables us to understand the strengths and
limitations of physics-based CPS attack analysis.
Our contributions are as follows:
•
We describe an observer-based framework for iso-
lating faults and attacks, and a method for distin-
guishing between them;
•
We show that physics-based methods can distin-
guish attacks on sensors from sensor faults, but
that actuator attacks cannot be distinguished from
actuator faults;
•
We illustrate our approach on a well-known hy-
draulic benchmark.
We organize the paper as follows. We introduce a
running example in Section II. Next, Sections III and IV
present the formal framework for our work. We present our
empirical studies in Section V, and summarize our results
in Section VII.
II.
Running Example
We illustrate our concepts using a three-tank system,
as shown in ﬁgure 1.
A. Nominal Model
We denote the tanks as T1, T2, and T3. They all have
the same area A1 = A2 = A3 = 3 [m2]. We assume that
g = 10 and the liquid is “pure” water with density ρ = 1.
q0
p1
*
p2
*
p3
*
V1
V2
V3
Figure 1. Diagram of the three-tank system.
Tank T1 is ﬁlled from a pipe q0 with a constant ﬂow of
0.75 [m3/s]. It drains into T2 via a pipe q1. The liquid level
is denoted as h1. There is a pressure sensor p1 connected to
T1 that measures the pressure in Pascals [Pa]. The system
has valves V1, V2, V3 as shown in ﬁgure 1.
For this system we control the inﬂow q0 and valve
positions, i.e., our input vector u = {q0, V1, V2, V3}. We can
measure the tank pressure values, i.e., the measurement
70
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

vector is y = {p1, p2, p3}. Our control task is to maintain
set-point heights in each of the tanks. The diagnostic task
is to compute the true value of Vi, given pi, for i = 1, 2, 3.
We deﬁne our nominal model as follows. Starting from
Newton’s (and Bernoulli’s) equations and manipulating
them (the actual derivation is irrelevant in this paper) we
derive the following Ordinary Diﬀerential Equation (ODE)
that gives the level of the liquid in T1:
dh1
dt = q0 − q1 = q0 − k1s(h1, h2)
p
|h1 − h2|
A1
,
(1)
where s(h1, h2) denotes sign(h1 − h2). In eq. 1, the coeﬃ-
cient k1 is given by k1 = ν1κ1, which is the product of the
valve V1 setting, ν1 ∈ [0, 1], where 0 denotes a closed valve
and 1 an open valve, and the outﬂow parameters κ1, which
include the cross-sectional area of the tank A1, the area of
the drainage hole, √2g, and the friction/contraction factor
of the hole. We emphasize the use of k1 because, later,
we will be “diagnosing” our system in term of changes in
k1. Consider a physical valve V1 between T1 and T2 that
constrains the ﬂow between the two tanks. We can say
that the valve changes proportionally to the cross-sectional
drainage area of q1 and hence k1.
We deﬁne the water levels of T2 and T3, denoted as h2
and h3 respectively, as:
dhi
dt = ki−1s(hi−1, hi)
p
|hi−1 − hi| − ki
√hi
Ai
,
(2)
where i is the tank index (i ∈ {2, 3}).
We assume that κ1 = κ2 = κ3 = 0.75.
Finally, we can compute from the water level a pressure
given by
pi = g hi A
A
= g hi
(3)
where i is the tank index (i ∈ {1, 2, 3}).
We assume that the initial water level in the three tanks
is zero.
B. Fault Model
In the following we deﬁne valve (actuator) faults; other
faults, e.g., leaks or sensor faults, can be deﬁned analo-
gously.
We assume an additive valve fault, where the actual
valve position for valve i, given commanded position νi
and fault ∆νi, is
νi =

max{0, νi + ∆νi}
if ∆νi ≤ 0
min{1, νi + ∆νi}
if ∆νi > 0
(4)
where ∆νi ∈ [−1, 1].
C. Attack Model
For our attack model, we assume that an attacker
cannot monitor the system, but can inject false data.
We ﬁrst consider injecting a fake sensor reading. Hence,
for pressure sensor pi (i = 1, 2, 3), which can output
nominal values in the range [0, pmax
i
], an attacker can inject
a ﬁxed value of pa
i ∈ [0, pmax
i
].
If an attacker injects a fake actuator value νi ∈ [0, 1]
(i = 1, 2, 3), then valve i will be commanded to this “fake”
position.
There is a diﬀerence in the physical behaviours of these
two attacks. Whereas the actuator attack alters the system
itself, the sensor attack has no impact on the physical
behaviour unless the control system changes in response
to the fake sensor value.
III.
Cyber-Physical Systems with Faults and
Attacks
This section provides the theoretical basis for our
models and attack detection procedures. We ﬁrst deﬁne
a discrete-time state-space model for a Cyber-Physical
System (CPS) that is subject to faults and attacks.
A. Cyber-Physical Systems
The nominal (or ideal) system model is given by
xk+1
=
Aγxk + Bγuk + wk;
(5)
yk
=
Cγxk + vk;
where xk ∈ Rn is the state of the system, x0 ∈ Rn the
initial state of the system, uk ∈ Rl the control input, and
yk ∈ Rp the measurement at time instance k. We assume
that a system can operate in a mode γi ∈ Γ. Each mode
determines the physical behaviours of CPS. We capture
the mode using a matrix with subscript γ, e.g., Aγ. The
unknown process and measurement noise are wk ∈ Rn and
vk ∈ Rp, respectively. We deﬁne our matrices as follows:
Aγ ∈ Rn×n is the system matrix, Bγ ∈ Rn×l is the control
input matrix and Cγ ∈ Rp×n the measurement matrix.1
For example, for the tank system our state vector is
x = {h1, h2, h3}, our input u = {q0, V1, V2, V3}, and y =
{p1, p2, p3}, our output. The output equation is given by
yk
=
"g
0
0
0
g
0
0
0
g
#
xk
(6)
We assume that we control the system using a state
(Luenberger) observer based on a set of equations with
observer matrix L. Using the observed system with ob-
served state and measurement, ˆxk ∈ Rn and ˆyk ∈ Rp,
respectively:
ˆxk+1
=
Aγ ˆxk + Bγuk + wk;
(7)
ˆyk
=
Cγ ˆxk + vk;
we obtain the observer equations:
ˆxk+1
=
Aγ ˆxk + Bγuk + Lγ(yk − Cγ ˆxk);
(8)
rk
=
yk − Cγ ˆxk;
uk
=
−Kγ ˆxk,
where rk ∈ Rp is the residual yk − ˆyk. We assume the con-
trol matrix Kγ ∈ Rl×p and observer matrix Lγ ∈ Rn×p are
chosen so that the closed-loop system and error dynamics
are stable.
1We assume that the initial conditions for all systems (e.g., x0, ˜x0
are known.
71
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

In the following, we assume that the actual input and
measurement values, ˜uk and ˜yk respectively, can diﬀer from
the values of uk and yk due to data loss, noise in the
network, faults, or due to a malicious attack ak ∈ Rm on
the system.
B. Fault Model
In this article we consider (a) sensor faults, where the
sensor will either generate erroneous output or no output,
and (b) plant/actuator faults. In the following we will
specify additive fault models for these two fault classes.
We deﬁne an additive fault vector f, which we incorporate
in a fault model as follows:
xf
k+1
=
Aγxf
k + Bγuk + Bffk + wk;
(9)
yk
=
Cγxf
k + Cffk + vk;
where xf
k is the faulty state vector at time k, Bf represents
the inﬂuence the fault has on the state and Cf the inﬂuence
of the fault on the measurement (sensor) data.
˜xk+1
=
A˜xk + Buk + L(˜yk − C˜xk);
(10)
rk
=
˜yk − C˜xk;
uk
=
−K˜xk,
where we have: ˜xk ∈ Rn is the state of the observer, uk ∈
Rl the calculated control input, ˜yk ∈ Rp the measurements
received over the network and rk ∈ Rp is the residual. We
assume the control matrix K ∈ Rl×p and observer matrix
L ∈ Rn×p are chosen so that the closed-loop system and
error dynamics are stable.
The values of ˜uk and ˜yk can diﬀer from the values of
uk and yk due to data loss, noise in the network, faults, or
due to a malicious attack ak ∈ Rm on the system.
C. Attack Model
We propose an attack model that speciﬁes two types
of attack: attacks on the system’s actuators (or state),
ax
k, and attacks on the system output, ay
k. Introducing the
attack vector ak = [(ax
k)T (ay
k)T ]T to the plant and observer
leads to
xk+1
=
Aγxk + Bγuk + Baak + wk;
(11)
yk
=
Cγxk + Daak + vk;
where Ba represents the inﬂuence the attack has on the
state by either a physical or an actuator attack and Da the
inﬂuence of the attack on the measurements by falsifying
sensor data.
xk+1
=
Aγxk + Buk + Baak + wk;
(12)
yk
=
Cγxk + vk;
˜xk+1
=
Aγ ˜xk + Bγuk + Lγ(yk + Daak − Cγ ˜xk);
rk
=
yk + Daak − Cγ ˜xk;
uk
=
−Kγ ˜xk;
Due to the separation of the attacks into attacks on
the states and the measurements, the attack matrices often
take the structure
Ba = [Bx
a, 0] and Da = [0, Dy
a];
(13)
where 0 is the zero matrix with dimensions appropriate to
the attack vector.
D. Extended System Model
We combine the plant and the observer to get an
extended system. We deﬁne Xk = [xT
k ˜xT
k ]T as the extended
system state, the attack ak as the input and the residual
rk as the system output
mk+1
=
Aemk + Beak +

wk
Lvk

;
(14)
rk
=
Cemk + Deak + vk
(15)
with
Ae
=

A
−BK
LC
A − BK − LC

,
Be =

Ba
LDa

;(16)
Ce
=
[C
− C] and De = Da.
(17)
The initial state is given by X0 = [xT
0 ˜xT
0 ]T . Since K and L
stabilize the plant and the error dynamics, Ae is stable as
well. The residual rk is used to determine how much the
real system state deviates from the estimated state given
by the observer, so we can use rk to detect faults or attacks
on the system.
IV.
Distinguishing Faults from Security
Breaches
This section focuses on methods for distinguishing
faults from security breaches. We assume that a stealthy
attacker will attempt to mask attacks as natural events,
e.g., faults. In that case, we use the physics of the fault
evolution and/or onset to isolate true faults.
A. Model-Based Isolation
We address this problem using a model-based frame-
work. We assume that our system can be in one of q
possible modes, where a mode characterizes a system
behaviour. We can deﬁne modes corresponding to nominal,
fault, and attack conditions.
We assume that we can specify the behaviour of each
mode using a physical model of that mode. We denote
model i using ψi. Our family of models Ψ = {ψ1, ..., ψq}
consists of subsets of models denoting nominal, fault, and
attack modes, {ΨN, Ψf, Ψa} respectively. Model i gener-
ates a behaviour ξi (with measurement ˆyi) given initial
conditions x0. A behaviour over interval [0, ..., T] is a state
sequence {x0, ..., xT }.
Deﬁnition 1 (Mode Estimation): Our mode estimation
task, given an anomalous observation ˜y, is to compute
the model whose behaviour most closely matches the
observation ˜y, i.e.,
ψ∗ = arg min
ψi∈Ψ ∥ ˜yi − ˆyi ∥,
(18)
where ∥ ˜yi − ˆyi ∥ is a diﬀerence norm at instant i
72
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

We assume that we compute a residual vector r =
{r1, ..., rq}, with residual i associated with mode i. Resid-
ual ri is“activated”, i.e., ri > δi for some tunable threshold
δi, iﬀ the system is in mode λi.
Deﬁnition 2 (Mode Identiﬁability): Given a model Ψ
with a set of modes Λ = {λ1, ..., λq}, mode i is identiﬁable
(i.e., can be distinguished from mode j, for i ̸= j) if (a)
λi generates a behaviour ξi that is distinguishable from ξj
for all i ̸= j, and (b) there exists a residual r such that
ri > δi iﬀ the system is in mode λi.
This notion of mode identiﬁability enables us to detect
attacks, since an identiﬁable system guarantees that at-
tacks can always be isolated. The ability to distinguish
fault- and attack-modes depends on the ﬁdelity of the
models and the availability of appropriate sensor data.
B. Example: Sensor/Actuator Attack Detection
We assume a system in which we have the correct
measurement y, the simulated measurement ˆy, and an
attacker who injects a false measurement ˜y for a subset
of the sensors. We can compute residuals for the “true”
system as ri =∥ yi − ˆyi ∥, and the system under attack as
ra
i =∥ ˜yi − ˆyi ∥.
We compare r with ra to distinguish faults from at-
tacks. If ri = ra
i ,
∀i > 0 then the fault and attack are in-
distinguishable via physics-based analysis. Distinguishing
faults from attacks also depends on the models assumed for
faults from attacks. In this article we restrict our attention
to attacks that ﬁx the sensor/actuator at an anomalous
value at some k > 0 and remains at that value.
Sensor Attack: We assume that, given a physical fault
(e.g., stuck actuator or tank leak) a sensor will report the
physical deviations from nominal conditions. For example,
a tank leak in tank T2 will lead to lower-than-expected
tank height for T2, such that the deviation will increase
over time. In this article we look at residuals, but also
rates of change of outputs yk and residuals rk, i.e., ˙yk, ˙rk,
respectively.
Actuator Attack: If we restrict our fault model to
“stuck” actuators, e.g., a valve that gets stuck open, then
our attack model can exactly mimic a“stuck”actuator, and
hence this class of attack cannot be distinguished from a
“stuck” actuator fault.
V.
Experimental Results
In the following we will show some tests and results
achieved on the three-tank system, starting from the
data simulation of the system itself in various conditions
through the analysis and fault detection of these data.
A. Simulations
We based our experiments on our own simulated data
of the three-tank system. In order to correctly simulate
faults and attacks we set three diﬀerent simulation modes
for the system: normal, faulty and attack.
The faulty simulation included a random delta value
for each valve, either positive or negative, in order to
reproduce a positioning problem diﬀering from the normal
value. Each delta value is independent from each other,
plus the ﬁnal valve position will still respect the [0,1]
interval constraint.
The attack simulation inﬂuences either the valve set-
tings, the sensor measurements or both. The principle of
each attack is the same: the attacker sets a ﬁxed value
to one or more of the system’s components, overriding the
correct value. The diﬀerence between the two attacks relies
on the fact that a valve attack immediately inﬂuences the
system behaviour, forcing more (or less) ﬂuid to go through
the system. On the other hand, attacking a sensor could
not be as eﬀective in the case of a non-feedback system.
We run our simulations on a 50 and 500 seconds period,
extracting data from our sensors every 2 seconds.
B. Analysis procedure
In order to detect faults and attacks on our system,
we used residuals and ﬁrst derivative studies of the sensor
data. Relative errors and deeper derivative studies were
performed, but we were not able to extract good results
from them.
We were able to identify incongruences in the data
when the residuals were over a predeﬁned tolerance. On
the other hand, the gradients were able to give an idea of
how the data would evolve in time, allowing us to identify
absolute tendencies of data.
This approach has been proven to be a good way to
ﬁnd injected sensor data. When sensor data are attacked,
we obtain the relation
˙yk = − ˙rk,
(19)
where ˙yk and ˙rk denote the ﬁrst derivative of the sensor
output and the residual, respectively.
The fact that we are limited of having only the sensor
data allows us to detect when a fault or attack occurred but
they are not enough to identify which valve had a problem
and if the problem was an attack or a random fault of the
system.
C. Experiment I - Attacks on sensors
The objective of our ﬁrst experiment was to identify
whether a sensor has been attacked or not.
Thanks to the ﬁrst derivative analysis of the normal
behaviour and the residuals we were able to identify in
which cases the data were crafted by an attacker.
Figure 2 shows the data generated by an attacked
sensor. We can clearly see how that equation 19 holds, i.e.,
the residual function is a y-mirrored version of the normal
behaviour.
Each sensor attack is correctly detected by our proce-
dure, either alone or in conjunction with other attacks.
D. Experiment II - Attacks on Actuators (Valves)
This experiment addresses detection and isolation of
actuator attacks, i.e., valves whose control setting are set
to be incorrect.
We started analysing only one attack per simulation. In
each simulation we were able to detect that an attack has
occured, but we could not precisely locate on which valve.
Besides we found that our procedure observed attacks on
73
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

Figure 2. Injected data on the second sensor of our system. The
graph shows the normal and faulty behaviour and their related
residuals and relative errors.
diﬀerent valves even if the attack was performed only on
one: this is due to the complexity and synergies of the
system itself which we were not be able to capture with
only data from the pressure sensors.
Figure 3 shows the data of an attacked valve, while Ta-
ble I shows which faults were detected for each experiment:
Test
Valve 1
Valve 2
Valve 3
155
✓
X
X
355
✓
X
X
755
✓
X
X
955
✓
X
X
515
X
✓
X
535
X
✓
X
575
X
✓
X
595
X
✓
X
551
✓
553
✓
557
✓
559
✓
TABLE I. Results of our procedure. The test number shows the
valve settings for each valve (i.e. 155: v1 = 0.1, v2 = 0.5, v3 = 0.5).
The nominal setting is 555. A valve is marked when our procedure
identiﬁes a problem with it. ✓ denotes a correct diagnosis, and X
denotes an incorrect diagnosis.
We also tested combination of attacks: attacks are still
detected, but is even more diﬃcult to identify on which
valves the attack was done. The results of our tests are
shown in Table II.
Figure 3. Data of the third sensor related to test 535.
Test
Valve 1
Valve 2
Valve 3
544
X
✓
✓
158
✓
X
✓
658
✓
X
✓
958
✓
X
✓
745
✓
✓
X
247
✓
✓
✓
432
✓
✓
✓
632
✓
✓
✓
638
✓
✓
✓
678
✓
✓
✓
TABLE II. Results of our procedure on multi valve attacks.
E. Experiment III - Attacks on both Sensors and Actuators
(Valves)
The goal of this experiment was to combine the previ-
ous experiments and see how simultaneous attacks impact
the system and if we were still able to identify which parts
of the system have been attacked. We presume to be able to
correctly detect sensor problems and the presence of valve
errors, but cannot identify the faulty valves, as happened
also in experiment II.
As expected and shown in Table III we are able to
identify the attacks on the sensors but not on the valves.
VI.
Related Work
This article extends the work of [7], who describe a
framework for detecting security breaches in networked
control systems. [7] make the simplifying assumption that
anomalies due to security breaches and to other sources
are a priori separable, so the task of identifying security
breaches becomes trivial. In real situations, this assump-
74
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

Test
Valve 1
Valve 2
Valve 3
Sensor
s1 325
✓
X
1
s2 553
X
✓
2
s3 148
✓
✓
3
s12 558
✓
1-2
s23 647
✓
2-3
s31 348
✓
1-3
s123 666
1-2-3
TABLE III. Results of our procedure on multi valve attacks. The
test number, other than showing the valve settings, shows also
which sensors are attacked.
tion does not hold, and we focus on methods for distin-
guishing faults from security breaches.
VII.
Conclusion
This article has proposed a physics-based approach for
modeling a CPS and using this model to distinguish faults
from attacks. We have shown on a hydraulic system the
capabilities of this approach. We have also shown that
not all attacks can be identiﬁed via this physics-based
approach. To extend this approach, deeper studies on
sensors data synergies are needed in order to extract some
more information about possible valve faults/attacks.
Acknowledgment
The authors would like to thank SFI for funding
this work under grants SFI grants 12/RC/2289 and
13/RC/2094.
References
[1]
E. A. Lee and S. A. Seshia, Introduction to embedded systems:
A cyber-physical systems approach.
MIT Press, 2016.
[2]
R. Mitchell and I.-R. Chen, “A survey of intrusion detection
techniques for cyber-physical systems,” ACM Computing Sur-
veys (CSUR), vol. 46, no. 4, 2014, p. 55.
[3]
D. I. Urbina, J. A. Giraldo, A. A. Cardenas, N. O. Tippenhauer,
J. Valente, M. Faisal, J. Ruths, R. Candell, and H. Sandberg,
“Limiting the impact of stealthy attacks on industrial control
systems,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security.
ACM, 2016, pp.
1092–1105.
[4]
S. Lakshminarayana, T. Z. Teng, D. K. Yau, and R. Tan, “Opti-
mal attack against cyber-physical control systems with reactive
attack mitigation,” in Proceedings of the Eighth International
Conference on Future Energy Systems.
ACM, 2017, pp. 179–
190.
[5]
T. Darure, J.-J. Yam´e, and F. Hamelin, “Model-based fault-
tolerant control of vav damper lock-in place failure in a mul-
tizone building,” in Control, Automation, Robotics and Vision
(ICARCV), 2016 14th International Conference on. IEEE, 2016,
pp. 1–6.
[6]
S. Paoletti, A. L. Juloski, G. Ferrari-Trecate, and R. Vidal,
“Identiﬁcation of hybrid systems: a tutorial,” European journal
of control, vol. 13, no. 2-3, 2007, pp. 242–260.
[7]
D. Umsonst, H. Sandberg, and A. A. C´ardenas, “Security anal-
ysis of control system anomaly detectors,” in American Control
Conference (ACC), 2017.
IEEE, 2017, pp. 5500–5506.
75
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-585-2
CENICS 2017 : The Tenth International Conference on Advances in Circuits, Electronics and Micro-electronics

