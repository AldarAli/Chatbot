On an Inference System for a Hybrid Process
Calculus
Zining Cao1,2
1State Key Laboratory for Civil Aircraft Flight Simulation
Shanghai Aircraft Design and Research Institute
Shanghai 201210, China
2Department of Computer Science and Technology
Nanjing University of Aeronautics & Astronautics
Nanjing 210016, China
Abstract—In this paper, we propose a hybrid process calculus.
This hybrid process calculus can be used to describe hybrid
properties and nondeterministic properties of software. The
concrete bisimulation and symbolic bisimulation of this hybrid
process calculus are proposed. We then prove the equivalence
between these two bisimulation. An inference system for the
symbolic bisimulation of this hybrid process calculus is given. At
last, we prove the soundness and completeness of the inference
system.
Keywords—hybrid process calculus; symbolic bisimulation; in-
ference system
I.
INTRODUCTION
Hybrid system is a kind of mixed discrete-continuous sys-
tem. A paradigmatic example of a mixed discrete-continuous
system is a digital controller of an analog plant. The discrete
state of the controller is modelled by the vertices of a graph
(control modes), and the discrete dynamics of the controller
is modelled by the edges of the graph (control switches).
The continuous state of the plant is modelled by points in
Rn, and the continuous dynamics of the plant is modelled by
ﬂow conditions such as differential equations. The behavior of
the plant depends on the state of the controller: each control
mode determines a ﬂow condition, and each control switch
may cause a discrete change in the state of the plant, as
determined by a jump condition. Dually, the behavior of the
controller depends on the state of the plant: each control mode
continuously observes an invariant condition of the plant state,
and by violating the invariant condition, a continuous change
in the plant state will cause a control switch.
There are several works on models of hybrid systems such
as [2], [3], [4], [7], and [12]. But there are seldom works
on sound and complete inference systems for bisimulation of
hybrid systems. For examples, some sound inference systems
for bisimulation were given in [2] and [4], whereas these
inference system were not proved complete. In this paper,
we aim to propose a sound and complete inference system
for bisimulation of hybrid systems. To this end, we ﬁrstly
present a hybrid process calculus including its syntax, op-
erational semantics and concrete bisimulation in this paper.
Then the symbolic labelled transition system and symbolic
bisimulation are also presented. We prove the equivalence of
concrete bisimulation and symbolic bisimulation. Furthermore,
we present an inference system for symbolic bisimulation.
Finally, the soundness and completeness of this inference
system are studied.
This paper is organized as follows: Section 2 gives a hybrid
process calculus including its syntax, operational semantics
and concrete bisimulation. In Section 3, we propose a symbolic
theory for this hybrid process calculus including symbolic
labelled transition system and symbolic bisimulation for hy-
brid process calculus. Furthermore, we prove the equivalence
between concrete bisimulation and symbolic bisimulation. In
Section 4, we give a complete inference system for this hybrid
process. The soundness and completeness of the inference
system are also proved. The paper is concluded in Section
5.
II.
HYBRID PROCESS CALCULUS
There are many works about process algebras for hybrid
systems, for example, [2], [3], [4], [7], and [12]. A comparative
study of these process algebras is referred to [9]. The main aim
of this paper is to propose a sound and complete inference
for bisimulation of hybrid systems. To this end, we present
a simple hybrid process calculus which has a relatively small
number of operators and a simpler semantics. Therefore it is
easier to give a complete inference system than other pro-
cess algebras. The syntax, operational semantics and concrete
bisimulation of this process calculus are given in this section.
A. Syntax of Hybrid Process Calculus
To give the syntax of hybrid process calculus, we ﬁrst
present the syntax and semantics of predication logical for-
mulas.
Predication logical formulas are deﬁned by the following
grammar:
Φ, Ψ ::= x ◃▹ u(x1, ..., xn) | ¬Φ | Φ ∧ Ψ | ∀x.Φ, where
◃▹∈ {=, ̸=, ≥, >, <, ≤}, x is a variable, u(x1, ..., xn) is a
real function with parameters x1, ..., xn, i.e., u(r1, ..., rn) = r
where r1, ..., rn, r ∈ R and R is the set of real numbers.
We denote the set of variable {t, v1, v2, ..., vn, ...} as V ar0,
denote the set of variable {t′, v′
1, v′
2, ..., v′
n, ...} as V ar′, and
denote V ar0 ∪ V ar′ = V ar. Informally, variables v′
1, ..., v′
n
7
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

represent the new values taken by the variables v1, ..., vn after
a transition. Variable t represents the time variable.
The satisﬁability relation |= is deﬁned between assignment
θ and formula Φ as follows, where θ is a function such that
the domain of θ is a subset of V ar and the range of θ is R,
and free variables in Φ is in the domain of θ.
(1) θ |= x ◃▹ u(x1, ..., xn) if θ(x) ◃▹ u(θ(x1), ..., θ(xn));
(2) θ |= ¬Φ if θ ̸|= Φ;
(3) θ |= Φ ∧ Ψ if θ |= Φ and θ |= Ψ;
(4) θ |= ∀x.Φ if θ |= Φ{a/x} for any a, where {s/t}
means replacing t by s.
We write Φ |= Ψ to mean that θ |= Φ implies θ |= Ψ for
any θ, and write |= Ψ to mean that θ |= Ψ for any θ.
The formal deﬁnition of process is given as follows:
P ::= 0 | X | P + P | ε(Φ1, Φ2).P | a(Ψ1, Ψ2).P |
fixX.P, where Φ1 is a predication logical formulas with free
variables in V ar0; Φ2 is a predication logical formulas with
free variables in V ar; ε is an internal action which is invisible
for observer; Ψ1 is a predication logical formulas with free
variables in V ar0; Ψ2 is a predication logical formulas with
free variables in V ar; a is an external action which is visible
for observer; all process variables in fixX.P are guarded by
action preﬁx. The class of processes is denoted as Pr.
Informally, 0 denotes inaction. P1 + P2 expresses nonde-
terministic choice of processes P1 and P2. ε(Φ1, Φ2).P can
perform an internal action ε under condition Φ1, then continues
as P, and the change of variables satisﬁes Φ2. a(Ψ1, Ψ2).P
can perform an external action a under condition Ψ1, then
continues as P, and the change of variables satisﬁes Ψ2.
fixX.P is a recursive deﬁnition of process.
B. Labelled Transition System of Hybrid Process Calculus
The operational semantics of hybrid process calculus is
given in Table 1. We have omitted the symmetric rule of the
nondeterministic operator.
The labelled transition system consists of a collection of
relations of the form ⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨Q, σ⟩ or ⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨Q, σ⟩, where P, Q are processes, and ρ, σ are conﬁgurations.
A conﬁguration is a function ρ such that ρ(x) ∈ R for any
x ∈ V ar0. A conﬁguration represents an possible assignment
of variables. The class of conﬁgurations is denoted as C. The
transition ⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨Q, σ⟩ means that the process P at
conﬁguration ρ can realize the action ε(Φ1, Φ2), and becomes
Q at conﬁguration σ after T units of time. The transition
⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨Q, σ⟩ means that the process P at conﬁgu-
ration ρ can realize the action a(Ψ1, Ψ2), and becomes Q at
conﬁguration σ. We denote by ρ[x ← U] a new conﬁguration
that is the same as ρ except that ρ[x ← U](x) = U, and denote
by ρ[x ⇐ x′] a function such that f(x′) = ρ(x) for any x in
the domain of ρ. In the following, for function ρ : X → R
and function σ : Y → R with condition X ∩ Y = ∅, we use
ρ∪σ to denote function f such that f(x) = ρ(x) when x ∈ X
and f(x) = σ(x) when x ∈ Y.
TAU : ⟨ε(Φ1, Φ2).P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P, ρ′⟩, where T ∈ R,
∀δ ∈ [0, T].ρ[t ← ρ(t) + δ] |= Φ1, ρ′(t) = ρ(t) + T,
ρ ∪ (ρ′[x ⇐ x′]) |= Φ2.
ACT : ⟨a(Ψ1, Ψ2).P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P, ρ′⟩, where ρ |= Ψ1,
ρ ∪ (ρ′[x ⇐ x′]) |= Ψ2.
SUM :
⟨P1, ρ⟩
α
−→ ⟨P ′
1, ρ′⟩
⟨P1 + P2, ρ⟩
α
−→ ⟨P ′
1, ρ′⟩
REC : ⟨P{fixX.P/X}, ρ⟩
α
−→ ⟨P ′, ρ′⟩
⟨fixX.P, ρ⟩
α
−→ ⟨P ′, ρ′⟩
Table 1: Operational semantics of hybrid process calculus
An example: Let process P = ε(Φ1, Φ2).a(Ψ1, Ψ2).0 =
ε(x1 + x2 + t ≤ 2y + 1, x′
1 = tx1 ∧ x′
2 = 2x2 ∧ y′ ≤
2x′
2 − x1).a(x1 + x2 ≥ y, x′
1 = 2x1 ∧ x′
2 = x2).0. Then
at conﬁguration ρ such that ρ(t) = 0, ρ(x1) = 1, ρ(x2) =
2, ρ(y) = 3,we have ⟨P, ρ⟩
ε(Φ1,Φ2),2
−→
⟨P ′, ρ′⟩, where P ′ =
a(Ψ1, Ψ2).0 = a(x1 + x2 ≥ y, x′
1 = 2x1 ∧ x′
2 = x2).0, ρ′ is
a conﬁguration such that ρ′(t) = 2, ρ′(x1) = 2, ρ′(x2) = 4,
ρ′(y) ≤ 6. Furthermore, ⟨P ′, ρ′⟩
a(Ψ1,Ψ2)
−→
⟨0, ρ′′⟩, where ρ′′ is
a conﬁguration such that ρ′′(t) = 2, ρ′′(x1) = 4, ρ′′(x2) = 4,
ρ′′(y) ∈ R.
C. Concrete Bisimulation
Now we propose a concrete bisimulation for hybrid pro-
cess calculus. Intuitively, P and Q are concrete bisimilar if
whenever P can perform an action under the conﬁguration ρ,
Q can also perform the same action under the conﬁguration ρ.
Deﬁnition 2. A symmetric relation R ∈ (Pr×C)×(Pr×
C) is called a concrete bisimulation if whenever ⟨P, ρ⟩ R
⟨Q, ρ⟩,
(1) ⟨P, ρ⟩
ε(ΦP
1 ,ΦP
2 ),T
−→
⟨P ′, ρ′⟩ implies that there exists Q′
such that ⟨Q, ρ⟩
ε(ΦQ
1 ,ΦQ
2 ),T
−→
⟨Q′, ρ′⟩ and ⟨P ′, ρ′⟩ R ⟨Q′, ρ′⟩;
(2) ⟨P, ρ⟩
a(ΨP
1 ,ΨP
−→2 )
⟨P ′, ρ′⟩ with a ̸= ε implies that there
exists Q′ such that ⟨Q, ρ⟩
a(ΨQ
1 ,ΨQ
−→2 )
⟨Q′, ρ′⟩ and ⟨P ′, ρ′⟩ R
⟨Q′, ρ′⟩.
We write ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ if there is a concrete bisimulation
R such that ⟨P, ρ⟩ R ⟨Q, ρ⟩.
We write P ∼C Q if ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ for any ρ.
Remark: In the above deﬁnition, we do not require that
ΦP
1 and ΦQ
1 (ΦP
2 and ΦQ
2 , or ΨP
1 and ΨQ
1 , or ΨP
2 and ΨQ
2 )
are logical equivalent since by the operational semantics of
hybrid process calculus, ⟨P, ρ⟩
ε(ΦP
1 ,ΦP
2 ),T
−→
⟨P ′, ρ′⟩ is permitted
if ∀δ ∈ [0, T].ρ[t ← ρ(t) + δ] |= ΦP
1 , and ⟨Q, ρ⟩
ε(ΦQ
1 ,ΦQ
2 ),T
−→
⟨Q′, ρ′⟩ is permitted if ∀δ ∈ [0, T].ρ[t ← ρ(t) + δ] |= ΦQ
1 ,
which means ∀δ ∈ [0, T].ρ[t ← ρ(t) + δ] |= ΦP
1 ↔ ΦQ
1 .
Therefore the logical equivalent relation between ΦP
1 and ΦQ
1
is implied by the side condition of operational semantics of
hybrid process calculus. The cases of ΦP
2 and ΦQ
2 , ΨP
1 and
ΨQ
1 , ΨP
2 and ΨQ
2 are similar.
8
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

III.
A SYMBOLIC THEORY FOR HYBRID PROCESS
CALCULUS
In this section, a symbolic labelled transition system and a
symbolic bisimulation equivalence are presented. The full ab-
straction property, i.e., the equivalence between this symbolic
bisimulation and the concrete bisimulation, is shown. The sym-
bolic semantics is necessary for an efﬁcient implementation of
the calculus in automated tools exploring state spaces, and the
full abstraction property means processes are bisimilar in the
symbolic setting if they are bisimilar in the original semantics.
A. Symbolic Labelled Transition System
The symbolic operational semantics of hybrid process
calculus is given in Table 2. We have omitted the symmetric
of the nondeterministic. The labelled transition system consists
of a collection of relations of the form P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
Q or
P
Γ,a(Ψ1,Ψ2),Γ′
−→
Q. The transition P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
Q means
that the process P can realize the action ε(Φ1, Φ2) if condition
Γ is true, and becomes Q where Γ′ is true after T units of
time. The transition P
Γ,a(Ψ1,Ψ2),Γ′
−→
Q means that the process
P can realize the action a(Ψ1, Ψ2) if condition Γ is true, and
becomes Q where Γ′ is true.
In the following, we use (∃
⇀
X .Φ){
⇀
X /
⇀
X′} to abbreviate
(∃x1...∃xm.Φ){x1, ..., xm/x′
1, ..., x′
m}, where the set of free
variables in Φ is {x1, ..., xm, x′
1, ..., x′
m}.
TAU : ε(Φ1, Φ2).P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P, where T ∈ R,
|= ∀δ ∈ [0, T].Γ{t + δ/t} → Φ1{t + δ/t},
|= (∃
⇀
X .(Γ ∧ Φ2 ∧ t′ = t + T)){
⇀
X /
⇀
X′} → Γ′.
ACT : a(Ψ1, Ψ2).P
Γ,a(Ψ1,Ψ2),Γ′
−→
P, where |= Γ → Ψ1,
|= (∃
⇀
X .(Γ ∧ Ψ2)){
⇀
X /
⇀
X′} → Γ′.
SUM :
P1
Γ,α,Γ′
−→ P ′
1
P1 + P2
Γ,α,Γ′
−→ P ′
1
REC : P{fixX.P/X}
Γ,α,Γ′
−→ P ′
fixX.P
Γ,α,Γ′
−→ P ′
Table 2: Symbolic operational semantics of hybrid process
calculus
An example: Let process P = ε(Φ1, Φ2).Q = ε(x1 +x2 ≤
2y + 1, y′ ≤ 2x′
2 − x1).Q, formula Γ = (t = 0 ∧ x1 ≥
0 ∧ x1 + x2 ≤ 3 ∧ y = 3). Then we have P
Γ,(ε(Φ1,Φ2),2),Γ′
−→
Q,
where Γ′ = (t ≥ 2 ∧ y ≤ 2x2).
B. Symbolic Bisimulation
In this section we deﬁne a symbolic version of concrete
bisimulation for hybrid process calculus. Symbolic bisim-
ulation is deﬁned as a family of binary relations indexed
by a predication logical formula which expresses variable
constraints.
Deﬁnition 3. A collection of formulas Σ is a partition of
Φ if for any θ it holds that θ |= Φ implies θ |= Ψ for some
Ψ ∈ Σ. A ﬁnite partition of Φ is a ﬁnite collection of formulas
which is a partition of Φ.
Deﬁnition 4. A symmetric relation R ∈ Pr × Pr with
respect to the formula Γ is called a symbolic bisimulation if
whenever P RΓ Q,
(1) P
Γ,(ε(ΦP
1 ,ΦP
2 ),T ),Γ′
P
−→
P ′ implies that there exists a ﬁnite
partition Σ = {ϕi | i ∈ I}, |= Γ ∧ ΦP
1 ↔ ∨i∈Iϕi, for any
ϕi there exists a ﬁnite partition Π = {χj | j ∈ J} such that
|= ϕi ∧ ΦP
2 ↔ ∨j∈Jχj, for any χj there exists Q′ such that
Q
Γ,(ε(ΦQ
1 ,ΦQ
2 ),T ),Γ′
Q
−→
Q′ and ϕi |= Γ ∧ ΦQ
1 , χj |= Γ ∧ ΦQ
2 and
P ′ R(∃
⇀
X.χj∧t′=t+T ){
⇀
X/
⇀
X′} Q′;
(2) P
Γ,a(ΨP
1 ,ΨP
2 ),Γ′
P
−→
P ′ with a ̸= ε implies that there exists
a ﬁnite partition Σ = {ϕi | i ∈ I}, |= Γ ∧ ΨP
1 ↔ ∨i∈Iϕi, for
any ϕi there exists a ﬁnite partition Π = {χj | j ∈ J} such
that |= ϕi ∧ ΨP
2 ↔ ∨j∈Jχj, for any χj there exists Q′ such
that Q
Γ,.a(ΨQ
1 ,ΨQ
2 ),Γ′
Q
−→
Q′ and ϕi |= Γ ∧ ΨQ
1 , χj |= Γ ∧ ΨQ
2
and P ′ R(∃
⇀
X.χj){
⇀
X/
⇀
X′} Q′.
We write P ∼Γ
S Q if there is a symbolic bisimulation R
such that P RΓ Q.
C. Equivalence Between Concrete Bisimulation and Symbolic
Bisimulation
In this section, we will prove the equivalence between
concrete bisimulation and symbolic bisimulation. Thus to give
a complete inference system for concrete bisimulation, it is
enough to give a complete inference system for symbolic
bisimulation.
To prove Proposition 1 which states the equivalence be-
tween concrete bisimulation and symbolic bisimulation, we
need some lemmas.
Lemma 1. There exists ρ such that ρ ∪ ρ′ |= Γ ⇔ ρ′ |=
(∃x1...∃xm.Γ), where the domain of ρ is {x1, ..., xm}, the
domain of ρ′ is {y1, ..., yn}, {x1, ..., xm} ∩ {y1, ..., yn} = ∅.
Proof. See Appendix A.
The following lemma gives the corresponding relation
between symbolic transition and concrete transition.
Lemma 2. (1) Given Γ and Γ′, if for any ρ |= Γ, there
is ρ′, such that ρ′ |= Γ′, ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φ2, and
⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P ′, ρ′⟩, then P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P ′, where
|= ∀δ ∈ [0, T].Γ{t + δ/t} → Φ1{t + δ/t}, |= (∃
⇀
X .(Γ ∧ Φ2 ∧
t′ = t + T)){
⇀
X /
⇀
X′} → Γ′;
(2) Given Γ and Γ′, if for any ρ |= Γ, there is ρ′, such
that ρ′ |= Γ′, ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Ψ2, and ⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P ′, ρ′⟩, then P
Γ,a(Ψ1,Ψ2),Γ′
−→
P ′, where |= Γ → Ψ1, |= (∃
⇀
X
.(Γ ∧ Ψ2)){
⇀
X /
⇀
X′} → Γ′;
(3) P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P ′ implies for any ρ |= Γ, there
is ρ′, such that ρ′ |= Γ′ and ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φ2,
⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P ′, ρ′⟩, where |= ∀δ ∈ [0, T].Γ{t + δ/t} →
Φ1{t+δ/t}, |= (∃
⇀
X .(Γ∧ Φ2 ∧ t′ = t+ T)){
⇀
X /
⇀
X′} → Γ′;
9
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

(4) P
Γ,a(Ψ1,Ψ2),Γ′
−→
P ′ implies for any ρ |= Γ, there is
ρ′, such that ρ′ |= Γ′ and ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Ψ2,
⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P ′, ρ′⟩, where |= Γ → Ψ1, |= (∃
⇀
X
.(Γ ∧ Ψ2)){
⇀
X /
⇀
X′} → Γ′.
Proof. See Appendix B.
The following lemma shows the image-ﬁnite property of
symbolic transition.
Lemma 3. (1) For any P and Γ, there are ﬁnitely many
ε(ΦP
1 , ΦP
2 ), such that P
Γ,(ε(ΦP
1 ,ΦP
2 ),T ),Γ′
P
−→
P ′;
(2) For any P and Γ, there are ﬁnitely many a(ΨP
1 , ΨP
2 ),
such that P
Γ,a(ΨP
1 ,ΨP
2 ),Γ′
P
−→
P ′.
Proof.
By
induction
on
the
inference
length
of
P
Γ,(ε(ΦP
1 ,ΦP
2 ),T ),Γ′
P
−→
P ′ or P
Γ,a(ΨP
1 ,ΨP
2 ),Γ′
P
−→
P ′.
In the following, we show that any process is symbolic
bisimilar to a “normal process”.
Lemma 4. For any P and Γ, there exists a process in the
form of Σl∈Lε(Φl1, Φl2).Pl +Σm∈Mam(Ψm1, Ψm2).Pm such
that P ∼Γ
S Σl∈Lε(Φl1, Φl2).Pl + Σm∈Mam(Ψm1, Ψm2).Pm.
Proof. By Lemma 3 and by induction on the structure of
P.
The equivalence between concrete bisimulation and sym-
bolic bisimulation is given in the following proposition.
Proposition 1. For any ρ |= Γ, ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ ⇔ P ∼Γ
S
Q.
Proof. See Appendix C.
Remark: For the symbolic bisimulation, for a transition
from P, there should be a ﬁnite partition from Q. In the proof
of Proposition 1, we show the existence of such ﬁnite partition.
IV.
A COMPLETE INFERENCE SYSTEM FOR HYBRID
PROCESS CALCULUS
In this section, we give an inference system for symbolic
bisimulation. The soundness and completeness of this infer-
ence system are also studied.
A. An Inference System for Bisimulation of Hybrid Process
Calculus
An inference system for symbolic bisimulation consists of
the following rules. The rules are in the form of A1, ..., An
B
,
which means B is true if A1, ..., An are all true. In these
rules, the notation Γ ◃ P = Q means process P is equivalent
to process Q if formula Γ is true.
(1)
Γ |= Φ1 ↔ Φ3,
|= ∃t.(t′ ≥ t ∧ Φ1 ∧ Γ ∧ Φ2) ↔ ∃t.(t′ ≥ t ∧ Φ3∧
Γ ∧ Φ4)
Γ ◃ ε(Φ1, Φ2).P = ε(Φ3, Φ4).P
(2)
Γ |= Φ1,
(∃
⇀
X .(Φ1 ∧ Γ ∧ Φ2 ∧ t′ ≥ t){
⇀
X /
⇀
X′} ◃ P = Q
Γ ◃ ε(Φ1, Φ2).P = ε(Φ1, Φ2).Q
(3) Γ |= Ψ1 ↔ Ψ3, |= (Ψ1 ∧ Γ ∧ Ψ2) ↔ (Ψ3 ∧ Γ ∧ Ψ4)
Γ ◃ a(Ψ1, Ψ2).P = a(Ψ3, Ψ4).P
(4) Γ |= Ψ1, (∃
⇀
X .(Ψ1 ∧ Γ ∧ Ψ2)){
⇀
X /
⇀
X′} ◃ P = Q
Γ ◃ a(Ψ1, Ψ2).P = a(Ψ1, Ψ2).Q
(5)
Γ |= ¬Φ1
Γ ◃ ε(Φ1, Φ2).P = 0
(6)
Γ |= ¬Ψ1
Γ ◃ a(Ψ1, Ψ2).P = 0
(7)
Γ |= ¬Φ2
Γ ◃ ε(Φ1, Φ2).P = 0
(8)
Γ |= ¬Ψ2
Γ ◃ a(Ψ1, Ψ2).P = 0
(9)
Γ ◃ P = Q
Γ ◃ P + R = Q + R
(10) Γ ◃ fixX.P = P{fixX.P/X}
(11) Γ ◃ P = Q{P/X}
Γ ◃ P = fixX.Q
(12)
Γ ◃ P = Q
Γ ◃ fixX.P = fixX.Q
(13) Γ ◃ P = P
(14) Γ ◃ P = Q
Γ ◃ Q = P
(15) Γ ◃ P = Q, Γ ◃ Q = R
Γ ◃ P = R
(16) F ◃ P = Qwhere F denotes the constant false formu-
la.
(17) Γ1 ◃ P = Q, Γ2 ◃ P = Q, Γ |= Γ1 ∨ Γ2
Γ ◃ P = Q
(18) Γ ◃ ε(Φ1 ∨ Φ2, Φ3).P = ε(Φ1, Φ3).P + ε(Φ2, Φ3).P
(19) Γ ◃ ε(Φ1, Φ2 ∨ Φ3).P = ε(Φ1, Φ2).P + ε(Φ1, Φ3).P
(20) Γ ◃ a(Φ1 ∨ Φ2, Φ3).P = a(Φ1, Φ3).P + a(Φ2, Φ3).P
(21) Γ ◃ a(Φ1, Φ2 ∨ Φ3).P = a(Φ1, Φ2).P + a(Φ1, Φ3).P
Remark: A special case of Rule (17) is the Rule CONS:
Γ′ ◃ P = Q, Γ |= Γ′
Γ ◃ P = R
We write ⊢ Γ ◃ P = Q to mean that Γ ◃ P = Q can be
derived from this proof system.
B. Soundness and Completeness of Inference System
In this section, we study the soundness and completeness
of inference system.
We ﬁrstly give the soundness of inference system.
Proposition 2. ⊢ Γ ◃ P = Q ⇒ P ∼Γ
S Q.
Proof. By induction on the length of inference. The base
case when the length is 0 is straightforward. For the induction
step we do case analysis on the last rule applied.
10
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Now we turn to completeness. To prove the completeness
of inference system, we give the following deﬁnitions and
lemmas.
Deﬁnition 5. A standard equation set
E : {Xi = Σl∈Lε(Φl1, Φl2).Xl + Σm∈Mam(Ψm1, Ψm2).
Xm + Σn∈NWn | i ∈ I}
is an equation set with formal process variables in {Xi}
and free process variables in {Wj | j ∈ J}. E is closed if
{Wj | j ∈ J} = ∅.
Deﬁnition 6. A process P provably Γ−satisfy an equation
set E ({Xi = Qi | i ∈ I}) if there exist a vector of processes
{Pi | i ∈ I} and a condition Γ such that ⊢ Γ ◃ P1 = P,
and ⊢ Γ ◃ Pi = Qi{Pj/Xj} for each i ∈ I. We will simply
say “provably satisﬁes E” when Γ = T, where T denotes the
constant true formula.
The following lemma states that any process can be repre-
sented as a standard equation set.
Lemma 5. For any process P with free process variables
W there exists a standard equation set E, with free process
variables in W, which is provably satisﬁed by P. In particular,
if P is closed then E is also closed.
Proof. See Appendix D.
The following lemma shows that two bisimilar processes
can be represented as same standard equation set.
Lemma 6. For closed processes P and Q, if P ∼Γ
S Q then
there exist a standard, closed equation set E, which is provably
Γ−satisﬁed by both P and Q.
Proof. See Appendix E.
The following lemma states that two processes can be
proved to be equivalent if they can be represented as same
standard equation set.
Lemma 7. If both P and Q provably Γ−satisfy an equation
set E then ⊢ Γ ◃ P = Q.
Proof. See Appendix F.
Now we prove the completeness of inference system.
Proposition 3. For closed processes P and Q, P ∼Γ
S
Q ⇒⊢ Γ ◃ P = Q.
Proof. By Lemma 6, there is a standard equation set E
such that which are Γ′−satisﬁed by both P and Q for some
Γ′ such that Γ′ ⇒ Γ. By Lemma 6, ⊢ Γ′ ◃ P = Q. Finally, by
Rule CONS, ⊢ Γ′ ◃ P = Q.
The soundness and completeness of inference system is
given as follows.
Proposition 4. For closed processes P and Q, P ∼Γ
S
Q ⇔⊢ Γ ◃ P = Q.
Proof. By Proposition 2 and Proposition 3.
Since concrete bisimulation is equivalent to symbolic
bisimulation, the inference system is also sound and complete
for concrete bisimulation.
Proposition 5. For any ρ |= Γ, ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ ⇔⊢ Γ ◃
P = Q.
Proof. By Proposition 1 and Proposition 4.
V.
CONCLUSIONS
There are many works on hybrid systems such as [2], [3],
[4], [7], and [12]. But as far as we know, there are seldom
works on sound and complete inference systems for bisim-
ulation of hybrid systems. However, the sound and complete
inference systems for some special kind of hybrid system, such
as real timed system, have been proposed. In [11], a timed
process calculus where processes denotes timed automata was
proposed. Then a complete inference system for such a timed
process calculus was presented.
The main aim of this paper is to present a sound and
complete inference system for bisimulation of hybrid systems.
This paper proposed a hybrid process calculus ﬁrstly. Then
the concrete bisimulation and symbolic bisimulation for this
hybrid process calculus were presented and the equivalence
between the two bisimulations were proved. We proposed an
inference system for symbolic bisimulation. Furthermore, the
soundness and completeness of the inference system were also
proved.
ACKNOWLEDGMENT
This work was supported by the Aviation Science Fund of
China under Grant No. 20128052064 and the National Natural
Science Foundation of China under Grant No. 60873025.
REFERENCES
[1]
R. Alur and D. L. Dill. A theory of timed automata. Theoretical
Computer Science, 126: 1994, pp. 183-235.
[2]
J.A.Bergstra and C.A.Middelburg. Process Algebra for Hybrid Systems,
Theoretical Computer Science 335, 2005, pp. 215-280.
[3]
D.A. van Beek, K.L. Man, M.A. Reniers, J.E. Rooda, and R. Schiffelers.
Syntax and Consistent Equation Semantics of Hybrid Chi, Journal of
Logic and Algebraic Programming 68, 2006, pp. 129-210.
[4]
P.J. Cuijpers and M.A. Reniers. Hybrid Process Algebra, Journal of
Logic and Algebraic Programming 62, 2005, pp. 191-245.
[5]
Jan Friso Groote and Alban Ponse. The Syntax and Semantics of µCRL,
Report, Stichting Mathematisch Centrum, 1990, 35 pages.
[6]
Jifeng H. From CSP to hybrid Systems, in A.W.Roscoe(Ed.), A Classi-
cal Mind: Essays in honour of C.A.R. Hoare, Prentice hall, Englewood
Cliffs, NJ, 1994, pp. 171-189.
[7]
Thomas A. Henzinger. The Theory of Hybrid Automata. In the Pro-
ceedings of the 11th Annual IEEE Symposium on Logic in Computer
Science (LICS 96), 1996, pp. 278-292.
[8]
M. Hennessy, H. Lin. Symbolic bisimulations. Theoretical Computer
Science, 138(2), 1995, pp. 353-389.
[9]
Uzma Khadim. A Comparative Study of Process Algebras for Hybrid
Systems. Report, Technische Universiteit Eindhoven, 2006. 108 pages.
[10]
N. Lynch, R. Segala, and F.W. Vaandrager, Hybrid I/O automata,
Information and Computation 185 (1), 2003, pp.105-157.
[11]
H. Lin and W. Yi. Axiomatising Timed Automata. In FST&TCS 2000,
LNCS 1974, 2000, pp. 277-289.
[12]
W. Rounds and H. Song. The ϕ-calculus: a language for distributed
con- trol of reconﬁgurable embedded systems, In the Proceedings of
HSCC 2003, LNCS 2623, 2003, pp. 435-449, Springer-Verlag.
Appendix A. Proof of Lemma 1
Lemma 1. There exists ρ such that ρ ∪ ρ′ |= Γ ⇔ ρ′ |=
(∃x1...∃xm.Γ), where the domain of ρ is {x1, ..., xm}, the
domain of ρ′ is {y1, ..., yn}, {x1, ..., xm} ∩ {y1, ..., yn} = ∅.
Proof. ⇒: Suppose there exists ρ such that ρ ∪ ρ′ |= Γ,
where the domain of ρ is {x1, ..., xm}, the domain of ρ′ is
11
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

{y1, ..., yn}, {x1, ..., xm}∩{y1, ..., yn} = ∅. It is immediately
that ρ′ |= (∃x1...∃xm.Γ).
⇐: Suppose ρ′ |= (∃x1...∃xm.Γ), where the domain of ρ′
is {y1, ..., yn}, {x1, ..., xm} ∩ {y1, ..., yn} = ∅. Then there is
ρ such that the domain of ρ is {x1, ..., xm}, ρ ∪ ρ′ |= Γ.
Appendix B. Proof of Lemma 2
Lemma 2. (1) Given Γ and Γ′, if for any ρ |= Γ, there
is ρ′, such that ρ′ |= Γ′, ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φ2, and
⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P ′, ρ′⟩, then P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P ′, where
|= ∀δ ∈ [0, T].Γ{t + δ/t} → Φ1{t + δ/t}, |= (∃
⇀
X .(Γ ∧ Φ2 ∧
t′ = t + T)){
⇀
X /
⇀
X′} → Γ′;
(2) Given Γ and Γ′, if for any ρ |= Γ, there is ρ′, such
that ρ′ |= Γ′, ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Ψ2, and ⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P ′, ρ′⟩, then P
Γ,a(Ψ1,Ψ2),Γ′
−→
P ′, where |= Γ → Ψ1, |= (∃
⇀
X
.(Γ ∧ Ψ2)){
⇀
X /
⇀
X′} → Γ′;
(3) P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P ′ implies for any ρ |= Γ, there
is ρ′, such that ρ′ |= Γ′ and ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φ2,
⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P ′, ρ′⟩, where |= ∀δ ∈ [0, T].Γ{t + δ/t} →
Φ1{t+δ/t}, |= (∃
⇀
X .(Γ∧Φ2 ∧t′ = t+T)){
⇀
X /
⇀
X′} → Γ′;
(4) P
Γ,a(Ψ1,Ψ2),Γ′
−→
P ′ implies for any ρ |= Γ, there is
ρ′, such that ρ′ |= Γ′ and ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Ψ2,
⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P ′, ρ′⟩, where |= Γ → Ψ1, |= (∃
⇀
X
.(Γ ∧ Ψ2)){
⇀
X /
⇀
X′} → Γ′.
Proof. By induction on the inference length.
(1) Suppose for any ρ |= Γ, there is ρ′, ρ′ |= Γ′ and
ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φ2, ⟨P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P ′, ρ′⟩. We
only discuss the case ⟨ε(Φ1, Φ2).P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P, ρ′⟩. Other
cases are similar or trivial.
Suppose for any ρ |= Γ, there is ρ′, ρ′ |= Γ′ and ρ∪(ρ′[x ⇐
x′]) |= Γ ∧ Φ2, ⟨ε(Φ1, Φ2).P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P, ρ′⟩. We have
∀δ ∈ [0, T].ρ[t ← ρ(t)+δ] |= Φ1, ρ′(t) = ρ(t)+T, ρ∪(ρ′[x ⇐
x′]) |= Φ2. Therefore ε(Φ1, Φ2).P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P, where
|= ∀δ ∈ [0, T].Γ{t + δ/t} → Φ1{t + δ/t}, |= (∃
⇀
X .(Γ ∧ Φ2 ∧
t′ = t + T)){
⇀
X /
⇀
X′} → Γ′.
(2) Suppose for any ρ |= Γ, there is ρ′, ρ′ |= Γ′ and
ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Ψ2, ⟨P, ρ⟩
a(Ψ1,Ψ2)
−→
⟨P ′, ρ′⟩. Similar
to Case (1).
(3) Suppose P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P ′. We only discuss the
case ε(Φ1, Φ2).P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P. Other cases are similar
or trivial.
Suppose ε(Φ1, Φ2).P
Γ,(ε(Φ1,Φ2),T ),Γ′
−→
P. We have |= ∀δ ∈
[0, T].Γ{t + δ/t} → Φ1{t + δ/t}, |= (∃
⇀
X .(Γ ∧ Φ2 ∧ t′ =
t+T)){
⇀
X /
⇀
X′} → Γ′. Therefore ⟨ε(Φ1, Φ2).P, ρ⟩
ε(Φ1,Φ2),T
−→
⟨P, ρ′⟩, where ∀δ ∈ [0, T].ρ[t ← ρ(t) + δ] |= Φ1, ρ′(t) =
ρ(t) + T, ρ ∪ (ρ′[x ⇐ x′]) |= Φ2.
(4) Suppose P
Γ,a(Ψ1,Ψ2),Γ′
−→
P ′. Similar to Case (3).
Appendix C. Proof of Proposition 1
Proposition 1. For any ρ |= Γ, ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ ⇔ P ∼Γ
S
Q.
Proof. ⇒: Let R = {(P, Q) | ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩ for any
ρ |= Γ}. It is enough to prove that R ⊆∼Γ
S .
It holds that P ∼Γ
S Σl∈Lε(Φl1, Φl2).Pl + Σm∈Mam(Ψm1,
Ψm2).Pm
and
Q
∼Γ
S
Σo∈Oε(Φo1, Φo2).Qo + Σp∈P
ap(Ψp1, Ψp2).Qp by Lemma 3 and Lemma 4.
(1) Since ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩, we have that Γ |= (∨l∈LΦl1) ↔
(∨o∈OΦo1),
Γ
|=
(∨l∈LΦl2)
↔
(∨o∈OΦo2),
Γ
|=
(∨m∈MΨm1) ↔ (∨p∈P Ψp1), and Γ |= (∨m∈MΨm2) ↔
(∨p∈P Ψp2), otherwise P
can perform some action that
Q can not, and that is a contradiction. Therefore, Γ |=
∨l∈L,o∈O(Φl1∧Φo1) ↔ ∨l∈LΦl1 ↔ ∨o∈OΦo1 and {Φl1∧Φo1
| l ∈ L, o ∈ O} is a ﬁnite partition of ∨l∈LΦl1 and
∨o∈OΦo1. Similarly, there is a ﬁnite partition of (∨l∈LΦl2) and
(∨o∈OΦo2), a ﬁnite partition of (∨m∈MΨm1) and (∨p∈P Ψp1),
and a ﬁnite partition of (∨m∈MΨm2) and (∨p∈P Ψp2).
Suppose ⟨P, ρ⟩
ε(Φl1,Φl2),T
−→
⟨P ′, ρ′⟩ for any ρ |= Γ. By
Lemma 2, P
Γ,(ε(Φl1,Φl2),T ),Γ′
P
−→
P ′, where |= ∀δ ∈ [0, T].Γ{t+
δ/t} → Φl1{t+δ/t}, |= (∃
⇀
X .(Γ∧Φl2∧t′ = t+T)){
⇀
X /
⇀
X′
} → Γ′
P . Since ⟨P, ρ⟩ ∼ ⟨Q, ρ⟩, by Lemma 2 and Lemma 4,
we have that there exists a ﬁnite partition Σ = {Γ ∧ Φl1 ∧ Φo1
| l ∈ L, o ∈ O}, |= Γ ∧ Φl1 ↔ ∨o∈O(Γ ∧ Φl1 ∧ Φo1), for any
Γ∧Φl1∧Φo1, there exists a ﬁnite partition Π = {Γ∧Φl2∧Φo2},
|= Γ ∧ Φl1 ∧ Φo1 ∧ Φl2 ↔ ∨o∈O(Γ ∧ Φl2 ∧ Φo2), for any
Γ∧Φl2∧Φo2, there exists Q′ such that Q
Γ,(ε(Φo1,Φo2),T ),Γ′
Q
−→
Q′
and Γ ∧ Φl1 ∧ Φo1 |= Γ ∧ Φo1, Γ ∧ Φl2 ∧ Φo2 |= Γ ∧ Φo2 and
P ′ R(∃
→
X.(Γ∧Φl2∧Φo2∧t′=t+T )){
→
X/
→
X′} Q′.
(2) In the case of P
Γ,am(Ψm1,Ψm2),Γ′
P
−→
P ′, proof is similar
to Case (1).
⇐: Let R = {(⟨P, ρ⟩, ⟨Q, ρ⟩) | P ∼Γ
S Q where ρ |= Γ}. It
is enough to prove that R ⊆∼ .
(1) Suppose P
∼Γ
S
Q. It holds that P
∼Γ
S
Σl∈L
ε(Φl1, Φl2).Pl + Σm∈Mam(Ψm1, Ψm2).Pm
and
Q
∼Γ
S
Σo∈Oε(Φo1, Φo2).Qo + Σp∈P ap(Ψp1, Ψp2).Qp by Lemma 3
and Lemma 4. We have that Γ |= (∨l∈LΦl1) ↔ (∨o∈OΦo1),
Γ |= (∨l∈LΦl2) ↔ (∨o∈OΦo2), Γ |= (∨m∈MΨm1) ↔
(∨p∈P Ψp1), and Γ |= (∨m∈MΨm2) ↔ (∨p∈P Ψp2), otherwise
P can perform some action that Q can not, and that is
a contradiction. Therefore, Γ |= ∨l∈L,o∈O(Φl1 ∧ Φo1) ↔
∨l∈LΦl1 ↔ ∨o∈OΦo1 and {Φl1 ∧ Φo1 | l ∈ L, o ∈ O} is a
ﬁnite partition of ∨l∈LΦl1 and ∨o∈OΦo1. Similarly, there is a
ﬁnite partition of (∨l∈LΦl2) and (∨o∈OΦo2), a ﬁnite partition
of (∨m∈MΨm1) and (∨p∈P Ψp1), and a ﬁnite partition of
(∨m∈MΨm2) and (∨p∈P Ψp2).
Suppose P
Γ,(ε(Φl1,Φl2),T ),Γ′
P
−→
P ′. By Lemma 2, for any
ρ |= Γ, there is ρ′, ρ′ |= Γ′
P and ρ ∪ (ρ′[x ⇐ x′]) |= Γ ∧ Φl2,
⟨P, ρ⟩
ε(Φl1,Φl2),T
−→
⟨P ′, ρ′⟩, where |= ∀δ ∈ [0, T].Γ{t+δ/t} →
Φl1{t+δ/t}, |= (∃
⇀
X .(Γ∧Φl2∧t′ = t+T)){
⇀
X /
⇀
X′} → Γ′
P .
12
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

Since P ∼Γ
S Q, we have that there exists a ﬁnite partition
Σ = {ϕi | i ∈ I}, |= Γ∧Φl1 ↔ ∨i∈Iϕi, for any ϕi, there exists
a ﬁnite partition Π = {χj | j ∈ J}, |= ϕi∧Φl2 ↔ ∨j∈Jχj, for
any χj, there exists Q′ such that Q
Γ,(ε(Φo1,Φo2),T ),Γ′
Q
−→
Q′ and
ϕi |= Γ ∧ Φo1, χj |= Γ ∧ Φo2 and P ′ R(∃
⇀
X.χj∧t′=t+T ){
⇀
X/
⇀
X′}
Q′. Hence ρ |= ϕi |= Γ ∧ Φo1 and ρ′ |= (∃
⇀
X .χj ∧ t′ =
t + T){
⇀
X /
⇀
X′} |= (∃
⇀
X .Γ ∧ Φo2 ∧ t′ = t + T){
⇀
X /
⇀
X′}.
Therefore by Lemma 2 we have that there exists Q′ such that
⟨Q, ρ⟩
ε(Φo1,Φo2),T
−→
⟨Q′, ρ′⟩ and ⟨P ′, ρ′⟩ R ⟨Q′, ρ′⟩.
(2) In the case of ⟨P, ρ⟩
am(Ψm1,Ψm2)
−→
⟨P ′, ρ′⟩, proof is
similar to Case (1).
Appendix D. Proof of Lemma 5
Lemma 5. For any process P with free process variables
W there exists a standard equation set E, with free process
variables in W, which is provably satisﬁed by P. In particular,
if P is closed then E is also closed.
Proof. By induction on the structure of P. The only non-
trivial case is recursion when P ≡ fixX.P ′. By induction,
there is a standard equation set E′ : {Xi = Ui | i ∈ I}
with free process variables in FV (P)∪{X} and P ′
i such that
⊢ P ′ = P ′
1 and ⊢ P ′
i = Ui{P ′
j/Xj | j ∈ I}.
We may assume that X is different from any Xi. Let
Vi = Ui{U1/X} for each i ∈ I. Note that since X is under
an action preﬁxing in P ′, it does not occur free in U1. Hence
V1 = U1. Consider the equation set E : {Xi = Vi | i ∈ I}.
Set Pi = P ′
i{P/X}. Then ⊢ P = fixX.P ′ = fixX.P ′
1 =
P ′
1{fixX.P ′
1/X} = P ′
1{P/X} = P1 and ⊢ P = P ′
1{P/X
} = U1{P ′
i/Xi | i ∈ I}{P/X} = U1{P ′
i{P/X}/Xi |
i ∈ I} = U1{Pi/Xi | i ∈ I}. Now ⊢ Pi = P ′
i{P/X} =
Ui{P ′
j/Xj | j ∈ I}{P/X} = Ui{P, P ′
j{P/X}/X, Xj |
j ∈ I} = Ui{P, Pj/X, Xj | j ∈ I} = Ui{U1{Pj/Xj |
j ∈ I}, P ′
j{P/X}/X, Xj | j ∈ I} = Ui{U1/X}{Pj/Xj |
j ∈ I} = Vi{Pj/Xj | j ∈ I}. This shows that P satisﬁes
E.
Appendix E. Proof of Lemma 6
Lemma 6. For closed processes P and Q, if P ∼Γ
S Q then
there exist a standard, closed equation set E, which is provably
Γ−satisﬁed by both P and Q.
Proof. Let E1 and E2 be the standard equation sets for
P and Q, respectively: E1 : {Xi = Σl∈Lε(Φl1, Φl2).Xl +
Σm∈Mam(Ψm1, Ψm2).Xm + Σn∈NWn | i ∈ I}, E2 : {Yj =
Σo∈Oε(Φo1, Φo2).Xo + Σp∈P bp(Ψp1, Ψp2).Xp + Σq∈QWq |
j ∈ J}. So there are Pi, Qj such that ⊢ P1 = P, ⊢ Q1 = Q,
and ⊢ Pi = Σl∈Lε(Φl1, Φl2).Pl + Σm∈Mam(Ψm1, Ψm2).Pm,
⊢ Qj = Σo∈Oε(Φo1, Φo2).Qo +Σp∈P bp(Ψp1, Ψp2).Qp. With-
out loss of generality, we may assume am = bp = a for all
m, p.
Deﬁne E : {Zij = Σl∈L,o∈Oε(Φl1 ∧Φo1, Φl2 ∧Φo2).Zlo +
Σm∈M,p∈P a(Ψm1 ∧ Ψp1, Ψm2 ∧ Ψp2).Zmp + Σn∈N,q∈QZnq |
i ∈ I, j ∈ J}.
We claim that E is provably Γ−satisﬁed by P when each
Zij is instantiated with Pi.
We need to show, for each i, ⊢ Γ ◃ Pi = Σl∈L,o∈Oε(Φl1 ∧
Φo1, Φl2∧Φo2).Pl+Σm∈M,p∈P a(Ψm1∧Ψp1, Ψm2∧Ψp2).Pm.
Since P ∼Γ
S Q, we have for any l, Φl1∧¬(∨o∈OΦo1) = F,
Φl2∧¬(∨o∈OΦo2) = F, and for any m, Ψm1∧¬(∨p∈P Ψp1) =
F, Ψm2 ∧ ¬(∨p∈P Ψp2) = F.
Therefore, ⊢ Γ ◃ Σl∈L,o∈Oε(Φl1 ∧ Φo1, Φl2 ∧ Φo2).Pl +
Σm∈M,p∈P a(Ψm1 ∧ Ψp1, Ψm2 ∧ Ψp2).Pm
=
Σl∈L,o∈Oε(Φl1 ∧ Φo1, Φl2 ∧ Φo2).Pl + 0 + 0 +
Σm∈M,p∈P a(Ψm1 ∧ Ψp1, Ψm2 ∧ Ψp2).Pm + 0 + 0
= Σl∈L,o∈Oε(Φl1 ∧Φo1, Φl2 ∧Φo2).Pl +Σl∈L,o∈Oε(Φl1 ∧
¬(∨o∈OΦo1), Φl2 ∧ Φo2).Pl + Σl∈L,o∈Oε(Φl1 ∧ Φo1, Φl2 ∧
¬(∨o∈OΦo2)).Pl+Σm∈M,p∈P a(Ψm1∧Ψp1, Ψm2∧Ψp2).Pm+
Σm∈M,p∈P a(Ψm1
∧
¬(∨p∈P Ψp1), Ψm2
∧
Ψp2).Pm
+
Σm∈M,p∈P a(Ψm1 ∧ Ψp1, Ψm2 ∧ ¬(∨p∈P Ψp2)).Pm
= Σl∈Lε(Φl1, Φl2).Pl + Σm∈Ma(Ψm1, Ψm2).Pm = Pi
Symmetrically we can show that E is provably Γ−satisﬁed
by Q when each Zij is instantiated with Qj.
Appendix F. Proof of Lemma 7
Lemma 7. If both P and Q provably Γ−satisfy an equation
set E then ⊢ Γ ◃ P = Q.
Proof. By induction on the size of E. For the base case
when E contains only one equation X1 = V1, we have ⊢
Γ◃P = V1{P/X1}. Therefore ⊢ Γ◃P = fixX1.V1. Similarly,
⊢ Γ ◃ Q = fixX1.V1. Hence ⊢ Γ ◃ P = Q.
Assume the result for m and let E contain m+1 equations:
Xi = Vi, 1 ≤ i ≤ m + 1. Since P provably Γ−satisﬁes E,
there are Pi, 1 ≤ i ≤ m + 1, such that ⊢ Γ ◃ P1 = P, and ⊢
Γ◃Pi = Vi{Pj/Xj} for each 1 ≤ i, j ≤ m+1. In particular, ⊢
Γ ◃ Pm+1 = Vm+1{Pi/Xi | 1 ≤ i ≤ m + 1} = (Vm+1{Pi/Xi
| 1 ≤ j ≤ m}){Pm+1/Xm+1}. By Rule (11), ⊢ Γ ◃ Pm+1 =
fixXm+1.Vm+1{Pi/Xi | 1 ≤ i ≤ m}. Writing Wm+1 for
fixXm+1.Vm+1, we have ⊢ Γ ◃ Pm+1 = Wm+1{Pi/Xi
| 1 ≤ i ≤ m}. Therefore, ⊢ Γ ◃ Pi
= Vi{Pj/Xj |
1 ≤ j ≤ m+1} = Vi{Pj/Xj | 1 ≤ j ≤ m}{Pm+1/Xm+1} =
Vi{Pj/Xj | 1 ≤ j
≤ m}{Wm+1{Pi/Xi | 1 ≤ i ≤
m}/Xm+1} = Vi{Wm+1/Xm+1}{Pj/Xj | 1 ≤ j ≤ m}.
This shows P provably Γ−satisﬁes the equation set E′ : Xi =
Vi{Wm+1/Xm+1} for each 1 ≤ i ≤ m. Symmetrically we
can show that Q provably Γ−satisﬁes the equation set E′. By
induction we conclude ⊢ Γ ◃ P = Q.
13
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-277-6
COMPUTATION TOOLS 2013 : The Fourth International Conference on Computational Logics, Algebras, Programming, Tools, and Benchmarking

