 
 
Measuring a Software Production Line 
with IFPUG-based Function Points  
 
 
Volkan Halil Bagci, Umut Orcun Turgut, Ali Ciltik, Semih Cetin, Recep Ozcelik 
Cybersoft Information Technologies R & D Center 
Istanbul, Turkey 
e-mail: {volkan.bagci, umut.turgut, ali.ciltik, semih.cetin,recep.ozcelik}@cs.com.tr 
 
 
Abstract – Software Production Lines (SPLs) aim to manage 
cost-based activities for product delivery. Our company has 
been using SPL engineering for about 10 years and successfully 
implemented cost-controlled production cycles for SPLs during 
past two years, which are based on well-known Function Point 
(FP) approach supported by International Function Point User 
Group (IFPUG). Cost-based product delivery in SPLs requires 
the complete transformation of requirements gathering, cost 
estimation, time planning and productivity measuring steps. At 
the maturity level reached so far, every contributing part of 
the production line can be measured and cost-attached effec-
tively and new targets can be set accordingly. Moreover, pro-
duction bandwidth can be estimated precisely based on statisti-
cal productivity coefficients of every working team. This paper 
introduces our cost-controlled SPL approach, the achieve-
ments so far and our future plans for improvement. 
Keywords-Function Point; Software Measurement; Software 
Production Lines; Productivity Coefficient. 
I. 
 INTRODUCTION 
Software is encountered in every part of our daily life 
nowadays. Consistent and cost-effective software products 
certainly make our life much easier. The consistency and 
cost-effectiveness of any product can be controlled by strict 
measurements and software is not an exception in that 
sense. In other words, software engineering is not an appro-
priate term unless the size, quality and productivity are 
measured accurately since unmeasured variables cannot be 
managed in any engineering discipline [1]. 
Software measurement enables the estimation of team 
productivity and improvement of existing processes based 
on recorded productivity metrics. Many researchers focus 
on new metrics to measure productivity [2] while others 
analyze software team productivity efforts and make empir-
ical assessments for evaluating measurement efforts in soft-
ware companies [3][4]. 
 In particular to SPLs, the factors that accelerate and 
prevent team productivity can be statistically determined 
and exploited to the maximum extend for setting feasible 
targets. The approach explained in this paper has been used 
for the past two years in the banking SPL of our company 
and particularly implemented for a mid-scale bank in Tur-
key. 
The rest of this paper is organized as follows: Section II 
discusses about the related works. Section III provides an 
overview of the organization and roles. Section IV describes 
the function point and its standard in the context of software 
evolution. Section V introduces the cost estimation process 
that is currently being held in our company. This section 
also describes the results obtained in the last period. Section 
VI discusses about the future work so as to improve the 
processes as a whole. Finally, Section VII concludes this 
paper. 
II. 
RELATED WORKS 
In the last decade many cost estimation models for soft-
ware production lines have been proposed. Some repre-
sentative proposals are: [5][6][7][8] and [9]. Poulin [5] pre-
sented a reuse metric and economics model that utilizes 
systematic reuse method.  Poulin’s model has two parame-
ters: the relative cost of reuse (RCR) and the relative cost of 
writing for reuse (RCWR). Using these two parameters 
Poulin calculates the costs of product line development, thus 
provides extensive insight for the economics of software 
production lines.    
Clements, McGregor, and Cohen [6] proposed the struc-
tured intuitive model for product line economics (SIMPLE) 
a general-purpose business model that supports the estima-
tion of the costs and benefits in a product line development 
organization. 
Lamine, Jilani, and Ghezala [7] proposed a new software 
cost estimation model for product line engineering that is 
based on integrated cost estimation model for reuse in gen-
eral and Poulin’s model of product line engineering. New 
tool supporting the model is described along with UML 
presentation.  
Nóbrega,  Almeida, and Meira [8] proposed integrated 
cost model for product line engineering (InCoME). As well 
as a new model is introduced along with its case study with 
results, the paper highlights important factors to acquire an 
effective model in terms of cost-benefit.   
Nolan, and Abrahão [9] mentions about the experiences 
gained by using of estimation tools for the software product 
lines. It is clearly stated that a model is not only used for 
estimating cost and schedule but also for estimating and 
validating risks and opportunities. Future discussions about 
how a new cost model should be built are given for projects 
represented as number of Lines of Code (LOC).    
202
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
III. 
MOTIVATION 
Software Production Line is the adapted version of an 
industrial product line for developing software product 
families with the vision of managing cost and time-to-
market concerns, which are based on structured reusability 
techniques [12]. The main supplier has its own SPL infra-
structure so-called Aurora that is used for the production of 
different product families ranging from banking to insurance 
and tax administration to Enterprise Resource Planning 
(ERP) [10][11].  
The customer bank decided to outsource the develop-
ment and maintenance of its own banking software to the 
main supplier over its sister company the main contractor. 
In this setup, the main supplier is the main banking products 
supplier for many banks including the customer bank, and 
the main contractor company is the main contractor for 
customizing and maintaining the main supplier’s banking 
products, particularly for the customer bank.  
In order to provide high quality services to the customer 
bank, the main supplier and the main contractor decided to 
have a new unit called Product Management Department 
(PMD) in their joint organization chart. New organization 
chart including the PMD is given in Figure 1. PMD has a 
sub-unit so-called Product Improvement Group (PIG), 
which is responsible for inspecting and improving banking 
products (called product restructuring) using modern soft-
ware engineering techniques as well as implementing cor-
rective actions on existing modules (called product refactor-
ing). Another sub-unit in PMD is Production Planning 
Group (PPG), which is responsible for cost-estimation of 
new inquiries, planning implementation tasks, and monitor-
ing the production cycles. The contract between the custom-
er bank and the main contractor is based on FP and inquiries 
are implemented with FP-based cost. FP-based cost antici-
pates the cost model based on software product functionali-
ty. 
Pricing a single FP is not a trivial task in contractual 
terms since buyer and supplier do have different point of 
views. In case of the customer bank, a well-known interna-
tional consulting group worked both with buyer and supplier 
teams to set the price for an FP, based on existing implemen-
tation costs and pricing models [13]. Working timesheets 
were examined, hourly and daily efforts were calculated and 
an average cost for an FP has been determined. Additionally, 
the FP-based cost estimation approach and related formula 
have been double-checked by the consulting group. The 
approach has been monitored for a while in real cases and 
finally approved both by the customer bank and the main 
contractor. 
 
 
 
Figure 1. Organization schema of Product Management Department. 
In this model, the customer bank Project Office (PO) on-
ly deals with the PPG as the single contact point of the main 
contractor and the main supplier. Once PO forwards inquir-
ies, PPG prepares the Approximate Cost Form (ACF) for 
each inquiry, including the estimated starting and finishing 
dates of implementation. PO goes through each ACF and 
approves accordingly. The approval of ACF initiates the real 
planning of each inquiry with exact dates of implementation. 
PPG is also responsible for allocating necessary resources for 
the software development efforts. During the course of im-
plementing every inquiry, PPG keeps certain Key Perfor-
mance Indicators (KPI) to measure the effectiveness of every 
conveyor in the software production line. Using these SPL 
KPIs, PPG is expected to coordinate software development 
teams, business analysts, and test units throughout the lifecy-
cle of a request. 
IV. 
FUNCTION POINT 
FP is a metric for measuring the functionality provided to 
the user of an information system. The concept was intro-
duced by Albrecht in 1979 [14], and used widespread in the 
world as of today in a variety of 6 different standards, such 
as COSMIC FSM, FiSMA FSM, IFPUG FSM, MK II FPA, 
NESMA, and the automatic FP supported by Object Man-
agement Group (OMG) [15][16][17][18][19][20]. The OMG 
automatic FP standard is based on IFPUG approach in such a 
way that it determines functions, differentiates internal and 
external files, and calculates the FP accordingly. 
IFPUG initiated the standardization of measuring soft-
ware projects, which is accepted by the International Stand-
ards Organization (ISO) with most up-to-date version 4.3. As 
stated in IFPUG Counting Practices Manual (CPM) 4.3, FP 
is the unit of measurement to express the amount of business 
functionality [21]. IFPUG FP is calculated based on counting 
the factors,  including internal and external information 
sources, external inputs, outputs, and queries. We particular-
ly prefer to use IFPUG FP within other FP approaches as 
being the most widely used approach, being in line with 
banking domain, providing access to an extensive database 
of more than 5000 International Software Benchmarking 
Standards Group (ISBSG) project performance cases, having 
large volume of industrial data in management information 
systems, and enabling the official certification option 
[23][24]. 
203
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
V. 
COST ESTIMATION PROCESS 
In this section of the study, cost estimation process is ex-
plained in detail while post process observations and out-
comes are shared in later parts of the section.  
  
Works that are being performed by the main contractor 
are handled via requests. Each request has a request type that 
might have impact on cost estimation as given in detail in 
Section A.  
 
Figure 2. The view of a software application from the eyes of an FP practi-
tioner [22]. 
Our FP practitioners examine requests to identify data 
and transaction functions using IFPUG FSM with similar 
view of a software application as shown in Figure 2. Once 
the initial examination of request is complete, project type 
and request size is decided as explained in section B and 
section C respectively. FP practitioners estimate cost of the 
request by using the process factor and calculation method as 
explained in section D.  
After cost estimation is complete, planning and product 
phase starts as explained in Section E. Observations and 
importance of scope meeting are mentioned in Sections F 
and G respectively.  
A. Request Type 
Prior to our cost estimation process implemented, when 
a request is entered in the system, it is given a request type 
based on the expected application size and application type. 
In order to support these request types, general system char-
acteristics (GSC) [21] are decided for these request types, 
making cost estimation balanced for a given type of request. 
Thus, there are three request types given in our system; 
which are project, improvement, and report. 
Project and improvement types are both software appli-
cations that might involve brand new functionality and/or 
modifications over existing application. Main difference is 
the size of the application; for example, an estimated cost 
threshold of 62 FP or less is being used as improvement 
request type within our process. Any request that has esti-
mated cost size of 62 FP is of project request type.  
 
TABLE I.  CALCULATED VAF VALUES FOR REQUEST TYPES. 
 
 
In our cost estimation process, request types can affect 
variable adjustment factor (VAF) as shown in (2), thus have 
impact on final cost estimation. VAF for project and im-
provement request types are set to 35 Total Degree of Influ-
ence Points (TDI), making VAF of these request types equal 
to 1.0.  
                    
.0 65
* .0 01)
(

VAF  TDI
 [21]                     (1) 
 
Report is a special request type that addresses infor-
mation retrieval using offline databases via quick third party 
development tools. VAF of report project type is calculated 
as 0.65 once all TDIs of the GSC are set to 0 due to the 
simple development efforts required for reports. 
B. Request Requirements Category 
Each request is represented by one or many require-
ments. These requirements can be identified as functional or 
non-functional ones. In our cost estimation process, while 
IFPUG FSM is used for functional requirements in terms of 
cost estimating, estimating cost of non-functional require-
ments handled using our non-functional point system. In 
order to cover  a cost estimation process that would address 
requests with different possibility of requirement types, a 
request requirements category (RRC) is introduced as an 
element of decision node in our cost-estimation flow-chart, 
which is shown in Figure 3. 
Based on the possible combination of the request re-
quirement varieties, there are three RRCs as follows. 
1) Functional RRC: Functional RRC addresses require-
ments that include only functional ones. Thus the cost of the 
request can be calculated according to IFPUG FSM v.4.3 
standard. Whether the request has a functional component or 
not can be identified by examining the requirements of the 
request. If it has at least one function among Internal Logi-
cal File (ILF), External Interface File (EIF), External Input 
(EI), External Output (EO) or External Inquiry (EQ), then 
request may be processed as a functional RRC. Examples of 
functional projects are listed below. 
 
- Data Migration (Customer data entrance, sending con-
trol signal) 
- Data Transformation (Bank interest calculation, aver-
age temperature derivation) 
- Data Storage (Customer order record, environment 
temperature record) 
204
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
- Data Query (Listing current personnel, querying coor-
dinate data) 
 
Figure 3. The cost estimation flow-chart. 
2) Non-functional RRC: If the request does not contain a 
functional requirement, then the cost cannot be calculated 
using IFPUG FSM. The total cost of the request is 
calculated using non-functional point system by summing 
all of the separate FP costs of items, which are listed below 
in detail.  
 
- Project Management, Coordination, Requirement 
Gathering 
- Analysis, High Level Design, Quality Control 
- Design, Software Development, Integration 
- Functional Tests, Acceptance Tests, Technical Support 
Services 
- Deployment, Fixed-Works 
 
The costs of these types of requests are reckoned accord-
ing to man/month data and used as NFP (Non-Function 
Point) in the system for setting connection with FP. 
a) Fixed-Works: In order to decrease the operational 
cost of recurring non-functional requests, fixed-works list 
has been set up. Fixed-works list is a living document. Not 
only the FP practitioners, but also the planning experts and 
module managers do the relevant updates as NFP on that 
list. 
3) Hybrid RRC: According to the standard of IFPUG FP 
calculation v.4.3, if cost price of a request can be executed, 
although it has non-functional requirements, this type of 
requests are called hybrid requests. The cost of these types 
of requests is calculated by summing the costs of both the 
functional and non-functional components. 
C. Request Size 
Requests that have a size below a certain threshold are 
classified as minor requests while the ones that are above 
the threshold are classified as major requests. Requests go 
through different states as shown in Table IV. Encompass-
ing the period from request entry to the deployment, several 
output documents are created along these steps.  
The aim of the request size classification is to have an 
efficient production line. As it can be seen in Figure 4 and 5, 
based on the request size, requests follow different path. 
With a few exceptions, minor requests usually get involved 
in a minor process pipeline, without passing through the 
analysis and design steps; thus, most of the documentation 
requirement is dropped off. On the other hand, major re-
quests have to follow the big route, which is passing through 
quality processes and as a result, analysis and design docu-
ments are prepared in detail.  
Current threshold in terms of FP is arranged to be just 
more than a single function, thus meaning if a request has 
more than a single function involved, it would be addressed 
as a major request. Based on IFPUG CPM 4.3 [21], mini-
mum possible single function cost is 3 FPs; for example EI-
Low and EQ-Low both have 3 FPs. Therefore, in agreement 
with the bank, it is decided to use 3 FPs as a threshold for 
request size classification. 
 
D. Process Factor and Cost Calculation 
Process Factor (PF) is the sum of total coefficients of all 
sub processes in the production line. It is used for reflecting 
the costs of all sub-processes to the total cost in minor and 
major requests. Besides distributing the total cost to the sub-
processes, PF also calculates the partial cost when the job, 
which is being carried on the product line, is canceled. Max-
imum value for the PF can be 1.0. Table II details the PF 
values for some of the sub-processes and these are calculat-
ed according to their portions in the production period. 
 
Equation (2) shows how the process factor is calculated. 
 
               
BT
AT
DEV
QC
D
HLD
A
PF







         (2) 
 
where A is the analysis process factor, HLD is the high level 
design process factor, D is the design process factor, QC is 
the quality control process factor, DEV is the development 
process factor, AT is the alpha test process factor and BT is 
the beta test process factor. 
 
TABLE II. PROCESS FACTOR VALUES FOR EACH REQUEST TYPE. 
 
205
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
 
                                     
VAF uFP
aFP
*

                                (3) 
                                     
aFP
PF
CFP
*

                                 (4) 
 
As per definition given in [17] and shown in (3), adjusted 
function point (aFP) is calculated using VAF and unadjusted 
function point (uFP). Value of VAF can change based on 
the project type. As it can be seen from (4), PF has a direct 
consequence on the cost estimation. In (4), CFP is the cost 
in FPs, PF is the process factor and aFP is the regulated FP.  
 
TABLE III. SAMPLE NET COSTS. 
 
With reference to the Table III, net CFP values for sam-
ple applications with distinct request types and request sizes 
are calculated according to distinct process factors. In the 
calculations, the threshold value is set to 3 FP. 
E. Planning and Production Tracking 
After estimating the cost of each request, planning ex-
perts decide on the deadline of the request, taking account of 
the characteristic of the request, source and integration sta-
tus. Planned development time and the number of develop-
ers that are going to be assigned to the request are calculated 
according 
to 
the 
basic 
Constructive 
Cost 
Model 
(COCOMO) equations given in (7) and (8) [20]. In order to 
use these equations, reference values for planned develop-
ment time and number of developers are calculated via (6) 
instead of (5). For this reason, instead of using code line of 
count parameter and COCOMO coefficients in (6), calculat-
ed effort value of product line is used and classical 
COCOMO equation is adapted to the (6) for our system. 
Since (5) is not being used directly, it does not have an ef-
fect on our productivity rates. cb and db values are decided 
according to Boehm’s semi-detached software project 
standards as stated in (7). 
 

b
b
ab KLOC
E
)
(

abbb

DM
CFP
E 


b
d
D  cbE
cbdb

D
E
P 


where E is the effort applied (person-months), KLOC is the 
estimated number of delivered lines of code for the project, 
ab, bb, cb and db are COCOMO coefficients, CFP is the cost 
in FP, D is the development time in months, DM is the av-
erage work day count in a month (20 work days) and P is 
the count of required people. 
 
TABLE IV. PRODUCTION LINE STATUS OF CORE BANKING UNIT. 
 
 
In order to obtain production line status data as show in 
Table IV, costs of requests are distributed among the request 
states. The production line status data enables us to track the 
current intensity of work load on each group and also to 
foresee the upcoming intensity of work load status of each 
group as well. By monitoring the product line data as shown 
in Table V, planned and completed work follow-up can be 
carried out. Using the statistical data gathered, resource 
planning and productivity performance analysis for each 
software module & team can be successfully accomplished. 
By taking goals and productivity coefficients into account, 
pre-detection actions for restructuring the problematic soft-
ware modules can be put into practice in the future.  
F. Cost and Planning Process Observations 
In order to count functional size of any request, func-
tional requirements are needed. In the beginning of the tran-
sition phase, it was hard to complete the cost estimation 
process because of lacking required information regarding 
the request requirement specifications. Therefore, to deter-
mine functional and non-functional requirements for esti-
mating approximate costs for requests, meetings with the 
participation of module owners and FP practitioners are 
being held. 
After calculating approximate costs of the requests, the 
requests are planned by putting them on the production line 
using available resources. Then as shown in Figure 4 and 5, 
analysis, high level design, and design steps are performed 
before the requests reach the final cost estimation step. On 
this step, final cost is reckoned using the analysis and design 
documents. Once the final cost estimation is complete and 
approved by PO, software development efforts may begin 
using the available resources.  
 
206
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
TABLE V. THE MAIN CONTRACTOR’S PRODUCTION LINE 
PLANNING AND PRODUCTION TRACKING. 
 
 
 
 
As can be seen in Table V, in the new cost system, FP 
calculations in the transition period are less than the other 
periods. Total FP for January 2013 is 1824 and more re-
quests are being loaded to the production line in the follow-
ing months. The reasons behind the weak performance in 
the transition period are technical problems, personnel re-
sistance fed from old habits and efforts spent for obtaining 
functional requirements. In the succeeding step of our pro-
cess enhancement, one to one negotiations for functional 
requirement inference, which is examined in the transition 
period, are left and a new document, namely preliminary 
requirement analysis document, is organized with the con-
tributions of business analysts and module owners in order 
to calculate true approximate cost. 
 
 
Figure 4. Software Production Process Pipeline Part 1. 
G. Scoping Meetings 
One of the ongoing improvement efforts is improving 
the efficiency of scoping meetings, which are performed at 
an intense pace. In order to perform more effective and 
more conscious monthly and quarterly plans, comprehensive 
requirement gathering activities are conducted for creation 
of a request pool, which consists of requests that have initial 
cost estimations. Project office, business unit, business ana-
lysts, module owners and production planning experts are 
participating in these activities. Utilizing the outcomes of 
the scoping meetings, due to assessing the situation of the 
production line from a wider perspective, long-term busi-
ness targets will be identified and prioritized. 
1) Observations: Difficulties in requirement gathering 
activities, especially requests that require integration of 
different modules, are noted and it is anticipated to cause 
inconveniences for accurate cost estimation efforts. 
However, in order to increase the efficiency of the software 
development efforts, we desire to minimize the participation 
of the relevant module’s software engineers in requirement 
gathering activities. However, considering the lack of 
technical background of the business analysts at the 
moment, software engineers are still important assets for the 
scope meetings. 
VI. 
FUTURE WORK 
Because of historical reasons, software engineers have 
led scoping and requirements gathering activities. This role 
actually belongs to business analysts and we need to train 
them to increase their competence in business architecture. 
Accordingly, business analysts will contribute more in the 
scoping and requirements gathering meetings, so this affects 
efficiency of the Software Production Line, since software 
engineers will involve less in these meetings and activities, 
and focus only software development phase. Moreover, 
once problematic modules will be identified by observing 
productivity ratios, Product Improvement team will conduct 
necessary restructuring and re-factoring activities. 
 
 
Figure 5. Software Production Process Pipeline Part 2. 
When it comes to cost estimation process, it is under con-
tinuous quality control, which let us fine-tune of productivi-
ty calculations. Establishing Software Product Line will be 
much easier after measuring all metrics of software produc-
tion line, which is the next goal of the company. 
VII. 
CONCLUSION 
The main contractor and the main supplier have been 
capable of measuring several metrics related to the software 
production line via IFPUG functional size measurement 
207
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

 
 
method.  In the process of adaptation to the new system, a 
resistance fed from old habits is faced and new steps have 
been added to the production process to achieve the desired 
effect in requirement gathering activities.  
Within the scope of adaptation of function points to the 
production line, arrangements are made on existing request 
types, request sizes, and project types. In order to estimate 
total cost for different request types with different request 
sizes on various project types, process factor is defined and 
is used as shown in the Table III.  Simple COCOMO equa-
tions are adapted for FP and statistical data of the product 
line, hereby, are gathered. In consequence of available data, 
the condition of the production line can show the actual and 
planned works along with the accumulated workload on the 
business units. Making use of these indicators, production 
and resource planning can be made more efficiently and 
factors adversely affecting the process can be observed.  
Scoping meetings are made in requirement of detailed 
information to accurately estimate cost of a request and new 
methods for the solution are actively being searched. Annual 
software development goals can be determined by produc-
tivity calculations that are based on FP for each team. By 
utilizing productivity factors, modules that have low 
productivity performance are identified.  Once the identifi-
cation process is complete, the identified modules are tar-
geted for restructuring purposes to improve development 
productivity. 
 
 
REFERENCES 
[1] C. Jones, Applied software measurement: global analysis of 
productivity and quality. McGraw-Hill, 2008, ISBN 978-0-
07-150244-3. 
[2] M. Solla, A. Patel, C. Wills, “New metric for measuring 
programmer productivity,” Proc. IEEE Symp. Computers and 
Informatics, IEEE, 2011, pp. 177-182. 
[3] N. Ramasubbu , M. Cataldo , R. K. Balan , J. D. Herbsleb, 
“Configuring global software teams: a multi-company 
analysis of project productivity, quality, and profits,” 
Proceedings of the 33rd International Conference on Software 
Engineering, USA, May 21-28, 2011, pp. 261-270.  
[4] O. T. Pusatli, S. Misra, “Software Measurement Activities in 
Small and Medium Enterprises: an Empirical Assessment,” 
Acta Polytechnica Hungarica, 8 (5) , 2011, pp. 21-42. 
[5] J. S. Poulin, “The Economics of Software Product Lines,” 
International Journal of Applied Software Technology 3, 
1997, pp. 20–34. 
[6] P. Clements, J. McGregor, S. Cohen, The Structured Intuitive 
Model for Product Line Economics (SIMPLE) (CMU/SEI-
2005-TR-003). 
Pittsburgh, 
PA: 
Software 
Engineering 
Institute, Carnegie Mellon University, 2005. 
[7] S. B. Lamine, L. L. Jilani, H. H. B. Ghezala, “A Software 
Cost Estimation Model for a Product Line Engineering 
Approach: Supporting tool and UML Modeling,” 3rd ACIS 
Conf. on Software Engineering Research, Management and 
Applications, 2005, pp. 383-390. 
[8] J. P. Nóbrega, E. S. Almeida, S. R. L. Meira, “InCoME: 
Integrated Cost Model for Product Line Engineering,” 
Proceedings of the 2008 34th Euromicro Conference Software 
Engineering and Advanced Applications, 2008, pp. 27-34.  
[9] A. J. Nolan, S. Abrahão, “Dealing with Cost Estimation in 
Software Product Lines: Experiences and Future Directions,” 
SPLC'10 Proceedings of the 14th international conference on 
Software product lines, 2010, pp. 121-135. 
[10] N. I. Altintas, M. Surav, O. Keskin, and S. Cetin, “Aurora 
software product line,” 2nd National Software Engineering 
Conference, Ankara, Turkey, Sep. 2005. 
[11] N. I. Altintas, S. Cetin, A. H. Dogru, and H. Oguztuzun, 
“Modeling Product Line Software Assets Using Domain-
Specific Kits,” IEEE transactions on software engineering, 
vol. 38, Dec. 2012, pp. 1376-1402. 
[12] D. E. Nye, America's Assembly Line. MIT Press, 2013, ISBN 
978-0262018715. 
[13] P. R. Hill, Practical software project estimation: a toolkit for 
estimating software development effort and duration. 
McGraw-Hill, 2010, ISBN 978-0-07-171791-5. 
[14] A. 
J. 
Albrecht, 
“Measuring 
application 
development 
productivity,” IBM Application Development Symposium, 
OCT. 1979, pp. 83-92. 
[15] ISO/IEC 19761, 2003 COSMIC Method Measurement 
Manual v. 3.0.1. 
[16] ISO/IEC 29881, 2008 Information technology Software and 
systems engineering FiSMA 1.1 functional size measurement 
method. 
[17] ISO/IEC 20926, 2009 Software Engineering - IFPUG 4.3.1. 
Unadjusted FSM Method - Counting Practices Manual. 
[18] ISO/IEC 20968, 2002 Software Engineering - Mk II Function 
Point Analysis - Counting Practices Manual. 
[19] ISO/IEC 24570, 2005 Software Engineering - NESMA 
Functional Size Measurement Method v.2.1 - Definitions and 
counting guidelines for the application of Function Point 
Analysis. 
[20] Automated Function Points (AFP) Version 1.0 - Beta 1, 
ptc/2013-02-01. 
[21] The international function point users group: function point 
counting practices manual release 4.3.1., 2010, ISBN 978-0-
9753783-4-2. 
[22] Borland Conference. How to determine your application size 
using 
function 
points. 
[Online]. 
Available 
from 
http://conferences.embarcadero.com/article/32094. 
[23] P. Morris, “Mapping the rules for IFPUG and COSMIC-FFP 
function size method,” IFPUG Fall Conference, Scottsdale, 
Arizona, USA, 2003, pp. 299-319. 
[24] Common Software Measurement International Consortium. A 
Comparison of the Key Differences between the IFPUG and 
COSMIC Functional Size Measurement Methods. [Online]. 
Available from:  http://www.cosmicon.com/portal/public/ 
IFPUG_COSMIC_Key_Comparison.pdf. 
[25] B. W. Boehm, Software engineering economics. Englewood 
Cliffs, NJ:Prentice-Hall, 1981,  ISBN 0-13-822122-7. 
208
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

