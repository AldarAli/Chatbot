A Method of Generation of Scenarios using Differential Scenario
Eiji Shiota
Graduate School of Science and Engineering
Ritsumeikan University
Kusatsu, Shiga, Japan
e-mail: shiota@cs.ritsumei.ac.jp
Atsushi Ohnishi
Department of Computer Science
Ritsumeikan University
Kusatsu, Shiga, Japan
e-mail: ohnishi@cs.ritsumei.ac.jp
Abstract—In scenario-based requirements engineering, system
behaviours can be given by scenarios. First, we give a nor-
mal scenario of a system to be developed. Secondly, we can
retrieve scenarios of similar behavior with the given scenario
using differential information between the given scenario and a
retrieved scenario. Thirdly, we retrieve alternative scenarios and
exceptional scenarios of the retrieved scenario. Lastly, we can
generate alternative scenarios and exceptional scenarios of the
given scenario using the differential information. Our method will
be illustrated with examples. This paper describes (1) a language
for describing scenarios based on a simple case grammar of
actions, (2) introduction of the differential scenario, (3) method
and examples of scenario retrieval using the differential scenario
and (4) method and example of scenario generation using the
differential scenario. The effectiveness of the method is shown
through an experiment.
Keywords—scenario generation; scenario retrieval; differential
scnenario; scenario-based requirements engineering
I.
INTRODUCTION
Scenarios are important in software development [6], par-
ticularly in requirements engineering by providing concrete
system description [16], [18]. Especially, scenarios are useful
in deﬁning system behaviors by system developers and validat-
ing the requirements by customers. In scenario-based software
development, incorrect scenarios will have a negative impact
on the overall system development process. However, scenarios
are usually informal and it is difﬁcult to verify the correctness
of them. Errors in incorrect scenarios may include (1) vague
representations, (2) lack of necessary events, (3) extra events,
and (4) wrong sequence among events.
The authors have developed a scenario language named
SCEL (SCEnario Language) for describing scenarios in which
simple action traces are embellished to include typed frames
based on a simple case grammar of actions and for describing
the sequence among events[17], [19]. Since this language is
a controlled language, the vagueness of the scenario written
with SCEL language can be reduced. Furthermore, a scenario
with SCEL can be transformed into internal representation.
In the transformation, both the lack of cases and the illegal
usage of noun types can be detected, and concrete words will
be assigned to pronouns and omitted indispensable cases [14].
As a result, the scenario with SCEL can avoid the errors typed
1 previously mentioned.
Scenarios can be classiﬁed into (1) normal scenarios,
(2) alternative scenarios, and (3) exceptional scenarios. A
normal one represents the normal and typical behavior of
the target system, while an alternative one represents normal
but alternative behavior of the system and an exceptional
one represents abnormal behavior of the system. There are
many normal scenarios for a certain system. For example, a
normal scenario represents withdrawal of a banking system,
another normal scenario represents money deposit, another one
represents wire transfer, and so on. Each normal scenario has
several alternative scenarios and exceptional scenarios. In order
to grasp all behaviors of the system, not only normal scenarios,
but also alternative/ exceptional scenarios should be speciﬁed.
However, it is difﬁcult to hit upon alternative scenarios and
exceptional scenarios, whereas it is easy to think of normal
scenarios.
This paper focuses on automatic generation of alterna-
tive/exceptional scenarios from normal scenarios of a new soft-
ware system to be developed. We adopt the SCEL language for
writing scenarios, because the SCEL is a controlled language
and it is easy to analyze scenarios written with the SCEL.
The paper is organized as follows. The SEL language is
described in Section II. After that, differential scnario infor-
mation is presented in Section III. Section IV and V describes
scenario retrieval and scenario generation, respectively. Then
Section VI provides an experiment for evaluation our method.
Section VII discusses related researches and compares with
our work. Lastly, Section VIII arrives at a conclusion.
II.
SCENARIO LANGUAGE
A. Outline
The SCEL language has already been introduced [19]. In
this paper, a brief description of this language will be given
for convenience. A scenario can be regarded as a sequence
of events. Events are behaviors employed by users or the
system for accomplishing their goals. We assume that each
event has just one verb, and that each verb has its own case
structure [9]. The scenario language has been developed based
on this concept. Verbs and their own case structures depend
on problem domains, but the roles of cases are independent
of problem domains. The roles include agent, object, recip-
ient, instrument, source, etc. [9], [14]. Verbs and their case
structures are provided in a dictionary of verbs. If a scenario
describer needs to use a new verb, he can use it by adding the
verb and its case structure in the dictionary.
We adopt a requirements frame in which verbs and their
own case structures are speciﬁed. The requirements frame de-
pends on problem domains. Each action has its case structure,
and each event can be automatically transformed into internal
representation based on the frame. In the transformation,
concrete words will be assigned to pronouns and omitted
indispensable cases. With Requirements Frame, we can detect
both the lack of cases and the illegal usage of noun types [14].
We assume four kinds of time sequences among events: 1)
583
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

sequential, 2) selective, 3) iterative, and 4) parallel. Actually
most events are sequential events. Our scenario language
deﬁnes the semantic of verbs with their case structure. For
example, data ﬂow verb has source, goal, agent, and instrument
cases.
Suppose a scenario of purchasing a train ticket. One
scenario may consist of just one event of buying a train ticket.
Another scenario may consists of several events, such as 1)
informing date, destination, and the number of passengers,
class of cars, 2) retrieving train data base, 3) issuing a ticket,
4) charging ticket fee to a credit card, and so on. If the
abstract levels of scenarios are different, it is quite difﬁcult
to correctly compare and analyze events of scenarios. SCEL
language for writing scenarios solves this problem, because
SCEL provides a limited actions and their case structure as
described in Section 2-C, and scenarios with SCEL keep a
certain abstract level of actions.
[Title: Reservation of a hotel room]
[Viewpoints: user, reservation system]
1.A user enters his membership number and his name to the
reservation system.
2.The system validates the user with the membership number
and the name.
3.The user enters retrieval information to the system.
4.The system retrieves available hotels from the database using
the information.
5.The system shows available hotels to the user.
6.The user selects a hotel from the available hotels.
7. The system shows the room rate to the user.
8.The user enters the credit card number to the system.
9.The system asks the status of the card to a credit card
company using the card number.
10.The system shows the reservation number to the user.
Fig. 1.
Scenario example.
B. Scenario example
Fig. 1 shows a scenario of reservation of a hotel room
written with our scenario language, SCEL. A title of the
scenario is given at the ﬁrst line of the scenario in Fig. 1.
Viewpoints of the scenario are speciﬁed at the second line.
In this paper, viewpoints mean active objects such as human,
system appearing in the scenario. There exist two viewpoints,
namely “user” and “reservation system.” The order of the
speciﬁed viewpoints means the priority of the viewpoints. In
this example, the ﬁrst prior object is “user,” and the second is
“reservation system.” In such a case, the prior object becomes
a subject of an event.
In this scenario, all of the events are sequential. Actually,
event number is for reader’s convenience and not necessary.
C. Analysis of events
Each event is automatically transformed into internal rep-
resentation. For example, the 1st event “A user enters his
membership number and his name to the reservation system”
can be transformed into internal representation shown in Table
I. In this event, the verb “enter” corresponds to the concept
“data ﬂow.” The data ﬂow concept has its own case structure
with four cases, namely to say, source case, goal case, object
case and instrument case. Sender corresponds to the source
TABLE I.
INTERNAL REPRESENTATION OF THE 1ST EVENT.
Concept: Data Flow
source
goal
object
instrument
user
reservation
membership
*NOT
system
number and name
speciﬁed*
case and receiver corresponds to the goal case. Data transferred
from source case to goal case corresponds to the object case.
Device for sending data corresponds to the instrument case. In
this event, “membership number and name” correspond to the
object case and “user” corresponds to the source case.
The internal representation is independent of surface rep-
resentation of the event. Suppose other representations of the
event, “the reservation system receives user’s membership
number and his name from a user” and “User’s membership
number and his name are sent to the reservation system by a
user.” These events are syntactically different but semantically
same as the 1st event. These two events can be automatically
transformed into the same internal representations as shown in
Table I.
III.
DIFFERENTIAL SCENARIOS
Systems that are designed for a similar purpose (e.g.
reservation, shopping, authentication, etc) often have similar
behaviors. Besides, if such systems belong to the same domain,
actors and data resemble each other. In other words, normal
scenarios of a similar purpose belonging to the same domain
resemble each other. Since our scenario language provides
limited vocabulary and limited grammar, the abstraction level
of any scenarios becomes almost the same.
For one system, there exist several normal scenarios. In
the case of ticket reservation, reservation can be written as a
normal scenario and cancellation can be written as another
normal scenario. For a certain normal scenario, there are
several exceptional scenarios and alternative scenarios. To
make a differential scenario, we select two normal scenarios
of two different systems. Each of the two scenarios should
represent almost the same purpose, such as reservation of some
item.
The differential scenario consists of (1) a list of not
corresponding words, (2) a list of not corresponding events,
that is, deleted events which appear in one scenario (say,
scenario A) and do not appear in the other (say, scenario B) and
added events which do not appear in scenario A and appear in
scenario B. We also provide (3) a list of corresponding words
and (4) a list of corresponding events, and (5) a script to apply
the above differential information for generating scenarios.
We generally assume that one to one correspondence
between two nouns and one to one correspondence between
two events. Fig. 2 shows a scenario of reservation of meeting
room for residents in a city.
We compare the scenario of Fig. 1 with the scenario of
Fig. 2 from top to bottom. First, we check the actors speciﬁed
as viewpoints of the two scenarios. In the case of scenarios of
Fig. 1 and 2, “user” in Fig. 1 corresponds to “citizen” in Fig.
2 and “reservation system” in Fig. 1 corresponds to “system”
in Fig. 2. The correspondence should be conﬁrmed by user.
Second, we check the action concepts of events. If there
exist events whose action concept appears once in scenario
A and B, respectively, we assume that these two events are
584
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

[Title: Reservation of a meeting room]
[Viewpoints: citizen, system]
1.A citizen enters reservation information to the system.
2. The system retrieves available room from the database using
the information.
3.The system shows an available room to the citizen.
4. The citizen enters his name and telephone number to the
system.
5.The system validates the citizen with the name and the
telephone number.
6.The system shows the room rate to the citizen.
7.The citizen pays the rate to the system.
8.The system issues a receipt to the citizen.
9.The system shows the room number to the citizen.
Fig. 2.
Normal scenario of reservation of a meeting room
TABLE II.
THE INTERNAL REPRESENTATION OF THE FIRST FOUR
EVENTS OF THE SCENARIO IN FIG. 1.
concept
agent/
goal
object
source
data ﬂow
user
reservation
membership
system
number and name
validate
system
user
membership
number and name
data ﬂow
user
reservation
retrieval
system
information
retrieve
system
available hotels
database
probably corresponding to each other. For example, the concept
of the 2nd event in Fig. 1 and the concept of the 5th event
in Fig. 2 are “validate” and there are no more events whose
concepts are “validate,” so we regard these two events are
probably corresponding to each other. Then we provide these
two events to a user and the user will conﬁrm that these two
events are corresponding to each other by checking whether
nouns of the same cases are corresponding or not.
If there exists an event whose action concept appears once
in scenario A, but there exists two or more events of the action
concept in scenario B, then we regard that one of the events of
the concept in scenario B corresponds to the event in scenario
A. So, we provide these events to system user and the user
will check the corresponding events.
If there are two or more events whose concepts are same
in two scenarios respectively, these events are candidates of
corresponding events. Then we check that nouns of the same
cases are corresponding to. Next we provide candidates to the
user and he will select the corresponding event.
The ﬁrst four events of the scenario in Fig. 1 can be
transformed as shown in Table II. The internal representations
of the ﬁrst ﬁve events of the scenario in Fig. 2 are shown in
Table III. In fact, the data ﬂow concept has four cases, that is,
source, goal, object, and instrument cases as shown in Table
I, but the instrument cases are omitted in Table II and III for
the space limitation.
For the 2nd event in Table II and the 5th event in Table
III as shown with italic font, since the nouns of the cases of
the two events are same or corresponding to each other, these
two events are corresponding to each other. At this time we
get “membership number and name” correspond to “name and
telephone number.” So, the 1st event in Fig. 1 corresponds to
the 4th event in Fig. 2, because concepts are same and all of
TABLE III.
THE INTERNAL REPRESENTATION OF THE FIRST FIVE
EVENTS OF THE SCENARIO IN FIG. 2.
concept
agent/
goal
object
source
data ﬂow
citizen
system
reservation
information
retrieve
system
available room
database
data ﬂow
system
citizen
available rooms
data ﬂow
citizen
system
name and
telephone number
validate
system
citizen
name and
telephone number
TABLE IV.
A LIST OF CORRESPONDING WORDS BETWEEN SCENARIO
A AND SCENARIO B.
Nouns in scenario A
Nouns in scenario B
user
citizen
reservation system
system
membership number and name
name and telephone number
available hotels
available room
retrieval information
reservation information
reservation number
room number
hotel room
meeting room
hotels
room
the nouns of corresponding cases are corresponding to each
other.
Similarly we detect corresponding events and correspond-
ing nouns. Table IV shows a list of corresponding nouns. Fig.
3 shows corresponding events of the two scenarios. In Fig. 3,
two events connected by an arrow are corresponding to each
other. Events without an arrow have no corresponding events.
The successive corresponding events are grouped into an event
block. The ﬁrst two events in Fig. 1 are grouped into a block
named a1. The block a1 corresponds to a block named b2
consisting of the 4th and the 5th events in Fig. 2.
Finally, we can get the differential scenario between hotel
reservation and meeting room reservation shown in Table IV,
V, and VI and Fig. 3.
TABLE V.
DELETED EVENTS FROM PERSPECTIVE SCENARIO A/
ADDED EVENTS FROM PERSPECT IVE SCENARIO B.
concept
agent/
goal
object
source
select
user
hotel
available hotels
data ﬂow
user
system
credit card number
data ﬂow
system
credit card
credit card number
company
Fig. 3.
Corresponding events.
585
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

TABLE VI.
ADDED EVENTS FROM PERSPECTIVE SCENARIO A/
DELETED EVENTS FROM PERSPECTIVE SCENARIO B.
concept
agent/
goal
object
source
pay
citizen
system
room rate
data ﬂow
system
citizen
receipt
1) change positions of block a1 and a2
2) delete events in Table V
3) insert events in Table VI followed by a4
4) change the corresponding nouns in Table IV
Fig. 4.
Script applied to alternative/exceptional scenarios of scenario A.
IV.
SCENARIO RETRIEVAL USING DIFFERENTIAL
SCENARIO
In scenario-based software development, several scenarios
should be speciﬁed. Since such scenarios may be revised, there
exist a lot of scenarios of different revisions. When a scenario
is given, it may be difﬁcult to ﬁnd similar scenarios or related
scenarios to the given scenario by hand. We propose a retrieval
method in order to get similar scenarios or related scenarios
using the similar information of scenarios.
We assume that scenarios are analyzed based on the
requirements frame in advance. As previously mentioned in
Section 2, the requirements frame strongly depends on the
problem domain. So, if case structures of verbs are different
between two scenarios, we consider that these two scenarios
are belonging to different domains each other. If all of the case
structures are same, these scenarios can be classiﬁed into the
same domain.
We propose two factors of the similarity between scenarios.
One is related to same system. For example, a banking system
provides several functions, withdrawal, deposit, loan, opening
account, and so on. These functions are different each other,
but both active objects, such as customer, bank clerk, ATM,
banking system and inactive objects, such as bank card, cash,
account in common appear in scenarios specifying behaviors
of these functions of the banking system. The other factor is
related to same or similar behavior. For example, behavior of
train seat reservation and that of ﬂight reservation are similar
each other, although these systems are different.
A. Similarity of scenarios by system
If same nouns are used in scenarios, these scenarios prob-
ably specify behaviors of the same system. For example, “cus-
tomer,” “e-library system,” and “librarian” appear in different
scenarios, these scenarios can be regarded as scenarios of the
same system. On the basis of the above discussion, we give
an equation in order to measure the similarity of system of
scenarios as below.
Similarity of system between two scenarios =
the number of same nouns in events of the two scenarios
the total number of nouns in events of the two scenarios
(1)
As for scenarions in Fig.1 and 2, nouns in the events of
these scenarios are shown in Table VII.
The total number of the nouns is 19 and the same nouns
are “database”, “name” and “room rate.” So the similarity of
TABLE VII.
NOUNS IN THE EVENTS OF FIG.1 AND FIG.2
Scenario
nouns
Fig.1
available hotels(hotel), credit card company, credit card number
(card number), database, membership number, name, retrieval
information(information), reservation number, reservation system
(system), room rate, status of the card, user
Fig2
available room, citizen, database, name, receipt, reservation information
(information), room number, room rate(rate), system, telephone number
system between these two scenarios becomes
3
19.
B. Similarity of scenarios by behavior
If scenario titles have a same verb, these scenario probably
specify similar behaviors. For example, a scenario whose title
is “a customer reserves a train seat” and another scenario
whose title is “a user reserves a ﬂight ticket” can be classiﬁed
into similar scenarios from a behavioral viewpoint. However,
a scenario whose title is “a customer purchases a train ticket”
can be classiﬁed into similar scenarios with above ones. So,
we think that scenarios are similar if titles of the scenarios
have same verb, but this is not necessary.
Sequence of events in a scenario represents behaviors of
users and system. If systems are different each other, nouns
in events become different, even if events specify similar
behaviors. So, we use corresponding events in the differential
scenario. If two scenarios are similar each other from the view-
point of behavior, the ratio of corresponding events becomes
high.
On the basis of the above discussions, we give the second
equation in order to measure the similarity of behaviors of
scenarios as shown in below.
Similarity of behavior between the two scenarios =
the number of corresponding events
the total number of events of the two scenarios
(2)
As shown in Fig.3, the total number of events is 10+9−7 =
12 and the number of the same events is 7. So, the similarity
of behavior between scenariosn of Fig.1 and 2 is
7
12 = 0.58
We consider that two scenarios whose similarity of behavior
is greater than 0.5 are scenarios of similar behaviors.
In order to apply the differential information to another
scenario of reservation of a hotel room, we also provide a
script for application script shown in Fig. 4. Even if there
exists a delete command in a script, event blocks will not be
deleted when any event blocks in an applied scenario do not
match with event blocks in the script. Even if there exists
an insertion command in the script, event blocks will not be
inserted when the following event block and the followed event
block are missing in the applied scenario.
Fig. 5 shows the outline of the retrieval method of scenarios
using the similar information of scenarios. We have been
developing a prototype system based on the proposed method
with C#.
C. Experiment
To evaluate our method, we compare the classiﬁcation of
scenarios by hands with the retrieval result by the method.
Thirteen graduate students of CS department who well know
both the scenario language and the problem domain classify
nine scenarios for a standard scenario, while the same sce-
narios are also retrieved and classiﬁed based on the proposed
586
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

1 
Scenario 
Database 
Generator of   
Differential Scenario 
user 
Scenario 
Retriever 
Scenario A  
Retrieval result of similar 
Scenarios  
Differential scenarios between 
Scenario A and scenarios in DB 
(Not/) corresponding 
words, corresponding 
events, added/deleted 
events, script 
Fig. 5.
Outline of Scenario Retrieval.
TABLE VIII.
SCENARIO CLASSIFICATION BY THE PROPOSED METHOD
AND BY STUDENTS.
Scenario
Classiﬁcation by method
Ratio of
same result
Train ticket reservation
Different system, similar behavior
11/13
Flight ticket changing 1
Same system, different behavior
11/13
Flight ticket changing 2
Same system, different behavior
11/13
Train ticket reservation
Different system, similar behavior
11/13
Flight ticket reservation
Same system, similar behavior
13/13
(Alternative scenario)
Bus ticket reservation
Different system, similar behavior
10/13
Claim for the loss
Different system, different behavior
13/13
on insurance
Purchasing something
Different system, different behavior
12/13
method. A normal scenario of reservation of ﬂight ticket was
adopted as a standard scenario in this experiment. Table VIII
shows the comparison of the scenario classiﬁcations.
In this experiment, nine scenarios are classiﬁed. The values
of the column “Ratio of same result” mean the ratio of same
classiﬁcation between by our proposed method and by stu-
dents. We investigated the reason why some students wrongly
classiﬁed and found that they did not recognize the difference
of systems correctly. After giving additional explanation of
systems, the students adopted same classiﬁcation of scenarios
as classiﬁed by the proposed method. Through the experiment
we conﬁrm that our method can correctly classify scenarios
for a given scenario and can retrieve similar scenarios with
system/behavior.
V.
SCENARIO GENERATION USING DIFFERENTIAL
SCENARIO
Once the differential scenario between system A and B is
given, we can apply it to another scenario of system A and
get a new scenario of system B by changing corresponding
words and by deleting or adding not-corresponding events. In
this section, we apply the differential scenario described in the
previous chapter to an alternative scenario of hotel reservation
and get an alternative scenario of meeting room reservation
[12].
A.
Examples of generation
Fig. 6 shows an alternative scenario of hotel reservation.
In this scenario, an aged user reserves a hotel room with a
discount rate. By applying the differential scenario in Table
IV, V, VI and Fig. 3 using the application script in Fig. 4,
we can get a new alternative scenario of reservation of a
[Title: Reservation of a hotel room for aged users]
[Viewpoints: user, system]
1.A user enters his membership number and his name to the system.
2.The system validates the user with the membership number and the
name.
3.The user enters retrieval information to the system.
4.The system retrieves available hotels from the database using the
information.
5.The system shows available hotels to the user.
6.The user selects a hotel from the available hotels.
7.The system retrieves the date of birth of the user from the database
using the membership number and the name.
8.The system checks the age of the user.
9.The system calculates the discount rate of the room for aged users.
10.The system shows the room rate to the user.
11.The user enters the credit card number to the system.
12.The system asks the status of the card to a credit card company
using the card number.
13. The system shows the reservation number to the user.
Fig. 6.
An alternative scenario.
[Title: Reservation of a meeting room for aged citizen]
[Viewpoints: citizen, reservation system]
1.The citizen enters reservation information to the system.
2.The system retrieves available room from the database using the
information.
3.The system shows available room to the citizen.
4. The citizen enters his name and telephone number to the system.
5.The system validates the citizen with the name and the telephone
number.
6.The system retrieves the date of birth of the citizen from the database
using the name and the phone number.
7.The system checks the age of the citizen.
8.The system calculates the discount rate of the room for aged citizen.
9.The system shows the room rate to the citizen.
10.The citizen pays the rate to the system.
11.The system issues a receipt to the citizen.
12.The system shows the room number to the citizen.
Fig. 7.
A generated new alternative scenario.
meeting room for aged citizen as shown in Fig. 7. Lastly, the
generated scenario is investigated by the user. He can modify
the generated scenario to eliminate errors.
B. Scenario generator using differential scenarios
Fig. 8 shows the outline of the generation of scenarios using
differential scenarios. We have been developing a prototype
system based on the method. This system has been developed
with C# on a Windows XP PC. The line of source code of
the system is about 6,000. This system is a 4.5 man-month
product.
This system mainly provides two functions. One is the
derivation of the differential scenario between given two sce-
narios. The other is the application of the differential scenario
to a speciﬁed scenario and the generation of a new scenario.
If a user selects the former function and he speciﬁes two
scenarios, such as a scenario of the reservation of a hotel
room and a scenario of the reservation of a meeting room,
then differential scenario between them is derived.
587
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

Fig. 8.
Outline of scenario generation.
Fig. 9.
Candidates of corresponding events.
Fig. 10.
Derivation of a differential scenario.
Fig. 11.
Blocked events of the left scenario.
Fig. 12.
Generated script.
Fig. 13.
Generated alternative scenario.
588
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

TABLE IX.
SUBJECTS’ ABILITIES OF SCENARIO ANALYSIS.
Time(min.)
# of errors
# of events
A1
17
3
16
A2
17
0
19
A3
15
3
19
A4
13
2
17
B1
20
1
19
B2
19
0
19
B3
20
0
19
B4
20
0
19
TABLE X.
SCENARIOS OF CD RENTAL SYSTEM.
id
title
the number of events
1
CD rental
19
2
CD rental failure by upper limitation
7
3
Return of CD
6
4
Retrun of CD with penalty
9
5
Retrieval of CDs
7
6
Registration of CDs
8
7
Registraion of a new member
16
8
Cancelation of a member
10
In Fig. 9, the user selects the corresponding event for the
1st event of the left-hand scenario. Two events are provided as
candidates of corresponding events (the 4th event and the 7th
event of the right-hand scenario). Since nouns with boldface
font of the events are not registered in the list of corresponding
words at that time, the user selects a corresponding event by
specifying the id number of the event.
In this case, the user speciﬁes the 4th event of the right-
hand scenario as a corresponding event of the 1st event of
the left-hand scenario by specifying the id number 3 in the
bottom and right-side of the window in Fig. 9. The system
automatically registers the correspondence between “member-
ship number and name” of the left-hand scenario and “name
and telephone number” of the right-hand scenario in the list
of corresponding words. Likewise corresponding words and
corresponding events will be determined and registered in the
lists, respectively.
In Fig. 10, a list of corresponding words and a list of
corresponding events are displayed in the right-hand side of
the window.
In Fig. 11, events of the left-hand scenario in Fig. 9
are blocked. There are 4 blocks numbered 0, 1, 2 and 3
respectively. Three events are not blocked and they do not
have any corresponding events.
In Fig. 12, an application script is displayed. By applying
this script to an exceptional/alternative scenario of the reser-
vation of a hotel room, an exceptional/alternative scenario of
the reservation of a meeting room will be derived as shown in
Fig. 13.
VI.
EXPERIMENT
In order to evaluate our method and system, we performed
an experiment. The purposes of the experiment are to conﬁrm
the following beneﬁts.
1) to lessen elaboration of writing scenarios
2) to make a scenario of high quality
A. Outline of the experiment
Eight students who are graduate students belonging to
software engineering laboratory, Ritsumeikan university are
divided into two groups of four subjects that named group
TABLE XI.
RESULT OF THE EXPERIMENT.
Scenario id
Group A
Group B
Time(min.)
errors
Time(min.)
errors
1
-
-
-
-
2
4
0
10
0
3
1
0
7
0
4
2
0
15
1
5
3
0
10
0
6
8
0
7
0
7
2
0
14
6
8
1
0
5
0
average except
3.0
0
9.7
1.0
for the scenario 1
A and B. Prior to the experiment, we explained scenario
language and the way of scenario writing for two hours. We
chose a rental system as problem domain. We also gave a job
description of a rental system to provide domain knowledge
to subjects.
Since the quality of generated scenarios depends on the
ability of scenario writing and scenario analysis of subjects,
we checked the ability of subjects prior to the experiment. We
gave a normal scenario of borrowing a book at a library and
asked to subjects to write a normal scenario of borrowing a CD
at a CD rental shop. The result is shown in Table IX. A1, A2,
A3, and A4 are members of group A, while B1, B2, B3, and
B4 are members of group B. It took 17.6 minutes on average
to write the scenario. The number of errors in a scenario of
Group A is 2 on average, while the number of errors in a
scenario of Group B is 0.5 on average. We conﬁrmed that
subjects’ abilities of scenario writing and scenario analysis are
different. The ability of Group A is less than that of Group
B. This fact means that the quality of scenarios of Group A is
usually less than that of Group B. We gave a correct scenario
of borrowing a CD to all the members and pointed out the
mistakes.
B. Generation vs. description of scenarios
We provided scenarios of a library system to the members
of the two groups. These scenarios consist of 5 normal
scenarios, and 2 exceptional scenarios. The member of group
A wrote a normal scenario of borrowing a book and gets a
differential scenario between scenario of borrowing a book and
a scenario of borrowing a CD. Then they get the scenarios of
CD rental system automatically generated using our proposed
method and system, while the members of group B wrote one
or two scenarios of the CD rental system by themselves using
corresponding scenarios of the library system. We checked
generated scenarios of group A and written scenarios of group
B by comparing correct scenarios with them.
Table X shows a list of scenarios of the CD rental system
prepared as correct scenarios by the authors. Scenario id
number 3, 5, 6, 7 and 8 are normal scenarios of the CD
rental system, while a scenario of no.2 and 4 are exceptional
scenarios.
Table XI shows the result of experiment. It took extra
3.0 minutes on average to generate differential scenario for
Group A. In using our method and system, scenarios are
automatically generated, but the subjects need to check the
generated scenarios. It took 3.0 minutes on average to check
the scenarios. In checking none of the subjects found any errors
in the generated scenarios. This means that our method and
system generates exactly correct scenarios. In order to write
589
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

scenarios by Group B, it took 9.7 minutes on average.
Actually, the ability of writing scenario of Group A is less
than that of Group B, but the quality of generated scenarios
by Group A is better than the quality of written scenarios by
Group B as shown in Table XI. Through the experiment, we
found that our method and system improve the correctness of
the scenario and lessen the writing time.
VII.
RELATED WORK
There is an obvious trend to deﬁne scenarios as textual
description of the designed system behaviors. The growing
number of practitioners demanding for more “informality” in
the requirements engineering process seems to conﬁrm this
trend. Most of these papers describe how to use scenarios for
the elicitation [15] or exploration [10] of requirements. The
authors believe that it is also important to support both the
generation and the classiﬁcation of scenarios.
Ben Achour proposed guidance for correcting scenarios,
based on a set of rules [1]. These rules aim at the clariﬁcation,
completion and conceptualization of scenarios, and help the
scenario author to improve the scenarios until an acceptable
level in terms of the scenario models. Ben Achour’s rules can
only check whether the scenarios are well written according
to the scenario models. We propose a method of generating
exceptional scenarios and alternative scenarios from a normal
scenario.
Neil Maiden et al. proposed classes of exceptions for use
cases [11]. These classes are generic exceptions, permutations
exceptions, permutation options, and problem exceptions. With
these classes, alternative courses are generated. For commu-
nication actions, 5 problem exceptions are prepared, that is,
human agents, machine agents, human-machine interactions,
human-human communication, and machine-machine commu-
nication. They proposed a method of generating alternative
paths for each normal sequence from exception types for
events and generic requirements with abnormal patterns [3],
[13], [15], [16]. Our approach for generating scenarios with a
differential scenario is independent of problem domains.
Daniel Amyot et al. derive a scenario from use case map
[2]. In order to generate several scenarios, they have to prepare
several use case maps, while we have to prepare just one
normal scenario with our approaches.
Christophe Damas et al. synthesize annotated behavior
models from scenarios. They generate a state transition model
from several scenarios and this model covers all scenario
examples [7], [8]. However, they cannot generate scenarios
of different systems, while our approach enables to generate
scenarios of different systems.
Yu-Chin Cheng et al. proposes a generation method of
attack scenarios [4]. Using attack patterns, attack state transi-
tion model, attack scenarios can be generated. Their approach
focuses on just attack scenarios via network, but we provide
a generation method of exceptional scenarios and alternative
scenarios.
Dave Clarke et al. propose abstract delta modeling method
to facilitate automated product derivation for software product
lines. However, it seems difﬁcult to give a correct delta model,
while our approach enables to produce a correct differential
scenario by giving two different scnarios.
VIII.
CONCLUSION AND FUTURE WORK
We have developed a frame base scenario language and
a method of generating differential scenario between two
scenarios. We have also developed a retrieval method of
similar scenarios with system/behavior for a given scenario
using the differential scenario and a generation method of
alternative/exceptional scenarios for a given scenario using the
differential scenario. The effectiveness of these two methods
are validated through an experiment.
In order to retrieve more efﬁciently similar scenarios with
differential scenario, using pre-conditions and post-conditions
just like the selection of rules applicable to verify the correct-
ness of scenarios [17] is left as our future work.
REFERENCES
[1]
C. B. Achour, “Guiding Scenario Authoring,” Proc. 8th European-
Japanese Conference on Information Modeling and Knowledge Bases,
1998, pp.181-200.
[2]
D. Amyot, D. Y. Cho, X. He, and Y. He, “Generating Scenarios from
Use Case Map Speciﬁcations,” Proc. 3rd QSIC, Dallas, USA, 2003,
pp.108-115.
[3]
I. Alexander and N. A. M. Maiden, Scenarios, Stories, Use Cases,
Through the Systems Development Life-Cycle, John Wiley & Sons,
Ltd., 2004, pp.161-177.
[4]
Y. C. Cheng, et al., “Generating Attack Scenarios with Causal Relation-
ship,” Proc. of IEEE International Conference on Granular Computing
(GRC2007), 2007, pp.368-373.
[5]
D. Clarke, M. Helvensteijn, and I. Schaefer, “Abstract delta modeling,”
Proc. 9th GPCE’10, 2010, pp.13-22.
[6]
A. Cockburn, Writing Effective Use Cases, Addison-Wesley, USA, 2001
[7]
C. Damas, B. Lambeau, P. Dupont, and A. Lamsweerde, “Generating
Annotated Behavior Models from End-User Scenarios,” IEEE Transac-
tions on SE, Volume 31, Issue 12, 2005, pp.1056-1073.
[8]
C. Damas, B. Lambeau, and A. Lamsweerde, “Scenarios, goals, and
state machines, a win-win partnership for model synthesis,” Foundations
of Software Engineering, Proc. 14th ACM SIGSOFT international
symposium on Foundations of Software Engineering, 2006, pp.197-207.
[9]
C. J. Fillmore, The Case for Case, in Universals in Linguistic Theory,
Holt, Rinehart and Winston, 1968.
[10]
J. C. S. P. Leite, et.al., “Enhancing a Requirements Baseline with
Scenarios,” Proc. 3rd RE, 1997, pp.44-53.
[11]
N. A. M. Maiden and M. Hare, “Problem Domain Categories in
Requirements Engineering,” International Journal of Human-Computer
Studies, 49, 1998, pp.281-304.
[12]
M.
Makino
and
A.
Ohnishi,
“Scenario
Generation
Using
Dif-
ferentail Acenario Information,” IEICE Trans. Information ans Systems,
Vol.E95-D, No.4, pp.1044-1051.
[13]
A. Mavin and N. A. M. Maiden, “Determining socio-technical systems
requirements, experiences with generating and walking through scenar-
ios,” Proc. 11th IEEE RE, 2003, pp.213-222.
[14]
A. Ohnishi, “Software Requirements Speciﬁcation Database on Re-
quirements Frame Model,” Proc. IEEE 2nd ICRE, 1996, pp.221-228.
[15]
A. G. Sutcliffe and M. Ryan, “Experience with SCRAM, a SCenario
Requirements Analysis Method,” Proc. 3rd ICRE, 1998, pp.164-171.
[16]
A. G. Sutcliffe, N. A. M. Maiden, S. Minocha, and D. Manuel,
“Supporting Scenario-Based Requirements Engineering,” IEEE Trans.
SE, Vol.24, No.12, 1998, pp.1072-1088.
[17]
T. Toyama and A. Ohnishi, “Rule-based Veriﬁcation of Scenarios with
Pre-conditions and Post-conditions,” Proc. 13th IEEE RE2005, 2005,
pp.319-328.
[18]
K. Weidenhaupt, K. Pohl, M. Jarke, and P. Haumer, “Scenarios in
System Development, Current Practice,” IEEE Software, March, 1998,
pp.34-45.
[19]
H. Zhang, A. Ohnishi, “Transformation between Scenarios from Dif-
ferent Viewpoints,” IEICE Trans. Information and Systems, Vol.E87-D,
No.4, 2004, pp.801-810.
590
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-304-9
ICSEA 2013 : The Eighth International Conference on Software Engineering Advances

