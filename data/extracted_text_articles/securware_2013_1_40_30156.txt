Implementation of Trust Metrics in
X.509 Public Key Infrastructure
Lucas Gonc¸alves Martins and Ricardo Felipe Cust´odio
Departamento de Inform´atica e Estat´ıstica
Universidade Federal de Santa Catarina
Santa Catarina, Brazil
Email: {lucasgm,custodio}@inf.ufsc.br
Abstract—The X.509 hierarchical public key infrastructure
model is used to distribute trust and to decentralize the re-
sponsibility of managing digital certiﬁcates among certiﬁcation
authorities. However, the trust indiscriminately ﬂows through
these certiﬁcation authorities, allowing any of them to issue
trusted certiﬁcates. Many works propose trust quantiﬁcation
and calculation as a solution for this problem, but most of
them apply their proposed methods in hypothetical public key
infrastructure networks. In this paper, we propose a plausible
implementation of quantiﬁcation and calculation of trust for the
X.509 public key infrastructure, specifying ASN.1 structures and
trust management procedures to initialize and update trust values
in this model’s relationships.
Keywords—PKI; Trust; Certiﬁcate; Metrics; Calculation; X.509;
ASN.1; Hierarchy.
I.
INTRODUCTION
Nowadays, the X.509 standards are the most used Public
Key Infrastructure (PKI) model. However, this model has been
subject of concern about its security and usability [1], [2].
Nevertheless, the usage of digital certiﬁcates, as a method for
identiﬁcation and authentication in the digital environment, has
been growing over the years. With this growth, there have
also been an increasing of attempts to obtain fraudulent digital
certiﬁcates to impersonate big companies on the Internet [3],
[4], [5].
Most of the attacks are done to Certiﬁcation Authorities
(CA) at the end of the PKI hierarchy, which usually use semi-
automatic on-line applications to manage their certiﬁcates.
The attackers use a combination of social engineering along
with the exploitation of these application ﬂaws to obtain
valid certiﬁcates. The only way to avoid the attacks is to
guarantee the security of the technology stack used by all
CA’s applications, and to take the human factor off from its
sensitive procedures; a virtually impossible task, considering
the number of trusted CAs (in the most popular repositories)
and the diversity of applications used by them. Since we cannot
guarantee the security of all CA applications, we need to
focus on the reason why certiﬁcation authorities are chosen
by hackers.
The X.509 PKI trust model follows a hierarchical structure
to distribute trust among PKI entities and decentralize the
responsibility of managing digital certiﬁcates. Also, if a node
of the hierarchy is compromised, only its adjacent nodes will
be compromised, too. This characteristic makes the attacks on
lower levels of the PKI less harmful to the whole PKI.
However, when a CA delegates a services to another CA, it
also gives its trust to that CA. The trustworthiness is transitive
in the X.509 PKI [6] and all certiﬁcates in the hierarchy have
the same trust value. As a result, all delegated CAs are as
trustworthy as the root CA, but most of them are not as secure
as it is. This allows an attacker to attack the entities at the
bottom of the hierarchy to obtain a certiﬁcate as trustworthy
as a certiﬁcate issued by the entity at the top of it. Burmester
[2] also wrote about this issue: “The problem with X509 is
that it cannot tolerate even one penetration: each node [in the
hierarchy] is a single point of failure.”
This ﬂaw leads to another, which allows the attacker to
proﬁt from the stolen certiﬁcate. The entities in a hierarchy
should be organized through a measurable organization crite-
ria, which deﬁnes in which level of the hierarchy the entity
should be placed. However, the X.509 hierarchy does not have
a well-deﬁned organization criteria, allowing any certiﬁcate
to be positioned below any CA, regardless of the importance
of the certiﬁcate owner. For example, when a certiﬁcate is
issued to identify a company, the company will be considered
inferior to the CA, which is not necessarily true. Thereby,
an attacker can attack a less important and, probably, more
insecure company (the CA) to jeopardize a bigger one.
Several works propose the usage of trust quantiﬁcation
and calculation as a solution for these problems. Through the
measurement of trust, it is possible for a certiﬁcate veriﬁer to
decide if the calculated trust level of a certiﬁcate is enough
for the context in which he is using it. However, most of
these works apply their method to hypothetical web PKIs.
In this paper, we propose a plausible implementation of trust
quantiﬁcation and calculation for X.509 PKI. We specify
ASN.1 structures to represent trust values, as well as trust
management procedures for the initialization and update of
these values. The model is speciﬁed to be independent of the
trust calculation method. However, we use Jøsang’s trust model
[7] to interpret the trust relationships, and use his quantiﬁcation
and calculation methods as an example of how to measure trust
in a PKI [8].
Through our proposal, we want to bring all the beneﬁts
of trust metrics to the X.509 PKI. With trust metrics we can
build a stronger PKI against attacks and introduce semantics in
the certiﬁcate veriﬁcation procedures, that may help end-users
to decide if he should trust in a speciﬁc digital certiﬁcate or
not. We also tried to make the trust metrics implementation
the less impacting possible to the X.509 standards, keeping it
compatible to the existent PKI-enabled applications.
19
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

The remainder of this paper is organized as follows. In
Section II, we present the related works found in our research.
In Section III, we present the Jøsang deﬁnitions of trust, as
well as his notations for trust networks and his method to
calculate trust. Also in this section, we specify a method of
interpreting a PKI as a trust network. In Section IV, we propose
the procedures to initialize and update the trust values in the
X.509 PKI. In Section V, we show how our method can be
used to solve the problems discussed in Section I. Finally, in
Section VI, we give our ﬁnal considerations and future works.
II.
RELATED WORK
In this section, we present the related works found in our
research. First, we give a brief overview about the studies
directly associated with trust models and the generic view of
trust. Then, we discuss PKI trust models and the application
of trust metrics to improve them.
A. Trust Concepts and Models
Trust modeling is a topic easily found in the literature.
Several works study the semantics of trust and its transitivity,
with a generic view about the subject [9]. Other works deﬁned
notations for the speciﬁcation of trust networks that can be
used to evaluate and measure trust [7][10][11][12][13]. Among
these studies we highlight the following.
Ruohomaa [9] presented the concepts of trust and its appli-
cations in computer science. She deﬁnes trust as the extent to
which one party is willing to participate in a given action with
a given partner, considering the risks and incentives involved.
She also discusses trust management life-cycle, which she
deﬁnes in three steps: determining initial trust, observing the
trustee’s actual behavior and updating trust accordingly. We
use this deﬁnition in our work to propose the trust management
in the X.509 PKI.
Jøsang [7][10] is an active researcher in the trust model
ﬁeld. He published several works about basic trust concepts,
proposed notations for trust network speciﬁcation and applied
subjective logic with belief calculus to measure trust in trust
networks. His notations and trust calculus are better explained
in Section III.
Trust metrics have a visible application in PKI models,
such that most of the work in this ﬁeld uses PKI as a practical
example for their proposals. However, they usually give a
superﬁcial view of the problem, and do not deﬁne real solutions
for a hierarchical PKI. In the next sections, we present the
studies of PKI trust models and the existent proposal that
applies trust metrics in PKI.
B. PKI Trust Models
The X.509 PKI is speciﬁed by several documents called
Request For Comments (RFC), which are maintained by the
Internet Engineering Task Force (IETF) [14]. The RFC 5280
- Internet X.509 Public Key Infrastructure Certiﬁcate and
Certiﬁcate Revocation List (CRL) Proﬁle - speciﬁes the data
structures of digital certiﬁcates and CRL, as well as the inter-
pretation of these structures and an algorithm for certiﬁcation
path validation [15]. We use these speciﬁcations to understand
the semantics of trust in X.509 and how the trust ﬂows through
the PKI entities.
There are several works in the literature that specify
different trust models for PKI [16][17][18][19]. However, most
of them address structural characteristics and procedures for
certiﬁcation path validation, with a superﬁcial approach to the
concepts and semantics of trust. As the proposal of this paper
does not change the X.509 structure, we focus on the works
that apply trust metrics in PKI [20][21][8][22].
Maurer [20] proposed in his work a deterministic PKI
model, based on recommendations and conﬁdence levels. This
model speciﬁes trust relationships as predicates of authenticity,
trust and recommendation. He also deﬁned inference rules
to be applied to an initial set of predicates, generating new
predicates of trust and authenticity (these inferences are similar
to certiﬁcation path validation that uses path size limitations).
Based on the deterministic model, he proposed a probabilistic
model, which uses probabilistic logic to measure the conﬁ-
dence of his predicates. Through these values, he calculates
the resultant trust of predicates generated by inferences.
Jøsang [8] uses his trust model to interpret public key
infrastructures and measure their trust relationships. He also
speciﬁes an algebra to calculate trust transitivity in the PKI,
which we discuss in Section V of this paper. Levien [22], by
contrast, addresses the efﬁciency of PKI trust models that use
trust metrics to resist to attacks. He proposes an attack model
to be used as a framework to calculate the index of attack-
resistance efﬁciency. He also demonstrates that the closest
attacks to the certiﬁcate veriﬁer have more chances of success.
III.
SPECIFYING TRUST NETWORKS
In this section, we present Jøsang’s [7][10] notation for
trust network speciﬁcation, and his proposed methods to mea-
sure trust and calculate its transitivity. We use these tools to
deﬁne a certiﬁcate interpretation method that allows us to build
a trust network based on PKI hierarchy.
Jøsang uses Gambetta’s deﬁnition of trust, which he calls
reliability trust. He represents the reliability trust as a tuple
(A, B, P, µ, τ), that can be interpreted as: A trusts B for the
purpose P with the measure value µ in the speciﬁc time τ. A
and B are principals, or nodes, in the trust network. P is the
purpose of the trust (e.g., “being a good mechanic”). The kind
of the measurement µ is arbitrary, and τ is any representation
of time. In our examples, we may use a simpliﬁed notation,
making µ and τ implicit, as in (A, B, P).
Deﬁnition 1 (Reliability Trust) “Trust is the sub-
jective probability by which an individual, A, expects
that another individual, B, performs a given action
on which its welfare depends [23].”
The purpose P can be categorized by preﬁxes in its
identiﬁer, as xyP. The category x identiﬁes if the trust is direct
(d) or indirect (i), while the category y identiﬁes if the trust
is functional (f) or for referral (r). A functional trust means
that A trusts in B for the purpose P (e.g., A trusts B to be
a good mechanic), while a referral trust means that A trust in
who B recommends for the purpose P (e.g., A trusts B to
recommend a good mechanic). The direct trust is used when
20
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

Recommendation
drP
dfP
Bob
Alice
ifP
Carol
Fig. 1.
Trust Network
A direct trusts B, and the indirect trust is used when A trusts
B because of a recommendation of an entity X that A trusts.
These modiﬁers generate four kinds of purpose: dfP, drP,
ifP and irP.
Figure 1 shows a graph that represents a simple trust
network. Considering the node Alice as A, Bob as B and
Carol as C, and using “:” as a transitive connection between
two consecutive trust edges of the graph, we can specify this
network as follow:
(A, C, ifP, µ1, τ1)
= (A, B, drP, µ2, τ2) : (B, C, dfP, µ3, τ3)
(1)
To calculate the measurement µ1 based on µ2 and µ3,
Jøsang proposed the usage of a belief metric called opinion,
explained below:
“Subjective logic represents a speciﬁc belief
calculus that uses a belief metric called opinion
to express beliefs. An opinion denoted by ωA
x
=
(bA
x , dA
x , uA
x , aA
x ) expresses the relying party A’s be-
lief in the truth of statement x. Here b, d, and u rep-
resent belief, disbelief and uncertainty, and relative
atomicity respectively where bA
x , dA
x , uA
x , aA
x ∈ [0, 1]
and the following equation holds:
bA
x + dA
x + uA
x = 1
(2)
The parameter aA
x reﬂects the size of the state space
from which the statement x is taken. In most cases
the state space is binary, in which case aA
x = 0.5”.
Assume that the values of µ2 and µ3 are ωA
B
=
(bA
B, dA
B, uA
B, aA
B) and ωB
x
= (bB
x , dB
x , uB
x , aB
x ), respectively.
We use the discount (⊗) operator, from subjective logic, to cal-
culate the transitive opinion ωA:B
x
= (bA:B
x
, dA:B
x
, uA:B
x
, aA:B
x
),
using the deﬁnitions below:
ωA
B ⊗ ωB
x = ωA:B
x
=















bA:B
x
= bA
BbB
x
dA:B
x
= bA
BdB
x
uA:B
x
= dA
B + uA
B + bA
BuB
x
aA:B
x
= aB
x
(3)
We also deﬁne the conjunction (∧) operator, from sub-
jective logic, to calculate the trust of an entity in two
different statements. Assume the following opinions ωA
x =
(bA
x , dA
x , uA
x , aA
x ) and ωA
y = (bA
y , dA
y , uA
y , aA
y ). To calculate the
resultant conjunction ωA
x ∧ωA
y , we use the following deﬁnition:
ωA
x ∧ωA
y = ωA
x∧y =















bA
x∧y = bA
x bA
y
dA
x∧y = dA
x + dA
y − dA
x dA
y
uA
x∧y = bA
x uA
y + uA
x bA
y + uA
x uA
y
aA
x∧y = aA
x aA
y
(4)
Now, we will demonstrate how to specify an X.509 PKI
in the Jøsang’s notation. We use the PKI represented by the
directed graph in Figure 2, as an example. We simplify a
certiﬁcate as a tuple C = (X, Y, k, p, s), where X is the
certiﬁcate issuer, Y the certiﬁcate subject, k a public key, p
a certiﬁcate policy, and s a signature done by X over these
data. To interpret the certiﬁcate as a trust relationship, we read
this tuple as follows: (a) X trusts that Y is responsible for the
public key k; (b) X trusts that Y follows the certiﬁcate policy
p; and (c) s proves the authenticity of X’s trust in (a) and (b).
Root 
CA
Bob
Alice
Carol
Dave
CA 1
CA 3
CA 2
Fig. 2.
X.509 PKI Hieararchy Example
Fig. 3.
Certiﬁcation Path’s Trust Network
We interpret (a) as a direct functional trust, speciﬁed as
(X, Y, dfP), where the purpose P is “being responsible for the
public key k”. The interpretation of (b) is more complicated.
We could interpret it as a functional trust with the purpose
of “following the certiﬁcate policy p”; however, it would be
different from the purpose in (i). As the purposes need to be
the same for the transitivity to be possible [7], we interpret
(ii) as follow: if X trusts that Y follows its certiﬁcate policy,
and Y is a certiﬁcation authority, X trusts that Y correctly
21
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

issues certiﬁcates. In other words, X trusts in the certiﬁcates
that Y recommends. This means that X has a direct referral
trust in Y , speciﬁed as (X, Y, drP), where the purpose P is
“recommend some entity as responsible for the public key k”.
To give an example of how to interpret a certiﬁcation path
as a trust network, we assume that Alice (A) wants to verify
the authenticity of Bob’s certiﬁcate (B), using the PKI in ﬁgure
2. Following the certiﬁcation path validation procedure [15],
we build the certiﬁcation path shown in table I, where the Root
CA is R, CA 1 is I and CA 3 is F.
TABLE I: CERTIFICATION PATH
CR
R
=
(R, R, kr, pr, sr)
CR
I
=
(R, I, ki, pi, sr)
CI
F
=
(I, F, kf, pf, si)
CF
B
=
(F, B, kb, pb, sf)
Alice’s trust in the Root CA has the same meaning of
the trust in a certiﬁcate, except for its signature (Alice does
not need proof of her trust relationships). So, we interpret
her trust in the root CA as (A, R, dfP) and (A, R, drP).
Interpreting the certiﬁcates in the certiﬁcation path, we build
the trust network illustrated in Figure 3. Following Jøsang’s
proposal [8], we calculate the resulting trust transitivity value
as shown bellow, the identiﬁer k being for functional trust and
the identiﬁer p for referral trust.
ωA:F
Bk
= (ωA
Rk ∧ωA
Rp)⊗(ωR
Ik ∧ωR
Ip)⊗(ωI
Fk ∧ωI
Fp)⊗ωF
Bk (5)
IV.
TRUST MANAGEMENT IN X.509
In this section, we demonstrate how to implement trust
quantiﬁcation and calculation in the X.509 PKI model. We
deﬁne ASN.1 structures that represent trust values, to be used in
the existent structures of the X.509 model. We also deﬁne three
kinds of trust in the X.509 PKI: authentication trust, policy
trust and PKI trust. For each of these, we describe procedures
that cover the life-cycle of trust management, deﬁned by
Ruohomaa: (i) determining initial trust; (ii) observing the
trustee’s actual behavior and; (iii) updating trust accordingly
[9]. The correct semantic interpretation of trust measures is
important because trust has a strong context-dependence, and
any misinterpretation can lead to a different sample space [11].
Trust ::= CHOICE {
opinon
Opinion}
Fig. 4.
ASN.1 Trust structure
Opinion ::= SEQUENCE {
belief
INTEGER (0..100),
disbelief
INTEGER (0..100),
uncertain
INTEGER (0..100)}
Fig. 5.
ASN.1 Opinion structure
To represent a generic type of trust measurement, we
deﬁne a Trust ASN.1 structure of type CHOICE, which is
composed by a set of trust measurement methods. We also
deﬁne another ASN.1 structure that represents the opinion
based trust measurement. This structure name is Opinion and
it is a SEQUENCE of INTEGER values, identiﬁed as belief,
disbelief and uncertain. Each of these values can be set in the
integer interval [0, 100], to represent the percentage of belief,
disbelief and uncertainty, from the belief calculus of subjective
logic. We show the ASN.1 speciﬁcation of these structures in
Figures 4 and 5.
A. Authenticity Trust
We call the direct functional trust authenticity trust, be-
cause it is formed when a certiﬁcation authority issues a
certiﬁcate, creating proofs for the bind between the certiﬁcate’s
subject and its public key. In other words, the CA trust in the
certiﬁcate authenticity. To deﬁne the initial trust in this kind of
trust relationship, we need to answer the following question:
How much does a CA need to believe in the bind between an
entity and its public key to issue a certiﬁcate for it?
Considering that the certiﬁcation authority is responsible
for the identiﬁcation and authentication of certiﬁcate appli-
cants, the value of CA’s trust over the bind is equivalent
to the trust over their own procedures. Therefore, in our
interpretation, the answer for the question is 100% belief,
because the CA can’t have doubts about their own procedure
(this scenario changes when the CA uses an RA, because the
CA have a direct referral trust on the RA). Hence, we use
binary value of trust, that in the opinion metrics is expressed
as (1.0, 0.0, 0.0) for all issued and not revoked certiﬁcates;
(0.0, 1.0, 0.0) for all revoked certiﬁcates; and (0.0, 0.0, 1.0)
for all expired and not issued certiﬁcates.
These quantiﬁcation rules do not change the already used
procedures for certiﬁcate issuance and revocation (initialization
and update), neither do they need new ASN.1 structures to
represent them. During the certiﬁcate validation, the values
are assumed according to the certiﬁcate status (valid, revoked,
expired). Moreover, these trust value constraints prevents an
attack over a ﬁnal certiﬁcation authority to create certiﬁcates
with differentiated values, which would give to the attacker
the power to manipulate the ﬁnal trust value of the certiﬁcate.
If the PKI wants to deﬁne different values for the authentic-
ity trust, it can use a certiﬁcate extension that includes a Trust
structure as an extension value. However, the CA also needs
to specify an update method for this kind of trust, which the
certiﬁcate owner needs to know how to use. In the next section,
we specify some methods for this purpose, however they are
speciﬁed for certiﬁcation authorities and may be complicated
for an end user to understand. So, we discourage its use in
end-user certiﬁcates.
B. Policy Trust
The policy trust refers to the direct referral trust relation-
ship that is formed when a CA issues a digital certiﬁcate for
another CA, trusting that the CA will follow its certiﬁcate
policies. This trust relationship is different from the authentic-
ity trust, because an entity needs to trust in another entity
behavior, which we interpret as expectation. Therefore, we
measure this kind of trust as follows: the trustor CA deﬁnes
a belief value, b, that the trustee CA will follow its certiﬁcate
policies. The disbelief value has to be zero, d = 0, as the
22
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

trustor CA should not issue a certiﬁcate if it has any belief that
the trustee CA will not follow the policies. Thus, if d = 0 and
b+d+u = 1, then u = 1−b, reﬂecting the uncertain value (not
disbelief) about the trustee CA following the policies. Thereby,
we deﬁne the policy trust values as: (b, 0, 1 − b).
The policy trust initialization happens when a certiﬁcation
authority issues a certiﬁcate for another CA. As the values may
be different for each CA certiﬁcate, the issuer CA needs to
use the proposed Trust ASN.1 structure to bind the trust value
to the issued certiﬁcate. As the value represents the trust in
the CA following a certiﬁcate policy, we extend the Qualiﬁer
ASN.1 structure, which is used to deﬁne a PolicyQualiﬁer for
a policy in the certiﬁcate policies extension, as deﬁned by the
RFC 5280 [15]. We include the Trust structure as a possible
Qualiﬁer choice, as shown in Figure 6. With this structure,
the issuer CA can deﬁne a trust value as a PolicyQualiﬁer of a
certiﬁcate policy in the certiﬁcate. Thereby, the CA may also
deﬁne different values for each of the policies followed by the
subject CA.
Qualifier ::= CHOICE {
cPSuri
CPSuri,
userNotice
UserNotice,
trustValue
Trust}
Fig. 6.
ASN.1 Qualiﬁer structure
Updating the policy trust is a big challenge. The initial trust
value is set in the certiﬁcate structure before being issued. As
the certiﬁcate is an immutable structure, the trust updates need
to be done in other ways. The ﬁrst and simpler way is through
a certiﬁcate revocation list (CRL). We could expand the CRL
usage to support policy trust updates. This way, it is possible to
recovery the newest trust values from the latest issued CRLs.
However, CRLs are considered one of the biggest problems in
the X.509 PKI, and encouraging the usage of CRLs for other
purposes, beyond certiﬁcate revocation, is not a good practice.
The second way to update the policy trust is through
recommendations. Recommendation is deﬁned in Maurer’s
work as a mechanism for a supposed entity X prove his trust-
worthiness in another entity Y . However, the recommendation
does not need to give proofs of Y ’s authenticity [20]. We can
represent this relationship in Jøsang’s model as a direct referral
trust: (X, Y, drP). We can implement a recommendation as
an attribute certiﬁcate that deﬁnes a PolicyInformation as an
attribute. The truster CA can issue attribute certiﬁcates for all
its trustee CAs, deﬁning a PolicyInformation attribute with a
Trust Qualiﬁer, to be used as a policy trust update. Thereby,
the trustee CAs become responsible for distributing, with its
certiﬁcates, its newest recommendations.
This brings us to the third way of policy trust update, the
time. With a decay function, we can reduce the trust value as
time passes. This calculation can be done during the certiﬁcate
path validation. This function may be useful to force the
certiﬁcation authorities to update and distribute their newest
recommendations, to ensure that their conﬁdence levels will
always be high.
C. PKI Trust
The last kind of trust is the PKI trust, which is formed
when an end-user trusts in a trust anchor. This kind of trust is
composed by the authenticity and policy trust, which follow
the same value rules deﬁned to these kinds of trust. However,
their management is different because the end-user does not
issue a certiﬁcate to the trust anchor. The deﬁnition of the trust
values need to be done through an out-of-bands method. To
discuss how to do this management, we consider two different
scenarios: in the ﬁrst, Alice, an end-user, relies in just one
trust anchor; and in the second, Alice relies in a set of trust
anchors.
In the ﬁrst scenario, any value deﬁned by Alice to her
relationship with the trust anchor will equally affect all cer-
tiﬁcates in the PKI. So the trust value of this relationship
does not create any evidence that can be used in Alice’s
decision-making. Therefore, we deﬁne the PKI trust value,
in this scenario, as (1, 0, 0), which represents the policy trust
of Alice on the trust anchor. This value does not reduce the
resultant value of the transitivity trust from the trust anchor to
the certiﬁcates below. As a ﬁxed value, Alice does not need
to manage it. In the certiﬁcation path validation, the value is
assumed when the trust anchor is deﬁned.
By contrast, in the second scenario, the values deﬁned by
Alice for each trust anchor will affect only the certiﬁcates
under the respective trust anchor. So, Alice might use these
different values to help in her decision-making. However, Alice
has to initialize and update her trust values for every trust
anchor that she trusts, what may be a hard task for a end-
user. But, as it is already done nowadays, a relying party can
be responsible for this management, setting and updating the
trust values in a certiﬁcate repository that Alice fully trusts.
V.
ANALYSIS
In this section, we present an example of using calculation
of trust in a X.509 PKI, following our proposed trust manage-
ment. All our calculations are based on the work of Jøsang
about trust algebra in PKI [8] and in the arbitrary values set
for the trust relationships in the PKI illustrated in Figure 2,
represented in Table II. Using the table values, we calculate
the trust value through the following formula (The calculations
were made with the calculator available at [24]:
ωA:F
Bk
= (ωA
Rk ∧ ωA
Rp) ⊗ (ωR
Ik ∧ ωR
Ip) ⊗ (ωI
Fk ∧ ωI
Fp) ⊗ ωF
Bk =
(0.81, 0.00, 0.19)
To evaluate the behavior of the trust calculation when a
certiﬁcate is revoked, we use the update values, ω′F
B e ω′I
F , with
value (0, 1, 0), that represents the Bob’s and CA-3’s certiﬁcate
revocation, respectively. the calculus is given below:
ωA:F
Bk
= (ωA
Rk ∧ ωA
Rp) ⊗ (ωR
Ik ∧ ωR
Ip) ⊗ (ωI
Fk ∧ ωI
Fp) ⊗ ω′F
Bk =
(0.00, 0.81, 0.19)
ωA:F
Bk
= (ωA
Rk ∧ ωA
Rp) ⊗ (ωR
Ik ∧ ωR
Ip) ⊗ (ω′I
Fk ∧ ωI
Fp) ⊗ ω′F
Bk =
(0.00, 0.00, 1.00)
As can be seen, when the CA 3 revokes Bob’s certiﬁcate,
the result value of belief in the trust transitivity calculation
changes to disbelief, while the value of uncertainty remains
the same. These values are correct, because we set a value
of uncertainty for CA 3, which may have incorrectly revoked
Bob’s certiﬁcate. The second scenario shows that when the CA
23
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

TABLE II: ARBITRARY POLICY TRUST VALUES
ωA
Rp = (1.00, 0.00, 0.00)
ωR
Ip = (0.90, 0.00, 0.10)
ωR
Op = (0.90, 0.00, 0.10)
ωI
Fp = (0.80, 0.00, 0.20)
3 has its certiﬁcate revoked by the CA 1, Bob has its belief
and disbelief values set at 0, while the value of uncertainty
is set at 1. As the CA 3 certiﬁcate’s authenticity is no longer
reliable, it is impossible to deﬁne which certiﬁcate is valid or
invalid, making it impossible for us to make any conclusion
about Bob’s certiﬁcate.
In our model, we can deﬁne an organizational criteria
for the PKI hierarchy, and use it to graduate the trust value
through its levels. We can see an example of this graduation
in the Table II. The Root CA has a belief value of one, its
subordinates CAs have a belief value of 0.9, and so on. With
this graduation of trust, we can establish an organizational
criteria. For example, ofﬂine CAs usually are more secure than
online CAs. So, ofﬂine CAs should appear on the tops levels
of the PKI hierarchy (with a higher belief value), while the
online CAs should be close to the bottom of the hierarchy
(with lower belief value).
Following this organizational criteria, we can give an
example of how the PKI can resist to an attack, using the
PKI Illustrated in Figure 2. Assume that the CA 3 is an online
CA, and the CA 2 is an ofﬂine one. Alice is an end-user that
accesses Carol’s web site that has a certiﬁcate issued by the
CA 2 (O). Using Levien’s [22] attack model, we can verify
how Alice will be protected if the CA 3 gets attacked.
Levien deﬁnes two attack types, which he calls edge attack
and node attack. In the edge attack the attacker can issue a
certiﬁcate (create an edge) from a speciﬁc node, while in the
node attack, the attacker can create any number of certiﬁcates
(edges) from the attacked node. However, in any of these
scenarios, if the attacked node is the CA 3, the attacker will
not be able to issue any certiﬁcate with a transitivity trust
value higher than (0.00, 0.81, 0.19), because the trust values
are deﬁned in the CAs certiﬁcates and the hierarchy does
not have multiple certiﬁcation paths for one certiﬁcate. Even
if the attacker issues several CA certiﬁcates with full trust
value under the CA 3, the resultant transitivity value will be
decreased to the value of (0.00, 0.81, 0.19), when it passes
through the CA 3’s certiﬁcate.
Assuming that Alice has already veriﬁed Carol’s certiﬁcate
before the attack over the CA 3 happened, she will know that
the certiﬁcate has a trust value of (0.93, 0.00, 0.07). So, if the
attacker uses a fraudulent certiﬁcate, in name of Carol, issued
by the CA 3, Alice will be able to identify that it is a fraudulent
certiﬁcate, because of its lower trust value. The only way for
the attacker to be successful, is attacking the CA 2. However,
it is a much harder task, considering that it is an ofﬂine CA.
ωA:O
Ck
= (ωA
Rk ∧ωA
Rp)⊗(ωR
Ok ∧ωR
Op)⊗ωO
Ck = (0.93, 0.00, 0.07)
If Alice does not know the trust value of Carol’s certiﬁcate
before the attack, she can establish a minimum value of trust
for the context in which she is using the certiﬁcate. For
example, if Alice is accessing an online bank, she can establish
a minimum belief value of 0.9, while if she is accessing a
university web site, she can establish a belief value of 0.8.
Through these acceptance values, we can use an adaptation of
Levien’s [22] attack model, to calculate the efﬁciency of the
PKI’s organization criteria to resist attacks.
Now, we analyse the efﬁciency of our model to resist
attacks compared to the classical X.509 model. For that, we use
a certiﬁcate sample retrieved from the last available snapshot
(March 2011) of SSL Observatory’s certiﬁcate database [25].
This database contains a large number of real certiﬁcates,
which are validated under Microsoft and Firefox trust anchor
repositories. Table III show the number of CAs and the number
and percentage of ﬁnal CAs (a ﬁnal CA only issues certiﬁcates
to end-users), for each hierarchy level of the PKIs in the
sample.
TABLE III: CA DISTRIBUTION
Level
Total
Final
Final/Total
First (root)
176
50
28.41%
Second
422
364
86.26%
Third
365
352
96.44%
Fourth
21
16
76.19%
Fifth
5
5
100%
Total
989
787
79.57%
To calculate the efﬁciency of a PKI to resist attacks, we
use an adaptation of Levien’s attack model. Levien considers
all PKI’s nodes (certiﬁcates) as eligible to attack. We only
consider ﬁnal CAs as eligible nodes, as this kind of CA usually
use online systems to issue certiﬁcates, which are preferable
targets for hackers. In this sample, we have 787 ﬁnal CAs,
which represents 79.57% of all CAs. In the conventional X.509
PKI model, the decision to trust or not in a certiﬁcate is
made when the certiﬁcate is validated by the certiﬁcation path
validation algorithm. As the certiﬁcates of our sample were
already validated, all 747 ﬁnal CAs can be a target to issue
certiﬁcates that will be trusted by an user that trust in Microsoft
and Firefox repositories.
To compare this result with our model, we need to deﬁne
trust values for the CAs in the sample. As we can not determine
which CA is more trustworthy than other, we assume that each
level has a trust value lower than the level above. Besides
this assignment being arbitrary, it can signiﬁcantly reduce the
number of eligible CAs. For example, to forge a certiﬁcate
with trust value equals to a certiﬁcate issued by a CA at the
second level, the attacker needs to successful attack a CA of
that level or above. It reduces the number of eligible CAs
to 414, representing a reduction of 47.39% compared to the
conventional X.509 PKI. However, as the X.509 PKI does not
have a real organization criteria, we cannot determine if a
certiﬁcate at upper levels of the hierarchy will be securer than
certiﬁcates at the bottom levels. A single compromised CA, at
the ﬁrst or second level, can jeopardize all the PKI, even with
trust metrics.
24
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

VI.
CONCLUSION AND FUTURE WORK
In this paper, we demonstrated how to use trust calculation
to solve the trust transitivity ﬂaw of the X.509 PKI. Thereby
giving end-users a new tool that helps in his decision-making,
allowing him to verify the trust level of a digital certiﬁcate
and identify possible frauds. As a result, attackers will be
discouraged from attacking certiﬁcation authorities with lower
trust level, by reducing the cost-beneﬁt of these attacks. Our
work differs from other works by focusing on the interpretation
of trust in the context of X.509 PKI, and by proposing
structures and procedures necessary to support the calculation
of trust, without jeopardizing its standards and maintaining the
compatibility with existing applications.
For future work, we have the studies about the organization
criteria that should be used to evaluate the trust level of PKI
entities. This criteria must ensure a greater security for the
PKI, which can be assessed through the Levien’s work [22].
We also need to analyse the behavior of our model when a
CA uses a registration authority and when the PKI uses cross
and bridge certiﬁcation to integrate other PKIs. In this case,
we can use all existing knowledge about the trust calculus in
web PKIs.
REFERENCES
[1]
C. Ellison and B. Schneier, “Ten risks of pki: What you’re not being
told about public key infrastructure,” Comput Secur J, vol. 16, no. 1,
pp. 1–7, 2000.
[2]
M. Burmester and Y. G. Desmedt, “Is hierarchical public-key certiﬁca-
tion the next target for hackers?” Communications of the ACM, vol. 47,
no. 8, pp. 68–74, 2004.
[3]
Comodo,
“Comodo
fraud
incident,”
2011,
retrieved:
June,
2013.
[Online].
Available:
http://www.comodo.com/
Comodo-Fraud-Incident-2011-03-23.html
[4]
Vasco, “Diginotar reports security incident,” 2011, retrieved: June,
2013. [Online]. Available: http://www.vasco.com/
[5]
J. Segura, “Digital certiﬁcates and malware: a dangerous mix,” 2013,
retrieved: June, 2013. [Online]. Available: http://blog.malwarebytes.org
[6]
L. H. Shenchangxiang, “Hierarchy-Distribution Combined PKI Trust
Model,” no. I 00044, pp. 121–124, 1996.
[7]
A. Jøsang and S. Pope, “Semantic constraints for trust transitivity,”
in Proceedings of the 2nd Asia-Paciﬁc conference on Conceptual
modelling-Volume 43.
Australian Computer Society, Inc., 2005, pp.
59–68.
[8]
A. Jøsang, “An algebra for assessing trust in certiﬁcation chains,” in
Proceedings of the Network and Distributed Systems Security Sympo-
sium (NDSS99). The Internet Society, 1999.
[9]
S. Ruohomaa and L. Kutvonen, “Trust management survey,” Trust
Management, pp. 77–92, 2005.
[10]
A. Jøsang, R. Ismail, and C. Boyd, “A survey of trust and reputation
systems for online service provision,” Decision support systems, vol. 43,
no. 2, pp. 618–644, 2007.
[11]
J. Huang and D. Nicol, “A formal-semantics-based calculus of trust,”
Internet Computing, IEEE, vol. 14, no. 5, pp. 38–46, 2010.
[12]
H. El Bakkali and B. Kaitouni, “A logic-based reasoning about
PKI trust model,” Proceedings. Sixth IEEE Symposium on Computers
and Communications, pp. 42–48, 2001. [Online]. Available: http:
//ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=935353
[13]
C.-N. Ziegler and G. Lausen, “Propagation models for trust and distrust
in social networks,” Information Systems Frontiers, vol. 7, no. 4, pp.
337–358, 2005.
[14]
IETF, “Public-key infrastructure (x.509) (pkix),” Internet Engineering
Task Force, 2013. [Online]. Available: http://datatracker.ietf.org/wg/
pkix/
[15]
D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and
W. Polk, “Internet X.509 Public Key Infrastructure Certiﬁcate and
Certiﬁcate Revocation List (CRL) Proﬁle,” RFC 5280 (Proposed
Standard), Internet Engineering Task Force, May 2008, retrieved: June,
2013. [Online]. Available: http://www.ietf.org/rfc/rfc5280.txt
[16]
R. Perlman, “An overview of pki trust models,” Network, IEEE, vol. 13,
no. 6, pp. 38–43, 1999.
[17]
J. Linn, “Trust models and management in public-key infrastructures,”
RSA Laboratories, vol. 12, 2000.
[18]
R. Housley and T. Polk, Planning for PKI: best practices guide for
deploying public key infrastructure.
John Wiley & Sons, Inc., 2001.
[19]
C. Adams and S. Lloyd, Understanding PKI: concepts, standards, and
deployment considerations.
Addison-Wesley Professional, 2003.
[20]
U. Maurer, “Modelling a public-key infrastructure,” in Computer Secu-
rityESORICS 96.
Springer, 1996, pp. 325–350.
[21]
J. Huang and D. Nicol, “A calculus of trust and its application to pki
and identity management,” in Proceedings of the 8th Symposium on
Identity and Trust on the Internet.
ACM, 2009, pp. 23–37.
[22]
R. Levien and A. Aiken, “Attack-resistant trust metrics for public key
certiﬁcation,” in 7th USENIX Security Symposium, 1998, pp. 229–242.
[23]
D. Gambetta, “Can we trust trust,” Trust: Making and breaking coop-
erative relations, vol. 2000, pp. 213–237, 2000.
[24]
S. H. Simon Pope and M. Davey, “Subjective Logic Operators Demo,”
University of Oslo, 2011, retrieved: June, 2013. [Online]. Available:
http://folk.uio.no/josang/sl/Op.html
[25]
EFF, “SSL Observatory,” Electronic Frontier Foundation, 2013, re-
trieved: June, 2013. [Online]. Available: https://www.eff.org/observatory
25
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-298-1
SECURWARE 2013 : The Seventh International Conference on Emerging Security Information, Systems and Technologies

