What Do Critical Success Factors of Collaboration Really Mean in the Context of 
DevOps? 
 
Michiel van Belzen, Jos Trienekens, Rob Kusters 
Faculty of Science 
Open University 
Heerlen, The Netherlands 
email: michiel.vanbelzen@ou.nl, jos.trienekens@ou.nl, rob.kusters@ou.nl 
 
 
Abstract—Collaboration is an important aspect of DevOps. 
However, researchers continue to report problems with 
collaboration between development and operations. Critical 
Success Factors (CSFs) may contribute to solve these 
problems. Prior research found CSFs of collaboration. Yet we 
did not find any comprehensive list of CSFs of collaboration 
grounded in DevOps practice by real-life examples making 
them meaningful in that context. Therefore, we aim to show 
that CSFs of collaboration found in other contexts are also 
recognized in a DevOps context and what previously validated 
generally applicable CSFs of collaboration really mean in a 
DevOps context. The research method comprises of a 
systematic literature review to find a comprehensive list of 
generally applicable CSFs of collaboration, a multiple case 
study to find on the one hand which of these CSFs were 
recognized in a DevOps context and on the other hand to find 
real-life examples, which substantiated the CSFs recognized. 
Finally, the aim is to develop a classification of the CSFs. Our 
main contribution to theory is a well-founded and structured 
list of CSFs meaningful for the DevOps profession. The list of 
CSFs can aid practitioners to have a necessarily impact on the 
success of collaboration.  
Keywords – adoption; classification; collaboration; critical 
success factors; DevOps. 
I. 
 INTRODUCTION 
DevOps is a compound of development and operations 
[1]. Adopting DevOps improves cycle times, software 
processes and quality [2].  
Collaboration is seen as an important aspect of DevOps. 
DevOps is considered as an interaction between development 
and operations [3] and a set of practices and mechanisms 
supporting their integration [4][5][6][7]. However, literature 
reports problems with collaboration between both. For 
example, Iden, Tessem, and Paivarinta [8] and Lwakatare, 
Kuvaja, and Oivo [9] found poor communication, Wettinger, 
Breitenbücher, Falkenthal, and Leymann [10] found cultural 
gaps, and Colomo-Palacios, Fernandes, Soto-Acosta, and 
Larrucea [2] and Nielsen, Winkler, and Norbjerg [11] found 
knowledge boundaries.  
Critical Success Factors (CSFs) may contribute to solve 
problems with collaboration between development and 
operations. However, to the best of our knowledge we did 
not find any comprehensive list of CSFs of collaboration in a 
DevOps context. Yet earlier research found CSFs of 
collaboration validated in other contexts. However, these 
CSFs can be improved in terms of specializing by context, 
comprehensiveness and timeliness. For example, Mattessich 
and Monsey [12] found nineteen factors influencing the 
success of collaboration and Kolfschoten, De Vreede, 
Briggs, and Sol [13] derived three factors in an attempt to 
define the concept of collaboration. As these CSFs are valid 
in different contexts, they may also be applicable in a 
DevOps context. For example, Lwakatare, Kuvaja, and Oivo 
[9] mentioned information sharing and skill sets and Erich, 
Amrit, and Daneva [3] reports culture and automation. 
Therefore, our research goal is to show that CSFs of 
collaboration found in other contexts are also recognized in a 
DevOps context. And we will also clarify what previously 
validated generally applicable CSFs of collaboration really 
mean in a DevOps context. Clarification of these CSFs by 
formulating them in terms of the DevOps profession is 
important as it makes CSFs meaningful in that context. 
Meaningful CSFs of collaboration can be addressed more 
easily 
leading 
to 
performance 
improvements 
in 
collaboration. Prior research present CSFs often in an 
abstract way and expressed in general terms. That makes 
these CSFs difficult to interpret, apply and measure in the 
context of DevOps.  
This research goal brings us to our research question: 
Which generally applicable CSFs of collaboration are 
recognized in the context of DevOps and how to make them 
meaningful in the context of DevOps? To answer the main 
research question, we divide it into the following three sub 
questions (SQs): (SQ1) What are generally applicable CSFs 
of collaboration? (SQ2) Which generally applicable CSFs of 
collaboration are recognized in the context of DevOps? SQ3: 
How to make the recognized generally applicable CSFs of 
collaboration meaningful in the context of DevOps? 
We will contribute to the existing literature by adding 
another research context, namely the context of DevOps. 
This is important, because literature has given little notice to 
different contexts of collaboration [14], such as the DevOps 
context. Second, CSFs vary in terms of abstraction and 
explanation as we will explain in Section 2. 
The outline of this article is as follows. In Section 2, we 
present previous research on CSFs of collaboration. 
Subsequently, in Section 3, we describe the research method. 
In Section 4, we present the results of the case study. In 
Section 5, we discuss the implications and limitations, and 
7
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

present suggestions for future research. Finally, we reflect on 
our research question and research goal in Section 6. 
II. 
THEORETICAL BACKGROUND 
Considering the research question, we explored related 
work to find a comprehensive list of CSFs of collaboration 
which can be used in a case study to verify whether generally 
applicable CSFs are recognized in a DevOps context. To 
support this, we used the definition of collaboration defined 
by [15] as “An evolving process whereby two or more social 
entities actively and reciprocally engage in joint activities 
aimed at achieving at least one shared goal”. In addition, we 
defined a CSF as a factor leading to successful outcome, 
which is in line with [12][16]. 
Although prior research views collaboration from 
different perspectives, reflection on CSFs found earlier is 
limited. In the early stages of research on collaboration in 
general, [12] reviews and summarizes existing research 
literature on CSFs which influence the success of 
collaboration. The researchers found nineteen CSFs of 
collaboration validated in health science and social science, 
and also in education and public affairs domains. In 2001 
these nineteen CSFs were confirmed and an additional CSF 
was added: “an appropriate pace of development” [17]. 
Reference [18] studied a partnership between two 
organizations 
and 
found 
the 
factors 
of 
successful 
collaboration to be: partnership attributes of commitment, 
coordination, trust, communication quality, participation, and 
the conflict resolution technique of a joint problem. 
Collaboration between team members was studied by [19]. 
They mentioned human-related factors, such as social ties 
and knowledge sharing as important for collaborative work. 
The authors report in particular the importance of rapport 
and transactive memory, and organizational mechanisms 
creating and maintaining social ties between distributed team 
members. Reference [13] conceived collaboration as a 
process and a system. According to [13], collaborative 
success depends on willingness of its participants, which 
makes it a complex activity. The authors explained that 
collaboration involves individuals working together to 
achieve a group goal. Reference [15] focused on a 
multidisciplinary 
conceptualization 
of 
collaboration. 
According to [15] effective collaboration needs coordination. 
This was confirmed by [20][21] who consider coordination 
and cooperation as the most important problems that must be 
solved when individuals from diverse backgrounds and 
different organizations have to collaborate. Reference [22] 
studied collaboration among supply chain partners and 
identified the CSFs trust, commitment, mutuality and 
reciprocity.  
Prior research not just identified CSFs but attempted to 
classify CSFs found as well. However, they classify CSFs 
differently based on various perspectives. For example, 
Mattessich and Monsey [12] classified the CSFs found into 
six groups: environment, membership, process/structure, 
communications, purpose and resources. Reference [15] 
applied an abstract classification and distinguished different 
characteristics. Reference [23] deduced the classification 
from their description of collaborative work. According to 
[23] aspects of collaborative work can be classified into 
seven main factor groups: context, support, tasks, interaction 
processes, teams, individuals and overarching factors. 
Finally, differences in grouping CSFs were also noticed by 
[14] who elaborated “Many studies have attempted to assess 
the CSFs for collaboration. In these studies, CSFs can be 
classified 
into 
CSFs 
influencing 
the 
likelihood 
of 
collaboration, CSFs influencing the performance of 
collaboration, and those influencing the collaboration type”. 
However, [14] does not explain how CSFs can be classified. 
Research on collaboration in a DevOps context has 
limitations as well. Prior research presents CSFs which are 
broad and not only focused on collaboration, and are limited 
in terms of comprehensiveness [24]. For example, 
Lwakatare, Kuvaja, and Oivo [9] mentioned information 
sharing and broadening of skill sets and relates them to the 
intended outcome, which is taking full responsibility for 
developing and operating an entire service. Reference [3] 
reports core parts of DevOps adoption, such as culture and a 
high degree of automation. According to the authors, 
organizations attempt to remove the cultural barrier between 
development and operations personnel and create a culture of 
empowerment. 
For 
example, 
by 
assigning 
more 
responsibilities to the DevOps team and giving team 
members the freedom to share what is on their mind. 
Reference [25] noticed in a study on DevOps maturity that 
the organization itself should be ready to execute work. They 
explain that DevOps team members should communicate, 
share knowledge, have trust and respect for each other, and 
align between internal and external dependencies to timely 
deploy software. 
Grounding CSFs in DevOps practice makes CSFs better 
useful in the context of DevOps. The CSFs found were 
grounded in practice containing terminology common in the 
professional field. For example, Lwakatare, Kuvaja, and 
Oivo [9] mentioned monitoring information to illustrate 
knowledge sharing and Erich, Amrit, and Daneva [3], who 
noted automating the software release process, which can be 
considered as a form of clear rules and procedures. 
Therefore, a comprehensive list of CSFs grounded in a 
DevOps practice is needed. 
In summary, research on CSFs of collaboration and 
research on collaboration in a DevOps context has 
limitations. In the first place, the lists found are limited build 
upon evolving literature of collaboration. Second, CSFs 
should be more generic in order to be useful in different 
contexts. Third, prior research has not resulted in a 
comprehensive list of CSFs grounded in DevOps practice. 
Therefore, a systematic literature review is needed first to 
find a more comprehensive and general list of CSFs, which 
can be made meaningful in the DevOps context. 
III. 
RESEARCH METHODOLOGY 
To obtain a comprehensive list of CSFs manageable and 
meaningful in a DevOps context, we followed three phases. 
The systematic literature review was the first phase in which 
we obtained a more comprehensive list of generally 
applicable CSFs. In the second phase a multiple case study 
was conducted to verify recognition of the CSFs found and 
8
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

to find corresponding real-life examples. The third phase 
concentrated on the classification of CSFs to develop a 
structured list of CSFs manageable and meaningful in a 
DevOps context. Classification was not possible until this 
phase because we need the real-life examples obtained in the 
second phase to infer what the CSFs recognized really mean 
in a DevOps context.  
A. Systematic literature review 
In order to pursue comprehensiveness, we conducted the 
systematic literature review in two steps applying two 
methods. In the first step, we conducted a literature review as 
described by [26] followed by snowballing in the second 
step. Access to digital library records was limited to the 
subscription of our institution. In the first step, we chose to 
search in the Web of Science digital library using two search 
strings. The first search string contained ‘collaboration’ in 
title and ‘success AND factor’ in all fields. As the second 
search string we used ‘collaboration AND factor’ in title. We 
started the search from 1992, the publication of [12]. The 
first search provided 205 papers and the second provided 210 
papers. We removed duplicates and undertook an initial 
screening, which resulted in 58 papers found. Next, we 
assessed the remaining papers to identify papers that could 
be rejected based on the full text on the basis that they did 
not include CSFs or barriers of collaboration or on the basis 
of quality issues. For example, irrelevant papers or papers 
that contain drivers that may trigger collaboration. We found 
44 papers, which included 374 CSFs. 
After that, we continued in the second step our search for 
CSFs by applying backward snowballing and forward 
snowballing on the 44 papers in which we found CSFs [27]. 
During snowballing, 4314 papers were found. We removed 
duplicates and papers based on title, abstract and full text on 
the basis that they did not include CSFs or barriers of 
collaboration. This resulted in 21 papers found, which 
contained 198 CSFs. As we found a lot of duplicate CSFs, 
we did not expect to find additional CSFs by conducting 
more iterations of snowballing. Therefore, we stopped after 
one iteration. Thus, we found 572 CSFs so far. 
In addition, we found 23 CSFs in the following six 
papers of which we were aware: [9][13][15][19][22][25]. 
This resulted in 595 CSFs found in total.  
Because we did not yet know which CSFs would be 
recognized and what the CSFs found would mean in a 
DevOps context, we were not able to classify them. 
However, to be able to discuss the 595 CSFs found in the 
consecutive case study we grouped them according to the 20 
factors found by the often-cited papers of [12][17], the ten 
additional factors found by [23] and the two additional 
factors (CSF 4 and CSF 11) found by [14][22][28]. We 
adopted the names of the CSFs from literature, and 
condensed the key findings and used them as clarifications. 
Thus, the results of the systematic literature review consist of 
a list of 32 generally applicable CSFs of collaboration.  
We published the list of 32 CSFs in [24]. An example 
from this list is the CSF “Concrete attainable goals and 
objectives” described by the following clarification “Setting 
of clear goals (at the planning stage) [23], supplementary 
purposes [14] and feasible [12], based on key community 
issues, agreed upon [13][28][29]”. 
 This list answers sub question SQ 1 and extended the 
CSFs found previously by Mattessich, Murray-Close, and 
Monsey [17]. However, prior research has limitations. For 
example, brief contextual information, limitations on 
definitions of CSFs and limitations on generalizability. 
Furthermore, we did not know whether these CSFs will be 
recognized in a DevOps context and whether there are more 
applicable CSFs. Therefore, we conducted a multiple case 
study. 
B. Multiple case study 
We consider a case study as a relevant method, because it 
addresses our research questions on collaboration which 
require to explain and describe this social phenomenon [30]. 
According to [23] collaboration can best be understood in 
terms of the context in which people are working and their 
interactions. Therefore, we decided to conduct a multiple 
case study and based the methodology on five steps proposed 
by [30]: (1) designing the case study, (2) preparing to collect 
evidence, (3) collecting evidence, (4) analyzing evidence, 
and (5) reporting results. 
In the first step, we designed the case study to assure the 
data to be collected relates to our research question [30]. To 
validate our list of CSFs in a DevOps context we used an 
inductive approach. We carry out cross-sectional semi-
structured interviews, which allowed us exploration of the 
CSFs and improvisation [31].  
In the second step, we prepared the collection of 
evidence. We choose to collect data in organizations which 
experienced DevOps for several years, because we needed 
real-life examples to substantiate the CSFs found. Thus, we 
contacted gatekeepers of organizations that appear to comply 
to our requirement regarding DevOps experience and explain 
our study. We found two governmental ISPs which wanted 
to participate in this study, which met our criterion and 
experienced DevOps for several years. Both organizations 
studied were professional and large organizations which 
exist for a long time. The gatekeepers had a central role with 
a good overview of DevOps developments in the 
organization for a number of years. 
We asked the gatekeepers for permission to interview 
employees who met our criteria of at least two years of 
practical and broad experience with DevOps to be able to 
mention and elaborate on examples.  
Together with the gatekeepers we selected interviewees 
who had a coordinating role or advisory role or developer 
role. 
Each 
organization 
provided 
five 
interviewees 
originating from different teams. We contacted the potential 
interviewees, explained our study and verified whether they 
were available and willing to participate. 
We were able to select interviewees who had at least two 
years of practical experience as an advisor, developer, scrum 
master or manager with the application of aspects (in a broad 
sense) of DevOps.  
In order to assure reliability, we prepared an interview 
protocol, which contained information on the research 
project, procedures for data collection and analysis, and three 
9
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

main interview questions. We asked: (1) whether and to what 
extent the interviewees recognized the definition of 
collaboration according to [15]; (2) whether they recognized 
each CSF and if they knew any additional CSFs; (3) per CSF 
for real-life examples and facts based on their own 
experiences. The first question was intended to introduce the 
concept of collaboration and to verify whether the 
interviewee had the same interpretation of this concept in the 
context of DevOps. We stored the protocol as well as the 
results into a database. We started the interviews with a pilot 
interview. According to the interview protocol, we sent the 
interviewee the interview questions and the appendices. 
Afterwards, we applied the interview questions during the 
pilot interview. By applying the interview protocol and 
interview questions in a real-life setting we learned that no 
improvements to our interview protocol or interview 
questions were necessary. Thus, we proceeded to the third 
step. 
 
In the third step, we collected the evidence by conducting 
the other interviews. Each interview took place face-to-face. 
The researcher conducting the interview also took notes 
during the interviews, recorded each interview and 
transcribed each interview afterwards. Subsequently, we sent 
a transcription to the corresponding interviewee, which 
enabled the interviewee to amend the transcription. 
In the fourth step, we analyzed the content. Therefore, we 
familiarized ourself with the content, divided the text up into 
meaning units and condensed these units if appropriate and 
formulated codes [32]. We coded our data using ATLAS.ti 
by reading the transcripts and adding codes to meaning units, 
such as feedback on the definition of collaboration, 
recognized CSFs, mentioned additional CSFs and real-life 
examples. In that way we were able to export tables of the 
results. Next, we condensed the meaning units if appropriate 
to support the classification of the results, which was 
particularly appropriate in the case of the real-life examples 
to make them more concise. 
The real-life examples illustrate the recognition of 
experts regarding all 32 CSFs found. For example, the 
development of a unique product as an example of a goal, or 
reviewing new code before merging as an example of a rule. 
They also contain specific, concrete and ‘richer’ experience-
based information on what the CSFs really mean in a 
DevOps context. This enabled us to refine the initial names 
and clarifications of the CSFs to reflect the DevOps context. 
Therefore, we replaced the more general concepts by 
concepts and descriptions based on the supporting evidence. 
Some parts of initial clarifications were neglected due to 
irrelevance or lack of evidence.  
In the fifth and last step, we put the recognized CSFs, the 
corresponding refined clarifications and the condensed real-
life examples in one table.  
C. Classification of the 32 CSFs recognized  
In the third phase we developed categories of CSFs by 
classification of the 32 CSFs recognized. Until this phase 
classification was not possible because we need the real-life 
examples obtained in the previous phase to infer what the 
CSFs recognized really mean in a DevOps context.  
 We based the classification on the metaplan-method 
[33]. The identification and classification of similar CSFs 
make the list of CSFs more manageable and provides the 
basis for making the CSFs measurable. As part of the 
classification, we could infer clarifications meaningful in the 
DevOps context. 
During the metaplan session we stated and discussed the 
rationale for sorting each card, determined the name of each 
emerged CSF and derived the clarifications of the fourteen 
new emerged CSFs from the grouped CSFs. For example, 
we grouped CSF “Roles and responsibilities” with CSF 
“Rules and procedures” into CSF “Procedures and 
responsibilities” based on examples mentioned, such as 
“Members determine their own way of work” and “The 
whole team is responsible for everything they deliver”. In the 
following three cases, we adopted clarifications from 
literature: Knowledge Management, Communication and 
Leadership. With the resulting fourteen CSFs, corresponding 
clarifications and condensed real-life examples we were able 
to answer the sub research questions in Section 4. 
IV. 
RESULTS OF THE MULTIPLE CASE STUDY 
In Section 3, we have found that all generally applicable 
CSFs found in literature were recognized, which answers sub 
question 2. Furthermore, we did not find additional CSFs. 
We also showed how recognized generally applicable CSFs 
of collaboration could be made meaningful in the context of 
DevOps, which answers sub question 3. Thus, we are now 
able to prove that we obtained the research goal by showing 
what previously validated generally applicable CSFs of 
collaboration really mean in a DevOps context. Therefore, 
we present the fourteen CSFs of collaboration in a DevOps 
context in Table I together with clarifications which makes 
the CSFs meaningful for the DevOps profession. 
TABLE I.  
CSFS OF COLLABORATION IN A DEVOPS CONTEXT 
CSF 
Clarification to make the CSF meaningful in a 
DevOps context 
Goals and 
vision 
Concrete, attainable and unique goals derived from a 
shared vision, which are mutual understood and 
agreed by the whole team and supported by 
stakeholders. 
Procedures and 
responsibilities 
Clear procedures, rules and responsibilities to 
structure collaboration. 
Performance 
measurement 
The performance of collaboration is measured by 
quantitative and qualitative measurement methods. 
History 
The length of time for which team members have 
known each other. 
Workload 
Feasible balance between available resources, time 
and required output.  
Knowledge 
Management 
Distinct but interdependent processes of knowledge 
creation, knowledge storage and retrieval, knowledge 
transfer, and knowledge application [34]. 
Communication 
A synthesis of a selection of information, the 
utterance of this information and a selective 
understanding or misunderstanding of this utterance 
and its information [35]. 
Leadership 
The ability to build and maintain a group that 
performs well relative to its competition [36]. 
Tools 
Technological support for collaboration and 
communication. 
10
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

CSF 
Clarification to make the CSF meaningful in a 
DevOps context 
Task 
characteristics 
Recognizing relevant task characteristics. 
Perceived 
benefits of 
collaboration 
Collaboration is seen as valuable for the individual, 
team and the organization.  
Team 
recognition 
The team is perceived as a leader, at least related to 
the goals and activities it intends to accomplish. 
Resilience 
The ability to deal with changing conditions. 
Team 
composition 
Make-up of team membership. 
Based on the results, we are able to discuss the 
implications in Section 5. 
V. 
DISCUSSION 
Our findings have several theoretical implications. First, 
our findings confirm that generally applicable CSFs of 
collaboration found in literature can be recognized in a 
DevOps context. These implications extent theory on CSFs 
of collaboration at large. It supports the statement of [17] 
that the CSFs they found are applicable to many different 
collaborative situations. It is also in line with the findings of 
[9][25] who studied the DevOps phenomenon. Second, we 
developed and validated an approach that generally 
applicable CSFs can be made meaningful in a DevOps 
context. This approach enables the operationalization of the 
CSFs in a DevOps context and may be useful to other 
contexts as well. Third, the real-life examples illustrate how 
the CSFs are anchored in the way team members work 
together. This shows that collaboration is indeed an 
important aspect of the adoption of DevOps. Researchers 
could build on these insights for future research into the 
DevOps phenomenon. Fourth, the findings discover 
additional evidence to confirm the importance of each factor 
previously found by [17]. 
The findings of our study also have implications for 
practitioners. First, the CSFs could aid practitioners to better 
understand the concept of collaboration in a DevOps context 
in order to have a necessarily impact on the success of 
collaboration. Second, the implications from this study of 
CSFs challenge the general view on DevOps as just an 
interaction between development and operations personnel 
[3][5][7]. As shown in the results, organizations should take 
into account many CSFs of collaboration. The number of 
CSFs requires adequate attention to let the collaboration be 
successful. In line with the suggestion of [17], organizations 
can use the list of CSFs to assess the readiness of team 
members to collaborate in a DevOps context or to find 
aspects to improve the collaboration within an existing team. 
Even though our initial list of CSFs based on literature 
and used in our multiple case study would appear to be a 
strong basis, we have to mention some remarks. The CSFs 
found were based on earlier research conducted in different 
contexts and studied from different perspectives. For 
example, Marek, Brock, and Savla [29] studied individual 
coalitions and initiatives across state, regional and 
nationwide. Reference [13] studied collaboration from social 
and technical perspectives. Other examples are Yoon, Lee, 
Yoon, and Toulan [14], Mattessich, Murray-Close, and 
Monsey [17], Mohr and Spekman [18], Tsanos, Zografos, 
and Harrison [22], and Patel, Pettitt, and Wilson [23], who 
concentrate on interorganizational collaboration, which could 
be in the form of collaboration between team members. In 
short, the CSFs used in our multiple case study differ in 
terms of operationalization, abstraction level, validation 
context and research area. This could have influenced the 
results of this study. 
Although it took some time before we could publish the 
results of our study, we could not find publications which 
present a similar list of CSFs of collaboration in a DevOps 
context in the meantime. 
Our findings appear to be more widely useable due to the 
fact that the findings are based on two case organizations. 
However, the list of CSFs should be adapted to the local 
context. 
According to the chosen definition, a CSF must have an 
impact on the success of collaboration. A study into 
measuring the impact may be an interesting topic. Careful 
and explicit research is needed to verify that the resulting 
model of CSFs is actually adequate. Research could validate 
whether a certain CSF aided in the improvement of 
collaboration.  
When we discussed CSFs during the interviews, 
interviewees made some remarks on relations between CSFs 
confirmed. Although we did not research this aspect, we 
think it may contain interesting topics for future research as 
they may aid in understanding collaboration in a DevOps 
context.  
Classification of CSFs into CSFs of collaboration in a 
DevOps context influencing the likelihood of collaboration 
and CSFs influencing the performance of collaboration may 
be a topic for further research. Knowing which CSFs play a 
role during the beginning of a collaboration could ease 
decision-making by management [37]. 
Although we conducted two case studies, we recommend 
more case studies conducted in a DevOps context, which 
will enrich the list further. Future research could focus on the 
validation of certain CSFs with more concrete real-life 
examples. 
Finally, future research could apply the developed 
approach to make generally applicable CSFs meaningful in 
specific context. 
VI. 
CONCLUSIONS 
Research into the effectiveness of integrated corporate 
functions is relevant, such as research on DevOps. 
Collaboration is an important aspect of DevOps, which 
should contribute to the effectiveness of DevOps. Therefore, 
reported problems with collaboration should be solved. CSFs 
of collaboration may contribute to solve problems with 
collaboration. This study found generally applicable CSFs of 
collaboration and provides insight into the way two case 
organizations addressed these CSFs in a DevOps context. 
We used this insight and made the generally applicable CSFs 
meaningful in a DevOps context. 
This knowledge adds to existing theory on collaboration 
by providing a comprehensive list of CSFs meaningful in a 
DevOps context. Furthermore, our study validated an 
11
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

approach 
by 
which 
generally 
applicable 
CSFs 
of 
collaboration could be made meaningful in a certain context. 
The CSFs confirmed could aid practitioners to better 
understand the concept of collaboration in a DevOps context 
in order to have a necessarily impact on the success of 
collaboration. Organizations could use the CSFs to assess the 
readiness of team members to collaborate or to find aspects 
to improve the collaboration within existing DevOps teams. 
All data emerged during the research process are 
available on request. 
REFERENCES 
[1] I. M. Sebastian et al., "How Big Old Companies Navigate 
Digital Transformation," MIS Quarterly Executive, vol. 16, 
pp. 197–213, 2017. 
[2] R. Colomo-Palacios, E. Fernandes, P. Soto-Acosta, and X. 
Larrucea, "A case analysis of enabling continuous software 
deployment through knowledge management," International 
Journal of Information Management, vol. 40, pp. 186–189, 
2018. 
[3] F. M. A. Erich, C. Amrit, and M. Daneva, "A qualitative 
study of DevOps usage in practice," Journal of Software: 
Evolution and Process, vol. 29, 2017. 
[4] G. G. Claps, R. B. Svensson, and A. Aurum, "On the journey 
to continuous deployment: Technical and social challenges 
along the way," Information and Software Technology, vol. 
57, pp. 21–31, 2015. 
[5] C. Ebert, G. Gallardo, J. Hernantes, and N. Serrano, 
"DevOps," IEEE Software, vol. 33, pp. 94–100, 2016. 
[6] M. Hüttermann, DevOps for developers. Apress, 2012. 
[7] A. Wiedemann, "IT Governance Mechanisms for DevOps 
Teams - How Incumbent Companies Achieve Competitive 
Advantages" The 51st Hawaii International Conference on 
System Sciences, 2018, pp. 4931-4940, ISBN: 978-0-
9981331-1-9 
[8] J. Iden, B. Tessem, and T. Paivarinta, "IS development/IT 
operations alignment in system development projects: a multi-
method 
research," 
International 
Journal 
of 
Business 
Information Systems, vol. 11, no. 3, pp. 343–359, 2012. 
[9] L. E. Lwakatare, P. Kuvaja, and M. Oivo "Dimensions of 
devops" The 16th International Conference on Agile 
Processes in Software Engineering and Extreme Programming  
Springer International Publishing, May 2015, pp. 25-29 
[10] J. Wettinger, U. Breitenbücher, M. Falkenthal, and F. 
Leymann, "Collaborative gathering and continuous delivery 
of DevOps solutions through repositories," Computer Science 
- Research and Development, vol. 32, pp. 281–290, 2017. 
[11] P. A. Nielsen, T. J. Winkler, and J. Norbjerg, "Closing the IT 
Development-Operations gap: The DevOps knowledge 
sharing framework" The 16th International Conference on 
Perspectives in Business Informatics Research (CEUR), 2017 
[12] P. W. Mattessich and B. R. Monsey, Collaboration--what 
makes it work: a review of research literature on factors 
influencing successful collaboration. St. Paul, Minn: Amherst 
H. Wilder Foundation, 1992. 
[13] G. L. Kolfschoten, G. J. de Vreede, R. O. Briggs, and H. G. 
Sol "Collaboration ‘Engineerability’," Group Decision and 
Negotiation, vol. 19, pp. 301–321, 2010. 
[14] C. Yoon, K. Lee, B. Yoon, and O. Toulan, "Typology and 
Success Factors of Collaboration for Sustainable Growth in 
the IT Service Industry," Sustainability, vol. 9, 2017. 
[15] W. L. Bedwell et al., "Collaboration at work: An integrative 
multilevel conceptualization," Human Resource Management 
Review, vol. 22, pp. 128–145, 2012. 
[16] J. Ram, D. Corkindale, and M. L. Wu, "Implementation 
critical success factors (CSFs) for ERP: Do they contribute to 
implementation 
success 
and 
post-implementation 
performance?," 
International 
Journal 
of 
Production 
Economics, vol. 144, pp. 157–174, 2013. 
[17] P. W. Mattessich, M. Murray-Close, and B. R. Monsey, 
Collaboration What Makes It Work. Saint Paul, MN: 
Fieldstone Alliance, 2001. 
[18] J. Mohr and R. Spekman, "Characteristics of partnership 
success: Partnership attributes, communication behavior, and 
conflict resolution techniques," Strategic Management 
Journal, vol. 15, pp. 135–152, 1994. 
[19] J. Kotlarsky and I. Oshri, "Social ties, knowledge sharing and 
successful collaboration in globally distributed system 
development projects," European Journal of Information 
Systems, vol. 14, pp. 37–48, 2005. 
[20] J. 
Söderlund, 
Theoretical 
Foundations 
of 
Project 
Management. Oxford University Press, 2011. 
[21] J. Iden and B. Bygstad, "The social interaction of developers 
and IT operations staff in software development projects," 
International Journal of Project Management, vol. 36, pp. 
485–497, 2018. 
[22] C. S. Tsanos, K. G. Zografos, and A. Harrison, "Developing a 
conceptual 
model 
for 
examining 
the 
supply 
chain 
relationships 
between 
behavioural 
antecedents 
of 
collaboration, integration and performance," The International 
Journal of Logistics Management, vol. 25, pp. 418–462, 2014. 
[23] H. Patel, M. Pettitt, and J. R. Wilson, "Factors of 
collaborative working: A framework for a collaboration 
model," Applied Ergonomics, vol. 43, pp. 1–26, 2012. 
[24] M. van Belzen, D. de Kruijff, and J. Trienekens, "Success 
Factors of Collaboration in the Context of DevOps, " The 
12th International Conference Information Systems IADIS, 
2019, pp. 26–34, ISBN: 978-989-8533-87-6 
[25] R. de Feijter, S. Overbeek, T. van Vliet, E. Jagroep, and S. 
Brinkkemper, "DevOps Competences and Maturity for 
Software Producing Organizations," Enterprise, Business-
Process and Information Systems Modeling, vol. 318, pp. 
244-259, 2018. 
[26] B. Kitchenham et al., "Systematic literature reviews in 
software engineering – A tertiary study," Information and 
Software Technology, vol. 52, pp. 792–805, 2010. 
[27] S. Jalali and C. Wohlin, "Systematic literature studies: 
database searches vs. backward snowballing" The ACM-IEEE 
international symposium on Empirical software engineering 
and measurement (ESEM) ACM-IEEE, Sep. 2012, pp. 29-38, 
ISBN: 978-1-4503-1056-7 
[28] C. A. Olson, J. T. Balmer, and G. C. Mejicano, "Factors 
Contributing to Successful Interorganizational Collaboration: 
The Case of CS2day," Journal of Continuing Education in the 
Health Professions, vol. 31, pp. 3–12, 2011. 
[29] L. I. Marek, D. J. P. Brock, and J. Savla, "Evaluating 
Collaboration for Effectiveness: Conceptualization and 
Measurement," American Journal of Evaluation, vol. 36, pp. 
67–85, 2015. 
[30] R. K. Yin, Case study research and applications: design and 
methods. Los Angeles, CA: SAGE, 2018. 
[31] P. Runeson and M. Höst, "Guidelines for conducting and 
reporting case study research in software engineering," 
Empirical Software Engineering, vol. 14, pp. 131-164, 2009. 
[32] C. Erlingsson and P. Brysiewicz, "A hands-on guide to doing 
content analysis," African Journal of Emergency Medicine, 
vol. 7, pp. 93–99, 2017. 
[33] E. Schnelle, The Metaplan-Method communication tools for 
planning and learning groups. Quickborn, Metaplan, 1979. 
[34] M. Alavi and D. E. Leidner, "Review: Knowledge 
Management 
and 
Knowledge 
Management 
Systems: 
12
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

Conceptual 
Foundations 
and 
Research 
Issues," 
MIS 
Quarterly, vol. 25, no. 1, pp. 107-136, 2001. 
[35] N. Luhmann, "What is Communication?," Communication 
Theory, vol. 2, pp. 251–259, 1992. 
[36] R. Hogan and R. B. Kaiser, "What we know about 
Leadership," Review of General Psychology, vol. 9, pp. 169–
180, 2005. 
[37] C. Bai and J. Sarkis, "A grey-based DEMATEL model for 
evaluating business process management critical success 
factors," International Journal of Production Economics, vol.  
146, pp. 281–292, 2013. 
 
13
Copyright (c) IARIA, 2023.     ISBN:  978-1-68558-098-8
ICSEA 2023 : The Eighteenth International Conference on Software Engineering Advances

