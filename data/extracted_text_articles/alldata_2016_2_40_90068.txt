Unsupervised aircraft trajectories clustering: a minimum entropy approach
Florence Nicol
Ecole Nationale de l’Aviation Civile
7, Avenue Edouard Belin,
F-31055 Toulouse FRANCE
Email: nicol@recherche.enac.fr
Stephane Puechmorel
Ecole Nationale de l’Aviation Civile
7, Avenue Edouard Belin,
F-31055 Toulouse FRANCE
Email: stephane.puechmorel@enac.fr
Abstract—Clustering is a common operation in statistics. When
data considered are functional in nature, like curves, dedicated
algorithms exist, mostly based on truncated expansions on Hilbert
basis. When additional constraints are put on the curves, like in
applications related to air trafﬁc where operational considerations
are to be taken into account, usual procedures are no longer
applicable. A new approach based on entropy minimization
and Lie group modeling is presented here, yielding an efﬁcient
unsupervised algorithm suitable for automated trafﬁc analysis. It
outputs cluster centroids with low curvature, making it a valuable
tool in airspace design applications or route planning.
Keywords–curve clustering; probability distribution estimation;
functional statistics; minimum entropy; air trafﬁc management.
I.
INTRODUCTION
Clustering aircraft trajectories is an important problem in
Air Trafﬁc Management (ATM). It is a central question in
the design of procedures at take-off and landing, the so called
sid-star (Standard Instrument Departure and Standard Terminal
Arrival Routes). In such a case, one wants to minimize
the noise and pollutants exposure of nearby residents while
ensuring runway efﬁciency in terms of the number of aircraft
managed per time unit.
The same question arises with cruising aircraft, this time
the mean ﬂight path in each cluster being used to opti-
mally design the airspace elements (sectors and airways).
This information is also crucial in the context of future air
trafﬁc management systems where reference trajectories will
be negotiated in advance so as to reduce congestion. A special
instance of this problem is the automatic generation of safe and
efﬁcient trajectories, but in such a way that the resulting ﬂight
paths are still manageable by human operators. Clustering is
a key component for such tools: major trafﬁc ﬂows must be
organized in such a way that the overall pattern is not too
far from the current organization, with aircraft ﬂying along
airways. The classiﬁcation algorithm has thus not only to
cluster similar trajectories but at the same time make them
as close as possible to operational trajectories. In particular,
straightness of the ﬂight segments must be enforced, along with
a global structure close to a graph with nodes corresponding
to merging/splitting points and edges the airways.
II.
PREVIOUS RELATED WORK
Several well established algorithms may be used for per-
forming clustering on a set of trajectories, although only a
few of them were eventually applied in the context of air
trafﬁc. The spectral approach relies on trajectories modeling
as vectors of samples in a high dimensional space, and uses
random projections as a mean of reducing the dimensionality.
The huge computational cost of the required singular values
decomposition is thus alleviated, allowing use on real recorded
trafﬁc over several months. It was applied in a study conducted
by the Mitre corporation on behalf of the Federal Aviation
Authority (FAA) [1]. The most important limitation of this
approach is that the shape of the trajectories is not taken
into account when applying the clustering procedure unless a
resampling procedure based on arclength is applied: changing
the time parametrization of the ﬂight paths will induce a
change in the classiﬁcation. Furthermore, there is no mean
to put a constraint on the mean trajectory produced in each
cluster: curvature may be quite arbitrary even if samples
individually comply with ﬂight dynamics.
Another approach is taken in [2], with an explicit use of an
underlying graph structure. It is well adapted to road trafﬁc as
vehicles are bound to follow predetermined segments. A spatial
segment density is computed then used to gather trajectories
sharing common parts. For air trafﬁc applications, it may be of
interest for investigating present situations, using the airways
and beacons as a structure graph, but will misclassify aircraft
following direct routes which is quite a common situation,
and is unable to work on an unknown airspace organization.
This point is very important in applications since trajectory
datamining tools are mainly used in airspace redesign. A
similar approach is taken in [3] with a different measure of
similarity. It has to be noted that many graph-based algorithms
are derived from the original work presented in [4], and
exhibit the aforementioned drawbacks for air trafﬁc analysis
applications.
An interesting vector ﬁeld based algorithm is presented in
[5]. A salient feature is the ability to distinguish between close
trajectories with opposite orientations. Nevertheless, putting
constraints on the geometry of the mean path in a cluster
is quite awkward, making the method unsuitable for our
application.
Due to the functional nature of trajectories, that are ba-
sically mappings deﬁned on a time interval, it seems more
appropriate to resort to techniques based on times series, as
surveyed in [6], [7] or functional data statistics, with standard
references [8], [9]. In both approaches, a distance between
pairs of trajectories or, in a weaker form, a measure of simi-
larity must be available. The algorithms of the ﬁrst category are
based on sequences, possibly in conjunction with dynamic time
warping [10] while in the second samples are assumed to come
35
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-457-2
ALLDATA 2016 : The Second International Conference on Big Data, Small Data, Linked Data and Open Data (includes KESA 2016)

from an unknown underlying function belonging to a given
Hilbert space. However, it has to be noticed that apart from this
last assumption, both approaches yield similar end algorithms,
since functional data revert for implementation to usual ﬁnite
dimensional vectors of expansion coefﬁcients on a suitable
truncated basis. For the same reason, model-based clustering
may be used in the context of functional data even if no notion
of probability density exists in the original inﬁnite dimensional
Hilbert space as mentioned in[11]. A nice example of a model-
based approach working on functional data is funHDDC [12].
III.
DEALING WITH CURVE SYSTEMS: A PARADIGM
CHANGE
When working with aircraft trajectories, some speciﬁc
characteristics must be taken into account. First of all, ﬂight
paths consist mainly of straight segments connected by arcs
of circles, with transitions that may be assumed smooth up to
at least the second derivative. This last property comes from
the fact that pilot’s actions result in changes on aerodynamic
forces and torques and a straightforward application of the
equations of motion. When dealing with sampled trajectories,
this induces a huge level of redundancy within the data, the
relevant information being concentrated around the transitions.
Second, ﬂight paths must be modeled as functions from a
time interval [a, b] to R3 which is not the usual setting for
functional data statistics: most of the work is dedicated to
real valued mappings and not vector ones. A simple approach
will be to assume independence between coordinates, so that
the problem falls within the standard case. However, even
with this simplifying hypothesis, vertical dimension must be
treated in a special way as both the separation norms and
the aircraft maneuverability are different from those in the
horizontal plane.
Finally, being able to cope with the initial requirement of
compliance with the current airspace structure in airways is
not addressed by general algorithms. In the present work, a
new kind of functional unsupervised classiﬁer is introduced,
that has in common with graph-based algorithms an esti-
mation of trafﬁc density but works in a continuous setting.
For operational applications, a major beneﬁt is the automatic
building of a route-like structure that may be used to infer new
airspace designs. Furthermore, smoothness of the mean cluster
trajectory, especially low curvature, is guaranteed by design.
Such a feature is unique among existing clustering procedures.
Finally, our Lie group approach makes easy the separation
between neighboring ﬂows oriented in opposite directions.
Once again, it is mandatory in air trafﬁc analysis where such
a situation is common.
In the ﬁrst section the notion of entropy of a curve system
is introduced. The modeling of trajectories with a Lie group
approach is then presented. The next two sections will show
how to estimate Lie group densities and to cluster curves in
this new setting. Finally, results on a synthetic example are
brieﬂy given and a conclusion is drawn.
IV.
THE ENTROPY OF A SYSTEM OF CURVES
Considering trajectories as mappings γ : [t0, t1] → R3
induces a notion of spatial density as presented in [13]. As-
suming that after a suitable registration process all ﬂight paths
γi, i = 1, . . . , N are deﬁned on the same time interval [0, 1] to
Ω a domain of R3, one can compute an entropy associated with
the system of curves using the approach presented in [14]. Let
a system of curves γ1, . . . , γN be given, its entropy is deﬁned
to be:
E(γ1, . . . , γN) = −
Z
Ω
˜d(x) log

˜d(x)

dx,
where the spatial density d is computed according to:
˜d: x 7→
PN
i=1
R 1
0 K (∥x − γi(t)∥) ∥γ′
i(t)∥dt
PN
i=1 li
.
(1)
In the last expression, li is the length of the curve γi and K
is a kernel function similar to those used in nonparametric
estimation. A standard choice is the Epanechnikov kernel:
K : x 7→ C

Figure 2. Entropy minimal curve system from the initial ﬂight plan.
where the notation v|N stands for the projection of the vector
v onto the normal vector to the trajectory. An overall scaling
constant of:
1
PN
i=1 li
,
where li is the length of trajectory i, has to be put in front
of the expression to get the true gradient of the entropy. In
practice, it is not needed since algorithms will adjust the size
of the step taken in the gradient direction.
V.
A LIE GROUP MODELING
While satisfactory in terms of trafﬁc ﬂows, the previous
approach suffers from a severe ﬂaw when one considers ﬂight
paths that are very similar in shape but are oriented in opposite
directions. Since the density is insensitive to direction reversal,
ﬂight paths will tend to aggregate while the correct behavior
will be to ensure a sufﬁcient separation in order to prevent
hazardous encounters. Taking aircraft headings into account in
the clustering process is then mandatory when such situations
have to be considered.
This issue can be addressed by adding a penalty term
to neighboring trajectories with different headings but the
important theoretical property of entropy minimization will be
lost in the process. A more satisfactory approach will be to take
heading information directly into account and to introduce a
notion of density based on position and velocity.
Since the aircraft dynamics is governed by a second order
equation of motion of the form:

γ′(t)
γ′′(t)

= F

t;
γ(t)
γ′(t)

,
it is natural to take as state vector:

γ(t)
γ′(t)

.
The initial state is chosen here to be:

0d
e1

,
with e1 the ﬁrst basis vector, and 0d the origin in Rd. It is
equivalent to model the state as a linear transformation:
0d ⊗ e1 7→ T(t) ⊗ A(t)(0d ⊗ e1) = γ(t) ⊗ γ′(t),
where T(t) is the translation mapping 0d to γ(t) and A(t) is
the composite of a scaling and a rotation mapping e1 to γ′(t).
Considering the vector (γ(t), 1) instead of γ(t) allows a matrix
representation of the translation T(t):

γ(t)
1

=

Id
γ(t)
0
1
 
0d
1

.
From now, all points will be implicitly considered as having
an extra last coordinate with value 1, so that translations are
expressed using matrices. The origin 0d will thus stand for the
vector (0, . . . , 0, 1) in Rd+1. Gathering things yields:

γ(t)
γ′(t)

=

T(t)
0
0
A(t)
 
0d
e1

.
(5)
The previous expression makes it possible to represent a
trajectory as a mapping from a time interval to the matrix Lie
group G = Rd×Σ×SO(d), where Σ is the group of multiples
of the identity, SO(d) the group of rotations and Rd the group
of translations. Please note that all the products are direct. The
A(t) term in the expression (5) can be written as an element
of Σ ⊗ SO(d). Starting with the deﬁning property A(t)e1 =
γ′(t), one can write A(t) = ∥γ′(t)∥U(t) with U(t) a rotation
mapping e1 ∈ Sd−1 to the unit vector γ′(t)/∥γ′(t)∥ ∈ Sd−1.
For arbitrary dimension d, U(t) is not uniquely deﬁned, as it
can be written as a rotation in the plane P = span(e1, γ′(t))
and a rotation in its orthogonal complement P⊥. A common
choice is to let U(t) be the identity in P⊥ which corresponds in
fact to a move along a geodesic (great circle) in Sd−1. This will
be assumed implicitly in the sequel, so that the representation
A(t) = Λ(t)U(t) with Λ(t) = ∥γ′(t)∥Id becomes unique.
The Lie algebra g of G is easily seen to be Rd × R ×
Asym(d) with Asym(d) is the space of skew-symmetric d × d
matrices. An element from g is a triple (u, λ, A) with an
associated matrix form:
M(u, λ, A) =


0
u
0
0
0
0
λId + A

 .
(6)
The exponential mapping from g to G can be obtained in a
straightforward manner using the usual matrix exponential:
exp((u, λ, A)) = exp(M(u, λ, A)).
The matrix representation of g may be used to derive a
metric:
⟨(u, λ, A), (v, µ, B)⟩g = Tr

g1, g2 are two elements from G, then the geodesic connecting
them is:
t ∈ [0, 1] 7→ g1 exp

if κ
=
0, the vMF kernel function reduces to the uniform
circular distribution on the hypersphere. Note that the vMF
kernel function is convenient when the data is rotationally
symmetric.
The vMF kernel function is a convenient choice for our
problem because this p.d.f. is invariant under the action on
the sphere of the rotation component of the Lie group G.
Moreover, this distribution has properties analogous to those
of multivariate Gaussian distribution and is the limiting case
of a limit central theorem for directional statistics. Other
multidimensional distributions might be envisaged, such as the
bivariate von Mises, the Bingham or the Kent distributions
[16]. However, the bivariate von Mises distribution being a
product kernel of two univariate von Mises kernels, this is more
appropriate for modeling density distributions on the torus and
not on the sphere. The Bingham distribution is bimodal and
satisﬁes the antipodal symmetry property K(x) = K(−x).
This kernel function is used for estimating the density of
axial data and is not appropriate for our clustering approach.
Finally, the Kent distribution is a generalization of the vMF
distribution, which is used when we want to take into account
of the spread of data. However, the rotation-invariance property
of the vMF distribution is lost.
As for the scaling component of G, the usual kernel
functions such as the Gaussian and the Epanechnikov kernel
functions are not suitable for estimating the radial distribution
of a random vector in Rd. When distributions are deﬁned over
a positive support (here in the case of non-negative data), these
kernel functions cause a bias in the boundary regions because
they give weights outside the support. An asymmetrical kernel
function on R+ such as the log-normal kernel function is
a more convenient choice. Moreover, this p.d.f. is invariant
by change of scale. Let R1, . . . , Rn be univariate random
variables from a p.d.f. which has bounded support on [0; +∞[.
The radial density estimator may be deﬁned by means of a sum
of log-normal kernel functions as follows:
bg(r) = 1
n
n
X
i=1
KLN(r; ln Ri, h), r ≥ 0, h > 0,
where
KLN(x; µ, σ) =
1
√
2πσx e− (ln x−µ)2
2σ2
is the log-normal kernel function and h is the bandwidth
parameter. The resulting estimate is the sum of bumps de-
ﬁned by log-normal kernels with medians Ri and variances
(eh2 −1)eh2R2
i . Note that the log-normal (asymmetric) kernel
density estimation is similar to the kernel density estimation
based on a log-transformation of the data with the Gaussian
kernel function. Although the scale-change component of G is
the multiplicative group R+, we can use the standard Gaussian
kernel estimator and the metric on R.
VII.
UNSUPERVISED ENTROPY CLUSTERING
The ﬁrst thing to be considered is the extension of the
entropy deﬁnition to curve systems with values in G. Starting
with expression from (1), the most important point is the
choice of the kernel involved in the computation. As the
group G is a direct product, choosing K = Kt.Ks.Ko with
Kt, Ks, Ko functions on respectively the translation, scaling
and rotation part will yield a G-invariant kernel provided the
Kt, KsKo are invariant on their respective components. Since
the translation part of G is modeled after Rn, the epanechnikov
kernel is a suitable choice. As for the scaling and rotation, the
choice made follows the conclusion of section VI: a log-normal
kernel and a von-Mises one will be used respectively. Finally,
the term ∥γ′(t)∥ in the original expression of the density, that
is required to ensure invariance under re-parametrization of the
curve, has to be changed according to the metric in G and is
replaced by ⟨⟨γ′(t), γ′(t)⟩⟩1/2
γ(t). The density at x ∈ G is thus:
dG(x)) =
PN
i=1
R 1
0 K (x, γi(t)) ⟨⟨γ′
i(t), γ′
i(t)⟩⟩1/2
γi(t)dt
PN
i=1 li
(12)
where li is the length of the curve in G, that is:
li =
Z 1
0
⟨⟨γ′
i(t), γ′
i(t)⟩⟩1/2
γi(t)dt
(13)
The expression of the kernel evaluation K (x, γi(t)) is split
into three terms. In order to ease the writing, a point x in G will
be split into xr, xs, xo components where the exponent r, s, t
stands respectively for translation, scaling and rotation. Given
the fact that K is a product of component-wise independent
kernels it comes:
K (x, γi(t)) = Kt

in logarithmic coordinates. The same is true for the Von-
Mises kernel, so that in the sequel only the (product) lebesgue
measure will appear in the integrals.
Finding the system of curves with minimum entropy re-
quires a displacement ﬁeld computation as detailed in [14].
For each curve γi, such a ﬁeld is a mapping ηi : [0, 1] → TG
where at each t ∈ [0, 1], ηi(t) ∈ TGγi(t).Compare to the
original situation where only spatial density was considered,
the computation must now be conducted in the tangent space
to G. Even for small problems, the effort needed becomes
prohibitive. The structure of the kernel involved in the density
can help in cutting the overall computations needed. Since it
is a product, and the translation part is compactly supported,
being an epanechnikov kernel, one can restrict the evaluation
to points belonging to its support. Density computation will
thus be made only in tubes around the trajectories.
Second, for the target application that is to cluster the ﬂight
paths into a route network and is of pure spatial nature, there
is no point in updating the rotation and scaling part when
performing the moves: only the translation part must change,
the other two being computed from the trajectory. The initial
optimization problem in G may thus be greatly simpliﬁed.
Let ϵ be an admissible variation of curve γi, that is a
smooth mapping from [0, 1] to TG with ϵ(t) ∈ Tγi(t)G and
ϵ(0) = ϵ(1) = 0. We assume furthermore that ϵ has only a
translation component. The derivative of the entropy E(dG)
the t curve γi is obtained from the ﬁrst order term when γi
is replaced by γi + ϵ. First of all, it has to be noted that dG
is a density and thus has unit integral regardless of the curve
system. When computing the derivative of E(dG), the term
−
Z
G
dG(x)∂γidG(x)
dG(x) dµG(x) = −
Z
G
∂γidG(x)dµG(x)
will thus vanish. It remains:
−
Z
G
∂γidG(x) log dG(x)dµG(x)
The density dG is a sum on the curves, and only the i-th term
has to be considered. Starting with the expression from (12),
one term in the derivative will come from the denominator. It
computes the same way as in [14] to yield:
γt′′
i (t)
⟨⟨γ′
i(t), γ′
i(t)⟩⟩G

N
E(dG)
(18)
Please note that the second derivative of γi is considered only
on its translation component, but the ﬁrst derivative makes use
of the complete expression. As before, the notation |N stands
for the projection onto the normal component to the curve.
The second term comes from the variation of the numerator.
Using the fact that the kernel is a product KtKsKo and that
all individual terms have a unit integral on their respective
components, the expression becomes very similar to the case
of spatial density only and is:
−
Z
G
K (x, γi(t)) log dG(x)dµG(x)

γt′′
i (t)
⟨⟨γ′
i(t), γ′
i(t)⟩⟩1/2
G

N
(19)
+
Z
Rd e(t)Kt′ 
IX.
CONCLUSION AND FUTURE WORK
The entropy associated with a system of curves has proved
itself efﬁcient in unsupervised clustering application where
shape constraints must be taken into account. For using it in
aircraft route design, heading and velocity information must be
added to the state vector, inducing an extra level of complexity.
The present work relies on a Lie group modeling as an unifying
approach to state representation. It has successfully extended
the notion of curve system entropy to this setting, allowing the
heading/velocity to be added in a intrinsic way. The method
seems promising, as indicated by the results obtained on simple
synthetic situations, but extra work needs to be dedicated to
algorithmic efﬁciency in order to deal with the operational
trafﬁc datasets, in the order of tens of thousand of trajectories.
Generally speaking, introducing a Lie group approach to
data description paves the way to new algorithms dedicated
to data with a high level of internal structuring. Studies are
initiated to address several issues in high dimensional data
analysis using this framework.
REFERENCES
[1]
M. Enriquez, “Identifying temporally persistent ﬂows in the terminal
airspace via spectral clustering,” in ATM Seminar 10, FAA-Eurocontrol,
Ed., 06 2013.
[2]
M. El Mahrsi and F. Rossi, “Graph-based approaches to clustering
network-constrained trajectory data,” in New Frontiers in Mining Com-
plex Patterns, ser. Lecture Notes in Computer Science, A. Appice,
M. Ceci, C. Loglisci, G. Manco, E. Masciari, and Z. Ras, Eds. Springer
Berlin Heidelberg, 2013, vol. 7765, pp. 124–137.
[3]
J. Kim and H. S. Mahmassani, “Spatial and temporal characterization
of travel patterns in a trafﬁc network using vehicle trajectories,”
Transportation Research Procedia, vol. 9, 2015, pp. 164 – 184, papers
selected for Poster Sessions at The 21st International Symposium on
Transportation and Trafﬁc Theory Kobe, Japan, 5-7 August, 2015.
[4]
M. Ester, H. peter Kriegel, J. Sander, and X. Xu, “A density-based
algorithm for discovering clusters in large spatial databases with noise.”
AAAI Press, 1996, pp. 226–231.
[5]
F. N., K. J. T., S. C. E., and S. C.T., “Vector ﬁeld k -means: Clustering
trajectories by ﬁtting multiple vector ﬁelds,” in Eurographics Confer-
ence on Visualization (EuroVis), Preim, P. Rheingans, and H. Theisel,
Eds., 2013.
[6]
T. W. Liao, “Clustering of time series data - a survey,” Pattern
Recognition, vol. 38, 2005, pp. 1857–1874.
[7]
S. Rani and G. Sikka, “Recent techniques of clustering of time series
data: A survey,” International Journal of Computer Applications, vol. 52,
no. 15, August 2012, pp. 1–9, full text available.
[8]
F. Ferraty and P. Vieu, Nonparametric Functional Data Analysis: Theory
and Practice, ser. Springer Series in Statistics.
Springer, 2006.
[9]
J. Ramsay and B. Silverman, Functional Data Analysis, ser. Springer
Series in Statistics.
Springer New York, 2006.
[10]
W. Meesrikamolkul, V. Niennattrakul, and C. Ratanamahatana, “Shape-
based clustering for time series data,” in Advances in Knowledge
Discovery and Data Mining, ser. Lecture Notes in Computer Science,
P.-N. Tan, S. Chawla, C. Ho, and J. Bailey, Eds.
Springer Berlin
Heidelberg, 2012, vol. 7301, pp. 530–541.
[11]
A. Delaigle and P. Hall, “Deﬁning probability density for a distribution
of random functions,” The Annals of Statistics, vol. 38, no. 2, 2010,
pp. 1171–1193.
[12]
C. Bouveyron and J. Jacques, “Model-based clustering of time series
in group-speciﬁc functional subspaces,” Advances in Data Analysis and
Classiﬁcation, vol. 5, no. 4, 2011, pp. 281–300.
[13]
S. Puechmorel, “Geometry of curves with application to aircraft trajec-
tory analysis.” Annales de la facult des sciences de Toulouse, vol. 24,
no. 3, 07 2015, pp. 483–504.
[14]
S. Puechmorel and F. Nicol, “Entropy minimizing curves with applica-
tion to automated ﬂight path design,” Lecture notes in computer science,
Geometric Science of Information 2015” in MDPI Entropy, 2015.
[15]
D. Scott, Multivariate Density Estimation: Theory, Practice, and Visu-
alization, ser. A Wiley-interscience publication.
Wiley, 1992.
[16]
K. Mardia and P. Jupp, Directional Statistics, ser. Wiley Series in
Probability and Statistics.
Wiley, 2009.
[17]
K. V. Mardia, “Statistics of directional data,” Journal of the Royal
Statistical Society. Series B (Methodological), vol. 37, no. 3, 1975, pp.
349–393.
[18]
E. Garc´ıa-Portugu´es, R. M. Crujeiras, and W. Gonz´alez-Manteiga,
“Kernel density estimation for directional–linear data,” Journal of
Multivariate Analysis, vol. 121, 2013, pp. 152–175.
[19]
P. E. Jupp and K. V. Mardia, “Maximum likelihood estimators for the
matrix von mises-ﬁsher and bingham distributions,” Ann. Statist., vol. 7,
no. 3, 05 1979, pp. 599–606.
41
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-457-2
ALLDATA 2016 : The Second International Conference on Big Data, Small Data, Linked Data and Open Data (includes KESA 2016)

