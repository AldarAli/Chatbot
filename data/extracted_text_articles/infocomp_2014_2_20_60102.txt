Scheduling periodic Tasks on Multiple Periodic Resources
Xiayu Hua, Zheng Li, Hao Wu, Shangping Ren
Department of Computer Science
Illinois Institute of Technology
Chicago, IL 60616, USA
{xhua, zli80, hwu28}@hawk.iit.edu, ren@iit.edu
Abstract—In this paper, we study the problem of scheduling
periodic tasks on multiple periodic resources. We take two step
approach by ﬁrst integrating multiple periodic resources to an
equivalent single periodic resource so that existing real-time
scheduling theorems on single periodic resource can be applied.
Second, we extend the schedulability tests of periodic tasks on
a single periodic resource in continuous time domain given in[1]
to discrete and ﬁnite time domain so that the schedulability
tests can be applied in practice. We further empirically study
the performance of periodic resource integration. Experiment
results reveal the following interesting behaviors: 1) increasing
the number of periodic resources does not necessarily increase
the integrated resource’s capacity; 2) integrating smaller capacity
periodic resources has higher capacity increase than integrating
larger capacity periodic resources; and 3) integrating periodic
resources that have the same capacity results in the most capacity
increase in the integrated resource.
Keywords—Periodic Resource; Real-time scheduling; Resource
integration; Task assignment.
I. INTRODUCTION
In real-time community, for a long time, the focus of
scheduling problems has been on dedicated resources, the
resources that are constantly available to tasks. However,
as virtualization technology develops, resources, especially
virtual resources, are not dedicated resource any more. The
virtual resources are often modeled as periodic resources
which are only available for certain amount of time within
a given period [2][3][4][5][6].
The study of periodic resources can be traced back to the
time when the concept of time-division sharing is proposed.
Time-division sharing is one of the most important technolo-
gies and also one of the most efﬁcient way to accommodate
multiple applications on a single resource [2][7]. One realistic
example is the virtualization system like XEN [6] where
multiple virtual machines may share one CPU, so each virtual
machine obtains a portion of the CPU’s execution time.
With time-division sharing scheduling algorithms, such as
round-robin and server-based scheduling algorithms, resources
manifested to applications are periodic resources. The purpose
of these algorithms is to partition a dedicated resource to
serve multiple applications, rather than how to schedule a
task on a periodic resource. Research on the schedulability
issue of multiple tasks on a single periodic resource started
in late 90s [2] and has recently draw more attention in the
community [1][3][4][8][9][10]. However, until now, there has
not been much, if any, work in the literature dealing with the
issue of scheduling a periodic task set on multiple periodic
resources when none of the individual periodic resource has
large enough capacity to support the given task set.
In this paper, we study the problem of scheduling periodic
task set on multiple periodic resources. To address the issue,
we take two steps, ﬁrst study how multiple periodic resources
can be integrated into an equivalent single periodic resource
so that the existing real-time scheduling theorems on a single
periodic resource can be applied. Second, we extend one of
the existing schedulability test for a single periodic resource
proposed by Lee [1] from continuous time domain to discrete
and ﬁnite time domain so that the test can be of practice use.
We further use extensive simulation to observe the resource
capacity increase patterns when periodic resources of different
capacities are integrated.
The rest of paper is organized as follows: Section II dis-
cusses the related work. Section III deﬁnes terms and models
that the paper is based on and also formulates the problem
to be addressed in the paper. The equivalent transformation
of multiple periodic resources into a single periodic resource
is discussed in Section IV. In Section V, we extend Lee’s
schedulability test [1] of multiple tasks on a single resource
from continuous time domain to discrete and ﬁnite time
domain. Section VI empirically studies the performance of
integrating periodic resources with different capacities. Finally,
we conclude in Section VII.
II. RELATED WORK
Real-time scheduling problem has been studied extensively
for half century. Most of the researches on the problem are
focusing on dedicated resources over past decades. As the
computer technology develops, single resource nowadays can
provide thousands of more computational capabilities com-
pared to decades ago. Hence, the real-time scheduling problem
is extended from how to schedule a group of tasks onto a
dedicated resource to how to schedule multiple groups of
tasks onto a dedicated resource. One of the most intuitive way
to schedule multiple groups of tasks onto a single dedicated
resource is to split the dedicated resource into several parti-
tions; then, schedule each group of tasks to its corresponding
partition. This is the essential concept of periodic resource [2].
Although the periodic resource model has not been formally
deﬁned until later 90s [2], the insight of periodic resource can
be traced back as early as the concept of time-division sharing
was proposed. Time-division is one of the most efﬁcient way
to distribute resources to tasks [2][7]. Server-based scheduling
35
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

mechanism is one of the most popular time-division mecha-
nisms to accommodate multiple groups of tasks and provide
some level of schedulability guarantees [11], and extensive
research work [12][13][14] developed different mechanisms
to improve tasks’ response time.
Server-based mechanisms can be treated as strategies to
adjust the resource partition to meet tasks’ speciﬁc demands.
Considering the resource partition is given and cannot be
adjusted, Shirero et al. [2] ﬁrst deﬁned periodic resources
and proposed a real-time round robin scheduling algorithm in
1999. They also introduced the concept of resource regularity.
Based on resource regularity, they proposed schedulability
bounds for periodic tasks. Mok et al. [3][15], then, extended
Shirero’s work and proposed a more comprehensive schedula-
bility analysis for periodic resources under Earliest Deadline
First (EDF) and Rate Monotonic (RM) scheduling algorithms.
However, both Shirero and Mok’s periodic resource model
had constraints that either the resource pattern or the resource
regularity should be given. By removing the constraints, Shin
et al. then extended the periodic resource model to a more
general case and provided a complete schedulability analysis
under such model and gave the schedulability bounds for both
EDF and RM accordingly [1][10].
Also, both Shirero’s original periodic resource model and
Shin’s extended model were only trying to solve the real-
time scheduling problems on single periodic resource. Instead,
in this paper we investigate the problem of how to integrate
multiple periodic resources into an equivalent single periodic
resource so that the existing theorems for single periodic
resource can be applied.
III. SYSTEM MODELS AND PROBLEM FORMULATION
A. Terms and Deﬁnitions
In this section, we ﬁrst give the deﬁnitions and notations
that are used in the following parts. Then, we deﬁne the system
models and formulates the problem we are to address.
Task Set Model Γ
A task set contains a set of periodic tasks, i.e., Γ =
{τ1, ..., τn} with τi = (pi, ei), where pi and ei are the task’s
period and worst case execution time, respectively.
Resource Model R
The resource we consider is a periodic resource, represented
as R = (π, θ), where π is a period and θ is the total amount
of available time durations (0 < θ < π) within each period.
Capacity of Resource C(R)
The capability of a periodic resource R(π, θ) is deﬁned as
C(R) = θ
π.
Periodic Resource Pattern(PR)
Given a periodic resource R(π, θ), its pattern PR deﬁnes
its time availability within its period, i.e., PR(t) = 1 indicates
that the resource is available at time t, or it is not available at
time t if PR(t) = 0.
Fixed Pattern Periodic Resource
If a periodic resource is of ﬁxed pattern, then PR(t) =
PR(t + k × π), where k ∈ N+.
Continuous Periodic Resource
Given ﬁxed pattern periodic resource R = (π, θ), it is a
continuous
periodic resources if and only if ∀i ∈ [0, θ −
1], k ∈ N+, PR(i + k × π) = 1.
Synchronized Periodic Resource
Two periodic resources are synchronized if the start points
of the two periods are the same.
Equivalent Single Resource Transformation of Periodic
Resource Set (I(Ψ))
For a set of periodic resource Ψ = {R1, R2, ..., Rn}, its
equivalent single periodic resource transformation is deﬁned
as I(Ψ) with ∀t ∈ [0, LCM1≤i≤n(πi)], PI(Ψ)(t) = PR1(t) ∨
PR2(t) ∨ ... ∨ PRn(t).
B. Problem Formulation
Given a set of periodic resources Ψ = {R1, R2, ..., Rn}
with Ri = (πi, θi) and a periodic task set Γ = {τ1, τ2, ..., τm},
decide schedulability test if the task set is schedulable on the
resource set with EDF and RM, respectively.
We take two steps to address the problem, ﬁrst, transform
the periodic resource set into an equivalent single periodic re-
source (Section IV), and second apply extended single periodic
resource schedulability test (Section V) to decide whether the
given task set is schedulable on the given resources.
It is worth pointing out that the discrete time system is
assumed, i.e., ∀i pi, ei, πi, θi ∈ N. We also assume that tasks
can not be executed parallelly, i.e., at each time instance
t, tasks can only execute on one resource. Further more,
we assume there is no overhead for task migration between
different resources.
IV. INTEGRATION OF PERIODIC RESOURCES
Based on the deﬁnition of equivalent single periodic re-
source of a periodic resource set Ψ = {R1, R2, ..., Rn}, i.e.,
PI(Ψ) = PR1(t) ∨ PR2(t) ∨ ... ∨ PRn(t), we can develop an
algorithm to calculate I(Ψ) as illustrated in Algorithm 1.
Fig. 1.
Algorithm 1
With Algorithm 1, we can obtain the equivalent single
resource of a periodic resource set. However, Algorithm ??
needs to check whether each time unit is available or not
within the hyperperiod λ, which is time consuming. In the
following, we ﬁrst give the upper and lower bound analysis
of the equivalent single periodic resource’s capacity, and
then propose closed-form formula to directly calculate the
36
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

equivalent single periodic resource if the periodic resources
satisfy certain conditions.
Lemma 1: Given
a
set
of
periodic
resources
Ψ
=
{R1, R2, ..., Rn}, then the capacity of its equivalent single pe-
riodic resource, i.e., C(I(Ψ)), satisﬁes the following condition
max{C(Ri), 1 ≤ i ≤ n} ≤ C(I(Ψ)) ≤ min{1,
n
X
i=1
C(Ri)}
(1)
Proof: By deﬁnition, PI(Ψ)(t) = PR1(t) ∨ PR2(t) ∨ ... ∨
PRn(t), hence, we have PI(Ψ)(t) ≥ max{PRi(t), 1 ≤ i ≤ n},
therefore, max{C(Ri), 1 ≤ i ≤ n} ≤ C(I(Ψ)).
If the available time slots of each periodic resource are not
overlapped with each other, then the capacity C(I(Ψ)) is the
sum of each individual periodic resource, i.e., C(I(Ψ)) =
Pn
i=1 C(Ri). However, if the available time slots of any
two periodic resources are overlapped, then C(I(Ψ))
<
Pn
i=1 C(Ri). In addition, the resource capacity cannot exceed
1, so we have C(I(Ψ)) ≤ min(1, Pn
i=1 C(Ri)).
It is worth pointing out that both the upper and lower
bounds are tight bounds. For instance, with R1(3, 2) and
R2(3, 1) with PR1(0) = PR1(1) = 1, PR1(2) = 0 and
PR2(0) = 0, PR2(1) = PR2(2) = 1. Then for the equivalent
single resource I(R1, R2), C(I(R1, R2)) = C(R1). Similarly,
with R1(3, 2) and R2(3, 1) and PR1(0) = PR1(1) = 1,
PR1(2) = 0 and PR2(0) = PR2(1) = 0, PR2(2) = 1.
Then for the equivalent single resource I(R1, R2), we have
C(I(R2, R2)) = C(R1) + C(R2).
When the periods of periodic resources are mutually prime,
we can derive the following Lemmas to simplify the calcula-
tion of periodic resource integration.
We ﬁrst consider a simple case where one of the periodic
resource has only 1 time slot available in each period.
Lemma 2: Given two ﬁxed pattern periodic resource R1 =
(π1, θ1) and R2 = (π2, 1). If π1 and π2 are mutually prime,
then I(R1, R2) = (π′, θ′), where π′ = π1 · π2 and θ′ = π2 ·
θ1 + π1 − θ1.
Proof: Suppose the pattern of R2 is PR2(k + i · π2) = 1
where i is the number of period. That is, the kth slot of every
period π2 is available. We ﬁrst assume the following condition
hold and will prove it later:
• if i1 ̸= i2 ∧ i1, i2 ∈ {0, 1, ..., π1 − 1}, then
((k + i1 · π2)mod π1) ̸= ((k + i2 · π2)mod π1)
(2)
The condition indicates that ∀k ∈ {0, 1, ..., π1 − 1}, the kth
time slot of resource R1’s period π1 is overlapped with the
available time slot of R2 once within their hyperperiod π1·π2.
As within the hyperperiod π1·π2, π2·θ1 available time slots
are provided by R1, π1 · 1 available time slots are provided
by R2, while θ1 time units are overlapped, hence, we have
θ′ = θ1 · π2 + π1 · 1 − θ1 · 1.
Now, we prove that the above assumption holds.
Suppose that:
∃i1, i2 : (k + i1 · π2)mod π1) = ((k + i2 · π2)mod π1)
then we have: (k + i1 · π2)mod π1 − (k + i2 · π2)mod π1 = 0,
which implies
(k + i1 · π2 − (k + i2 · π2)) mod π1 = 0
(3)
hence, we have (i1 − i2)π2 mod π1 = 0.
Since i1 ̸= i2 and i1, i2 ∈ {0, 1, ..., π1 − 1}, then π1 and
π2 are not mutually prime, which contradicts our assumption
that π1 and π2 are mutually prime. Therefore, our assumption
holds.
Lemma 2 gives the formulation to calculate the integration
of two periodic resources when one of them only has one
time slot available within each period, next, we remove this
assumption and generalize the analysis to the integration of
two ﬁxed pattern periodic resources with arbitrary capacities.
Lemma 3: Given two ﬁxed pattern periodic resources
R1(π1, θ1) and R2(π2, θ2), if π1 and π2 are mutually prime,
then I(R1, R2) = (π′, θ′) where π′ = π1 · π2 and θ′ =
θ1 · π2 + θ2 · π1 − θ1 · θ2.
Proof: According to Lemma 2, if R2 has only one time
slot available with each period, then R1 and R2 have θ1
available time slots are overlapped within each hyperperiod
π1 · π2. Then if R2 has θ2 available time slots within each
period, applying the similar proof of Lemma 2, we have θ1·θ2
available time slots are overlapped within each hyperperiod
π1 · π2. Since the total available time slots of R1 and R2 are
θ1 · π2 + θ2 · π1, hence, we have θ′ = θ1 · π2 + θ2 · π1 − θ1 · θ2.
Lemma 3 integrates two periodic resource, the following
lemma generalize the calculation to multiple resources.
Lemma 4: Given a periodic resource set {R1, R2, ..., Rn}
with Ri = (πi, θi), if all the periods of the periodic re-
sources in this set are mutually prime with each other, then
I(R1, R2, ..., Rn) = (π′
n, θ′
n), where
θ′
n =
(
θ1 · π2 + θ2 · π1 − θ1 · θ2 if n = 2
θ′
n−1 · πn + θn · π′
n−1 − θn · θ′
n−1 if n > 2
(4)
where π′
n = Qn
i=1 πi.
Proof: With Lemma 3, we can obtain the equivalent single
periodic resource of R1 and R2, i.e., I(R1, R2) = (π1 ·π2, θ1 ·
π2 + θ2 · π1 − θ1 · θ2). By treating I(R1, R2) as a single
resource, applying Lemma 3 to integrate resource R3, we have
I(R1, R2, R3) = (Q3
i=1, θ′
2 ·π3 +θn ·π′
2 −θ3 ·θ′
2). Follow the
procedures, repeating the above steps until the resource Rn
ﬁnishes the proof.
The previous lemmas have a constraint that resource peri-
ods are mutually prime. We now remove the constraint and
discuss a general case for integrating two synchronized and
continuous periodic resources.
Lemma 5: Given two synchronized and
continuous
pe-
riodic resource R1(π1, θ1) and R2(π2, θ2). Without loss of
generality, we assume π1 ≥ π2 and their hyperperiod be
π′. Let taili = (i + 1)π1modπ2, i ∈ [0, π′/π1 − 1] and
ki = ⌊ π1−θ1−taili
π2
⌋, then integrated resource capacity within
a hyperperiod is:
37
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

θ′ =
π′/π1
X
i=1
θ1
+ max{min{θ2, taili} − max{θ1 − (π1 − taili), 0}, 0}
+ max{kiθ2 + max{0, π1 − taili − (ki + 1) + θ2 − θ1}, 0}
(5)
The proof of the lemma is illustrated in our technical
report [16] .
V. SCHEDULABILITY ANALYSIS ON SINGLE PERIODIC
RESOURCE
For self-containment, we ﬁrst introduce the existing work
about schedulability test on single periodic resource given
in [1].
A. Existing Schedulability Tests on Single Periodic Resource
Given a periodic resource R, the resource
supply bound
function sbfR(t) represents the minimum available time that
resource R can guarantee to supply within any time interval
of length t. It can be calculated as below [17]:
sbfR(t) =
(
t − (k + 1)(π − θ) ift ∈ [(k + 1)π − 2θ, (k + 1)π − θ]
(k − 1)π otherwise
(6)
where k = max(⌈(t − (π − θ))/π⌉, 1).
In order to meet timing constraints of task set Γ, a demand
bound functions dbfEDF(Γ, t, τi) and dbfRM(Γ, t) under EDF
and RM scheduling policies, respectively,
represent
the
maximum possible resource demand that τi(τi ∈ Γ) may
required within time interval of length t in order to meet the
timing constraint. They can be calculated as below [17]:
dbfEDF (Γ, t) =
X
τi∈Γ
 t
pi

ei
(7)
dbfRM(Γ, t, τi) = ei +
X
τk∈HP (τi)
 t
pk

ek
(8)
where HP(τi) is the set of higher-priority tasks than τi ∈ Γ.
With the resource demand bound functions and resource
supply bound functions, the schedulability test under EDF and
RM scheduling policies can be represented as follows:
Lemma 6: (Theorem 4.1 in [1]) Given Γ = {τ1, ..., τn} and
a periodic resource is R, the task set Γ is schedulable under
EDF if and only if
∀t : 0 < t ≤ LCMΓ : dbfEDF (Γ, t) ≤ sbfR(t)
(9)
where LCMΓ is the least common multiple of pi of all τi ∈ Γ.
Lemma 7: (Theorem 4.2 in [1]) Given Γ = {τ1, ..., τn} and
a periodic resource R, the task set is schedulable under RM
if and only if
∀τi ∈ Γ, ∃ti ∈ [0, pi] :
dbfRM(Γ, ti, τi) ≤ sbfR(ti)
(10)
It is not difﬁcult to see that both the schedulability tests are
in continuous time domain, hence, they are only of theoretic
value and can not be directly applied as schedulability tests in
practice.
B. Discrete Time Domain Schedulability Tests
In this subsection, we give corresponding discrete time
domain schedulability tests.
1) Schedulability Test under EDF:
Lemma 8: Given Γ = {τ1, ..., τn} and a periodic resource
R, the task set Γ is schedulable under EDF if and only if :
∀t ∈ Ω : dbfEDF (Γ, t) ≤ sbfR(t)
(11)
where Ω is a time point set deﬁned in
(12) and sorted in
ascending order:
Ω =
n
[
j=1
Φj, Φj = {1, 2, ..., LCMΓ/pj}
(12)
where LCMΓ is the least common multiplier of all pi with
τi ∈ Γ.
Proof: We prove this Lemma by proving (11) ↔ (6).
We ﬁrst prove formula (11) → (6) and we prove by
contradiction.
Suppose that formula (11) → (6) does not hold, i.e.,
∀t ∈ Ω, dbfEDF (Γ, t) ≤ sbfR(t)
but,
∃t′, 0 < t′ < LCMΓ, dbfEDF (Γ, t′) > sbfR(t′)
Without loss of generality, we further assume ti < t′ < ti+1,
where ti and ti+1 are consecutive points in Ω.
As both demand and supply bound functions are non-
decreasing functions [17], hence, we have
sbfEDF (t′) ≥ sbfEDF (ti)
(13)
and,
dbfEDF (Γ, t′) ≥ dbfEDF (Γ, ti)
(14)
Based on the assumptions, we have:
dbfEDF (Γ, ti) ≤ sbfEDF (ti)
(15)
and,
dbfEDF (Γ, t′) > sbfEDF (t′)
(16)
From formula (13) and formula (15), we have
sbfEDF (t′) ≥ sbfEDF (ti) ≥ dbfEDF (Γ, ti)
(17)
Since demand bound function dbfEDF (Γ, t) is a step function
and the value is only changed at t ∈ Ω, we have
dbfEDF (Γ, t′) = dbfEDF (Γ, ti)
(18)
38
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

From (17) and (18), we have
sbfEDF (t′) ≥ dbfEDF (Γ, t′)
(19)
which contradicts the assumption of (15).
Now, we prove (6) → (11). This proof is straightforward.
Since Ω ⊆ [0, LCMΓ], (6) → (11) holds.
2) Schedulability Test under RM:
Lemma 9: Given a task set Γ = {τ1, ..., τn} and a periodic
resource R, the task set is schedulable under RM if and only
if
∀τi ∈ Γ, ∃t0 ∈ Ωi : dbfRM(Γ, t0, τi) ≤ sbfR(t0)
(20)
Ωi is a time point set deﬁned in (21):
Ωi =
[
∀τk∈HP(τi)
Φτk, Φτk = {1, 2, ..., ⌊(pi/pk)⌋}
(21)
where HP(τi) is a task set which contains the tasks has higher
priority than τi under RM scheduling policy.
Proof: We prove this Lemma by proving (7) ↔ (20).
We ﬁrst prove (7) → (20).
According to the deﬁnition of demand bound function
dbfRM(Γ, t, τi), i.e. formula (8), it is a staircase function and
only rises at the time instants t∗ + ϵ, where t∗ ∈ Ωi and ϵ is
very small and could be closed to 0. In addition, the supply
bound function sbfR(t) is non-decreasing, hence, we have:
∃t0 ∈ Ωi :dbfRM(Γ, t0, τi) − sbfR(t0)
= min{dbfRM(Γ, t, τi) − sbfR(t)|0 ≤ t ≤ pi}
Hence, if
∃ti ∈ [0, pi] :
dbfRM(Γ, ti, τi) ≤ sbfR(ti)
then
dbfRM(Γ, t0, τi)−sbfR(t0) ≤ dbfRM(Γ, ti, τi)−sbfR(ti) ≤ 0
therefore, we have:
∃t0 ∈ Ωi : dbfRM(Γ, t0, τi) ≤ sbfR(t0)
We now prove (20) → (7).
This proof is straightforward, since Ωi ⊆ [0, pi], formu-
la (20) → (7) holds.
VI. EXPERIMENTS
In this section, we empirically study the behaviors of
periodic resources integration.
The ﬁrst experiment illustrates how the capacity of integrat-
ed periodic resource varies under different periodic resource
set. In order to observe the variation of integrated periodic
resource, we integrate two periodic resources (R1, R2) un-
der different scenarios. For each periodic resource, we set
nine different capacities ranging from 0.1 to 0.9. Hence,
we have total 81 combinations for two periodic resources
under different capacities. For each combination, we randomly
generate 100 pair of periodic resources which do not have
ﬁxed patterns. Fig. 2 shows the variations of average integrated
periodic resource capacity. X-axis represents the capacity of
periodic resource R2 and Y-axis represents the capacity of
the integrated periodic resource. Each curve represents the
variation of the capacity of integrated periodic resource that
integrated by a ﬁxed capacity periodic resource R1 and R2
which has changing capacity.
As indicated by Fig. 2, in general, the integrated resource
has larger the capacity than each of composing periodic
resource. However, integration of periodic resources with
different capacities have different impact on the capacity
of integrated periodic resource. For instance, two periodic
resources with both capacities equal to 0.1 produce a integrated
periodic resource with capacity 0.19, which is almost equal to
the summation of the two individual resources. However, two
periodic resources with both capacities equal to 0.9 produce
a integrated periodic resource with capacity 0.99. About 90%
of the periodic resource’s capacity is wasted. This observation
brings an interesting question: what type of period resources
shall be integrated together to result in the most beneﬁt?
To get an insight about the question, we ﬁrst need to
understand what is the beneﬁt. We ﬁrst deﬁne “beneﬁt” as
capacity increase ratio ρ as:
ρ(I(R1, R2) = C(I(R1, R2)) − max(C(R1), C(R2))
max(C(R1), C(R2))
(22)
Fig. 3 depicts the integrated periodic resources’ capacity
increase ratio. There is a interesting observation that if one
periodic resource integrates with another one that has the
same capacity, the integrated periodic resource always has the
highest capacity increase ratio. Furthermore, the closer the two
periodic resources’ capacities are, the higher the increase ratio.
Fig. 2.
Integrated Resource Capacity
Fig. 3.
Capacity Increase Ratio
From the previous observations, it is not difﬁcult to see that
the integration causes waste of periodic resources’ capacities.
Hence, we are also interested in knowing how integration
causes waste. We measure waste as the overhead of an
integration, which is deﬁned as:
O(I(R1, R2)) = (C(R1) + C(R2)) − C(I(R1, R2))
C(R1) + C(R2)
(23)
Fig. 4 depicts the overhead. It clearly indicates that in-
tegrating small capacity periodic resource has lower waste
ratio compared with resources with large capacities. Hence,
we should avoid integrating large capacity periodic resources.
39
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

Fig. 4.
Integration Overhead
Fig. 5.
Resource Number Inﬂuence
Till now, our experiments are mainly focusing on integrating
two periodic resources. Next, we investigate the properties of
periodic resource integration by integrating more than two
resources. In this set of experiments, we ﬁx the periodic
resource set’s total capacity, and then change the number of
periodic resources. For each number, we randomly distribute
the resource set’s total capacity to each periodic resource.
For each periodic resource set’s total utilization and each
number of periodic resources in the resource set, we repeat
the experiment 50 times. Fig. 5 shows the average value of
the results. The X-axis represents the total capacity for each
periodic resource set and Y-axis represents the capacity of
integrated periodic resource.
As shown in Fig. 5, the resource integrated by two periodic
resources has higher capacity compared with the resource
integrated by three periodic resources. This is because the
overlap situation between periodic resources happens more
frequent when the number of periodic resources increases and
hence makes the overhead larger.
VII. CONCLUSION AND FUTURE WORK
In this paper, we addressed the issue of scheduling a period-
ic task set on multiple periodic resources. We ﬁrst transformed
a set of periodic resources into an equivalent single periodic
resources and then applied extended schedulability test of
multiple tasks on this single resource. We also investigated
the properties of periodic resource integration and provide
theoretic analysis for the integrated periodic resource capacity.
In addition, we extended the existing schedulability test for
periodic tasks on single periodic resource from continuous
time domain to discrete time domain. We further experi-
mentally studied the behavior and performance of periodic
resource integration and pointed out some interesting observa-
tions: 1) increasing of the number of periodic resources does
not necessarily increase the integrated resource’s capability;
2) integrating small capacity periodic resources gains more
beneﬁt compared to the integrating large capacity ones; and 3)
integration of two periodic resources that have same capacities
can maximize beneﬁt.
Our future work is to take the task migration overhead
into consideration and implement the proposed algorithm on
the real virtualization platform, such as XEN, to utilize the
resources of different virtual machines.
ACKNOWLEDGEMENT
The research is supported in part by NSF under grant
number CAREER 0746643 and CNS 1018731.
REFERENCES
[1] I. Shin and I. Lee, “Compositional real-time scheduling framework with
periodic model,” vol. 7, no. 3.
ACM, 2008, pp. 30–62.
[2] S. Shirero, M. Takashi, and H. Kei, “On the schedulability conditions on
partial time slots,” in Real-Time Computing Systems and Applications,
1999. RTCSA’99. Sixth International Conference on.
IEEE, 1999, pp.
166–173.
[3] A.K. Mok and X. Alex, “Towards compositionality in real-time resource
partitioning based on regularity bounds,” in Real-Time Systems Sym-
posium, 2001.(RTSS 2001). Proceedings. 22nd IEEE.
IEEE, 2001, pp.
129–138.
[4] A.K. Mok , X. Feng, and D. Chen, “Resource partition for real-time
systems,” in Real-Time Technology and Applications Symposium, 2001.
Proceedings. Seventh IEEE.
IEEE, 2001, pp. 75–84.
[5] Y. Li, A. Cheng, and A.K. Mok, “Regularity-based partitioning of
uniform resources in real-time systems,” in Embedded and Real-Time
Computing Systems and Applications (RTCSA), 2012 IEEE 18th Inter-
national Conference on.
IEEE, 2012, pp. 368–377.
[6] J. Lee et al., “Realizing compositional scheduling through virtual-
ization,” in Real-Time and Embedded Technology and Applications
Symposium (RTAS), 2012 IEEE 18th.
IEEE, 2012, pp. 13–22.
[7] W. Chu, “A study of asynchronous time division multiplexing for time-
sharing computer systems,” in Proceedings of the November 18-20,
1969, fall joint computer conference.
ACM, 1969, pp. 669–678.
[8] N. Fisher and F. Dewan, “Approximate bandwidth allocation for com-
positional real-time systems,” in Real-Time Systems, 2009. ECRTS’09.
21st Euromicro Conference on.
IEEE, 2009, pp. 87–96.
[9] F. Dewan and N. Fisher, “Approximate bandwidth allocation for ﬁxed-
priority-scheduled periodic resources,” in Real-Time and Embedded
Technology and Applications Symposium (RTAS), 2010 16th IEEE.
IEEE, 2010, pp. 247–256.
[10] I. Shin and I. Lee, “Periodic resource model for compositional real-time
guarantees,” in Real-Time Systems Symposium, 2003. RTSS 2003. 24th
IEEE.
IEEE, 2003, pp. 2–13.
[11] S. Baruah, J. Goossens, and G. Lipari, “Implementing constant-
bandwidth servers upon multiprocessor platforms,” in Real-Time and
Embedded Technology and Applications Symposium, 2002. Proceed-
ings. Eighth IEEE, 2002, pp. 154–163.
[12] B. Sprunt, L. Sha, and J. Lehoczky, “Aperiodic task scheduling for hard-
real-time systems,” Real-Time Systems, vol. 1, no. 1, 1989, pp. 27–60.
[13] J.K. Strosnider, J.P. Lehoczky, and L. Sha, “The deferrable server
algorithm for enhanced aperiodic responsiveness in hard real-time envi-
ronments,” Computers, IEEE Transactions on, vol. 44, no. 1, Jan 1995,
pp. 73–91.
[14] L. Sha, J. P. Lehoczky, and R. Rajkumar, “Solutions for some practical
problems in prioritized preemptive scheduling.” in RTSS, 1986, pp. 181–
191.
[15] X. Feng and A.K. Mok, “A model of hierarchical real-time virtual
resources,” in Real-Time Systems Symposium, 2002. RTSS 2002. 23rd
IEEE.
IEEE, 2002, pp. 26–35.
[16] X. Hua, Z. Li, H. Wu and S. Ren, “Tech report: Scheduling periodic
tasks on multiple periodic resources,” in http://gauss.cs.iit.edu/∼code/
techreports/PeriodicIntegration.pdf.
IIT, 2014.
[17] I. Shin and I. Lee, “Compositional real-time scheduling framework,” in
Real-Time Systems Symposium, 2004. Proceedings. 25th IEEE Interna-
tional, 2004, pp. 57–67.
40
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-365-0
INFOCOMP 2014 : The Fourth International Conference on Advanced Communications and Computation

