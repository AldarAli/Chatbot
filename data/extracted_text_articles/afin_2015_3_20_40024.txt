Energy- and Priority-Aware Trafﬁc Engineering for Content-Centric Networking
Ling Xu, Tomohiko Yagyu
Cloud System Research Lab
NEC Corporation, Japan
Email: lingxu@gisp.nec.co.jp, yagyu@cp.jp.nec.com
Abstract—Content-Centric Networking (CCN) is a new network
architecture aiming to solve many fundamental problems of
IP networks. We are interested in the application of CCN
carrier networks during natural disasters. During these times,
carrier networks need to save energy until reinforcement arrives.
Trafﬁc delivery is prioritized, where high-priority trafﬁc such
as disaster news receives superior transmission quality. Multiple
Tree-based Trafﬁc Engineering (MTTE), a recently proposed
trafﬁc engineering scheme, realized the goal of energy-saving by
forwarding trafﬁc on minimal spanning trees. In addition, several
priority-aware transmission schemes were proposed recently.
However, no CCN communication scheme that realizes both
energy-saving and prioritized routing has ever been considered.
In this paper, we propose Priority-aware MTTE (PMTTE) to
ﬁll this vacuum. Given a certain energy consumption limitation,
PMTTE optimizes the transmission quality of the high-priority
trafﬁc ﬁrst. Then, it uses the remaining energy consumption quota
to improve the low-priority trafﬁc’s quality. We compared the
performance of PMTTE against priority queue-enabled MTTE
(as a naive energy- and priority-aware CCN trafﬁc engineering
scheme). Simulation shows that compared with MTTE, PMTTE
can improve the performance of high-priority trafﬁc by up to
80%, and of low-priority trafﬁc by more than 30%.
Keywords–content-centric networking; priority-aware; energy
efﬁciency; multiple trees
I. INTRODUCTION
A. Content-Centric Networking
Content-Centric Networking (CCN) is a network architec-
ture that is proposed recently for solving IP architecture’s
problems [1]. Conventional IP networks focus on retrieving
needed contents from certain hosts. Nowadays, however, users
are only concerned about the contents, not from where to
obtain them. In CCN networks, each piece of content is given a
unique name. Users tell the networks the names of the needed
contents. The networks independently identify hosts providing
the contents and then fetch the contents to the users.
One of CCN’s main features is that routers carry caches
to reduce redundant trafﬁc. Each host in the network may
provide some contents and this host is called the producer
of its contents. The producer splits each of its contents into
a set of chunks. The producer also registers the name of
each of its contents on each router - a process called content
publishing. Hosts that request the content is called the content’s
consumers. When a consumer needs a piece content, it sends
one request (called an Interest) for each chunk of the content.
The Interest is then forwarded to the producer according to
the information the producer registered on routers. When the
producer receives an Interest, it sends the requested chunk back
to the consumer. Each router along the chunk’s forwarding
route tries to store the chunk in its cache. The next time the
router receives an Interest for the same content, if the chunk
is still in its cache, the router replies directly with the chunk
to the consumer.
We are interested in CCN’s application in carrier networks
during natural disasters and hope to make the CCN network
both energy-efﬁcient and priority-aware.
On one hand, networks consume a huge amount of energy,
and improving network energy efﬁciency has been a popular
research topic in recent years. In CCN networks, in-router
caches cost extra energy. Hence, the networks generally con-
sume more energy than conventional IP networks.
Xu et al. proposed Multiple Tree-based Trafﬁc Engineering
(MTTE) to reduce CCN’s energy consumption [2]. Research
has found that network interfaces (shortened as faces hence-
forth) of routers in modern networks are generally underuti-
lized [3]. The idea of Xu et al. is to shut down as many faces of
routers as possible. MTTE splits trafﬁc on multiple tree-like
networks that are generated based on the physical network.
The trees are generated in such a way that the number of
faces included in the trees is minimized. Since trees generally
contain fewer faces than the original physical network, energy
can be conserved.
On the other hand, real-world carrier networks deliver
trafﬁc of different priorities. During natural disasters, disaster
alarms and news broadcasting are more important than en-
tertainment TV programs. When disasters occur, the network
trafﬁc usually surges suddenly. MTTE is priority-agnostic and
cannot ensure the performance of the high-priority trafﬁc.
Several priority-aware transmission schemes have been
proposed for CCN networks recently. However, to the best
of our knowledge, none of the existing proposals realizes both
energy- and priority-aware transmission. Through this paper,
we hope to ﬁll this vacuum.
B. Research Goal
In this paper, we assume that the network delivers two
kinds of trafﬁc: high-priority and low-priority. Examples of
the high-priority trafﬁc include live streaming such as disaster
news. Such trafﬁc is mission-critical and has to be delivered
to users stably before certain deadlines. For examples, during
the Great East Japan Earthquake [4], tsunami hit the seashore
several minutes after the earthquake. If tsunami news can arrive
at people in time, thousands of lives can be saved. The low-
priority trafﬁc can be other types of communication like binary
ﬁle transmission. Compared with the high-priority trafﬁc, low-
priority trafﬁc is less urgent and can be delayed or dropped.
The simplest idea to implement priority-aware transmission
is to always deliver the high-priority trafﬁc ﬁrst using priority
47
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

queues. By “using priority queues,” we mean that each face
contains one high-priority queue and one low-priority queue.
High-priority (low-priority) packets are piled on the high-
priority (low-priority) queue in a ﬁrst-in and ﬁrst-out manner.
The face always sends packets in the high-priority queue before
forwarding any packets in the low-priority queue. However,
this approach would result in serious quality degradation of
the low-priority trafﬁc.
Through this research, we aim to create a trafﬁc engi-
neering scheme that provides these properties: (1) it reduces
energy consumption of the whole network system; (2) given a
upper bound for the system energy consumption and a lower
bound for the transmission quality of the high-priority trafﬁc,
it guarantees both the bounds without greately sacriﬁcing the
quality of the low-priority trafﬁc.
C. Proposal Summary
When a consumer requests a piece of content, we use
session to denote the process in which the consumer receives
all chunks. Each Interest belongs to one certain session. We
call sessions transmitting high- (low-) priority contents the
high- (low-) priority sessions.
Sessions that have at least one chunk not returned before
a certain deadline φdead are regarded as failed sessions. We
deﬁne Session Failure Rate (SFR) as the ratio of failed sessions
among all sessions. Session failure rate is used as the main
transmission quality metric in this paper.
We propose Priority-aware MTTE (PMTTE), and com-
pare the performance of PMTTE with priority queue-enabled
MTTE (as a naive priority and energy-aware CCN transmis-
sion scheme). Simulation shows that, compared with MTTE,
PMTTE reduces the session failure rate of high-priority trafﬁc
by 80% and of low-trafﬁc by 30%.
The rest of this article is organized as follows: Section
II highlights relevant, prior literature in this ﬁeld; Section
III brieﬂy introduces MTTE since MTTE is the base of
PMTTE; Section IV introduces PMTTE’s design and Section
V evaluates PMTTE’s performance; and Section VI is the
conclusion.
II. RELATED WORK
Several priority-aware transmission schemes have been pro-
posed for CCN networks recently. However, to the best of our
knowledge, no scheme that balances the trade-off between the
network energy consumption and the transmission quality of
prioritized trafﬁc has been considered yet. Kim et al. proposed
reserving bandwidth for the high-priority trafﬁc [5] where
their communication scheme is similar to the IntServ band-
width reservation scheme for IP networks [6]. During natural
disasters, important messages need to be delivered to more
people. Routers have limited capacity and cannot forward all
packets. Psaras et al. proposed that packets should be given
names that specify their priorities [7]. Routers independently
decide whether to forward a packet according to the routers’
remaining capacities and the packet’s priority. The objective
of this research is orthogonal from ours. Immediately after
a natural disaster, communication trafﬁc may dramatically
increase and overload the network. Psaras et al. proposed pri-
oritizing contents according to the importance of the contents
to the contents’ consumers [8]. Somaya et al. used prioritized
queues for delivering packets with different deadlines [9].
Trafﬁc is classiﬁed into multiple groups. Routers maintain
queues for accommodating different groups and packets with
near deadlines are delivered ﬁrst. Tsilopoulos et al. realized
that for streaming contents in Information-Centric Networking
(synonym of CCN), it is inefﬁcient for consumers to request
each chunk. They suggested that routers work as proxies that
request content for consumers. [10]
Research effort has been made in assessing CCN’s energy
efﬁciency using simulation [11][12]. Some research compared
the energy efﬁciency of CCN with existing IP-based content
delivery techniques such as content delivery networking and
peer-to-peer networking. Song et al. [13] noticed that in
modern carrier networks, a great amount of trafﬁc is generated
from the edge. [13] uses GreenTE - an existing energy-aware
TE mechanism designed for IP networks [3] - for reducing
energy consumption of the core network, and uses CCN for
eliminating redundant trafﬁc generated by the edge network.
However, Song et al.’s approach does not reduce the energy
consumption of CCN itself.
III.BACKGROUND KNOWLEDGE OF MTTE
In CCN, each router contains a Forwarding Information Base
(FIB). An FIB contains a set of entries and each entry is a
mapping from one preﬁx to one or multiple router face(s).
Suppose that the FIB contains two entries fe0=‘‘/Asia/’’:{
face2} and fe2=‘‘/Asia/Tokyo/’’:{face2,face5} and that an
incoming packet has a name “/Asia/Tokyo/music.mp3.” The
router ﬁnds the face whose FIB entry’s preﬁx matches the
packet’s name and forwards the packets via this face.
A. Tree-Based Congestion Control
In MTTE, the network contains a central server called the
controller. The controller maintains a database named the tree
set. Initially, the controller creates one spanning tree based on
the physical network topology and adds the tree into the tree
set. The controller sends the tree set to routers. Routers update
their respective FIBs so that they can forward the packets along
the trees.
When congestion is about to occur, the controller creates
more trees to spread the trafﬁc and mitigate congestion. Specif-
ically, routers periodically report the utilization of their faces
to the controller. The controller calculates the Congestion Rate
(CR) as the maximal value of the received utilization. When
CR > φtcc, where φtcc is a system parameter, the controller
creates another tree and adds it to its tree set. This mechanism
is termed as Tree-Based Congestion Control (TCC).
B. Face Weight Calculation
We use STs to denote the tree set in MTTE. Faces included
in the tree set are called live faces, denoted by E(STs). Faces
not included the tree set are called free faces.
When the controller creates a new tree it calculates the
weight of each face. Based on the weights, the controller runs
Kruskal’s minimal spanning tree algorithm. The controller then
asks routers to evenly deliver trafﬁc on trees in the new tree
set.
To reduce energy consumption, the new tree should not
dramatically increase the number of live faces. To this end,
we call the live faces with utilization higher (lower) than φce
the congested faces (uncongested faces). The controller assigns
weights to faces so that the uncongested faces are chosen ﬁrst,
free faces are chosen later, and congested faces are chosen last.
48
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

Namely, underutilized live faces are more likely to be used to
create the new tree, which suppresses energy consumption.
A critical design in MTTE is that the diameters of the
routing trees must be suppressed. Otherwise, when the diame-
ters are large, not only is the transmission delay increased but
also the cache utilization efﬁciency is decreased. Congestion is
more likely to occur and the transmission quality deteriorates
quickly.
MTTE uses a Betweenness-based heuristic algorithm to
suppress the diameters of the routing trees. For each face e, the
controller computes its “face betweenness” (e.be) - a widely
used metric in graph theory [14]. Informally, e.be represents
the number of the shortest paths in the entire network that
traverse e. Imagine that routers c and p are a pair of consumer
and producer, and sp is the shortest path between c and
p on G. Intuitively, if more faces with high betweennesses
are added to st, the probability that the data transmitted on
st between c and p are delivered along the shortest path is
higher. Accordingly, the diameter of st will be small. Based
on this observation, in MTTE, the controller selects faces
with higher betweennesses ﬁrst. When the controller creates
the initial tree, for each face e, it calculates e.eb, and sets
e.weight = 1/e.eb. When subsequent trees are created, the
controller makes the weights of uncongested faces directly
proportional to the faces’ utilization and makes the weights of
free faces inversely proportional to the faces’ betweennesses.
The complete tree creation algorithm is shown in Algorithm
1.
C. Hash-Based Trafﬁc Splitting
Each time the controller changes the tree set, it asks routers
to update their FIBs. First, the controller sends the tree set to
all routers. Suppose that H is a collision-proof hash function
preloaded on each router, and N(d) is the name of content
d. Routers update their FIBs so that d is forwarded on the
H(N(d))%K-th tree, where K is the size of the new tree set.
After the update, packets are generally evenly delivered on
each tree and the congestion can be mitigated.
D. Tree Removal
When CR < φuu, where φuu is a preloaded system
parameter, the controller removes the last tree in the tree set.
The controller sends the new tree set to all routers, and asks
routers to update their FIBs. Routers shut down their adjacent
faces that are not included in the new tree set. Accordingly,
energy consumption can be reduced.
IV.PMTTE: THE DESIGN
A. Problem Analysis
PMTTE uses priority queues-enabled MTTE as the base
architecture. This architecture has two problems:
First, priority queues alone are not sufﬁcient to ensure
the transmission quality of the high-priority trafﬁc. When
the network has bandwidth bottlenecks, high-priority packets
will drop anyway. MTTE works well in resolving bandwidth
bottlenecks by creating more trees before congestion really
occurs. Hence, in MTTE, the main reason that routers drop
packets can be that the trafﬁc changes so fast that no sufﬁcient
trees are created. Certainly we can accelerate tree creation by
using smaller φtcc. However, creating more trees consumes
more energy.
1: EUE = Faces in E(STs) with utilization <= φce.
2: ECE = Faces in E(STs) with utilization > φce.
3: Efree: Faces not in E(STs)
4: Umax = maximum of face utilization of EUE
5:
6: The controller calculates the betweenness e.eb of each face
e.
7:
8: if |STs| = 0 then
9:
// The controller is creating the initial tree
10:
for all e in the network do
11:
e.weight = 1/e.eb
12:
end for
13: else
14:
// The controller creates a new tree for mitigating
congestion
15:
for all e ∈ EUE do
16:
e.weight = e.utilization
17:
end for
18:
for all e ∈ Efree do
19:
e.weight = Umax + 1/e.eb
20:
end for
21:
for all e ∈ ECE do
22:
e.weight = Umax + 2
23:
end for
24: end if
25:
26: The controller generates a minimal cost spanning tree st
using Kruskal’s algorithm on the whole network.
27: if st is different from all the existing trees then
28:
return st
29: else
30:
return FAILED
31: end if
Figure 1: Based on current face utilization, the controller
generates a new spanning tree (Algorithm 1 from [2]).
Second, in MTTE, routing trees are created in such a
way that they heavily overlap each other for reducing energy
consumption. Since priority queues aggressively drop low-
priority packets, the transmission quality of the low-priority
trafﬁc will be heavily impacted when congestion occurs.
We propose Priority-Dependent Routing (PDR) and Face
Separation (FS) to address these problems. Algorithm 2 lists
the PMTTE algorithm’s work ﬂow and functionalities.
B. Priority-Independent Routing
We assume that each packet of the high- (low-) priority
trafﬁc contains an attribute tag that speciﬁes content’ priorities,
as done in [7]. Routers can know the priorities of incoming
packets by checking priority tags.
To improve the transmission quality of the high-priority
trafﬁc, we propose PDR. PDR forwards the high- and low-
priority trafﬁc on independent trees. We use whole trafﬁc to
denote the total of the high- and low-priority trafﬁc. We call
the trees used for forwarding the high- (low-) priority trafﬁc
the H (L) trees. Analogously, MTTE only has one tree set (for
the whole trafﬁc) and we call it the W trees. We call the three
parameters required by MTTE, φtcc, φce and φuu, a threshold
set. The controller holds independent threshold sets for the
high- and low-priority trafﬁc, respectively. The φtcc of the H
trees is generally set lower than φtcc of the L trees. Hence, the
49
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

high-priority trafﬁc will have more sufﬁcient routes and is less
likely to get congested. Meanwhile, since we only accelerate
the H trees’ creation, energy consumption can be suppressed.
PDR improves the quality of the low-priority trafﬁc as well.
As trafﬁc is separately forwarded, the congestion among trafﬁc
of different priorities in routers’ forwarding queues can be
mitigated. As a result, transmission quality of both the high-
and low-priority trafﬁc can be improved.
1) Implementation
To implement PDR in PMTTE, each router holds two
FIBs - one for the high-priority trafﬁc and the other for the
low-priority trafﬁc. When the system launches, the controller
creates two spanning trees and adds them into the H trees and
the L trees, respectively. These two trees are created using the
original MTTE tree-creating algorithm. Each time the H trees
(L trees) change, the controller sends the changed tree set to
routers. When a router receives the H (L) trees, it updates
its high- (low-) priority FIB using the similar trafﬁc splitting
algorithm of MTTE. The difference with MTTE is that, in
MTTE, all preﬁxes (both high- and low-priority) are evenly
split on the W trees. In PMTTE, the high- (low-) priority
preﬁxes are evenly split over the H (or L) trees.
For each face e, we use Ue(H), Ue(L) and Ue(W) to
denote the utilization caused by the high-priority trafﬁc, the
low-priority trafﬁc and the whole trafﬁc, respectively. Similar
to MTTE, routers in PMTTE periodically send the utilization
of their faces to the controller. The difference between MTTE
and PMTTE is that in MTTE, routers only send the Ue(W).
In contrast, in PMTTE, routers send both Ue(H) and Ue(W).
Based on the received utilization, the controller adds trees
when congestion is about to occur (Algorithm 2). We use the
congestion rate of the high- (low-) priority trafﬁc, denoted as
θ(H) and θ(L), as the maximum of the received Ue(H) and
Ue(W). When θ(H) (θ(L)) exceeds φtcc(H) (φtcc(L)), the
controller creates a tree for the H trees (L trees). Namely,
the low-priority trafﬁc ﬂows in PMTTE in the same way the
whole trafﬁc ﬂows in MTTE. Note that θ(L) is the maximum
of Ue(W) instead of Ue(L). The latter means that when the
controller creates a new tree for the L trees, the controller is
more likely to pick faces used by the H trees. Later, when
these faces get congested, low trafﬁc’s quality will seriously
suffer.
2) Judgment of Live Faces
In the original tree creation algorithm, the controller needs
to judge whether a face is live (Line 18, Algorithm 1). In
MTTE, all faces used in the tree set are regarded as live faces.
In contrast, in PMTTE, faces used in the H trees (rather than
used in both the H trees and the L trees) are regarded as
live faces when the controller creates a new tree for the high-
priority tree set (Algorithm 6). The reason is as follows.
Recall that the transmission quality is closely affected
by the diameters of the routing trees (Section III-B). Like
in MTTE, when the controller in PMTTE creates a tree
and needs to choose a free face, it chooses faces of higher
betweennesses ﬁrst in order to reduce the tree’s diameter (Line
12, Algorithm 5). Accordingly, trees created later generally
have larger diameters than trees created earlier.
The L trees are created based on the maximum of the whole
trafﬁc. Naturally, the number of trees in L tree set is likely to
be larger than the number of trees in the H tree set. On average,
trees in the L tree set are likely to have larger diameters than
trees in the H tree set. By only using faces in the H tree set
as live faces, PMTTE can suppress the diameter of the new
high-priority tree.
3) Removing Underutilized Trees
If θ(H) (or θ(L)) is lower than φuu(H) (or φuu(L)), the
controller removes the last tree from the H (or L) tree set.
C. Face Separation
Due to the overlapping nature of the tree creation algorithm
of MTTE, the H trees and L trees would still heavily cover
each other, which threatens the low-priority trafﬁc’s quality. To
address this problem, when the controller creates a new low-
priority tree, it increases the weights of faces that are used in
the H trees by a factor of φF S (Algorithm 4). The controller
can explicitly specify the extent that the L trees should disjoint
from the H trees. This technique is called FS, and φF S is
named the Face Separation Rate.
1: Creates the initial H tree;
2: Creates the initial L tree;
3: while 1 do
4:
if θ(H) > φtcc(H) then
5:
CreateTree(H)
6:
end if
7:
if θ(L) > φtcc(L) then
8:
CreateTree(L)
9:
end if
10:
Sleeps for a certain period Tupdate;
11: end while
Figure 2: PMTTE work ﬂow
1: weights = {};
2: for all e in the network do
3:
weights[e] = GetFaceWeight(e, newTreeType);
4: end for
5: Calculates
a
Kruskal
minimal
spanning
tree
using
weights;
6: Adds the new tree to the newTreeType trees;
7: Sends the newTreeType trees to routers for updating the
FIBs;
Figure 3: The CreateTree(newTreeType) method.
newTreeType is ‘H’ or ‘L’ when the new tree to create is
for the H (or L) trees.
1: weight = GetDefaultWeight(e, newTreeType)
2: if newTreeType is H then
3:
return weight
4: else
5:
return weight · φF S
6: end if
Figure 4: The GetFaceWeight(e, newTreeType) method for
FS. The controller calculates the weight of a face e when
creates a new tree.
D. Energy Consumption and Transmission Quality Trade-off
We use session failure rate (deﬁned in Section I-C) as the
metric for transmission quality, and use Live Face Rate (LER)
as the metric for energy consumption. We use SFR(H) and
SFR(L) to denote the SFR of the high- and low-priority trafﬁc,
respectively. LER is deﬁned as γ/|E|, where γ is the number
50
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

1: if IsLiveFace(e, newTreeType) then
2:
u = GetUtilization(e, newTreeType);
3:
// e is an uncongested face
4:
if u < φce(newTreeType) then
5:
weight = u;
6:
else
7:
// e is a congested face
8:
weight = u + 2;
9:
end if
10: else
11:
// e is a free face
12:
weight = φce(newTreeType) + 1/e.betweenness;
13: end if
14: return weight;
Figure 5: The GetDefaultWeight(e, newTreeType) method.
1: if newTreeType is H then
2:
return e is used in H trees;
3: else
4:
return e is used in H trees or L trees;
5: end if
Figure 6: The IsLiveFace(e, newTreeType) method
of faces used in the L and H trees, and |E| is the total number
of faces in the physical network.
During disasters, network administrators determine a upper
bound, φenergy, for the system energy consumption and a
lower bound, φsfr, for the transmission quality of the high-
priority trafﬁc. The administrators dynamically adjust φtcc(H)
and φtcc(L) in a heuristic manner (Algorithm 8). When
real system energy consumption exceeds φenergy, φtcc(L) or
φtcc(H) is increased to reduce the system energy consumption.
When LER <= φenergy and SFR(H) > φsfr, φtcc(H) is
reduced to improve the high-priority trafﬁc’s quality. When
LER <= φenergy and SFR(H) < φsfr, φtcc(L) is reduced
to improve the low-priority trafﬁc’s performance. In this way,
administrators can guarantee the requestments for energy con-
sumption and the high-priority trafﬁc, and minimize the low-
priority trafﬁc’s quality degradation.
V. EVALUATION
This section evaluates PMTTE’s performance by comparing
PMTTE with priority queue-enabled MTTE (MTTE).
A. Topology
Our simulation is performed on ndnSIM – a simulation
platform developed by UCLA for CCN-related research [15].
The simulation runs on the network topology of au-
tonomous system 3257 (AS3257). This topology is provided in
Rocketfuel network dataset [16], a dataset that has been used in
network research [17][18]. Each node in AS3257 represents a
router. We extract the largest connected component of AS3257
and use all the remaining nodes for creating trees. AS3257
contains three types of routers: cores, gateways and leaves.
1: if newTreeType is H then
2:
return Ue(H);
3: end if
4: return Ue(W);
Figure 7: The GetUtilization(e, newTreeType) method.
1: while 1 do
2:
if LER > φenergy then
3:
if φtcc(L) < 1.0 then
4:
Increases φtcc(L);
5:
else
6:
if φtcc(H) < 1.0 then
7:
Increases φtcc(H);
8:
end if
9:
end if
10:
else
11:
if SFR(H) > φsfr then
12:
if φtcc(H) > 0 then
13:
Reduces φtcc(H);
14:
end if
15:
else
16:
if φtcc(L) > φuu then
17:
Reduces φtcc(L);
18:
end if
19:
end if
20:
end if
21:
Sleeps for Tupdate;
22: end while
Figure 8: Energy consumption and transmission quality
trade-off
According to the deﬁnition of Rocketfuel datasets, leaves are
the routers with degrees equal to or less than two, gateways are
the routers directly connected to the leaves, and the remaining
routers are cores.
We assume that in real-world CCN networks, consumers
are adjacent to leaves; low-priority producers, such as servers
of entertainment applications, are adjacent to gateways and
leaves; high-priority producers, such as servers of national TV
stations, connect to cores. We assign one low-priority producer
to each leaf and gateway, and assign one high-priority producer
to each core. In total, 132 low-priority producers and 108
high-priority producers are located. Each producer provides
20 different pieces of content.
B. Simulation Parameters
We assign ConsumersPerNode high- and low-priority
consumers to each leaf. Each high- (low-) priority consumer
randomly chooses one high- (low-) priority content from the
whole high- (low-) priority preﬁx pool. End consumers start
requesting selected content after certain delays so that network
trafﬁc volume follows a sine wave shape (for simulating the
trafﬁc spike during the disaster).
We
change
ConsumersPerNode
to
control
the
maximal
network
trafﬁc
volume.
Two
volumes,
with
ConsumersPerNode being 60 and 80, are evaluated. The
number of high-priority consumers is 4,800 (60 x 80) and
6,400 (80 x 80), respectively. Similarly, the number of
low-priority consumers is 4,800 and 6,400 as well. Each
consumer issues 10 Interests per second (10 ips), meaning
that maximally 10 chunks should be returned by certain
producers per second. The size of each chunk is 1024 bytes.
According to the simulation, the average number of hops
between each pair of consumer and producer is approximately
10. Hence, maximally 983 MB (4,800 x 2 x 10 ips x 10 hops
x 1024 bytes) trafﬁc can ﬂow within the network per second
when ConsumersPerNode = 60. Meanwhile, each face
has a capacity of 5 Mbps. The network contains 420 faces.
51
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

The theoretical capacity of the whole network is 260 MBps
(5 Mbps x 420 / 8). Therefore, we believe that the network
is sufﬁciently congested to evaluate the effectiveness of the
proposed algorithm when ConsumersPerNode = 60 and
80.
The threshold set of the L trees in PMTTE is equal to
the threshold set of the W trees in MTTE. Both sets have
φtcc = 0.8, φce = 0.6 and φuu = 0.5.
The number of high- and low-priority consumers is equal.
Intuitively, the high- and low-priority trafﬁc have equal vol-
umes. As φtcc of MTTEs’ W trees is 0.8, φtcc of PMTTE’s
H trees should be equal or less than half of it, i.e., 0.4. For
PMTTE’s H trees, we set the default values of φtcc, φce and
φuu to 0.4, 0.3 and 0.15, respectively.
C. Performance Metrics
We evaluate the performance using SFR and LER. Session
failure rate is directly decided by the session failure deadline
φdead. φdead should be set according to the mean round-trip
time (RTT) of the system. The RTT in different communication
systems may vary greatly. In [19], the authors evaluated the
Quality of Experience (QoE) of a streaming system and they
assumed a RTT of 150ms. Streaming applications generally
request low RTTs. In this paper, we are considering general
carrier networks where both streaming and non-streaming
trafﬁc exist. Hence, the RTT in our system should be larger
than the 150ms. In our simulation, we set φdead to 200ms.
Recall that LER is deﬁned as γ/|E|. For MTTE, γ is the
average number of faces used in the whole tree set during the
simulation, For PMTTE, γ is the average number of faces used
in the L and H trees during the simulation.
We expect to see that, compared with MTTE, PMTTE
further reduces SFR(H) and SFR(L) at the price of a mod-
erate increase in LER. The effectiveness of PDR and FS are
evaluated, respectively.
We repeat each evaluation scenario ten times and display
the mean values of each performance metrics.
Parameters used in the simulation are summarized in Table
I.
TABLE I: Simulation parameters
Parameter
Value
Total number of faces
420
Total number of routers
240
Number of gateway routers
52
Number of leave routers
80
Number of core routers
108
Preﬁxes per producer
20
Chunk size
1024 bytes
Cache size
2000 chunks
(For PMTTE) Default H φtcc, φce, φuu
0.4, 0,3, 0.15
(For PMTTE) Default L φtcc, φce, φuu
0.8, 0.6, 0.5
(For MTTE) Default Whole φtcc, φce,
φuu
0.8, 0.6, 0.5
Duration of one simulation run
50 seconds
Update interval Tupdate
2 seconds
High-priority producer location
cores
Low-priority producer location
gateways,
leaves
Session failure deadline φdead
0.2 seconds
D. Evaluating Priority-Independent Routing
0.15
0.2
0.25
0.3
0.35
0.4
φtcc(H)
0.30
0.35
0.40
0.45
0.50
0.55
0.60
SFR(L)
SFR_0
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 9: Session failure rate for the low priority trafﬁc.
Legends indicate the algorithm and trafﬁc volume used for
evaluation. For example, “pmtte, 60” indicates that PMTTE
is evaluated when ConsumersPerNode = 60.
0.15
0.2
0.25
0.3
0.35
0.4
φtcc(H)
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
SFR(H)
SFR_2
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 10: Session failure rate for the high priority trafﬁc.
Figures 9 and 10 compare the session failure rates of the
low-priority trafﬁc and high-priority trafﬁc between PMTTE
and MTTE. On the Figures, φtcc(H) increases from 0.15 to
0.4 on the x-axis. For evaluation displayed in this section, φF S
is set to 1.0 (i.e., FS is disabled).
[19] shows that in video streaming systems, the users’ QoE
degrades rapidly when the packet drop rate exceeds certain
thresholds. Since we consider prioritized transmission, instead
of limiting the absolute value of the session failure rate, it
is more important to focus on the performance superiority of
the high-priority trafﬁc over the low-priority trafﬁc. In this
paper, we assume that SFR(H) should be lower than 2% to
guarantee decent QoE. Figure 10 shows that when φtcc(H) is
0.15, SFR(H) can be reduced to lower than 2%.
As φtcc(H) decreases, more H trees are created and
SFR(H) of PMTTE is suppressed. In Figure 10, it is no-
table that PDR effectively reduces SFR(H) when φtcc(H) is
reduced to 0.15. SFR(H) reduces from 7.2% to 1% when
52
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

0.15
0.2
0.25
0.3
0.35
0.4
φtcc(H)
0.20
0.25
0.30
0.35
0.40
0.45
MeanLer
MeanLer
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 11: Live face rate.
ConsumersPerNode = 60, and reduces from 8.3% to 1.5%
when ConsumersPerNode = 80. Meanwhile, when SFR(H)
is less than 2%, SFR(H) can be than more than 10 times lower
than SFR(L) (Figure 9 and Figure 10).
Meanwhile, as expected in Section IV-B, PDR remarkably
reduces SFR(L) as well (Figure 9), as compared with MTTE.
When ConsumersPerNode = 60, SFR(L) decreases from
51% to 33%. When ConsumersPerNode = 80, SFR(L)
decreases from 56% to 34%.
Figure 11 plots the inﬂuence of PDR on energy consump-
tion. Clearly, the improvement in transmission quality is at
the price of higher energy consumption. Even though PMTTE
still suppresses LER to be lower than 40%. In real-world
network systems, the network operator can tune φtcc(H) to
make the trade-off between transmission quality and energy
consumption.
E. Evaluating Face Separation
1.0
2.0
3.0
4.0
5.0
φFS
0.25
0.30
0.35
0.40
0.45
0.50
0.55
0.60
SFR(L)
SFR_0
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 12: Session failure rate for the low priority trafﬁc.
Legends indicate the algorithm and trafﬁc volume used for
evaluation. For example, “pmtte, 60” indicates that PMTTE
is evaluated when ConsumersPerNode = 60. (FS enabled)
Figures 12 and 13 compare the session failure rates be-
tween PMTTE and MTTE when FS is enabled. The results are
1.0
2.0
3.0
4.0
5.0
φFS
0.00
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
SFR(H)
SFR_2
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 13: Session failure rate for the high priority trafﬁc.
(FS enabled)
1.0
2.0
3.0
4.0
5.0
φFS
0.20
0.25
0.30
0.35
0.40
0.45
0.50
MeanLer
MeanLer
pmtte, 60
mtte, 60
pmtte, 80
mtte, 80
Figure 14: Live face rate. (FS enabled)
obtained with φtcc(H) = 0.15 (the value obtained in Section
V-D where SFR(H) of PMTTE falls below 2%). The face
separating rate φF S increases from 1.0 to 5.0 on the x-axis.
When φF S takes 1.0, the results are equal to those obtained
when FS is disabled and PDR only is enabled.
Figures 12 and 13 clearly reveal that priority queues
deteriorate the low-priority trafﬁc. Meanwhile, FS can ef-
fectively
mitigate
this
deterioration.
As
the
face
sepa-
ration
rate
increases,
SFR(L)
decreases
(33%
to
27%
for ConsumersPerNode
=
60, and 34% to 32% for
ConsumersPerNode = 80). Moreover, FS does not affect
SFR(H) (Figure 13), meaning that network operators can
improve the performance of the low and high trafﬁc using
PDR and FS independently.
Figure 14 shows that FS moderately increases energy con-
sumption. However, LER is still lower than 50% in PMTTE.
VI.CONCLUSION AND FUTURE WORK
Through this research, we aim to create a trafﬁc engineering
scheme that is both energy- and priority-aware for CCN
networks. The challenge is to avoid heavily impacting the
transmission quality of the low-priority trafﬁc. Our proposal,
53
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

PMTTE, splits the high- and low-priority trafﬁc on separate
routing trees. This enables us to ﬂexibly increase the tree
recreation frequency for the high-priority trafﬁc to suppress
the high-priority trafﬁc congestion. At the same time, this
change mitigates the collision between the high- and low-
priority trafﬁc, which improves the quality of both. Last but
not least, by aggressively separating the routes of the high-
and low-priority trafﬁc, we can actively improve the quality
of the low-priority trafﬁc. Simulation using a real-world ISP
network topology shows that compared with naive priority
queue-enabled MTTE, PMTTE can boost the quality of both
the high- and low-priority trafﬁc by up to 50%. As for future
work, we plan to improve the transmission quality of the
high-priority trafﬁc by creating routing trees that minimize the
distances between the high-priority producers and consumers.
Meanwhile, MTTE is a centralized scheme and will fail when
the connection between routers and the control is cut. We plan
to make MTTE more fault-tolerant, especially during disasters.
ACKNOWLEDGMENT
The work described in this paper was, in part, performed in
the context of the FP7/NICT EU-JAPAN GreenICN project.
REFERENCES
[1]
L. Zhang et al., “Named data networking (NDN) project,” Relat´orio
T´ecnico NDN-0001, Xerox Palo Alto Research Center-PARC, 2010.
[2]
L. Xu and T. Yagyu, “Multiple-tree based online trafﬁc engineering
for energy efﬁcient content centric networking,” in Proc. The Sixth
International Conference on Advances in Future Internet (AFIN2014).
IARIA, 2014, pp. 121–127.
[3]
M. Zhang, C. Yi, B. Liu, and B. Zhang, “GreenTE: Power-aware
trafﬁc engineering,” in Network Protocols (ICNP), 2010 18th IEEE
International Conference on.
IEEE, 2010, pp. 21–30.
[4]
N. Mimura, K. Yasuhara, S. Kawagoe, H. Yokoki, and S. Kazama,
“Damage from the great east japan earthquake and tsunami-a quick re-
port,” Mitigation and Adaptation Strategies for Global Change, vol. 16,
no. 7, 2011, pp. 803–818.
[5]
Y. Kim, Y. Kim, and I. Yeom, “Differentiated services in named-data
networking,” in Computer Communications Workshops (INFOCOM
WKSHPS), 2014 IEEE Conference on.
IEEE, 2014, pp. 452–457.
[6]
B. Braden, D. Clark, and S. Shenker, “Integrated services in the internet
architecture: an overview,” Internet Requests for Comments, RFC
Editor, RFC 1633, June 1994, http://www.rfc-editor.org/rfc/rfc1633.txt.
[Online]. Available: http://www.rfc-editor.org/rfc/rfc1633.txt
[7]
I. Psaras, L. Saino, M. Arumaithurai, K. Ramakrishnan, and G. Pavlou,
“Name-based replication priorities in disaster cases,” in Computer
Communications Workshops (INFOCOM WKSHPS), 2014 IEEE Con-
ference on.
IEEE, 2014, pp. 434–439.
[8]
G. Tyson, E. Bodanese, J. Bigham, and A. Mauthe, “Beyond content
delivery: Can icns help emergency scenarios?” Network, IEEE, vol. 28,
no. 3, 2014, pp. 44–49.
[9]
S. Arianfar, P. Sarolahti, and J. Ott, “Deadline-based resource manage-
ment for information-centric networks,” in Proceedings of the 3rd ACM
SIGCOMM workshop on Information-centric networking. ACM, 2013,
pp. 49–54.
[10]
C. Tsilopoulos and G. Xylomenos, “Supporting diverse trafﬁc types in
information centric networks,” in Proceedings of the ACM SIGCOMM
workshop on Information-centric networking.
ACM, 2011, pp. 13–18.
[11]
N. Choi, K. Guan, D. C. Kilper, and G. Atkinson, “In-network caching
effect on optimal energy consumption in content-centric networking,” in
2012 IEEE International Conference on Communications (ICC). IEEE,
2012, pp. 2889–2894.
[12]
U. Lee, I. Rimac, D. Kilper, and V. Hilt, “Toward energy-efﬁcient
content dissemination,” Network, IEEE, vol. 25, no. 2, 2011, pp. 14–19.
[13]
Y. Song, M. Liu, and Y. Wang, “Power-aware trafﬁc engineering with
named data networking,” in Seventh International Conference on Mobile
Ad-hoc and Sensor Networks (MSN), 2011. IEEE, 2011, pp. 289–296.
[14]
M. Girvan and M. E. Newman, “Community structure in social and
biological networks,” Proceedings of the National Academy of Sciences,
vol. 99, no. 12, 2002, pp. 7821–7826.
[15]
A. Afanasyev, I. Moiseenko, and L. Zhang, “ndnsim: Ndn simulator for
ns-3,” Named Data Networking (NDN) Project, Tech. Rep. NDN-0005,
Rev, vol. 2, 2012.
[16]
“Rocketfuel
dataset,”
https://github.com/cawka/
ndnSIM-ddos-interest-ﬂooding/tree/master/topologies/rocketfuel
maps cch, (retrieved: July, 2015).
[17]
N. Spring, R. Mahajan, and D. Wetherall, “Measuring ISP topologies
with rocketfuel,” ACM SIGCOMM Computer Communication Review,
vol. 32, no. 4, 2002, pp. 133–145.
[18]
C. Yi et al., “A case for stateful forwarding plane,” Computer Commu-
nications, 2013, pp. 779–791.
[19]
T. N. Minhas, O. Gonzalez Lagunas, P. Arlos, and M. Fiedler, “Mobile
video sensitivity to packet loss and packet delay variation in terms of
qoe,” in Packet Video Workshop (PV), 2012 19th International.
IEEE,
2012, pp. 83–88.
54
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-428-2
AFIN 2015 : The Seventh International Conference on Advances in Future Internet

