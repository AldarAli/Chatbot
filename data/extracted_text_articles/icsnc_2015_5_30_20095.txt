SDL Implementation of LTE UE Non-Seamless Random Access Procedure 
Handling 
Mohamed Sami M. Yousef 
 
Hussein A. Elsayed  
Abdelhalim Zekry 
Electronics Department,  
National Telecommunication Institute 
(NTI);  
Cairo, Egypt 
 
Electronics and Communications Engineering Department,  
Faculty of Engineering,  
Ain shams University;  
Cairo, Egypt 
e-mail: mohamed.yousef@nti.sci.eg 
 
e-mail: helsayed2003@hotmail.com, aaazekry@hotmail.com 
Abstract—Random access procedure in Long Term 
Evolution (LTE) is required in completing the connection 
establishment procedure. Due to the numerous number of 
connection requests, collisions may occur, which would cause a 
failure to be completed in both of the contention-based and the 
non contention-based random access procedures. This paper 
focuses on the main problems that may arise during the 
random access procedure execution in the Medium Access 
Control (MAC) sub-layer of LTE User Equipment (UE) 
terminal. It investigates the unsuccessful random access 
response (RAR) and the unsuccessful contention resolution 
problems. Specification and Description Language (SDL) is 
used to implement a design of random access procedure to deal 
with these problems based on 3GPP release 9 standards. 
Besides the reduced SDL code, an implementation simulation 
is performed using the Message Sequence Chart (MSC) 
simulator 
trace. 
The 
simulation 
proves 
the 
correct 
functionality and feasibility of the built random access 
procedure in handling those problems according to the 
standard. 
Keywords- LTE; random access procedure; MAC Sub-layer; 
non successful random access response; non successful 
contention resolution; SDL. 
I. 
 INTRODUCTION 
Mobile 
communication 
passed 
through 
many 
developments since the last few years with the introduction 
of successive generations. The first generations were 
primarily designed to support voice communication with 
capabilities to support data transmission in the later releases. 
However, the data rates were generally low. As a result of 
the rapid increase in the Internet based applications in many 
mobile communication devices with a growing bandwidth 
demands, starting from the third generation full multimedia 
data 
transmission 
was 
enabled, 
as 
well 
as 
voice 
communications ‎[1]. Fourth generation technology allows 
greater download and upload speeds to increase the amount 
and types of content made available through mobile devices. 
Accordingly, 3GPP main objective is to support: a high data 
rate, low latency, and packet optimized radio access 
technology ‎[2]‎[3]. 
As the MAC layer is connected to the underneath 
physical layer through transport channels and is connected to 
the Radio Link Control (RLC) layer above through logical 
channels; the MAC layer performs multiplexing and de-
multiplexing of the data between logical channels and 
transport channels. 
With regards to the upper layer, the MAC layer is 
responsible for two services: the radio allocation service and 
the data transfer service. Regarding the former, this includes 
procedures, such as logical channel prioritization, power 
headroom reporting, handling of Up Link (UL) grant and 
Down Link (DL) assignment, etc. Regarding the data 
transfer service, the MAC layer performs procedures such as 
scheduling requests, buffer status reporting, random access, 
and Hybrid Automatic Repeat request (HARQ) ‎[4].  
Evolved- Universal Terrestrial Radio Access Network 
(E-UTRAN) defines two MAC entities: one in the UE and 
the other in the eNodeB side. The functions performed by 
each of those entities are different from each other. This 
paper focuses on UE MAC sub-layer, particularly, the 
random access procedure and non-seamless scenarios where 
problems may arise during its execution. It also introduces 
the appropriate actions to face these issues based on 3GPP 
release 9 standards. While implementing the design, we 
corroborated several procedures to reduce the runtime. The 
design is based on 3GPP release 9 standard ‎[5] and 
implemented using SDL. As an SDL output, the MSC 
simulator trace shows the MAC flow for facing the random 
access procedure problems in both of contention and non-
contention based procedure. 
Several researches proposed methods and architectures to 
improve both of contention and non contention based 
random access process. LTE clustering and non-clustering 
schemes performance of contention based random access 
procedure is evaluated in ‎[6]. The proposal in ‎[7] shows how 
hierarchical control of different users efficiently improves 
random access success probability and optimize the system 
performance. The work in ‎[8] suggests a fast random access 
procedure for use in a mobile communication system. 
Random access procedure enhancements for heterogeneous 
networks is presented in ‎[9]. Hybrid random access and data 
transmission protocol for Machine to Machine (M2M) 
communications is proposed in ‎[10]  to maximize the M2M 
throughput and to resolve the congestion problem in the 
random access procedure. 
The rest of the paper is organized as follows: Section II 
provides an introduction on the random access process in 
LTE and its types. The implemented successful random 
access process is explained in Section III, while Section IV 
shows the problems in the random access process and the 
109
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

way the MAC deal with them.  In Section V, the simulation 
results for both unsuccessful RAR and the unsuccessful 
contention resolution problems are presented. Finally, the 
conclusions and future work is presented in Section VI. 
II. 
LTE RANDOM ACCESS PROCEDURE  
Control of the random access procedure is an important 
part of the MAC layer functionality in LTE. Sometimes LTE 
UE wishes to transmit on the Physical Uplink Shared 
Channel (PUSCH) but it does not have allocated resources to 
do so. In this case, the mobile sends a scheduling request on 
the physical uplink control channel. Furthermore, if it does 
not have the resources to do that, then it initiates the random 
access procedure to acquire uplink synchronization. After 
that, eNodeB can schedule orthogonal uplink transmission 
resources for UE.  
There are two forms of the random access procedure: 
contention-based and non-contention. In both forms, the 
UE’s‎first‎step‎is‎to‎transmit‎a‎preamble‎to‎the‎eNodeB‎as‎an‎
indication of procedure start. For contention-based procedure, 
the Random access preamble is randomly chosen by the UE, 
whilst in the case of non-contention-based procedure, the 
Random access preamble is designated by the eNodeB to 
guarantee a contention free procedure. The usage of the 
random access procedure determines which form to be used. 
A. Contention-based Random Access Procedure 
In this process, there is no reserved random access 
preamble for the UE. Accordingly, UE has to randomly 
select a Random Access (RA) preamble resource. For LTE, 
each cell has 64 available random access preambles. A set of 
these preambles is reserved for non-contention-based 
random access procedure, while the rest are available for 
contention-based random access procedure; and are divided 
into two groups: the random‎access‎preamble‎group‎“A”‎and‎
the‎random‎access‎preamble‎group‎“B”‎‎[11].  
Since UEs choose the random access preamble by 
themselves, it is possible for more than one UE to select the 
same 
RA 
preamble 
simultaneously. 
In 
this 
case, 
acknowledgment by the eNodeB of receipt of the RA 
preamble is not enough, and eNodeB should further perform 
the contention resolution step, through which eNodeB should 
indicate which UE’s transmission has actually been received. 
The process consists of 4 steps to send the request and 
resolve the contention as shown in Figure 1. 
Step 1: Random-access preamble transmission: 
The procedure starts with the UE transmitting a random-
access‎ preamble.‎ The‎ transmission’s‎ main‎ objective‎ is‎ to‎
indicate to the base station the presence of a random-access 
attempt and to estimate the delay between the eNodeB and 
the terminal. 
In contention-based random access procedure, UE has to 
first select a group from which it chooses a random access 
preamble. The group selection is based on the path-loss, the 
estimated size of the MAC Packet Data Unite (PDU), and 
whether this random access attempt is the initial attempt or a 
re-attempt. Group B is chosen if the estimated size of the 
MAC PDU is big and the measured path-loss is small. In this 
step, the UE also determines the transmission power of the 
random-access preamble, as well as the frame and sub-frame, 
which it will use to send the preamble in. 
UE
eNB
Random access preamble
Random access response
Scheduled transmission
Contention resolution
 
Figure 1.  Contention-based Random Access Procedure steps 
Step 2: RAR: 
The UE receives the RAR, as an indication of receiving 
the preamble, within a pre-specified time window. If the 
terminal does not receive a RAR within the time window, the 
attempt will be considered failed and the procedure will be 
repeated from the first step. 
As the preamble is randomly selected by the UE, there is 
a probability that multiple terminals use the same random-
access preamble at the same time. In this case, multiple 
terminals will react upon the received RAR and a collision 
occurs. Accordingly, steps 3 and 4 are used to solve this 
collision. 
Step 3: Terminal identification: 
The UE step sends its first scheduled uplink message on 
the PUSCH. The message reflects the reason behind the 
random access procedure, which may be a Radio Resource 
Control (RRC) connection request, tracking area update, or 
scheduling request. This message also includes a unique 
identity for the UE, which is required for contention 
resolution in the fourth step.  
If a preamble collision has occurred at Step 1, i.e., more 
than one UE selected the same preamble, the same 
temporary C-RNTI will be received by the colliding UEs 
through the RAR and they will also collide in the time-
frequency resources during the transmission of their terminal 
identification message. This scenario may result in such 
interference that none of the colliding UEs can be decoded 
by the eNodeB; and so the UEs restart the random access 
procedure after waiting for backoff time (if exists). However, 
if eNodeB decoded one UE successfully, the other UEs will 
not recognize the contention and so contention resolution 
message (step 4) would be used to resolve the contention.   
Step 4: Contention resolution 
The contention resolution message is the last step in the 
random-access procedure. It is a downlink message used to 
ensure that a terminal does not incorrectly use another 
terminal’s‎identity. 
As multiple UEs initialize random-access procedure 
using the same preamble sequence in the first step where 
only one of these UEs has been detected by the eNodeB, a 
possible reason for this is that the undetected UE sent the 
message with low power relative to its distance from the 
eNodeB. Accordingly, all of the UEs will receive the same 
RAR (step 2) and therefore each UE assumes that it receives 
a correct RAR. As a next step, all the UEs who receive a 
110
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

correct RAR will send terminal identification message 
including their identity. UEs are now waiting for the 
contention resolution message, as the UE may have a C-
RNTI or not. There are two contention resolution 
mechanisms ‎[11]. If the terminal already had a C-RNTI 
assigned, contention resolution is handled by addressing the 
terminal on the Physical Downlink Control Channel 
(PDCCH) using the C-RNTI. Upon detection of its C-RNTI 
on the PDCCH, the terminal declares the random access 
attempt successful, and there is no need for contention-
resolution-related information on the DownLink Shared 
Channel (DL-SCH). 
The second mechanism occurs when the terminal does 
not have a valid C-RNTI, in which the contention resolution 
message is addressed using the TC-RNTI, and the associated 
DL-SCH contains the contention-resolution message. The 
terminal will compare the identity in the message with the 
identity transmitted in the third step. Only a terminal which 
observes a match between the identity received in the fourth 
step and the identity transmitted as part of the third step will 
declare the random-access procedure successful and promote 
the TC-RNTI from the second step to the C-RNTI ‎[11]. 
Terminals that do not detect PDCCH transmission with 
their C-RNTI or do not find a match between the identity 
received in the fourth step and the respective identity 
transmitted as part of the third step are considered to have 
failed the random-access procedure and need to restart the 
procedure from the first step. Furthermore, a terminal that 
has not received the downlink message in step 4 within a 
certain time from the transmission of the uplink message in 
step 3 will declare the random-access procedure as failed and 
need to restart from the first step ‎[11]. 
B. Non-Contention-based Random Access Procedure 
The non-contention-based random access procedure 
provides delay and capacity enhancements compared with 
the contention-based procedure. The procedure is executed 
in only three steps as shown in ‎Figure 2.  
UE
eNB
Random access preamble
Random access response
RA preamble assignment
 
Figure 2.  Non contention-based random access procedure steps 
Step 1: Random access preamble assignment: 
The eNodeB allocates a designated RA preamble to the 
UE. Besides the preamble, some restrictions for the 
frequency and time resource can be signaled so that the same 
sequence can be simultaneously allocated for UEs that 
transmit on different PRACH sub-frames. 
Step 2: preamble transmission: 
As for contention-based random access procedure, the 
UE transmits the random-access preamble where also it 
determines the transmission power, the frame, and sub-frame 
which it will use to send the preamble.  
Step 3: RAR: 
In the non-contention-based RA procedure, as the 
designated RA preamble is used by only one specific UE 
there is no possibility of collision. As soon as the eNodeB 
detects the RA preamble, the eNodeB knows of the access by 
the UE and the procedure is terminated by transmission of 
the RA response, i.e., contention resolution is not needed as 
the preamble shall not be used by other UEs. 
III. 
SUCCESSFUL RANDOM ACCESS PROCEDURE 
FLOW 
Initially, MAC is in Idle state till it receives a request for 
random access process; either CMAC_RANDOM_ACC_ 
REQ signal in case of contention based process request or 
CMAC_RANDOM_ACC_REQ_non_cont signal in case of 
non contention based process request accompanied by the 
Random Access Preamble and the PRACH Mask Index 
designated by eNodeB for the UE. After receiving the 
request, UE initiates the random access procedure. The 
following subsection explains the random access procedure 
steps in UE: 
A. Random Access Resource selection and transmission 
step 
Upon receiving the request, the MAC sub-layer instructs 
the physical layer with the preamble_value signal including 
the preamble index to be sent to the network side. If 
contention based request was sent, the UE randomly selects 
Random Access Preamble from the available set of 
preambles. 
According to the restrictions given by prachconfigIndex 
and PRACH Mask Index, MAC sends frame_value and 
subframe_value signals to the physical layer indicating the 
selected frame and sub frame of the PRACH to carry the 
random access preamble. received_target_power signal is 
then sent by the MAC to instruct the physical layer with the 
appropriate preamble transmission power based on the 
estimated path-loss signals in addition to a configurable 
offset. Now, the physical layer is ready to send the preamble, 
while MAC is in Random_Access_Response_Reception 
state after starting RAR_window_timer timer waiting for the 
eNodeB reply.  
B. RAR reception step 
The MAC starts reading the RAR PDU contents shown 
in Figure 3 ‎[5], when it receives Random_Access_ 
Response_MAC_PDU signal from physical layer. RAR 
PDU header is divided into sub-headers; there are two types 
of sub-headers: MAC RAR sub-header and Backoff 
Indicator sub-header as shown in Figure 4 and Figure 5, 
respectively. If PDU contains a Backoff Indicator sub-
header, UE has to set the back_off_parameter_value to the 
value determined in the BI field of the subheader, else the 
backoff parameter value is set to 0 ms. 
As the PDU may include reply to more than one UE, 
MAC starts filtering the Random Access Preamble Identifier 
(RAPID) Fields in the received PDU. If UE found RAPID 
111
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

corresponds to the transmitted preamble_value, the RAR 
reception step is considered successful and UE will apply the 
MAC RAR fields: Timing Advance Command, UL Grant, 
and Temporary C-RNTI ‎[5]. 
MAC header
MAC RAR 1 MAC RAR 2
MAC RAR n
Padding
(optional) 
E/T/R/R/BI
subheader
E/T/RAPID
Subheader n
E/T/RAPID
Subheader 2
E/T/RAPID
Subheader 1
MAC payload
 
Figure 3.  RAR PDU structure ‎[5] 
E
T
RAPID
 
Figure 4.  RAR subheader structure 
E
T
R
R
BI
 
Figure 5.  Backoff Indicator subheader structure 
At this step, the Random access procedure is considered 
successfully completed if it is non contention based; 
otherwise, contention resolution step is needed if the process 
is contention based because more than one UE may transmit 
the same preamble_value simultaneously. 
C. Contention resolution step 
To resolve contention, UE sends MAC_PDU_UL signal 
including its identification information, message. If the UE is 
already connected to a known cell then it has a C-RNTI (Cell 
Radio Network Temporary Identifier) assigned to it, which 
acts as its identifier. Otherwise, the core-network terminal 
identifier will be used. Consequently, the MAC starts 
mac_ContentionResolutionTimer 
timer 
waiting 
for 
MAC_PDU_DL signal, it is now in msg4_Waiting state 
waiting for the eNodeB reply. If MAC_PDU_DL signal is 
received including the UE pre-transmitted identification 
information the contention resolution step is successfully 
completed and the Random Access procedure is considered 
successfully completed. 
DL-SCH MAC PDU consists of: a MAC header, zero or 
more MAC Service Data Units (MAC SDU), zero or more 
MAC control elements (fixed size and variable size), and 
optionally padding as shown in ‎Figure 6. The MAC header 
consists of one or more MAC subheaders; each subheader 
corresponds to either: MAC SDU or MAC control element 
or padding. The Logical Channel ID (LCID) field in each 
subheader represents the type of the corresponding MAC 
control element or padding or the logical channel instance of 
the corresponding MAC SDU ‎[5].  
MAC header
MAC control 
element 1
MAC control 
element 2
MAC SDU
Padding
(optional) 
R/R/E/LCID
subheader
R/R/E/LCID/F/L 
Subheader 
R/R/E/LCID/F/L 
Subheader 
R/R/E/LCID 
Subheader 
MAC payload
MAC SDU
R/R/E/LCID padding 
Subheader 
 
Figure 6.  DL-SCH MAC PDU structure ‎[5] 
D. Successful RANDOM ACCESS PROCEDURE 
implementation 
The successful random access procedure, using the 
previous steps and the setup values, has been implemented 
in ‎[12], but has not considered error handling. So, this paper 
focuses on implementation and simulation of various cases 
of error handling methodologies. 
IV. 
RANDOM ACCESS PROCEDURE INVOLVED 
PROBLEMS 
This section focuses on the random access procedure 
common problems and how the MAC protocols deal with 
them, which is the main target of this paper. The first one is 
that the RAR step is considered unsuccessful if the RAR 
window expired without receiving the RAR or if the RAPID 
corresponding to the transmitted Random Access Preamble 
is not received in any of the arrived RARs. The second 
problem appears in the contention based procedure, where an 
error could occur due to non successful contention resolution 
step. This occurs if mac-ContentionResolutionTimer expires 
before successful Contention Resolution. 
A. Non successful RAR problem  
As a first step in the random access procedure the UE 
informs the physical layer with the selected frame, subframe 
and the power for sending the preamble. After so, MAC sets 
RAR_window_timer with the window time it has to wait for 
RAR. 
Then 
MAC 
transits 
to 
Random_Access_ 
Respons_reception state waiting for either a RAR or timer 
expire signal, ‎Figure 7.  
As seen in Figure 7, if there is a received RAR before the 
RAR_window_timer expires, the UE has to check the 
received‎PDU’s‎subheaders:‎Backoff‎Indicator‎(if‎exist)‎and‎
RAR sub-headers. Thus, UE determines if there is a RAR 
corresponds to its transmitted ra_peambleindex, so it transits 
to check_if_correct_RAR step, if not UE transits again to 
Random_Access_Respons_reception state waiting for new 
PDU. Else, the UE resets the RAR_window_timer and apply 
the Backoff value (if exist). 
On the other side, if the RAR_window_timer expires, the 
random access procedure is considered non successful; and 
hence the UE transits to non_successful_RAR step following 
the procedures shown in ‎Figure 8. At that point, MAC starts 
by 
incrementing 
PREAMBLE_TRANSMISSION_ 
COUNTER by 1, which counts the number of trials of the 
preamble 
transmission. Then, 
if 
PREAMBLE_ 
TRANSMISSION_COUNTER 
value 
is 
greater 
than 
preambleTransMax, it indicates that MAC has reached the 
maximum number of possible trials. Therefore, MAC sends 
Non_successful_Random_Access_process signal to indicate 
a Random Access problem to the upper layer (RRC) then 
transit 
to 
the 
Idle 
state. 
But 
if 
the 
PREAMBLE_TRANSMISSION_COUNTER 
has 
not 
reached the maximum number of trials, UE has to start 
another Random access procedure attempt. The UE has to 
wait a backoff delay time before starting the next trial. The 
backoff delay is a random value chosen between zero and the 
back_off_parameter_value already sent by the network. 
112
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

Backof_parameter procedure is called by the UE for 
determining 
the 
backoff 
time 
corresponds 
to 
the 
back_off_parameter_value based on ‎[5].  
The‎SDL‎“uniform” operator is used for random number 
selection. Also, MAC has to inform the physical layer to 
increase the preamble transmission power in each trial by 
power_ramping_step value.  
B. Non successful contention resolution problem 
As stated before, this problem appears in the contention-
based procedure, where an error could occur due to non 
successful contention resolution step. It occurs if mac-
ContentionResolutionTimer expires without receiving DL-
SCH MAC PDU or the received contention resolution 
identity MAC control element does not match the 
transmitted one. 
In Figure 9, after UE transmits msg3 and store its value 
in msg3_buffer it starts mac_ContentionResolutionTimer 
and transits to msg4_waiting state waiting for the eNodeB 
reply or mac_ContentionResolutionTimer expire signal. If 
the timer expire or the received PDU does not match the 
UE‘s‎
ID,‎
the‎
UE‎
transits‎
to‎
non_successful_ 
Contention_Resolution 
step. 
In 
the 
non_successful_ 
Contention_Resolution 
step, 
the 
UE 
transits 
to 
non_successful_RAR step repeating the same procedures of 
Non successful RAR.  
 
Figure 7.  RAR PDU reception 
 /*#include 'random.pr'*/
process Random_access_control
10(17)
DCL
MAC_PDU_RECEIVED bit_string,
no_of_RAR integer,
correct_RAR_index integer,
back_off_existence bit, /* 0 => not exist ,1 => exist */
RAR_H_offs integer;
Random_Access_Response_Reception
RAR_window_timer
non_successful_RAR
Random_Access_Response_MAC_PDU (MAC_PDU_RECEIVED)
RAR_H_offs:=0,
no_of_RAR:=0,
correct_RAR_index :=0,
back_off_existence:=0
MAC_PDU_RECEIVED(1)=0
no_of_RAR:=1
ra_preambleindex =substring(MAC_PDU_RECEIVED,(RAR_H_offs+2),6)
correct_RAR_index:=no_of_RAR
MAC_PDU_RECEIVED(RAR_H_offs)=1
no_of_RAR := no_of_RAR+1
RAR_H_offs:=RAR_H_offs+8
check_if_correct_RAR
back_off_existence:=1,
back_off:=substring (MAC_PDU_RECEIVED,4,4)
MAC_PDU_RECEIVED(0)=0
Random_Access_Response_reception
false
true
true
false
false
true
/*BI Exist*/
true
false
113
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

 /*#include 'random.pr'*/
process Random_access_control
11(17)
TIMER Delay_Timer;
DCL
backoff_delay duration,
zero_time duration;
BackOff_parameter
non_successful_RAR
preamble_transmission_counter:=preamble_transmission_counter+1
preamble_transmission_counter=preamble_trans_max+1
preamble_selector=1
send_preamble
BackOff_parameter(back_off,back_off_parameter_value)
zero_time:=0,
backoff_delay:= uniform(zero_time,back_off_parameter_value,seq),
backoff_delay:=backoff_delay/1000
SET (now+backoff_delay,Delay_Timer)
 back_off(back_off_parameter_value) 
my_wait
Non_Successful_Random_Access_Process
Idle
my_wait
Delay_Timer
preamble_group_selection
SET (now+backoff_delay,Delay_Timer)
/*SET (now+3,Delay_Timer)*/
false
false
true
true
 
Figure 8.  Procedures for non successful RAR 
 /*#include 'random.pr'*/
process Random_access_control
13(17)
Timer mac_ContentionResolutionTimer;
check_if_process_ended
preamble_selector=1
MSG_3_POWER(preamble_initial_received_target_power+((power_ramping_step+30)*preamble_transmission_counter))
Temporary_C_RNTI:=substring(MAC_PDU_RECEIVED,(RAR_offs+32),16)
ccch_order=1
Msg3_req_CRNTI(C_RNTI)
Wait_msg3_Reply
Msg3_reply(msg3_buffer)
MAC_PDU_Buffer:='0'b
set((now+mac_contentionresolution_timer_value),mac_ContentionResolutionTimer)
msg4_Waiting
PDCCH_reception
ccch_order=1
reset (mac_ContentionResolutionTimer)
Temporary_C_RNTI:='0'b
R.A_Procedure_successfully_completed
wait_PDU
mac_ContentionResolutionTimer
Temporary_C_RNTI:= '0'b
non_successful_Contention_Resolution
Msg3_req
R.A_Procedure_successfully_completed
true
false
false
true
true
false
 
Figure 9.  Contention resolution 
V. 
IMPLEMENTATION SIMULATION RESULTS 
This section shows the implementation simulation results 
for Non Successful random access procedure different 
scenarios and how MAC dealt with them. SDL provides 
functional simulation, which uses MSC simulator trace 
introduced by Telelogic Tau SDL and TTCN Suite 4.0, 
which is launched by the Telelogic Tau Company. 
A. Non successful RAR 
Figure 10 and Figure 11 show the simulation result of a 
non successful RAR for a contention-based random access 
procedure, where the preamble_trans_max is set to (2); After 
receiving 
CMAC_RANDOM_ACC_REQ 
signal, 
the 
Random_access_control 
process 
randomly 
selects 
preamble_value‎(“100110”)‎and‎the‎rest‎of‎Random‎Access‎
Resources including preamble_received_target_power (-68), 
then it transit from Idle state to Random_Access_ 
Response_Reception state. The Random_access_control 
process receives Random_Access_Response_MAC_PDU 
during RAR_window_timer time, the PDU includes: a 
backoff‎ ID‎ (“0011”),‎ RAPID‎ (“001000”)‎ and‎ RAPID‎
(“101010”).‎ As‎ none‎ of‎ the‎ received‎ RAPIDs‎ match‎ the‎
transmitted pramble_value, the Random_access_control 
process will transit to Random_Access_Response_Reception 
state waiting for a new PDU. Unfortunately, the 
RAR_window_timer 
expires 
without 
receiving PDU, 
accordingly the RAR step is non successful and UE has to 
start another random access procedure trial. The second trial 
starts after waiting a backoff time (13.1 ms). 
114
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

The UE starts the second (last) trial and randomly selects 
preamble_value‎
(“100101”).‎
The‎
preamble_received_ 
target_power is also increased to be (-4). As the first trial the 
RAR step is not successful, consequently MAC sends 
Non_successful_Random_Access_process signal to RRC. 
B. Non successful contention resolution 
Figure 12 to Figure 15 show a non successful random 
access procedure due to a problem in the contention 
resolution step. The preamble_trans_max for this procedure 
is set to (3); After receiving CMAC_RANDOM_ACC_REQ 
signal, the Random_access_control process randomly selects 
preamble_value‎(“011111”)‎and‎the‎rest‎of‎Random‎Access‎
Resources including preamble_received_target_power (-68), 
then it transit from Idle state to Random_Access_ 
Response_Reception state.  
The 
Random_access_control 
process 
receives 
Random_Access_Response_MAC_PDU 
during 
RAR_ 
window_timer time, as it is seen in ‎Figure 12. , the PDU 
includes RAPID‎(“01111111”)‎and‎there‎is‎no backoff field.  
As the received RAPID match the transmitted 
pramble_value, 
the 
Random_access_control 
process 
considers the RAR to be successful and it informs the 
physical layer with the received parameters (TAC, 
RAR_Grant). 
As the Random_access_control process is now ready to 
send message3, it first informs the physical layer with the 
power required to send it (MSG_3_POWER signal). Then, it 
sends msg3_req signal to the multiplexing_and_assembly 
process in order to send message3 (including the UE's 
identity) and to take a copy of it for contention resolution.  
After starting the mac_Contention Resolution Timer the 
Random_access_control process is now 
waiting for 
contention resolution message. upon receiving contention 
resolution 
message 
(MAC_PDU_DL 
signal) 
the 
Random_access_control process terminate the timer and 
starts filtering the received PDU, but unfortunately the 
identity in the received PDU does not match the transmitted 
UE's identity. Accordingly, the contention resolution is 
considered non successful and UE has to start another 
random access procedure trial, where the UE will starts the 
new trial immediately (Delay_Timer set to zero) as there is 
no backoff indication from the eNodeB. 
In the new trial, UE selects a new random preamble and 
repeats the steps again, but also a problem occurs in the 
contention resolution. The UE starts the third (last) trial, but 
also a problem occurs. Now, the UE has reached to the 
maximum 
number 
of 
trials 
(3), 
and 
so  
Non_successful_Random_Access_process signal is sent  to 
RRC. 
Random_access_control_1_11
process
Random_access_control
PHY_1_12
process
PHY
Multiplexing_and_assembly_1_10
process
Multiplexing_and_assembly
RRC_process_1_9
process
RRC_process
env_0
Simulation trace
generated by
SDL Simulator 4.4
my_wait
Random_Access_Response_Reception
Random_Access_Response_Reception
Waiting_for_Msg3_parameters
S0_3
S0_2
S0_1
wait_the_reply
MSC SimulatorTrace
user_env
CMAC_RANDOM_ACC_REQ
preamble_received_target_power
(-68 )
frame_value
(7)
subframe_value
(6)
preamble_value
('100110'B )
Random_Access_Response_MAC_PDU
(
'10000011110010000110101001111111111111100000001111111111000000000001110001110001100110011001111111000110010101011110001111'B)
RAR_window_timer(0.0030)
Delay_Timer(0.0131)
 
Figure 10.  Non successful RAR simulation (1) 
115
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

Figure 11.  Non successful RAR simulation (2) 
Random_access_control_1_3
process
Random_access_control
PHY_1_4
process
PHY
Multiplexing_and_assembly_1_2
process
Multiplexing_and_assembly
RRC_process_1_1
process
RRC_process
env_0
Simulation trace
generated by
SDL Simulator 4.4
Wait_msg3_Reply
Random_Access_Response_Reception
Idle
msg3_state
Waiting_for_Msg3
Waiting_for_Msg3_parameters_2
Waiting_for_Msg3_parameters_1
Waiting_for_Msg3_parameters
S0_3
S0_2
S0_1
wait_the_reply
msg3_state
S0
S0
MSC SimulatorTrace
mac ContentionResolutionTimer(16.0000)
CMAC_RANDOM_ACC_REQpreamble_value
('011111'B )
subframe_value
(6)
frame_value
(7)
preamble_received_target_power
(-68 )
Random_Access_Response_MAC_PDU
(
'01011111000000011111111111110000000000000011111111111110001111'B)
RAR_window_timer(0.0030)
TAC
('00000011111'B )
RAR_Grant
('11111111000000000000'B )
MSG_3_POWER
(-66 )
Msg3_req
Msg3_reply
(
'111111111111111111111111111111111111111100001111'B)
MAC_PDU_UL
('111111111111111111111111111111111111111100001111'B
)
user_env
 
Figure 12.  Non successful contention resolution simulation (1) 
Idle
Random_Access_Response_Reception
Random_Access_Response_Reception
S0_3
S0_2
S0_1
Waiting_for_Msg3_parameters
S0
Non_Successful_Random_Access_Process
RAR_window_timer(0.0030)
Random_Access_Response_MAC_PDU
(
'10000011110010000110101001111111111111100000001111111111000000000001110001110001100110011001111111000110010101011110001111'B)
preamble_value
('100101'B )
subframe_value
(6)
frame_value
(7)
preamble_received_target_power
(-4 )
env_0
RRC_process_1_9
process
Multiplexing_and_assembly_1_10
process
Random_access_control_1_11
process
PHY_1_12
process
116
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

Random_Access_Response_Reception
my_wait
wait_PDU
msg4_Waiting
Waiting_for_Msg3_parameters
S0_3
S0_2
S0_1
S0
TAC
('00000011111'B )
frame_value
(7)
preamble_received_target_power
(-36 )
Random_Access_Response_MAC_PDU
(
'01100101000000011111111111110000000000000011111111111110001111'B)
RAR_window_timer(0.0030)
subframe_value
(6)
preamble_value
('100101'B )
Delay_Timer(0.0000)
mac_ContentionResolutionTimer(16.0000)
MAC_PDU_DL
(
'000111001111111111111111111111111111111111111111010011110000000000000'B)
PDCCH_reception
env_0
RRC_process_1_1
process
Multiplexing_and_assembly_1_2
process
Random_access_control_1_3
process
PHY_1_4
process
 
Figure 13.  Non successful contention resolution simulation (2) 
VI. 
CONCLUSON AND FUTURE WORK 
In this paper, the random access process main problems 
are considered for both contention and non contention based 
process and the way MAC sub-layer solve them are 
explained as stated in 3GPP standard.  
SDL/MSC is used to verify and validate the functionality 
of the proposed solution for both unsuccessful RAR and the 
unsuccessful contention resolution problems and reporting 
the upper layer with unsolved ones. A reduced size code is 
generated, which can be integrated with the rest of the 
layers’‎processes,‎when‎implemented,‎to‎produce‎a‎complete‎
E-UTRAN system. Also, the introduced methodology can be 
used to implement other processes in the MAC sub-layer or 
any control layer protocols of LTE system.  
REFERENCES 
[1] Ericsson, June. "Ericsson mobility report." (2014).‏ 
[2] D. Astély, E. Dahlman, A. Furuskär, Y. Jading, M. 
Lindström,‎and‎S.‎Parkvall,‎“LTE:‎The‎Evolution‎of‎Mobile‎
Broadband,”‎IEEE‎Comm.‎Mag.,‎vol‎47,‎no.4,‎2009,‎pp.44-
51,. 
[3] 3GPP TR 25.913: Requirements for Evolved UTRA (E-
UTRA) and Evolved UTRAN (EUTRAN). 
[4] S. Yi, S. Chun, Y. Lee, S. Park, and S. Jung, “Radio‎Protocols‎
for LTE and LTE-advanced”.‎John‎Wiley‎&‎Sons,‎2012.‏ 
[5] 3GPP. TS 36.321 V 9.6.0 3rd Generation Partnership Project; 
Technical Specification Group Radio Access Network; 
Evolved 
Universal 
Terrestrial 
Radio 
Access 
(E-
UTRA);Medium 
Access 
Control 
(MAC) 
protocol 
specification; (2012-03) 
[6] A. N. Khan, J. Khalid, and H. K. Qureshi, “Performance‎
analysis of contention-based random access procedure in 
clustered‎LTE‎networks”.‎In: Next Generation Mobile Apps, 
Services and Technologies (NGMAST), 2013 Seventh 
International Conference on. IEEE, 2013. p. 203-209.  
[7] Z.‎Chen‎and‎Y.‎Zeng,‎“Random‎Access‎Control‎for‎M2M‎in‎
LTE‎ System”‎ International‎ Journal‎ of‎ Distributed‎ Sensor‎
Networks, Volume 2013, pp. 1-8, Article ID 313797.  
[8] J. Löhr, H. Suzuki, O. Gonsa, and  M. Feuersänger, 
"Enhanced 
random 
access 
procedure 
for 
mobile 
communications." U.S. Patent No. 8,737,336. 27 May 2014.‏ 
[9] M. S. Vajapeyam, et al. "Random access procedure 
enhancements for heterogeneous networks." U.S. Patent No. 
8,666,398. 4 Mar. 2014.‏ 
[10] D. T. Wiriaatmadja and K. W. Choi, "Hybrid Random Access 
and Data Transmission Protocol for Machine-to-Machine 
Communications 
in 
Cellular 
Networks." Wireless 
Communications, IEEE Transactions on 14.1 (2015): pp. 33-
46.‏ 
[11] E. Dahlman, S. Parkvall, and J. Skold, “4G:‎ LTE/LTE-
advanced for mobile‎broadband.”‎Academic‎press,‎2013.‏ 
[12] M.‎ S.‎ Yousef,‎ H.‎ A.‎ Elsayed,‎ and‎ A.‎ Zekry,‎ “Design‎ and‎
Simulation‎
of‎
Random‎
Access‎
Procedure‎
in‎
LTE”‎
International Journal of Computer Application, Foundation of 
Computer Science, (IJCA 0975 – 8887), Vol 110, Issue 16, 
Jan. 2015, pp 16 - 22,  New York, USA. 
 
117
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

S0_3
S0_2
S0_1
my_wait
wait_PDU
msg4_Waiting
Wait_msg3_Reply
msg3_state
S0
Waiting_for_Msg3
Waiting_for_Msg3_parameters_2
Waiting_for_Msg3_parameters_1
RAR_window_timer(0.0030)
preamble_received_target_power
(-4 )
frame_value
(7)
subframe_value
(6)
preamble_value
('101100'B )
TAC
('00000011111'B )
RAR_Grant
('11111111000000000000'B )
MSG_3_POWER
(-34 )
Msg3_req
Msg3_reply
(
'111111111111111111111111111111111111111100001111'B)
PDCCH_reception
MAC_PDU_DL
(
'000111001111111111111111111111111111111111111111010011110000000000000'B)
mac_ContentionResolutionTimer(16.0000)
Delay_Timer(0.0000)
MAC_PDU_UL
('111111111111111111111111111111111111111100001111'B
)
env_0
RRC_process_1_1
process
Multiplexing_and_assembly_1_2
process
Random_access_control_1_3
process
PHY_1_4
process
 
Figure 14.  Non successful contention resolution simulation (3) 
118
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

Random_Access_Response_Reception
Waiting_for_Msg3_parameters
Waiting_for_Msg3_parameters_2
Waiting_for_Msg3_parameters_1
msg3_state
Wait_msg3_Reply
Waiting_for_Msg3
Idle
wait_PDU
msg4_Waiting
S0
S0
Random_Access_Response_MAC_PDU
(
'01101100000000011111111111110000000000000011111111111110001111'B)
RAR_window_timer(0.0030)
Msg3_req
Msg3_reply
(
'111111111111111111111111111111111111111100001111'B)
MAC_PDU_UL
('111111111111111111111111111111111111111100001111'B
)
Non_Successful_Random_Access_Process
mac_ContentionResolutionTimer(16.0000)
MAC_PDU_DL
(
'000111001111111111111111111111111111111111111111010011110000000000000'B)
PDCCH_reception
TAC
('00000011111'B )
RAR_Grant
('11111111000000000000'B )
MSG_3_POWER
(-2 )
env_0
RRC_process_1_1
process
Multiplexing_and_assembly_1_2
process
Random_access_control_1_3
process
PHY_1_4
process
 
Figure 15.  Non successful contention resolution simulation (4) 
 
119
Copyright (c) IARIA, 2015.     ISBN:  978-1-61208-439-8
ICSNC 2015 : The Tenth International Conference on Systems and Networks Communications

