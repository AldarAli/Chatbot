Demand Aware Fair Resource Allocation in TDMA
Wireless Networks
Xiaolong Huang and Soumya Das
QUALCOMM Inc., San Diego, California, USA
Email: {xhuang, soumyad}@qualcomm.com
Abstract—Meeting trafﬁc demand and enforcing fairness are
often times necessary but conﬂicting objectives for resource
allocation in wireless networks. Due to the resource sharing
nature of wireless networks, without a mechanism for enforcing
fairness, simply assigning resources to meet trafﬁc demand of
some network ﬂows can lead to resource starvation of other
network ﬂows. Balancing these two objectives is more complex
multi-hop wireless networks, as the resource contention could be
indirect. In this paper, an algorithm is introduced to allocate time
slots in TDMA-based multi-hop wireless networks to achieve a
designated a balance between meeting trafﬁc demand and enforc-
ing fairness. Numerical results show that the algorithm performs
signiﬁcantly better than other resource allocation algorithms. The
introduced algorithm is well suited for distributed TDMA-based
wireless networks, such as ECMA-368 based UWB networks.
Index Terms—Congestion control, fairness, multi-hop wireless
network, optimization, quality of service, resource allocation,
TDMA.
I. INTRODUCTION
Quality of Service (QoS) and fairness are both important
yet often times mutually conﬂicting objectives for resource
allocation and scheduling in wireless networks. Due to the
resource sharing nature of a wireless environment, meeting
the QoS of some ﬂows without addressing the fairness issue
may lead to resource starvation of other ﬂows. The problem
of balancing QoS and fairness becomes more complex when
the network spans more than a single hop. This is evident in
Fig. 1.
In Fig. 1, a ﬂow contention graph is composed of three
one hop ﬂows {A, B, C}. Due to some underlying network
topology, ﬂow B contends with both ﬂows A and C, while
ﬂows A and C do not contend with each other directly. Hence,
a transmission of either ﬂow A or ﬂow C would block ﬂow
B. Two time slots are assumed available for the three ﬂows to
use. Each ﬂow is assumed to require one time slot to meet its
trafﬁc demand. As we can see, the resource allocation strategy
at the top leaves ﬂow B no time resource to use, while the
resource allocation strategy at the bottom can serve all trafﬁc
demands.
The problem of maximizing the time slot allocation efﬁ-
ciency in TDMA wireless networks by exploiting the spatial
reuse is NP-complete [8]. Several algorithms [8], [10] have
been introduced to probabilistically achieve the maximum
resource allocation efﬁciency without considering QoS and
fairness.
QoS and fairness of resource allocation in wireless networks
have been studied in separate contexts extensively. Various
Fig. 1.
Resource Allocation Problem in Multi-hop Wireless Networks
fairness measures have been introduced. Some solutions are
designed to achieve speciﬁc objectives, such as proportional
fairness [1] and max-min fairness [2]. Algorithms to achieve
those objectives are usually complex. Other resource allocation
algorithms, such as DRAND [4], provide a level of fairness
and spatial reuse in multi-hop ad hoc networks without spe-
ciﬁc objective functions but involve much less computational
complexity. These algorithms enforce fairness in the absence
of QoS requirement, hence can be applied when every ﬂow
impose inﬁnite trafﬁc demand. On the other end, various
resource allocation algorithms are introduced to solely meet
the QoS requirements. Schemes, such as [5], allocate time
slots on a ﬂow by ﬂow basis to meet their trafﬁc demands and
can easily lead to unfair congestion situations.
Several algorithms [9], [11] have been introduced to address
the tradeoff between QoS and fairness by dynamically allo-
cating time slots based on trafﬁc loading and ﬂow contention.
In [3], a gradient method based resource allocation scheme
is introduced to gradually regulate the data rate of end-to-
end ﬂows so that a utility function can be maximized across
the network under the underlying ﬂow contention constraint.
Such schemes require adjusting allocated resources in a highly
dynamic manner. However, demand assigned TDMA-based
wireless networks, such as WiMedia networks [6], [7], expect
such resource assignment to be static over a period of time.
Hence, the aforementioned schemes are not suitable for such
a deployment.
In this paper, a Demand Aware Fair resource allocation algo-
rithm (DAF) is proposed to allocate time slots in TDMA-based
multi-hop wireless networks. The DAF algorithm considers
the requirement of QoS and fairness jointly, where QoS is
178
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

measured by the amount of trafﬁc demand that is being served.
The number of assigned time slots remains static during ﬂow
holding (active) times. To meet the trafﬁc demand and to
preserve fairness among multiple ﬂows, DAF is designed to
achieve the following objectives in TDMA-based multi-hop
wireless networks:
• A ﬂow is guaranteed a minimal number of time slots,
called fair share when it has inﬁnite trafﬁc demand. This
imposes a basic standard of fairness.
• The trafﬁc demand of a ﬂow is met when it is lower than
the fair share of the ﬂow.
• Achieve a prescribed balance between serving the trafﬁc
demand and reducing congestion.
We show that the proposed DAF algorithm meets the
trafﬁc demand and enforces the predeﬁned fairness. DAF is
well suited for distributed TDMA-based wireless networks,
such as a WiMedia network, in which nodes advertise their
available time slots to their 2-hop neighbors and then exchange
messages to reserve time slots for new ﬂows.
We introduce several important concepts in Section II. In
Section III, the DAF algorithm and its objective is described.
Numerical results are given in Section IV. Section V concludes
this paper.
II. SYSTEM MODEL
In this section, we present and develop several concepts for
modeling the resource allocation problem in a TDMA-based
multi-hop wireless network.
A. Maximal Common Slot Set
In this paper, a one-hop ﬂow is simply referred to as a
ﬂow. A ﬂow is always considered bidirectional so to take into
account both data and acknowledgement transmissions.
In a TDMA-based wireless network, a ﬂow f can only have
transmissions in a time slot s during which its sender and
receiver are not participating in transmissions for other ﬂows.
The time slot s is then said to be available to ﬂow f.
Deﬁnition 1: A set of time slots S is said to be commonly
available to a group of ﬂows F, if ∀s ∈ S and ∀f ∈ F, s is
available to f. S is said be a common slot set of F. F is said
to be a common ﬂow group of S.
A time slots set S, a ﬂows group F, and their relations can
be modeled as a bipartite graph G = (S + F, E). An edge
exists between s ∈ S and f ∈ F if and only if s is available
to f. A common slot set S and its common ﬂow group F
forms a complete bipartite graph.
Deﬁnition 2: A group of ﬂows F is said to be the maximal
common ﬂow group of its common slot set S, if and only if S
does not have another common ﬂow group eF so that F ⊂ eF.
Deﬁnition 3: A set of time slots S that has a maximal
common ﬂow group F is said to be a maximal common slot
set (MCSS), if and only if 1) No other time slot set eS has F
as its maximal common ﬂow group, and 2) No other time slot
set eS, eS ⊂ S has a maximal common ﬂow group eF such that
eF ⊃ F.
The ﬁrst requirement means that the complete bipartite
graph formed by S and F includes all time slots that are
available to F. The second requirement means that a maximal
common slot set does not contain any common slot set that
serves more ﬂows than it does.
The signiﬁcance of the maximal common slot set is that
a TDMA frame can be partitioned into disjoint maximal
common slot sets, where each MCSS set has a designated
maximal ﬂow group it can serve.
A simple way to obtain MCSSs is to start with individual
time slots and their maximal common ﬂow groups, and then
group those time slots that have identical maximal common
ﬂow groups. The process stops when no two time slot sets have
identical maximal ﬂow groups. The maximum computational
complexity is of O(n2), where n is the number of time slots. In
this paper, we do not study the algorithm of obtaining maximal
common slot sets.
B. Maximal Common Slot Set based Flow Contention Graph
In wireless networks, two transmissions may cause strong
interference between each other if they overlap in time,
frequency and space. In this paper, only single carrier TDMA-
based multi-hop wireless networks are treated. Hence, only
time and space domains can be explored, which manifests as
TDMA operations and spatial reuse, respectively. To precisely
capture the exploration of time and space, we introduce the
concept of Maximal Common Slot Set based Flow Contention
Graph (MCSS-FCG).
Deﬁnition 4: Two ﬂows are said to be contending ﬂows for
each other if their simultaneous transmissions cause strong
interference to each other and subsequently result in transmis-
sion failures. Under a protocol model, two ﬂows are said to be
contending for each other if the source or the destination of
one ﬂow is within the nominal communication range of that
of the other ﬂow.
A Flow Contention Graph (FCG) captures all ﬂow con-
tention information. The mapping from a nodal graph to a
ﬂow contention graph is well known [12] and illustrated in
Fig. 2. In Fig. 2, all ﬁve ﬂows are considered bidirectional.
Each ﬂow in the nodal graph is converted into a vertex in the
ﬂow contention graph. An edge exists between two vertices in
a ﬂow contention graph if and only if the corresponding two
ﬂows contend with each other.
Deﬁnition 5: A maximal clique is a set of vertices that
induces a complete graph, and is not a sub-graph of any other
complete graph. A degree of a maximal clique is deﬁned as
the number of vertices in that clique.
A ﬂow contention graph can be decomposed into a set
of maximal cliques as shown in Fig. 3. In Fig.3, the ﬂow
contention graph is composed of three maximal cliques,
{A, B, C}, {B, C, D} and {D, E}. Each clique is a complete
graph and is not a sub-graph of any other complete graph in
the ﬂow contention graph.
Deﬁnition 6: A Maximal Common Slot Set based Flow
Contention Graph (MCSS-FCG) is just a ﬂow contention
graph with respect to a maximal common slot set. All time
179
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

Fig. 2.
Nodal Graph and its Flow Contention Graph
Fig. 3.
Maximal Clique Decomposition of a Flow Contention Graph
slots in a maximal common slot set are available to all ﬂows
in the MCSS-FCG.
A MCSS-FCG is only meaningful with respect to its max-
imal common slot set. MCSS-FCGs associated with different
maximal common slot sets are distinct. Flows that are assigned
time slots in different maximal common slot sets do not
contend with each other. We note that, when all time slots
are available to all ﬂows in the network, there exists a
unique MCSS-FCG in the network, which is the overall ﬂow
contention graph itself.
An example of maximal common slot sets of their MCSS-
FCG is illustrated in Fig. 4. There are 7 ﬂows, {A, B, ..., G},
in the overall ﬂow contention graph. Each ﬂow has some
particular time slots available in the frame for its use. Three
maximal common slots are assumed to be identiﬁed. Each
maximal common slot has a ﬂow contention graph that is
formed by its common ﬂow group. A ﬂow may reside in mul-
tiple MCSS-FCGs. For example, all three maximal common
slot sets are available for ﬂow A. Hence, ﬂow A resides in all
three MCSS-FCGs.
C. Fair Share in a MCSS-FCG
Deﬁnition 7: A fair share is deﬁned as a number of time
slots that shall be assigned to a ﬂow when every ﬂow in the
network imposes inﬁnite trafﬁc demand that can saturate the
network.
Assigning fair shares to ﬂows when ﬂows contend among
one another in a trafﬁc overloaded network enforces a standard
of fairness. Since ﬂows that are assigned with time slots in
Fig. 4.
Maximal Common Slot Set and its MCSS-FCG
Fig. 5.
Max-min Fair Share Assignment
different maximal common slot sets do not contend with each
other, the fair share is only meaningful with respect to a
speciﬁc MCSS-FCG. When a ﬂow resides in multiple MCSS-
FCGs, this ﬂow has a fair share value in each MCSS-FCG.
Fair shares can be assigned based on a speciﬁc objective
or assigned arbitrarily based on service agreement. To give an
intuitive idea of fairness, the normalized max-min fair share
assignment in a perfect graph studied in [2] is shown in Fig.
5. It is feasible to allocate and schedule 1
3 time slots to Flows
A, B, C, and D and allocate
1
3 time slots to Flow E. The
fairness nature of this allocation is that no ﬂow can increase
the assigned amount of time slots without reducing the time
slots of other ﬂows that are already assigned with less or equal
amount of time slots.
In our resource allocation algorithm study, a simple rule of
assigning fair shares is used. The fair share for a ﬂow in a
MCSS-FCG that has L time slots in the associated maximal
common slot set is set to L
d , where d is the highest degree of
all maximal cliques the ﬂow resides in.
III. RESOURCE ALLOCATION ALGORITHM
At any point in time, a TDMA-based multi-hop wireless
network may be serving existing ﬂows while a new set of ﬂows
may be initiated in the network. The trafﬁc demand of these
new ﬂows can be expressed in bits per frame. To negotiate the
trafﬁc demand to be served, a signaling process can compute
and then reserve time slots for these ﬂows on selected routes.
Our DAF resource allocation algorithm used by the signaling
process strives to achieve the following objectives:
• The portion of trafﬁc demand within the fair share of a
ﬂow should be fully met.
• Minimize the cost associated with inadequate serving of
trafﬁc demand and the cost associated with allocating
time slots above fair shares.
DAF is executed over a set of MCSS-FCGs. DAF com-
prises two processes, namely the inter-graph process and the
180
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

intra-graph process. The inter-graph process selects, in each
iteration step, a maximal common slot set and its associated
MCSS-FCG to execute the intra-graph process. Its selection
of the maximal common slot set is critical to meet the trafﬁc
demand. The intra-graph process assigns time slots in the
selected MCSS-FCG with an objective to balance between
QoS and fairness.
We note that, for a real implementation in a distributed
manner, the computational complexity of obtaining a complete
MCSS-FCG can be large. To reduce the control overhead
and computational complexity, a MCSS-FCG used for com-
putation may cover only the maximal cliques where the
underlying ﬂow resides. Once the computation is ﬁnished,
the source/destination of the underlying ﬂow can advertise its
assignment results to the source/destination of a contending
ﬂow. To ensure a feasible time slot assignment, the ﬁnal
time slot assignment of a ﬂow can be set to the mini-
mum among all assignments of this ﬂow suggested by the
sources/destinations of this ﬂow and contending ﬂows. Such
an assignment computed in a distributed manner could be sub-
optimal. Nevertheless, we proceed in the following to describe
the algorithm in its centralized form.
A. Inter-Graph Process
The following notations are used:
• Denote by {Gn}, n = 1, 2, ..., N, the set of MCSS-FCGs.
Denote by {clk
n}, k = 1, 2, ..., K, the set of maximal
cliques in Gn. Denote by dk
n the degree of clk
n.
• Denote by {sl}, l = 1, 2, ..., L, the set of ﬂows in {Gn}.
Denote by ql the outstanding trafﬁc demand of sl.
Algorithm 1: Inter-Graph Process
1 For each Gn, set the maximal degree ˆ
dn of Gn to be
ˆ
dn = maxK
k=1 dk
n;
2 Sort {Gn} in an ascending order of { ˆ
dn};
3 Denote by ni the original index of the ith MCSS-FCG in the
sorted set;
4 for i = 1, 2, ..., N do
5
Execute the intra-graph process based on Gni. Denote by qni
l
the trafﬁc demand served in Gni for sl after the intra-graph
process;
6
for l = 1, 2, ..., L do
7
ql := ql − qni
l ;
8
Remove sl from {Gn} if ql == 0;
9
end
10
Update { ˆ
dn}. Sort {Gn} in an ascending order of { ˆ
dn};
11 end
The inter-graph process is speciﬁed by Algorithm 1. The
process utilizes the time slots of a MCSS-FCG ahead of other
MCSS-FCGs, if its ﬂow contention level is the lowest (i.e.,
the highest degree of all of its maximal cliques is the lowest
compared to other MCSS-FCGs). By doing this, the trafﬁc
demand of a ﬂow can be served as much as possible before
this ﬂow enters the competition for the precious time slot
resources with other contending ﬂows in those high contention
level MCSS-FCGs. Once time slots are assigned to a ﬂow in
an intra-graph process, the demand of this ﬂow is reduced
accordingly. If the demand of a ﬂow is fully met, the ﬂow
is removed from the set of MCSS-FCGs. Hence, the inter-
graph process aggressively reduces the ﬂow contention levels
of MCSS-FCGs in each iteration.
The computational complexity of the inter-graph process
is identiﬁed to be O

The optimization problem for achieving all objectives spec-
iﬁed in Section III is described below:
min
x1,x2,...,xL wu
L
X
i=1
u(xi − fi)Ixi≥fi + wv
L
X
i=1
v(qi − Rixi)I qi
Ri ≥xi.
(1)
The problem is subject to the following constraints:
• The portion of trafﬁc demand within the fair share of a
ﬂow should be fully met.
Rixi = qi, ∀ qi
Ri
≤ fi.
(2)
• The actual assigned resource is no greater than qi.
Rifi ≤ Rixi ≤ qi, ∀ qi
Ri
≥ fi.
(3)
• The total number of slots assigned in a maximal clique
is no larger than sn, where sn is the total number time
slots in MCSS-FCG Gn.
L
X
i
xi ≤ sn.
(4)
The cost functions are weighted by wu and wv, which can be
used as preferences given to QoS and fairness, respectively.
To help solving the optimization problem 1, the following
derived functions are introduced.
• Denote by Ui(x) the rate of cost increase induced by al-
locating time slots beyond fair share for ﬂow i. Precisely,
we deﬁne
Ui(x) = wu
∂u(x − fi)
∂x
.
(5)
Note that, Ui increases with respect to x, since ∂Ui(x)
∂x
=
wu
∂2u(x−fi)
∂x2
> 0.
• Denote by Vi(x) the rate of cost decrease induced by
inadequately serving trafﬁc demand for ﬂow i. Precisely,
we deﬁne
Vi(x) = −wv
∂v(qi − Rix)
∂x
.
(6)
Note that, Vi decreases with respect to x, since ∂Vi(x)
∂x
=
−wv
∂2v(qi−Rix)
∂x2
< 0.
Hence, Vi(x)−Ui(x) is a non-increasing function with respect
to x. We call Vi(x)−Ui(x) the characteristic function of ﬂow
i.
The intra-graph resource allocation process is speciﬁed by
Algorithm 2. The algorithm essentially does the following: 1)
when the rate of cost decrease in inadequately serving trafﬁc
demand is less than the rate of cost increase in allocating extra
time slots beyond fair share, the assignment moves towards the
fair share; 2) when the rate of cost decrease in inadequately
serving trafﬁc demand is more than the rate of cost increase
in allocating extra time slots beyond fair share, the assignment
moves towards meeting the trafﬁc demand of the ﬂow; 3) the
number of time slots assigned to a ﬂow is set to a value
between the fair share and the trafﬁc demand such that the
assignment balances these two conﬂicting costs.
Algorithm 2: Intra-Graph Algorithm
1 for any ﬂow i that has qi ≤ Rifi do
2
Set ˆxi = qi
Ri as the number of time slots to be assigned;
3 end
4 for any ﬂow i that has qi > Rifi do
5
Calculate the max value and the min value of Vi(x) − Ui(x).
In fact, we have
Vi(fi) − Ui(fi) ≥ Vi(x) − Ui(x) ≥ Vi( qi
Ri ) − Ui( qi
Ri );
6 end
7 Put all max and min values of Vi(x) − Ui(x) into one set Φ. Sort
the elements of Φ in an increasing order. Denote the sequence by
φj, j = 1, 2, ..., J;
8 for j = 1, 2, ..., J do
9
for all ﬂow i = 1, 2, ...eL that do not have ﬁnal slot
assignments do
10
Calculate xi as follows:
xi =





fi
φj ≥ Vi(fi) − Ui(fi)
qi
Ri
φj ≤ Vi( qi
Ri ) − Ui( qi
Ri )
x|Vi(x) − Ui(x) = φj
o.w.
11
end
12
if
L
P
i
xi ≤ sn then
13
Set φH = φj and φL = φj−1;
14
Break;
15
end
16 end
17 for all ﬂow Ω = {i} that have φL ≤ Vi(xi) − Ui(xi) ≤ φH do
18
Solve the equation array
Vi(xi) − Ui(xi) = Vj(xj) − Uj(xj), i ∈ Ω and
L
P
l=1
xl = sn, L is the total number of ﬂows;
19 end
20 Set ˆxi = xi;
Fig. 6.
DAF algorithm
182
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

Solving the equation array at Step 15 in Algorithm 2
gives the precise optimal solution, but can be computationally
expensive, as V (.) and U(.) can be nonlinear polynomials as
deﬁned earlier. Hence, the bisection method can be used to ﬁnd
a solution arbitrarily close to the optimal solution with much
less complexity. At Step 15 in Algorithm 2, the following
bisectional iteration should be executed. In each iteration step,
set ˆφ =
φL+φH
2
and set xi = {x|Vi(x) − Ui(x) = ˆφ}. If
L
P
l=1
xl < sn, set φH = ˆφ. If
L
P
l=1
xl > sn, set φL = ˆφ. And then
go to the next iteration. The iteration ends when the difference
between
L
P
l=1
xl and sn is less than a negligible error margin.
A graphic representation of the resource allocation results
of the intra-graph algorithm is shown in Fig. 6. The intra-
graph algorithm is shown as one step in the inter-graph
process. The characteristic function of each ﬂow is evaluated
against a common water ﬁlling level, which is fundamentally
determined by the network scenario. A ﬂow should be served
exactly an amount so that its associated characteristic function
level is closet to the common water ﬁlling level.
In the following, we prove that Algorithm 2 solves the
optimization problem in Eq.1.
Theorem 1: For any functions u(z) and v(z) that possess
the general properties described above, the optimization prob-
lem 1 has the following optimal solution:
ˆxi =









qi
Ri
if qi ≤ Rifi
fi
if qi > Rifi and γ > Vi(fi) − Ui(fi)
∈

fi, qi
Ri

if qi > Rifi and γ = Vi( ˆxi) − Ui( ˆxi)
qi
Ri
if qi > Rifi and γ < Vi( qi
Ri ) − Ui( qi
Ri )
(7)
where γ > 0 is selected so that
L
P
i
xi ≤ sn.
Proof: From Eq. 2, we have ˆxi = qi
Ri , ∀qi ≤ Rifi. This
indicates that we only need to solve the problem for qi > Rifi,
so that qi
Ri > xi and xi > fi. Hence, identity functions in Eqn.
1 can be subsequently removed and the problem is reduced to
the following:
min
x1,x2,...,x e
L
wu
eL
X
i=1
u(xi − fi) + wv
eL
X
i=1
v(qi − Rixi)
(8)
s.t.





fi ≤ xi ≤ qi
Ri
eL
P
i=1
xi ≤ sn − P
j
qj
Rj , qj ≤ Rjfj
(9)
Let Qt = P
j
qj
Rj , qj ≤ Rjfj. We have Qt to represent the
total number of time slots assigned to those ﬂows whose trafﬁc
demands are less than their fair shares.
Based on the Karush-Kuhn-Tucker conditions, we have

































∂
 
wu
e
L
P
i=1
u( ˆ
xi−fi)+wv
e
L
P
i=1
v(qi−Ri ˆ
xi)
!
∂ ˆ
xi
+ ∂βi(Ri ˆ
xi−qi)
∂ ˆ
xi
+ ∂σi(fi− ˆ
xi)
∂ ˆ
xi
+
∂γ
 
e
L
P
i=1
ˆ
xi−(sn−Qt)
!
∂ ˆ
xi
= 0
βi(Ri ˆxi − qi) = 0
σi(fi − ˆxi) = 0
γ
 
eL
P
i=1
ˆxi − (sn − Qt)
!
= 0
βi ≥ 0, σi ≥ 0, γ ≥ 0
⇔



















Ui( ˆxi) − Vi( ˆxi) + Riβi − σi + γ = 0
βi(Ri ˆxi − qi) = 0
σi(fi − ˆxi) = 0
γ
 
eL
P
i=1
ˆxi − (sn − Qt)
!
= 0
βi ≥ 0, σi ≥ 0, γ ≥ 0
For the case σi > 0, we have ˆxi = fi. Consider the following
sub-cases.
1) For βi = 0, ˆxi <
qi
Ri , we have Ui(fi) − Vi(fi) + γ =
σi > 0. Hence, γ > Vi(fi) − Ui(fi).
2) For βi > 0, we have ˆxi = qi
Ri . Since we have qi > Rifi,
and ˆxi = fi is contradictory to ˆxi =
qi
Ri , this case is
abandoned.
For the case σi = 0, ˆxi > fi, consider the following sub-cases.
1) For βi > 0, we have ˆxi = qi
Ri and Ui( qi
Ri )−Vi( qi
Ri )+γ =
−Riβi < 0. Hence, we have γ < Vi( qi
Ri ) − Ui( qi
Ri ).
2) For βi = 0, ˆxi < qi
Ri , we have Ui( ˆxi) − Vi( ˆxi) + γ = 0.
Hence, γ = Vi( ˆxi) − Ui( ˆxi) and fi ≤ ˆxi ≤ qi
Ri .
Theorem 2: Algorithm 2 achieves the optimal solution for
the optimization problem in Eq.1.
Proof: Assume
L
P
l=1
ql
Rl
> sn. Otherwise, the optimal
solution is ˆxl = ql
Rl .
At the end of step 13 in Algorithm 2, we have identiﬁed
two bounds φL and φH. Due to the execution of Step 10 and
11, setting γ = φL and setting ˆxl according to Eq. 7, we will
have
L
P
l=1
xl > sn. Setting γ = φH and setting ˆxl according to
Eq. 7, we will have
L
P
l=1
xl ≤ sn. Hence, the optimal solution
exists for γ ∈ [φL, φH].
Consider those ﬂows {i} where Vi(fi)−Ui(fi) < φL. Since
φL ≤ γ, we have Vi(fi) − Ui(fi) < γ. At the end of Step
13, we already set ˆxi = fi, which is the optimal solution
of these ﬂows according to Theorem 1. Consider those ﬂows
where Vj( qj
Rj ) − Uj( qj
Rj ) > φH. Since φH ≥ γ, we have
Vj( qj
Rj ) − Uj( qj
Rj ) > γ. At the end of Step 13, we already
set ˆxj =
qj
Rj , which is the optimal solution of these ﬂows
according to Theorem 1. The remaining ﬂows have Vk(xk) −
183
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

Uk(xk) = γ, which is the optimal solution for them according
to Theorem 1.
Assume the bisection method to be used at Step 15.
The computational complexity of the intra-graph process is
O

L2 + L log2
φH−φL
∆

, where L denotes the number of
ﬂows in the MCSS-FCG, and ∆ denotes the negligible error
margin. The derivation of the complexity is straightforward
and hence omitted in this paper due to the page limit.
IV. NUMERICAL RESULTS
In this section, the performance of DAF is demonstrated
through numerical experiments. The beneﬁt of the inter-graph
process is demonstrated by Scenario 1, where MCSS-FCGs
are simple so that the algorithm execution order over the list
of MCSS-FCGs has a more signiﬁcant impact on the time slot
assignment than resolving the ﬂow contention in each MCSS-
FCG. The beneﬁt of the intra-graph process is demonstrated
by Scenario 2, where MCSS-FCGs are complex so that it
is critical to address the trade-off between meeting trafﬁc
demands and preserving fairness within each MCSS-FCG.
We compare the time slot allocation results obtained by
DAF to those obtained by DRAND [4]. Furthermore, we
extend DRAND to an enhanced version that employs our inter-
graph process. We refer to the enhanced version of DRAND
as E-DRAND. E-DRAND selects, in each iteration step, a
maximal common slot set and its associated MCSS-FCG to
execute the generic DRAND algorithm. E-DRAND helps iden-
tify the beneﬁt of the inter-graph process. Numerical results
show that DAF performs signiﬁcantly better than DRAND and
E-DRAND.
A. Simulation Model
The inputs of our program include ﬂows, their trafﬁc
demands, and MCSS-FCGs, so that the program does not
implement control protocols or graph computation algorithms
to prepare these input parameters. We did not conduct our
simulation using a full ﬂedged network simulator, such as
NS-2, since a generic program can provide us rich scenarios
with ﬂexible input parameters, without the involvement of
inessential network events in a full ﬂedged network simulator.
The example function u(z) that represents the cost induced
by allocating extra time slots above the fair share is set to
u(z) = z, z ≥ 0, equivalent to u(x − f) = x − f, x ≥ f.
Hence, we have Ui(x) = wu. The example function v(z)
that represents the cost induced by inadequately serving trafﬁc
demand is set to v(z) =
1
q−z − 1
q, 0 ≤ z ≤ q, equivalent
to v(q − Rx)
=
1
Rx − 1
q, 0
≤
x
≤
q
R. Hence, we
have V (x) =
wv
Rx2 . Under this setting, the cost induced by
inadequately serving trafﬁc demand increases drastically when
more trafﬁc demand is not served.
We set the weights for these cost functions so that their
rate of changes are about the same. Assume a typical ﬂow
requires 50 time slots among 256 available time slots. We set
wu
wv =
1
2500R. For a concise presentation, we assume a common
data rate R = 1 bit per slot for all ﬂows.
Fig. 7.
Network Scenario 1
The criterion for fairness is deﬁned with low computational
complexity. The fair share for a ﬂow i, in a MCSS-FCG, Gn,
is set to be equal to sn
dn
i , where dn
i is the maximum degree of
all maximal cliques ﬂow i resides within Gn, sn is the number
of time slots available in Gn. An assignment is said to be fair
for ﬂows in the MCSS-FCG, if every ﬂow in the MCSS-FCG
is assigned an amount of slots that is larger than or equal to
its fair share.
To quantitatively evaluate the performance of the algo-
rithms, we compare the values of the objective function
speciﬁed in Eq. 1 calculated on the overall contention graph.
The objective function speciﬁed in Eq. 1 represents the total
cost incurred from inadequate serving of trafﬁc demand and
allocating time slots beyond a fair share.
B. Network Scenario 1
A network scenario with a relatively low ﬂow contention
level is studied to highlight the beneﬁt of the inter-graph
process. In this setup, fairness is a lesser issue, since trafﬁc
demand can be well served by using a particular order in which
the inter-graph process selects MCSS-FCGs. The scenario is
illustrated in Fig. 7.
There are 4 new ﬂow arrivals. Each ﬂow has an opportunity
to utilize some time slots. Three maximal common slot sets
and their corresponding MCSS-FCGs are identiﬁed. Flow 3
can utilize 136 time slots in total (36 from MCSS 1 and 100
from MCSS 2), however it has to contend with many other
ﬂows in two maximal common slot sets. Flow 4 can utilize
120 time slots without facing any contention from other ﬂows.
Two trafﬁc demand patterns are simulated. They are speciﬁed
by their corresponding trafﬁc demand vectors in Table I and
Table II. Trafﬁc pattern 2 has slightly higher trafﬁc demand
than trafﬁc pattern 1. The results under trafﬁc pattern 1 and
trafﬁc pattern 2 are shown in Table I and Table II, respectively.
DAF is shown to meet the joint QoS and fairness require-
ment much better than DRAND and perform about the same
as E-DRAND does, as it achieves the lowest objective function
value. This result highlights the signiﬁcant beneﬁt of using our
inter-graph process.
184
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

TABLE I
SLOT ASSIGNMENT COMPARISON UNDER TRAFFIC PATTERN 1
Flow ID
Demand (slots)
DAF
DRAND
E-DRAND
#1
35
35
28
35
#2
70
52
46
65
#3
35
35
35
35
#4
100
100
100
100
Objective Value
-70.6374
-59.5093
-67.2527
TABLE II
SLOT ASSIGNMENT COMPARISON UNDER TRAFFIC PATTERN 2
Flow ID
Demand (slots)
DAF
DRAND
E-DRAND
#1
50
36
24
36
#2
50
50
42
50
#3
50
50
46
50
#4
100
100
100
100
Objective Value
-49.5556
-24.9617
-49.5556
TABLE III
SLOT ASSIGNMENT DETAILS UNDER TRAFFIC PATTERN 1
Flow ID
FCG #1
FCG #2
FCG #3
#1
35
#2
18
35
#3
18
17
#4
100
The time slot assignment in each MCSS-FCG under trafﬁc
pattern 1 is shown in Table III. The following observations
can be drawn from trafﬁc pattern 1’s results:
• The advantage of the inter-graph process can be clearly
seen. Flow 4 is assigned as many slots as possible in G3
due to the effect of the inter-graph process, so that its
high demand does not interfere with other ﬂows.
• Trafﬁc demands of ﬂow 1 and 3 are completely served
due to their relatively low trafﬁc demand levels. Flow 1’s
assignment in G2 is slightly above its fair share (33 slots)
since assignment for ﬂow 2 and 3 in G1 has relieved the
contention in G2. Again, the advantage of the inter-graph
process is evident.
• Time slots of G2 are not all utilized, since a ﬂow only
accepts the minimum of all assignments it receives from
all maximal cliques within a graph.
The time slot assignment in each MCSS-FCG under trafﬁc
pattern 2 is shown in Table IV. The following observations
can be drawn from trafﬁc pattern 2’s results:
• Trafﬁc demand of ﬂow 1 cannot be fully met due to its
high level of trafﬁc demand in the only MCSS-FCG, G2,
it resides in. Note that its assignment is above its fair
share.
• Flow 2 and 3 are in a topologically similar position, as
the degrees of their maximal cliques are equal in G1 and
G2 and they contend with similar set of ﬂows. When
trafﬁc demand levels of ﬂow 2 and 3 become more even
compared to theirs in trafﬁc pattern 1, their trafﬁc demand
TABLE IV
SLOT ASSIGNMENT DETAILS UNDER TRAFFIC PATTERN 2
Flow ID
FCG #1
FCG #2
FCG #3
#1
36
#2
18
32
#3
18
32
#4
100
Fig. 8.
Network Scenario 2
can be fully met.
C. Network Scenario 2
A network scenario with a higher ﬂow contention level is
studied to highlight the beneﬁt of the intra-graph process. In
this setup, more fairness problems would need to be addressed
by the intra-graph process and algorithm. The scenario is
illustrated in Fig. 8.
There are 6 new ﬂow arrivals. Three maximal common slot
sets and their MCSS-FCGs are identiﬁed. Flow 2, 3, 5 and
6 are in a high contention level among each other in various
MCSS-FCGS {G1, G2, G3}. Two trafﬁc demand patterns are
simulated. They are speciﬁed by their corresponding trafﬁc
demand vectors in Table V and Table VI. Trafﬁc pattern 4
has slightly higher trafﬁc demand than trafﬁc pattern 3. The
results under trafﬁc pattern 3 and trafﬁc pattern 4 are shown
in Table V and Table VI, respectively.
DAF is shown to meet the joint QoS and fairness require-
ment much better compared to DRAND and E-RAND, as
it achieves the lowest objective function value. This result
highlights the signiﬁcant beneﬁt of using our intra-graph
process.
The time slot assignment in each MCSS-FCG under trafﬁc
pattern 3 is shown in Table VII. The following observations
can be drawn from trafﬁc pattern 3’s results:
• All trafﬁc demand requirements are satisﬁed. This is due
185
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

TABLE V
SLOT ASSIGNMENT COMPARISON UNDER TRAFFIC PATTERN 3
Flow ID
Demand (slots)
DAF
DRAND
E-DRAND
#1
50
50
17
22
#2
50
50
50
50
#3
50
50
35
39
#4
50
50
16
21
#5
50
50
50
50
#6
50
50
50
50
Objective Value
-39.0000
103.7374
39.7865
TABLE VI
SLOT ASSIGNMENT COMPARISON UNDER TRAFFIC PATTERN 4
Flow ID
Demand (slots)
DAF
DRAND
E-DRAND
#1
60
42
17
19
#2
60
60
60
60
#3
60
60
35
37
#4
60
50
16
20
#5
60
60
60
60
#6
60
60
60
60
Objective Value
19.1905
158.7374
116.146
TABLE VII
SLOT ASSIGNMENT DETAILS UNDER TRAFFIC PATTERN 3
Flow ID
FCG #1
FCG #2
FCG #3
#1
50
#2
18
32
#3
18
32
#4
50
#5
10
40
#6
10
40
to the fact that G1 and then G3 are able to sequentially
provide large amount of time slots for ﬂow 2, 5, and 6,
which leads to a signiﬁcantly lowered trafﬁc demand in a
highly contended MCSS-FCG G2. As an example, ﬂow
2 does not need to be assigned any time slots in G2.
The time slot assignment in each MCSS-FCG under trafﬁc
pattern 4 is shown in Table VIII. The following observations
can be drawn from trafﬁc pattern 4’s results:
• Flow 1’s trafﬁc demand cannot be fully accommodated
in G2, since its contending ﬂow, ﬂow 3 has an increased
its demand. Note that ﬂow 1’s assignment in G2 is surely
still above its fair share.
• The tradeoff between meeting trafﬁc demand and main-
taining fairness thereby reducing potential congestion is
addressed by DAF. The time slots of G2 are not all
utilized, although ﬂow 1 still has trafﬁc demand to meet.
This is because many ﬂows have been allocated time slots
beyond their fair shares.
V. CONCLUSIONS
In this paper, a demand-aware fair resource allocation
algorithm is proposed to allocate time slots in TDMA-based
multi-hop wireless networks with the objective of meeting
TABLE VIII
SLOT ASSIGNMENT DETAILS UNDER TRAFFIC PATTERN 4
Flow ID
FCG #1
FCG #2
FCG #3
#1
42
#2
18
2
40
#3
18
42
#4
50
#5
20
40
#6
20
40
both trafﬁc demand as much as possible while enforcing
a predeﬁned fairness level. The algorithm projects the new
network ﬂow arrivals onto multiple Maximal Common Slot
Set based Flow Contention Graphs and then executes an intra-
graph resource allocation algorithm over contention graphs
in a carefully selected order. The execution order strives to
reduce the ﬂow contention as much as possible before the
intra-graph algorithm starts allocating time slots over each par-
ticular graph. The proposed intra-graph algorithm is proven to
minimize, over a maximal clique, a generic cost function value
incurred when inadequately serving trafﬁc demand and serving
beyond fair shares. Numerical experiments are conducted to
demonstrate the effectiveness of the proposed algorithm. The
proposed algorithm is shown to well meet the trafﬁc demand
and achieve the predeﬁned fairness.
REFERENCES
[1] L. B. Jiang, and S. C. Liew, Proportional fairness in wireless LANs and
ad hoc networks, Proceedings of IEEE WCNC 3, volume 3, pp. 1551–
1556, March 2005.
[2] X. L. H., and B. Bensaou, On Max-min Fairness Bandwidth Allocation
and Scheduling in Wireless Ad Hoc Networks: Analytical Framework and
Implementation, Proceedings of ACM MobiHoc, pp. 221–231, 2001.
[3] L. Chen, S. H. Low, and J. C. Doyle, Joint congestion control and media
access control design for ad hoc wireless networks, Proceedings of IEEE
INFOCOM 3, volume 3, pp. 2212–2222, March 2005.
[4] I. Rhee, A. Warrier, and J. Min: DRAND, Distributed Randomized
TDMA Scheduling for Wireless Ad-hoc Networks, Proceedings of ACM
MobiHoc, pp. 190–201, 2006.
[5] H. Zhai, QoS Support over UWB Mesh Networks, Proceedings of IEEE
WCNC, pp. 2283–2288, March 2008.
[6] Standard ECMA-368 High Rate Ultra Wideband PHY and MAC Standard,
http://www.ecma-international.org/publications/standards/Ecma-368.htm,
December 2008.
[7] Standard ECMA-387 High Rate 60 GHz PHY, MAC and HDMI PAL,
http://www.ecma-international.org/publications/standards/Ecma-387.htm,
December 2008.
[8] A. M. Chou, and V. O. K. Li, Slot Allocation Strategies for TDMA
Protocols in Multihop Packet Radio Networks, Proceedings of IEEE
INFOCOM 2, volume 2, pp. 710–716, May 1992.
[9] J. Grnkvist, Trafﬁc Controlled Spatial Reuse TDMA in Multi-hop Radio
Networks, Proceedings of IEEE PIMRC 3, volume 3, pp. 1203–1207,
September 1998.
[10] P. Bjrklund, Vrbrand, P., and Yuan, D., Resource Optimization of Spatial
TDMA in Ad Hoc Radio Networks: A Column Generation Approach,
Proceedings of IEEE INFOCOM 2, volume 2, pp. 818–824, April 2003.
[11] H. L. Chao, and W. Liao, Credit-Based Slot Allocation for Multimedia
Mobile Ad Hoc Networks, IEEE Journal on Selected Areas in Commu-
nications 21(10), volume 21, pp. 1642–1651, December 2003.
[12] T. Nandagopal, T. E. Kim, X. Gao, and V. Bharghavan, Achieving MAC
layer fairness in wireless packet networks, Proc. ACM MobiCom, pp.
87–98, September 2000.
186
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-203-5
ICWMC 2012 : The Eighth International Conference on Wireless and Mobile Communications

