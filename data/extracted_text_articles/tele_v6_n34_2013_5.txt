123
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Improving Retransmission Performance of IP-Based Transport Protocols
Stan McClellan
Ingram School of Engineering
Texas State University
San Marcos, TX USA
stan.mcclellan@txstate.edu
Wuxu Peng
Department of Computer Science
Texas State University
San Marcos, TX USA
wuxu@txstate.edu
Abstract—This paper analyzes the algorithm used for es-
timating retransmission timeouts in connection-oriented IP-
based transport protocols, such as the Transmission Control
Protocol (TCP) and the Stream Control Transmission Protocol
(SCTP). The estimation algorithm uses historical values of
the round-trip time to estimate future round-trip delays,
and so creates a maximum waiting time before triggering
retransmission attempts. The purpose of the analysis is to
question / validate some of the fundamental assumptions used
in the estimation algorithm. The conclusion of the analysis is
that the algorithm is somewhat mismatched to the dynamics of
the current Internet. Alternative algorithms are discussed, and
potential modiﬁcations are presented. Impact of the suggested
alternative algorithm on the well-known selective acknowledge-
ment and fast retransmit mechanisms is discussed.
Keywords-SCTP; retransmission timeout; round-trip time;
RTT; RTO; selective acknowledgment; fast retransmits; Ja-
cobson algorithm; Chebyshev approximation; parameter esti-
mation; upper bound.
I. INTRODUCTION
This paper looks at the timing aspect of IP-based transport
protocols (TCP and SCTP) of the Internet. Although this
topic has been studied extensively in the literature in the
past, we believe that our paper has made valuable new
contribution on it. The theme of this paper is that the timeout
aspects of current TCP and SCTP protocols can no longer
reﬂect the current infrastructure and trafﬁc dynamics of
today’s Internet. Current and future research should work on
new and practical timeout mechanisms that meet the need
of changed/changing landscapes of Internet. The paper is an
extended and enhanced version of our conference paper [1].
IP-based transport protocols such as the Transmission
Control Protocol (TCP) [2] and the Stream Control Trans-
mission Protocol (SCTP) [3], [4] estimate maximum round-
trip times using data from prior successful transmissions.
The purpose of this estimation process is to create a
triggering mechanism for retransmission procedures when
transmissions are lost or seriously delayed. Estimation of
the maximum round-trip time is performed via the Jacobson
algorithm [5], which is codiﬁed in several IETF RFC’s,
including RFC 6298 [6]. The Jacobson algorithm has an
interesting basis in fundamental theory, but suffers from
some performance issues due to a mismatch between the
theory and the application area. Performance issues related
to the Jacobson algorithm and other retransmission proce-
dures have been noted and addressed in several alternative
approaches, including [7]–[12]. The paper discusses the
Jacobson algorithm, the theory which motivates it, and
several alternative algorithms including a new approach
which is a modiﬁed form of Jacobson. Section II describes
the estimation process and its use in establishing timeouts for
retransmission procedures. Related work in retransmission
optimization and timeout boundaries is also summarized.
In Section III, the parameters of the existing algorithm
are analyzed, and in Section IV an alternative approach
is presented based on similar theoretical concepts, and
achieving improved results. Performance results based on
implementation and simulation are summarized in Section
V. In Section VI, the impact on SCTP selective acknowl-
edgments (SACK) and fast retransmits (FRT) are discussed.
Our simulation results showed that proposed approach has
either minimal or manageable impact on both SACK and
FRT. Section VII concludes the paper. Note that much of
this work is presented in the context of SCTP, but is also
applicable to TCP since the timeout estimation processes are
identical.
II. RETRANSMISSION MECHANISMS
When an SCTP sender transmits a unit of data, called
a chunk, it also initializes a retransmission timer with an
estimated value of the round-trip time (RTT). The value of
this timer is the retransmission time-out (RTO). When an
acknowledgment arrives, the timer is cancelled. If the timer
expires before an acknowledgment arrives, the chunk may be
retransmitted. The value of RTO is calculated from observed
/ actual values of RTT using the Jacobson Algorithm, which
is detailed in Section III. A too optimistic retransmission
timer may expire prematurely, producing spurious timeouts
and spurious retransmissions, reducing a connection’s ef-
fective throughput. On the contrary, a retransmission timer
that is too conservative may cause long idle times before
lost packets are detected and retransmitted. This can also
degrade performance [7]. So, the difﬁculty lies in ﬁnding an
algorithm which has a solid theoretical basis, is not com-
putationally expensive, and can predict RTT with enough

124
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
bias to minimize retransmission events and waiting time
simultaneously.
Performance issues related to retransmission procedures,
including alternatives to the Jacobson Algorithm, have been
noted and addressed several times in the literature. Much
work has been focused on late retransmission and other opti-
mizations of the overall retransmission scenarios [13], [14].
Many authors approach this problem with a “holistic” or
overall perspective on the retransmission procedures where
RTT estimation contributes to triggering these procedures.
Other authors speciﬁcally address the estimation of RTT, and
propose completely new algorithms. However, the Jacobson
Algorithm is deeply rooted in the fabric of connection-
oriented IP transport protocols, and its basis in fundamental
theory is well-established. In following subsections, we
brieﬂy summarize several important approaches to retrans-
mission and RTO estimation.
A. Holistic approaches
Holistic or overall approaches to improving retransmission
performance typically address the state machines surround-
ing the retransmission process, including the estimation
algorithm which may be used to trigger these procedures.
Examples of holistic approaches include Early Fast Retrans-
mit (EFR) [11], Early Retransmit (ER) [12], and Window-
Based Retransmission (WB-RTO) [15] as well as protocol-
speciﬁc techniques such as Thin Streams [10], [11], [16].
Early Fast Retransmit (EFR) is an optional mechanism in
FreeBSD which is active whenever the congestion window
is larger than the number of unacknowledged packets, and
packets remain to be sent. When the RTO timer expires
and the entire congestion window is not used, EFR retrans-
mits all packets that could have been acknowledged [11].
The Early Retransmit (ER) algorithm [12] suggests that
a mechanism should be in place to recover lost segments
when there are too few unacknowledged packets to trigger
Fast Retransmit. The Early Retransmit algorithm reduces
waiting time in four speciﬁc situations [11]. The Window-
Based Retransmission Timeout (WB-RTO) [15] asserts that
timeout mechanisms based solely on RTT estimates lead
to unnecessary retransmissions and unfair resource alloca-
tion, and proposes to schedule ﬂows on the basis of their
contribution to congestion. Thin Streams [10], [11], [16]
optimizes throughput for “thin streams” which are often
used in control applications, and often depend on SCTP
for transport. When stream characterization is accurate,
throughput can be improved by adapting speciﬁc sections of
the retransmission procedures to match ﬂow characteristics.
B. Alternative estimation algorithms
Alternative estimation algorithms address speciﬁc per-
formance issues which have been noted in the Jacobson
Algorithm. These issues may be related to the over-estimated
value, spurious behaviors for certain trafﬁc characteristics,
or inefﬁcient bounding computations. In some cases, heuris-
tic state-machine approaches are also included because of
complexities associated with the retransmission process. Ex-
amples of alternative or modiﬁed RTT estimation algorithms
include Peak-Hopper [8], Eifel [7], and Weighted Recursive
Median (WRM) [9].
The Eifel approach [7] notes a particular style of erro-
neous performance in the Jacobson algorithm, and adapts
the algorithm in several ways to compensate for this per-
formance oddity. As a result, Eifel eliminates unnecessary
retransmissions which can result from spurious RTO viola-
tions. Similar to Eifel, the Peak-Hopper algorithm [8] also
observes that the Jacobson algorithm responds inappropri-
ately to certain ﬂuctuations in RTT. This behavior produces
“spikes” in RTO values because the algorithm does not
distinguish between positive and negative variations. The
modiﬁcation proposed in [8] reduces this effect for a wide
range of cases, and the ﬁndings in [10] concur. However,
this solution results in higher average RTO values than
the RFC approach [6], which can be a problem [11]. The
Weighted Recursive Median (WRM) algorithm [9] redeﬁnes
RTT estimation from a signal processing standpoint. WRM
is effective, but tends to be computationally expensive even
in a recursive form, which is a problem for per-packet
operations.
C. Other considerations
The remainder of this paper addresses the estimation
process for the maximum RTT, or the value which estab-
lishes the RTO timer. When the RTO timer has expired,
retransmission procedures commence, and may include var-
ious conditionally executed processes. We do not address
those processes, or the overall retransmission procedure.
In most cases, we use the Jacobson and Eifel estimation
algorithms for comparison because they are widely accepted
or implemented.
For reference, the performance of the Jacobson and Eifel
algorithms are shown in Figure 1 along with the modiﬁed
version of the Jacobson Algorithm which is discussed in de-
tail in Section IV. The traces in the ﬁgure are all driven by a
common RTT sequence created using our testbed of systems
with modiﬁed networking stacks, as described in more detail
in Section V. In the ﬁgure, the quiescent sections of the RTT
sequence (t < 170ms, 260ms < t < 430ms) have a fairly
low mean, with similarly low standard deviation. This is
typical of modern, high-speed networks. Also note that the
RTT sequence has abrupt increases (t ≈ 170ms, t ≈ 430ms)
followed by a stable period (170ms < t < 260ms), and then
an abrupt decrease (t ≈ 260ms). Note that Jacobson and
Eifel both “overshoot” after the abrupt positive discontinuity
in RTT. However, at the second discontinuity which is abrupt
but negative, Eifel corrects downward, whereas Jacobson
again corrects upward. This is a primary beneﬁcial feature
of the Eifel approach. Unfortunately, the tuning of the

125
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
150
200
250
300
350
400
450
0
500
1000
1500
2000
2500
3000
3500
4000
4500
Delay (milliseconds)
Packet Number
Figure 1.
Relative performance of RTO estimators to large discontinuities
in RTT. Estimators shown are the Jacobson Algorithm (dotted line), the
Eifel Algorithm (dashed line), and the Modiﬁed Jacobson Algorithm (dash-
dot line). The common RTT sequence driving all algorithms is shown as a
solid line.
algorithm creates a larger deviation or “upper bound” for
the RTT sequence than is available through the Jacobson
Algorithm.
Abrupt changes in RTT (such as those shown in Figure 1)
cause the RTO timer to expire, resulting in binary backoff of
the timer (BEBO) and retransmission procedures. The RTO
values associated with BEBO and retransmissions are not
shown, because they do not affect future estimated values
of RTO. Post-processing of the RTT estimate to enforce
minimum values for RTO is also not considered here.
In the RFCs for TCP and SCTP, a hard-coded minimum
value for RTO is speciﬁed as 1000 milliseconds [2]–[4],
[6], whereas the minimum value of the Eifel algorithm is
deﬁned as “RTT + 2 × ticks” (or 200 msec) [7]. The
deﬁnition of the minimum RTO in TCP-Lite is typically
2 times the clock granularity, which is often taken as 500
msec [4], [7]. This minimum procedure is secondary to
the estimation algorithm, and often completely replaces the
RTT estimate. For example, in a broadband network with
large minimum RTO, the RTT estimate can be orders of
magnitude below the minimum, resulting in long wait-times
for triggering retransmission. So, in all comparisons here we
disable the enforcement of a minimum RTO and focus on
the performance of the estimation algorithms.
In [17], a new algorithm to improve the SCTP’s retrans-
mission mechanism is proposed. The algorithm uses several
ﬁxed values of minimum RTO values, instead of a single
minimum RTO value of 1000 msec. It is shown that the
algorithm can improve SCTP’s performance by as much as
ﬁve percent.
III. THE JACOBSON ALGORITHM
The Jacobson Algorithm, originally proposed in [5], uses
the Chebyshev Bound [18] to produce a reasonable value
of RTO, or the maximum time the sender will wait for
an acknowledgment. After exceeding RTO, a transmission
is declared lost and retransmission procedures commence.
Interestingly, Jacobson noted the poor performance of the
algorithm, since loads higher than 30% resulted in retrans-
mission of packets that were only delayed in transit (i.e.,
not lost) [5]. This behavior is also noted in later literature,
including [7], [8], [16].
The speciﬁc computations for the bounding procedure
are driven by estimates of the mean (µ) and the standard
deviation (σ) of an assumed RTT distribution. The esti-
mates of µ and σ are not conventional parameter estimates,
as independent and identically distributed samples from
a population. Rather, ˆµ and ˆσ are predicted using prior
RTT values. Jacobson estimates ˆµ and ˆσ from observed
values of RTT, and then computes an “overbound” for RTO
using Chebyshev. This is the same as saying “we waited
a reasonable time (ˆµ) and then some (Kˆσ), but the ACK
didn’t come back, so the packet must have gotten lost”. This
RTO calculation is invoked by the sender for each unique
transmission. As such, it is optimized for integer arithmetic
and all coefﬁcients are diadic.
Regardless of the speciﬁc assumptions or optimizations,
Jacobson computes the RTO threshold as
xthr = ˆµn+1|n + K · ˆσn+1|n
(1)
where xthr is the RTO threshold or “overbound” for RTT,
K is the number of “standard deviations past the mean,”
and ˆµn+1|n and ˆσn+1|n are the estimates (predictions) of
the mean and standard deviation of the RTT distribution for
the next iteration (subscript n + 1) given some data up to
the current time (subscript n).
A. Jacobson and Chebyshev
The Chebyshev bound (2) is a universal bound applicable
even for unknown distributions. Chebyshev shows that the
probability of the random variable occurring outside a range
around the mean (µ) depends on the standard deviation (σ).
Pr [|X − µ| ≥ ϵ] ≤ σ2
ϵ2
(2)
For RTT estimation, the Jacobson Algorithm uses a ﬁxed
offset from the mean (Kσ) [3], [4]. This simpliﬁes the
bound and allows a direct computation of the “violation
probability”. With ϵ = Kσ and K = 4 in (2),
Pr [|X − µ| ≥ Kσ] ≤
1
K2
(3)
and the ﬁxed, double-sided “violation probability” is
1
16 =
0.0625. However, the RTO timeout is single-sided because
the timeout algorithm is only concerned with the case where
X > µ. So for a symmetric distribution and K = 4, the RTO
timeout will be exceeded roughly 3% of the time, with the
assumption that the RTT values are reasonably independent,
identically distributed.

126
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
B. Predicting µ and σ
Rather than using conventional parameter estimation al-
gorithms requiring storage of historical values and more
complex calculation, Jacobson estimates µ and σ using
simple prediction algorithms as in (4). These algorithms
rely on current values of the quantities (subscript n) as
well as the measured RTT value (xn). Interestingly, the
use of ﬁltered (predicted) values for µ and σ implicitly
contradicts the assumption of a valid distribution in (2).
However, this approach gains computational efﬁciency and
reﬂects the nonstationary nature of RTT values.
ˆµn+1|n = ˆµn + α(xn − ˆµn) and
ˆσn+1|n = ˆσn + β (|ˆµn − xn| − ˆσn) .
(4)
When viewed as a time-series prediction or ﬁltering algo-
rithm, it is clear that the relations in (4) are single-pole,
lowpass IIR (inﬁnite impulse response) ﬁlters (predictors).
C. Selective Acknowledgment
Selective acknowledgment (SACK) was initially intro-
duced in RFC 1072 [19], [20] to handle multiple dropped
packets within a window [21]. This feature was omitted in
RFC 1323 [22] as the authors felt the details of SACK was
still to be worked out. SACK was reintroduced in RFC 2018
[23] and is now an important performance enhancement
mechanism in TCP initially and now SCTP as well.
The usefulness and effectiveness of SACK mechanism
have been extensively studied. In [24], it was found that
“SACK improves TCP throughput signiﬁcantly in moderate
congestion (with a packet loss rate between 2 and 4%), and
that the negative impact of SACK on competing non-SACK
TCP connections is small”.
SACK was proposed to enhance TCP performance over
long delay paths [19], [23]. We observe that the RTT
over the Internet has been steadly decreasing over the last
thirty years. This decrease is primarily due to the improve-
ment of Internet infrastructure/software that shortens the
store/forward delays and transmission delays.
D. Fast Retransmit
TCP fast retransmit (FRT) and fast recovery algorithm,
originally formally deﬁned in [25], and subsequently reﬁned
in [26]–[28], is another timing related performance en-
hancement mechanism. The algorithm is based on a simple
heuristic.
In Berkeley-derived kernel implementation FRT works
by retransmitting a speciﬁc un-acknowledged TCP segment
B that was sent after segment A when the third duplicate
acknowledgment for segment A is received. The logic rea-
soning is that by the time the third duplicate acknowledg-
ment for segment A is received, segment B must have lost
and hence should be retransmitted. If segment B was not
lost, then it should have been acknowledged because four
acknowledgments for segment A (one original plus three
duplicate acknowledgments) have been received.
It is observed here that the FRT action for segment B oc-
curs before the timer associated with B expires. Otherwise,
the retransmission action would be a normal retransmission,
not a fast retransmission.
IV. THE MODIFIED JACOBSON ALGORITHM
The use of Chebyshev to bound the retransmission timeout
is reasonable, since it provides a “target probability” for
the timeout calculation. However, the Markov bound [18]
is also applicable for RTT estimation since it explicitly uses
knowledge of the positivity of the random variable, as in (5)
which is valid when fX(x) = 0 for x < 0 and α > 0.
Pr [X ≥ α] ≤ µ
α.
(5)
Using α = µ + Kσ in (5) produces an expression similar to
(2). However, the Markov formulation results in a variable
probability for RTO violation. This concept is particularly
unappealing for small, relatively stable values of RTT,
since the overbound RTO might have a high probability of
violation, which would create spurious retransmissions and
a large amount of unwanted network trafﬁc. Recall that in
the Chebyshev case, the choice of ϵ = Kσ produced a ﬁxed
violation probability around 3%. The violation probability
of the Markov bound can also be ﬁxed as in (3) if α = 32µ:
Pr [X ≥ 32µ] ≤
µ
32µ = 1
32 =
1
2K2 .
(6)
Unfortunately, a bias of 32 times the mean would not
produce a viable estimate of RTT, and the overbound RTO
would be extremely loose. Therefore, the Markov bound
alone is not be a reasonable choice to estimate the RTO
timeout. However, a combination of Markov and Chebyshev
approaches seems to produce an effective estimator.
Combining an estimate of σ as in the Jacobson Algorithm
with a biased estimate of µ as in the Markov bound results
in a formulation that retains the Chebyshev structure but
improves certain performance aspects. So, we use a slightly
revised version of (1) and call this approach the Modiﬁed
Jacobson Algorithm,
xthr = A · ˆµn+1|n + B · ˆσn+1|n.
(7)
In (7), the standard deviation estimator ˆσn+1|n is identical to
the estimator (4) used in the Jacobson Algorithm. However,
the multiplier for ˆσn+1|n is reduced (i.e., B = 2 whereas
K = 4). Further, the mean estimator ˆµn+1|n is replaced with
the current value of RTT (xn), and is biased in the spirit of
a Markov estimator. In this case, we choose A = 1.25 as a
reasonable bias term, whereas Jacobson uses A = 1.0.
The values of A = 1.25 and B = 2.0 which are used
in (7) were determined experimentally, using the Jacobson
values (A = 1.0 and B = 4.0) as a starting point.

127
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Jacobson’s mean estimator µ is a ﬁltered version of the
time series xn. The ﬁlter structure (in (4)) is a single-pole
predictor, or inﬁnite impulse response (IIR) ﬁlter. Since the
structure is IIR, it embodies some instabilities. As a result,
under certain circumstances in the input sequence (such as
abrupt changes in xn) the output value of the IIR ﬁlter ca
become very large. This is problematic for the combined
estimation problem which involves estimators of both µ
and σ, particularly when σ is also estimated using an IIR
structure. Furthermore, the ﬁltered estimate of µ contains
at least a one-sample (one-packet) delay. This can be seen
from (4), where µ for time (n+1) is composed using values
of µ and x from time (n). This delay in estimation also
produces a delay in reaction to instantaneous changes in x,
and it is precisely these changes in x that we are attempting
to model more accurately. Thus, we replace the IIR-ﬁltered
estimate of µ with the instantaneous value xn which is a
viable estimator of the instantaneous mean for this sequence.
After replacing µ with xn, we adjust the bias value of the
coefﬁcient according to Markov’s relation so that in cases
where σ goes to zero, the combined estimation of RTT
will not ”collapse” exactly onto xn, which would trigger
many more timeouts. In other words, in (7), as σ goes to
zero, the value of xthr remains biased above x due to the
use of A = 1.25 rather than A = 1.0, as in Jacobson,
and this reduces timeouts in quiescent channels. The use of
A = 1.0 in Jacobson can be problematic in this regard, but
introducing a constant bias (e.g., A = 1.25) in Jacobson
can be counterproductive because of the IIR nature of the
prediction of µ and the IIR nature of the prediction of σ.
The use of B = 2.0 in the Modiﬁed Algorithm follows
similar logic. Because the predictor of σ in (4) is an IIR
structure, the possibility of overshoot can be dramatic in
cases where the RTT sequence xn has sudden, sharp varia-
tions. A multiplier of B = 4.0 or K = 4.0 (as in Jacobson)
accentuates this overshoot, and is largely responsible for
the massive over-estimation of RTT in cases where the un-
derlying network exhibits certain types of instabilities. The
speciﬁc choice of B = 2.0 was driven by experimentation
and is heuristically motivated. The conceptual explanation
in terms of the Chebyshev relation is that we “tighten” the
timeout boundary by using a smaller multiplier for σ.
Jacobson essentially computes the RTO boundary as “a
few sigmas past the mean” where both µ and σ are estimated
using IIR ﬁlters. We essentially compute a similar RTO
boundary as “a few sigmas past the mean” where the
estimator of the mean is the actual sequence value plus
a small bias (this is a Markov-like formulation), and the
estimator of σ is the same as in Jacobson. However, because
of the relatively “more accurate” estimate of the mean in the
Modiﬁed Algorithm (it has no delay), and because the mean
estimator in the Modiﬁed Case is already biased (A = 1.25
rather than 1.0), we essentially “back off” the multiplier of
σ to achieve a similar overall formulation.
Note that the bias term A for ˆµn+1|n in (7) is not equiv-
alent to the use of gain in the prediction of ˆµn+1|n in (4).
The structure of the prediction ﬁlter for ˆµn+1|n causes delay
in the formulation of the overbound, which is problematic.
There are no coefﬁcients for the prediction ﬁlter which will
simultaneously improve delay and maintain stability in the
estimation of µ, and incorporating gain in the prediction
does not improve the estimate. These undesirable effects are
completely eliminated in the Modiﬁed approach with the use
of xn as the estimator of µ. This adjustment allows for the
use of a Markov-like bias term A and signiﬁcantly enhances
the performance of the Modiﬁed Algorithm.
Several factors must be speciﬁcally noted for the Modiﬁed
Algorithm. First, dependence on the variance of the RTT
sequence is preserved via ˆσn+1|n and the Chebyshev-like
formulation. Some dependence on σ must be maintained in
the estimation procedure for cases where the RTT values
exhibit signiﬁcant variability. However, the multiplier B
can be different (smaller) than in Jacobson. This reduced
dependence on σ mediates undesirable “overshoot” which
is problematic in Jacobson, and has been addressed heuris-
tically in Eifel. Refer to abrupt changes in RTT as shown in
Figure 1 for examples.
Secondly, dependence on the mean of the RTT sequence
is preserved via the use of xn for ˆµn+1|n, and a bias
is incorporated via the Markov-like formulation for cases
where σ → 0. Some dependence on µ is important, since this
allows isolation of the variability. However, in cases where
σ → 0, Jacobson tends to “settle” directly onto RTT, leading
to heuristic modiﬁcations including static minimum values
which override the Jacobson estimates. This undesirable
behavior of Jacobson is clearly evident in Figure 1.
Thirdly, explicit dependence on both µ and σ is retained
via the hybrid Markov/Chebyshev formulation which biases
the estimate higher and reduces the need for secondary
minimum computations. Also, the prediction structure for
ˆµ and ˆσ is preserved, which is an important consideration.
Finally, the computational complexity of the Modiﬁed
Algorithm is essentially the same as the original Jacobson
Algorithm. Elimination of the prediction structure for ˆµ and
the use of a bias term along with a simpliﬁed multiplier for ˆσ
results in an algorithm with the same operational complexity
and no heuristic conditional logic steps.
Besides, the Modiﬁed Algorithm is designed so that two
important performance enhancement mechanisms of current
TCP/SCTP implementation will not be adversely affected or
impacted.
V. PERFORMANCE RESULTS
To validate algorithm performance, we constructed a
“real-world” test environment which pairs client and server
computers with modiﬁed network stacks via a controllable
network infrastructure. In the network testbed, a client

128
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
system transmits data to a server system using a specially-
constructed user-space application which can vary overall
payload length and SCTP chunk size, as well as other param-
eters such as the number of test iterations. The network stack
of the client systems also implement user-selectable timeout
estimation algorithms and record important parameters for
each transmission. Parameters recorded by the client’s net-
work stack include the timestamped, per-chunk values of
the actual (measured) RTT, estimated RTO, ˆµ, ˆσ, and so on.
As described in Section II-C, post-processing of the RTO
estimate to enforce minimum values for RTO is disabled
since we are investigating the effect of estimation algorithms.
Additionally, the network devices and SCTP server are
modiﬁed to introduce algorithmically controllable delays
in acknowledgments of chunks and delays in delivery of
various classes of network trafﬁc. This feature results in an
ability to introduce speciﬁc “delay proﬁles” which duplicate
other known results (as in Figure 2 [7]) or randomize the
round-trip time of the network. Using trace data collected
directly from the network stacks of the client & server
computers, we were also able to create simulations of
system performance which have been cross-checked for
accuracy against the delay and estimation performance of
the actual systems. All performance data described in this
paper was produced using our “real-world” testbed, and has
been incorporated into accurate simulations of the estimation
algorithms.
The performance of the Modiﬁed Jacobson Algorithm is
shown in the context of various RTT sequence characteristics
or “delay proﬁles” in Figure 2, Figure 3, and Figure 4. Figure
2 reproduces an important delay proﬁle from literature
describing the Eifel algorithm (Fig. 6 of [7]). Figure 3
contains the delay proﬁle for a real, quiescent network with
100 msec average delay and short, artiﬁcially induced delay
spikes. Figure 4 contains the delay proﬁle for a long-term
delay burst on an otherwise quiescent network with 80 msec
average delay.
Quantitative assessment of algorithm performance gath-
ered from a large number of packet transmissions is shown in
Table I and Table II for each of the delay proﬁles described
by Figure 2, Figure 3, and Figure 4. The data in Table I
is presented in terms of Mean Absolute Error (MAE) in
milliseconds between the RTO estimate and the actual RTT
value for the same packet transmission, according to (8).
Table II shows the number of induced timeout events (TO)
for each estimation algorithm, and is measured in number
of events per 10,000 packets transmitted.
MAE = 1
N
X
N
|xthr − xn|
(8)
Using our network testbed, we duplicated the RTT se-
quence in Figure 2 from [7]. This “delay proﬁle” clearly
shows the improvement of Eifel over Jacobson, particu-
larly at the termination of the “ramp” sequences. Note
Table I
ESTIMATION PERFORMANCE GATHERED USING NETWORK TESTBED
AND SIMULATION. PERFORMANCE IS MEASURED AS MEAN ABSOLUTE
ERROR (MAE) IN MILLISECONDS.
Delay proﬁle
Figure
Jacobson
Eifel
Modiﬁed
Eifel ramp
Figure 2
1731
2091
1577
Quiet/Spikes
Figure 3
39.81
140.7
43.29
Delay burst
Figure 4
11.31
41.79
2.00
Table II
ESTIMATION PERFORMANCE GATHERED USING NETWORK TESTBED
AND SIMULATION. PERFORMANCE IS MEASURED IN TERMS OF
TIMEOUT EVENTS (TO) PER 10,000 PACKETS TRANSMITTED.
Delay proﬁle
Figure
Jacobson
Eifel
Modiﬁed
Eifel ramp
Figure 2
1
1
1
Quiet/Spikes
Figure 3
99
51
79
Delay burst
Figure 4
378
82
12
180
200
220
240
260
280
300
320
2000
3000
4000
5000
6000
7000
Delay (milliseconds)
Packet Number
Figure 2.
Performance of RTO estimators for the “ramp” RTT sequence
described in [7]. Jacobson (dotted), Eifel (dashed), and Modiﬁed (dash-dot).
The common RTT sequence driving all algorithms (solid).
6050
6100
6150
6200
6250
6300
6350
0  
100
200
300
400
500
Delay (milliseconds)
Packet Number
Figure 3.
Performance of RTO estimators for a quiescent network with
short, artiﬁcially induced delay spikes. Jacobson (dotted), Eifel (dashed),
and Modiﬁed (dash-dot). The common RTT sequence driving all estimation
algorithms (solid).

129
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
750
800
850
900
950
1000
1050
50
100
150
200
250
300
Delay (milliseconds)
Packet Number
Figure 4.
Performance of RTO estimators for a quiescent network with a
large, naturally-occurring multi-packet delay burst. Jacobson (dotted), Eifel
(dashed), and Modiﬁed (dash-dot). The common RTT sequence driving all
algorithms (solid).
that Jacobson overshoots upward even though the RTT
sequence has rapidly declining values. Eifel compensates for
overshoot, but at the expense of slightly higher bias from
the RTT sequence. Note that the Modiﬁed approach mimics
Jacobson during ramp ascension, and also compensates for
the overshoot at ramp termination. Modiﬁed has a smaller
bias than Eifel. Interestingly, each algorithm induces a single
timeout event, but the Modiﬁed Jacobson algorithm does so
with an MAE 154 msec smaller than Jacobson, and 514 msec
smaller than Eifel. Such a signiﬁcant difference in MAE can
translate to a smaller task-completion time in cases where a
small differential in timeouts is encountered.
A delay proﬁle from a relatively quiescent network with
artiﬁcially induced delay spikes is shown in Figure 3. The
network exhibits an average delay of around 100msec,
and has artiﬁcially induced delay spikes which are typical
of an unstable link. Note that with this network proﬁle,
delay spikes occur every 200 packets, forcing a timeout.
After each delay spike, the estimation algorithms recover in
very different manners: Modiﬁed and Jacobson fall quickly
toward the quiescent RTT sequence, while Eifel decays very
slowly, creating a relatively large wait-time for over 100
subsequent packets. As a result, the MAE for the Eifel
algorithm with this delay proﬁle is more than 3 times larger
than the other estimation algorithms while still creating
only 35% fewer timeout events. Regardless, each estimation
algorithm creates a very small proportion of timeout events
relative to the number of packets transmitted.
A delay proﬁle from another network test is shown in
Figure 4. In this ﬁgure, the network exhibits an average
delay during quiescent periods of around 80 msec. However,
between packets 750 and 850 a large, naturally occurring,
correlated delay burst is observed, which disrupts the esti-
mation algorithms. Note that Modiﬁed and Jacobson both
fall quickly after individual, large delay spikes. However,
Figure 5.
Relationship between RTO-min and expired SACKs
Figure 6.
Relationship between RTO-min and FRTs
Modiﬁed maintains a larger offset during the quiescent
period between packets 900 and 1000 due to the speciﬁc
bias for ˆµ. The failure of Jacobson to maintain a bias during
periods of low RTT variance (σ → 0) is responsible for
many timeout events, with Jacobson inducing 30 times more
timeouts than Modiﬁed, and almost 5 times more than Eifel.
Eifel again exhibits a bias which is signiﬁcantly larger than
Jacobson or Modiﬁed, with an MAE 20 times larger than
Modiﬁed, and 4 times larger than Jacobson. Also note that
Jacobson tracks RTT fairly well, but has large, positive
overshoot when RTT drops suddenly. Modiﬁed compensates
for the Jacobson “overshoot” problem in cases where the
RTT sequence drops suddenly (cf. packet 800 & 840).
VI. IMPACTS ON SACK AND FRT
As discussed in Section III-C and Section III-D, SACK
and FRT are two important mechanisms to enhance the
performance of TCP [21]. Naturally, an important question

130
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
of any revision to the current SCTP timeout mechanism is
how the revision will impact SACK and FRT. The merits of
any proposed revision would be questionable if the revision
signiﬁcantly decreases SACK or incurs unnecessary FRT.
Figure 5 shows the relationship between the number of
bytes transmitted and the minimum RTO values (in millisec-
ond). It is clear to see that the number of expired SACKs is
only signiﬁcantly impacted when the minimum RTO value
is smaller than 200 msec. Otherwise, the minimum RTO has
no direct impact on number of SACKs.
As discussed in Section III-C, SACK is proposed to
enhance TCP performance over long delay paths [19], [23].
Our algorithm will set mininum RTO to values smaller
than 200 msec when it is conﬁdent that the values of the
current and most recent RTT are very small (than 200 msec).
Naturally in that case the TCP communication sessions are
not on long delay paths. Hence, it is understandable that the
number of SACKs decreases.
The impact of our algorithm on FRT is less intuitive.
Figure 6 shows that the number of fast retransmits is almost
unaffected by the RTO algorithms. In the diagram, the X-
axis is the percentage of packet losses, which were created in
our simulation in order to force timeout and fast retransmits,
and the chunk size is 50 bytes. The Y-axis is the number
FRT events per MByte of data transmitted. The green line is
the FRT for our algorithm and the red line is for the current
RTO algorithm.
Recall that FRT is based on the heuristic that a TCP/SCTP
segment must be lost and hence should be retransmitted
because another segment sent before that segment has been
acknowledged multiple times. This fast retransmission oc-
curs before the timer for that segment expires. Smaller RTT
values means that the network is more reliable and it will in
turn set smaller minimum RTO values. Similarly larger RTT
values implies a less reliable network, which in turn will
set larger minimum RTO values. Therefore, regardless of
algorithms used, the number of FRTs is directly proportional
to the number of timer expirations, which is illustrated in
Figure 6.
The current minimum RTO algorithm (Jacbson’s Algo-
rithm) starts by setting a 1000 msec minimum RTO value.
On the other hand, our algorithm sets minimum RTO values
dynamically according its own heuristics. If it sets minimum
RTO values smaller than the mininum RTO value of current
algorithm, then more timeouts will occur. But it will not
incur more FRTs.
More details about the relationships of proposed algorithm
and SACKS/FRTs will be presented in a forthcoming writ-
ing.
VII. CONCLUSION AND FUTURE WORK
The theme of this paper is that the timeout aspects of
current TCP and SCTP protocols can no longer reﬂect
the current infrastructure and trafﬁc dynamics of today’s
Internet. Current and future research should work on new
and practical timeout mechanisms that meet the need of
changed/changing landscapes of Internet.
This paper analyzes the methods for computing and using
RTT and RTO estimates in IP-based transport protocols such
as SCTP and TCP. The theoretical basis of the Jacobson
Algorithm is discussed and an alternative approach is pre-
sented, which retains the fundamentally sound theoretical
basis and operational structure of the algorithm, but im-
proves the performance over other well-known techniques
without introducing heuristic modiﬁcations. It is shown that
our alternative approach will not adversely affect the SACK
and FRT mechanisms.
Currently, we are implementing an RTO-min optimization
algorithm based on the limited past history of RTO values.
The implementation is done by modifying the SCTP mod-
ules of Linux kernels. The new algorithm is being tested
over the Internet under various trafﬁc dynamics.
Future work involves the continued optimization of the
modiﬁed algorithm as well as investigation into the effects
of variable minimum bound for the RTO timer. We believe
that the work that we have done is innovative and solid.
However, an implementation and testing of our algorithm
over a sizable large real network will be helpful to pinpoint
the strength and weakness of the algorithm.
ACKNOWLEDGEMENT
The authors would like to express appreciation to
Mr.Eduardo Gonzalez for providing data used in Section VI.
REFERENCES
[1] S. McClellan and W. Peng, “Estimating retransmission time-
outs in IP-based transport protocols,” in Proc. of ICDT 2013,
Apr. 2013, pp. 26–31.
[2] J. Postel, “Transmission control protocol,” RFC 793, Sep.
1981.
[3] R. Stewart et al., “Stream control transmission protocol,” RFC
2960, Oct. 2000.
[4] R. Stewart, “Stream control transmission protocol,” RFC
4960, Sep. 2007.
[5] V. Jacobson, “Congestion avoidance and control,”
in Proc.
ACM Comput. Commun. Review (SIGCOMM’88),vol. 18,
Aug. 1988, pp. 314–329.
[6] V. Paxson, M. Allman, J. Chu, and M. Sargent, “Computing
TCP’s retransmission timer,” RFC 6298, June 2011.
[7] R. Ludwig and K. Sklower, “The Eifel retransmission timer,”
in Proc. ACM Comput. Commun. Review (SIGCOMM’00),
vol. 30, July 2000, pp. 17–27.
[8] H. Ekstrom and R. Ludwig, “The Peak-Hopper: A new end-
to-end retransmission timer for reliable unicast transport,” in
Proc. 23rd Joint Conf. of the IEEE Computer & Communi-
cations Societies (INFOCOM 2004), vol. 4, Nov. 2004, pp.
2502–2513.

131
International Journal on Advances in Telecommunications, vol 6 no 3 & 4, year 2013, http://www.iariajournals.org/telecommunications/
2013, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
[9] L. Ma, G. Arce, and K. Barner, “TCP retransmission timeout
algorithm using weighted medians,” IEEE Sig. Proc. Letters,
vol. 11, pp. 569–572, June 2004.
[10] J. Pedersen, C. Griwodz, and P. Halvorsen, “Considerations
of SCTP retransmission delays for thin streams,” in Proc. 31st
IEEE Conf. on Local Computer Networks, Tampa, FL, Nov.
2006, pp. 135–142.
[11] A. Petlund, P. Beskow, J. Pedersen, E. S. Paaby, C. Griwodz,
and P. Halvorsen, “Improving SCTP retransmission delays for
time-dependent thin streams,” Multimedia Tools and Applica-
tions, vol. 45, pp. 33–60, Oct. 2009.
[12] M. Allman, K. Avrachenkov, U. Ayesta, J. Blanton, and
P. Hurtig, “Early retransmit for TCP and stream control
transmission protocol (SCTP),” RFC 5827, Apr. 2010.
[13] M. Allman and V. Paxson, “On estimating end-to-end network
path properties,” in Proc. Conf. Appl., technol., arch., and
protocols for comput. commun., ser. SIGCOMM ’99.
New
York, NY, USA: ACM, 1999, pp. 263–274.
[14] L. Coene and J. Pastor-Balbas, “Telephony signaling transport
over stream control transmission protocol (SCTP) applicabil-
ity statement,” RFC 4166, Feb. 2006.
[15] I. Psaras and V. Tsaoussidis, “Why TCP timers (still) don’t
work well,” Computer Networks, vol. 51, pp. 2033–2048,
Nov. 2007.
[16] J. Pedersen, “Evaluation of SCTP retransmission delays,”
Master’s thesis, University of Oslo Department of Informat-
ics, May 2006.
[17] S. Khatri, “SCTP performance improvement based on adap-
tive retransmission time-out adjustment,” Master’s thesis,
Texas State University Department of Computer Science,
Aug. 2011.
[18] A. Papoulis, Probability, Random Variables, and Stochastic
Processes, 3rd ed.
New York, NY: McGraw-Hill, 1991.
[19] V. Jacobson and R. Braden, “TCP extensions for long-delay
paths,” RFC 1072, Oct. 1988.
[20] L. Eggert, “Moving the undeployed TCP extensions RFC
1072, RFC 1106, RFC 1110, RFC 1145, RFC 1146, RFC
1379, RFC 1644, and RFC 1693 to historic status,” RFC 6247,
May 2011.
[21] W. R. Stevens, TCP/IP Illustrated, Volume 1: The Protocols,
1st ed.
Boston, MA: Addison-Wesley, 1994.
[22] V. Jacobson, R. Braden, and D. Borman, “TCP extensions for
high performance,” RFC 1323, May 1992.
[23] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow, “TCP
selective acknowledgement options,” RFC 2018, Oct. 1996.
[24] R. Bruyeron, B. Hemon, and L. Zhang, “Experimentations
with TCP selective acknowledgment,” in Proc. Comput. Com-
mun. Review, vol. 28.
ACM, Apr. 1998, pp. 54–77.
[25] W. Stevens, “TCP slow start, congestion avoidance, fast
retransmit, and fast recovery algorithms,” RFC 2001, Jan.
1997.
[26] M. Allman, V. Paxson, and W. Stevens, “TCP congestion
control,” RFC 2581, Apr. 1999.
[27] M. Allman, S. Floyd, and C. Partridge, “Increasing TCP’s
initial window,” RFC 3390, Oct. 2002.
[28] M. Allman, V. Paxson, and E. Blanton, “TCP congestion
control,” RFC 5681, Sep. 2009.

