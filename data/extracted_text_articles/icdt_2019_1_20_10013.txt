Introducing a Toolset for an easy Management of 3GPP Speciﬁcations
Thomas Deinlein, Reinhard German, Anatoli Djanatliev
Computer Networks and Communication Systems, Dept. of Computer Science, University of Erlangen-N¨urnberg, Germany
Email: {thomas.deinlein,reinhard.german,anatoli.djanatliev}@fau.de
Abstract—The standardization process in mobile communications
technology, which is carried out by the 3rd Generation Part-
nership Project (3GPP), is a constantly progressing process. In
particular, current technologies, such as LTE (Long Term Evo-
lution) are frequently being expanded and enhanced. Upcoming
technologies, such as 5G NR (5G New Radio) are still in an
early speciﬁcation phase and the number of speciﬁcations will
grow, too. Due to the increasing abundance of speciﬁcations and
ongoing changes, handling and managing of updates of existing
speciﬁcations and getting aware of new speciﬁcations is quite
difﬁcult. This paper introduces a Python toolset for an easy
management of a large number of 3GPP speciﬁcation documents.
Keywords–3GPP; Mobile Communications; Speciﬁcation; LTE;
5G NR; Python
I.
INTRODUCTION
The task of the 3rd Generation Partnership Project (3GPP)
is the worldwide speciﬁcation of mobile radio technology.
About 95% of the world’s 7.8 billion mobile subscribers (Q4
2017) use these technologies [1]. Due to steadily growing user
numbers, established technologies such as LTE (Long Term
Evolution) are being improved and new technologies such as
5G New Radio (5G NR) are being newly developed. Existing
speciﬁcations must constantly be adapted due to backward
compatibility [2] and new speciﬁcations have to be created.
The speciﬁcation of mobile communication technologies is
therefore a progressing process [3], whereby the amount of
documents will increase. It is not a trivial task to manage
the abundance of all these different speciﬁcations, which is
simpliﬁed by the toolset presented in this paper. This paper is
structured in four sections. In Section II, the problem statement
is described in detail. After that, Section III shows, how the
different scripts of this toolset work and what they accomplish.
Finally, Section IV summarises the extent of this toolset.
II.
PROBLEM DESCRIPTION
The 3GPP portal [4] allows downloading of all published
3GPP speciﬁcations. The term speciﬁcation adresses technical
speciﬁcations and technical reports as well. If the individual
speciﬁcation number is known, downloading is easy and un-
problematic. It is possible to type in the number into a speciﬁc
textﬁeld directly. The search results area shows a glasses button
in the last ﬁeld on the right side, which refers to the download
page of the corresponding speciﬁcation. However, it is often
the case that a certain speciﬁcation refers to another document
or other documents. In the rarest cases, it will be sufﬁcient
to download (or look into) only one speciﬁcation. Further
speciﬁcations have to be downloaded and taken into account
then. If there is an interest of studying speciﬁcations of one
complete series or technology, it is also possible to specify
this in the search settings of the 3GPP portal, e.g., listing all
5G NR speciﬁcations. At the time of writing of this paper,
such a query has already comprised over 390 different docu-
ments. The process of downloading these documents is very
cumbersome, because it is - besides the individual download
of each speciﬁcation - only possible to download a list of
the speciﬁcations found in the form of an Excel spreadsheet.
In this Excel sheet, the corresponding download page can be
opened by clicking on the speciﬁcation number. A new browser
window will open. The versions tab in the new window lists
which versions are available for which release. By clicking
on the underlined version number, the respective speciﬁcation
can be downloaded as a zip-ﬁle, which often contains one or
more Microsoft Word doc(x)-ﬁles. This download procedure
is a very tedious undertaking. If the downloaded Excel sheet
contains several hundred speciﬁcations, the individual down-
load of all contained documents is extremely time-consuming.
Another problem with the Excel sheet is ﬁnding out what
exactly a speciﬁcation describes in detail. Usually, only the title
of the speciﬁcation, which is listed in the Excel sheet, indicates
whether this speciﬁcation is relevant for a particular scope
or not. However, the exact scope can only be determined by
looking into the speciﬁcation. A keyword search that includes
all speciﬁcation scopes of a certain series or technology would
therefore be very advantageous.
There already is a 3GPP toolset available provided by Neto-
vate [5], which allows to search for 3GPP change requests and
for written contributions (”TDocs”) at meetings. However, the
download of the speciﬁcations also has to be done manually.
III.
USAGE OF THE TOOLSET
The toolset presented in this section allows the download-
ing and updating of many 3GPP speciﬁcations automatically,
as well as a keyword search over the scopes of downloaded
speciﬁcations. A bibTex-ﬁle can also be created for certain
speciﬁcations. The toolset consists of four Python scripts.
The programming language Python is freely available at [6].
Further requirements, such as installed Python packages for
using the scripts, are shown at the corresponding download
page [7]. There is also a detailed description of the usage of
the scripts available. In the following, a short overview of the
functionality of the toolset will be given.
A. speciﬁcationsHandler.py
This script automatically downloads speciﬁcations and
checks if already downloaded speciﬁcations have been up-
dated. First, an individual search must be carried out
via the 3GPP portal at [4]. The result of this query
can then be saved in the form of an Excel spreadsheet.
This ﬁle must then be copied and both Excel ﬁles must
be
renamed:
One
ﬁle
as
LATEST-EXCELFILE.xlsx,
the other ﬁle as REFERENCE-EXCELFILE.xlsx. List-
ing
1
shows
how
to
run
the
script
from
command
line.
The
script
checks
if
there
are
speciﬁcations
in
6
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-693-4
ICDT 2019 : The Fourteenth International Conference on Digital Telecommunications

the LATEST-EXCELFILE.xlsx that are missing in the
REFERENCE-EXCELFILE.xlsx. All missing speciﬁcations
are copied to the REFERENCE-EXCELFILE.xlsx. Ad-
ditional columns are also created for later version man-
agement. Then, downloading procedure of all speciﬁca-
tions in the REFERENCE-EXCELFILE.xlsx is divided
into several threads. The corresponding download links
taken from the REFERENCE-EXCELFILE.xlsx are re-
quested and the most current version number and date
are queried and compared with the information in the
REFERENCE-EXCELFILE.xlsx. When running this script
for the ﬁrst time, there will not be any version information
available in the REFERENCE-EXCELFILE.xlsx. Thus, ev-
ery speciﬁcation in the ﬁle will be downloaded. After ﬁnishing,
the REFERENCE-EXCELFILE.xlsx is updated with the
downloaded version number and date, which are used with fur-
ther runnings to check for updates. Note that each speciﬁcation
can have different version numbers for each release. The script
always queries the latest version number and date of the last
and penultimate release (by passing the parameter -3 the third
to last release is also taken into account). If different versions
are identiﬁed by comparing the online version number/date and
the number/date in the REFERENCE-EXCELFILE.xlsx, a
zip-ﬁle with the speciﬁcation is downloaded into the sub-
directory /Specifications. If there is only one sin-
gle doc(x)-ﬁle within the zip-ﬁle, it is converted into a
pdf-ﬁle using Microsoft Word (or LibreOfﬁce, when using
Linux) and renamed according to the following scheme:
SpecNr_Version_Date_Release.pdf.
This
ensures
that the same speciﬁcations are not overwritten by different
release versions. Converting the doc(x)-ﬁles to pdf is done once
for easier handling and, second, due to compatibility with the
script pdfExtracter.py. There are two further options:
By passing the parameter -wx, all doc-ﬁles are converted into
docx-ﬁles (necessary for docxExtracter.py). If there is
no conversion needed, the parameter -w can be used. This is
the fastest approach to download a large number of speciﬁ-
cations. For example, downloading all 5G NR speciﬁcations
(about 390 at the time of writing this paper) took less than 15
minutes in several runs (depending on internet connection).
LISTING 1. USAGE OF specificationsHandler.py
1 python specificationsHandler.py LATEST-EXCELFILE.xlsx
,→ REFERENCE-EXCELFILE.xlsx [ -3 ] [ -w | -wx ]
B. pdfExtracter.py and docxExtracter.py
This script allows a keyword search over all scopes of
speciﬁcations, which are in the folder /Specifications.
All 3GPP speciﬁcations have the same chapter structure and
the chapter scope describes what each speciﬁcation deﬁnes in
detail. By searching all the scopes it is easier to ﬁnd relevant
speciﬁcations for own purposes instead of just taking into
account the speciﬁcation title. After using the previously intro-
duced script, the /Specifications folder should contain
many speciﬁcations in the pdf/docx format. By starting the
script as described in Listing 2 the scope of all speciﬁcations in
the folder /Specifications will be extracted into a txt-ﬁle
named scopeOfSpecifications.txt. For this purpose,
the folder /Specifications is searched for pdf/docx-ﬁles,
which are then processed by several threads. Each thread
extracts the text of the section Scope. After all threads are
ﬁnished, all extracted scopes are written into the mentioned
txt-ﬁle. The created txt-ﬁle makes it possible to search through
many different speciﬁcation scopes (by opening it in a text-
editor and using the search function) in order to ﬁnd out what
a particular speciﬁcation deﬁnes in more detail.
LISTING 2. USAGE OF pdfExtracter.py / docxExtracter.py
1 python pdfExtracter.py | docxExtracter.py
C. speciﬁcationsToBib.py
This script creates a bibTex-ﬁle of speciﬁcations included
in the REFERENCE-EXCELFILE.xlsx for using with La-
TeX. For each speciﬁcation contained in this ﬁle a bibTex-entry
will be created. How to run this script is shown in Listing 3.
The parameter -i is optional. It is possible to mark important
speciﬁcations within the REFERENCE-EXCELFILE.xlsx.
Therefore, it is necessary to ﬁll out the corresponding ﬁeld
in the column important with the value 1. By passing the
parameter -i only the marked speciﬁcations are taken into
account and are written into the OUTPUT-BIBFILE.bib.
All generated bibTex-entries are of the type techreport.
The individual bibTex-key is created by combining the spec-
iﬁcation number, the version and the publishing date, e.g.,
38.201V15.0.0D03012018. The version number and the
date are also transferred into the note-ﬁeld in every entry.
Thus, it is possible to reference same speciﬁcations with
different version numbers.
LISTING 3. USAGE OF specificationsToBib.py
1 python specificationsToBib.py REFERENCE-EXCELFILE.xlsx
,→ OUTPUT-BIBFILE.bib [-i]
IV.
CONCLUSION
This paper presented a toolset consisting of four Python
scripts for easy handling of 3GPP speciﬁcations. The script
specificationsHandler.py uses an Excel table as
starting point, which can be downloaded from the portal [4].
All speciﬁcations contained are automatically downloaded,
converted to pdf/docx and can be kept up to date. Another
script (pdfExtracter.py / docxExtracter.py) ex-
tracts the respective section scope from the converted spec-
iﬁcations into a single txt-ﬁle. This allows a simple keyword
search over many speciﬁcations in only one ﬁle. Finally, the
script specificationsToBib.py was introduced. Spec-
iﬁcations contained in the Excel sheet can be converted into a
bibTex-ﬁle by running this script.
REFERENCES
[1]
E. Dahlman, S. Parkvall, and J. Sk¨old, Eds., 5G NR: The next gen-
eration wireless access technology.
Academic Press, 2018, ISBN:
9780128143230.
[2]
“About 3rd generation partnership project (3gpp),” 2019, URL: http://
www.3gpp.org/about-3gpp/about-3gpp [accessed: 2019-01-28].
[3]
“3gpp
ongoing
releases,”
2019,
URL:
http://www.3gpp.org/
speciﬁcations/releases [accessed: 2019-01-28].
[4]
“3gpp portal,” 2019, URL: https://portal.3gpp.org/ [accessed: 2019-01-
28].
[5]
“Netovate 3gpp tool,” 2019, URL: https://netovate.com/3gpp-tools/ [ac-
cessed: 2019-01-28].
[6]
“Python programming language,” 2019, URL: https://www.python.org/
[accessed: 2019-01-28].
[7]
“Toolset for an easy management of 3gpp speciﬁcations,” 2019, URL:
https://github.com/cs7org/3GPPtoolset [accessed: 2019-01-28].
7
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-693-4
ICDT 2019 : The Fourteenth International Conference on Digital Telecommunications

