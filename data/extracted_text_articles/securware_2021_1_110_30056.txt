Cryptanalysis of RSA with Moduli N=prq Based on
Coppersmith Method: A survey
Simeng Yuan, Wei Yu, Kunpeng Wang, Xiuxiu Li
State Key Laboratory of Information Security, Institute of Information Engineering, CAS
School of Cyber Security, University of Chinese Academy of Sciences
Beijing, China
emails: yuansimeng@iie.ac.cn, yuwei 1 yw@163.com, wangkunpeng@iie.ac.cn, lixiuxiu@iie.ac.cn
Abstract—This paper brieﬂy summarizes the Coppersmith
method, its extension strategy and lattice construction techniques.
Then we describe several attacks on Rivest-Shamir-Adleman
cryptosystem with moduli N = prq based on Coppersmith
method, including small exponent attacks, partial key exposure
attacks, and factoring RSA moduli with partial known. A survey
of recent progress for these three kinds of attacks, and general
methods on how these attacks work are given.
Keywords—Coppersmith method; Takagi RSA; prime power
RSA.
I. INTRODUCTION
RSA is one of the most widely used public key cryptosys-
tems today. In the environment with limited resources, it may
be slow for encryption and decryption, due to the modular
operation of large integers. In order to speed up the operation,
many RSA fast variants have been produced. One of the most
important variants is the scheme proposed by Takagi [30] with
moduli N = prq. Compared with the standard RSA scheme,
Takagi RSA is more efﬁcient in key generation and decryption.
Another fast variant with moduli N = prq is the prime power
RSA. For Takagi RSA, the public exponent e and the secret
exponent d satisfy
ed ⌘ 1 mod (p − 1)(q − 1),
and for the prime power RSA, e and d satisfy
ed ⌘ 1 mod pr−1(p − 1)(q − 1).
These fast variants are usually used in smart cards and
programs with higher speed.
With the development of lattice theory, the famous algo-
rithm proposed by Lenstra, Lenstra and Lov´asz (LLL algo-
rithm), and lattice basis reduction technique has become an
important tool for cryptanalysis of RSA and its variants. In
1996, Coppersmith proposed so called Coppersmith algorithm
to ﬁnd small roots of single variable modular equation [7]
or the double variable integer equation [6]. The core idea
of this algorithm is to convert the modular equation or in-
teger equation with large norm into integer equations with
small norm by lattice basis reduction algorithm such as LLL
algorithm, and the roots of the original equation can be
found over integers. In the above process, the construction of
the lattice basis is the most critical part. Howgrave-Graham
[16] simpliﬁed the work of [7], and put forward a more
straightforward lattice basis construction method, which can
be generalized to the case of multivariable modular equation.
Since then, a large number of scholars have used this lattice
analysis method to analyze the security of RSA. The method
has also continued to be extended, and gradually form the
current Coppersmith method. In 2006, Jochemsz and May
[19] proposed a general strategy for multivariate modular
equations and integer equations. They gave a method to obtain
a triangular matrix when one constructs lattice basis. In the
case of multivariable equations, the methods mentioned above
are based on a heuristic assumption that the reduced basis
output by LLL algorithm is algebraically independent.
In order to get a better lattice, there are many lattice basis
construction techniques, of which the two most widely used
techniques are substitution technique and unraveled lineariza-
tion technique. Substitution technique was ﬁrst used by Durfee
and Nguyen [10]. According to the RSA equation ed =
1+k(p−1)(q −1), they constructed a three variable modular
equation f (x, y, z) = x (N + 1 + y + z) + 2 (mod e) with
roots (x0, y0, z0) = (k, −p, −q). Knowing N = pq, they
replaced all occurrences of the monomial yz with N, when
constructing the lattice. By this substitution technique, they
reduced the number of variables and optimized the result of
lattice analysis. Unraveled linearization technique was ﬁrst
proposed by Herrmann and May [14]. By exploiting the
implicit algebraic relationships in equations, the construction
of lattice can be simpliﬁed and the result of lattice analysis
can be improved.
In this paper, we focus on RSA with moduli N = prq,
and survey the applications of Coppersmith method in the
cryptanalysis of it.
The remainder of this paper is organized as follows. In
Section II, we describe the theory and steps of Coppersmith
method, and summarize Jochemsz-May strategy and unraveled
linearization. The general methods of small exponent attacks
on RSA with moduli N = prq are given in Section III. We
conclude the partial key exposure attacks in Section IV, and
the methods of factoring RSA moduli with partial known in
Section V. Section VI gives the development suggestions.
II. COPPERSMITH METHOD
Before describing the Coppersmith method, we ﬁrst revise
the concept of lattices and LLL algorithm. Let b1, . . . , bn 2
69
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

Z! be linearly independent row vectors. The set of all integer
linear combinations of b1, . . . , bn compose lattice, which is
written as
L (b1, . . . , bn) =
8
<
:
n
X
j=1
xjbj : xj 2 Z
9
=
; .
We write n the rank of the lattice and ! the dimension of
the lattice. The matrix B 2 Zn⇥! consisting of b1, . . . , bn
is a basis matrix of lattice L. We call these lattices full-
rank when n = !. The determinant of L is denoted as
det(L) =
p
det(BBT ). In order to ﬁnd short vectors on lat-
tices, Lenstra, Lenstra and Lov´asz proposed the LLL algorithm
[20].
Lemma 1 (LLL). L is a !-dimensional lattice, and the
LLL algorithm can output a reduced basis vectors v1, . . . , v!
satisfying
kvik  2
!(!−1)
4(!−i+1) det(L)
1
!−i+1 , for 1  i  !.
The time complexity of LLL algorithm is polynomial in ! and
the bitsize of input.
A. Coppersmith Method
Coppersmith [7] described the method to get small root
of modular equations based on LLL algorithm. Then, the
sufﬁcient condition for Coppersmith method was given by
Howgrave-Graham [16].
Lemma 2 (Howgrave-Graham). Let g(x1, . . . , xn)
2
Z[x1, . . . , xn] be a polynomial, which has at most δ mono-
mials. Let p, m be positive integers. Suppose that
1.g (ex1, . . . , exn)
⌘
0 (mod pm), where |ex1|
<
X1, . . . , |exn| < Xn,
2.kg(x1X1, . . . , xnXn)k < pm
p
δ .
Then, g (ex1, . . . , exn) = 0 holds over integers.
Therefore, the modular equation can be converted into n
integer equations, if these n short vectors output by LLL
algorithm satisfy Lemma 2, that is
kvik  2
!(!−1)
4(!−i+1) det(L)
1
!−i+1 < pm
p
δ
, for 1  i  !.
Ignoring the small items, the condition becomes det(L) <
pm!. One can use Gr¨obner base or a resultant of these n
integer equations to ﬁnd all roots.
Next, we will illustrate the general steps of Coppersmith
method. Take the solution of univariate modular equation for
example. Let f(x) be a univariate modular polynomial of
degree δ
f(x) = xδ + aδ−1xδ−1 + . . . + a1x + a0
(mod p).
The root of f(x0) ⌘ 0 (mod p), is bound by X. And the
steps of Coppersmith method are as follows.
• Construct ! shift polynomials g1(x), . . . , g!(x), which
have the same small roots x0 modulo pm, and m, t is
positive integers (which can be optimized). Shift polyno-
mials can be constructed in the following way
gi(x)
=
xipm−jf j(x) for i
=
0, . . . , δ − 1, j
=
0, . . . , m − 1,
gδ+i(x) = xif m(x) for i = 0, . . . , t − 1.
• Use the coefﬁcient vectors of gi(xX) and gδ+i(xX) to
construct a lattice basis.
• Apply LLL algorithm to the lattice basis, and we get a
short vector v, corresponding a polynomial v(x). Since
the vectors on the lattice are integer linear combination of
the lattice basis vectors, the polynomials v(x) is integer
linear combination of gi(x) and gδ+i(x), with the same
small roots x0 modulo pm.
• If v is short enough to satisfy Lemma 2, the modular
equation can be converted to an integer equation. And
we can solve it over integers
For
the
case
of
multivariate
modular
equation
f(x1, . . . , xn)
⌘
0 mod p, the steps are similar. Notice
that the dimension of the lattice should be larger than the
number of variables, which means ! > n. And the shift
polynomials can be deﬁned as
gi1,...,in(x1, . . . , xn) := xi1
1 , . . . , xin
n pm−jf j
The parameters i1, . . . , in and j are selected based on different
cases.
The most time-consuming part of Coppersmith method is
LLL algorithm, and it works in polynomial time. Therefore,
Coppersmith method also works in polynomial time.
B. Jochemsz-May Strategy
In order to optimize the bound of desired roots, Jochemsz
and May [19] proposed a general strategy for constructing full
rank lattices and gave the methods to solve modular equations
and integer equations with arbitrary variables. Jochemsz-May
strategy is the best method for ﬁnding small roots of integer
equations at present. Next, we will describe Jochemsz-May
strategy to solve small roots of multivariate integer equations.
Let f(x1, . . . , xn) = P fi1,...,inxi1
1 · · · xin
n
be a monic
polynomial with roots (ex1, . . . , exn) which are bound by
(X1, . . . Xn). First, we give some notations. Denote lj as the
maximum exponent of xj in f(x1, . . . , xn). Take an integer W
as large as possible satisfying that W  kf(x1, . . . , xn)k1.
Deﬁne an integer R := WXl1(m−1)+t
1
Qk
j=2 Xlj(m−1)
j
(m and
t = O(m) are positive integers, which will be optimized later).
Then, we deﬁne two sets
S :=
[
0jt
{xi1+j
1
xi2
2 · · · xik
k |xi1
1 xi2
2 · · · xik
k
is a monomial of f m−1}
M := {monomial of xi1
1 · · · xik
k · f | xi1
1 · · · xik
k 2 S}
The next steps are similar to the original Coppersmith
method. 1) Construct a set of shift polynomials with the
same roots (ex1, . . . , exn) modulo R. 2) Construct lattice by
the coefﬁcient vectors of the shift polynomials. 3) Apply LLL
algorithm to get n short vectors. 4) Obtain n integer equations
corresponding these n short vectors, and solve these integer
70
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

equations. The selection of shift polynomials is different from
the original Coppersmith method.
g : xi1
1 · · · xik
k · f · Xl1(m−1)+t−i1
1
k
Y
j=2
Xlj(m−1)−ij
j
,
for xi1
1 · · · xik
k 2 S
g0 : xi1
1 · · · xik
k · R, for xi1
1 · · · xik
k 2 M\S
And the condition to get all small roots becomes
k
Y
j=1
Xsj
j
< W |S| for sj =
X
xi1
1 ...x
ik
k 2M\S
ij
C. Unraveled linearization
Herrmann and May [14], combining the method of lineariza-
tion and Coppersmith method, introduced a new technique
called unraveled linearization.
Recall the work of Boneh and Durfee [3]. They trans-
formed the RSA moduli factorization problem into solving
the small inverse problem. Speciﬁcally, they obtained an
equation ed + k (N + 1 − p − q) = 1 from RSA equation
ed ⌘ 1 mod '(N). Let A = (N + 1) and s = (−p − q).
Then, they got k (A + s) = 1 mod e, where k, s are unknown.
The RSA system can be completely broken by solving small
roots of the modular equation
f (x, y) = 1 + x(A + y) = 0 mod e.
Let e = N ↵, d = N β. The small roots (x0, y0) = (−k, s)
satisfy
|x0| = |k| = ed − 1
' (N) < ed
1
2N = 2N ↵+β−1 = X,
|y0| = |−s| = p + q < 2N
1
2 = Y.
For a ﬁxed integer m, Boneh and Durfee constructed two
sets of shift polynomials, such that the roots are the same as
(x0, y0) modulo em.
gi,j (x, y) = xiem−jf j for i = 0, . . . , m − j, j = 0, . . . , m
hi,j (x, y) = yiem−jf j for i = 1, . . . , t, j = 0, . . . , m
Next, we use a example to illustrate the construction of
lattice basis in [3]. Let m = 2, t = 1, and the lattice basis
matrix consisting of the coefﬁcient vectors of gi,j (xX, yY )
and hi,j (xX, yY ) is as Figure 1.
According to Coppersmith method, the equation can be
solved under the condition det(L) < em! (! is dimension
of the lattice). The elements on the diagonal should be as
small as possible to make this condition easier to meet. On
average, the diagonal elements less than em are helpful. We
call the shift polynomials helpful if the diagonal elements
introduced by them are less than em. For the sake of better
lattice and superior result, Boneh and Durfee [3] excluded the
unhelpful polynomials ye2 and yef. Consequently, the lattice
basis matrix was no longer triangular, and it is difﬁcult to
derive the determinant formula for general m and t. They
1
"
"!
"#
"!#
"!#!
#
"#!
"!#"
$#,# = &!
&!
$%,# = "&!
&!'
$!,# = "!&!
&!'!
$#,% = &(
&
&)'
&'*
$%,% = "&(
&'
&)'!
&'!*
$#,! = (!
1
2)'
)!'!
2'*
2)'!*
'!*!
,&,' = -.(
&!*
,&,& = -./
&)'*
&*
&'*!
ℎ%,! = #(!
2)'*
)!'!*
2)'!*!
*
2'*!
'!*"
Figure 1. Lattice basis for m = 2, t = 1.
introduced a technique called geometric progressive matrix to
solve this problem.Their result shows that one can factor the
modulus N in polynomial time, when d < N 0.292. So far, no
other attack improve this bound.
Herrmann and May applied the unraveled linearization
technique [15], and got the same result as [3]. They re-
placed xy + 1 by u, and changed the original polynomial
f (x, y) = 1+x(A+y) = 0 (mod e) into a linear polynomial
ˆf (x, u) = u + Ax = 0 (mod e). They used the new poly-
nomial ˆf (x, u) to construct shift polynomials in the similar
way. They replaced xy by u − 1, x2y by ux − x, and uxy by
u2 − u. Then, for m = 2, t = 1, the lattice basis matrix is as
Figure 2.
1
"
"!
#
#"
#!
$
#$
#!$
%"," = '!
'!
%$," = "'!
'!(
%!," = "!'!
'!(!
%",$ = ')
'*(
'+
%$,$ = "')
'*(!
'+(
%",! = )!
*!(!
2*+(
+!
-%,& = ./'
'!0
-%,% = ./1
−'*
'*+
'+0
ℎ$,! = $)!
−*!(
−2*+
*!+(
2*+!
+!0
Figure 2. Lattice basis for m = 2, t = 1.
It is also a triangular matrix after removing the unhelpful
polynomials ye2 and ye ˆf, because y ˆf 2 only introduces one
monomial u2y.
Although Herrmann and May [15] did not improve the
bound d < N 0.292, they simpliﬁed the calculation of deter-
minant by unraveled linearization technique.
D. Factor RSA Moduli by Coppersmith Method
Coppersmith method is a kind of method to solve the small
roots of modular equations or integer equations, which can
be construted from RSA equations. Due to special parameter
selection (small private key exponent d) or partial information
(partial private key d or partial p) exposured, the roots have
upper bound and we just need to ﬁnd all the roots in a rela-
tively small range. Therefore, RSA is broken by Coppersmith
method.
Next, we will discuss how to construct the equations and
use Coppersmith method to solve them in three speciﬁc cases
71
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

including private key exponent d small, partial private key d
known and partial information of p known. Suppose that the
size of p and q are the same. Let e = N ↵, d = N β. For partial
key exposure attacks, we write known partial of d as ed. When
most signiﬁcant bits (MSBs) are known, write unknown bits as
d0 = d − ed such that |d0| < N δ. For known least signiﬁcant
bits (LSBs) of the private exponent, denote d1 as unknown
bits, and d = d1M + ed, where M = 2b(β−δ) log Nc.
III. SMALL EXPONENT ATTACKS
Wiener [33] proposed an attack on RSA with small de-
cryption exponent. Their algorithm was based on continued
fraction, and they proved that d can be recovered in polynomial
time under the condition d < N 0.25. Boneh and Durfee [3]
improved Wiener’s bound to d < N 0.292 based on Copper-
smith method. Next, we mainly discuss the small decryption
exponent attack on RSA with moduli N = prq.
A. Attack on Takagi RSA
Recall the equation of Takagi RSA
ed ⌘ 1 mod (p − 1)(q − 1).
There is an integer k satisfying
ed − k (p − 1) (q − 1) = 1
where k, p, q and d are unknown. Then, we construct a three-
variable modular polynomial
f (x, y, z) = x (y − 1) (z − 1) + 1 = 0
(mod e).
The roots (x0, y0, z0) = (k, p, q) of the equation have upper
bounds
|x0| = |k| =
ed − 1
(p − 1)(q − 1) < 2ed
pq < N ↵+β−
2
(r+1) = X,
|y0| = |p| < 2N 1/(r+1) = Y,
|z0| = |q| < 2N 1/(r+1) = Z.
Then, we use the Coppersmith method to ﬁnd the small
roots. Due to the additional algebraic relations N = prq, we
use substitution technique (replace each occurrence of yrz
by N to construct the lattice) to optimize the lattice basis.
Unraveled linearization technique can also be used to remove
unhelpful polynomials and construct triangular matrices which
are easier to analyze.
Itoh et al. [18] proved that d can be recovered in polynomial
time when d  N
2−
p
2
r+1 . Their result is based on geometric
progressive matrix. The attack on standard RSA described by
Boneh and Durfee [3] is a special case of r = 1. Takayasu and
Kunihiro [32] obtained the same results based on unraveled
linearization technique. They use linearization u1 = 1 + xy
and u2 = 1 + xz to remove the unhelpful polynomials and
construct a triangular matrix which simplify the calculation.
B. Attack on Prime Power RSA
Recall the equation of prime power RSA
ed ⌘ 1 mod pr−1(p − 1)(q − 1).
There is an integer k satisfying
ed − kpr−1 (p − 1) (q − 1) = 1
where k, p, q and d are unknown. A three-variable modular
polynomial is obtained
f (x, y, z) = 1 + xyr−1(y − 1)(z − 1) = 0
(mod e).
The roots (x0, y0, z0)
=
(k, p, q) are bound by X
=
N ↵+β−1, Y = Z = 2N 1/(r+1).
In the similar way, we use Coppersmith method to ﬁnd the
roots of the modular equation and factor N.
Takagi [30] applied Wiener’s attack on prime power RSA
and proved that one can recover d in polynomial time under
the condition d  N
1
2(r+1) . Later, May [25] gave two small
exponent attacks using Coppersmith method. The ﬁrst attack
works when d  N
r
(r+1)2 for r ≥ 2, based on the result
of [5]. The second attack works when d  N
1−
4r
(r+1)2 for
r ≥ 2, based on solving univariate modular equation. Sarkar
[27] studied the case of r = 2, and showed that N can be
factored in polynomial time when d < N 0.395. It improves
the bound d < N 0.22 in [25]. Lu et al. [24] put forward three
algorithms for solving three types of linear equations. The ﬁrst
one is multivariate linear equation modulo an unknown divisor
pv for a known composite integer N (N ⌘ 0 mod pu, u ≥ 1).
As an application of the algorithm, they proved that one can
factor N when d < N
r(r−1)
(r+1)2 , which improves the work of [25].
Sarkar [28] further extended the result of [27]. They studied
the case of 2 < r < 8, and improved previous works when
r = 3, 4.
Similar to modular equation, one can obtain integer equa-
tions
f (x1, x2, x3, x4) = 1 − ex1 + x2(x3 − 1)(x4 − 1).
from Takagi RSA, and
f (x1, x2, x3, x4) = 1 − ex1 + x2xr−1
3
(x3 − 1)(x4 − 1).
from prime power RSA.
Then, we can follow the steps of Jochemsz-May strategy
to solve small roots of the integer equations. Takayasu and
Kunihiro analyzed the case of solving integer equation base
on Jochemsz-May strategy. Their results [32] show that us-
ing modular equation and unraveled linearization technique
can analyze a wider range than using integer equation and
Jochemsz-May strategy. Therefore, the modular equation com-
bined with unraveled linearization can usually obtain better
results.
72
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

C. Attack on RSA with Modulus N = prqs
Lim et al. [21] proposed a RSA scheme with modulus
N
= prqs. They showed that the scheme is even more
efﬁcient. Lu et al. [22] extended small exponent attack to
RSA with moduli N = prqs. They analyzed both variants
satisfying ed ⌘ 1 mod (p − 1) (q − 1) and ed ⌘ 1 mod
pr−1(p − 1)(q − 1). For the ﬁrst variant, they used the same
modular equation as the attack on Takagi RSA. Note that they
replaced yrzs with N instead of yrz. Finally, they proved that
N can be factored in polynomial time when d  N
7−2
p
7
3(r+s) . For
the second variant, they used an univariable modulus equation.
They took d as the variable and obtained a modular equation
f(x) = (E − x) mod pr−1qs−1
where E is the inverse of e modulo N. Finally, they proved
that N can be factored in polynomial time when d
<
N 1−(3r+s)(r+s)−2.
IV. PARTIAL KEY EXPOSURE ATTACKS
In 1998, Boneh, Durfee and Frankel [4] studied partial
private key exposure attack on RSA with moduli N = pq.
They pointed out that if one knows a quarter bit of the
private, it is enough to recover the whole private key, when
the encryption exponent is small. More private key bits are
required for recovering private key with a larger encryption
exponent. However, their attacks only work when e < N 0.5.
Subsequently, Bl¨omer and May [2] improved the result of [4],
expanding the range of e from N 0.5 to N 0.725. When the
LSBs are known, they proposed an algorithm with better result
e < N 0.875. Soon afterwards, Ernst et al. [11] proposed some
attacks for known MSBs or LSBs of the private exponent.
Their work ﬁrst considers the case of full size e. Aono [1]
proposed an optimized method for lattice construction, and
use it to attack RSA with small d and known LSBs of d. The
method is theoretically more effective than the previous partial
private key exposure attack. Later, Takayasu and Kunihiro
[31] combined unraveled linearization technique and improved
previous works. They gave the attacks with known MSBs
of d < N 0.5625 or LSBs of d < N 0.368. Recently, Suzuki,
Takayasu and Kunihiro [29] extended the work of [31] and
proposed an attack when both MSBs and LSBs of d are known.
At the same time, some scholars have also studied private
key exposure attacks of other RSA variants. Next, we mainly
discuss private key exposure attacks on RSA with modulus
N = prq.
A. Attack on Takagi RSA
If we know the MSBs of d, and the equation of Takagi RSA
is
e
⇣
ed + d0
⌘
= 1 + k(p − 1)(q − 1)
where d0, k, p, q are unknown. A four variable modular poly-
nomial is obtained
f (x1, x2, x3, x4) = ex1 + x2 (x3 − 1) (x4 − 1) + 1
The
roots
(ex1, ex2, ex3, ex4)
=
(−d0, k, p, q)
of
f (ex1, ex2, ex3, ex4)
=
0 (mod eed)
are
bound
by
X1 = N δ, X2 = 2N ↵+β−2/(r+1), X3 = X4 = 2N 1/(r+1).
Suppose the LSBs of d are exposured, and the equation of
Takagi RSA can be rewritten as
e
⇣
d1M + ed
⌘
= 1 + k(p − 1)(q − 1).
We can construct a three variable modular polynomial
f (x, y, z) = x (y − 1) (z − 1) +
⇣
1 − eed
⌘
.
The roots (x0, y0, z0) = (k, p, q) of f (x0, y0, z0) = 0
(mod eM) are bound by X = 2N ↵+β−2/(r+1), Y = Z =
2N 1/(r+1).
Thus, the problem of recovering d is converted to solving
modular equation.
We can also use the integer equation. Assuming we know
some bits of d regardless of the MSBs or LSBs. Write known
bits as ed , and the equation of Takagi RSA is
e
⇣
ed +
⇣
d − ed
⌘⌘
= 1 + k(p − 1)(q − 1).
Construct a four variable integer equation
f (x1, x2, x3, x4) = 1−eed+eMx1 +x2 (x3 − 1) (x4 − 1)+1
where M = 1 for known MSBs, and M = 2b(β−δ) log Nc for
known LSBs. And the roots (ex1, ex2, ex3, ex4) = (−d0, k, p, q)
are bound by X1 = N δ, X2 = 2N ↵+β−2/(r+1), X3 = X4 =
2N 1/(r+1). Thus, the problem of recovering d is converted
to solving integer equation. Then, we can use Jochemsz-May
Strategy to ﬁnd the roots.
In 2014, Huang et al. [17] studied partial key exposure
attacks on Takagi RSA. They used the lattice basis structure
similar to [18] and gave the attacks with known MSBs, known
LSBs and known some bits in the middle of the private
exponent known. Their results show that one can factor N
in polynomial time giving about (1 − δ
β )-fraction of MSBs or
continuous bits in middle of d when
δ 
7
4 (r + 1) − 1
4
s
24 (↵ + β)
r + 1
−
39
(r + 1)2 − ✏.
For known LSBs, they proved that one can factor N in
polynomial time giving about (1 − δ
β )-fraction of LSBs of
d when
δ 
5
3 (r + 1) − 2
3
s
3 (↵ + β)
r + 1
−
5
(r + 1)2 − ✏.
Later, Takayasu and Kuniriho [32] used integer equation and
modular equation respectively to improve the results in [17]
for known MSBs and LSBs.
73
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

B. Attack on Prime Power RSA
For prime power RSA, the method to recover d is analogous
to Takagi RSA. In addition, because pr−1 is in prime power
RSA equation, we get a polynomial modulo pr−1. Suppose we
know some bits of d regardless of the MSBs or LSBs. Write
known bits as ed such that
111d − ed
111 < N δ, and the equation of
prime power RSA can be rewritten as
f (x) = eMx + eed − 1
(mod pr−1)
where M = 1 for known MSBs, and M = 2b(β−δ) log Nc
for known LSBs. The root x0 is bound by X = N δ. Thus,
the problem of recovering d is converted to solving univariate
modular equation. We use Coppersmith method to ﬁnd the
root.
May [25] studied partial private key exposure attack on
prime power RSA. They extended two small decryption expo-
nent attacks on prime power RSA to partial private key expo-
sure attack, and proved that one can factor N in polynomial
time giving about min{1 −
r
(r+1)2 ,
4r
(r+1)2 }-fraction of MSBs
or LSBs. Later, Esgin et al. [12] extended the small decryption
exponent attack on prime power RSA in [27] to partial private
key exposure attack. Sarkar [28] gave the partial private key
exposure attack when r < 8 and d < N
1
r+1 + 3r−2p3r+3+3
3(r+1)
.
V. FACTORING RSA MODULI WITH PARTIAL KNOWN
In this section, we will describe attacks on RSA when partial
bits of moduli N are known by side channel analysis or other
ways. As early as 1985, Rivest and Shamir [26] have analyzed
this problem. They used the method of integer programming
to factor N = pq in the case of two thirds of the consecutive
bits of p known. Then, Coppersmith [6] factored N based on
the lattice analysis method when half of the consecutive bits
of p are known. Herrmann and May [13] ﬁrst considered the
situation that known bits are inconsecutive, and extended the
problem to factor N with n blocks bits known. They proved
that one could factor N when know 70% of random bits of p.
For the RSA scheme with modulus N = prq, Boneh, Durfee
and Howgrave-Graham [5] showed that one can factor N when
know
1
r+1-fraction of the MSBs bits of p. Their basic idea is
to guess the high bits of p, and calculate the entire p. Let the
high bits of p as known P and the low bits as a variable x.
Then, we get a univariate modular equation
f (x) = (P + x)r mod pr.
The small root can be found by Coppersmith method. Lu et al.
[23] extend the problem to the case of n unknown bit blocks
rather than a consecutive block. Their results show that the
modulus N can be factored when ln (r+1)
r
-fraction of random
bits of p are known.
Subsequently, Coron et al. [8] extended the attack of [5] to
RSA with modulus N = prqs. They used
(
r = u · ↵ + a
s = u · β + b
And skillfully converted N = prqs into N = P uQ, where
P := p↵qβ, Q := paqb. Next, N can be factored based on [5].
Their results show that when r or s is greater than (log p)3,
N can be factored in polynomial time.
Lu et al. [22] also discussed the security of RSA with
modulus N = prqs. They studied the case of known LSBs
of p, and proposed two attacks, modulo p and modulo pq.
They showed that when know min{
s
r+s, 2(r−s)
r+s } of the bits
of p, one can factor N in polynomial time. When 2r > 3s,
the attack modulo p is better than modulo pq.
Later, Coron and Zeitoun [9] took advantage of B´ezout
identity and got a new relationship
↵ · s − β · r = 1.
They converted N = prqs to N = P rq, where P := p↵qβ.
Then, the results of [5] was used to factor N, which improved
the result of [8]. That is, when r ≥ log p, N can be factored
in polynomial time.
VI. CONCLUSION
Coppersmith method is a very important tool in RSA crypt-
analysis. We survey the application of Coppersmith method in
RSA with modulus N = prq from three aspects, including
small exponent attack, partial key exposure attack and fac-
toring RSA moduli with partial known. These three types of
attacks usually rely on special parameter selection. Therefore,
the selection of parameters needs to be more careful to avoid
the above attacks.
For the three attacks discussed in this paper, adding more
helpful polynomials and eliminate unhelpful polynomials to
construct lattice basis are the key to improve the attacks, which
means to factor N with less information known. In addition,
there are other attacks on RSA with moduli N = prq, which
are mentioned in [34] and [35].
The crux of Coppersmith method is how to transform
the problem of solving modular equation or integer equation
into a short vector problem on lattices. In other words, the
construction of the lattice basis is the most critical step. For
now, Jochemsz-May strategy is the best general strategy for
solving multivariate integer equation. A triangular matrix can
be constructed easily by Jochemsz-May strategy. However, for
some special algebraic structures, Jochemsz-May strategy does
not always get the best results. We need to exploit the implicit
algebraic relationships to construct a better lattice basis. The
work of [32] shows that modular equations combined with
unraveled technique usually obtain better results than integer
equation based on Jochemsz-May Strategy. The construction
of a better lattice basis and optimization of the results still
have room for improvement.
REFERENCES
[1] Y. Aono, “A new lattice construction for partial key exposure attack
for RSA,” In Public Key Cryptography - PKC 2009, volume 5443 of
Lecture Notes in Computer Science, pp. 34–53, Springer, 2009.
[2] J. Bl¨omer and A. May, “New partial key exposure attacks on RSA,”
In Advances in Cryptology - CRYPTO 2003, 23rd Annual International
Cryptology Conference, volume 2729 of Lecture Notes in Computer
Science, pp. 27–43, Springer, 2003.
74
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

[3] D. Boneh and G. Durfee, “Cryptanalysis of RSA with private key d
less than N0.292,” In Advances in Cryptology - EUROCRYPT 1999,
volume 1592 of Lecture Notes in Computer Science, pp. 1–11, Springer,
1999.
[4] D. Boneh, G. Durfee, and Y. Frankel, “An attack on RSA given a
small fraction of the private key bits,” In Advances in Cryptology -
ASIACRYPT 1998, volume 1514 of Lecture Notes in Computer Science,
pp. 25–34, Springer, 1998.
[5] D. Boneh, G. Durfee, and N. Howgrave-Graham, “Factoring N = prq
for large r,” In Advances in Cryptology - CRYPTO 1999, volume 1666
of Lecture Notes in Computer Science, pp. 326–337, Springer, 1999.
[6] D. Coppersmith, “Finding a small root of a bivariate integer equation;
factoring with high bits known,” In Advances in Cryptology - EURO-
CRYPT 1996, volume 1070 of Lecture Notes in Computer Science, pp.
178–189, Springer, 1996.
[7] D. Coppersmith, “Finding a small root of a univariate modular equation,”
In Advances in Cryptology - EUROCRYPT 1996, volume 1070 of
Lecture Notes in Computer Science, pp. 155–165, Springer, 1996.
[8] J. Coron, J. Faug`ere, G. Renault, and R. Zeitoun, “Factoring n = prqs
for large r and s,” In Topics in Cryptology - CT-RSA 2016, volume
9610 of Lecture Notes in Computer Science, pp. 448–464, Springer,
2016.
[9] J. Coron and R. Zeitoun, “Improved factorization of n = prqs,” In
Topics in Cryptology - CT-RSA 2018, volume 10808 of Lecture Notes
in Computer Science, pp. 65–79, Springer, 2018.
[10] G. Durfee and P. Q. Nguyen, “Cryptanalysis of the RSA schemes with
short secret exponent from asiacrypt’99,” In Advances in Cryptology -
ASIACRYPT 2000, volume 1976 of Lecture Notes in Computer Science,
pp. 14–29, Springer, 2000.
[11] M. Ernst, E. Jochemsz, A. May, and B. de Weger, “Partial key exposure
attacks on RSA up to full size exponents,” In Advances in Cryptology
- EUROCRYPT 2005, volume 3494 of Lecture Notes in Computer
Science, pp. 371–386, Springer, 2005.
[12] M. F. Esgin, M. S. Kiraz, and O. Uzunkol, “A new partial key exposure
attack on multi-power RSA,” In Algebraic Informatics - CAI 2015,
volume 9270 of Lecture Notes in Computer Science, pp. 103–114,
Springer, 2015.
[13] M. Herrmann and A. May, “Solving linear equations modulo divisors:
On factoring given any bits,” In Advances in Cryptology - ASIACRYPT
2008, volume 5350 of Lecture Notes in Computer Science, pp. 406– 424,
Springer, 2008.
[14] M. Herrmann and A. May, “Attacking power generators using unravelled
linearization: When do we output too much?” In Advances in Cryptology
- ASIACRYPT 2009, volume 5912 of Lecture Notes in Computer
Science, pp. 487–504, Springer, 2009.
[15] M. Herrmann and A. May, “Maximizing small root bounds by lineariza-
tion and applications to small secret exponent RSA,” In Public Key
Cryptography - PKC 2010, volume 6056 of Lecture Notes in Computer
Science, pp. 53–69, Springer, 2010.
[16] N. Howgrave-Graham, “Finding small roots of univariate modular
equations revisited,” In Cryptography and Coding 1997, volume 1355
of Lecture Notes in Computer Science, pp. 131–142, Springer, 1997.
[17] Z. Huang, L. Hu, J. Xu, L. Peng, and Y. Xie, “Partial key exposure
attacks on takagi’s variant of RSA,” In Applied Cryptography and
Network Security - ACNS 2014, volume 8479 of Lecture Notes in
Computer Science, pp. 134–150, Springer, 2014.
[18] K. Itoh, N. Kunihiro, and K. Kurosawa, “Small secret key attack on
a variant of RSA (due to takagi),” In Topics in Cryptology - CT-RSA
2008, volume 4964 of Lecture Notes in Computer Science, pp. 387–406,
Springer, 2008.
[19] E. Jochemsz and A. May, “A strategy for ﬁnding roots of multivariate
polynomials with new applications in attacking RSA variants,” In
Advances in Cryptology - ASIACRYPT 2006, volume 4284 of Lecture
Notes in Computer Science, pp. 267–282, Springer, 2006.
[20] A. K. Lenstra, H. W. Lenstra, and L. Lov´asz, “Factoring polynomi-
als with rational coefﬁcients,” Mathematische Annalen, vol. 261(4),
pp.515–534, 1982.
[21] S. Lim, S. Kim, I. Yie, and H. Lee, “A generalized takagi-cryptosystem
with a modulus of the form prqs,” In Progress in Cryptology - IN-
DOCRYPT 2000, volume 1977 of Lecture Notes in Computer Science,
pp. 283–294, Springer, 2000.
[22] Y. Lu, L. Peng, and S. Sarkar, “Cryptanalysis of an RSA variant with
moduli n = prql,” J. Math. Cryptol., vol. 11(2), pp. 117-130, 2017.
[23] Y. Lu, R. Zhang, and D, “Lin. Factoring multi-power RSA modulus
N = prq with partial known bits,” In Information Security and Privacy
- ACISP 2013, volume 7959 of Lecture Notes in Computer Science, pp.
57–71, Springer, 2013.
[24] Y. Lu, R. Zhang, L. Peng, and D. Lin, “Solving linear equations modulo
unknown divisors: Revisited,” In Advances in Cryptology - ASIACRYPT
2015, volume 9452 of Lecture Notes in Computer Science, pp. 189– 213,
Springer, 2015.
[25] A. May, “Secret exponent attacks on rsa-type schemes with moduli n =
prq,” In Public Key Cryptography - PKC 2004, volume 2947 of Lecture
Notes in Computer Science, pp. 218–230, Springer, 2004.
[26] R. L. Rivest and A. Shamir, “Efﬁcient factoring based on partial
information,” In Advances in Cryptology - EUROCRYPT 1985, volume
219 of Lecture Notes in Computer Science, pp. 31–34, Springer, 1985.
[27] S. Sarkar, “Small secret exponent attack on RSA variant with modulus
n = prq,” Des. Codes Cryptogr., vol. 73(2), pp. 383–392, 2014.
[28] S. Sarkar, “Revisiting prime power RSA,” Discret. Appl. Math., vol.
203, pp. 127– 133, 2016.
[29] K. Suzuki, A. Takayasu, and N. Kunihiro, “Extended partial key expo-
sure attacks on RSA: improvement up to full size decryption exponents,”
Theor. Comput. Sci., vol. 841, pp. 62–83, 2020.
[30] T. Takagi, “Fast rsa-type cryptosystem modulo pkq,” In Advances
in Cryptology - CRYPTO 1998, volume 1462 of Lecture Notes in
Computer Science, pp. 318–326. Springer, 1998.
[31] A. Takayasu and N. Kunihiro, “Partial key exposure attacks on RSA:
achieving the Boneh-Durfee bound,” In Selected Areas in Cryptography
- SAC 2014, volume 8781 of Lecture Notes in Computer Science, pp.
345–362. Springer, 2014.
[32] A. Takayasu and N. Kunihiro, “How to generalize RSA cryptanalyses,”
In Public-Key Cryptography - PKC 2016, volume 9615 of Lecture Notes
in Computer Science, pp. 67–97. Springer, 2016.
[33] M. J. Wiener, “Cryptanalysis of short RSA secret exponents,” IEEE
Trans. Inf. Theory, vol. 36(3), pp. 553–558, 1990.
[34] L. Peng, L. Hu, Y. Lu, S. Sarkar, J. Xu, Z. Huang, “ Cryptanalysis of
Variants of RSA with Multiple Small Secret Exponents,” In: Biryukov
A., Goyal V. (eds) Progress in Cryptology - INDOCRYPT 2015, volume
9462 of Lecture Notes in Computer Science, pp. 105-123, Springer,
2015.
[35] A. Nitaj and T. Rachidi, “New Attacks on RSA with Moduli N = prq
,” In: El Hajji S., Nitaj A., Carlet C., Souidi E. (eds) Codes, Cryptology,
and Information Security. C2SI 2015. volume 9084 of Lecture Notes in
Computer Science, pp. 352-360 Springer, 2015.
75
Copyright (c) IARIA, 2021.     ISBN:  978-1-61208-919-5
SECURWARE 2021 : The Fifteenth International Conference on Emerging Security Information, Systems and Technologies

