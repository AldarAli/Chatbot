A Set of Support Tools to Software Process Appraisal and Improvement in 
Adherence to CMMI-DEV 
 
Leonardo Possamai Mezzomo, Sandro Ronaldo 
Bezerra Oliveira 
Graduate Program in Computer Science 
Federal University of Pará 
Belém, Pará, Brazil  
e-mail: leopossamai@gmail.com, srbo@ufpa.br  
 
Alexandre Marcos Lins de Vasconcelos 
Informatics Center 
Federal University of Pernambuco 
Recife, Pernambuco, Brazil 
e-mail: amlv@cin.ufpe.br 
 
Abstract—Adopting standards and reference models for 
quality software processes is essential to ensure a competitive 
software industry. However, despite the increasing number of 
standards and models, only a small proportion of software 
organizations adopt them. This paper presents a set of support 
tools for software process appraisal and improvement through 
their adherence to the CMMI-DEV (Capability Maturity 
Model Integration for Development) model. The purpose of 
this set of support tools is to assist software organizations in 
the implementation of the CMMI-DEV model. It is expected 
that these tools will be readily adopted by software 
organizations because they are based on models and standards 
that are generally accepted. Furthermore, this set of support 
tools employs free  (non-proprietary) technologies to reduce 
costs. 
 
Keywords-software engineering; software quality; process 
appraisal; process improvement; software tool. 
I.  INTRODUCTION 
Currently, there is a much greater need to develop 
software than design or create a tool or use a particular 
programming language. There have also been collective, 
complex and creative endeavors in this area since the 
quality of a software product relies heavily on the people, 
organizations and procedures needed to create it and make it 
available [1]. 
Quality is not only a question of market differentiation 
that can enable an organization to sell more and increase its 
profits, but also a prerequisite that the organization must 
meet to be able to put its product on the global market. In 
the domain of software development, quality can be defined 
as a set of characteristics that must be satisfied to ensure the 
software product caters for the needs of its users [2]. Thus, 
before the quality of the product can be achieved, a software 
development team must find a solution to guide them about 
what, how and when to do something. It is believed that the 
key to software quality lies in the quality-based process that 
is used to achieve it [3]. 
According to Humphrey [4], a software process consists 
of a set of software engineering tasks required to transform 
a user’s requirements into software. In defining this process, 
some information is necessary about areas such as: 
activities, resources, consumed and generated work-
products, procedures, paradigms and technology, and a 
software life cycle model [5]. Thus, a software process can 
be regarded as a set of tasks or activities that must be 
performed by a team to ensure a good product or service. 
While the organizations have been implementing their 
processes, they have also carried out an appraisal as a 
means of improving them [6]. A software process cannot 
stay immutable in time, and as a result, reflects the “critical 
points” that lead to unwanted problems in product 
development. The processes must constantly undergo 
refinements and modifications so that they can increase 
their ability and flexibility during the projects. This means 
that they need to be continuously improved [1]. 
The aim of the Organizational Process Appraisal and 
Improvement 
process 
is 
to 
determine 
how 
the 
organization’s processes help it to achieve its business goals 
and to support, implement and deploy measures that will 
lead to continuous improvement [6]. Although it is an 
independent process, it is essential that the process 
definition stage is deployed. 
As there has been a good deal of discussion about the 
appraisals and continuous improvements of the processes, 
software engineers and organizations still have difficulties 
in defining their processes, because there is no software 
process that can be generically used by different 
organizations [7]. However, the process must be improved 
and continuously refined with each new project to enable it 
to deal with the requirements and expectations of the market 
and the organization. In this way, the process can increase 
the efficiency and productivity of the organization as a 
whole. These observations have driven a large number of 
studies on the creation of quality models and methods for 
improving processes [1] [8]. 
To make improvements in these processes, it is 
important to appraise them. The appraisal process addresses 
many factors, such as their assets (tasks, activities, 
procedures, tools, etc) and the products that are the outcome 
of the   projects. Thus, providing support for the adoption of 
continuous improvement strategies is essential [1]. 
At present, Organizational Process Appraisal and 
Improvement process are employed in the quality models. 
The purpose of 
 these models, guidelines and standards is 
to guide organizations about the use of good practices and 
the implementation of these processes. The main guidelines 
include the following: the Capability Maturity Model 
Integration (CMMI) [6], the Brazilian Software Process 
Improvement program (MPS.BR) [9] and the International 
263
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

Organization 
for 
Standardization 
/ 
International 
Electrotechnical Commission (ISO / IEC) 12207 [10]. 
The purpose of this paper is to define an approach about 
the Organizational Process Appraisal and Improvement 
process that is aligned with the Capability Maturity Model 
Integration for the Development (CMMI-DEV) quality 
model. This approach consists of: a) process mapping 
between the assets included in the quality models, b) a 
process framework for mapping and c) free tools of 
systemic support for the activities defined in the framework. 
Thus, it is expected to simplify the implementation of the 
appraisal process and assist organizations that are seeking to 
improve, standardize and institutionalize their software 
development 
processes, 
through 
the 
application 
of 
organizational assets for their software projects. These tools 
are based on free standards and technologies and are the 
outcome 
of 
the 
Software 
Process 
Improvement: 
Development and Research (SPIDER) project [11], carried 
out at the Federal University of Pará (UFPA). 
As well as this introductory part, Section II discusses the 
software process appraisal and improvement stages, and it 
also examines related works. Section III sets out the 
appraisal and improvement tools. Section IV discusses the 
analysis of the tools and their application in industry and 
their adherence to the CMMI-DEV model. Section V 
analyzes the results obtained from this. Finally, Section VI 
summarizes the conclusions and makes recommendations 
for future work. 
II. BACKGROUND AND RELATED WORKS 
This section provides an overview of the CMMI-DEV 
model, the fundamental concepts of the software process 
with regard to improvement and appraisal, and some related 
works. 
A. The CMMI-DEV Model 
The 
CMMI 
is 
a 
maturity 
model 
for 
process 
improvement, created by the Software Engineering Institute 
(SEI) to integrate areas of knowledge in a single model, 
such as Systems Engineering (SE), Software Engineering 
(SW), Integrated Products and Process Development (IPPD) 
and Supplier Sourcing (SS) [6]. 
Currently, the CMMI is in version 1.3 and is composed 
of three models, which are as follows: CMMI-DEV, which 
is concerned with development processes, CMMI for 
Acquisition (CMMI-ACQ), which deals with acquisition 
processes, as well as product and / or sourcing services, and 
CMMI for Services (CMMI-SVC), which focuses on 
service processes such as maintenance and evolution. 
The CMMI structure consists of many elements that are 
grouped into three categories, which are: a) required 
components (Specific and Generic Goals), b) expected 
components (Specific and Generic Practices) and c) 
informative components (Subpractices, Examples of Work 
Products, and others). These components assist in the 
interpretation of the model requirements. Thus, the CMMI-
DEV comprises twenty-two process areas, each of which 
has its own purpose and specific goals supplemented by 
generic goals, since they are related to all the process areas. 
The specific goal is to define the characteristics, which are 
unique for each process area, while the generic goals define 
the characteristics that are common to all the process areas. 
Each specific goal has a set of specific practices, which are 
activities that must be carried out to accomplish the goal.  
The generic goals have generic practices as well. 
B. Software Process Appraisal and Improvement 
To determine how the standard processes can assist the 
organization, the disciplined process appraisals must be 
performed by means of a process appraisal model, which is 
employed for assessing the process capability based on a 
reference model [12]. It is possible to determine the way 
that the processes can be assessed for a specific project in 
the organizational unit by analyzing the results obtained of 
the strengths and weaknesses of these appraisals and the 
risks involved. As a result, improvements can be made on 
the basis of information obtained in the standard processes 
of the organization and this can be applied to the standard 
processes by making changes in their existing capabilities 
or by replacing them with subprocesses that are more 
efficient or effective [13]. 
According to CMMI [6], the purpose of the 
Organizational Appraisal and Improvement process, called 
the Organizational Process Focus (OPF) process area, is to 
determine how the standard processes of the organization 
can a) assist an organization in achieving its business goals 
and b) support the organization by helping it to plan, 
implement 
and 
deploy 
continuous 
improvement 
in 
processes based on an awareness of its strengths and 
weaknesses. The main objective of the OPF process area is 
to conduct systematic appraisals, plan and implement the 
improvements that are found necessary by these appraisals 
and provide experience in the use of the standard processes 
of the organization. 
The main goals of business process improvement are: (i) 
to understand the characteristics and factors that affect 
process capability, (ii) to plan and implement the activities 
that modify the process in response to business needs, and 
(iii) to assess the effects and benefits obtained and compare 
them with the cost of making changes in the processes [13]. 
Once the potential improvements in the standard 
processes of the organization have been identified, they are 
analyzed and transformed into action items that must be 
realistic and aligned to the roles and responsibilities defined 
in the organization. These action items should be planned 
and implemented, and not only take account of the 
resources available, but also the risks inherent in the 
changes that have to be implemented in the organization’s 
standard processes [14].  
An efficient way to identify possible areas of 
improvement in future projects would be to conduct “post-
mortem appraisals”, which entail making an appraisal after 
the execution of all aspects of a project, including its 
products, processes and resources [15]. Collier et al. [16] 
propose an appraisal process that follows 5 stages: (i) 
establishing a mechanism for collecting information for the 
project (usually by a survey), (ii) collecting objective 
information about the project (usually by measures related 
264
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

to the execution of the project), (iii) conducting an in-depth 
meeting (a structured meeting involving members of the 
project with the aim of collecting information that was not 
obtained in the first attempt to do this), (iv) leading the 
project that traces the activities of a single day (a meeting, 
where key players come together to evaluate the main 
events that have taken place during the project and the 
information obtained and thus assess the main problems and 
their possible associated causes), and (v) publishing the 
results. 
After the improvements in the standard processes have 
been implemented, it is important to support the appropriate 
use of processes and other organizational process assets in 
the organization's projects and monitor their use to ensure 
that the implemented improvements have the desired effect 
and avoid having asny adverse effects on the projects [14]. 
C. Related Works 
In [17], WebAPAEE was proposed for a process 
management environment based on free software. It was 
designed between 2004 and 2005 as a cooperative venture 
between academic and scientific institutions, in particular 
the Software Engineering Laboratory (LabES) at UFPA. 
With regard to the process appraisal, the scope of the 
project is still limited. Currently, the environment is suitable 
for the definition of metrics and the collection of estimates 
and measurements, but there is no mechanism in the 
environment to enable an appraisal of the task of collecting 
that has been carried out. Furthermore, currently there is an 
ongoing project in the software environment to provide a 
more complete and integrated support for the measurement 
and analytical procedures. It is clear that there is not yet an 
integration of this kind. Although the process improvement, 
is discussed in [18] in an implementation strategy based on 
the Initiating, Diagnosing, Establishing, Acting and 
Learning (IDEAL) model [19], the project is only able to 
support the improvement, but lacks a tool that is integrated 
in the environment. 
In [3], there is a software process implementation for the 
environment, called ImPProS, which is involved with 
Process Definition, Simulation, Implementation, Evaluation 
and Improvement through the use of tools that support the 
software process and software development. Among the 
approaches that form the environment, it is worth 
highlighting the ProEvaluator and ProImprove, which carry 
out the process evaluation and improvement activities 
respectively. 
However, 
this 
environment 
has 
some 
drawbacks: with regard to evaluation, the ProEvaluator 
supports the automation of only a few activities included in 
the MPS.BR Assessment Method [20], and on the question 
of improvement, the support tool only implements the 
activities of the IDEAL model, but does not integrate these 
activities with the results of the evaluation, and thus does 
not provide a cycle for process improvement. 
Finally, Montoni et al. [21] present a Software 
Development Environment (SDE), called TABA Station 
that supports project management activities, improvements 
in software product quality and increased productivity. The 
TABA Station [22], which has been operating since 1990, is 
a meta-environment that seeks to generate a software 
development environment that is suited to organizational 
features, software processes and specific projects. The main 
dsriving-force behind this is the fact that the application 
domains 
and 
specific 
projects 
have 
their 
own 
characteristics, and it is essential that these features are 
present in a customized way in the environments used by 
software engineers for the application development. 
In this environment, there are tools intended for process 
evaluation and improvement, called AvalPro and Pilot. The 
former supports the Processes and Product Quality 
Assurance team [23], while the latter is designed to carry 
out an evaluation of the improvement proposals of a process 
in a systematic, planned and controlled way by carrying out 
pilot schemes [24]. It was not found that the tools are based 
on quality models and unclear what their relationship is 
with other tools embedded in the environmental domain. 
Finally, in [33] Portela et al. present a tool focused on 
software process enactment, which has been previously 
appraised and improved, called Spider-PE. It should be 
pointed out that this work differs from the paper on the 
Spider-PE tool in some respects. For example, the tools 
discussed in this work are concerned with generating and 
implementing the results of the software process appraisal 
and improvement, while Spider-PE receives as input the 
process has already been appraised and improved, i.e. these 
tools are dependent and are used in sequence during the 
implementation of process lifecycle. 
The selection criteria of the tools described in this 
section are that they should be available for download and 
further analysis. Also, it must be possible to use them in the 
development scenario of Brazilian software organizations 
that adopt a software process improvement program using 
CMMI-DEV or another model. 
The weaknesses of these tools are as follows: they do 
not provide different ways of conducting software process 
appraisals (objective criteria or metrics), they do not record 
the results of appraisals carried out over a period of time, 
they do not keep a historical record of improvement items 
generated from the results of the appraisal, they do not 
make full use of all the activities, principles and techniques 
suggested by the IDEAL model, and they do not evaluate 
the results of the improvements implemented in the 
software processes. All these features are suggested in the 
adherence of the OPF process area included in the CMMI-
DEV. 
Unlike these other environments, the proposal, set out in 
detail in this paper, is an appraisal tool integrated into the 
process for the modeling and definition tool, called Spider-
PM, and a tool for process improvement, called Spider-PI, 
defined by the mapping of the appraisal and improvement 
process found in the Brazilian Reference Model of SPI for 
Software (MR-MPS-SW) and CMMI-DEV models and 
ISO/IEC 12207 standard. 
III. A SET OF SUPPORT TOOLS FOR  PROCESS APPRAISAL 
AND IMPROVEMENT 
The set of supporting concepts adopted in this paper 
defines a set of technologies that can be integrated and thus 
265
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

assist in the software process appraisal and improvement. In 
this domain, there are tools, techniques, procedures, 
processes, roles, methodologies, frameworks, languages, 
standards, patterns, and so on. 
A. A Framework for Software Process Appraisal and 
Improvement  
A process framework was designed to make the 
organization concerned about the quality of its appraisal and 
improvement processes, not only adherent to the MR-MPS-
SW model but also the other model and standard. All the 
activities in the framework originate from the assets 
(activities, practices, expected results) included in CMMI-
DEV, MR-MPS-SW and ISO / IEC 12207. 
Three flows were used to prepare the framework. One of 
them is called a macro-flow and contains macro-activities 
and two of them are formed of specific activities. The 
macro-activities are called Process Appraisal and Process 
Improvement; each of them consists of a set of other 
activities that structure the specific flows. The framework 
was modeled by means of the Business Process Modeling 
Notation (BPMN). 
Fig. 1 shows a general flow between the macro-
activities. In this flow, there is a need to appraise and 
improve a process. The exclusive gateways help to clarify 
the possible steps that can be followed. The first exclusive 
gateway determines the existence of a process, and allows it 
to be further assessed or improved by specific activities. 
Thus, it is important that there is already a process (as 
defined above), and that there is input to the macro-activity 
“Appraising Process”. There is also another exclusive 
gateway that allows a process to be improved, if it can find 
opportunities for improvement at the end of the appraisal. 
 
Figure 1. FlowChart showing the Macro-Activities of the Framework 
The activities that form the flows that are directed at the 
process appraisal and improvement goals are included in the 
macro-activities. These activities are as follows: the 
Appraising Process, activities related to appraisal based on 
objective criteria or metrics, and the Improving Process, 
activities related to the implementation of improvements 
from the IDEAL model. 
The appraisal framework, in which the activities are 
described as features in Section B, begins with an activity 
that provides information about the use of the process and 
can be checked before the process is used. After this, the 
appraisal needs and goals are defined and the type of 
appraisal is chosen from the metrics (metrically – using the 
Spider-MSControl 
tool 
[31]) 
or 
objective 
criteria 
(objectively - using the Spider-CL tool [32]). The activities, 
included in the appraisals that are based on metrics, follow a 
simple flow from the definition of goals and measurements, 
and then the collection and analysis of the measurements. 
The other type of appraisal includes a set of activities that 
involve the definition of questions and the application of 
surveys, which are later drawn on to conduct the data 
collection and analysis. However, the two types of appraisal 
generate a report, which serves as input for process 
improvement. 
The report on the generated improvements at the end of 
the appraisal is considered to be critical for the 
improvement activities. In this domain, the framework is 
formed of seventeen activities, which are described in 
Section C as features that are based on an improvement 
model 
called 
IDEAL. 
The 
IDEAL 
model 
is 
an 
organizational improvement pattern that serves as a guide 
for initiates. It plans and implements the improvement 
actions and provides a usable and easy approach to 
understand the stages that are needed to establish a 
successful process improvement program [19]. 
The evaluation of the prepared framework was submited 
to the judgment of experts in software process appraisal and 
improvement (included in the MR-MPS-SW, CMMI-DEV 
and ISO / IEC 12207) through the completion of a 
questionnaire. These experts were contacted by email, and 
were sent the framework documents and survey with 
objective questions about the work proposed. The purpose 
of the survey was primarily to evaluate the correctness and 
suitability of the framework to support people and 
organizations when they use the solution that supports the 
quality models and standards. 
The survey had sixteen objective questions, divided into 
two parts:  
• 
(i) Expert Profile - this was designed to characterize 
the expert’s level of knowledge, regarding the 
process models and appraisal methods, time of 
experience, and the role/function of the software 
process appraisal, and  
• 
(ii) Approach Evaluation - this concerns the 
correctness and completeness of the mapping and 
the framework, and determines whether the process 
framework can serve as a reference-point for 
software process appraisals and improvements in an 
organization or if it adheres to the designed 
mapping.  
In addition to objective questions, the survey also had a 
space for comments so the expert could provide any 
additional information that needed to be reviewed. 
The expert had considerable knowledge of quality 
models and software process appraisal and improvement, as 
well as   five years’ practical experience of making 
appraisals and improvements in the processes included in 
MPS.BR, CMMI-DEV and ISO / IEC 12207 models. Thus, 
the need for the expert to have sufficient knowledge and 
experience in both quality models and standards was an 
ideal condition that had been achieved. 
266
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

With regard to the results of the evaluation, the 
framework was considered to be suitable, and was able to 
address a few of the suggestions made for corrections. 
B. The Software Process Appraisal Tool 
The Spider-PM tool is a General Public License (GPL) 
tool that supports the process modeling and definition, by 
means of the Software & Systems Process Engineering 
Metamodel Specification (SPEM) standard. The Spider-PM 
tool also supports the software process appraisal. 
Since the software process appraisal is a crucial skill, it 
should be noted that the use of tools to support the appraisal 
process is of great importance, as confirmed by Hunter, 
Robinson and Woodman [25] “Tools to visualise software 
assessment data are therefore of value both to software 
producers who wish to improve their processes compared 
with their competitors, and for software procurers who wish 
the assess the processes of potential contractors against 
those used in the industrial sector involved.”.  
Currently, most process appraisals only involve 
recording the information in documents and spreadsheets. 
This means it takes more time to write the work manual, 
since it is more difficult to handle the appraisal information 
[26]. 
The appraisal tool integrated to Spider-PM is designed 
to systematize the activities of the appraisal process by 
complying with quality models and standards. This tool was 
developed from preliminary studies, which included a 
preparation of process mapping based on quality models 
and standards and the design of a process framework. 
Hence, the input for this tool is the software process defined 
in the Spider-PM, which consists of activities, tasks, 
resources, work products, roles, and others assets that will 
be appraised in an automated way. This tool has the 
following features:  
• 
Appraisal Creation: this enables a new appraisal to 
be recorded. In this feature, the user can create an 
appraisal, by filling some of the spaces, 
• 
Appraisal of Reading: this shows the users all the 
process appraisals that have been created. It makes 
possible to list all the appraisals created or else it 
can deal with queries that are included in three 
filters, 
• 
Appraisal Setup: this enables the appraisal to be 
initialized. The graphical interface of this feature 
has a component that lists all the appraisals with the 
“Created” status, so that they can be automatically 
initiated, 
• 
Appraisal Storage: this enables the reports produced 
by the appraisal to be stored in the tool, 
• 
Appraisal Diagnosis: this allows the appraisal to be 
diagnosed after the reports have been loaded in the 
repository (see Fig. 2). This means that the user can 
select the process and the appraisal is carried out in 
the dialogue box. Then the tool generates a 
diagnosis chart, which shows the number of 
strengths, weaknesses, opportunities and threats 
achieved as the result of an appraisal. The graphical 
interface of this feature has a component that lists 
all the appraisals with the “Finished” status, 
• 
Diagnosis of Reading: this shows the users all the 
diagnosis items of the appraised processes that have 
been created, 
• 
Appraisal Consolidation: this gathers together and 
disseminates the information generated by the 
appraisals. 
 
 
 
Figure 2. Screen for the Generation of the Diagnosis Chart 
The following section describes the support tool that is 
employed to improve the software process on the basis of 
the appraisal results obtained. 
C. Spider-PI: The Software Process Improvement Tool 
Spider-PI also has a General Public License (GPL) and 
is 
designed 
to 
systematize 
the 
business 
process 
improvement activities in compliance with quality models 
and standards. It was developed from preliminary studies, 
which included the preparation of process mapping based 
on quality models and standards, and the design of the 
process framework. The input for this tool comprises the 
results of the appraisal generated by the Software Process 
Appraisal Tool. This is formed of the strengths, weaknesses, 
opportunities and threats that will be addressed in an 
automated way. This tool has the following features: 
• 
New Improvement Creation: this enables new 
improvements to be recorded. In this feature, the 
user can “create an improvement”, by filling some 
fields of the feature, 
• 
Improvement Setup: this enables the improvement 
to be initialized. The graphical interface of this 
feature has a component that lists all the 
improvements with the “Created” status, which can 
be automatically initiated, 
• 
Improvement Display: this shows users all the 
process improvements that have been created, 
• 
Defining the Reason for Improvement: this enables 
the users to create the reason / goal of the 
improvement, 
• 
Defining Improvement Practices: this allows the 
users to define the necessary practices required to 
make the improvement, 
• 
Defining the Improvement Domain: this allows the 
267
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

users to create the goals, existing works and 
benefits, which can be achieved / obtained by the 
improvement, 
• 
Defining 
the 
Improvement 
Sponsorship: 
this 
enables the sponsor to give his / her approval of the 
improvement 
implementation 
and 
to 
give 
continuous support, 
• 
Defining the Improvement Infrastructure: this 
provides the information about the infrastructure 
designed for the improvement, such as the human 
effort that must be expended to make the 
improvement, 
• 
Characterizing Improvement Practices: this makes it 
possible to characterize the current practices and set 
out the goals for achieving the improvement 
implementation, 
• 
Defining the Improvement Procedures: this enables 
the users to define the procedures that must be 
followed   for the completion of the improvement, 
• 
Defining the Priorities for the Implementation of 
Practices: this sets out the range of priorities for 
implementing the improvement in the practices, 
• 
Defining the Improvement Plan: this allows the 
improvement implementation plan to be defined, 
• 
Creating the “Improvement Solution”: this prepares 
the improvement solution, 
• 
Testing the “Improvement Solution”: this tests the 
improvement solution that has been formulated, 
• 
Deploying 
the 
“Improvement 
Solution”: 
this 
enables the “improvement solution” to be deployed, 
• 
Analysis and Validation of the Improvement: this 
validates the improvement, as shown in Fig. 3. The 
user selects the improvement practice that has been 
implemented in the process. After this, the system 
displays the planned state (both before and after the 
improvement has been made). Then, the user 
performs 
the 
validation 
of 
the 
practice 
implementation in the process on the basis of a set 
of criteria and metrics that have been previously 
defined. As a result, this user can report the 
experiences 
obtained 
from 
the 
improvement 
implementation. At the end of this feature, a status 
is defined to show the “improvement practice” that 
has been implemented by the user, 
Figure 3. Screen showing the Analysis and Validation of the 
Improvement Implementation 
• 
Proposing Future Activities: this allows future 
activities to be carried out so that they can be 
performed with a view to bringing about an 
improvement. 
These tools are designed as desktop environments, using 
Java programming language and other free technologies, 
such as Eclipse 3.7 Integrated Development Environment 
(IDE), MySQL 5.5 Database Management System (DBMS), 
Hibernate 4.0 for object-relational mapping, XStream a 
simple library for serializing objects into eXtensible 
Markup Language (XML), and iText as the library for 
creating and manipulating the Protable Document Format 
(PDF). For a full description of the tools and each feature, 
see the work of Mezzomo [27]. 
It should be emphasized that these tools are used in 
sequence, and follow the management lifecycle of the 
software process: definition, execution, evaluation and 
improvement. These tools interoperate with each other as 
follows: (i) the definition tool generates a software process 
with the assets (Spider-PM), (ii) this process should be 
planned, executed and managed by the allocated staff 
(Spider-PE [33]). Then (iii) the process can be appraised by 
objective criteria and / or metrics to identify the strengths, 
weaknesses, opportunities and threats (Appraisal Tool), and 
(iv) the appraisal results are implemented by means of the 
improvement practices in the software process (Spider-PI). 
IV. TOOLS EVALUATION 
This section describes the evaluation of tools in the 
software industry and their adherence to CMMI-DEV. 
A. Application in the Software Industry 
The tools were used during the implementation of 
CMMI-DEV Maturity Level 3 in a Brazilian software 
development organization called Emprel, and gave support 
to the practices included in the Organizational Process 
Definition (OPD) and OPF process areas. The organization 
was assessed at this level and obtained a certificate issued 
by the CMMI Institute. 
The users of the tools stated that their use facilitated the 
generation of historical data. As a result of the continuous 
appraisal process, there was a greater improvement in 
traceability made by the appraisals, together with the 
process versions that were established. This led to a more 
efficient 
and 
effective 
means 
of 
managing 
the 
implementation of the OPD and OPF process areas. It can 
be stated that the tool helped the organization in the 
following areas: 
• 
Establishing organizational process needs, 
• 
Appraising 
the 
business 
processes 
of 
the 
organization, 
• 
Identifying the process improvements of the 
organization, 
• 
Establishing process action plans, 
• 
Implementing process action plans, 
• 
Deploying organizational process assets, 
• 
Adopting standard processes, 
• 
Monitoring the implementation, 
268
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

• 
Incorporating experiences into the assets of the 
organizational process. 
B. Adherence to CMMI-DEV 
The analysis of the adherence of the tools was 
conducted through the mapping of the features outlined in 
Section III with the specific practices included in the OPF 
process area that can be found in CMMI-DEV. A specific 
practice can be defined as “the description of an activity that 
is considered important in achieving the associated specific 
goal, i.e. it describes the activities that are expected to result 
in the achievement of the specific goals of a CMMI process 
area” [6]. In the OPF process area of CMMI-DEV, there are 
nine specific practices. The details of each of the 
recommendations for the specific practices listed in the first 
column of Table I, can be obtained by consulting the 
official guide of the CMMI-DEV model [6]. 
TABLE I. ADHERENCE BETWEEN THE APPRAISAL AND IMPROVEMENT 
TOOL TO CMMI-DEV 
OPF Specific 
Practices 
Process Tool 
Functionalities 
Degree of 
Adherence  
SP1.1 Establish 
Organizational Process 
Needs 
Appraisal Creation  
Fully 
Implemented 
SP 1.2 Appraise  the 
Organization’s 
Processes 
Appraisal Setrup  
Fully 
Implemented 
SP 1.3 Identify the 
Organization’s Process 
Improvements 
Appraisal Diagnosis, 
Appraisal Consolidation  
Fully 
Implemented 
SP 2.1 Establish 
Process Action Plans 
Defining the Improvement 
Practices, 
Defining the Improvement 
Domain, 
Defining the Improvement 
Plan 
Fully 
Implemented 
SP 2.2 Implement 
Process Action Plans 
Creating the Improvement 
Solution, 
Testing the Improvement 
Solution 
Fully 
Implemented 
SP 3.1 Deploy 
Organizational Process 
Assets 
Deploying the 
Improvement Solution 
Fully 
Implemented 
SP 3.2 Deploy 
Standard Processes 
Deploying the 
Improvement Solution 
Fully 
Implemented 
SP 3.3 Monitor the 
Implementation 
Analysing and Validating 
the Improvement 
Fully 
Implemented 
SP 3.4 Incorporate 
Experiences into 
Organizational Process 
Assets 
Proposing Future Actions 
Fully 
Implemented 
It can be seen that the features of the tools implement all 
the CMMI-DEV specific practices of the OPF process area, 
and hence it can be assumed that the tools are adherent to 
CMMI-DEV and support the process appraisal and 
improvement. 
V. OBTAINED RESULTS 
This section describes the obtained results of this work 
in both the academic world and industry. 
A. In the Academic World  
An initial version of this thesis proposal has been 
published and presented at a conference called Workshop of 
Theses and Dissertations in Software Quality (WTDQS) 
[28]. This research can be characterized as a subproject of 
the SPIDER Project, and was accepted in the 2011/2012 
cycles of the Brazilian Program of Software Quality and 
Productivity. In 2011, the framework employed in the 
implementation of the tools was published in the 
Symposium of Computer Technology at Santarém (SIGES) 
[29] and Conference of the Peruvian Society of Computing 
(CSPC) [30] conferences. The framework and tools were 
the subject of a dissertation that was defended at the Federal 
University of Pará (Graduate Program in Computer 
Science) [27]. 
The main academic results were as follows: the training 
of one post-graduate student in Computer Science, the 
training of two students from a scientific background, and 
the dissemination of knowledge about process appraisal and 
improvement in subjects involving experimental software 
engineering applied to practical projects. Thus, the 
knowledge used for the development of software tools 
served to improve the practical understanding of the 
concepts defined by the quality models. 
B. In Industry 
The authors took part in consultation projects related to 
process improvement and made use of the technologies 
examined in this paper. First, the tools were used by 
organizations, which are partners of the SPIDER project, 
such as Jambu Tecnologia and GOL Software, both located 
in Belém city, and SWQuality and Emprel, located in 
Recife city. Basically, the tools assisted in the appraisal and 
improvement stages by defining and monitoring the 
projects. On the other hand, the activities carried out by the 
Framework are widely adopted in the implementation of the 
CMMI-DEV Maturity Level 3 in organizations in which the 
authors act as consultants; these are, located at Porto Digital 
(Recife city) and Farol Digital (João Pessoa city). 
The main results for industry were as follows: the 
support given for the implementation of practices on 
software process appraisal and improvement that are 
included 
in 
the 
quality 
models, 
the 
systematic 
implementation of the appraisal and improvement process, 
and the training of business teams in software process 
appraisal and improvement. Thus, the tool can be seen as 
providing support for the implementation of quality models 
as well as for the education of personnel in the area of 
software process appraisal and improvement. 
VI. CONCLUSION 
The development of organizational process appraisal 
and improvement tools is intended to support the process 
appraisal and improvement activities that involve the good 
practices defined by the quality models and standards. 
However, our goal is to facilitate the adoption of these 
models 
and 
standards 
for 
software 
development 
organizations by means of these tools. A striking feature of 
269
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

this proposal is the fact that the tools are open source, and 
can thus enable the academic community and / or industry 
to assist in their development and evolution. The use of 
tools can also help the software organizations to achieve 
more satisfactory levels of discipline through the 
combination of techniques and methods that assist in the 
appraisal and improvement of its processes. 
The main contribution to science made by this work 
concerns the automated application of practices in CMMI-
DEV on organizational process appraisal and improvement, 
which involve tools and their integration with other 
management support tools. As well as this, the software 
process improvement programs continually benefit from the 
results that generate value to the organization. 
In a future work, which is already in development, the 
integration of these tools with other tools will be made 
available in a SPIDER project. This entails a joint 
implementation of the other process areas included in 
CMMI-DEV, 
such 
as 
configuration 
management, 
measurement and analysis. 
It should be stressed that this work has provided a set of 
basic support tools for the implementation of an 
organizational process improvement program. These tools 
are integrated with other tools that support different process 
areas included in the CMMI-DEV. Moreover, this work 
forms a part of a master’s thesis for the Graduate Program 
in Computer Science and also a scientific research project at 
the Faculty of Computing, Federal University of Pará. 
ACKNOWLEDGMENTS 
The authors would like to thank the Dean of Research 
and Postgraduate Studies at the Federal University of Pará 
(PROPESP/UFPA) by the Qualified Publication Support 
Program (PAPQ), for the financial support. 
REFERENCES 
[1] A. Fuggetta, “Software Process: A Roadmap”, In: Proceedings of The 
Future of Software Engineering, (ICSE’2000), Ireland, pp. 25-34, 
2000. 
[2] L. Morais, “Software Quality - Unraveling an essential requirement in 
the development process”, Revista de Engenharia de Software, ed. 29, 
ano 3, pp. 34-38, 2010 
[3] S. R. B. Oliveira, “ProDefiner: A Progressive Approach to Software 
Process Definition in a Process Centered Environment Domain”, Tese 
de Doutorado, CIN/UFPE, Brazil, 2007. 
[4] W. S. Humphrey, Managing the Software Process, The SEI Series in 
Software Engineering, Addison-Wesley, 1989. 
[5] R. A. Falbo, “Knowledge Integration in a Software Development 
Environment”, Tese de Doutorado, COPPE/UFRJ, Brazil, 1998. 
[6] SEI – Software Engineering Institute, “CMMI for Development – V 
1.3”, 2010, Available: http://www.sei.cmu.edu/reports/10tr033.pdf, 
[retrieved: July, 2016]. 
[7] A. Koscianski and M. S. Soares, Software Quality - Learn the More 
Modern Methodologies and Techniques to Software Development, 
2ed, São Paulo: Novatec, 2007. 
[8] P. Kruchten, Introduction to RUP – Rational Unified Process, Rio de 
Janeiro: Ciência Moderna, 2003. 
[9] SOFTEX – Associação para Promoção do Software Brasileiro, “MPS 
Software 
General 
Guide 
2012”, 
2013, 
Avaiable: 
http://www.softex.br/wp-content/uploads/2016/04/MPS.BR_Guia_ 
Geral_Software_2016-com-ISBN.pdf, [retrieved: July, 2016]. 
[10] ISO/IEC, “ISO/IEC 12207: Systems and software engineering – 
Software life cycle processes”, Geneve, 2008. 
[11] S. Oliveira, M. Souza, W. Lira, E. Yoshidome, and J. Furtado, “A 
System Solution Proposal of a Free Software Tools SUITE to Support 
the Implementation of MPS.BR Model”, Revista do Programa 
Brasileiro de Qualidade e Produtividade em Software, pp. 103-107, 
2011. 
[12] ISO/IEC, “ISO/IEC 15504-1: Information Technology - Process 
Assessment - Part 1: Concepts and Vocabulary”, Geneve, 2004. 
[13] W. A. Florac and A. D. Carleton, Measuring the Software Process – 
Statistical Process Control for Software Process Improvement, 
Addison-Wesley, 1999. 
[14] S. Zaharan, S. Software Process Improvement – Practical Guidelines 
for Business Success, Addison-Wesley, 1998. 
[15] S. L. Pfleeger, Software Engineering: theory and practice, 2nd edition, 
Prentice-Hall, Inc., ISBN 0-13-029049-1, 2001. 
[16] B. Collier, T. DeMarco, and P. Fearey, “A defined process for project 
post mortem reviews”, IEEE Software, pp. 65-72, 1996. 
[17] E. Sales, M. Sales, A. Costa, C. Reis, and R. Reis, “WebAPSEE Pro: 
An Environment to Support hte Software Process Management”, In: 
VI WAMPS, Brazil, pp. 228-237, 2010. 
[18] B. França, E. Sales, C. Reis, and R. Reis, “Using the WebAPSEE 
Environment in the Implementation of the MPS.BR level G at CTIC-
UFPA”, In: VIII SBQS, Brazil, pp. 310-317, 2009. 
[19] B. Mcfeeley, “IDEALSM: A User’s Guide for Software Process 
Improvement”, Software Engineering Institute Handbook, Carnegie 
Mellon University, CMU/SEI-96-HB-001, 1996. 
[20] J. M. C. Xavier, “ProEvaluator: A Tool for Software Process 
Assessment”, Dissertação de Mestrado, UFPE, Brazil, 2007. 
[21] M. Montoni, G. Santos, S. Figueiredo, R. Silva, R. Barcelos, A. 
Barreto, A. Barreto, C. Cerdeiral, P. Lupo, and A. Rocha, “A Software 
Process and Product Quality Assurance Approach to Support 
Knowledge Management in TABA Station”, In: V SBQS, Brazil, pp. 
87-99, 2006. 
[22] G. H. Travassos, “The Tools Integration Model of TABA Station”, 
Tese de Doutorado, COPPE/UFRJ, Brazil, 1994.  
[23] J. Andrade, “Software Process Assessment in TABA Environment”, 
Dissertação de Mestrado, COPPE-UFRJ, Brazil, 2005. 
[24] R. C. Silva Filho, A. R. C. Rocha, and G. H. Travassos, “An Approach 
for Improvement Proposal Evaluation in Software Processes”, In: VI 
SBQS, Brazil, pp. 485-499, 2007. 
[25] R. Hunter, G. Robinson, and I. Woodman, “Tool Support for Software 
Process Assessment and Improvement”, University if Strathclyde, 
Department of Computer Science, 1997. 
[26] J. Neiva, “The Proposal for a Framework and Systemic Support for 
Process Assessment Based on MA-MPS, SCAMPI and ISO/IEC 
15504”, PBQP Software, SEPIN/MCTI, pp. 121-127, 2010.  
[27] L. P. Mezzomo, “A Framework for Software Process Assessment and 
Improvement Adhering CMMI, MR-MPS-SW and ISO/IEC 12207”, 
Dissertação de Mestrado, UFPA, Brazil, 2015. 
[28] L. P. Mezzomo and S. R. B. Oliveira, “A Proposal of Tools to Support 
the Organizational Process Evaluation and Improvement Process in 
Software Quality Models and Standards Domain”, WTDQS - SBQS, 
Brazil, pp. 35-42, 2012. 
[29] L. P. Mezzomo and S. R. B. Oliveira, “Framework for Organizational 
Process Definition, Evaluation and Based on Quality Models”, I 
SIGES, Brazil, pp. 56-66, 2011. 
[30] L. P. Mezzomo and S R. B. Oliveira, “An Approach to Software 
Process Definition, Evaluation and Improvement in the Software 
Quality Models and Standards Domain”, X CSPC, Peru, pp. 97-106, 
2011. 
[31] T. S. A. Costa, B. W. F. V. Silva, D. J. S. Teixeira, G. P. Silva, P. J. S. 
Souza, A. I. X. M. Batista, S. R. B. Oliveira, and A. M. L. 
Vasconcelos, “Spider-MSControl: A Tool for Support to the 
Measurement Process using GQIM Approach”, In: Software 
270
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

Engineering and Applications, USA, pp. 55-62, 2015, Avaiable: 
http://www.spider.ufpa.br, [retrieved: July, 2016]. 
[32] R. S. Barros and S. R. B. Oliveira, “Spider-CL: A Tool for Support to 
use Objective Criteria in the Software Quality Domain”, In: ERIN, 
Brazil, pp. 112-120, 2010, Avaiable: http://www.spider.ufpa.br, 
[retrieved: July, 2016]. 
[33] C. Portela, A. Vasconcelos, S. Oliveira, A. Silva, and E. Silva, 
“Spider-PE: A Set of Support Tools to Sotware Process Enactement”, 
In: The Ninth International Conference on Software Engineering 
Advances, France, pp. 539-544, 2014. 
271
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-498-5
ICSEA 2016 : The Eleventh International Conference on Software Engineering Advances

