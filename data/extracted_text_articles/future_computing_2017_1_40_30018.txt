A Class of Minimum-Time Synchronization Algorithms for 2D
Rectangluar Arrays Based on L-Shaped Mapping
Hiroshi Umeo†, Takuya Yamawaki†, Hiroki Uchino†, and Kaori Ishida†
†School of Information Engineering
University of Osaka Electro-Communication
Neyagawa-shi, Hastu-cho, 18-8, Osaka, Japan
corresponding email address: umeo@cyt.osakac.ac.jp
{yamawaki, uchino, ishida}@cyt.osakac.ac.jp
Abstract—We introduce a new class of minimum-time FSSP
(Firing Squad Synchronization Problem) algorithms for two-
dimensional (2D) rectangular arrays. The algorithms in the class
are all based on L-shaped mapping, where the synchronized con-
ﬁgurations on 1D arrays are mapped in an L-shaped form onto
2D arrays efﬁciently, yielding minimum-time FSSP algorithms.
We also present a comparative study of their recent implemen-
tations. Several state-efﬁcient implementations, new insights into
2D synchronization and multi-dimensional extensions are also
discussed.
Keywords—cellular automata; FSSP; synchronization.
I.
INTRODUCTION
The synchronization in ultra-ﬁne grained parallel computa-
tional model of cellular automata, known as the Firing Squad
Synchronization Problem (FSSP), has been studied extensively
for more than ﬁfty years, and a rich variety of synchronization
algorithms has been proposed. In the present paper, we attempt
to answer the following questions:
•
First, how many variations of 2D FSSP algorithms and
their implementations which are based on L-shaped
mapping exist?
•
How can we synchronize 2D arrays using the L-
shaped decomposition in minimum-time?
•
What is the exact rule set for the real implementations
of minimum-time FSSP algorithms on 2D arrays?
•
How do the algorithms compare with each other?
•
Can we extend those 2D FSSP algorithms to 3D
arrays, or more generally, to multi-dimensional arrays?
In Section 2, we give a description of the 2D FSSP and
review some basic results on the 2D FSSP algorithms. Section
3 introduces a new class of FSSP algorithms based on L-
shaped mapping for 2D arrays. In the last section, we give
a summary of the paper.
II.
FIRING SQUAD SYNCHRONIZATION PROBLEM
A. FSSP on 2D Cellular Arrays
Fig. 1 shows a ﬁnite two-dimensional (2D) cellular array
consisting of m × n cells. Each cell is an identical (except
the border cells) ﬁnite-state automaton. The array operates in
lock-step mode in such a way that the next state of each cell
(except border cells) is determined by both its own present
1
2
3
n
1
2
3
m
...
...
...
...
...
...
...
...
C11
C12
C13
C1n
C21
C22
C23
C31
C32
C2n
C33
C3n
Cm1
Cm2
Cm3
Cmn
4
...
C14
C24
C34
Cm4
...
Fig. 1.
A two-dimensional (2D) rectangular cellular automaton of size m×n
arranged in m rows and n columns.
state and the present states of its north, south, east, and west
neighbors. All cells (soldiers), except the north-west corner
cell (general), are initially in the quiescent state at time t = 0
with the property that the next state of a quiescent cell with
quiescent neighbors is the quiescent state again. At time t = 0,
the north-west upper corner cell C1,1 is in the ﬁre-when-ready
state, which is the initiation signal for the array. The FSSP is
to determine a description (state set and next-state function)
for cells that ensures all cells enter the ﬁre state at exactly the
same time and for the ﬁrst time. The tricky part of the problem
is that the same kind of soldier having a ﬁxed number of states
must be synchronized, regardless of the size m×n of the array.
The set of states and transition rules must be independent of
m and n.
A formal deﬁnition of the 2D FSSP is as follows: A cellular
automaton M is a pair M = (Q, δ), where
1)
Q is a ﬁnite set of states with three distinguished
states G, Q, and F, each in Q. G is an initial general
state, Q is a quiescent state, and F is a ﬁring state,
respectively.
2)
δ is a next state function such that δ : Q × (Q ∪
{∗})4 → Q. The state * /∈ Q is a pseudo state of the
border of the array.
3)
The quiescent state Q must satisfy the following
conditions:
δ(Q, Q, Q, Q, Q) = δ(Q, ∗, Q, Q, ∗) = δ(Q, ∗, Q, Q, Q) =
δ(Q, ∗, ∗, Q, Q) = δ(Q, Q, Q, ∗, Q) = δ(Q, Q, ∗, ∗, Q) =
δ(Q, Q, ∗, Q, Q) = δ(Q, Q, ∗, Q, ∗) = δ(Q, Q, Q, Q, ∗) =
Q.
A 2D cellular automaton of size m×n, Mm×n consisting
of m × n copies of M, is a 2D array of M. Each M is
referred to as a cell and denoted by Ci,j, where 1 ≤ i ≤ m
and 1 ≤ j ≤ n. We denote a state of Ci,j at time (step) t by
St
i,j, where t ≥ 0, 1 ≤ i ≤ m, 1 ≤ j ≤ n. Each tuple in the
20
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

next state function δ means that:
St+1
itself = δ(St
itself, St
north, St
south, St
east, St
west).
A conﬁguration of Mm×n at time t is a function Ct :
[1, m] × [1, n] → Q and denoted as:
St
1,1St
1,2 .... St
1,n
St
2,1St
2,2 .... St
2,n
St
3,1St
3,2 .... St
3,n
.
.
.
St
m,1St
m,2 .... St
m,n.
A computation of Mm×n is a sequence of conﬁgurations of
Mm×n, C0, C1, C2, ...., Ct, ..., where C0 is a given initial
conﬁguration such that:
S0
i,j =
G
i = j = 1
Q
otherwise.
(1)
A conﬁguration at time t+1, Ct+1 is computed by synchronous
applications of the next transition function δ to each cell of
Mm×n in Ct such that:
St+1
i,j = δ(St
i,j, St
i−1,j, St
i+1,j, St
i,j+1, St
i,j−1).
A synchronized conﬁguration of Mm×n at time t is a conﬁg-
uration Ct, St
i,j = F, for any 1 ≤ i ≤ m and 1 ≤ j ≤ n.
The FSSP is to obtain an M such that, for any m, n ≥ 2,
1)
A synchronized conﬁguration at time t = T(m, n),
CT (m,n) : ST (m,n)
i,j
= F, for any 1 ≤ i ≤ m and 1 ≤
j ≤ n, can be computed from an initial conﬁguration
C0 in equation (1).
2)
For any t, i such that 1 ≤ t ≤ T(m, n) − 1, 1 ≤ i ≤
m, 1 ≤ i ≤ n, St
i,j ̸= F.
No cells ﬁre before time t = T(m, n). We say that the array
Mm×n is synchronized at time t = T(m, n) and the function
T(m, n) is the time complexity for the synchronization.
B. Lower-Bound and Optimality in 2D FSSP Algorithms
As for the time optimality of the 2D FSSP algorithms,
Beyer [1] and Shinahr [4] gave a lower bound and minimum-
time FSSP algorithm.
Theorem 1 There exists no cellular automaton that can syn-
chronize any 2D array of size m × n in less than m + n +
max(m, n)−3 steps, where the general is located at one corner
of the array.
Theorem 2 There exists a cellular automaton that can synchro-
nize any 2D array of size m×n at exactly m+n+max(m, n)−
3 steps, where the general is located at one corner of the array.
1
2
3
4
n
1
2
3
4
m
m
1
2
3
4
n
m
2
3
4
n
m
3
4
n
m
4
n
m
1
2
3
4
m
2
3
4
m
3
4
m
4
m
n
m
m
i
j
Fig. 2.
A 2D array synchronization scheme based on L-shaped mapping
developed in Beyer [1] and Shinahr [4].
t = 4
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0
2
Q2
P0
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 9
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0
2
Q2
P0
Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0
3
Q2 Q2
P0
Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0
4
S4
Q2 Q2
P0
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q2 Q2 Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
K0
S4
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 14
1
2
3
4
5
6
7
8
9
10
11
12
1
K3
A1
S2
Q1 Q1 Q1 Q1 Q1
A2
Q1
K0
M1
2
Q2
K2
S2
Q1 Q1 Q1 Q1 Q1 Q1 Q1
A2 M1
3
Q2 Q2
Y1
Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0
4
A3
Q2
A3
P0
Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0
5
K1
K1
Q2
S4
P0
Q1
S1
Q0 Q0 Q0 Q0 Q0
6
K0
A3
K0
A3
Q2
P1
Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 19
1
2
3
4
5
6
7
8
9
10
11
12
1
A5
Q1
K1
A2
S1
Q1 Q1 Q1
S1
K1
K0
M1
2
Q2 Q6 Q1
K0
Q1
A2
S1
Q1 Q1
K1
S1
M1
3
Q2 Q2 Q6
K0
A1
Q1 Q1
A2
S1
Q1
K0
M1
4
K0
K0
Q2 Q6
K1
Q1
A1
S2
Q1
A2
S1
M1
5
Q2 Q2
K1
A3
Q6
K0
Q1
S2
Q1 Q1 Q1 M1
6
K0
K0
K0
K0
K0
K2
A1
S2
Q1
S1
Q0 Q0
7
M2 M2 M2 M2 M2 M2 M0
S2
Q0 Q0 Q0 Q0
t = 24
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
K0
M1 M1
K0
Q1
A1 M1 Q1
S1
K0
M1
2
S3
Q6
K0
M1 M1
K0
Q1
S2
K0
Q1
K0
M1
3
M2 A4
A6
S1
M1 M1 A1
S2
K0
Q1
K0
M1
4
Q2
K0
K0
Q6
A2 M1 M1
S2
Q1
K1
K0
M1
5
K1
Q2 Q2
K1
K3
Q1 M1 M1 Q1
S1
K0
M1
6
A3
K0
K0
K0
A3
K2
Q1
K0
A2
Q1
K0
M1
7
M2 M2 M2 M2 M2 M2 M0 A1
K1
Q1
A2 M1
t = 0
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
2
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 5
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0
2
Q2
P0
Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q2 Q2
P1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 10
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0
2
Q2
P0
Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0
3
S4
Q2
P0
Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0
4
A3
Q2 Q2
P0
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q2
S4
Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
K0
A3
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 15
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
K0
Q1
S2
Q1 Q1 Q1
A2
S1
Q1
K0
M1
2
Q2
K2
A1
S2
Q1 Q1 Q1 Q1 Q1
A2
S1
M1
3
Q2 Q2
K3
S2
Q1 Q1 Q1 Q1 Q1 Q1 Q1 M1
4
K0
Q2 Q2
Y1
Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0
5
Q2
K1
A3
Q2
P0
Q1 Q1
S1
Q0 Q0 Q0 Q0
6
K0
K0
K0
K0
S4
P0
Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 20
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6 Q1 M1 M1 Q1
S1
Q1 Q1
K0
Q1
K0
M1
2
A3
Q6 Q1
K0
A2
Q1 Q1
S1
Q1
K1
K0
M1
3
Q2 Q2 Q6
A1
K1
Q1
A2
Q1 Q1
S1
K0
M1
4
K0
K0
Q2 Q6
K1
A1
Q1 Q1
A2
Q1
K0
M1
5
Q2 Q2
K1
K1
Q6
K0
Q1
A1
S2
Q1
A2 M1
6
K0
K0
K0
A3
K0
A5
K1
Q1
S2
Q1
S1
Q0
7
M2 M2 M2 M2 M2 M2 M0 A1
S2
Q0 Q0 Q0
t = 25
1
2
3
4
5
6
7
8
9
10
11
12
1
S5
K0
M1 M1
K0
A1
A2 M1
S2
K1
S1
M1
2
S4
Q6
K0
M1 M1
K0
Q1 M1 M1 Q1
K0
M1
3
M2 M2 Q6
K0
M1 M1
K0
Q1 M1 Q1
K0
M1
4
A4 M2 M2 A6
S1
M1 M1 A1
S2
K1
K0
M1
5
K1
Q2 Q2
K1
K3
A2 M1 M1
S2
K1
S1
M1
6
K0
K0
K0
K0
K0
K2
Q1 M1 M1 Q1
K0
M1
7
M2 M2 M2 M2 M2 M2 M0
K0
K1
A2
S1
M1
t = 1
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 6
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0
2
Q2
P0
Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q2 Q2
P0
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q2 Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 11
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 M1
2
S4
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0
3
Q2 Q2
P0
Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0
4
Q2
S4
Q2
P0
Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0
5
A3
Q2 Q2 Q2
P1
Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
K0
K0
S4
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 16
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
K0
Q1
A1
S2
Q1
A2
Q1 Q1
S1
K0
M1
2
Q2
A5
K1
Q1
S2
Q1 Q1 Q1
A2
Q1
K0
M1
3
Q2 Q2
K3
A1
S2
Q1 Q1 Q1 Q1 Q1
A2 M1
4
K0
Q2 Q2
K2
S2
Q1 Q1 Q1 Q1 Q1
S1
Q0
5
Q2
K1
K1
Q2
Y1
Q1 Q1 Q1
S1
Q0 Q0 Q0
6
K0
K0
A3
K0
A3
P0
S1
Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0
t = 21
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
A2 M1 M1
S2
Q1
S1
Q1
K0
Q1
K0
M1
2
Q2 Q6 Q1 M1 M1 Q1 Q1 Q1
S1
K1
K0
M1
3
A3
Q2
A5
Q1
K1
A2
S1
Q1 Q1
K1
S1
M1
4
K0
K0
Q2 Q6 Q1
K0
Q1
A2
S1
Q1
K0
M1
5
Q2 Q2
K1
K1
Q6
K0
A1
Q1 Q1
A2
S1
M1
6
K0
K0
K0
K0
K0
K2
K1
Q1
A1
S2
Q1 M1
7
M2 M2 M2 M2 M2 M2 M0
K0
Q1
S2
Q0 Q0
t = 26
1
2
3
4
5
6
7
8
9
10
11
12
1
M0
S1
M1 M1 A1 M1
S1
M1 A1 M1
K0
M1
2
A3
S6
K0
M1 M1
K0
A2 M1 M1
S2
K0
M1
3
M2 M2
S6
K0
M1 M1
K0
A2 M1
S2
K0
M1
4
S3
M2 M2 M0
K0
M1 M1
K0
M1 M1
K0
M1
5
M2 A4
A4 M2 M0
S1
M1 M1 A1 M1
K0
M1
6
K0
K0
K0
K0
K0
K2
A2 M1 M1
S2
K0
M1
7
M2 M2 M2 M2 M2 M2 M0
K0
M1 M1
K0
M1
t = 2
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
2
Q2
P1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 7
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0
2
Q2
P0
Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0
3
Q2 Q2
P0
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q2 Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q2 Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
S4
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 12
1
2
3
4
5
6
7
8
9
10
11
12
1
Y1
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1
A2 M1
2
A3
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0
3
Q2
S4
P0
Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0
4
Q2
A3
Q2
P0
Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0
5
K1
Q2
S4
Q2
P0
Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
A3
K0
A3
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 17
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
K0
A1
Q1 Q1
A2
S1
Q1 Q1
K1
S1
M1
2
Q2 Q6
K1
Q1
A1
S2
Q1
A2
S1
Q1
K0
M1
3
Q2
A3
Q6
K0
Q1
S2
Q1 Q1 Q1
A2
S1
M1
4
K0
Q2 Q2
K2
A1
S2
Q1 Q1 Q1 Q1 Q1 M1
5
Q2
K1
K1
Q2
K3
S2
Q1 Q1 Q1
S1
Q0 Q0
6
K0
K0
K0
K0
K0
Y1
Q1
S1
Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 M2 M2
P1
Q0 Q0 Q0 Q0 Q0
t = 22
1
2
3
4
5
6
7
8
9
10
11
12
1
A6
S1
M1 M1 A1
S2
Q1
S1
K0
Q1
K0
M1
2
Q2 Q6
A2 M1 M1
S2
Q1 Q1
K0
Q1
K0
M1
3
K1
Q2 Q6 Q1 M1 M1 Q1
S1
Q1
K1
K0
M1
4
A3
K0
A3
Q6 Q1
K0
A2
Q1 Q1
S1
K0
M1
5
Q2 Q2
K1
K1
Q6
A1
K1
Q1
A2
Q1
K0
M1
6
K0
K0
K0
K0
K0
K2
K1
A1
Q1 Q1
A2 M1
7
M2 M2 M2 M2 M2 M2 M0
K0
Q1
A1
S2
Q0
t = 27
1
2
3
4
5
6
7
8
9
10
11
12
1
M0 M1 M1 M1 M1 M1 M1 M1 M1 M1 M1 M1
2
M2 M0 M1 M1 M1 M1 M1 M1 M1 M1 M1 M1
3
M2 M2 M0 M1 M1 M1 M1 M1 M1 M1 M1 M1
4
M2 M2 M2 M0 M1 M1 M1 M1 M1 M1 M1 M1
5
M2 M2 M2 M2 M0 M1 M1 M1 M1 M1 M1 M1
6
M2 M2 M2 M2 M2 M0 M1 M1 M1 M1 M1 M1
7
M2 M2 M2 M2 M2 M2 M0 M1 M1 M1 M1 M1
t = 3
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
2
Q2
P0
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
3
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 8
1
2
3
4
5
6
7
8
9
10
11
12
1
P0
Q1 Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0
2
Q2
P0
Q1 Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0 Q0
3
Q2 Q2
P0
Q1
S1
Q0 Q0 Q0 Q0 Q0 Q0 Q0
4
Q2 Q2 Q2
P1
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
5
S4
Q2
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
6
A3
Q2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 13
1
2
3
4
5
6
7
8
9
10
11
12
1
K3
S2
Q1 Q1 Q1 Q1 Q1 Q1 Q1
A2
S1
M1
2
Q2
Y1
Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 M1
3
A3
Q2
P0
Q1 Q1 Q1 Q1 Q1 Q1
S1
Q0 Q0
4
Q2 Q2
S4
P0
Q1 Q1 Q1
S1
Q0 Q0 Q0 Q0
5
K1
A3
Q2 Q2
P0
S1
Q0 Q0 Q0 Q0 Q0 Q0
6
K0
K0
K0
S4
A3
Q0 Q0 Q0 Q0 Q0 Q0 Q0
7
M2 M2 M2 M2 Q0 Q0 Q0 Q0 Q0 Q0 Q0 Q0
t = 18
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
A1
K1
Q1
A2
Q1 Q1
S1
Q1
K1
K0
M1
2
Q2 Q6
K1
A1
Q1 Q1
A2
Q1 Q1
S1
K0
M1
3
Q2 Q2 Q6
K0
Q1
A1
S2
Q1
A2
Q1
K0
M1
4
K0
A3
Q2
A5
K1
Q1
S2
Q1 Q1 Q1
A2 M1
5
Q2
K1
K1
Q2
K3
A1
S2
Q1 Q1 Q1
S1
Q0
6
K0
K0
K0
K0
K0
K2
S2
Q1
S1
Q0 Q0 Q0
7
M2 M2 M2 M2 M2 M2 M0 Q0 Q0 Q0 Q0 Q0
t = 23
1
2
3
4
5
6
7
8
9
10
11
12
1
Q6
K0
M1 M1
K0
Q1
S2
K1
S1
Q1
K0
M1
2
A4
A6
S1
M1 M1 A1
S2
Q1
K0
Q1
K0
M1
3
K1
Q2 Q6
A2 M1 M1
S2
Q1
S1
K1
K0
M1
4
Q2
K0
K0
Q6 Q1 M1 M1 Q1 Q1
K1
S1
M1
5
A3
Q2 Q2
K1
A5
Q1
K1
A2
S1
Q1
K0
M1
6
K0
K0
K0
K0
K0
K2
Q1
K0
Q1
A2
S1
M1
7
M2 M2 M2 M2 M2 M2 M0
K0
A1
Q1 Q1 M1
t = 28
1
2
3
4
5
6
7
8
9
10
11
12
1
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
2
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
3
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
4
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
5
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
6
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
7
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
F0
Fig. 3.
Snapshots of the conﬁgurations of the Shinahr’s 28-state synchro-
nization algorithm on a rectangle array of size 7 × 12.
III.
ALGORITHM A1
The ﬁrst minimum-time FSSP algorithm A1, developed
independently by Beyer [1] and Shinar [4], is based on rotated
L-shaped mapping which maps conﬁgurations of generalized
FSSP solutions on 1D L-shaped arrays onto 2D arrays. A
rectangular array of size m × n is regarded as min(m, n)
rotated L-shaped 1D arrays, where each rotated L-shaped 1D
array is synchronized independently by using the Generalized
FSSP (GFSSP) algorithm. The GFSSP algorithm [3],
[8] is
stated as follows:
Theorem 3 There exists a cellular automaton that can synchro-
nize any 1D array of length n in optimum n + max(k, n −
k + 1) − 2 steps, where the general is located on the kth cell
from left end.
We overview the algorithm A1 operating on an array of
size m × n. Conﬁgurations of the generalized synchronization
processes on 1D array can be mapped on the rotated L-shaped
array. We refer it as L-array. See Fig. 2. At time t = 0, the
north-west cell C1,1 is in general state and all other cells are in
quiescent state. For any i such that 1 ≤ i ≤ min(m, n), the cell
Ci,i will be in the general state at time t = 3i − 3. A special
signal which travels towards a diagonal direction is used to
generate generals on the cells {Ci,i|1 ≤ i ≤ min(m, n) }. For
each i such that 1 ≤ i ≤ min(m, n), the cells {Ci,j|i ≤ j ≤ n
} and {Ck,i|i ≤ k ≤ m} constitute the ith L-shaped array.
Note that the ith general generated at time t = 3i − 3 is on
21
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

the (m − i + 1)th cell from the left end of the ith L-array.
The length of the ith L-array is m + n − 2i + 1. Thus, using
Theorem 3, the ith L-array can be synchronized at exactly
ti = 3i−3+m+n−2i+1−2+max(m−i+1, n−i+1) =
m + n + max(m, n) − 3, which is independent of i. In this
way, all of the L-arrays can be synchronized simultaneously.
Shinahr [4] presented a 28-state implementation of the
algorithm, where most (97%) of the transition rules had wild
cards which can match any state. Later, H. Umeo, K. Ishida,
K. Tachibana, and N. Kamikawa [7] showed that the rule
set consists of 12849 transition rules and it is valid for the
synchronization for any rectangle arrays of size m × n such
that 2 ≤ m, n ≤ 500. Fig. 3 illustrates snapshots of the
conﬁgurations on an array of size 7 × 12 based on our new
28-state 12849-rule implementation. Thus, we have:
Theorem 4 The algorithm A1 can synchronize any m × n
rectangular array in optimum m + n + max(m, n) − 3 steps.
IV.
ALGORITHM A2
In this section, we develop a new minimum-time FSSP
algorithm A2 based on a new L-shaped mapping. First, we
introduce a freezing-thawing technique that yields a delayed
synchronization algorithm for 1D array. The technique was
developed by Umeo [5] for designing several fault-tolerant
FSSP algorithms for 1D arrays.
Theorem 5 Let t0, t1, t2 and Δt be any integer such that
t0 ≥ 0, t1 = t0 + n − 1, t1 ≤ t2 and Δt = t2 − t1. We
assume that a usual synchronization operation is started at time
t = t0 by generating a special signal at the left end of 1D
array of length n. We also assume that the right end cell of
the array receives another special signals from outside at time
t1 = t0 + n − 1 and t2 = t1 + Δt = t0 + n − 1 + Δt,
respectively. Then, there exists a 1D cellular automaton that
can synchronize the array at time t = t0 + 2n − 2 + Δt.
We can freeze the entire conﬁguration during Δt steps
and delay the synchronization on the array for Δt steps. We
refer the scheme as the freezing-thawing technique. Here, the
freezing-thawing technique is employed efﬁciently.
A. Segmentation of rectangular array
First, we consider the case where m ≤ n. We regard
a 2D array of size m × n as consisting of m rotated (90◦
in counterclockwise direction) L-shaped 1D arrays. Each L-
shaped array is denoted by Li, 1 ≤ i ≤ m, shown in Fig.
4. Each Li is divided into three segments, referred to as 1st,
2nd and 3rd segments. The length of each segment of Li is i,
n − m, and i, respectively.
L1
L2
Lm
Li
n
m
. .
. . . . . .
.
.
. . . .
. .
. . .
.
.
. . .
1st segment 
2nd segment 
3rd segment 
.
.
.
G.
SH
SV
SD
Fig. 4.
A 2D array of size m×n is regarded as consisting of m rotated (90◦
in counterclockwise direction) L-shaped 1-D arrays. Each L-shaped array is
divided into three segments.
B. Starting the synchronization process
At time t = 0, a 2D array M has a general at C1,1 and
any other cells of the array are in quiescent state. The general
G (denoted by • in Fig. 4) generates three signals sV , sD
and sH, simultaneously, each propagating at 1/1-speed in the
vertical, diagonal and horizontal directions, respectively. See
Fig. 4. The sV - and sH-signals work for generating wake-up
signals for the 1st and 3rd segments on each L-shaped array.
The sD-signal is used for printing a delimiter between the 1st
and 2nd segments. Their operations are as follows:
•
Signal sV : The sV -signal travels along the 1st column
and reaches Cm,1 at time t = m − 1. Then, it returns
there and begins to travel at 1/2-speed along the
1st column towards C1,1. On the return’s way, the
signal initiates the synchronization process for the 1st
segment of each Li. Thus, a new general Gi1 for the
synchronization of the 1st segment of each Li and its
wake-up signal for the 1st segment are generated at
time t = 3m − 2i − 1 for 1 ≤ i ≤ m.
•
Signal sH: The sH-signal travels along the 1st row
at 1/1-speed and reaches C1,n at time t = n − 1.
Then it reﬂects there and returns the same route at
1/2-speed. Each time it visits a cell of the 1st row
on its return way, it generates a general Gi3 at time
t = 2m + n − 2i − 1 to initiate a synchronization for
the 3rd segment on each Li, 1 ≤ i ≤ m.
•
Signal sD: The sD-signal travels along a diagonal line
by repeating a zig-zag movement: going one cell to the
right, then going down one cell. Each time it visits a
cell Ci,i on the diagonal, it marks a special symbol to
denote a delimiter between the 1st and 2nd segments.
The symbol on Ci,i is marked at time t = 2i − 2 for
any i, 1 ≤ i ≤ m. Note that the wake-up signal of the
1st segment of Lm knows its right end by the arrival
of sD-signal, where they meet at Cm,m at the very
time t = 2m − 2.
The wake-up signal generated by Gi1 reaches its right end
at time t = 3m − i − 2 and generates a new general Gi2
for the 2nd segment. The new general Gi2 generates a wake-
up signal. The wake-up signals for the 2nd and 3rd segments
of Li meet on Ci,n−m+i at time t = 2m + n − i − 2. The
collision of the two signals acts as a delimiter between the
2nd and 3rd segments in the case where m ≤ n. Note that
the synchronization operations on the 1st and 2nd segments
are started at the left end of each segment. On the other hand,
the synchronization on the 3rd segment is started at the right
(upper) end of the segment.
C. Synchronization of Lm
Now, we consider the synchronization on Lm. Fig. 5 (left)
shows a space-time diagram for synchronizing Lm. As was
mentioned in the previous subsection, the synchronization of
the 1st, 2nd and 3rd segments of Lm are started by the generals
Gm1, Gm2 and Gm3 at time t = m − 1, t = 2m − 2 and
t = n − 1, respectively. Each General always generates a
wake-up and a pre-thawing signal, each propagating at 1/1-
and 1/2-speed in the same direction. The wake-up signal wakes
up cells in the segment itself, however, the pre-thawing signal
22
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

generates a thawing signal at its neighboring segment that it
encounters ﬁrst. Precisely, the pre-thawing signal generated
by Gm1 reaches the left end of the 2nd segments at time
t = 3m − 3. In the case m ≤ n, the conﬁguration of the
2nd segment have not been frozen yet, and the signal doesn’t
work. The pre-thawing signal generated by Gm2 arrives at the
delimiter between the 2nd and 3rd segments at time t = 2n−2
and generates a thawing signal for the 3rd segment. In a similar
way, the pre-thawing signal generated by Gm3 initiates its
thawing operation for the 2nd segment at time t = 2m+n−2.
n
m
t=m-1
t=n-1
t=m+n-2
t=2m-2
t=m+2n-3
n-m
t=2n-2
1/1
1/2
1/2
1/2
1/1
1/1
1/1
1/1
m
m
n-m
G
t=2m+n-2
1/1
Sv
SH
SD
Δtm 1
Δtm 2
Δtm 3
m
m
t = 0
1/1
n-m
t = 3m-2i-1
t = m+2n-3
t = 2m+n-i-2
t = 2m+n-2
t = m+2n-i-2
i
i
t = n+2(m-i)-1
1/1
1/2
1/1
1/2
1/1
1/2
t = 3m-i-2
Δti 2
n
n-m
m
i
1/1
1/2
G
1/1
1/2
1/1
Sv
SH
SD
i
t = 0
Δti 1
Δti 3
Gi3
Gi2
Gi1
Gm3
Gm2
Gm1
Fig. 5.
Space-time diagram for synchronizing Lm (left) and Li (right).
At time t = 2m − 2, the wake-up signal of the 1st
segment reaches its right end and generates a freezing signal
for the segment. Simultaneously, it initiates synchronization
on the 2nd segments. The freezing signal for the 1st segment
propagates in left direction at 1/1-speed, and freezes the
conﬁguration on it. At time t = 2n − 2, a thawing signal is
generated at its right end, that is initiated by the arrival of the
freezing signal for the 2nd segment, which will be explained
again below. The wake-up signal for the 2nd and 3rd segments
meets Cm,n at time t = m+n−2, where Cm,n acts as an end
of the both two segments. A new freezing signal is generated
there for the 2nd and 3rd segments. It propagates in right
and left directions at 1/1-speed to freeze the synchronization
operations on the 2nd and 3rd segments, respectively. The
freezing signal for the 2nd segment reaches at its left end at
time t = 2n − 3, which generates a thawing signal for the
1st segment at time t = 2n − 2. The thawing signals for the
1st, 2nd and 3rd segments are generated at time t = 2n − 2,
t = 2m + n − 2 and t = 2n − 2, respectively. Synchronization
operations on jth (1 ≤ j ≤ 3) segment are delayed for Δtmj
steps such that:
Δtmj =
⎧
⎨
⎩
2(n − m)
j = 1
m
j = 2
n − m
j = 3
(2)
The synchronization for the 1st segment is started at time
t = m − 1 and its operations are delayed for Δt = Δtm1 =
2(n−m) steps. Now, letting t0 = m−1, Δt = Δtm1 = 2(n−
m) in Theorem 5, the 1st segment of Lm can be synchronized
at time t = t0 + 2m − 2 + Δt = m + 2n − 3 = m + n +
max(m, n)−3. In a similar way, the 2nd and the 3rd segments
can be synchronized at time t = m + 2n − 3 = m + n +
max(m, n) − 3. Thus, Lm can be synchronized at time t =
m + n + max(m, n) − 3.
D. Synchronization of Li
Now, we discuss the synchronization for Li, 1 ≤ i ≤ m.
Fig. 5 (right) shows a space-time diagram for synchronizing Li.
The wake-up signals for the three segments of Li are generated
at time t = m + 2(m − i) − 1, 3m − i − 2, and n + 2(m −
i) − 1, respectively. Generation of the corresponding freezing
and thawing signals are done in a similar way as employed in
Lm. Synchronization operations on jth (1 ≤ j ≤ 3) segment
are delayed for Δtij steps such that:
Δtij =
⎧
⎨
⎩
2(n − m)
j = 1
i
j = 2
n − m
j = 3
(3)
The synchronization for the 1st segment of Li is started at
time t = m + 2(m − i) − 1 and its operations are delayed for
Δt = Δti1 = 2(n − m) steps. Now, letting t0 = m + 2(m −
i) − 1, Δt = Δti1 = 2(n − m) in Theorem 5, the 1st segment
of Li can be synchronized at time t = t0 + 2i − 2 + Δt =
m + 2n − 3 = m + n + max(m, n) − 3. In a similar way,
the 2nd and the 3rd segments can be synchronized at time
t = m + 2n − 3 = m + n + max(m, n) − 3. Thus, Li can be
synchronized at time t = m + n + max(m, n) − 3.
E. Synchronization of rectangle longer than wide
In the case where m > n, a two-dimensional array of
size m × n is regarded as consisting of n rotated L-shaped
arrays. Segmentation and synchronization operations on each
L-shaped array can be done almost in a similar way. It is noted
that the right end cell of the 2nd segment works as a General
for the 2nd segment. Any rectangle of size m × n can be
synchronized at time t = 2m+n−3 = m+n+max(m, n)−3.
Step:0
1
2
3
4
5
6
7
8
1
G
S
S
S
S
S
S
S
2
S
S
S
S
S
S
S
S
3
S
S
S
S
S
S
S
S
4
S
S
S
S
S
S
S
S
5
S
S
S
S
S
S
S
S
Step:1
1
2
3
4
5
6
7
8
1
XY
X
S
S
S
S
S
S
2
Y
S
S
S
S
S
S
S
3
S
S
S
S
S
S
S
S
4
S
S
S
S
S
S
S
S
5
S
S
S
S
S
S
S
S
Step:2
1
2
3
4
5
6
7
8
1
XY
X
X
S
S
S
S
S
2
Y
XY
S
S
S
S
S
S
3
Y
S
S
S
S
S
S
S
4
S
S
S
S
S
S
S
S
5
S
S
S
S
S
S
S
S
Step:3
1
2
3
4
5
6
7
8
1
XY
X
X
X
S
S
S
S
2
Y
XY
X
S
S
S
S
S
3
Y
Y
S
S
S
S
S
S
4
Y
S
S
S
S
S
S
S
5
S
S
S
S
S
S
S
S
Step:4
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
S
S
S
2
Y
XY
X
S
S
S
S
S
3
Y
Y
XY
S
S
S
S
S
4
Y
S
S
S
S
S
S
S
5
T61
S
S
S
S
S
S
S
Step:5
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X
S
S
2
Y
XY
X
S
S
S
S
S
3
Y
Y
XY
X
S
S
S
S
4
Y1
S
Y
S
S
S
S
S
5
T62
TR
S
S
S
S
S
S
Step:6
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X
X
S
2
Y
XY
X
S
S
S
S
S
3
Y
Y
XY
X
S
S
S
S
4
T61
S
Y
XY
S
S
S
S
5
T6
TR1
T6
S
S
S
S
S
Step:7
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X
X
Y61
2
Y
XY
X
S
S
S
S
S
3
Y1
Y
XY
X
S
S
S
S
4
T62
TR
Y
XY
X
S
S
S
5
T6
TR2
T_
TR
S
S
S
S
Step:8
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X
X1
Y62
2
Y
XY
X
S
S
S
S
YR
3
T61
S
XY
X
S
S
S
S
4
T6
TR1
T6
XY
X
S
S
S
5
T6
TR
T_1
TS
T11
S
S
S
Step:9
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X
Y61
Y6
2
Y1
XY
X
S
S
S
S
YR1
3
T62
TR
XY
X
S
S
S
Y6
4
T6
TR2
T_
T71
S
S
S
S
5
T6
TR
T62
T_
T12
TRQ
S
S
Step:10
1
2
3
4
5
6
7
8
1
XY
X
X
X
X
X1
Y62
Y6
2
T61
XY
X
S
S
S
YR
YR2
3
T6
TR1
T11
S
S
S
S
Y_
4
T6
TR
T_1
T72
TRQ
S
S
YR
5
T6
TR
T6
T_1
T1
TR1
T6Q
S
Step:11
1
2
3
4
5
6
7
8
1
Y1
X
X
X
X
Y61
Y6
Y6
2
T62
T71
S
S
S
S
YR1
YR
3
T6
TR2
T12
TRQ
S
S
Y6
Y_1
4
T6
TR
T_2
T7
TR1
T6Q
S
S
5
T6
TR
T6
T_2
T1
TR2
T_
4L
Step:12
1
2
3
4
5
6
7
8
1
T6
S
X
X
X1
Y62
Y6
Y6
2
T6
T72
TRQ
S
S
YR
YR2
YR
3
T6
TR
T1
TR1
T6Q
S
Y_
Y62
4
T6
TR
T_
T7
TR2
T_
44
Y_
5
T6
TR
T6
T_
T1
TR
T_1R
4L
Step:13
1
2
3
4
5
6
7
8
1
T6
TR
X
X
Y61
Y6
Y6
Y6
2
T6
T7
TR1
T6Q
S
YR1
YR
YR
3
T6
TR
T1
TR2
T_
4L
Y_1
Y6
4
T6
TR
T_
T7
TR
T_1R
44
Y_1
5
T6
TR
T6
T_
T1
TRR
T_2
L6
Step:14
1
2
3
4
5
6
7
8
1
T6
TR
T6
Y1
Y62
Y6
Y6
Y6
2
T6
T7
TR2
T_
44
YR2
YR
YR
3
T6
TR
T1
TR
T_1R
4L
Y_2
Y6
4
T6
TR
T_
T7
TRR
T_2
44
Y_2
5
T6
TR
T6
T_
T1K
TR
T_
L6K_
Step:15
1
2
3
4
5
6
7
8
1
T6
TR
T_
4L_K
Y6
Y6
Y6
Y6
2
T6
T7
TR
T_1R 44k_
YR
YR
YR
3
T6
TR
T1
TRR
T_2
4Lk_
Y_
Y6
4
T6
TR
T_
TLk
TR
T_
44KK
Y4
5
T6
TR
T6
T4
T1K
TR
T_
L6KK
Step:16
1
2
3
4
5
6
7
8
1
T6
TR
TL
4Lk_
Y6
Y6
Y6
Y6
2
T6
T7
TRR
TL2
44k_
YR
YR
YR
3
T6
TR
T1K
TR
TL
4LKK
YL
YL
4
T6
TR
TL
TLk
TR
TL
44KK
YR
5
T6
TR
TL
TR
T1K
TR
TL
4LKK
Step:17
1
2
3
4
5
6
7
8
1
T6
T4
T6
4LKK
Y6
Y6
Y6
Y6
2
T6
TLk
T4
T6
44FF
Y4
Y4
Y4
3
T6
T4
T1F
T4
T6
4LKK
Y6
Y6
4
T6
T4
T6
TLk
T4
T6
44FF
Y4
5
T6
T4
T6
T4
T1F
T4
T6
4LKK
Step:18
1
2
3
4
5
6
7
8
1
F
F
F
F
F
F
F
F
2
F
F
F
F
F
F
F
F
3
F
F
F
F
F
F
F
F
4
F
F
F
F
F
F
F
F
5
F
F
F
F
F
F
F
F
Fig. 6.
Snapshots of the synchronization process on 5 × 8 array.
Fig. 6 shows some snapshots of the synchronization process
operating in optimum-steps on a 5 × 8 array. Now, we can
establish the next theorem.
Theorem 6 The algorithm A2 can synchronize any m × n
rectangular array in optimum m + n + max(m, n) − 3 steps.
V.
ALGORITHM A3
In this section, we develop a new minimum-time ﬁring
squad synchronization algorithm A3 based on a new L-shaped
mapping. The overview of the algorithm A3 is as follows:
23
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

1)
A 2D array of size m × n is regarded as min(m, n)
rotated or mirrored L-shaped 1-D arrays, each con-
sisting of a horizontal and a vertical segment.
2)
The shorter segment is synchronized by the freezing-
thawing technique with Δt =| m − n | steps delay.
The longer one is synchronized in the usual way
without using the freezing-thawing technique.
3)
All of the L-shaped arrays fall into a special ﬁring
(synchronization) state simultaneously and for the
ﬁrst time.
A. Segmentation of rectangular array of size m × n
First, we consider the case where m ≤ n. We assume that
the initial general G is on the north-west corner denoted by •
in Fig. 7. We regard a two-dimensional array of size m × n
as consisting of m rotated (90◦ in counterclockwise direction)
L-shaped one-dimensional arrays. Each bending point of the
L-shaped array is the farthest one from the general. Each L-
shaped array is denoted by Li, 1 ≤ i ≤ m, shown in Fig. 7.
Each Li is divided into two segments, that is, one horizontal
and one vertical segment, each referred to as 1st and 2nd
segments. The length of each segment of Li is n − m + i
and i, respectively.
n
m
L1
L2
Lm
Li
. .
. . . . . .
.
.
. . . .
.
.
. . .
1st segment 
.
.
G.
SH
SV
SD
2nd segment 
Fig. 7.
A 2D array of size m × n (m ≤ n) is regarded as consisting
of m rotated (90◦ in counterclockwise direction) L-shaped 1-D arrays. Each
L-shaped array is divided into two segments.
B. Starting the synchronization process
At time t = 0, a two-dimensional array M has a general
at C1,1 and any other cells of the array are in quiescent
state. The general G (denoted by • in Fig. 7) generates three
signals sV , sD and sH, simultaneously, each propagating at
1/1-speed in the vertical, diagonal and horizontal directions,
respectively. See Fig. 3. The sV - and sH-signals work for
generating wake-up signals for the 1st and 2nd segments on
each L-shaped array. The sD-signal is used for printing a
special marker ”■” for generating a thawing signal that thaws
frozen conﬁgurations on shorter segment. Their operations are
as follows:
•
Signal sV :
The sV -signal travels along the 1st
column and reaches Cm,1 at time t = m − 1. Then, it
returns there and begins to travel again at 1/2-speed
along the 1st column towards C1,1. On the return’s
way, the signal initiates the synchronization process
for the 1st segment of each Li. Thus, a new general
Gi1 for the synchronization of the 1st segment of each
Li is generated, together with its wake-up signal, at
time t = 3m − 2i − 1 for 1 ≤ i ≤ m.
•
Signal sD:
The sD-signal travels along a principal
diagonal line by repeating a zigzag movement: going
one cell to the right, then going down one cell. Each
time it visits cell Ci,i on the diagonal, it marks a
special symbol ”■” to inform the wake-up signal on
the segment of the position where a thawing signal
is generated for the neighboring shorter segment. The
symbol on Cii is marked at time t = 2i − 2 for any
i, 1 ≤ i ≤ m. Note that the wake-up signal of the 1st
segment of Lm knows the right position by the arrival
of the sD-signal, where they meet at Cm,m at the very
time t = 2m − 2.
•
Signal sH:
The sH-signal travels along the 1st row
at 1/1-speed and reaches C1,n at time t = n − 1.
Then it reﬂects there and returns the same route at
1/2-speed. Each time it visits a cell of the 1st row
on its return way, it generates a general Gi2 at time
t = 2m + n − 2i − 1 to initiate a synchronization for
the 2nd segment on each Li, 1 ≤ i ≤ m.
n
m
t = m-1
t = n-1
t = m+n-2
t = 2m-2
t = m+2n-3
n-m
t = 2n-2
1/2
1/1
1/1
1/1
m
m
n-m
G
t = 2m+n-2
1/1
Sv
SH
SD
Δtm 
m
m
t = 0
1/1
n-m
t = 3m-2i-1
t = m+2n-3
t = 2m+n-i-2
t = 2m+n-2
t = m+2n-i-2
i
i
t = n+2(m-i)-1
1/1
1/2
1/1
t = 3m-i-2
Δti 
n
n-m
m
i
1/1
1/2
G
1/1
1/2
1/1
Sv
SH
SD
i
t = 0
Gi2
Gi1
Gm2
Gm1
Gm1
Gm2
Fig. 8.
Space-time diagram for synchronizing Lm (left) and Li (right).
The wake-up signals for the 1st and 2nd segments of Li
meet on Ci,n−m+i at time t = 2m + n − i − 2. The collision
of the two signals acts as a delimiter between the 1st and 2nd
segments. Note that the synchronization operations on the 1st
segment are started at the left end of the segment. On the other
hand, the synchronization on the 2nd segment is started at the
right (upper) end of the segment. The wake-up signal generated
by Gi1 reaches a cell where the special mark is printed at time
t = 3m − i − 2 and generates a thawing signal which travels
at 1/2-speed along the 1st segment to thaw the conﬁguration
on the 2nd segment.
C. Synchronization of Lm
Now, we consider the synchronization on Lm. Fig. 8 (left)
shows a space-time diagram for synchronizing Lm. As was
mentioned in the previous subsection, the synchronization of
the 1st and 2nd segments of Lm are started by the generals
Gm1 and Gm2 at time t = m − 1 and t = n − 1, respectively.
Each general generates a wake-up signal propagating at 1/1-
speed. The wake-up signal for the 1st and 2nd segments meets
Cmn at time t = m + n − 2, where Cm,n acts as an end
of the both two segments. A freezing signal is generated
simultaneously there for the 2nd segment at time t = m+n−2.
It propagates in upper (right in Fig. 8 (left)) direction at 1/1-
speed to freeze the synchronization operations on the 2nd
segment. At time t = 2m − 2, the wake-up signal of the 1st
segment reaches the symbol ”■” and generates a thawing signal
for the 2nd segment. The thawing signal starts to propagate
from the cell at 1/2-speed in the same direction. Those two
signals reach at the left end of the 2nd segment with time
difference n − m which is equal to the delay for the 2nd
segment. The synchronization for the 1st segment is started
24
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

at time t = m − 1 and it can be synchronized at time
t = m + 2n − 3 = m + n + max(m, n) − 3 by the usual way.
On the other hand, the synchronization for the 2nd segment is
started at time t = n − 1 and its operations are delayed for
Δt = Δtm = n−m steps. Now, letting t0 = n−1, Δt = n−m
in Theorem 1, the 2nd segment of length m on Lm can be
synchronized at time t = t0 + 2m − 2 + Δt = m + 2n − 3 =
m + n + max(m, n) − 3. Thus, Lm can be synchronized at
time t = m + n + max(m, n) − 3.
D. Synchronization of Li
Now, we discuss the synchronization for Li, 1 ≤ i ≤ m.
Fig. 8 (right) shows a space-time diagram for synchronizing Li.
The wake-up signals for the two segments of Li are generated
at time t = 3m − 2i − 1 and n + 2(m − i) − 1, respectively.
Generation of freezing and thawing signals is done in a
similar way as employed in Lm. Synchronization operations
on the 2nd segment are delayed for Δti = n − m steps. The
synchronization for the 1st segment of length n − m + i is
started at time t = 3m−2i−1 and it can be synchronized by a
usual method at time t = m+2n−3 = m+n+max(m, n)−3.
On the other hand, the synchronization for the 2nd segment
is started at time t = n + 2(m − i) − 1 and its operations
are delayed for Δt = Δti = n − m steps. Now, letting
t0 = n + 2(m − i) − 1, Δt = n − m in Theorem 5, the
2nd segment of length i of Li can be synchronized at time t =
t0+2i−2+Δt = m+2n−3 = m+n+max(m, n)−3. Thus,
Li can be synchronized at time t = m + n + max(m, n) − 3.
E. Synchronization of rectangle longer than wide
In the case where m > n, a two-dimensional array of
size m × n is regarded as consisting of n mirrored L-shaped
arrays. Segmentation and synchronization operations on each
L-shaped array can be done almost in a similar way. It is noted
that the thawing signal is generated on the 2nd segment to
thaw frozen conﬁgurations on the 1st segment. Any rectangle
of size m × n can be synchronized at time t = 2m + n − 3 =
m + n + max(m, n) − 3.
One notes that the algorithm needs no a priori knowledge
on side length of a given rectangle, that is, whether wider than
long or longer than wide. Fig. 9 shows some snapshots of the
synchronization process operating in optimum-steps on a 6×9
arrays. Now, we can establish the next theorem.
Theorem 7 The synchronization algorithm A3 can synchronize
any m×n rectangular array in optimum m+n+max(m, n)−3
steps.
VI.
CONCLUSION AND FUTURE WORK
In the present paper, we gave a survey on recent develop-
ments in FSSP algorithms for 2D cellular arrays. We focused
our attention on a new class of the 2D minimum-time FSSP
algorithms based on L-shaped mapping. It is shown that the L-
shaped mapping presents a rich variety of 2D minimum-time
FSSP algorithms. As a future work, the mapping could be
applied to the design of 3D minimum-time FSSP algorithms.
The procedure would be as follows: First, a 2D version of the
freezing-thawing technique has to be developed. Secondary,
decompose a given 3D array into many thin layers, each
consisting of three 2D faces. Last, apply the minimum-time
2D FSSP algorithm developed in this paper to each face.
t = 0
1
2
3
4
5
6
7
8
9
1
G
Q
Q
Q
Q
Q
Q
Q
Q
2
Q
Q
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
Q
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
Q
Q
Q
Q
Q
Q
Q
Q
Q
t = 1
1
2
3
4
5
6
7
8
9
1
C
B
Q
Q
Q
Q
Q
Q
Q
2
A
Q
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
Q
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
Q
Q
Q
Q
Q
Q
Q
Q
Q
t = 2
1
2
3
4
5
6
7
8
9
1
C
Q
B2
Q
Q
Q
Q
Q
Q
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
A2
Q
Q
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
Q
Q
Q
Q
Q
Q
Q
Q
Q
t = 3
1
2
3
4
5
6
7
8
9
1
C
Q
Q
B
Q
Q
Q
Q
Q
2
Q
C
R
Q
Q
Q
Q
Q
Q
3
Q
L
Q
Q
Q
Q
Q
Q
Q
4
A
Q
Q
Q
Q
Q
Q
Q
Q
5
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
Q
Q
Q
Q
Q
Q
Q
Q
Q
t = 4
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
B2
Q
Q
Q
Q
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
C
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
A2
Q
Q
Q
Q
Q
Q
Q
Q
6
Q
Q
Q
Q
Q
Q
Q
Q
Q
t = 5
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
B
Q
Q
Q
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
C
R
Q
Q
Q
Q
Q
4
Q
Q
L
Q
Q
Q
Q
Q
Q
5
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
>1a
Q
Q
Q
Q
Q
Q
Q
Q
t = 6
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
B2
Q
Q
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
C
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
C
Q
Q
Q
Q
Q
5
A
Q
Q
Q
Q
Q
Q
Q
Q
6
>1a
]1a
Q
Q
Q
Q
Q
Q
Q
t = 7
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
Q
B
Q
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
C
Q
Q
Q
Q
Q
Q
4
Q
Q
Q
C
R
Q
Q
Q
Q
5
>1a
Q
Q
L
Q
Q
Q
Q
Q
6
>1a
]1a
>1a
Q
Q
Q
Q
Q
Q
t = 8
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
Q
Q
>2a
2
Q
C
Q
Q
Q
Q
Q
Q
Q
3
Q
Q
C
Q
Q
Q
Q
Q
Q
4
A
Q
Q
C
Q
Q
Q
Q
Q
5
>1a
]1a
Q
Q
C
Q
Q
Q
Q
6
>1a
]1a
^1a
]1a
Q
Q
Q
Q
Q
t = 9
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
Q
B
>2a
2
Q
C
Q
Q
Q
Q
Q
Q
]2a
3
Q
Q
C
Q
Q
Q
Q
Q
Q
4
>1a
Q
Q
C
Q
Q
Q
Q
Q
5
>1a
]1a
>1a
Q
C
R
Q
Q
Q
6
>1a
]1a
^1a
/1a >1aL
Q
Q
Q
Q
t = 10
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
Q
>2a
>2a
2
Q
C
Q
Q
Q
Q
Q
Q
]2a
3
A
Q
C
Q
Q
Q
Q
Q
>2a
4
>1a
]1a
Q
C
Q
Q
Q
Q
Q
5
>1a
]1a
^1a
]1a
C
Q
Q
Q
Q
6
>1a
]1a
>1a
^1a
^1a ]1aC+
Q
Q
Q
t = 11
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
B
>2a
>2a
2
Q
C
Q
Q
Q
Q
Q
]2a
]2a
3
>1a
Q
C
Q
Q
Q
Q
Q
^2a
4
>1a
]1a
>1a
C
Q
Q
Q
Q
]2a
5
>1a
]1a
^1a
/1a >1aC+ Q
Q
Q
Q
6
>1a
]1a
>1a
^1a
^1a /1a+2 >1aC
Q
Q
t = 12
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
Q
>2a
>2a
>2a
2
A
C
Q
Q
Q
Q
Q
]2a
]2a
3
>1a
]1a
C
Q
Q
Q
Q
>2a
^2a
4
>1a
]1a
^1a ]1aC+
Q
Q
Q
Q
/2a
5
>1a
]1a
>1a
^1a ^1a+2 ]1aC
Q
Q
>2a
6
>1a
]1a
>1a
^1a
/1a
^1a ^1a+ ]1aC
Q
t = 13
1
2
3
4
5
6
7
8
9
1
C
Q
Q
Q
Q
B
>2a
>2a
>2a
2
>1a
C
Q
Q
Q
Q
]2a
]2a
]2a
3
>1a
]1a >1aC+ Q
Q
Q
Q
^2a
>2a
4
>1a
]1a
^1a /1a+2 >1aC
Q
Q
]2a
^2a
5
>1a
]1a
>1a
^1a
^1a /1a+ >1aC
Q
^2a
6
>1a
]1a
>1a
]1a
^1a
^1a ^1a+2 /1a
[12a
t = 14
1
2
3
4
5
6
7
8
9
1
A
Q
Q
Q
Q
>2a
>2a
>2a
>2a
2
>1a ]1aC+
Q
Q
Q
Q
]2a
]2a
]2a
3
>1a
]1a ^1a+2 ]1aC
Q
Q
>2a
^2a
>2a
4
>1a
]1a
>1a
^1a ^1a+ ]1aC
Q
/2a
^2a
5
>1a
]1a
>1a
^1a
/1a ^1a+2 ^1a <12a c^2a
6
>1a
]1a
^1a
]1a
^1a
^1a
/1a <1a+ [12a
t = 15
1
2
3
4
5
6
7
8
9
1
>1aC+ Q
Q
Q
B
>2a
>2a
>2a
>2a
2
>1a ]1a+2 >1aC
Q
Q
]2a
]2a
]2a
]2a
3
>1a
]1a
^1a /1a+ >1aC
Q
^2a
>2a
>2a
4
>1a
]1a
>1a
^1a ^1a+2 /1a
[12a c/2a c^2a
5
>1a
]1a
>1a
]1a
^1a
^1a [1a+ <12a c^2a
6
>1a
]1a
^1a
]1a
^1a
/1a
[1a <1a+2 [12a
t = 16
1
2
3
4
5
6
7
8
9
1
>1a+2 ]1aC
Q
Q
>2a
>2a
>2a
>2a
>2a
2
>1a
]1a ^1a+ ]1aC
Q
]2a
]2a
]2a
]2a
3
>1a
]1a
>1a ^1a+2 ^1a <12a c^2a c>2a c>2a
4
>1a
]1a
>1a
^1a
/1a <1a+ [12a c/2a c^2a
5
>1a
]1a
^1a
]1a
^1a
<1a [1a+2 <12a c^2a
6
>1a
]1a
^1a
]1a
>1a
<1a
[1a
/1a [12a+
t = 17
1
2
3
4
5
6
7
8
9
1
>1a ]1a+ >1aC
B
>2a
>2a
>2a
>2a
>2a
2
>1a
]1a ^1a+2 /1a
[12a c]2a c]2a c]2a c]2a
3
>1a
]1a
>1a
^1a [1a+ <12a c^2a c>2a c>2a
4
>1a
]1a
>1a
]1a
[1a <1a+2 [12a c/2a c^2a
5
>1a
]1a
^1a
]1a
[1a
/1a
[1a <12a+ [2a
6
>1a
]1a
^1a
/1a
[1a
]1a
^1a
/1a
[12a
t = 18
1
2
3
4
5
6
7
8
9
1
>1a ]1a+2 ^1a <12a c>2a c>2a c>2a c>2a c>2a
2
>1a
]1a
>1a <1a+ [12a c]2a c]2a c]2a c]2a
3
>1a
]1a
>1a
<1a [1a+2 <12a c^2a c>2a c>2a
4
>1a
]1a
^1a
<1a
>1a
/1a [12a+ <2a
<2a
5
>1a
]1a
^1a
<1a
>1a
/1a
[1a
<12a
[2a
6
>1a
]1a
>1a
<1a
[1a
]1a
>1a
<1a
[12a
t = 19
1
2
3
4
5
6
7
8
9
1
>1a
]1a
[1a+ <12a c>2a c>2a c>2a c>2a c>2a
2
>1a
]1a
[1a ]1a+2 [12a c]2a c]2a c]2a c]2a
3
>1a
]1a
[1a
]1a
[1a <12a+ [2a
[2a
[2a
4
>1a
]1a
[1a
<1a
>1a
]1a
[12a
]2a
]2a
5
>1a
]1a
[1a
<1a
>1a
]1a
[1a
<12a
[2a
6
>1a
]1a
[1a
]1a
[1a
]1a
[1a
]1a
[12a
t = 20
1
2
3
4
5
6
7
8
9
1
>1a
<1a >1a+2<12a c>2a c>2a c>2a c>2a c>2a
2
>1a
<1a
>1a
<1a >12a+ <2a
<2a
<2a
<2a
3
>1a
<1a
>1a
<1a
>1a <12a >2a
>2a
>2a
4
>1a
<1a
>1a
<1a
>1a
<1a >12a <2a
<2a
5
>1a
<1a
>1a
<1a
>1a
<1a
>1a <12a >2a
6
>1a
<1a
>1a
<1a
>1a
<1a
>1a
<1a >12a
t = 21
1
2
3
4
5
6
7
8
9
1
F
F
F
F
F
F
F
F
F
2
F
F
F
F
F
F
F
F
F
3
F
F
F
F
F
F
F
F
F
4
F
F
F
F
F
F
F
F
F
5
F
F
F
F
F
F
F
F
F
6
F
F
F
F
F
F
F
F
F
Fig. 9.
Snapshots of the synchronization process on 6 × 9 array.
REFERENCES
[1]
W. T. Beyer, ”Recognition of topological invariants by iterative arrays.” Ph.D.
Thesis, MIT, (1969), pp. 144.
[2]
E. F. Moore, ”The ﬁring squad synchronization problem.” In Sequential Machines,
Selected Papers (E. F. Moore, ed.), Addison-Wesley, Reading MA., pp. 213-
214(1964).
[3]
F. R. Moore and G. G. Langdon, ”A generalized ﬁring squad problem.” Informa-
tion and Control, 12, pp.212-220(1968).
[4]
I. Shinahr, ”Two- and three-dimensional ﬁring squad synchronization problems.”
Information and Control, vol. 24, pp. 163-180(1974).
[5]
H. Umeo, ”A simple design of time-efﬁcient ﬁring squad synchronization al-
gorithms with fault-tolerance.” IEICE Trans. on Information and Systems, Vol.
E87-D, No.3, pp.733-739(2004).
[6]
H. Umeo, ”Firing squad synchronization problem in cellular automata.” In
Encyclopedia of Complexity and System Science, R. A. Meyers (Ed.), Springer,
Vol.4, pp. 3537-3574(2009).
[7]
H. Umeo, K. Ishida, K. Tachibana, and N. Kamikawa, ”A transition rule set for the
ﬁrst 2-D optimum-time synchronization algorithm.” Proc. of the 4th International
Workshop on Natural Computing, PICT 2, Springer, pp.333-341(2009).
[8]
H. Umeo, N. Kamikawa, K. Nishioka, and S. Akiguchi, ”Generalized ﬁring squad
synchronization protocols for one-dimensional cellular automata - a survey.” Acta
Physica Polonica B, Proceedings Supplement. Vol.3, pp.267-289(2010).
[9]
H. Umeo and H. Uchino, ”A new time-optimum synchronization algorithm for
rectangle arrays.” Fundamenta Informaticae, Vol.87, No.2, pp.155-164(2008).
25
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-530-2
FUTURE COMPUTING 2017 : The Ninth International Conference on Future Computational Technologies and Applications

