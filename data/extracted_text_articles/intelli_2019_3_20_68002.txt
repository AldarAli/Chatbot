Path Planning for an Industrial Robotic Arm
Zahid Iqbal, Jo˜ao Reis, Gil Gonc¸alves
SYSTEC, Research Center for Systems and Technologies
Faculty of Engineering, University of Porto
Rua Dr. Roberto Frias, 4200-465 Porto, Portugal
Email: {zahid,jpcreis,gil} @fe.up.pt
Abstract—Enabling humans and robots to work together in
modern industrial environments can increase production volumes
and reduce costs. However, a robot must be equipped to perceive
humans and redirect its actions under hazardous events or
for cooperative tasks. Thus, dealing with dynamic obstacles
appears as an essential exercise. This work presents a motion
planning algorithm for robots based on Probabilistic Road Maps
(PRM). For efﬁcient nearest neighbour search, we use kd-trees
in learning and query phases of the algorithm. We construct
the roadmap as an undirected graph in the free space. We
implement the method for a simple conﬁguration space in R2
and a point robot is considered to navigate between given initial
and goal conﬁgurations added to the roadmap, all speciﬁed in
two dimensions. We use Euclidean distance when ﬁnding the
closest neighbours. The shortest path between the start and goal
conﬁgurations is found using Dijkstra’s algorithm. The method
is easy to implement. After the learning phase, the method can
answer multiple queries. We propose to use this method in
combination with a labelled voxel-based grid for solving multiple
path planning queries efﬁciently.
Keywords–sampling-based planning, conﬁguration space, grid-
based search, kd trees, PRMs
I.
INTRODUCTION
Today, standard industrial practices use robots for improv-
ing production volumes, bringing down production costs, and
for better precision and accuracy of the production process.
Additionally, as robots capabilities increase, they can take on
jobs that might be impossible or dangerous for humans [2]. To
ensure safety, typical assembly environments within industries
conﬁne robots to separate operation spaces isolated from hu-
man workers. Such a setting, on the one hand, incurs signiﬁcant
space and installation costs, and on the other, loses cooperation
opportunity with humans. Such systems frequently bring robot
operation to a halt if a human entered its operational area [3].
However, with technical progress and to realize their full
potential, it became common to put robots in more open
unstructured environments. Such environments can leverage
the beneﬁts of cooperation by assigning speciﬁc production
tasks to robot and humans. Moving from a highly structured
to an unstructured environment poses several challenges for
motion planning, an important one being that robot can only
possess a partial knowledge of its surroundings [4]. Most plan-
ners assume that manipulator operates in a static environment.
However, for many situations, such as the collaborative envi-
ronment where humans work in proximity to the manipulator,
the robot must account for dynamic environments. For such
environments, we need methods with two goals; ﬁrstly, to avoid
collision of robots with foreign objects (environment obstacles
and humans) and secondly, with the ability to detect potential
collisions in advance.
The work presented in this paper concerns the ﬁrst goal,
i.e., obstacle avoidance for an industrial robotic arm or so-
called manipulator. Mounted on a stationary platform, its links
with revolute joints and end-effector can move with a certain
degree of freedom. The solution deals with forward and inverse
kinematics of the robotic arm. With forward kinematics, we
aim to calculate the end-effector pose from the position of
joints. Inverse kinematics deals with the opposite problem;
given the position of the end-effector in the conﬁguration
space, we must work out the angles that each joint should have
to reach that conﬁguration. Given a robot with a description of
its kinematics, a description of the environment (representation
of free and occupied spaces), an initial state, and a goal state,
the motion planning problem is to ﬁnd a sequence of inputs
that drive the robot from its initial state to the goal state while
obeying the rules of the environment, e.g., not colliding with
the surrounding obstacles (Figure 1). The manipulator will
follow this path to reach the goal position. This work, however,
explores the idea for static scenario and later we develop it for
the dynamic case.
We follow a sampling-based path planning approach called
Probabilistic Roadmap Planner (PRM) [5]. The method ran-
domly samples conﬁgurations from the conﬁguration space of
the manipulator. Following this, it builds a roadmap graph of
free space. Finally, it connects the initial and goal conﬁgura-
tions to this roadmap and ﬁnds the shortest path from the start
to the target using some standard algorithms such as A* [6]
or Dijkstra’s algorithm [7].
Our work is in the context of the project INDTECH 4.0 [8],
which aims at developing new technologies for intelligent
manufacturing such as Collaborative Robotics, Autonomous
Drive Systems, Decision Support Systems (DSS). In the lines
of INDTECH 4.0, different works have focused on these ar-
eas [9][10][11][12]. Reusable software components are major
building blocks for modern Cyber-Physical Systems (CPS),
efﬁciently managing the complexity by supporting modular de-
velopment and composability. Neto and Gonc¸alves [9] studies
component models for many industrial CPS for understanding
design choices and application targets, and Neto et al. [10]
designs a component framework following component-based
software engineering principles. Reis et al. [11] demonstrates
a collaboration scenario between human and a simple robotic
manipulator in the context of Cyber-Physical Production Sys-
tems (CPPS).
The rest of the paper is organized as follows. In Sec-
30
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

Path 
Planner
collision-free 
path
environment model 
robot kinematics
initial and goal 
configurations
Figure 1: Robot motion planner, a top-level view.
tion II, we present some concepts and background important
to the work. Section III lists some works regarding robotics
path planning. Section IV presents the developed approach
as well as some preliminary evaluation. In Section V, we
propose a path planning architecture based on a voxelized
grid. Section VI discusses merits and potential of the proposed
approach. Finally in Section VII, we conclude the paper and
present some future work directions.
II.
BACKGROUND AND CONCEPTS
Fundamental to the path planning problem is the concept
of conﬁguration and conﬁguration space. The conﬁguration of
a robot is a set of independent parameters that characterize
the position of every point in the object whereas conﬁguration
space (denoted C) is the space of all possible placements
of the moving object, i.e., space of all conﬁgurations [13].
It is important to distinguish between work space and the
conﬁguration space. work space represents the actual envi-
ronment or the world where the manipulator and the obstacles
exist; conﬁguration space is the representation of the work
space that we use in our implementations to aid the path
planning solutions. In the following, we review two common
approaches for path planning, namely, conﬁguration space-
based and sampling-based approach.
A. Path planning - conﬁguration space approach
In order to ﬁnd a trajectory in the conﬁguration space C,
the main difﬁculty lies in the high computation complexity
in constructing C. The dimension of the conﬁguration space
is determined by the degrees of freedom of the robot. A
conﬁguration q is given as a vector of robot joint values.
For instance, a robotic arm with six revolute joints has six
degrees of freedom and its conﬁguration is denoted q =
⟨q1, q2, q3, q4, q5, q6⟩ where qi denotes ith joint angle. The
conﬁguration space C is a space of these conﬁgurations, i.e.,
for 6 dimensions, we have C = R6. Any path ﬁnding strategy
places conﬁgurations in C into two categories, those that are
free Cfree, and others that are in collision Cforb, i.e., occupied
by obstacles. A conﬁguration q ∈ Cfree if the robot placed
at q does not intersect with work space obstacles. A path is
a continuous sequence of conﬁgurations in Cfree connecting
initial and goal conﬁgurations. Constructing C entails creating
a map of C such that collision regions can be identiﬁed. One
way is to discretize C and test each discretized conﬁguration
if it is collision-free. The resolution or granularity of the
discretized C has a signiﬁcant impact on the performance of
path ﬁnding algorithm. A ﬁne resolution will increase the
search space as well as computation time whereas a coarse
resolution might miss a valid path when there exists one. We
illustrate this with an example of a robot manipulator with
six revolute joints and each joint can rotate between −180◦
to 180◦. With a discretization resolution of 1◦, size of C is
3606 ≈ 2.18 × 1015 points. Thus, it leads to a huge search
space when explicitly constructing collision regions in C.
B. Sample-based planning
To avoid the great computational complexity and the state
explosion problem, motion planning algorithms often employ
sampling-based planning together with a collision detection
module. Such methods ﬁrst generate a roadmap representing
connectivity of C and later path search requests are processed
on this roadmap. Sampling based planners can often create
plans in high-dimensional spaces efﬁciently.
Approaches to the path planning problem can be divided
into two classes single-query and multiple-query planning. For
single-query planning, a one-time solution to a unique problem
is deﬁned, without preprocessing. Multiple-query planning
applies to cases where we need to solve different problems
for the same environment. Thus, such approaches form a map
of the workspace, and then, multiple queries are issued at
runtime to ﬁnd trajectories in that map. The problems relating
to dynamic environments ﬁt into the class of single-query
planners.
C. kd-trees
Initially examined in [14], a kd-tree is a data structure
for storing and searching ﬁnite points in a k-dimensional
space. Each node represents a subset of the dataset as well as
partitioning of the subset. Each leaf node is a k-dimensional
point. Each non-leaf node generates an implicit hyperplane
splitting the space into two halves. Alike a binary tree, values
to the left of the hyperplane are less than or equal to the value
at the parent and constitute the left sub-tree, while values to
the right of the hyperplane are larger and form the right sub-
tree. Further, any node is assigned to one of the k dimensions
with hyperplane perpendicular to that dimension’s axis. The
splitting dimension for each node is selected based on its level
in the tree; we obtain the splitting axis for each level by cycling
through the k dimensions in order, given by the following rule,
D = L mod k + 1 where D is the splitting axis for level L
and the root is deﬁned to be at level zero [14].
Nearest neighbour search is an essential component of
many path planning strategies. Some approaches generate
thousand of vertices; ﬁnding closest vertices to connect to in
huge search space is a challenging task. kd-trees can efﬁciently
aid the nearest neighbour search by quickly eliminating large
portions of the search space. Partitioning strategy in k-d trees
allows keeping the average number of examinations small
when searching for the best matches to a query item. For the
experimental exercise reported in this paper, we naively use
kd-trees, i.e. based on Euclidean distance. However, Yershova
and LaValle [15] shows that the distance metric can be tailored
to account for complex spaces encountered in motion planning
scenarios.
III.
RELATED WORK
In the past years, much research has focused on path
planning for industrial robots. A fundamental robotic task
is to navigate from an initial position to a goal position
while avoiding the set of obstacles. The developed approaches
encompass static scenarios with ﬁxed operational space of
robot or dynamic situations where humans or obstacles can
31
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

move in the functional area of the robot. Other classiﬁcations
include conﬁguration space approaches vs the random sam-
pling approaches, or single query based planners vs multiple-
query based planners. For a detailed review of different path
planning approaches, refer [16]. Below, we describe a few
basic methods and some works that employ these approaches
to solve motion planning problems.
Rapidly-exploring random trees (RRT) [1] and its sev-
eral improvements, such as RRT-connect [17], RRT* [18]
are sample-based, single-query path planning algorithms. The
basic idea of randomly sampling free space is similar to
PRMs [5]. The tree is rooted at the start conﬁguration. A
random free sample xrand is generated, and if it is within a dis-
tance ϵ to the closest tree node xnearest, a direct link is created
between the two. Otherwise, a new node xnew is generated,
which is at most within ϵ from xnearest and in the direction of
xrand. A connection is formed between xnearest and xnew, and
xrand is discarded. Random samples can be seen as controlling
the expansion direction of an RRT. Local planner checks for
collision avoidance when making connections. RRT effectively
biases the search towards unexplored regions of the search
space. As opposed to PRM, RRT remains connected even with
a small number of edges. Instead of deﬁning a goal state, a goal
region can be deﬁned. When the tree expansion falls in this
region, we have a possible path connecting start to the goal.
The RRT-connect approach differs from the basic RRT in two
aspects. Firstly, instead of the incremental growth by ϵ, it grows
the tree to the new random node xrand or until an obstacle is
encountered. Secondly, it uses two RRTs, one rooted at qinit
and the second at qgoal. The trees are maintained until they
get connected and hence a path is found. Within RRT*, the
cost of reaching each vertex from qinit is recorded. Alike RRT,
initially, RRT* extends the nearest tree node xnearest towards
the random sample xrand thus giving the new node xnew.
However, it then examines a neighbourhood of vertices in a
ﬁxed radius around xnew. If any such vertex xnear incurs the
minimum accumulated cost to reach xnew, then, it is made the
parent of xnew. Another difference is that RRT* rewires the
tree. It tests all xnear and if any such vertex can be accessed
through xnew with a smaller cost, then xnear is rewired to
xnew making the path more smooth.
PRMs (see Section IV) belong in the category of multiple-
query sample-based planners. Having constructed the roadmap
of C, we can put multiple queries to the roadmap, each time
specifying different end conﬁgurations.
Bertram et al. [19] presents a strategy for ﬁnding a solution
when goal conﬁguration is unreachable as it lies in a discon-
nected component of the conﬁguration space with respect to
the initial conﬁguration. The main idea is to integrate the IK
solution directly into the path planning process. Instead of
specifying an explicit goal conﬁguration, the planner evaluates
conﬁgurations that might belong to a valid goal region. A
heuristic workspace goal function calculates proximity to the
target given the end-effector pose. It uses forward kinematics
to ﬁnd the end-effector pose from current conﬁguration q. The
function uses a weighted sum of different factors to charac-
terize the goal region. The foremost factor is the Euclidean
distance between the origin of the coordinate frame attached
to the end-effector and the centre of the target object; penalty
terms are added to constrain the orientation of the end-effector.
It uses a modiﬁcation of the RRT algorithm to guide the
search. It ranks conﬁgurations based on their distance to an
obstacle and their goal distance. New node goal distance must
be smaller than its parent. A node which is in a collision
or its goal distance is not lower than its parent is removed
from the search after some failure count. The tree grows in
conﬁgurations that reduce the goal distance.
Qin and Henrich [20] presents a parallel randomized
approach for the path-ﬁnding problem. This work uses a
discretized version of the C-space already discounting C-space
regions where the arm has mechanical limitations to reach and
where obstacles lie. The idea is to generate many sub-goals in
free C-space. Then, it uses several parallel processes where
each process will ﬁnd a path connecting initial conﬁguration
with the goal conﬁguration through a sub-goal. All processes
terminate whenever a process returns a valid path. The transi-
tion from the current state to the next state is based on a cost
function which selects the candidate with the minimum cost,
also considering that it is within the workspace and collision-
free.
Henrich et al. [21] proposes a strategy to reduce C-space
size using different discretizations along each coordinate of
the conﬁguration vector, with joints closer to the base having
a ﬁner discretization resolution. The so-called optimized dis-
cretization is such that each joint results in the same movement
in the Cartesian space when rotated by the chosen angle. The
authors provide a formula for computing the desired angle
that takes into account the distance from the joint centre to
the farthest point on the end effector.
In this work, we implement a PRM approach for a simple
space in R2, and we consider a point robot that must navigate
the area. However, as the method developes, we integrate a
collision detection module, that makes use of a voxel-based
grid.
IV.
APPROACH
This work is a preliminary exercise towards ﬁnding a
solution to the robotic arm path planning problem. Here, we
consider a static environment, and we follow a sampling-based
approach called probabilistic roadmap (PRM) planner [5].
The method consists of two phases, a learning phase and a
query phase. Rather than computing the conﬁguration space
explicitly, we sample it during the learning phase. This phase
constructs the roadmap as a graph where sampled conﬁgura-
tions are vertices and connections between conﬁgurations are
the edges. In the query phase, we ask for a path between two
free conﬁgurations. Collision detection can be an independent
module and can serve in different phases of the construction
of trajectory. To allow adequate connectivity of C, we sample
many conﬁgurations widely distributed over the free space.
A. Learning phase
The algorithm works as follows. We begin with an empty
graph G. In the learning phase, we repeatedly sample a random
conﬁguration q from C. There can be a collision detection test
that checks whether the selected conﬁguration is free i.e., q ∈
Cfree. If this check succeeds, q is added to the set of vertices
V . This process continues until a given number of nodes n
have been added to V . n is a parameter of the algorithm and
is the desired number of nodes in the graph. In the second
step, for each vertex of G, we ﬁnd its k nearest neighbours
denoted P = {p1, p2, · · · , pk} according to some dist metric.
32
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

Then, an edge is created from q to its nearest neighbours, i.e.,
∀pi ∈ P, E = E ∪ (q, pi) where E is the list of edges in
G. At the end of the learning phase, we have an undirected
graph G = (V, E). Due to the random nature of sampling, it
is possible that roadmap G has disconnected components.
B. Query phase
The next step is the query phase. We are given the initial
and goal conﬁguration of the robot denoted respectively qinit
and qgoal. The algorithm must ﬁnd a feasible path connecting
qinit and qgoal or return failure. We ﬁnd k nearest neighbours
of qinit and qgoal from V using some distance metric dist.
These sets are denoted Pqinit and Pqgoal respectively for qinit
and qgoal. Then, we check each element e of Pqinit in order
and add an edge E = E ∪(qinit, e). Similarly, we add an edge
connecting Pqgoal in the roadmap. Finally, we can use any
shortest path algorithm such as Dijkstra’s algorithm [7] to ﬁnd
the path between initial and goal conﬁgurations. Algorithm
might fail to return a path when roadmap has disconnected
components. The working of the PRM algorithm can be
explained as shown in Figure 2. We assume an Euclidean space
R2. Robot conﬁguration is given by a point in R2, depicted
with an empty circle whereas shaded regions represent the
obstacles. Figure 2(a) shows many random samples of the
free space which are nodes of the roadmap. In Figure 2(b),
we form edges between nodes using k closest neighbours. k
is three, but the degree of some nodes can be greater when it
is included in the closest neighbours of different nodes, or it
can be smaller if it cannot ﬁnd k closest neighbours due to an
obstacle. In Figure 2(c), we solve a query in the roadmap. The
conﬁgurations qinit and qgoal are connected to the roadmap.
Then, a graph-based search algorithm returns the shortest path
denoted by thick lines.
C. Remarks
Several essential aspects affect the performance of PRM;
for instance, how can we choose the random conﬁgurations
such that sampling of the conﬁguration space is uniform.
The original PRM uses a local planner. This local planner
is instrumental for creating connections between any two
sampled conﬁgurations hence creating a feasible local path.
The task of the local planner is to interpolate the motion of
the robot between the two samples, checking for collisions at
a given resolution. If no conﬁguration of the robot between
the samples collides with an obstacle, then an edge is inserted
to the roadmap. Both phases of the PRM algorithm employ
the local planner. In the presented work, however, we have
not used a local planner. Instead, having found the nearest
neighbours using kd-tree, we make connections creating edges
in the graph. We use kd-tree in both phases of PRM. In
the reported implementation, kd-tree use Euclidean distance
when ﬁnding nearest neighbours. However, due to the complex
topology of the conﬁguration space, such distance metric may
not be directly applicable to the path planning algorithms.
D. Preliminary evaluation
We have implemented the approach in a simple 2d test
scenario. We create a two-dimensional point grid that rep-
resents conﬁguration space C. We also specify the obstacle
points which is a subset of C and represents the occupied
or forbidden part of the space, i.e., Cforb. The number of
points in C and Cforb is a parameter of the algorithm.
When creating the roadmap, we also specify the desired
number of points to sample and also the number of closest
neighbours to connect to. We use kd-tree and we ﬁnd the
nearest neighbours based on Euclidean distance, i.e., for points
p = (x1, y1) and p2
= (x2, y2), we calculate distance
d(p, q) =
p
(x2 − x1)2 + (y2 − y1)2. When forming edges,
d serves as the weight on the respective edge.
Figure 3 shows an example conﬁguration space with 40
free points (blue) and 10 collision points (red). In the next
step, we sample C and construct a roadmap in the free region.
The following 15 points were randomly selected as vertices of
the roadmap.
V = {(11, 4), (12, 8), (14, 6), (39, 12), (12, 7), (24, 27),
(46, 3), (22, 33), (15, 0), (23, 25), (11, 9), (8, 32), (6, 16),
(4, 37), (29, 46)}
We use 2 nearest neighbours while forming the edges
between nodes. Figure 4 shows the roadmap. Finally, we
query the roadmap to ﬁnd a path between an initial con-
ﬁguration (22, 33) and a goal conﬁguration (11, 9). For this
exercise, these conﬁgurations have been selected from the
constructed roadmap. Generally, qinit and qgoal must be
added to the roadmap at this stage. Using Dijkistra’s al-
gorithm and employing d(p, q) as the cost of going from
p to q, the following shortest path is returned (Figure 5).
{(22, 33), (23, 25), (39, 12), (46, 3), (15, 0),
(14, 6), (12, 8), (11, 9)}
In this way, we can solve a query as long as the roadmap
is connected. The connectivity problem gets more complicated
as the size of the conﬁguration space increases. To this end,
different measures can help, such as increasing the number
of nearest neighbours to look at or increasing the number of
sampled points.
V.
PROPOSED ARCHITECTURE
In our proposed architecture, we integrate the probabilistic
planner with a grid-based approach for efﬁciency. The work
in [22] explores such a relation. Figure 6 shows the main
components of the architecture. In particular, the framework
receives the initial and goal conﬁgurations qinit and qgoal and
returns a collision-free path. The main component of the archi-
tecture is the PRM which we explained in Section IV. Essential
tasks of the planner are to build a roadmap and establish local
paths. These tasks rely on efﬁcient nearest neighbour search
and collision detection, which we add as independent modules
within the architecture. Nearest neighbour search can use kd-
trees, but it also needs information for collision-free nodes as
well as an appropriate distance metric. Many works have used
slight modiﬁcations of Euclidean distance [5][19] whereas
others specify different metrics for more complex spaces [15].
Local planner decides whether we can add an edge to the
roadmap. It has the task to interpolate robot motion between
two given conﬁgurations (nodes from the roadmap). For this
purpose, it uses the kinematics model of the robot and checks
in the voxel grid if a given conﬁguration is collision-free. The
voxel-based grid renders the entire scene of the collaborative
environment as a grid composed of cubes with a given dimen-
sion, known as voxels. We can describe the granularity of the
grid with the size of one side of the cube. The resolution can be
set higher or lower by choosing the dimension of the unit cube
33
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

q_init
q_goal
(a)
(b)
(c)
Figure 2: An example of a roadmap in a two-dimensional Euclidean space.
0
10
20
30
40
0
10
20
30
40
50
Figure 3: Two dimensional conﬁguration space.
0
10
20
30
40
0
10
20
30
40
50
Figure 4: Randomly sampled points. Straight lines between points
correspond to edges. The number of k closest neighbours for the
construction of roadmap is 2.
0
10
20
30
40
0
10
20
30
40
50
Figure 5: An example of solving a query with the roadmap.
Shortest path between initial and goal conﬁgurations is depicted
with thick lines.
PRM - construction & search
Local Planner 
collision detection
Nearest Neighbours 
distance calculation
Voxel-based Grid 
configuration space information
free & occupied spaces
q_init
q_goal
Robot Kinematics 
forward & inverse
Solution Path 
Figure 6: Robot motion planning approach - architecture,
environment information is given with a labeled voxel-grid.
in the grid, i.e., for a higher resolution, we choose a smaller
size of the voxel, thus corresponding to more voxels in the grid,
and vice verse. When voxels in the grid are labelled, we can
identify, ﬁrstly, if an object in the collaborative environment
occupies the voxel, and secondly, which type of object, i.e.,
either a robotic part itself, human, or an obstacle object. The
resolution has a direct impact regarding collision detection as
the local planner interpolates motion at the granularity of grid
resolution. When using PRM and targeting static scenario,
construction of a labelled grid can be a preprocessing step
without impacting on the processing of queries online. The
knowledge of free and occupied space is a vital component
of the collision detection module within the path planning
algorithm.
The modular architecture allows easy experimentation; for
instance, we can use different planners or strategies for nearest
neighbour searching or local planning, in future.
VI.
DISCUSSION
A desirable property of the developed solution is its real-
time performance. High computational complexity is the main
limitation of many path planning algorithms, preventing online
recalculation of trajectories within the response time of the ma-
nipulator [23]. Thus, dynamic environments, which inevitably
occur during collaborative scenarios, may not be handled
in real-time, and most planners remain applicable to static
environments, only. We contend that using a sampling-based
approach combined with a voxel-based grid search would
support real-time performance, as well as enhance the accuracy
of the plan. In the planning algorithm, we can attribute a signif-
icant computation time to the following key components, i.e.,
34
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

nearest neighbour searching, and collision checking. Firstly,
we see how the voxel-based grid supports faster computations
for the above two elements. Secondly, we see in which ways
can we optimize the nearest neighbour searching and collision
checking to enhance algorithm performance.
Nearest neighbour search implicitly checks for collision
when it ﬁnds a new neighbour. We can efﬁciently ﬁnd neigh-
bours in the search space using data structure, such as kd-
trees. Since we build the kd-tree from the roadmap, we must
account for the time it takes to construct the tree. With an
ofﬂine preprocessing phase, as in PRM, this computation effort
is irrelevant. However, with online planning, we must ﬁnd the
tradeoff between the time taken to construct the tree, and time
saved in neighbour searching.
We envision that voxel-based grid search would offer most
savings in collision checking for both static and dynamic
scenarios. The collision checking in PRM is managed with a
so-called local planner. Local planner interpolates robot motion
between conﬁgurations qs and qf. For this purpose, at a given
discretization level δ of the conﬁguration space, it advances
coordinates of q by δ to reach an intermediate conﬁguration
qi. It keeps advancing until it reaches qs, testing each qi if
it is collision free. Checking for a collision at a given qi is
equivalent to getting the voxels corresponding to a qi (robot
joint values) in the grid, and their occupancy status. Hence, the
local planner can easily ﬁnd step path. Apart from testing for
environment obstacles that lie outside the robot body, collision
checking must also check for self-collisions which involve
motions where different links might obstruct each other.
The proposed approach will be more ﬂexible in terms
of implementation. Since path planning and voxel grid are
independent modules, thus, other planners could be combined
with the voxel grid.
For a uniform random sampling of C, when choosing a
conﬁguration q, we use a uniform probability distribution over
an interval of values corresponding to dof of each coordinate
in q.
In terms of practical impact, this approach will beneﬁt the
collaborative environments. Collaborative spaces reduce costs
and improve production volumes by allowing humans and
robots to work side-by-side. In this way, humans and robots
can perform speciﬁc tasks they are best at, e.g., robots perform
heavy tasks while humans can inspect for quality. The main
concern here is the safety; robot must react in real-time in case
of hazardous events, necessitating efﬁcient motion planners.
An example of manipulator deployment is within an industrial
assembly line which typically distributes the workload among
several robots. The main concern is to make the production
process efﬁcient such that the ﬁnal product fulﬁls its functional
requirements, as well as reduces the production time and time
to market. A small variation in single parts may propagate such
that the ﬁnal product does not comply with speciﬁcations. In
such a setting, deriving collision-free paths for each worker is
of particular importance. To maximize the number of units
assembled means reducing the time needed at each station
(robot) to perform its speciﬁc task, referred to as the process
cycle time [24]. Practical efﬁciency favours sample-based
planners over the conﬁguration space approach. Such planners
can derive more robust motions with shorter cycle times [25].
VII.
CONCLUSION AND FUTURE WORK
The robotic path planning is a classic problem. In this
paper, we presented a simple implementation of a robot motion
planner based on a sampling approach. We used kd trees for
efﬁcient nearest neighbours search. Random sampling might
result in roadmaps with disconnected components, and thus, it
will fail to ﬁnd a path when start and goal conﬁgurations lie
in disconnected components. We would investigate methods
to ﬁnd adequate connectivity of Cfree. Therefore, to guide the
sample selection, our future work would study techniques that
reduce the number of samples as well as improve the ﬁnal
roadmap quality. Next step involves testing the presented ap-
proach for real scenarios. For such cases, we need to represent
conﬁgurations in terms of robot joint values instead of the point
robot, and to implement the kinematics equations as shown in
Figure 1. However, we can ﬁnd a way to combine the two
planning approaches, namely the conﬁguration space approach
and the sample based approach for efﬁciency. A voxel-based
representation of the conﬁguration space with additional infor-
mation on the environment (e.g., the reachability grid [26] )
can simplify the local planner used to detect collisions in the
sampling approach.
ACKNOWLEDGMENTS
INDTECH 4.0 – New technologies for intelligent manu-
facturing. Support on behalf of IS for Technological Research
and Development (SI `a Investigac¸˜ao e Desenvolvimento Tec-
nol´ogico). POCI-01-0247-FEDER-026653
REFERENCES
[1] S. M. LaValle, “Rapidly-Exploring Random Trees: A
New Tool for Path Planning,” Department of Computer
Science, Iowa State University, Tech. Rep. TR 98-11,
October 1998.
[2] “MHI - The Industry That Makes Supply Chains Work,”
http://www.mhi.org/fundamentals/robots, accessed: 2019-
05-19.
[3] P. Anderson-Sprecher, “Intelligent Monitoring of As-
sembly Operations,” Robotics Institute, Carnegie Mellon
University, Tech. Rep. CMU-RI-TR-12-03, June 2011.
[4] D. Katz, J. Kenney, and O. Brock, “How Can Robots
Succeed in Unstructured Environments,” in Workshop
on Robot Manipulation: Intelligence in Human Environ-
ments at 4th Robotics: Science and Systems Conference
(RSS 2008).
Citeseer, June 2008.
[5] L. E. Kavraki, P. Svestka, J.-C. Latombe, and M. H.
Overmars, “Probabilistic Roadmaps for Path Planning in
High-Dimensional Conﬁguration Spaces,” IEEE Trans-
actions on Robotics and Automation, vol. 12, no. 4, pp.
566–580, August 1996.
[6] P. E. Hart, N. J. Nilsson, and B. Raphael, “A Formal Basis
for the Heuristic Determination of Minimum Cost Paths,”
IEEE Transactions on Systems Science and Cybernetics,
vol. 4, no. 2, pp. 100–107, July 1968.
[7] E.
W.
Dijkstra,
“A
Note
on
Two
Problems
in
Connexion
with
Graphs,”
Numerische
Mathematik,
vol. 1, pp. 269–271, December 1959. [Online]. Available:
https://doi.org/10.1007/BF01386390
[8] “INDTECH 4.0 – Novas tecnologias para fabricac¸˜ao
Inteligente,
INDTECH
4.0
-
New
Technologies
for
Intelligent
Manufacturing,”
https://site.groupe-
35
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

psa.com/mangualde/pt-pt/atualidades/atividade/centro-
de-mangualde-do-groupe-psa-na-vanguarda-4a-
revolucao-industrial-projeto-indtech-4-0-em-execucao/,
accessed: 2019-05-29.
[9] L. Neto and G. M. Gonc¸alves, “Component Models for
Embedded Systems in Industrial Cyber-Physical Sys-
tems,” in Proceedings of the 7th International Conference
on Intelligent Systems and Applications (INTELLI 2018).
IARIA, June 2018, pp. 24–29.
[10] L. Neto et al., “A component framework as an enabler for
industrial cyber physical systems,” in Proceedings of the
1st IEEE International Conference on Industrial Cyber-
Physical Systems (ICPS 2018).
IEEE, May 2018, pp.
339–344.
[11] J. Reis, R. Pinto, and G. Gonc¸alves, “Human-Centered
Application using Cyber-Physical Production System,” in
Proceedings of the 43rd Annual Conference of the IEEE
Industrial Electronics Society (IECON 2017).
IEEE,
November 2017, pp. 8634–8639.
[12] L. Ant˜ao, R. Pinto, J. Reis, G. Gonc¸alves, and F. L.
Pereira, “Cooperative Human-Machine Interaction in In-
dustrial Environments,” in Proceedings of the 13th APCA
International Conference on Control and Soft Computing
(CONTROLO 2018).
IEEE, June 2018, pp. 430–435.
[13] T.
Lozano-P´erez,
“Spatial
Planning:
A
Conﬁgura-
tion Space Approach,” in Autonomous Robot Vehicles.
Springer-Verlag, 1990, pp. 259–271.
[14] J. H. Friedman, J. L. Bentley, and R. A. Finkel, “An al-
gorithm for ﬁnding best matches in logarithmic expected
time,” ACM Transactions on Mathematical Software,
vol. 3, no. SLAC-PUB-1549-REV. 2, pp. 209–226, 1976.
[15] A. Yershova and S. M. LaValle, “Improving Motion Plan-
ning Algorithms by Efﬁcient Nearest-Neighbor Search-
ing,” IEEE Transactions on Robotics, vol. 23, no. 1, pp.
151–157, February 2007.
[16] S. M. LaValle, Planning algorithms.
Cambridge univer-
sity press, 2006.
[17] J. J. Kuffner Jr and S. M. LaValle, “RRT-Connect: An
Efﬁcient Approach to Single-Query Path Planning,” in
Proceedings of the 17th IEEE International Conference
on Robotics and Automation (ICRA 2000), vol. 2. IEEE,
April 2000, pp. 995–1001.
[18] S. Karaman and E. Frazzoli, “Sampling-based Algorithms
for Optimal Motion Planning,” International Journal of
Robotics Research, vol. 30, no. 7, pp. 846–894, 2011.
[19] D. Bertram, J. Kuffner, R. Dillmann, and T. Asfour,
“An Integrated Approach to Inverse Kinematics and Path
Planning for Redundant Manipulators,” in Proceedings
of the 23rd IEEE International Conference on Robotics
and Automation (ICRA 2006).
IEEE, May 2006, pp.
1874–1879.
[20] C. Qin and D. Henrich, “Path Planning for Industrial
Robot arms - A Parallel Randomized Approach,” in Pro-
ceedings of the 4th International Symposium on Intelligent
Robotic Systems (SIRS 1996).
Citeseer, July 1996, pp.
65–72.
[21] D. Henrich, C. Wurll, and H. W¨orn, “Online path plan-
ning with optimal C-space discretization,” in Proceedings
of the 11th IEEE/RSJ International Conference on Intel-
ligent Robots and Systems (IROS 1998). Innovations in
Theory, Practice and Applications. IEEE, October 1998,
pp. 1479–1484.
[22] S. M. LaValle, M. S. Branicky, and S. R. Lindemann,
“On the Relationship Between Classical Grid Search and
Probabilistic Roadmaps,” The International Journal of
Robotics Research, vol. 23, no. 7-8, pp. 673–692, 2004.
[23] T. Petriˇc, A. Gams, N. Likar, and L. ˇZlajpah, “Obstacle
Avoidance with Industrial Robots,” in Motion and Op-
eration Planning of Robotic Systems.
Springer, March
2015, pp. 113–145.
[24] N. Papakostas, G. Michalos, S. Makris, D. Zouzias, and
G. Chryssolouris, “Industrial Applications with Cooper-
ating Robots for the Flexible Assembly,” International
Journal of Computer Integrated Manufacturing, vol. 24,
no. 7, pp. 650–660, June 2011.
[25] D. Spensieri, “Planning Robotic Assembly Sequences,”
Ph.D. dissertation, Chalmers University of Technology,
March 2017.
[26] P. Anderson-Sprecher and R. Simmons, “Voxel-Based
Motion Bounding and Workspace Estimation for Robotic
Manipulators,” in Proceedings of the 29th IEEE Inter-
national Conference on Robotics and Automation (ICRA
2012).
IEEE, May 2012, pp. 2141–2146.
36
Copyright (c) IARIA, 2019.     ISBN:  978-1-61208-723-8
INTELLI 2019 : The Eighth International Conference on Intelligent Systems and Applications

