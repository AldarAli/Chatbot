Generation of a Geodetic Line on Any Given Surface  
 
Anna von Pestalozza, Stefan Weichert, Arash Ramezani, Hendrik Rothe 
Chair of Short-Time Dynamics 
University of the Federal Armed Forces  
Hamburg, Germany 
Email: pestalozza@hsu-hh.de, s-weichert@web.de, ramezani@hsu-hh.de, rothe@hsu-hh.de 
 
 
Abstract—The calculation of geodetic lines plays an important 
role in many applications, such as the minimisation of material 
in manufacturing processes. Many manufacturing steps, such 
as cutting or attaching layers on curved surfaces, suffer from 
loss of material. In order to minimise wastage of material, 
geodetic lines can be employed to find a cutting pattern for the 
given material with minimal distortion. This paper presents an 
automatable algorithm that numerically calculates geodetic 
lines on any given surface. The result is evaluated with a 
practical example by comparing the numerical result and the 
analytical solution. 
Keywords-Geodetic 
Line; 
Surface 
Analysis; 
Materials 
Technology. 
I. 
INTRODUCTION  
This paper is based on the assumptions that the material 
of the given surface is of finite thickness and of low 
elasticity which leads to the necessity of minimising loss of 
material. Furthermore, the starting point of the presented 
research is the approach given in [1] for finding geodetic l 
ines between two points. The main idea is to successively 
calculate distances from the starting point which is 
improved by the fast marching method. In the following, an 
algorithm for extracting the geodetic line as well as for 
further improving it is derived.  
For cutting a curved surface either sectional planes or 
geodetic lines can be used. The graphical approximation of 
flattened material stripes of an originally curved surface 
having been cut by the procedures of applying sectional 
planes and calculating geodetic lines clearly show that the 
cutting with the geodetic lines provides straight edges when 
flattened whereas the sectional planes result in curved edges 
which leads to a higher amount of material loss. However, 
sectional planes are much easier to apply and less time 
consuming than the analytical calculation of geodetic lines 
which is not even possible in many cases. Thus, this paper 
aims to provide an algorithm which approximates analytical 
geodetic lines on any given surface.  
The paper is divided in five sections. After the 
Introduction, the calculation of the shortest distance on a 
triangulated mesh is shown in Section II followed by 
Section III about the extraction of the geodetic line. In 
Section IV a straightening algorithm for improvement of the 
geodetic line is presented. The paper ends with a concluding 
paragraph in Section V and an outlook to future work on 
this project.  
II. 
CALCULATION OF SHORTEST DISTANCES ON A 
TRIANGULATED MESH  
In this paper, the procedure of the Fast Marching 
Method (FMM) is used [3] for calculating the shortest 
distances on a triangulated mesh. Basically, this method 
approximates the distances of all points surrounding the 
starting point successively by a wave front until it reaches 
the given ending point. For the following procedure it is 
assumed that starting and ending point of the geodetic line 
which is to be approximated are given. 
A. Procedure 
In the FMM, the vertices of all triangles in the mesh are 
divided into several groups which are sets of vertices. 
1) Fixed vertex set (FVS): contains initially only the 
starting points; vertices which are points of the shortest 
distance are added in the procedure. 
2) Close vertex set (CVS): contains initially no vertices; 
vertices which are close to the point that is investigated in 
the current iteration of the loop are added. 
3) Fixed vertex set (FVS): contains all vertices of the 
mesh that are not contained in FVS. 
Two situations can be distinguished: Only one starting 
point is given and more than one starting point is given. If 
there is only one starting point, the distances 𝑇𝑖 of its direct 
neighbours have to be calculated and the neighbours are 
added to the CVS. If there is more than one starting point, 
the points 𝑎0, 𝑎1, and 𝑎2 which are part of a triangle of the 
mesh containing exactly two points in FVS have to be 
determined. After computing their distances 𝑇0, 𝑇1, and 𝑇2 
to the starting value, the points 𝑎0, 𝑎1, and 𝑎2 are added to 
CVS. After these initial steps, the following loop starts: 
• 
The point 𝑎𝑖, i = 0, 1, 2 with the shortest distance 𝑇𝑖 
to the starting value is moved to FVS and is now the 
point of origin for further investigations. This point 
is called trial.  
• 
The distances 𝑇𝑖 of all points in UVS∪CVS which 
are adjacent to triangles containing trial and a point 
in FVS are computed and moved to CVS. 
In each iteration, one point is added to FVS and its 
neighbours are added to CVS. The algorithm terminates 
61
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

when FVS contains every vertex which is part of a line 
resulting in the shortest distance from starting to ending 
point.  
B. Calculation of Distance T 
For calculating the distance 𝑇 the method presented in 
[3] is used. It requires that one point, 𝑃1, of known distance 
𝑇1  is the origin and that another point, 𝑃2 , of known 
distance 𝑇2 is on the x-axis.  
1) Procedure: The distance 𝑇3 of the third point 𝑃3 is 
calculated in terms of 𝑇1, 𝑇2 and the connecting vectors 𝜈𝑖 
with 𝜈𝑖 = 𝑃𝑖 − 𝑃1, in particular (𝜈3)x and (𝜈3)y, i.e., the 
projections of 𝜈3  onto the new basis vectors, which are 
calculated as follows: To change the default, adjust the 
template as follows: 
a) One point is set as the origin (𝑃1):  
𝜈𝑖 = 𝑃𝑖 − 𝑃1 
b) The coordinate system is transformed where:  
𝑒𝑥 = (𝑝2 − 𝑝1)
|𝑝2 − 𝑝1| = (𝜈2)
|𝜈2| 
𝑒𝑦 = (𝜈3 − 𝑒𝑥 ⋅ (𝑒𝑥 ⋅ 𝜈3))
|(𝜈3 − 𝑒𝑥 ⋅ (𝑒𝑥 ⋅ 𝜈3)| = (𝜈3 ⋅ |𝜈2|2 − 𝜈2 ⋅ (𝜈2 ⋅ 𝜈3))
|(𝜈3 ⋅ |𝜈2|2 − 𝜈2 ⋅ (𝜈2 ⋅ 𝜈3)| 
c) The distance of 𝜈3 to the new coordinate system is 
computed where 𝑂𝑥 is the x-coordinate at which the origin 
of the new coordinate is located and 𝑂𝑦 is the relative y-
coordinate:  
𝑂𝑥 = 1
2
(𝜈2)𝑥
2 + 𝑇1
2 − 𝑇2
2
(𝜈2)𝑥
 
𝑂𝑦 = ±√𝑇1
2 −
((𝜈2)𝑥
2 + 𝑇1
2 − 𝑇2
2)²
4(𝜈2)
𝑥
2
= ±√𝑇1
2 − 𝑂𝑥
2 
𝑇3 = 𝑂𝑥 ⋅ 𝑒𝑥 + 𝑂𝑦 ⋅ 𝑒𝑦 − 𝜈3 
A challenge with this method is that there are always 
two possible virtual origins due to ±𝑂𝑦. In [3] it is stated 
that this is solved by calculating both distances and taking 
the larger value. However, there are situations where the 
smaller value is the correct one. This happens, presumably, 
mostly or only when P3 is not in front of the wavefront but 
beside. Such a situation occurs when the distance of a point 
in the CVS is recalculated. To mitigate this issue in a simple 
way, the recalculated value for the distance 𝑇 is only stored 
if it is smaller than the existing one. 
2) Accuracy: The algorithm was tested on a sphere with 
equally spaced points as shown in Figure 1. The starting 
point, i.e., the point with distance 𝑇 = 0 is chosen to be the 
north pole. The points are numerated such that one whole 
circle at constant 𝜃 is taken. Thus, plotting the distance over 
the index results in plateaus of constant distance (see Figure 
1 b and c).  
III. 
EXTRACTING THE GEODETIC LINE 
In the second section, the shortest distance from starting 
to ending point on the triangulated mesh is determined. In 
order to approximate the geodetic line, a line of shortest 
distance can be backtracked along the points in FVS. The 
real geodetic line, however, does not necessarily consist only 
of vertices but of points on edges of the triangles as well. In 
the following the first approximation of the geodetic line is 
denoted by Γ0.  
A. Method of Minimum Distance  
The Method of Minimum Distance approximates Γ0 with 
regard to the calculated distances T. It iterates the following 
procedure and can be modified through two different 
options: 
1. The neighbor N of the previous point is determined 
which fulfills one of the following requirements: 
a) Option 1: N has the lowest distance TN of all 
provided neighbours.  
b) Option 2: N is the point of neighbours for which the 
value of the distance TN added to the distance from the 
previous point p is minimal 
2. The resulting neighbor N is appended to Γ0. 
 
This method extracts the geodetic line very quickly but does 
not provide a good approximation, neither with Option 1 nor 
Option 2, especially when the grid is very uniform. Also, 
the points of the geodetic line are still only located on 
vertices. Therefore, the gradient method was implemented. 
 
B. The Gradient Method 
The gradient method provides an approach to extract the 
geodetic line dissociated from the vertices. To determine the 
direction in which the geodetic line propagates the gradient 
of the distance T, approximated with the three distances for 
each point in each triangle, is used. 
 
1) Approximation of the gradient in a triangle: 
 
The gradient in a triangle with vertices i, j and k is given by 
 
(∇⃗⃗ 𝑇)(𝑖,𝑗,𝑘) = −
𝑛⃗ 
|𝑛|
⃗⃗⃗⃗⃗ 2× (𝑇𝑖𝑒 𝑗𝑘 + 𝑇𝑗𝑒 𝑘𝑖 + 𝑇𝑘𝑒 𝑖𝑗),       
where 
𝑒 𝑎,𝑏 = 𝑥 𝑏 − 𝑥 𝑎  
 
are the vectors connecting the vertices a and b and 𝑛⃗  is the 
surface normal of the triangle: 
 
𝑛⃗ = 𝑒 𝑘𝑖 × 𝑒 𝑗𝑘 
 
62
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

Note that the connecting vectors 𝑒 𝑖𝑗, 𝑒 𝑗𝑘 and 𝑒 𝑘𝑖 are 
circular, i.e., that 
𝑒 𝑖𝑗 + 𝑒 𝑗𝑘 + 𝑒 𝑘𝑖 = 0 
 
In Figure 2, a sketch of a triangle with its gradient is 
shown for an example set of distance values Ti, Tj, Tk. 
 
 
2) Extracting the Geodetic Line with the Gradient 
Method: 
 
The basic concept of the gradient method is to generate a 
line g for each triangle from the previous point p of the 
geodetic line and the gradient of T 
 
𝑔 ∶ 𝑥 (𝜆) = 𝑝 + 𝜆∇⃗⃗ 𝑇(𝑖𝑗𝑘) 
 
and to find its point of intersection with the edges of adjacent 
triangles. For the choice of edges to intersect g with, one has 
to consider whether the previous point p is on a vertex or an 
edge. If p is on a vertex, the following procedure is applied: 
 
1. The negative gradients of the adjacent triangles are 
computed.  
2. A triangle determined whose negative gradient 
points into the triangle itself. 
3. The line g is intersected with the edge of that 
triangle on the opposite side. 
4. The point of intersection is added to Γ0. 
 
If no triangle is found whose negative gradient points 
into the triangle itself, the neighbour N with the smallest  
distance T to the previous point p is added to Γ0. 
 
If p lies on an edge, a different procedure is used: 
 
1. The triangle which is adjacent to p and was not used 
for the prior calculation of p itself has to be 
identified. 
2. The line g is intersected with the two remaining 
edges, if the negative gradient points into the 
triangle. 
 
If the negative gradient does not point into the triangle, 
the previous p is moved to the vertex of the same edge that 
has the smaller distance T.  
Special case: It might happen that p lies on a boundary 
edge. This case can be resolved by moving p to the vertex of 
the same triangle with a smaller distance T. If p lies on a 
boundary vertex, the above-mentioned procedure can be 
applied without further arrangements. As already mentioned, 
this is a special case. Therefore, this will not be considered in 
the further course. 
 
3) Performance of the Gradient Method 
The algorithm approximates the real geodetic line in many 
test cases very precisely in accurate time. In case that real 
geodetic line runs near or along a line of edges without 
passing through several triangles or without changing the 
lane over the course of many points, the calculated geodetic 
line tends to stick to one lane and very late moves over to the 
other. This cannot be taken care of by the improvement 
algorithm which is described in the next section unless it is 
run for a lot more iterations than usual which is expensive. 
However, this special case is not problematic unless one 
63
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

wants to find the real geodetic line with even higher accuracy 
than already provided. For this, one could calculate the 
geodetic line and refine the triangulation around it to redo the 
whole calculation with the new triangulation until it 
converges. 
IV. 
IMPROVING THE APPROXIMATION OF THE GEODETIC 
LINE 
In the previous section we have generated an initial 
approximation Γ0 for the geodetic line between two points 
on a triangulated mesh in three-dimensional space. As this is 
just a first approximation, an algorithm for improving Γ0 is 
required. The improvement can be achieved by moving the 
points on vertices of the geodetic line along the edges of the 
mesh to shorten the length of Γ0. 
 
A. Criterion for Improvement of the Geodetic Line 
According to [2] the shortest path is given by the 
straightest path for triangulated surfaces. ‘Straight’ is 
defined as follows: After taking all triangles that the 
approximation Γ𝑖−1 passes through and unfolding them into 
a plane, the path Γ𝑖 is the shortest when it is a straight line in 
the planar view. Therefore, the algorithm for improvement 
aims at straightening the path in the unfolded planar view.  
 
B. The straightening algorithm 
For this section the i-th version of the path is denoted as 
Γ𝑖 and Pi,,j  the j-th point of the i-th path. For the following 
let Pi,,j  be the point to be corrected using the information 
about Pi,,j+1  and Pi,,j -1. The idea is to locally straighten the 
path by moving the central point of the three, i.e., Pi,,j . To 
ensure that the geodetic line converges and actually 
becomes shorter with each iteration, the updated Pi,+1,,j  for 
the updated path Γ𝑖+1 is calculated using the points which 
have already been updated during this iteration, i.e., Pi,+1,j-1 
instead of Pi,,j-1. For readability, we omit the “+1” in Pi,+1,j-1, 
but take care of it by only keeping one Г stored and 
updating it with each step during each iteration.  
There are always two cases to be considered: Pi,,j  lies on 
an edge or on a vertex as can be seen in Figure 3.  
 
1) Pi,,j  lies on an edge: 
If Pi,,j  lies on an edge, the two triangles adjacent to Pi,,j  are 
unfolded. The point of intersection of the connecting line 
between Pi,,j +1 and Pi,,j -1 and the edge that Pi,,j  lies on are 
calculated. If the point of intersection does not lie between 
the two vertices of the edge, the closer vertex is chosen to be 
the 
corrected 
point 
instead 
in 
this 
case. 
 
 
2) Pi,,j   lies on a vertex 
If the point that is to be corrected coincides with a vertex, 
the procedure becomes more complicated. Let Sk be the set 
of triangles that have Pi,,j  as the central vertex, then several 
cases can be distinguished. Firstly, there are two simple 
cases which can be easily taken care of numerically: 
a) If all three points (Pi,-1,j,  Pi,,j  and Pi,+1,j)  are part of 
the same triangle, Pi,,j   is removed from Г.  
b) If Pi, j+1 or Pi,,j-1 lies on an edge that is not part of 
the boundary of Sk, it is removed from Г. 
64
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

For all other cases (Pi, j+1 and Pi,,j-1 belong to two 
different triangles) the vertices around Pi,,j are sorted and the 
left and right hand angles, θl and θr, are calculated in order 
to characterize the vertex as can be seen in Figure 4. These 
angles are given by the sum of the central angles of the 
triangles which are obtained by splitting the star-like 
structure of Sk along the path Pi,-1,j → Pi,,j  → Pi,+1,j. 
Three main cases can be distinguished:  
a) θ = 2π : euclidean 
b) θ = θl + θr  > 2π : hyperbolic 
c) θ < 2π : spherical 
These three cases are taken care of differently where θ is 
defined as left or right hand angle. 
a) Euclidean: Sk can be unfolded isometrically. After 
unfolding, Pi, j+1 or Pi,,j-1 are joined in the unfolded 
Sk and  the intersections with the edges added to Г. 
b) Hyperbolic:  
a. 
If  θl and θr  are greater than π: no 
correction is needed. 
b. If  θl and θr  are smaller than π, that side of 
Sk is unfolded and Pi, j+1 as well as Pi,,j-1 
are joined in the same manner as in the 
Euclidean case. 
c) Spherical: The part of Sk with smaller θl/r is 
unfolded and Pi, j+1 or Pi,,j-1 are joined as in the 
Euclidean case. 
In all three cases the part of Sk with smaller θl/r has to be 
unfolded and the points of intersection have to be 
calculated. 
In test runs, it was observed that points which are very 
close to vertices keep approaching the vertex which they are 
close to without coinciding and adopting its value. 
Therefore, every 10 iterations the path is scanned for points 
on Г for which this might be the case. These points are 
moved to the vertex instead. All following points that 
approach the same vertex are deleted from the path. This is 
necessary because otherwise curves in the path will never 
pass over a vertex. The effect of the scanning of the path 
and the movement of points to vertices is shown in Figure 5.  
V. 
EXEMPLARY RESULTS 
To test the capability of the gradient method and the 
straightening algorithm a geometry was chosen for which 
exact geodetic lines can be analytically computed for 
reference.  
A plane with a half cylinder barrier is generated and the 
geodetic line between two points on either side of the half 
cylinder is calculated, first analytically, then using the 
presented algorithm as shown in Figure 6. 
In Figure 6, several aspects can be seen: Beginning at 
the ending point (on the right-hand side of the half cylinder) 
the distances of the other points are calculated by the FMM. 
These increase up to the starting point (on the left-hand side 
of the half cylinder). For clarity, the colour palette was 
chosen such that it is repeated five times. The black line 
shows the analytically calculated geodetic line. The red 
crosses show the points of the geodetic line which was 
calculated with the above-described algorithm.  
In the left image the calculation is stopped after the 
extraction using the gradient method. For the right image 
the extracted geodetic line was improved by using the 
technique described in Subsection IV-B.  
As can be seen, the straightening algorithm removed a 
few deviations visible close to the upper right end of the 
geodetic line. The straightening algorithm ran 50 times but 
most of the improvement was already achieved after 5 
iterations. 
 
 
 
 
65
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

 
VI. 
CONCLUSION AND FUTURE WORK 
An algorithm for calculating a geodetic line on a given 
surface and a technique for its further improvement are 
described. The goal was to derive an accurate numerically 
determined geodetic line. Further steps could feature an 
extension of the algorithm, such that several geodetic lines 
on one surface can be found by iterating over the algorithm. 
To further improve, analyse and straighten the geodetic line, 
the unfolding of surfaces with the least distortion could be 
investigated and automatised. Moreover, the change in 
accuracy dependent of the number of elements in the 
triangulated mesh could be investigated in order to define 
and optimize the relation between these two quantities. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
REFERENCES 
[1] J. M. F. Linhard, Numeric-Mechanical Investigation of the 
Planning Process of Membrane Structures, PhD thesis, 
Technische Universität München, 2009. 
[2] D. Martínez, L. Velho, and P. C. Carvalho, Computing 
geodesics on triangular meshes, Computers & Graphics 
29(5):667 – 675, 2005. 
[3] M. Novotni und R. Klein, Computing geodesic distances on 
triangular meshes, Journal of WDCG, 10(1-2):341-347, 2002.  
 
66
Copyright (c) IARIA, 2018.     ISBN:  978-1-61208-672-9
SIMUL 2018 : The Tenth International Conference on Advances in System Simulation

