Self-Organizing Localization for Wireless Sensor Networks 
Based on Neighbor Topology 
Range-free localization with low dependence on anchor node 
                      Yasuhisa Takizawa 
 
Yuto Takashima 
 
Naotoshi Adachi 
             Faculty of Environmental and Urban     Graduate School of Science and      Faculty of Environmental and Urban 
                Engineering, Kansai University 
     Engineering, Kansai University         Engineering, Kansai University 
                               Osaka Japan 
 
 
     Osaka Japan  
 
        Osaka Japan 
                e-mail: takizawa@kansai-u.ac.jp 
Abstract—The localization of sensor nodes is one of the key 
issues for sensor network systems. Therefore, to obtain precise 
location information, several localization systems have been 
researched. However, they require an arranged space using a 
large number of anchor nodes whose locations are well known, 
or they need advanced information such as radio conditions in 
the space. Otherwise, the systems cannot be used for a space 
that cannot be arranged in advance with suitable conditions 
for these systems operation. Furthermore, some localizations 
assume the use of advanced distance measurements, such as 
TOA and TDOA, to achieve high accuracy in estimating 
locations, but these advanced distance measurement schemes 
cannot be used for ordinary sensor node systems. To resolve 
these problems, we propose Self-Organizing Localization for 
wireless 
sensor 
networks. 
Self-Organizing 
Localization 
requires no distance measurement scheme and no advanced 
information on a space; even then it reproduces a geometry 
nearly similar to the network's original geometry without 
anchor nodes, and it reproduces a geometry with two anchor 
nodes that is nearly congruent with the original. Furthermore, 
using just three anchor nodes, it estimates node absolute 
localization with high accuracy.  Therefore, it can be applied to 
any space and any sensor node. In this paper, the algorithm of 
Self-Organizing Localization is described, and its accuracy 
based on simulation evaluation is shown. 
Keywords-localization; wireless sensor networks; self-
organizing maps;  
I. 
 INTRODUCTION  
To achieve advanced sensing services, technology that 
senses the environment with precise location information is 
indispensable. Therefore, several localization systems that 
obtain accurate location information have been researched. 
They are classified into range-based localization [1-6] and 
range-free localization [8-10]. Range-based localizations 
assume the use of advanced distance measurement schemes 
between sensor nodes, such as Time Difference Of Arrival 
(TDOA) schemes and Time Of Arrival (TOA) schemes. 
However, such distance measurement schemes are not used 
in ordinary sensor node systems because they are not suitable 
for sensor nodes whose functions should be minimized. 
Some localizations use a Received Signal Strength Indicator 
(RSSI), which can be used in ordinary sensor node systems; 
however, these systems require advanced information, and 
they must have radio condition information sets in the space 
so they can estimate location with high accuracy. On the 
other hand, range-free localizations do not need distance 
measurement schemes; however, to estimate location with 
high accuracy, they require an arranged space where a large 
number of anchor nodes are deployed. Some range-free 
localizations do not need anchor nodes, but they need 
advanced information on the probable network topology of 
the space. Therefore, range-free localization cannot be used 
for a space that cannot be sufficiently arranged in advance. 
To resolve these problems, we propose Self-Organizing 
Localization (SOL) for wireless sensor networks. SOL needs 
no distance measurement schemes, no advanced information 
on the space, and its dependence on anchor nodes is very low.  
SOL achieves the following results by using Self-Organizing 
Maps (SOM) [14, 15]:  
• 
Without anchor nodes, it reproduces a geometry 
nearly similar to the network's original geometry. 
• 
With two anchor nodes, it reproduces a geometry 
nearly congruent with the original, that is, it derives 
relative node locations on the network. 
• 
With just three anchor nodes, it derives absolute 
node locations with high accuracy. 
According to the above properties, SOL can be applied to 
any space and any sensor node.  
SOL is based on our original localization [13], which 
assumed an ad hoc network that consisted of many nodes 
whose locations were unknown and a few anchor nodes 
whose locations were well known. The localization also 
assumed a distance measurement scheme that uses an RSSI. 
SOL eliminates distance measurement schemes because of 
its application to any sensor node. Then, SOL controls SOM 
localization based on neighbor topology, which is expressed 
by hop count between nodes. 
In this paper, the algorithm on SOL using SOM is 
described, and its accuracy based on simulation evaluation is 
shown. In the rest of the paper, Section 2 describes related 
work, and Section 3 presents the algorithm of SOL based on 
our original localization. Then, Section 4 presents the 
algorithm of SOL based on neighbor topology. Furthermore, 
Section 5 shows evaluation results for the SOL and discusses 
its characteristics regarding accuracy of the estimated 
location. 
102
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

II. 
RELATED WORK 
Node localizations are classified into range-based and 
range-free 
localizations. 
The 
typical 
range-based 
localizations are shown as follows. RADAR [1], Active 
Badge [2], and SpotON [3] have been proposed as location 
estimation methods that use an RSSI. RADAR requires 
space where radio wave propagation has been measured in 
advance. Since Active Badge and SpotON use an RSSI for 
sensing proximity to anchor nodes, these estimated locations 
have low resolution. Active Bat [4] and Cricket [7] have 
been proposed as location estimation methods using TDOA. 
Both estimate locations with high precision based on 
triangulation; however, they need a space arranged with a 
large number of TDOA devices. Iterative Multilateration [5] 
has been proposed as a location estimation method with a 
small number of anchor nodes; Dolphin [6] is a system that 
uses Iterative Multilateration. This method and system use 
triangulation to estimate location and propagate the 
estimated location to neighbor nodes. The method and 
system require highly precise distance measurements such as 
TDOA and suffer from location error that increases as 
estimated location propagation progresses.  
On the other hand, typical range-free localizations are 
shown as follows. Centroid [8] estimates node location based 
on the centroid on three anchor nodes that the target node 
can communicate with directly. The centroid needs an 
arranged space in which a large number of anchor nodes are 
deployed. DV-Hop [9] proposed for location estimation 
using network topology, calculates average distance in 1 hop 
using communication between anchor nodes, and it estimates 
node location with the calculated average distance and the 
number of hops from the anchor node. It also requires a 
minimum of three anchor nodes. APIT [10] estimates node 
location based on the geometrical condition that a node can 
be inside or outside for multiple triangulation. The 
construction of APIT is based on a three-anchor-node unit, 
and thus it needs a large number of anchor nodes. These 
studies [11, 12] apply SOM to wireless localization and 
provide relative location without anchor nodes. However, 
they need a training set that leads SOMs to the proper map, 
and the training set is prepared with information on the space 
in advance. The accuracy of range-free localizations is very 
inferior to that of range-based localizations and is 
insufficient for many sensing services. 
III. 
OUR ORIGINAL LOCALIZATION 
Our original localization [13] reproduces network 
geometry using SOM. In SOM, the number and range of 
neighbor nodes are important metrics, and SOM converges 
when the number and range of neighbor nodes are reduced in 
accordance with a convex decreasing function [14]. In 
accordance with the above characteristics of SOMs, our 
original localization has the following two strategies to 
effectively use the measured distances between nodes. 
• 
In the early phase, the algorithm uses the locations 
and distances of both 1- and 2-hop nodes and 
reproduces an inaccurate but characteristic network 
geometry by emphasizing the distance relation 
between nodes. 
• 
In the next phase, the algorithm uses the locations 
and distances of 1-hop nodes and shapes the 
geometry to minimize distance errors between 
neighbor nodes. 
Therefore, the number and range of neighbor nodes 
correspond to the hop count, and, in the early phase, the 
algorithm actively and widely accepts the neighbor location. 
Then, in the next phase, the algorithm selectively accepts the 
neighbor location. Furthermore, in order to need no 
advanced information on the space, the original applies SOM 
in the following way: 
• 
The SOM input vector is dynamically generated by 
the location and distance of neighbor nodes. 
• 
The SOM winner is the node that receives the input 
vector from a neighbor node. 
The following explains the algorithm based on the above 
SOM strategies and applications. 
[step 1] Each node generates a random location as its 
estimated location wi(t) and then broadcasts its location wi(t) 
to neighbor nodes, where t is the number of estimation steps. 
[step 2] The node i receives the estimated location 
information from a neighbor node j; that is, node i, which is 
the SOM winner, modifies its estimated location wi(t) to 
draw near the input vector mi(t), which is the location 
estimated from location wj(t) of node j. The distance dij(t) 
between nodes i and j is provided by the node distance 
measurement function. Therefore, a modified vector Vi
{1}(t) 
that reduces |mi(t)-wi(t)| is generated (see Fig.1(a)):   
 
€ 
Vi
{1}(t) =
dij(t) − wi(t) − w j(t)
wi(t) − w j(t)
(wi(t) − w j(t))              (1) 
 
Furthermore, when the estimation is in the early phase, the 
input vector m'i(t) is generated using location estimates wk(t)  
from a 2-hop node k in a set of 1-hop nodes from neighbor 
nodes j and the sum of distances dij(t)  and djk(t). Therefore, a 
modified vector Vi
{2}(t) is generated in which the relation of 
the 2-hop node k is the following (see Fig.1(b)): 
 
€ 
Vi
{2}(t) = dij(t) + d jk(t) − wi(t) − wk(t)
wi(t) − wk(t)
(wi(t) − wk(t))     (2) 
 
If the modified location wi(t)  of node i by (1) and (2) is the 
location nearer to the 2-hop node k than to the 1-hop node j, 
that is, if   | wi(t) – wj(t)| > | wi(t) – wk(t)|, then the input 
vector m'i(t) is the relocation estimated with locations wk(t) 
and wj(t). djk(t), which is the distance between node i and 
node k, becomes larger than dij(t) when node i is on the 
broken circular line in Fig.1(c), and the modified vector 
derived as node i is relocated to the center of the range on the 
broken circular line. Therefore, the modified vector Vi
{2}(t) is 
the following (see Fig.1(d)): 
 
€ 
Vi
{2}(t) = w j(t) − wi(t) + dij(t)
d jk(t) (w j(t) − wk(t))           (3) 
103
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

 
                                                        (a)                                                                     (b) 
   
 
                                                         (c)                                                                (d) 
Figure 1.  (a) Input vector, winner, and modified vector by 1-hop. (b), (c) and (d) Input and modified vectors by 2-hop. 
dij(t)
wi(t)
dik(t)
vi
{2}(t)

	
	 

	
 
w j(t)
wk(t)
 
m i(t)
	
 


 
vi
{2}(t)

	
	 
 
m i(t)
	
 


 


	
	



	
	

w j(t)
wk(t)


 
wi(t)
vi
{1}(t)

	
 
 
Figure 2.  Input and modified vectors by 1-hop and 2-hop node on SOL. 
 
Consequently, using Vi
{1}(t) and  Vi
{2}(t), each node modifies 
and updates its estimated location as the following: 
 
€ 
wi(t +1) = wi(t) + αi⋅ (Vi
{1}(t) +Vi
{2)(t))
t ≤ τ
wi(t) + αi⋅ Vi
{1}(t)
t > τ
⎧ 
⎨ 
⎩ 
               (4) 
 
where τ is a phase threshold and αi(t) is the learning rate of 
node i at step t. αi(t) is defined as follows: 
 
€ 
αi(t) = η⋅ αi(t −1)
(0 < η <1)                       (5) 
 
where η is a positive constant of attenuation. 
[step 3] The current estimated location is periodically 
broadcast to neighbor nodes in a period. The node that 
received the estimated location executes [step 2]. 
As above, each node repeatedly executes [step 2] and 
[step 3], and as a result, the network's original geometry is 
reproduced. 
IV. 
SELF-ORGANIZING LOCALIZATION BASED ON 
NEIGHBOR TOPOLOGY 
The algorithm of SOL works on each node autonomously 
and is composed as follows. 
• 
Node location estimation function: this function 
reproduces the similarity to the network's original 
geometry based on SOMs without anchor nodes. 
104
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

• 
Node location adjustment function: this function 
adjusts the reproduced geometry to the congruence 
with the network's original geometry with two 
anchor nodes and adjusts it to node absolute location 
with three anchor nodes. 
In this section, each function as the algorithm of SOL is 
described. 
A. Node location estimation based on neighbor topology 
As described in section III, based on Euclidean distance 
between nodes, the original localization emphasizes 
graphical features of the topology by 2-hop nodes and aims 
to reproduce the topology. After that, it minimizes the 
difference of Euclidean distance between 1-hop nodes. That 
is, assuming that the Euclidean distance between nodes is 
accurate, the strategy of the original localization inputs a 
large amount of displacement by 2-hop nodes and the 
accurate distance by 1-hop nodes to SOM, and dynamically 
operates SOM. On the other hand, the SOL cannot use 
Euclidean distance as a relation between nodes because of 
the elimination of the distance measurement scheme from 
the original localization. Therefore, the SOL uses hop count 
as the relation between nodes, and its strategy is based on the 
neighbor topology, whose 1-hop neighbor node is nearer 
than the 2-hop neighbor node, and aims to reproduce the 
geometry that meets the neighbor topology between nodes. 
The neighbor topology is much rougher than the Euclidean 
distance provided by the distance measurement scheme; 
therefore, the SOL cannot dynamically operate SOM, and 
must operate SOM gradually. Accordingly, to eliminate the 
inconsistency with the neighbor topology from the 
reproduced geometry, the SOL carefully controls the 
location estimation by the 1-hop and 2-hop neighbor node as 
follows. 
• 
SOL lets dij(t), which is the distance between 1-hop 
neighbor nodes, be constantly 1, which is the 
number of hops. 
• 
SOL estimates the location by 2-hop neighbor nodes 
only when the relative location to 2-hop neighbor 
nodes is inconsistent with the neighbor topology as 
in Fig.1(d) (that is, dij(t)>dik(t)). Because the number 
of hops is inaccurate as a distance between nodes, 
the modified vector Vi
{2}(t) in Fig.1(d) and (3) is a 
large amount of displacement, and is very inaccurate. 
When such a modified vector by 2-hop neighbor 
node is frequently inputted to SOM, SOM oscillates, 
becomes unstable, and then converges to a state far 
from the optimal state. Therefore, SOL sets the 
modified vector as shown in Fig.2(a) only when the 
relative location to 2-hop neighbor nodes is 
inconsistent with the neighbor topology, and lets 
node keep away from 2-hop neighbor nodes 
• 
Next SOL brings node close to 1-hop nodes as 
shown in Fig.2(b). 
From the above, SOL aims to eliminate the inconsistency 
with the neighbor topology, and reproduces network 
topology. Summarizing, on the SOL, each node modifies and 
updates its estimated location as the following: 
 
€ 
Vi
{1}(t) =
1− wi(t) − w j(t)
wi(t) − w j(t)
(wi(t) − w j(t))              (6) 
 
€ 
Vi
{2}(t) = 1+1− wi(t) − wk(t)
wi(t) − wk(t)
(wi(t) − wk(t))           (7) 
 
      
€ 
wi(t +1) =
wi(t) + αi⋅ (Vi
{1}(t) +Vi
{2)(t))
wi(t) − w j(t) > wi(t) − wk(t)
wi(t) + αi⋅ Vi
{1}(t)
otherwise
⎧ 
⎨ ⎪ 
⎩ ⎪ 
         (8) 
 
Original Geometry
Reproduced Geometry
bend
 
Figure 3.  Example of mis-reproduced network geometry. 
vi
{1}(t)

	
 
wi(t)
vi
{2}(t)

	
	 
w j(t)
wk(t)
	
 


 
	

 
 
Figure 4.  Location update based on decreased 1-hop distance. 
In (6), (7) and (8), node j is a 1-hop node from node i, and 
node k is a 2-hop node from node i. 
B. Node location re-estimation 
When the number of neighbor nodes selected as input 
vectors is small, or when the range of neighbor nodes 
selected as input vectors is narrow, the reproduced geometry 
is correct locally, but is inconsistent with the entire geometry 
(mis-reproduction, see Fig.3).  
SOL does not dynamically operate SOM, but aims to 
gradually reproduce network geometry which is narrow, 
using the 1-hop and 2-hop range nodes. Then, it may suffer 
from mis-reproducibility. Consequently, in SOL, each node 
confirms the inconsistency with neighbor topology at the end 
of iteration to measure mis-reproduced geometry as follows. 
105
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

 
€ 
Ii
{2}
Ni
{2} < θ                                        (9) 
 
Ii
{2} is the number of inconsistent 2-hop neighbor nodes on 
node i, Ni
{2} is the number of 2-hop nodes on node i, and θ is 
the threshold of inconsistency. If (9) is not met, the node 
aims to dispel the mis-reproduction as follows. 
• 
Reset the learning rate αi(t) to 1, and re-estimate 
from the current estimated location to correct the 
inconsistency in 2-hop geometry. 
• 
Broadcast the message of resetting the learning rate 
based on the number of message forwardings to 
neighbor nodes. 
• 
The nodes that receive the message resetαi(t) to 
1/(the number-of-message-forwardings), and re-
estimate from the current estimated location to 
correct the inconsistency in 2-hop geometry. And 
they also broadcast the message of resetting the 
learning rate based on the number of message 
forwardings to their neighbor nodes. 
Thus, nodes reset smaller learning rate according as the 
number of message forwardings, and the re-estimation works 
in local range of mis-reproduced node. On the re-estimation, 
SOL decreases 1-hop distance that is used by the location 
update based on 1-hop neighbor node, because SOL brings a 
node closer to 1-hop neighbor node and raises the probability 
which the inconsistency with neighbor node topology is 
eliminated (see Fig.4).  Furthermore, SOL makes smaller 1-
hop distance as the number of re-estimations increases, and 
more strongly aims to eliminate the inconsistency with 
neighbor topology. 
C. Node location Adjustment Function 
It is expected that the reproduced network geometry has 
the geometric property of the network's original geometry; 
therefore, we assume that the reproduced geometry is nearly 
similar to the network's original geometry, and the 
reproduced network geometry is defined and adjusted as 
follows. 
• 
Without an anchor node 
The reproduced geometry is a figure similar to the 
network's original geometry. 
• 
With two anchor nodes 
Leaving the location of the anchor node unknown, 
the network geometry is reproduced.  Then r, 
which is a similar scale, is derived using the 
estimated location and true location of two anchor 
nodes as follows. 
 
€ 
r = dab
Dab
                                    (10) 
 
€ 
dab = wa − wb                               (11) 
 

 
The space in which nodes are deployed is defined as a 
1.0×1.0 plane. Table 1 shows the summary of simulation 
parameters used in the evaluation. 
The similarity and congruence with the network's 
original geometry is evaluated based on (10) and (11) as 
follows. 
 
€ 
rij
M = Mean[rij]
rij = dij
Dij
i, j ∈ NW                 (15) 
 
€ 
rij
V =1− (Mean[rij])2
Mean[rij
2]
                                  (16) 
 
Mean[x] is the average of set x, and NW is the set of nodes 
on the network. The accuracy of absolute location is 
evaluated based on (12) as follows. 
 
€ 
Errave = 1
N
Wi − wi
A
i=1
N
∑
                              (17) 
 
N is the number of nodes, Wi is the true location of node i 
and wi
A is the estimated and adjusted location of node i . 
B. Evaluation of Similarity and Congruence 
0
1
2
3
4
5
6
7
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
100
200
300
400
500
Mean[r
ij]
Variance[r
ij]
Mean[r
ij]
Variance[r
ij]
Number of Nodes
 
Figure 5.  Dependence of rij
M and rij
V on number of nodes without anchor 
node. 
Figure 5 shows the dependence of rij
M (broken line) and 
rij
V (solid line) on the number of nodes (50~500 nodes) 
without an anchor node. The rij
M and rij
V shown are averaged 
over 20 network topologies generated with randomly 
deployed nodes. When the number of nodes is smaller than 
100, rij
V is a large value. In that case, the original geometry is 
sparse or fragmented because the density of nodes is low. 
Therefore, SOL cannot effectively estimate a network 
geometry in which the density of nodes is low. When the 
number of nodes exceeds 150, rij
V becomes small, and the 
estimated geometry is very near to being similar to the 
original geometry. When the number of nodes exceeds 250, 
rij
V approaches 0.01, and the estimated geometry is very 
similar to the original geometry. rij
M is not 1 for any case, 
regardless of number of nodes. Therefore, the scale of 
reproduced geometry is different from the original geometry, 
but is graphically similar to the original geometry. 
Figure 6 shows rij
M and rij
V on the number of nodes 
(50~500 nodes) with two anchor nodes. The two anchor 
nodes are respectively the nearest node to the origin and the 
farthest node from the origin. When the number of nodes 
exceeds 150, rij
M approaches 1 and rij
V approaches 0.01. Then, 
the reproduced and adjusted geometry is nearly congruent 
with the network's original geometry. 
0.8
0.9
1
1.1
1.2
1.3
1.4
1.5
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
100
200
300
400
500
Mean[r
ij]
Variance[r
ij]
Mean[r
ij]
Variance[r
ij]
Number of Nodes
 
Figure 6.  Dependence of rij
M and $ rij
V on number of nodes with two 
anchor nodes. 
C. Evaluation of absolute location 
0
0.05
0.1
0.15
0.2
0.3
0.4
0.5
0.6
0.7
100
200
300
400
500
SOL
DV-hop
Average Location Error
Number of Nodes
 
Figure 7.  Dependence of average location error on number of nodes with 
three anchor nodes. 
To evaluate accuracy of the absolute node location, 
compare its accuracy with that of DV-Hop in accordance 
with (17). DV-Hop can estimate node location with just three 
anchor nodes and without special distance measurement and 
previous information on the space in advance. The others do 
not meet the above restriction. DV-Hop calculates the 
average distance in 1 hop using the hop count between 
anchor nodes based on the minimum hop route and the 
distance between anchor nodes, and it estimates node 
107
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

location with triangulation that uses the location of each 
anchor node and the calculated distance to each anchor node. 
Figure 7 shows the comparison of SOL with DV-Hop on 
average location error in accordance with (17). The three 
anchor nodes are respectively the nearest node to the origin, 
the farthest node from the origin, and the farthest node from 
the above two anchor nodes.  
 
Original Geometry
Reproduced Geometry  
Figure 8.  Comparison of reproduced geometry with original geometry on 
200 nodes. 
When the number of nodes is smaller than 100, SOL 
location accuracy and DV-Hop location accuracy are low. 
On a low-density network, SOL cannot effectively reproduce 
network geometry, and DV-Hop cannot estimate node 
location. Furthermore, the route based on the minimum hops 
becomes a zigzag or bent path rather than a straight-line, and, 
thus, the calculated average distance on 1 hop is inaccurate. 
Therefore, the accuracy on the estimated node location of 
DV-Hop becomes low. Any localization that depends on 
network topology has the problem that accuracy decreases in 
low-density networks. 
When the number of nodes exceeds 200, the average 
location error of DV-Hop approaches approximately 0.1, and 
that of SOL approaches approximately 0.04. Therefore, the 
accuracy of SOL is much superior to that of DV-Hop (see 
Fig.8). 
VI. 
CONCLUSION 
In this paper, Self-Organizing Localization for wireless 
sensor networks was proposed. SOL requires no distance 
measurement schemes and no advanced information on the 
space, and its dependence on anchor nodes is very low.  On 
the suitable density of nodes, SOL achieves the following 
results by using SOM. 
• 
Without anchor nodes, it reproduces a geometry very 
similar to the network's original geometry. 
• 
With two anchor nodes, it reproduces a geometry 
nearly congruent with the original, that is, it derives 
relative node locations on the network. 
• 
With just three anchor nodes, it derives absolute 
node locations with high accuracy 
Given the above properties, SOL can be applied to any 
space and any sensor node. 
 
REFERENCES 
 
[1] P. Bahl and V. N. Padmanabhan, “IRADAR: An In-Building 
RF-based User Location and Tracking System”,  In Proc. 
IEEE InfoCom 2000, vol. 2, 2000, pp. 775–784.  
[2] R. Want, A. Hopper, V. Falcao, and J. Gibbons, “The Active 
Badge Location System”, ACM Trans. on IS, vol.10, no. 1, 
1992, pp. 91–102. 
[3] J. Hightower, G. Boriello, and R. Wat, “SpotOn: An indoor 
3D Location Sensing Technology Based on RF Signal 
Strength”, University of Washington CSE Report 200-02-02, 
2000. 
[4] A. Harter, A. Hopper, P. Steggles, A. Ward, and P. Webster, 
“The 
Anatomy 
of 
a 
Context-Aware 
Application”, 
MobiCom1999, 1999. 
[5] A. Savvides, C. Han, and M. Srivastava,“Dynamic Fine-
Grained Localization in Ad-Hoc Networks of Sensors”, In 
Proc. IEEE MobiCom 2000, 2000, pp. 1–14. 
[6] M. Minami, Y. Fukuji, K. Hirasawa, S. Yokoyama, M. 
Mizumachi, H. Morikawa, and T. Aoyama, “'DOLPHIN: A 
Practical Approach for Implementing a Fully Distributed 
Indoor Ultrasonic Positioning System”, In Proc. ACM 
Ubicomp 2004, 2004, pp. 166–179. 
[7] N. Priyantha, A. Miu, H. Balakrishman, and S. Teller,”The 
Cricket Compass for Context-aware Mobile Applications”, 
MobiCom2001, 2001. 
[8] N. Beutel, J. Heidermann, and D. Estrin, “GPS-less Low Cost 
Outdoor Localization for Very Small Devices”, IEEE 
Personal Comm. Magazine, vol. 7, no. 5, 2000, pp. 28–34. 
[9] D. Niculescu and B. Nath, “DV-based Positioning in Ad Hoc 
Networks”, Telecommunication Systems, vol. 22, 2003, pp. 
267-280 
[10] T. He, C. Chung, B. M. Blum, J. A. Stankovic, and T. F. 
Abdelzaher, “Range-Free Localization and Its Impact on 
Large Scale Sensor Networks”, ACM Trans. Embedded, vol. 
4, no. 4, 2005, pp. 877-906. 
[11] E. Ertin and K. Priddy, “Self-localization of wireless sensor 
networks using self-organizing maps”, Proceedings of SPIE,  
2005. 
[12] G. Giorgetti, S. K. S. Gupta, and G. Manes, “Wireless 
localization using self-organizing maps”, In Proceedings of 
the 6th international conference on Information processing in 
sensor networks (IPSN '07), 2007, pp. 293-302. 
[13] Y. Takizawa, P. Davis, M. Kawai, H. Iwai, A. Yamaguchi, 
and S. Obana, “Self-Organizing Location Estimation Method 
Using Received Signal Strength”, IEICE Trans. on Comm., 
vol. E89-B, no. 10, 2006, pp. 2687-2695. 
[14] T. Kohonen, “Self-Organizing Maps 3rd ed”, Springer, 2000. 
[15] E. Bonabeau and F. Henaux, “Self-organizing maps for 
drawing large graphs”, Information Processing Letters, vol. 
67, no. 4, 1998, pp. 177-184. 
 
108
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-289-9
UBICOMM 2013 : The Seventh International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies

