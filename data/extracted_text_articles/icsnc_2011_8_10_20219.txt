Energy Efﬁcient Target Tracking in Wireless Sensor
Networks with Limited Sensing Range
Oualid Demigha ∗, Hamza Ould Slimane∗, Abderahim Bouziani∗ and Walid-Khaled Hidouci †
∗Ecole Militaire Polytechnique
Bordj El-Bahri, Algiers 16111. Algeria
Email: o demigha@esi.dz, hamzabydos@gmail.com, abdou.bouzbouz@gmail.com
†Ecole Nationale Superieure d’Informatique
Oued-Smar, Algiers. Algeria
Email: w hidouci@esi.dz
Abstract—In this paper, we propose a dynamic clustering
protocol coupled with a consensus-based Kalman ﬁlter algorithm
to self-organize Wireless Sensor Networks for localized tracking
of a single moving target. Our proposed scheme takes opportunity
from the fact that the target presence is a localized event.
Therefore, We consider a WSN with limited sensing range to
design a target tracking scheme using low-cost limited-energy
nodes. Simulation results show a clear improvement in the
network energy consumption, however state estimation quality
degrades slightly compared with centralized approaches and
other tracking schemes with limited sensing range that do not
limit the set of tracking nodes. Our tracking scheme reduces
the number of tasking nodes which reduces the network energy
consumption.
Index Terms—Energy conservation, dynamic clustering, local-
ized target tracking, Kalman consensus ﬁlter, limited sensing
range.
I. INTRODUCTION
Wireless Sensor Network (WSN) is an emerging technology
that consists of hundreds or thousands of tiny low-cost energy-
limited nodes that have small capacities of sensing, processing
and communication via radio medium. Typically, these nodes
report captured data to a base station for further processing.
They are equipped with a low-cost small-capacity batteries
which are, in most cases, non-rechargeable and irreplaceable.
Therefore, network lifetime is considered as an important issue
for many key applications such as: target tracking [1].
In contrast to high-cost sophisticated surveillance technolo-
gies, WSNs use cheap technology that do not rely on any
centralized infrastructure.
This technology which aims at providing the same perfor-
mance as do traditional systems, brings up new challenges
related to data processing algorithms, communication systems
and network organization. In many cases, collaboration among
nodes helps at solving these challenging open-issues.
In contrast to single-node tracking systems, collaborative
target tracking fuses data transmitted by many nodes and
produces state-estimation of the target. However, these mea-
surements are noisy, redundant and non-synchronized and
the inter-node communication is an energy-consuming task.
Furthermore, neither reliable communication protocols nor
complex data processing algorithms can be implemented on
a sensor node because of its limited processing and commu-
nication capacities.
Therefore, energy efﬁciency in target tracking is a key
issue in WSN and it can be achieved using different methods
[2]. One of them is the prediction-based schemes coupled
with selective activation. Sensor nodes can collaboratively
generate predictions of the target location by executing an
in-network light-weight data fusion algorithm. The gain of
such algorithms is two-fold: (i) it generates state-estimates of
the target, and (ii) it produces state-predictions for the next
sampling period which are used to activate selected nodes
(implicitly or explicitly by sending an activation message).
In many cases, this method requires collaboration among
nodes to provide accurate data in presence of noisy sensor
measurements transmitted over noisy communication links.
Furthermore, sensor readings from the low-cost limited sens-
ing range components are, in fact, less accurate but they are
close to the target which, in turn, can be detected by more than
one sensor at the same time. Hence, the sensor network can
take proﬁt form this data redundancy to improve the tracking
quality.
In this paper, we consider a WSN with limited sensing
range that localizes the data fusion algorithm within the
target detection zone and self-organizes nodes within dynamic
clusters that move along the target trajectory. It is interesting
to study this type of WSN because they help at minimizing the
network energy consumption and provide acceptable tracking
quality by selecting the appropriate tasking nodes.
This paper is organized as follows: in Section II, we give
some deﬁnitions and system models. In Section III, we de-
scribe some related works proposed in the literature to reduce
energy consumption via distributed Kalman ﬁlter algorithm.
In Section IV, we present our proposed method that consists
of two main components: (1) the Kalman consensus ﬁlter and
(2) the dynamic clustering protocol. In Section V, we discuss
the simulation results and the tradeoff between the energy
consumption and the estimation quality. Finally, in Section
VI, we conclude the paper.
181
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

θ
ρ
x
y
r
re
target (q)
sensor (s)
Fig. 1.
Probabilistic detection model
II. BACKGROUND
In the following subsections, we give some basic deﬁnitions
of the WSN model and the centralized Kalman ﬁlter. After that
we describe the mathematical model of the distributed Kalman
ﬁlter adopted in our proposed method.
A. System Model and Assumptions
We model the wireless sensor network by a non-oriented
graph G(V, E) where V
= {s1, s2, · · · , sn} is the set of
nodes and E = {(si, sj) | ∥si − sj∥ ≤ Rc} is the set of
communication links. Rc is the communication range of each
node and ∥si − sj∥ is the Euclidean distance between nodes
si and sj. We assume that the sensing range Rs is uniform
among all the nodes and it veriﬁes the condition required for
coverage and connectivity constraints, i.e., Rc ≥ 2Rs.
We suppose that the target state is a 4-tuple vector:
X = (x, y, ˙x, ˙y) ∈ R4
where (x, y) and ( ˙x, ˙y) are respectively, the target position
coordinates and its velocity along X and Y axes. Each node
measures the distance to the target ρ and the angle between the
X axis and the target position vector θ. For target detection,
we use a probabilistic model expressed by the equation 1:
ps(q) =







0
if r + re ≤ ∥s − q∥
e−α(∥s−q∥−(r−re))β
if r − re ≤ ∥s − q∥ ≤ r + re
1
if r − re ≥ ∥s − q∥
(1)
where ∥s − q∥ is the Euclidean distance between sensor s
target q, r is the sensing range of s and re is the sensing error
(re ≪ r). α and β are constants (see Figure 1).
We assume also that nodes are initially in the sleep state
which guarantees minimum energy consumption. In fact, in
this state, all the nodes’ hardware units are OFF, except the
processing unit and a low-power paging channel to receive
wake-up messages. Upon receiving a wake-up message, nodes
start up all their hardware units. Nodes are supposed aware of
their geographic positions and each node maintains a list of
its neighboring nodes.
The ﬁrst target detection is supposed done successfully and
the ﬁrst activation is performed via an external activation
message.
B. Centralized Kalman Filter
We assume that the target state and the measurement models
are respectively deﬁned by the following linear equations:
xk+1 = Akxk + Bkuk + wk
zk = Hkxk + vk
where: A is the matrix that relates the previous target state to
the current one, B is the matrix that relates commands to the
current target state, wk is the system noise, H is the matrix
that relates the measurements to the current target state and
vk is the measurements’ noise at time step k. xk is the target
state vector at time step k.
We suppose that w and v are white noises with Q and R co-
variances respectively: p(w) ∼ N(0, Q) and p(v) ∼ N(0, R).
Also, we suppose that matrices A and H are detectable and
all matrices A, B, H, Q and R are time-independent. For
Constant-Velocity target model, matrix Ak and Hk have these
values:
Ak = A =





1
0
1
0
0
1
0
1
0
0
1
0
0
0
0
1




 , Hk = H =
 
1
0
0
0
0
1
0
0
!
We denote ˆx−
k and ˆxk as the a priori and the a posteriori
target state estimations at the time step k, respectively.
As same, the a priori and a posteriori estimation error
covariance matrices P −
k , Pk at time step k are deﬁned by:
P −
k = E[(xk − ˆx−
k )(xk − ˆx−
k )T ]
Pk = E[(xk − ˆxk)(xk − ˆxk)T ]
The Kalman gain factor at time step k is deﬁned by:
Kk = P −
k HT
k (HkP −
k HT
k + Rk)−1
We summarize the Kalman model by the following recursive
steps:
1) Prediction Step:
• Next step state prediction:
x−
k+1 = Akˆxk + Bkuk
(2)
• Next step error covariance prediction:
P −
k+1 = AkPkAT
k + Qk
(3)
2) Update Step:
• Kalman gain:
Kk = P −
k HT
k (HP −
k HT + R)−1
(4)
• Estimation update:
ˆxk = ˆx−
k + Kk(zk − Hkx−
k )
(5)
• Error covariance update:
Pk = (I − KkHk)P −
k
(6)
182
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

High-pass
consensus
ﬁlter
High-pass
consensus
ﬁlter
Kalman
micro-
ﬁlter
measurements
covariances
ˆx
Fig. 2.
Micro-ﬁlter architecture of a DKF node
C. Consensus on Kalman micro-ﬁlters
Decentralized Kalman ﬁlter gives target state estimation
using a set of k micro-ﬁlters. This model requires all-to-
all communications. In [3], the authors propose a Distributed
Kalman Filter (DKF) that uses high-pass and low-pass ﬁlters
to fuse data. It can fuse heterogeneous data obtained from
non-linear sensing model:
yi = hi(xk) + vk
i
All the nodes have the same architecture as illustrated in
Figure 2.
The system to be observed is modeled as follows:
xk = Akxk−1 + Bkwk and yk
i = Hk
i xk + vk
i
In addition to the Kalman ﬁlter model equations described
in Section II-B, two new values are included into the model
namely: (1) the fusion of the error covariance inverse matrix
and (2) the fusion of the measurements. These two values are
expressed respectively by:
Sk =
Pn
i=1 HkT
i
R−1
i Hk
i
n
and
yk =
Pn
i=1 HkT
i
R−1
i yk
i
n
Each node executes the following calculations:
M k
i = (P −1
i,k + Sk)−1
ˆxk = ˆx−
k + M k
i (yk − Skˆx−
k )
P k+1
i
= AkM k
i AT
k + BkQk
i BT
k
ˆxk+1 = Akˆxk
with: Qk
i = nQk and P 0
i
= nP0. The estimations are
identical in all nodes, i.e.,
ˆxk
i = ˆxk, ∀i
The ﬁlter dynamic is expressed by equation 7 (for more details
see [4]):
(
˙qi = −β ˆLqi − β ˆLui
pi = qi + ui
(7)
where ˆL = L N Im is the m-dimension graph laplacian, ui is
the node input, qi is the Kalman ﬁlter state and β (β > 0) is the
gain (it should be big enough for random deployed topologies).
The ﬁlter output is computed according to equation 8:
(
˙qi = β P
j∈Ni(qj − qi) + β P
j∈Ni(uj − ui)
β > 0
yi = qi + ui
(8)
With Ni is the ith node’s neighbors set (the reader could refer
to [5] to learn more about ﬁlter discreatization in connected
graphs).
III. RELATED WORK
The Kalman Consensus Filter (KCF) is proposed in [3]. It
uses a set of k Kalman micro-ﬁlters to fuse heterogeneous data
received from sensors with non-linear sensing models. There
are two variants of this approach: one fuses measurements
and the other fuses estimations. In the measurements’ fusion
variant, low-pass and band-pass ﬁlters are modiﬁed into high-
gain high-pass ﬁlters. The other variant fuses estimations
instead of measurements in order to accelerate the consen-
sus convergence. This ﬁlter uses latency-generating power-
consuming complex matrix computations which may fail at
detecting fast targets. Furthermore, the algorithm makes the
assumption that all nodes can observe the target which may
not hold all the time.
In [6], the authors use biparti graphs to distribute the
Kalman Filter (KF) model. In this approach, the KF model
is distributed on the whole network and the global model
is decomposed into nl (nl ≪ n and n is the network size)
reduced sub-models, each one is executed by a micro-ﬁlter
in a single node. Each node computes its local estimation
and fuses it with the received estimations. Biparti graphs are
used when dependencies exist between these sub-models. This
method is suitable for estimations’ fusion because it includes
data correlation between local estimations.
Distributed Kalman ﬁlter with Gossip communications is
proposed in [7]. Each node can sense only a part of the
observed phenomenon, i.e., each node can measure or estimate
a subset of the target state attributes and communicates them
to its neighbors and then deduces the missed attributes. There
are two drawbacks to this method: (1) message communication
complexity, i.e., nodes exchange many messages (estimations
and error covariance matrix) , and (2) topology-dependency
model, i.e., strong network connectivity is required for esti-
mations’ communication between neighboring nodes.
Olfati et al. propose a distributed Kalman ﬁlter with limited
sensing range [8] in which nodes implement local micro-ﬁlters
and reach a consensus using message passing communication
model. This scheme makes the assumption that passive nodes
(nodes that do not detect the target) are considered with no
contribution. Even that, they are included in the fusion step.
Instead of sending long messages, authors of [9] propose
that nodes send only one bit information. A quantiﬁcation
function is deﬁned to represent node’s estimation and the ﬁlter
is then executed in two distinct procedures: an observation-
transmission procedure and a reception-estimation procedure.
183
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

Communication
Sensing
Prediction-based
scheme
Estimation-prediction
Network self-organization
Collaborative target tracking
Fig. 3.
Problem characterization
The main disadvantage of such approaches is that the quantiﬁ-
cation function may induce information loss when lossy links
are present in the network.
IV. PROPOSED METHOD
All the above-mentioned approaches do not consider the
problem of limiting the number of nodes participating in the
tracking task and suppose that the target can be observed
by the whole network. However, these two assumptions do
not hold in all cases: i.e., in a 2D ground deployed WSN,
only nodes that are close to the phenomenon can sense it;
the other nodes can not. In addition, low-power nodes have
limited sensing ranges and can communicate with a reduced
set of neighbors.
This aspect can be exploited to reduce the energy con-
sumption in a target tracking application. Figure 3 shows the
relationship between the sensing component and the communi-
cation component in a sensor node that uses a prediction-based
scheme. A light-weight estimation-prediction algorithm can be
used to estimate the target state and predict its next position.
This helps at waking-up the most appropriate nodes to track
the target and at best organizing the network communications.
Consequently, The other nodes remain in the sleep state which
saves much more energy than in a periodic sampling-based
target tracking scheme.
Indeed, periodic sampling provides more accurate data but it
greatly reduces the energy resources of the nodes. Prediction-
based schemes are more appropriate in a dense network where
not all nodes are needed to be woken-up.
Therefore, two issues are to be considered here: (1) the
estimation algorithm should be distributed over a subset of
nodes that are close to the target, and (2) the tracking group
should be dynamic depending on the target dynamic model. To
resolve these issues we propose a Distributed Kalman Filtering
approach with Dynamic Clustering (DKF DC).
Our method is inspired by the work in [8], but instead of
tasking all the network nodes, it uses a dynamic clustering to
limit messages exchanges between nodes participating in the
estimation process. Our clustering protocol consists of two
phases: (1) leader election phase and (2) cluster reconﬁgura-
tion phase.
Leader election is executed among active nodes that are
close to the target. The other nodes stay inactive to save their
Sleep
Non-Adhered
Waiting
Member
Temporary Member
Leader
Timer expired
send(MSG WAKEUP)
or
send(MSG CREATECLUSTER)
recev(MSG NOTCH)
send(MSG NOTCH)
send(MSG CREATECLUSTER)
update candidate list
recev(MSG JOIN) or re-
cev(MSG QUITCLUSTER)
and update member list
recev(MSG CHREADY)
or
re-
cev(MSG CREATECLUSTER)
and send(MSG JOIN)
Timer
expired
or
ﬁrst candidate is the
current node
recev(MSG CHREADY)
send(MSG JOIN)
Timer expired and
ﬁrst candidate ̸=
the current node
recev(MSG CHREADY)
send(MSG JOIN)
recev(MSG JOIN)
send(MSG JOIN)
(1)
(2)
(8)
(3)
(9)
(7)
(4)
(6)
(13)
(5)
(12)
(10)
(11)
(14)
(1)
recev(MSG INTRUSION)
or
recev(MSG WEKEUP)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
Timer expir ID =
top list candidate
Fig. 4.
State-transition diagram of the proposed clustering protocol
energy resources. Therefore, nodes wake-up only when they
receive activation messages to adhere to the current cluster.
Unlike centralized fusion methods, the cluster-head in our
method is not considered as a fusion center but as a cluster
manager that is responsible for its reorganization. Hence,
communications are performed between all the active nodes
and not only between the active nodes and the cluster-head.
Continuous target tracking is guaranteed by allowing a
subset of the last cluster members to adhere to the current
cluster. That is what ensures the propagation of the estimation
information along the target trajectory.
A. Cluster Formation and Leader Election
When a node receives an external intrusion message
MSG INTRUSION that contains the target state estimation
recorded by some border nodes, it wakes-up and triggers
the leader election phase. First, it sends a wake-up message
MSG WAKEUP to all its neighboring nodes, then it broad-
casts a cluster creation message MSG CREATECLUSTER
that contains the ﬁrst detected position.
Nodes that receive a MSG CREATECLUSTER message
compute a local decision value using measures like: (1) the
distance between the node and the target, (2) the last estimation
quality measured by the covariance matrix Pk issued from the
Kalman ﬁlter or (3) the residual energy of the node.
As illustrated in the state-transition diagram in Figure 4,
a node leaves the non-adhered state to go either back to the
sleep state when a waiting timer expires or to the waiting
state upon receiving a MSG CREATECLUSTER message.
The node within this state, computes the decision value and
broadcasts it to its neighbors. If it receives a value sent from
some neighboring node then it updates its candidates’ list that
contains couples (sender, value). Another timer is alarmed
to wait for receiving such values. After its expiration, the
waiting node decides to become a leader if it is the top list
candidate. Otherwise, it becomes a temporary member. During
the waiting time, if the node receives a MSG CHREADY
184
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

message that contains the cluster-head ID, then it adheres as
a member to this cluster.
Temporary-member node discards the top list candidate and
waits for receiving a MSG CHREADY message to adhere to
that cluster. If it does not receive such message, it becomes
leader if it is the top list candidate.
Similarly, a member node leaves this state upon receiving
a MSG NOTCH message sent by a leader. Consequently, it
goes back to the non-adhered state.
B. Cluster Reconﬁguration
The leader node checks the target state estimation to decide
about the cluster reconﬁguration. When it detects that the
target is lost, then it performs the following two tasks:
1) Sending back a MSG JOIN message to force the sender
of a MSG CREATECLUSTER or a MSG CHREADY
message to adhere to its cluster.
2) Updating the cluster members list upon receiving a
MSG JOIN or a MSG QUITCLUSTER messages.
A leader leaves this state when one of the following events
occurs:
• Receiving a MSG JOIN message to become a member
of the message sender’s cluster.
• Losing the target: the cluster should be reconﬁgured and
the nodes return back to the non-adhered state.
The cluster reconﬁguration operation consists of updating
the candidates’ list and informing member nodes that the
leadership has changed using a MSG NOTCH message. Upon
receiving this message, nodes trigger a new election process
that may include previous members.
On the contrary to the scheme proposed in [10], our
dynamic clustering protocol prevents multi-cluster tracking by
letting only direct neighboring nodes to adhere to the cluster
and force the other nodes to return back to the sleep state.
After constructing the tracking cluster, the data fusion phase
comes into play to generate target state estimation.
C. Target State Estimation
The member nodes of the current cluster perform the
sampling to detect the target. They (including the leader node)
compute their information matrix ui and Ui as follows:
ui = HT
i R−1
i zi
(9)
Ui = HT
i R−1
i Hi
(10)
Equations 9 and 10 contain respectively the measurements
information and the measurements errors information. The
Kalman ﬁlter fuses estimation errors to generate updated
state estimations. After that, each node broadcasts a message
mi = {ui, Ui, ¯xi} containing the measurements, the mea-
surements errors and the last state estimation ¯xi to all the
cluster members. Each node waits then for receiving such
messages from the other members to fuse the information
matrix and the vectors yi and Si as follows: yi = P
j∈Ji uj
and Si = P
j∈Ji Uj.
At the end of the data fusion phase, each node estimates
the target state using KCF:
Mi = (P −1
i
+ Si)−1
(11)
ˆxi = ¯xi + Mi(yi − Si¯xi) + γMi
X
j∈Ni
(¯xj − ¯xi)
(12)
After that, nodes update their respective micro-ﬁlter states
using equations 13 and 14:
Pi = AMiAT + BQBT
(13)
¯xi = Aˆxi
(14)
The leader checks the distance to the target and eventually the
number of the active nodes in its cluster or the residual energy
to decide about the cluster reconﬁguration. Consequently, it
updates its list of candidates and assigns the leader task to the
most appropriate member.
V. SIMULATIONS AND RESULTS
We use TOSSIM [11] to validate our proposed method by
simulation. TOSSIM is a discrete-time simulator of TinyOS
operating system for wireless sensor motes. We compared our
method with three different target tracking schemes discussed
in Section III which are: (1) centralized Kalman ﬁlter (CKF)
[12], (2) distributed Kalman ﬁlter with limited sensing range
(DKF LSR) [8], (3) distributed Kalman ﬁlter with gossip
communications (DKF GOSSIP) [7]. The CKF is considered
as the base reference for our comparisons.
A. Simulation Setup
Simulation parameters that we vary are: (1) the sampling
period, (2) the network size (or network density) and (3) the
target velocity. The communication range is set to 50m, the
sensing range is set to 15m and the target model is Gauss-
Markov.
The nodes’ energy consumption is evaluated using POWER-
TOSSIM and the estimation quality is measured by the mean
square error between the real target position and estimated
position:ϵ =
p
(x − ˆx)2 + (y − ˆy)2.
In the following subsections, we present the simulation
results we have obtained regarding two metrics, namely:
energy consumption and estimation quality.
B. Energy Consumption
First, we simulate a 100 nodes WSN that consists of
randomly deployed on a 2D area of 200 × 200m2 surface.
By varying the sampling period within the set of values from
1s to 3s we obtain the graphs in the ﬁgure 5.
As shown in this ﬁgure, the network average energy con-
sumption of the different simulated schemes is inversely pro-
portional to the sampling period time because of the number of
data messages exchanged between nodes. CKF and DKF LSR
consume much more energy than DKF GOSSIP and our
method DKF DC because of the centralized nature of CKF
and the non-limited number of nodes that participate in the
target state estimation in DKF LSR. The reduced network
185
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

energy consumption (mJ)
8,800
9,000
9,200
9,400
9,600
9,800
sampling period (s)
1
1.5
2
2.5
3
DKF_DC
DKF_LSR
DKF_GOSSIP
CKF
Fig. 5.
Energy consumption of the network vs. Sampling period
 
energy consumption (mJ)
9,200
9,300
9,400
9,500
9,600
9,700
9,800
9,900
network size 
100
120
140
160
180
200
220
240
DKf_DC
DKf_LSR
CKF
DKF_GOSSIP
Fig. 6.
Energy consumption of the network vs. Network density
energy consumption in DKF DC is due to the fact that
the dynamic clustering protocol limits the number of nodes
involved in the tracking task.
We also evaluate the network energy consumption by vary-
ing the network size within {225, 150, 100} and setting the
deployment area surface to 200×200m2. The sampling period
is set to 1s. We obtain the results in ﬁgure 6, in which we
observe that the dense nature of a WSN inﬂuences the network
energy consumption. In CKF and DKF LSR methods, the
number of tasking nodes is high which induces an excessive
energy consumption because each node executes a sensing
operation every tracking step. Sensing and communication
energy consumption is high than computation consumption
that is what explains why DKF DC outperforms these two
methods.
C. Estimation Quality
The estimation quality of CKF, DKF DC and DKF LSR
schemes are evaluated for different sampling periods (see
Figures 7, 8, 9).
As we can see in the three ﬁgures, the estimation quality
of our method is less than those of CKF and DKF LSR,
and CKF outperforms all the other schemes in respect to the
different sampling periods. In our method, the reduced set of
participating nodes in the estimation process may decrease the
total nodes’ utility when less-appropriate nodes are chosen.
Therefore, including all the network nodes in the estimation
process and considering a uniform distributed noise model,
this improves the estimation quality and convergence, because
much data are fused despite the fact that they contribute or not
in the estimation. Picks can be also observed on the graphs of
estimation error (m)
0
2
4
6
8
10
12
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
DKF_LSR
CKF
DKF_DC
Fig. 7.
Estimation quality for a 1s sampling period
estimation error (m)
0
2
4
6
8
10
12
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
DKF_LSR
CKF
DKF_DC
Fig. 8.
Estimation quality for a 2s sampling period
estimation error (m)
0
10
20
30
40
50
60
70
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
CKF
DKF_DC
DKF_LSR
Fig. 9.
Estimation quality for a 3s sampling period
DKF DC due to the cluster reconﬁguration process. Figure 9
shows that with a large sampling period, our method presents
poor estimation quality because of the latency generated by
the clustering protocol. This can be considered as a drawback
of DKF DC.
Finally, the estimation quality of CKF, DKF LSR and
DKF DC schemes when varying the target speed within
{1m/s, 2m/s, 4m/s} is presented in Figures: 10, 11, 13,
respectively.
In ﬁgure 10, we can see that the estimation error of CKF
decreases for different target speeds. Indeed, we realize that
the Kalman ﬁlter presents some picks in the beginning of
the estimation process, but they disappear after that and the
estimation error converges to zero due to the recursive nature
of KF. Figure 11 shows that for targets with relatively low
speeds, the estimation error of DKF DC converges to zero.
However, when the target speeds up, it overcomes the cluster
186
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

estimation error (m)
0
2
4
6
8
10
12
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+051.2e+051.4e+051.6e+05
v1 = 1 m/s
v2 = 2 m/s
v3 = 4 m/s
Fig. 10.
CKF estimation quality vs. Target velocity
estimation error (m)
0
10
20
30
40
50
60
70
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
v1 = 1 m/s
v2 = 2 m/s
v3 = 4 m/s
Fig. 11.
DKF DC estimation quality vs. Target velocity
estimation error (m)
0
2
4
6
8
10
12
14
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
v3 = 4 m/s
v2 = 2 m/s
v1 = 1 m/s
Fig. 12.
DKF LSR estimation quality vs. Target velocity
reconﬁguration process. Thus, we observe a degeneration of
the estimation quality for targets with velocity v3 = 4m/s.
A recovery process should be setup here to deal with this
problem. The estimation error of DKF LSR is presented in
ﬁgure 13. As we can see, this method converges also for
different target speeds but in a slow rate compared with
CKF, because the state vector and the covariance matrix are
exchanged between large and large sets of nodes when the
simulation progresses.
We show in ﬁgure 13 the convergence speed of the different
simulated methods. We see that the estimation error of all
the methods converges to zero but with different rates. CKF
converges with high speed than the other methods.
VI. CONCLUSION AND FUTURE WORK
The energy problem remains a key issue for emerging WSN
applications such as target tracking. Our distributed Kalman
ﬁltering method coupled with dynamic clustering protocol
estimation error (m)
0
2
4
6
8
10
12
simulation time (ms)
0
2e+04 4e+04 6e+04 8e+04 1e+05 1.2e+051.4e+051.6e+05
CKF
DKF_DC
DKF_LSR
Fig. 13.
Estimation quality of the different schemes
(DKF DC) helped at reducing the network energy consump-
tion in WSN with limited sensing range. We prevented nodes
from waking up periodically and limited the selection process
within the area close to the target which we organize as a
cluster. We manage then this cluster to follow-up the target
trajectory. We improved the energy efﬁciency of the network
but the estimation quality has slightly degraded. Including
the sensing capabilities of nodes into the selection process
and integrating a recovery process when losing targets with
complex state model appear as the most promising track for
future work.
REFERENCES
[1] I. Akyildiz, W. Su, Y. Sankarasubramaniam, and E. Cayirci, “Wireless
sensor networks: a survey,” Computer networks, vol. 38, no. 4, pp. 393–
422, 2002.
[2] G. Anastasi, M. Conti, M. D. Francesco, and A. Passarella, “Energy
conservation in wireless sensor networks: A survey,” Ad Hoc Networks,
vol. 7, no. 3, pp. 537–568, 2009.
[3] R. Olfati-Saber, “Distributed kalman ﬁlter with embedded consensus
ﬁlters,” in Proceedings of the 44th IEEE Conference on Decision and
Control, and the European Control Conference.
IEEE Computer
Society, Dec. 2005, pp. 8179–8184.
[4] D. Spanos, R. Olfati-Saber, and R. Murray, “Dynamic consensus on
mobile networks,” in The 16th IFAC World Congress, Prague, Czech,
2005.
[5] R. Olfati-Saber, J. Fax, and R. Murray, “Consensus and cooperation in
networked multi-agent systems,” Proceedings of the IEEE, vol. 95, no. 1,
pp. 215–233, 2007.
[6] U. A. Khan and J. M. F. Moura, “Distributed kalman ﬁlters in sensor
networks: Bipartite fusion graph,” SSP, 2007.
[7] S. Kar, “Large scale networked dynamical systems: Distributed infer-
ence,” Ph.D. dissertation, Carnegie Mellon University Pittsburgh, PA,
May 2010.
[8] R. Olfati-Saber and N. F. Sandell, “Distributed tracking in sensor
networks with limited sensing range,” in American Control Conference,
2008.
IEEE, Jun. 2008, pp. 3157–3162.
[9] A. Ribeiro, G. B. Giannakis, and S. I. Roumeliotis, “Soi-kf: Distributed
kalman ﬁltering with low-cost communications using the sign of inno-
vations,” IEEE Transactions on Signal processing, vol. 54, no. 12, pp.
4782–4795, Dec. 2006.
[10] H. Medeiros, J. Park, and A. C. Kak, “Distributed object tracking using a
cluster-based kalman ﬁlter in wireless camera networks,” IEEE Journal
of Selected Topics in Signal Processing, vol. 02, no. 04, pp. 448–463,
Aug. 2008.
[11] P. Levis, N. Lee, M. Welsh, and D. Culler, “Tossim: accurate and
scalable simulation of entire tinyos applications,” in Proceedings of the
1st international conference on Embedded networked sensor systems.
ACM, 2003, pp. 126–137.
[12] G. Welch and G. Bishop, “An introduction to the kalman ﬁlter,”
University of North Carolina at Chapel Hill, Chapel Hill, NC, 1995.
187
ICSNC 2011 : The Sixth International Conference on Systems and Networks Communications
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-166-3

