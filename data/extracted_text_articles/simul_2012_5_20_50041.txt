A Flexible Analytic Model for the Design Space Exploration of Many-Core
Network-on-Chips Based on Queueing Theory
Erik Fischer, Albrecht Fehske, and Gerhard P. Fettweis
Vodafone Chair Mobile Communications Systems
Technische Universit¨at Dresden
Dresden, Germany
Email: {erik.ﬁscher, albrecht.fehske, fettweis}@ifn.et.tu-dresden.de
Abstract—A continuing technology scaling and the increasing
requirements of modern embedded applications are most likely
forcing a current multi-processor system-on-chip design to scale
to a many-core system-on-chip with thousands of cores on a
single chip. Network-on-chip emerged as ﬂexible and high-
performance solution for the interconnection problem. There
will be an urgent need for fast, ﬂexible and accurate simulation
models to guide the design process of many-core system-on-
chip. In this paper, we introduce a novel analytic approach for
modeling on-chip networks to fulﬁll these requirements. The
model is based on queueing theory and very ﬂexible in terms
of supported topology, routing scheme and traﬃc pattern. The
approach overcomes the limitations of the mean value analysis
introduced in the existing work. Instead, it provides information
about a steady-state distribution of the network routers. This
allows to dimension network resources, such as buﬀers, links,
etc. We show the high accuracy of the model by comparison
with a cycle-accurate simulation. The model is able to estimate
the mean network latency with an accuracy of about 3%.
Keywords-network-on-chip; noc; queueing theory; analytic
model.
I. Introduction
In embedded computing, today’s applications show a com-
mon trend towards a continuously increasing computational
eﬀort and reliability. This is especially true in the area of
multi-media and mobile communication. These requirements
can only be fulﬁlled by massively exploiting parallelism.
Taking also emerging technologies like 3D chip stacking
[1] into account, today’s multi-processor system-on-chips
(MPSoCs) soon scale to many-core SoCs with thousands of
processors on a single chip [2]. Already in 2015, we may
have 1000 or more cores on a chip [3].
If we assume such a large number of cores, the inter-
connection problem becomes a serious challenge. Classical
interconnection architectures, such as busses or crossbar
switches, cannot oﬀer the necessary ﬂexibility and scaling
with respect to throughputor area overhead. Network-on-chip
(NoC) evolved as a ﬂexible and high-performance solution
for the interconnection problem during the last decade [4].
NoC is a packet-switched on-chip network where packets
are forwarded from a source to a destination via several
intermediate router nodes. We call the processing nodes that
are connected to the NoC cores, modules or processing
elements (PEs). Their functionality is thereby transparent
to the NoC, i.e., this could be a processors, memory or an
external interfaces. The smallest unit, to be transmitted over
a NoC, is called the ﬂit (ﬂow control digit).
Finding an optimal NoC interconnect for many-core SoCs
is a very challenging task, since many diﬀerent design ob-
jectives and constraints have to be considered, like choosing
routing and switching methods, selecting topology, applica-
tion mapping, etc. [5]. This leads to a huge design space.
Therefore, fast and accurate NoC models will be required that
give an insight into the system and enable us to reduce the
design space already in early design stages. Cycle-accurate
simulation based approaches are too slow for this purpose.
Simple high-level system models (e.g. only considering the
propagation latency and ignoring queueing delays), on the
other hand, are able to provide results in very short time.
Due to the high abstraction, however, these models loose
quite some accuracy. Analytic models provide a good trade-
oﬀ between both approaches and are thus well suited for the
NoC exploration of a many-core SoC.
In this paper, we propose an analytic NoC model based on
queueing theory [6] that provides a high degree of ﬂexibility
regarding topology, routing and traﬃc scheme. In contrast to
existing models, it is not restricted to mean value analysis but
provides information about the state distribution functions of
the routers. It enables us to easily derive arbitrary performance
metrics, such as mean latency, buﬀer usage or blocking
probability, and makes the model a very ﬂexible tool for
NoC performance analysis.
The remainder of this paper is structured as follows. In
Section II, we discuss related work. Section III shows the
system model and its assumptions. Then, Section IV intro-
duces the analytic NoC model on network level (IV-A) and
router level (IV-B). We evaluate the accuracy of the proposed
approach against cycle-accurate simulation in Section V.
Finally, Section VI concludes the work.
II. Related Work
Much eﬀort has been spent for more than two decades for
ﬁnding adequate traﬃc models for the analysis of oﬀ-chip
and (later) on-chip networks. In 1990, Dally [7] developed
analytic tools for investigating latency and throughput in
networks, but restricting to k-ary n-cube topologies. Recent
approaches focus on the mean value analysis of latency,
throughput and energy consumption. Kiasari et al. presented
an M/G/1 queueing model for wormhole switched two-
dimensional (2D) torus NoC topologies, assuming determin-
istic routing [8]. A diﬀerent approach has been published in
2009 in [9], which introduces an empirical model to estimate
contention delays for constant service time routers. Thereby,
the hybrid router model takes into account Poisson input ﬂows
as well as output ﬂows from preceding constant service time
routers. Ogras et al. presented a fast and ﬂexible analytic
approach in 2010 [10] for the mean value performance
analysis of virtual channel ﬁrst-come ﬁrst-serve (FCFS) input
buﬀered routers for arbitrary topology and service time
119
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

Router Model 
(based on Queueing Model)
Network Model
Compute 
local arrival 
rates
Compute 
forwarding 
probabilities
Aggregation on 
network level 
(e.g. path delays)
l,T,R,Γ
λi
fi,j
Figure 1. The Hierarchical structure of the proposed analytic model.
distribution. Other recent approaches for modeling on-chip
networks [11] focus on the theory of the Network Calculus
[12]. This theory provides a powerful tool for an estimation
of performance bounds in NoCs, which is essential for giving
statements about the realtime capabilities of a network in early
design stages. However, for the exploration of the average
network behavior, other methods, like stochastic models, are
more expedient.
III. System Model
We assume the routers to be arranged in an arbitrary
topology. An arbitrary number of cores is allowed tobe con-
nected to a single router. Due to the low buﬀer requirements,
wormhole switching is the most favored switching technique
for realizing best-eﬀort services in on-chip networks today
[5]. Therefore, we restrict our model to this technique. The
routing protocol, on the other hand, shall not be restricted.
Concerning the arbitration scheme, we restrict to the ﬁrst-
come ﬁrst-serve method. Extensions to other arbitration
schemes, like the popular round-robin, are left for future
work. Routers consist of an arbitrary number of buﬀered input
ports and an arbitrary number of (unbuﬀered) output ports.
We assume inﬁnite buﬀer size.
Furthermore, we assume external packet arrivals from
PEs to possess Poisson characteristic [6], i.e., they have
exponentially distributed inter-arrival times with known mean
values. This assumption is often made to approximate real
network traﬃc while reducing the model complexity at the
same time. The router service times include processing delay
for arbitration as well as forwarding delay for the packet and
are assumed to be exponentially distributed. Furthermore,
knowledge of the mean router service rate and router service
latency is required. We assume it w.l.o.g. to be equal for all
routers in the network. Finally, we imply a common clock
for all routers.
IV. An analytic Model for Networks-on-Chip
To provide a ﬂexible as well as a fast analytic model
we propose to follow a hierarchical approach as depicted
in Figure 1. We split the NoC model into an analysis on
network level and on router level. By performing the analysis
on router level and combining the results on network level,
we thus reduce the complexity.
The network model receives multiple inputs that have to
be speciﬁed by the user. The traﬃc scenario is described by
the traﬃc characterization matrix T and the external arrival
rate vector l. The topology and interconnection is speciﬁed
via the connectivity matrix Γ. Finally, information about the
applied routing scheme is provided via the routing matrix R.
An overview of the notation and a more detailed explanation
is given in Table I.
Based on this information, the network model is able to
compute local parameters for each router node individually,
i.e., the inputs for the router model. The local parameters
comprise the local arrival rates λi that is the accumulated
arrival rate over all traﬃc ﬂows that cross router input i.
Furthermore, the forwarding probabilities fi, j are computed.
fi, j deﬁnes the probability that a packet arriving at a router
input i is forwarded to a router output j (please note that the
indices i and j correspond to the unique identiﬁer of the link
that is connected to router input or output). The computation
of the local arrival rates and forwarding probabilities is
discussed in more detail in Section IV-A.
The local parameters can now be applied to a queueing
model on router level. It is responsible for deriving the
compound distribution for the number of packets in the input
queues, which represent the router state. Consequently, the
knowledge of the compound distribution enables a compu-
tation of key performance indicators, such as average buﬀer
usage, blocking probabilities or mean queueing delays. The
queueing model on router level is introduced in Section IV-B.
Finally, the performance metrics, computed on router level,
have to be combined on network level, e.g., to derive path
delays by summing up the queueing delays and the ﬁx router
propagation latencies.
A. Analysis on Network Level
We can derive the vector of local arrival rates λ, with
elements λi (1 ≤ i ≤ NE), by summing up all traﬃc ﬂows that
cross a speciﬁc link (and router input queue, respectively).
Therein, NE is the number of links in the network. The
traﬃc characterization matrix T provides information about a
pairwise traﬃc ﬂow probability between each module s and
d. By weighting T with the external arrival rates l, we get the
traﬃc intensities (in packets/cycle) for each pair of modules.
Finally, we multiply the traﬃc intensities with the probability
that the ﬂow will pass link i (given by routing matrix R) and
sum up the fractions of the contributing traﬃc ﬂows:
λi =
NM
X
s=1
NM
X
d=1
ls · ts,d · rs,d,i, 1 ≤ i ≤ NE.
(1)
The notation is given in Table I. By applying the deﬁnition
of the Frobenius inner product [13], we can rewrite (1) as
matrix equation as follows:
Table I: Model parameters and notation
NM
Number of modules
NR
Number of router nodes
NE
Number of edges
T = ts,d

Traﬃc characterization matrix (of size NM × NM) with
elements ts,d that specify the send probability from
module s to module d
l = [ls]
External arrival rate vector (of size NM × 1) with ele-
ments ls representing the arrival rate (packets/cycle) from
source module s
Γ = γs,d

Connectivity matrix (of size (NM+NR)×(NM + NR)) with
elements γs,d; γs,d > 0, if there is a directed connection
from s to d; the value γs,d represents the link ID for this
connection (sgn(Γ) ≡topology matrix)
R = rs,d,i

Routing matrix (of size NM × NM × NE) with elements
rs,d,i deﬁnes the probability that link i is occupied for
routing a packet from source module s to target module
t (P
∀i rs,d,i = 1)
x
Average router service time
120
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

λi = tr

T · LDT Ri

.
(2)
In (2), tr represents the trace of the matrix, LD is the NM ×
NM diagonal matrix representation of vector l:
LD := diag(l),
and Ri the corresponding submatrix of R that consists of
all elements rs,d,i with 1 ≤ s, d ≤ NM. We can select the
set of local arrival rates Λr for a single router node r by
exploiting the knowledge of the topology that is contained in
the connectivity matrix Γ. I.e. we collect all λi where i is the
ID of an input edge of router r:
Λr := {λi | ∃s; 1 ≤ s ≤ NM + NR; γs,r = i}.
(3)
We continue to compute the forwarding probability matrix
F. The matrix element fi, j (1 ≤ i, j ≤ NE) can be deﬁned
as traﬃc intensity between router input i and router output j
normalized to the total arrival rate at input i, i.e., λi:
fi, j :=
PNM
s=1
PNM
d=1 ls · ts,d · rs,d,i · rs,d, j · δi, j
λi
, 1 ≤ i, j ≤ NE.
(4)
We call the term δi, j the link selector matrix. It ensures
that there is only a forwarding probability fi, j > 0, if (i, j)
represents an input/output link pair of the same router:
δi, j :=
 1,
if ∃s, r, d with γs,r = i ∧ γr,d = j
0,
otherwise
.
Therein, γs,r and γr,d are corresponding elements of the
connectivity matrix Γ. Equation (4) can be rewritten in matrix
form:
fi, j := δi, j
λi
· tr

T · LDT 
Ri ◦ Rj

,
(5)
where ◦ represents the entry-wise multiplication (i.e., the
Hadamard product) of two matrices. Finally, we also restrict
the set of forwarding probabilities Fr to a single router node
r, similar to the approach in (3), and come to (6):
Fr := {fi, j | ∃s, d; 1 ≤ s, d ≤ NM + NR; γs,r = i ∧ γr,d = j}.
(6)
B. An Analytic Router Model based on Queueing Theory
Based on the assumptions that we made in Section III, an
M/M/1 queueing system [6] with exponential interarrival and
service times will be appropriate to model the router behavior.
However, in reality, the traﬃc situation within a router looks
more complicated, as the example in Figure 2 (left) shows.
Therein, we ﬁnd splitting and merging of traﬃc ﬂows that
contend with other input queues for multiple output ports.
Furthermore, each input has diﬀerent probabilities of being
forwarded to a speciﬁc output. To be able to represent the
router system by a queueing model, we propose using a
simpliﬁed equivalent system, as depicted in Figure 2 (right).
The idea is to include the contention delays into the service
times and thereby receiving port speciﬁc service times. In fact,
if a packet in front of a (FIFO) queue is blocked due to a
contending queue, this is nothing else than a delayed service.
Therefore, it is reasonable to consider the contention delay as
a service time increase. Consequently, we come to a reduced
λ1
λ2
λ3
μ
μ 
μ 
Merge
Split
Arbiter
HoL blocking
Original Router System
λ1
λ2
λ3
Equivalent 
Queueing System
μ1
μ2
μ3
Simplify
Figure 2. The equivalent queueing system simpliﬁes a view onto the
traﬃc situation in a router and can easily be expressed as a Markov
model.
equivalent system that now only consists of a single output
server and multiple input queues, each having an individual
service time (and service rate µi respectively).
Due to the memoryless property of the exponentially
distributed arrival and service processes, the state of the
equivalent router system can now solely be deﬁned by the
number of ﬂits contained in the input queues. If we represent
the state by a vector where each element represents the ﬁll
level of a single input queue, we can model the system by
means of a multidimensional Markov chain. This is illustrated
in Figure 3 for the case of a router with two inputs (please
ignore the depicted macro states for now). Therein, the
transition rates are deﬁned by the arrival rate λi and service
rate µi for each input independently. Let x be the current state
vector of the router. Then, a transition from state x → x + ei
(where ei is the unit vector for dimension i) has an intensity
of λi. On the other hand, a transition x → x − ei has an
intensity of µi. The boundaries of the Markov chain are an
exception to that rule (ﬁrst column/row in Fig. 3). There, we
ﬁnd a diﬀerent contention situation. In the case of two inputs,
we have no contention caused by the second input anymore.
Therefore, the transition rates for x → x − ei change to µ,
i.e., the basic router service rate without contention delay.
For solving the Markov chain, we still need to know the
(0,0)
(1,0)
(2,0)
λ1
λ2
μ 
μ2
λ1
μ 
(0,1)
(1,1)
(2,1)
λ1
μ1
λ1
μ1
λ2
μ2
λ2
μ 
λ2
μ2
(0,2)
(1,2)
(2,2)
λ1
μ1
λ1
μ1
λ2
μ2
λ2
μ 
...
...
...
...
...
...
Macro State (0,0)
Macro State (1,0)
Macro State (0,1)
Macro State (1,1)
Figure 3. Example of a two-dimensional Markov model for a router
with two inputs and the decomposition into reversible sub-chains.
121
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

service rates µi that include the contention delay to be able
to deﬁne the transition rates. For this purpose, we apply an
idea that was proposed in [10] to determine the mean waiting
time for a similar input buﬀered router model assuming an
FCFS arbiter. We modify this approach to ﬁnd an estimation
for the mean service time, i.e., the waiting time of the ﬂit
in front of the queue. Similar to [10], we ﬁrst compute the
pairwise contention probability ci, j for all inputs pairs (i, j) of
a router with P inputs based on the forwarding probabilities
F that can be derived according to (5):
ci, j =
P
X
k=1
fi,k f j,k, i , j, 1 ≤ i, j ≤ P.
(7)
From (7), an equivalent matrix equation can be derived
C = F · FT.
(8)
Note that the main diagonal of the contention probability
matrix C in (8) is set to ”1” which makes the following
computation more convenient. Based on the contention prob-
abilities, we can derive an expression to estimate the mean
service times xi(y) under contention:
xi(y) := x + x
P
X
j=1, j,i
ci, jy j, 1 ≤ i ≤ P.
(9)
The ﬁrst summand x of (9) represents the mean router
service time for the packet in front of queue i. The second
summand considers the contention delay. Therein, the vector
y represents the instantaneous ﬁll state of each input queue,
i.e., yi = 0, if input queue i is empty and does not contribute
to the contention delay and yi = 1 otherwise. We will call
y the router macro state in the following and can directly
derive it from the router state x:
yi =
 0,
if xi = 0
1,
if xi > 0 ,
or rather informally: y = sgn(x).
We can still condense (9) somewhat by exploiting the
convenient deﬁnition of contention probability matrix C and
provide a short form matrix equation for the mean service
rates µi(y) (i.e. the inverse of the mean service times):
µi(y) :=
"1
µCi
T y
#−1
, 1 ≤ i ≤ P.
(10)
With the deﬁnition for the mean service rates µi(y) in (10)
we have now all necessary inputs to solve the Markov chain
in order to obtain the steady-state probability distribution.
However, in trying to do so, we are confronted with an-
other challenge. If we apply the Kolmogorov criterion for
reversibility of Markov chains, we soon realize that it does
not hold for some cases in the peripheral region of our Markov
chain. Accordingly, the chain is not time reversible; see Fig. 3
and examine the following state transitions: (0, 0) → (1, 0) →
(1, 1) → (0, 1) → (0, 0), and the corresponding return path.
We notice that the product of the transition rates is not equal
for both directions,and thus, it does not fulﬁll the Kolmogorov
criterion [14]:
λ1 · λ2 · µ1 · µ , λ2 · λ1 · µ2 · µ.
Consequently, we are not allowed to apply local balance
equations to solve the chain. Unfortunately, we are not
able to ﬁnd a closed-form solution for the inﬁnite Markov
chain solely based on the global balance equations. Fehske
and Fettweis [15] recently encountered exactly the same
problem when trying to solve an equivalent Markov chain.
They proposed an approximation to ﬁnd a solution for the
stationary distribution. The approach is based on the concept
of aggregation of variables that is well known by economics
for quite some years [16]. The proposed algorithm consists
of the following steps.
We start decomposing our Markov chain into reversible
sub-chains. This is done by collecting all states x that belong
to the same macro state (or aggregate state) y = sgn(x) in a
common set S(y):
S(y) ≔
n
x ∈ NP
0 | sgn(x) = y
o
.
The idea behind the deﬁnition is that all states are collected
in the a macro state where we ﬁnd a similar contention
situation. If we consider a contending queue, it doesn’t matter
how many packets it contains, only if it contains at least
one packet or not. Consequently, the mean service rates are
homogeneous within each macro state. An example for the
Markov chain decomposition for the case of two input ports
is provided in Figure 3. Therein, we decompose the two-
dimensional Markov chain into four macro states. Macro state
(0, 0) contains all states where both input queues are empty
(which is only a single router state (0, 0)). Macro states (1, 0)
and (0, 1) collecting the states where only one of the two
queues is empty. Hence, we have no contention within these
two macro states. Macro state (1, 1) represents all router states
where both queues are not empty. In this example, this is the
only macro state where contention occurs.
Since the transition rates are homogeneous within each
macro state, the sub-chains are reversible and can be solved.
This leads to a product form solution for the stationary
probability distribution of the number of customers (i.e.
packets) eπ in an M/M/1 queueing system that is well known
from classical queueing theory [6][15]:
eπ(x) =
( Q
i∈N1(y) (1 − ρi(y)) ρxi−1
i
(y)σ(y),
for y , 0
σ(0),
for y = 0
(11)
with utilization ρi(y) of input queue i deﬁned as
ρi(y) :=
λi
µi(y).
Note that (11) only yields an estimate for the solution of the
stationary probability distribution. This is because we omit
the transitions between the macro states at this consideration.
Also, note that (11) is conditioned on the probabilities of the
corresponding macro state σ(y) to ensure that P
xeπ(x) = 1.
So far, we have no knowledge about the macro state
probabilities σ(y). We can compute σ(y) by solving the (now
ﬁnite) Markov chain on macro state level. Figure 4 shows a
solution for the transition rate p(y, y′) from macro state y to
macro state y′, as provided by [15]:
p(y, y′) =

λi,
for y′ = y + ei
µi(y) − λi,
for y′ = y − ei
0,
else
,
(12)
122
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

(0,0)
(1,0)
λ1
λ2
μ1(1,0)-λ1
(0,1)
(1,1)
λ1
λ2
μ1(1,1)-λ1
μ2(0,1)-λ2
μ2(0,1)-λ2
Figure 4. Example: Markov chain on macro state level assuming a
router with two inputs.
where ei again represents the unit vector for dimension i.
Based on (12), we can now deﬁne the transition probability
matrix P =
h
pi j
i
with pi j := p

yi, y j

. With the deﬁnition of
pii := − P2P
j=1 pi j we normalize the row sum to 0.
Finally, we can follow the usual approach and solve the
equation system for the vector of macro state probabilities σ
based on the transition probability matrix P:
σP = 0,
under the side condition P
y σ(y) = 1.
Based on (11), we can now compute the approximates
for the state probabilities eπ(x). We can derive several key
performance indicators, such as the mean number of packets
in the queue E[xi]:
E[xi] ≈
X
x
eπ(x)xi =
X
y
ρi(y)
1 − ρi(y)σ(y),
or the mean queueing delay Wi for input queue i by applying
Little’s law [6]:
Wi = E[xi]
λi
.
V. Performance Evaluation
We show the accuracy of the proposed NoC model by
comparing it against cycle-accurate NoC simulation. Due to
the similar system model assumptions we decided to compare
our approach against the model proposed in [10] as well as
the NoC simulation tool that has been used therein [17].
We assumed following common simulation parameters:
• deterministic, dimension-ordered XY-routing,
• ﬂit traﬃc, i.e., packet size = 1,
• input buﬀered routers with FCFS arbiter and service rates
of µ = 0.5,
• large buﬀer size (256 ﬂits) to approximate the inﬁnite
buﬀer model and
• simulation run time of 105 cycles with a warm-up period
of 104 cycles.
We investigate the following two topology/traﬃc scenarios
under diﬀerent load conditions (deﬁned by number of injected
packets/cycle) and compare the average packet transmission
latency in the network.
First, we choose a very simple scenario to investigate the
model behavior under a clear contention situation. Therefore,
we consider a simple chain of four routers where a single
PE is connected to each router. The PEs at routers 1 and
4 are sending their packets to PE 2 and 3 with a uniform
distribution. PEs 2 and 3 do not send any packets. Hence, we
ﬁnd at router 2 and 3 a contention situation with the following
forwarding probability matrix F:
F =

0
0
0
0.5
0
0.5
1
0
0
 .
The result under diﬀerent load conditions is shown in Fig-
ure 5. We ﬁnd that the latency estimation for our proposed
approach (red curve with + marker) follows very well the
cycle-accurate simulation results (black curve with point
marker) under a low and medium load condition. However,
it signiﬁcantly underestimates the network saturation limit
where latency tends to inﬁnity (0.66 packets/cycle in our
model compared to 0.8 packets/cycle in the cycle-accurate
simulation). The reference mean value model from [10] (blue
curve with circle marker) shows a slight overestimation of the
latencies under mid load conditions but estimates the network
saturation point quite well.
The reason for the poor estimation of the network saturation
point of our model is the applied aggregation approach for
approximating the solution of a Markov chain. Therein,
the stability of the overall solution is determined by the
stability of the ”worst-case” aggregate, i.e., the aggregatewith
the highest contention. If the solution for the ”worst-case”
aggregate tends to inﬁnity the overall solution tends to inﬁnity
as well. To avoid this behavior, we propose to determine an
average service time xi over all macro states for every router
input. This is done by computing the expectation of the mean
service times xi(y) over all macro states based on the known
macro state probabilities σ(y):
xi =
X
y∈{0,1}P
xi(y)σ(y)yi.
(13)
Therein, yi constrains the expectation to those macro states
where queue i is not empty. We compute the average waiting
time Wi for input queue i based on (13):
Wi =
xi
1 − λixi
.
The result of the reﬁned approach is also depicted in
Figure 5 (green curve with square marker). It shows a very
good match compared to the cycle-accurate simulation. The
latencies under low/mid load conditions, as well as the
network saturation point, are estimated very accurately by
this approach. The average estimation error is less than 3%.
Finally, we choose a 4x4 2D-mesh topology using a more
diverse traﬃc pattern of the generic multimedia application
from [10]. We target to compare the estimation quality of the
average latencies under more complex contention situations.
The results are plotted in Figure 6 and conﬁrm the accurate
results of the ﬁrst scenario. Again, the average estimation
error is around 3% (9% for the reference model). However,we
still notice a slight underestimation of the network saturation
limit of about 2.5% for that case. The reference mean value
model shows a better accuracy in this region.
123
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0
5
10
15
20
25
30
35
40
45
50
Packet injection rate (packet/cycle)
Average packet latency [clock cycles]
 
 
Mean Value Model
N-dim. Markov + Average
N-dim. Markov
Cycle-accurate Simulation
Figure 5. Performance results for 4x1 chain analyzing the average
packet latency in comparison to cycle-accurate simulation.
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
0
5
10
15
20
25
30
35
40
45
50
Packet injection rate (packet/cycle)
Average packet latency [clock cycles]
 
 
Mean Value Model
N-dim. Markov + Average
Cycle-accurate Simulation
Figure 6. Performance results for 4x4 2D-mesh with generic mul-
timedia application traﬃc analyzing the average packet latency in
comparison to cycle-accurate simulation.
Note that the presented results only serve as proof of
concept and easily scale to larger networks. The relative
accuracy of the latency estimation is expected to stay in the
same range under similar contention situations, independent
of the NoC size. This is because the analysis of the queueing
delay is done on router level and only accumulated on network
level.
VI. Conclusion and Future Work
In this paper, we presented a novel analytic approach for
modeling on-chip networks for many-core SoC based on
queueing theory. In contrast to many existing models, the
approach is very ﬂexible in terms of supported topology,
routing scheme and traﬃc pattern. The approach overcomes
the limitations of the mean value analysis introduced in the
existing work. Instead, it provides information about a steady-
state distribution of the network routers. This allows to derive
arbitrary key performance indicators, such as blocking prob-
abilities or average queueing delays, which is very important
information for dimensioning network resources, such as
buﬀers, links, etc. We demonstrated the very high accuracy of
the approach by comparison to a cycle-accurate simulation.
The average estimation error for the mean latencies in a 4x4
2D-mesh is only 3%.
Many extensions of the NoC model are planned. We target
to consider diﬀerent arbitration schemes, such as the popular
round-robinmethod. A ﬁnite buﬀer model extension would be
interesting in order to model network acceptancebehavior and
back pressure eﬀects. A generalization towards an arbitrary
service time distribution is also desirable. Finally, supporting
multiple clock domains (i.e., globally asynchronous locally
synchronous systems) and frequency scaling is another open
topic in order to explore a many-core NoC more accurately.
References
[1] T. Dresden, “Esf young investigators group; 3d chip stack
intraconnects - 3dcsi,” last visited on 15/10/2012. [Online].
Available:
http://tu-dresden.de/die
tu dresden/fakultaeten/
fakultaet elektrotechnik und informationstechnik/3dcsi
[2] J. Manferdelli, N. Govindaraju, and C. Crall, “Challenges and
opportunities in many-core computing,” Proc. of IEEE, vol. 96,
no. 5, pp. 808 –815, May 2008.
[3] S. Borkar, “Thousand core chipsa technology perspective,” in
Proc. of DAC, 2007.
[4] L. Benini and G. De Micheli, “Networks on chips: a new soc
paradigm,” Computer, vol. 35, no. 1, pp. 70 –78, Jan 2002.
[5] R. Marculescu, U. Ogras, L.-S. Peh, N. Jerger, and Y. Hoskote,
“Outstanding research problems in noc design: System, mi-
croarchitecture, and circuit perspectives,” Computer-Aided De-
sign of Integrated Circuits and Systems, IEEE Transactions on,
vol. 28, no. 1, pp. 3 –21, Jan. 2009.
[6] L. Kleinrock, Queueing systems - 1 : Theory.
New York:
Wiley, 1975.
[7] W. Dally, “Performance analysis of k-ary n-cube interconnec-
tion networks,” Computers, IEEE Transactions on, vol. 39,
no. 6, pp. 775 –785, Jun 1990.
[8] A. Kiasari, D. Rahmati, H. Sarbazi-Azad, and S. Hessabi, “A
markovian performance model for networks-on-chip,” in Proc.
of Euromicro PDP, 2008.
[9] N. Nikitin and J. Cortadella, “A performance analytical model
for network-on-chip with constant service time routers,” in
Proc. of ICCAD, 2009.
[10] U. Ogras, P. Bogdan, and R. Marculescu, “An analytical ap-
proach for network-on-chip performance analysis,” Computer-
Aided Design of Integrated Circuits and Systems, IEEE Trans-
actions on, vol. 29, no. 12, pp. 2001 –2013, Dec. 2010.
[11] M. Bakhouya, S. Suboh, J. Gaber, and T. El-Ghazawi, “Ana-
lytical modeling and evaluation of on-chip interconnects using
network calculus,” in Proc. of NoCS, 2009.
[12] J.-Y. Le Boudec and P. Thiran, Network calculus: a theory
of deterministic queueing systems for the internet.
Berlin,
Heidelberg: Springer-Verlag, 2001.
[13] Seber and A. F. George, A Matrix Handbook for Statisticians.
John Wiley & Sons, Inc., 2008.
[14] R. Nelson, Probability, stochastic processes, and queueing
theory / the mathematics of computer performance modeling.
New York ; Heidelberg [u.a.]: Springer, 1995.
[15] A. J. Fehske and G. P. Fettweis, “Aggregation of variables in
load models for interference-coupled cellular data networks,”
in Proc. of ICC, 2012.
[16] H. A. Simon and A. Ando, “Aggregation of variables in
dynamic systems,” Econometrica, vol. 29, no. 2, pp. 111–138,
Apr 1961.
[17] worm sim, “Cycle-accurate noc simulator,” last visited
on 15/10/2012. [Online]. Available: http://www.ece.cmu.edu/
∼sld/software/index.php
124
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-234-9
SIMUL 2012 : The Fourth International Conference on Advances in System Simulation

