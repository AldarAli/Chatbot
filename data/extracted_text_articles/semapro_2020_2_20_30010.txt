Enabling System Artifacts Reuse Through the Semantic Representation of Engineering
Models: a Case Study of Simulink Models
Roy Mendieta
The REUSE Company
Madrid, Spain
Email: roy.mendieta@reusecompany.com
Jose Mar´ıa ´Alvarez-Rodr´ıguez
Computer Science and Engineering Department
Carlos III University of Madrid
Madrid, Spain
Email: joalvare@inf.uc3m.es
Eduardo Cibri´an
Computer Science and Engineering Department
Carlos III University of Madrid
Madrid, Spain
Email: ecibrian@inf.uc3m.es
Juan Llorens
Computer Science and Engineering Department
Carlos III University of Madrid
Madrid, Spain
Email: llorens@inf.uc3m.es
Abstract—Currently, digital twins are being designed to provide a
virtual version of complex physical systems. Modelling and sim-
ulation techniques and tools are used to design these engineering
products embedding domain knowledge in many system artifacts
available under different protocols, formats and meta-models.
The cost of development of these virtual artifacts is usually very
high implying the need of saving time and costs by means of
increasing their reusability factor. A ﬁrst step to ease the reuse
relies on the ability of looking up a system artifact according to
some input query. To do so, it is necessary to design a knowledge
management strategy unifying the structure and representation
of these artifacts and provide a search service that can exploit the
indexed information. In this work, we propose a semantic model
to represent system artifacts and demonstrate its application
through a search service consuming simulation models (designed
with the Matlab Simulink tool, a block diagram environment for
multidomain simulation and Model-Based Design). Furthermore,
an experiment has been conducted to show the precision and
recall of this semantic search service.
Keywords–information representation; physical system models;
simulink; model reuse; knowledge reuse.
I.
INTRODUCTION
Recently, we have seen the emergence of Model-based
Systems Engineering (MBSE) as a complete methodology to
address the challenge of unifying the techniques, methods
and tools to support the whole speciﬁcation process of a
system (conceptual design, system requirements, design, anal-
ysis, veriﬁcation or validation, etc.) around the application of
models. In the context of the well-known Vee lifecycle model
(a project management method focused on veriﬁcation and
validation activities early in the life cycle thereby enhancing
the probability of building an error-free and good quality
product [1]), it means that there is “formalized application
of modeling” to support the left-hand side of this system
life-cycle implying that any process, task or activity will
generate different system artifacts, but all of them repre-
sented as models. This approach is considered a cornerstone
for the improvement of the current practice in the Systems
Engineering discipline since it is expected to cover multiple
modeling domains, to provide better results in terms of quality
and productivity, lower risks and, in general, to support the
concept of continuous and collaborative engineering, easing
the interaction and communication between people (engineers,
project managers, quality managers, etc.).
Although MBSE represents a shifting paradigm for the
development of critical systems, the plethora of engineer-
ing methods supported by different tools implies the need
of not only easing the communication between people, but
also considering its application to the universe of available
tools. How could we do requirements management, simulation,
diagramming, documenting, information retrieval or project
management without the corresponding tools or Information
Technologies (IT) systems? The more complex the problems
are, the more complex computer tools must be delivered,
and the main reason for that is, consequently, because those
computer tools are demanded to be “smarter”. Up to now, a
computer tool is not human independent; it simply “acts” as
smart according to its access to relevant data, information and
knowledge. In order to enable a collaborative MBSE through
IT systems, it is completely necessary to enable the possibility
of communicating tools (interoperability) and reusing previous
engineering designs saving costs and time.
In order to reuse the knowledge generated in Model-
driven Engineering (MDE) methodologies, such as MBSE,
it is necessary to understand the underlying concepts and
relationships that allow us to make a semantic interpretation
of the models. For example, in the automotive industry [2],
modeling capabilities are applied to the whole engineering
process, from the speciﬁcation to the certiﬁcation in a virtual
twin environment. In the context of tool-chains for MDE, it
is possible to ﬁnd many suites, such as Matlab Simulink [3],
that can be applied to different engineering activities: design-
ing architectures (descriptive modeling), simulation (analytical
modeling) or testing of digital systems.
However, no one size ﬁts all, and engineering environments
are usually integrating many different tools. This situation
generates a good number of system artifacts that are part of
a speciﬁc product or service. Reuse capabilities are therefore
constrained by the possibility of linking every system artifact
(traceability) and, then, being able to represent, search and
customize those relevant system artifacts. In this manner,
when a system artifact is selected for being reused (e.g., a
component), it actually implies the necessity of bringing all
30
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

connected system artifacts, such as requirements, test cases,
logical models, etc. The reusability factor will depend on the
capability of creating an underlying knowledge graph that can
serve us to deliver services that require a holistic view of the
system, such as change impact analysis, visualization or quality
checking.
More speciﬁcally, in the context of model reuse, it is
necessary to deﬁne a knowledge management strategy for
reusing system artifacts. The use of semantics may help to im-
prove the reusability factor of a system artifact by identifying
similar artifacts through a comparison under a common and
representation model. Model reuse still remains challenging
due to the diversity of domains and information embedded
in the models. Furthermore, engineering tools have not been
designed to look up similar artifacts. The cost of reuse will
mainly depend on the complexity of the entity to be reused
[4] and, this implies, that an enriched representation may help
to improve the ﬁrst step to reuse: discoverability.
In order to build an underlying knowledge graph, there
are works, such as Open Services for Lifecycle Collaboration
(OSLC) Resource Shapes [5]–[7] or ISO Step meta-models,
focusing on the description of artifact meta-data [8]. However,
the representation of both artifact meta-data and contents is
not fully addressed by a common representation model.
In this work, we aim to effectively reuse the knowl-
edge embedded in Simulink models. The solution called
Simulink2RSHP makes use of an ontology-based approach
for indexing and retrieving information following a meta-
model, Information Representation Model Based on Relation-
ships (RSHP) [9]. Under this schema, both meta-data and
contents are represented using a common domain vocabulary
and taxonomy creating a property graph that can be exploited
for system artifact discovery. To do so, a mapping between the
Matlab Simulink meta-model [10] and the RSHP meta-model
is deﬁned to represent and serialize analytical models in a
repository. Then, a retrieval process is implemented on top of
this repository to allow users to perform text-based queries and
look up similar artifacts. To validate the proposed solution, 38
Simulink models have been used and 20 real user queries have
been designed to study the effectiveness, in terms or precision
and recall, of the proposed solution [11] against the Matlab
Simulink searching capabilities.
The paper is organized as follows: The related work is
presented in Section II. Section III describes the background
and deﬁnes the proposed solution for Simulink model reuse.
Section IV describes the validation, while Section V summa-
rizes the main conclusions and outlines some future research
directions.
II.
RELATED WORK
Semantic representation of analytical models for retrieval
purposes is the cornerstone of this work. In the case of models
reuse, [12] presents a work to represent and retrieve Computer-
Aided Design (CAD) by implementing a mapping function
between the features of different CAD models. In [13], an
ontology-based retrieval technique is introduced to perform a
semantic similarity process between Uniﬁed Modeling Lan-
guage (UML) class diagrams.
In the case of Simulink models, [14] describes a solu-
tion focused on design patterns to develop reusable model
structures without considering semantic features. In [15], a
tool for automatically identifying, classifying and formalizing
submodel patterns in Simulink models is presented. This tool
implements a retrieval process based on text-comparison.
Regarding RSHP applications for system artifact repre-
sentation, some prior works can be found to reuse electric
circuits designed in the Modelica language [16]. In [17], the
authors also use a similar approach for SysML models where a
mapping between the SysML meta-model and the RSHP meta-
model is presented. Based on previous experiences, the RSHP
meta-model ﬁts to represent both meta-data and contents of
different types of models. In the context of this work, Simulink
models have been selected to test the feasibility of reusing
analytical models applying the same principles of knowledge
representation.
Unlike previous approaches, where reuse is based on
speciﬁc features of the domain knowledge or where reuse is
basically focused on text comparison, the proposed solution
aims to improve the reuse of the embedded information in the
Simulink models by providing: 1) A semantic representation
of Simulink models using an existing meta-model like RSHP
and 2) A retrieval process based on comparing the underlying
graphs of a query against a repository of Simulink models.
III.
SIMULINK2RSHP: IMPLEMENTATION OF A TOOL FOR
REUSE SIMULINK MODELS
A. Background
Since the ﬁrst step to provide a reuse mechanism for
Simulink models relies on the representation of information
using the RSHP metamodel, the main building blocks of this
framework are outlined here.
1) The RSHP metamodel: RSHP [9] is an information
representation model based on deﬁning concepts (artifacts) and
relationships among them under speciﬁc semantics. It has been
used for different types of information, such as textual, design
models or source code using the same representation schema.
The meta-model, as a class diagram, is presented in Figure 1
and it comprises the following elements:
•
Artifact. An artifact is a knowledge container that can
be represented through only Knowledge Elements or
through other Artifacts.
•
Knowledge Element. A Knowlege Element represents
the occurrence of a Term. It is the smallest unit of
knowledge.
•
Term. A Term represents an element of the domain
vocabulary (with some speciﬁc semantics, if deﬁned).
•
RSHP. An RSHP represents an n-array relationship
between Artifacts.
•
RSHP Semantics. It is the relationship type assigned
to a relationship between two Artifacts.
•
Meta-property. It is used to add meta-data to the
Artifacts.
The RSHP meta-model has also been exposed as an OSLC
Resource Shape. It can be serialized as Resource Description
Framework (RDF) using the interface known as Open Services
for Lifecycle Collaboration-Knowledge Manager (OSLC-KM)
[5], which is a kind of ﬂavor of OSLC as a result of the
CRYSTAL European project [18].
31
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

Figure 1. Metamodel of RSHP representation.
B. The RSHP reusability framework
The reuse semantic information needs to deal with a lot
of factors that have to be considered in reuse techniques.
Most frameworks are focused on speciﬁc types of information,
such us software [19] restricting the knowledge manager
capabilities.
One of the main objectives is to identify, classify, organize
and represent Simulink models using semantics. To do so, the
proposed solution applies a domain ontology to model such
information and build a retrieval information process based
not only on calculating the similarity of the underlying graphs
between two artifacts.
The implementation of this approach makes use of a
framework that supports semantic information indexing and
retrieval, the CAKE API [20]. CAKE is an ontology-based
framework that allows us to provide a technical solution
exploiting a domain ontology to shift the representation of
Simulink models from text-based (names of blocks, etc.) rela-
tionships to concept-based relationships. CAKE has a retrieve
algorithm based on graph and pattern matching using two dif-
ferent levels: 1) Syntax/Structural; 2) Relationships/Semantic.
In this manner, it is possible to enrich the domain language
within the Simulink models to make a better interpretation of
the embedded information. This mainly requires the mapping
between the model and the domain ontology. CAKE uses the
concept of ontology as a way to restrict concepts, which can be
used to represent knowledge, as well as endow this vocabulary
with syntactic, semantic and pragmatic information. Figure
2 shows how conceptual groupings are carried out in an
aerospace domain, where the different models of aircraft (e.g.,
A350, A330) will be processed as a system. It is also shown an
example of how knowledge is represented across the different
layers within the CAKE-RSHP framework:
1)
The controlled vocabulary layer refers to all termi-
nology in a speciﬁc domain and it is the basis of the
other layers.
2)
Grouping terms by concepts allows us to add more
semantics to the terminology and will be always
restricted by the controlled vocabulary.
3)
Thesaurus allows us to represent structure, for exam-
ple a break down structure. Just as in previous stages
thesaurus is restricted by the controlled vocabulary.
Figure 2. Example of the knowledge layers representation in RSHP.
Figure 3. Conceptual architecture of the proposed solution (RSHP).
4)
Inference layer allows to execute logic using termi-
nology. This logic can be used to infer new knowl-
edge, or to execute validation rules based on the
domain knowledge. These rules can be also executed
against any source of knowledge that is represented
in RSHP using CAKE, for example logical models,
physical models, even textual information.
C. Technological implementation
The proposed solution consists of an application developed
in Visual Studio .Net 2019 with framework 4.8, which allows
us to parse Simulink ﬁles using a Simulink software library for
Java [21] and the integrated Keyboard/Video/Mouse (IKVM)
to run Java code within the .NET framework, and to create a se-
mantic representation of the Simulink models using the CAKE-
RSHP model. As a consequence of using this framework, it
is possible to use the built-in mechanisms already available
for indexing and retrieving information. Figure 3 shows the
architecture of the proposed solution, which consists of three
main elements:
•
Simulink2RSHP. This component groups Simulink
Library
and
CAKE.
Basically,
it
allows
us
to
semi-automatically apply the mappings between the
Simulink elements and the RSHP meta-model creating
an underlying semantic graph based on the domain
ontology, see Table I.
•
Simulink Library. This component allows mapping the
objects that are obtained from invoking the reading
32
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

TABLE I. EQUIVALENCE BETWEEN SIMULINK AND RSHP.
Simulink Element
RSHP Element
Model
Artifact
Block
Artifact
Block Type
Artifact Type
Block Name
Artifact Name, noun term
Block Properties
Metaproperties
Line
RSHP
processes of the Simulink library. Once the informa-
tion is obtained from the ﬁles, it is represented using
the CAKE API.
•
CAKE. Once the information is represented in the
RSHP language, it is possible to use the built-in
capabilities for information retrieval and indexing. The
CAKE API internally implements a pattern matching
algorithm between graphs that returns a value of
similarity.
A detailed explanation of the mapping between Simulink
elements and the RSHP metamodel is provided in Table I.
•
The global Simulink model is represented as a RSHP
Artifact of type Simulink Model. This artifact con-
tains meta-data, such as model image, creation date,
modiﬁcation date and any other additional description.
•
Each block is represented as an Artifact and the
properties of the blocks become RSHP Metaproperties
of the artifact. It is important to mention that RSHP
and Simulink are very compatible since Simulink
blocks contain typology that is represented as the
Artifact Type of each block artifact. There are cases
where the blocks have names or descriptions. These
are represented as the name and description attributes
of the artifact.
•
Simulink models, unlike SysML, have a single type of
relation which is the line. This element is represented
in RSPH as a relationship of type “Line”.
•
In cases where Simulink blocks have names, these
names are represented as terms with a syntactic tag
of type “Noun”. This also adds more semantic infor-
mation to the components.
Finally, CAKE also gives us the possibility of grouping the
terminology in semantic clusters, which allow adding context
to the representation language. In the case of experimentation
(see Section IV), no groupings of terms were made.
IV.
CASE STUDY: INDEXING AND RETRIEVING SIMULINK
MODELS
To illustrate the approach for reusing Simulink models, a
case study of indexing and retrieving Simulink models has
been conducted.
A. Research design
The experiment to evaluate the advantages of a semantic
representation of Simulink models has been designed as fol-
lows:
1)
Deﬁne a dataset of Simulink models from the pub-
lic website repository of MathWorks [22]. General,
automotive models and aerospace models have been
downloaded to test different domains. This dataset
comprises 38 physical models (21 general models, 9
automotive and 8 aerospace) that have been indexed.
2)
Deﬁne a dataset of queries to evaluate the retrieval
capabilities of the proposed solution. Each query has
been designed with different common components of
models to return a set of Simulink schemes [23].
These queries have also been indexed, see Table II.
3)
Execute the experiment. For each query deﬁned in
the previous step, analyze the models retrieved by
Simulink2RSHP taking into account all the semantic
information represented into the dataset.
4)
Analyze the results and validate them using the
schema proposed in [24]. Extract measures of: 1)
precision (fraction of retrieved information that is
relevant); 2) recall (fraction of relevant information
that is retrieved), and 3) a combination between the
last two measures, the F1 score.
TABLE II. LIST OF QUERIES EXECUTED TO RETRIEVE SIMILAR
MODELS.
Q
Query Description
Q1
Signal connected to a memory and sum block
Q2
Clock connected with logical operator
Q3
Vertical channel
Q4
Sensor
Q5
Clock connected to an output
Q6
Logical operator connected to other logical opperator
Q7
Integrator connected to a Gain connected to a sum
Q8
Integrator connected to a gravity component
Q9
Gain connected to a product connected to another product
Q10
Integrator connected to a signum block
Q11
Clock connected to a relational operator connected to a constant
Q12
Step
Q13
Input connected to a Mux
Q14
Input connected to a Function
Q15
Costant connected to a switch
Q16
Signum block connected to a transfer function
Q17
Scope connected to an integrator connected to a Gain
Q18
Signum connected to a product
Q19
Ram
Q20
Relay
B. Analysis of results
The analysis of results is based on the levels of “goodness”
(see Table III) established in [25]. Table IV shows the metrics
of precision, recall and F1 for each input query. It was found
that 10% of queries are at an acceptable level of ”goodness”
for precision and 5% for recall. 10% of queries obtained a
good level for precision metric and 5% for recall. In the same
manner, 70% of the queries obtained an excellent level for both
precision and recall metrics. Finally, just 10% of the queries
obtained a value of precision below acceptable and, in the
case of recall, just 20% of the queries, because the queries
had components with incomplete semantic information (e.g.,
no name, no description).
TABLE III. GOODNESS LEVELS FOR PRECISION AND RECALL
METRICS [25].
Level of “goodness”
Precision
Recall
Acceptable
≥20%
≥60%
Good
≥30%
≥70%
Excellent
≥50%
≥80%
33
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

TABLE IV. PRECISION, RECALL AND F1 METRICS FOR EACH
QUERY.
Precision
Recall
F1
Q1
0.2857
0.6667
0.4000
Q2
0.3333
1.0000
0.5000
Q3
1.0000
1.0000
1.0000
Q4
0.2000
0.3333
0.2500
Q5
0.6250
0.8333
0.7143
Q6
0.5000
0.5000
0.5000
Q7
1.0000
1.0000
1.0000
Q8
0.7500
0.8571
0.8000
Q9
1.0000
0.9000
0.9474
Q10
1.0000
0.9000
0.9474
Q11
0.8000
1.0000
0.8888
Q12
0.0000
0.0000
0.0000
Q13
0.9412
0.9412
0.9412
Q14
1.0000
1.0000
1.0000
Q15
0.5000
1.0000
0.6667
Q16
0.5000
1.0000
0.6667
Q17
0.6667
1.0000
0.8000
Q18
0.3333
0.7500
0.4615
Q19
1.0000
1.0000
1.0000
Q20
0.0000
0.0000
0.0000
Avg
0.6218
0.7841
0.6742
Figure 4. Precision and Recall metrics results obtained for the proposed
solution.
The global average of the metrics was excellent for preci-
sion and good for recall, since they are above 60% and 70%
respectively, as Figure 4 depicts. This is likely due to the
fact that the degree of similarity between the input queries
and the dataset of models was calculated using semantic and
topological algorithms, since the more information available
in the Simulink blocks, such as names and descriptions, the
more accurate the results.
However, it was also determined the need to consider
within the similarity algorithm more speciﬁc aspects of
Simulink blocks. For example, in cases such as logical operator
blocks, the algorithm assumes a similarity between these
blocks regardless of the type of operator. In other words, for the
algorithm there was a similarity between the logical operators
AND and OR, regardless of whether they are semantically
different.
This could be improved using semantic clusters and a
controlled vocabulary, to differentiate this type of aspects, and
consider more information when determining the similarity of
the components. These capabilities are also available in the
CAKE API, but in order to reﬁne the algorithm it is necessary
to spend more time populating the domain ontology. In general,
it implies the creation of more speciﬁc terminology, thesaurus
and semantic clusters for speciﬁc Simulink components.
C. Research limitations
One of the main limitations in the research lies in the size
of the repository where the queries were made. To carry out
more accurate test cases, it would be necessary to have a
larger set of Simulink models. Furthermore, a more speciﬁc
domain ontology for physical models would be necessary to
take advantage of other CAKE API capabilities, adjusting the
semantic representation to the matching algorithm.
Additionally, the creation of the queries was carried out
by randomly selecting components presented in the sample
models. A more robust experiment would require the study
of each model and the behavior of users to create a more
realistic dataset of queries.
V.
CONCLUSIONS AND FUTURE WORK
Despite the importance of the reuse of physical models and
the existing alternatives for reusing components and models,
the existing MBD tools lack advanced retrieval mechanisms.
Although these tools have not been designed for this purpose,
the reuse mechanisms are a bit naive and, in most of the cases,
a mere search query based on some keywords seems too simple
to really exploit the information embedded in the models.
In this work, we have used a Simulink API to propose a
process of semantic interpretation of models and have devel-
oped Simulink2RSHP which performs the mapping between
elements of Simulink models and CAKE components. The
Simulink2RSHP approach seems to be a promising alternative,
considering that unlike many of the retrieval tools that perform
text searches, it determines the similarity using a combination
of semantic and topological algorithms. The results obtained
in the experimentation demonstrate the feasibility of the ap-
proach. It is possible to build indexing and retrieval engines
for physical models using a semantic representation.
As future work, improvements in the representation of
system artifacts are planned, including terminology, thesaurus
and semantic clusters. Other types of models will also be
included in the experimentation, such as those supported in
the Modelica language. In terms of experimentation, this small
setting is representative to demonstrate the feasibility of the
approach. However, larger settings including real user needs
are completely required to provide a more signiﬁcant and
realistic validation.
ACKNOWLEDGMENT
The research leading to these results has received funding
from the project H2020-ECSEL Arrowhead Tools under grant
agreement nº 826452 and from speciﬁc national programs
and/or funding authorities.
REFERENCES
[1]
K. Forsberg, H. Mooz, and H. Cotterman, Visualizing project manage-
ment: models and frameworks for mastering complex systems, J. Wiley
and N. Y. Sons, Eds.
John Wiley & Sons, 2005, ISBN: 0-978-0-471-
64848-2.
[2]
B. Sch¨atz, S. Voss, and S. Zverlov, “Automating design-space
exploration: Optimal deployment of automotive sw-components in
an iso26262 context,” in Proceedings of the 52nd Annual Design
Automation Conference, ser. DAC ’15.
New York, NY, USA:
Association for Computing Machinery, 2015, pp. 1–6. [Online].
Available: https://doi.org/10.1145/2744769.2747912
34
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

[3]
Mathworks
Inc.
Simulink,
“Homepage,”
URL:
http://www.mathworks.com/products/simulink [Last accessed: 2020-
09-03].
[4]
G. Beydoun, A. Hoffmann, R. V. Garcia, J. Shen, and A. Gill,
“Towards an assessment framework of reuse: a knowledge-level analysis
approach,” Complex & Intelligent Systems, vol. 6, no. 1, Apr. 2020, pp.
87–95. [Online]. Available: http://link.springer.com/10.1007/s40747-
019-0116-1 [accessed: 2020-04-23]
[5]
J. M. ´Alvarez Rodr´ıguez, R. Mendieta, J. L. de la Vara, A. Fraga, and
J. L. Morillo, “Enabling system artefact exchange and selection through
a linked data layer,” J. UCS, vol. 24, 2018, pp. 1536–1560.
[6]
J. M. ´Alvarez Rodr´ıguez, R. M. Zu˜niga, and J. Llorens, “Elevating
the meaning of data and operations within the development lifecycle
through an interoperable toolchain,” in INCOSE International Sympo-
sium, vol. 29, no. 1.
Wiley Online Library, 2019, pp. 1053–1071.
[7]
J. M. ´Alvarez Rodr´ıguez, J. Llorens, M. Alejandres, and J. M. Fuentes,
“Oslc-km: A knowledge management speciﬁcation for oslc-based re-
sources,” in INCOSE International Symposium, vol. 25, no. 1.
Wiley
Online Library, 2015, pp. 16–34.
[8]
P. Atzeni, L. Bellomarini, P. Papotti, and R. Torlone, “Meta-
mappings
for
schema
mapping
reuse,”
Proc.
VLDB
Endow.,
vol.
12,
no.
5,
Jan.
2019,
pp.
557–569.
[Online].
Available:
https://doi.org/10.14778/3303753.3303761
[9]
J. Llorens, J. Morato, and G. Genova, RSHP: an information repre-
sentation model based on relationships.
Berlin, Heidelberg: Springer
Berlin Heidelberg, 2004, pp. 221–253.
[10]
Mathworks
Inc.
Simulink,
“Documentation,”
URL:
https://es.mathworks.com/help/simulink/
[Last
accessed:
2020-09-
05].
[11]
W. B. Croft, D. Metzler, and T. Strohman, Search engines: Information
retrieval in practice.
Addison-Wesley Reading, 2010, vol. 520.
[12]
B. Huang, S. Zhang, R. Huang, X. Li, and Y. Zhang, “An effective
retrieval approach of 3d cad models for macro process reuse,” The
International Journal of Advanced Manufacturing Technology, vol. 102,
no. 5, 2019, pp. 1067–1089.
[13]
K. Robles, A. Fraga, J. Morato, and J. Llorens, “Towards an ontology-
based retrieval of uml class diagrams,” Information and Software
Technology, vol. 54, no. 1, 2012, pp. 72–86.
[14]
M. W. Whalen, A. Murugesan, S. Rayadurgam, and M. P. E.
Heimdahl,
“Structuring
simulink
models
for
veriﬁcation
and
reuse,”
in
Proceedings
of
the
6th
International
Workshop
on
Modeling
in
Software
Engineering
-
MiSE
2014.
Hyderabad,
India:
ACM
Press,
2014,
pp.
19–24.
[Online].
Available:
http://dl.acm.org/citation.cfm?doid=2593770.2593776
[15]
J. Cordy, “Submodel pattern extraction for simulink models,” ser. SPLC
’13.
ACM, 2013, pp. 7–10.
[16]
E. Gallego, J. M. ´Alvarez Rodr´ıguez, and J. Llorens, “Reuse of physical
system models by means of semantic knowledge representation: A case
study applied to modelica,” Sep. 2015, pp. 747–757.
[17]
R. Mendieta, J. L. de la Vara, J. L. Morillo, and J. M. ´Alvarez-
Rodr´ıguez, “Towards effective sysml model reuse.” in MODELSWARD,
2017, pp. 536–541.
[18]
n. . U. CRYSTAL, title = (Critical System Engineering Acceleration.
[19]
T. Xin and L. Yang, “A framework of software reusing engineering
management,” in 2017 IEEE 15th International Conference on Software
Engineering Research, Management and Applications (SERA), 2017,
pp. 277–282.
[20]
A. Rodrigues, “Tools Exhibits. In UML Modeling Languages and
Applications,” 2005, pp. 281–291.
[21]
CQSE, “Simulink Library,” URL: https://www.cqse.eu/en/products/simulink-
library-for-java/overview/, [accessed: 2020-05-04].
[22]
MathWorks,
“Simulink
-
Examples,”
URL:
https://es.mathworks.com/help/simulink/examples.html
[accessed:
2020-09-04].
[23]
Roymendieta,
“SEMAPRO
2020
30010,”
URL:
https://github.com/roymendieta/trc-research.github.io/tree/patch-
1/SEMAPRO 2020 30010 [accessed: 2020-09-08].
[24]
N. Juristo and A. M. Moreno, Basics of software engineering experi-
mentation.
Springer Science & Business Media, 2013.
[25]
J. H. Hayes, A. Dekhtyar, and S. K. Sundaram, “Improving after-the-fact
tracing and mapping: Supporting software quality predictions,” IEEE
software, vol. 22, no. 6, 2005, pp. 30–37.
35
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-813-6
SEMAPRO 2020 : The Fourteenth International Conference on Advances in Semantic Processing

