Data-driven Approach for Accurate Estimation and Validation of Ego-Vehicle Speed
Adina Aniculaesei∗, Meng Zhang∗ and Andreas Rausch∗
∗Institute of Software and Systems Engineering
TU Clausthal, 38678 Clausthal-Zellerfeld, Germany
Email: {adina.aniculaesei, meng.zhang, andreas.rausch}@tu-clausthal.de
Abstract—This paper proposes a data-oriented approach for
the accurate estimation of the ego-vehicle speed. The approach
combines long-term estimation with short-term estimation mech-
anisms to produce an accurate estimation of vehicle’s tire cir-
cumference. The long-term estimation method approximates a
standard value for the tire circumference on the basis of the
vehicle conﬁguration. In turn, the short-term estimation computes
an estimation error for the tire circumference based on Global
Positioning System (GPS) sensor data. The ego-vehicle speed is
then computed on the basis of the estimated tire circumference
and the current wheel speed measurement. In this approach,
several error sources are considered: the GPS data, the road
gradient and the rounding off of the estimated vehicle speed. The
approach is validated on two real-world test data batches against
the European New Car Assessment Programme (Euro NCAP)
safety requirements. The results of the experimental validation
demonstrate that the proposed vehicle speed estimation algorithm
performs within the limits of the Euro NCAP requirements.
Keywords–data-based multiresolutional learning; precise pa-
rameter estimation; automotive; ego-vehicle speed estimation; Euro
NCAP requirements.
I.
INTRODUCTION
Reactive systems and requirements deﬁned upon them are
getting increasingly complex. These systems, used to build a
variety of applications, such as multimedia devices or avionic
systems, exhibit stochastic behaviour and also operate under
real-time constraints and constraints on other resources [1]. En-
suring the correct functioning of these systems is of paramount
importance, especially for those systems deployed in safety-
critical applications.
Through their continuous interaction with their opera-
tion environment, reactive systems are subject to a variety
of external stimuli. Often reactive systems are required to
perform parameter estimation based on the large amount of
data received from the environment. Ideally, the input data
is structured, independent and identically distributed. Further-
more, the system can access the data at any time and without
any concerns for the required processing time or the storage
space. Losing et al. [2] observe that real-world applications
produce data in a streaming fashion at an increasing rate,
requiring processing on a large-scale and in real-time, as well
as continuous learning.
Reactive systems work often not only with input data
perceived directly by the sensors from the system environment.
Instead, such systems keep an internal state and preserve values
of the state variables over several iterations. Architectures,
which enable reactive systems the storage of data on a long-
term basis but also offer the ability to react to current input
coming from the environment, present a particular advantage.
Such an architecture would resemble the human memory
model, as indicated by Atkinson and Shiffrin [3] and Losing
et al. [2].
In the automotive domain, every aspect of driving is
supported to a larger or lesser degree by complex software
systems. Such systems enhance the driving experience and
increase the vehicle safety. A basic functionality introduced
in automobiles at the begining of the 20th century is the
speedometer, which gains even more attention, especially in
the context of Advanced Driving Assisstance Systems (ADAS)
and autonomous driving. Car speedometers are reactive sys-
tems, which are confronted with the data-related problems
mentioned previously.
The job of the speedometer is to indicate the instanteneous
speed of the car in miles per hour, kilometers per hour, or
both. The speed displayed on the speedometer is however not
the actual speed of the vehicle, but an estimation of it. Thus,
vehicle speedometers are not 100% accurate.
Car manufactureres build speedometers so that the esti-
mated vehicle speed falls within a narrow range [4]. This
range is usually speciﬁed through compulsory regulations.
Consider for example the european laws [5], which impose
the requirement in (1):
0 ≤ vdisplay − vreal ≤ 0.1 · vreal + 4 km
h
(1)
under the precondition that
40 ≤ vreal ≤ 120 km
h
(2)
where vdisplay is the speed displayed on the dashboard of
the ego-vehicle, and vreal is the actual vehicle speed. Before
its release, the vehicle speedometer is subject to an initial
calibration, which depends strongly on the vehicle model and
conﬁguration. As long as the car is maintained according to
its factory speciﬁcations, the speedometer should continue to
work within its predeﬁned range. Once a parameter in the
system conﬁguration is changed, the speedometer must be
recalibrated. Consider for example when tires with a proﬁle
different from that mentioned in the factory speciﬁcation are
mounted on the vehicle [4]. The problem of the ego-vehicle
speed estimation is an instance of a larger one, namely the
problem of precise parameter estimation.
There are various approaches developed for the ego-vehicle
precise parameter estimation in the automotive domain. These
approaches use a combination of sensors to estimate as ac-
curate as possible the motion of the ego-vehicle: laser range
ﬁnder combined with monocular camera to estimate the ego-
vehicle orientation and the scale, i.e. the length of the transla-
tion direction vector [6] and a combination of monocular and
stereo cameras to estimate rotational and respectively trans-
lational movements of the ego-vehicle [7]. Other approaches
use deep learning methods to process optical ﬂow and depth
estimation with a monocular camera in order to approximate
the ego-vehicle speed [10].
72
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

These approaches present, however, various disadvantages.
Laser range ﬁnders and cameras can be affected by unfavorable
weather conditions. Algorithms relying on feature matching
between consecutive frames usually use various mechanism
to reject poor features from the second of two consecutive
frames. One such mechanism is to apply optical ﬂow back-
wards and reject those feature for which the distance between
initial and computed position in the ﬁrst frame is below a
certain threshold [7]. However, such algorithms suffer, if poor
weather conditions or signiﬁcant illumination changes cause
several consecutive camera frames to be unusable. Further-
more, optical ﬂow can be problematic, if signiﬁcant changes
in illumination appear, e.g., too dark or too bright.
For the estimation of ego-vehicle speed displayed on the
dashboard instrument, we propose a data-oriented approach.
The approach builds upon the theoretical frameworks proposed
in [3] and [2] and combines long-term and short-term esti-
mation mechanisms for the accurate approximation of vehicle
tire circumference. On one hand, the long-term estimation
mechanism makes use of the characteristics deﬁned in the
vehicle conﬁguration, which remain relatively constant over
time. On the other hand, the short-term estimation mechanism
uses GPS sensor measurements in order to derive a corrective
value, which is then used to adjust the result of the long-term
estimation procedure. We apply several ﬁlters in order to ﬁlter
out poor or unreliable GPS data, which appears due to loss
of signal in blocked areas or due to sudden acceleration or
deceleration of the ego-vehicle.
The rest of the paper is structured as follows. Section III
illustrates the overall approach of this paper, while in Section
IV the realization of the presented concept is demonstrated
on the case study of a speedometer model implemented in
MATLAB/SIMULINK. In Section V, experimental validation of
the proposed vehicle speed estimation approach is performed
on real-world scenarios and results are discussed. Section VI
concludes this paper and point out interesting future research
directions.
II.
RELATED WORK
There are several works which focus on the problem of
ego-vehicle parameters estimation. Huang and Stachniss [6]
present an approach for ego-motion using a monocular camera
together with a laser range ﬁnder. The approach uses the
camera images to estimate the ﬁve degrees of freedom relative
orientation and a variant of the iterative closest point algorithm
with one degree of freedom to estimate the scale. Nedevschi
et al. [7] use video data to increase the accuracy of the ego-
vehicle motion estimation. The video data is processed through
procedures for feature detection and ﬁltering, optical ﬂow and
epipolar geometry in order to obtain the essential matrix, from
which the rotation and the translation of the ego-vehicle are
computed.
Lee et al. [8] use a multi-camera system with minimal
ﬁeld-of-views for ego-motion estimation. The camera system
is modelled as a generalized camera and the motion of the
ego-vehicle is constrained to the Ackerman motion model.
The method is compared to the ground truth provided by GPS
and Inertial Navigation System (INS) sensors. Qimin et al. [9]
developed a method for computing vehicle speed on the basis
of sparse optical ﬂow obtained from image sequences. The
proposed method identiﬁes distinct corners in camera images
and maps the feature set of one frame on the consecutive frame.
The vehicle speed is computed as the average of all speeds
estimated by every matched corner. The time of execution
for one iteration is 59 ms, while the mean error of speed
estimation relative to the GPS measurement is 0.121 m
s .
Rill [10] uses the intuition that the magnitude of optical
ﬂow is positively correlated with the speed of the moving
observer to develop a method for ego-speed estimation. The
presented approach applies deep neural network based optical
ﬂow estimation and monocular depth prediction on camera
images. The method is evaluated on input recordings from
the KITTI benchmark [11] [12], reporting a root mean square
error of less than 1 m
s .
III.
DATA-DRIVEN MULTIRESOLUTIONAL LEARNING FOR
ACCURATE PARAMETER ESTIMATION
Several data-oriented models proposed in various research
works are relevant from a theoretical point of view for the
problem of precise parameter estimation. In the ﬁeld of hu-
man psychology and human memory research, Atkinson and
Shiffrin [3] propose the dual-store model for the representation
of human memory. According to this model, the human
memory has a Sensory Register (SR) and two storage areas,
the Short-Term Memory (STM) and the Long-Term Memory
(LTM). Sensory information is ﬁrst stored in the SR and,
from there, transferred to the STM. The information stored
in the STM decays and dissappears completely over time.
Nevertheless, the information can be retained in the STM for
a certain period of time via rehearsal mechanisms. Selected
inputs from the LTM can also be transferred back to STM to
serve as reference information for the recent inputs received
from the SR. Losing et al. [2] propose the Self-Adjusting
Memory (SAM) model for the k Nearest Neighbor (kNN)
algorithm, which is partially based on the dual-store model
in [3]. In the SAM architecture, current concepts stored in the
STM and former concepts residing in the LTM are handled by
dedicated models in accordance with the given situation.
An overview of our approach is depicted in Figure 1.
Our concept is inspired by the dual-store model of the hu-
man memory, which comprises STM and LTM [3], and by
the SAM architectural pattern [2]. The input datastream is
processed and the situation reﬂected in the received data is
evaluated. We are especially interested to determine whether
any perturbations occur in the data and what is the magnitude
of these perturbations. In case no disruptions are identiﬁed
in the datastream or if these disruptions are smaller than a
predeﬁned threshold, we use long-term estimation mechanisms
to approximate our parameters. We call this the standard
parameter value approximation. The basis for our long-term
estimation method are the system characteristics contained in
the current system conﬁguration. This is due to the fact that,
in case of normal usage of the system, any changes to system
characteristics are detectable over long periods of time, e.g.,
deterioration of vehicle tires.
However, in case of large disruptions in the datastream,
we apply short-term estimation mechanisms in order to adjust
the previously estimated standard value with a deviation error
characteristic to the disruptive data. The basis for our short-
term estimation approach are the input data received received
by the system from its environment. Consider the example of
a vehicle equipped with a GPS device. Disruptions in the GPS
data may occur due to ﬂuctuating GPS signal strength, which
depends on the satellite geometry and on the road landscape.
73
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

Long-term 
Estimation
Short-term 
Estimation
Fusion
Estimation Result
Datastream
Situation 
Evaluation
Figure 1. Overview of data-driven multiresolutiuonal learning.
In the current situation of the vehicle, old GPS data may not be
relevant anymore. Therefore, recent GPS data must be taken
into account in order to adjust the vehicle location displayed
in the vehicle’s navigation system.
Notice that the two categories of estimation mechanisms,
short-term and long-term, work on differen time resolutions.
As their names suggest, the short-term estimated values are
updated more often than the long-term approximations. This
is because system conﬁgurations change more slowly than
current inputs from the system environment.
IV.
DATA-DRIVEN VEHICLE SPEED ESTIMATION
In order to evaluate our concept, we build a case-study
around an example system from the automotive domain. This
section presents the system, which implements a vehicle speed
estimation algorithm, together with the Euro NCAP require-
ments, as well as the preconditions and physical boundaries
imposed on the system. The vehicle estimation algorithm
has four major components: (A) estimation of the tire cir-
cumference, (B) plausibility check of the tire circumference,
(C) computation and roundoff of the vehicle speed, and (D)
smoothing of the vehicle speed curve (see Figure 2).
Tire
Circumference
Estimation
Plausibility Check of
Tire Circumference
Computation and
Rounding of the
Vehicle Speed
Smoothing of the
Vehicle Speed Curve
GPS 
Measurements
Wheel Speed Sensor 
Measurements
Displayed Vehicle
Speed
Figure 2. Overview of vehicle speed estimation algorithm.
A. System Requirements, Assumptions and Physical Bound-
aries
The proposed vehicle speed estimation algorithm must
satisfy the NCAP requirement in (3):
0 ≤ vdisplay − vreal ≤ 5 km
h
(3)
where vdisplay is the vehicle speed displayed on the dashboard
of the car, and vreal is the actual vehicle speed. This require-
ment must be held under the assumption that the vehicle does
not drive slower than 50 km
h
or faster than 120 km
h :
50 ≤ vreal ≤ 120 km
h
(4)
Notice that this requirement is stronger than the constraint
imposed by the current european legal regulations [5].
The minimum and maximum values of the tire circum-
ference are denoted TC min and TC max, and represent its
lower and upper physical limits. Notice that these physical
boundaries are speciﬁc for each tire proﬁle. The vehicle speed
estimation algorithm assumes the following boundaries for
TCreal, the actual tire circumference:
TCmin = 2118 mm ; TCmax = 2293 mm
Based on the phyiscal boudaries of the tire circumference
and on the maximum vehicle speed error of 5 km
h allowed by
the NCAP requirement, we can derive the lower and upper
physical limit, nmin and nmax, for the wheel speed ncurrent
measured by the wheel speed sensor:
nmin = 6.056 1
s ; nmax = 15.738 1
s
B. Estimation of the Tire Circumference
The estimated tire circumference has two components:
(A) a system-oriented approximation of the standard tire
circumference on the basis of wheel speed measurements and
(B) an environment-oriented estimation of the tire circumfer-
ence error on the basis of selected GPS data. Since system
characteristics are subject to rather slow changes over time,
long-term estimation is used to approximate the standard tire
circumference. On the other hand, input data coming from
the environment is subject to decay and becomes useless in a
comparably short period of time. Thus, short-term estimation
is more appropriate for the estimation of the tire circumference
error. The computation of the estimated tire circumference is
shown in (5):
TClearned = TCstandard + ∆TC learned
(5)
Approximation of the Standard Tire Circumference. The
standard tire circumference is estimated on the basis of the
currently measured wheel speed ncurrent, according to the
approximation curve deﬁned by (6):
TC standard = a·sin(ncurrent−π)+b·(ncurrent−10)2+c (6)
where a = −0, 5152, b = 0, 07646, and c = 2175. The
coefﬁcients a, b and c used in (6) have been chosen so that
the curve matches approximately the ground truth of the tire
circumference measurements. The ground truth data has been
computed from the vehicle speed measurements performed
with an ADMA sensor at a test facility of our industry project
partner.
Estimation of the Tire Circumference Error. The tire cir-
cumference error is estimated on the basis of GPS data. The
received GPS data contains GPS measurements of the tire
circumference as well as information about the quality of
the received data. Usually, a strong GPS signal means also
a high quality of the received GPS data. Consequently, the
error contained in high quality GPS data is very small. In
order for the received GPS data to be considered for further
computations, the error of the GPS data eGPS must be under
a certain threshold eGPS
max . For our concept, we considered
eGPS
max
= 0.15, which causes a deviation of the estimated
vehicle speed of at most ±0.15 m
s . The main procedure for
the estimation of the tire circumference error is described by
Algorithm 1 depicted in Figure 3.
Notice that the computations in Algorithm 1 are controlled
by a boolean ﬂag, denoted as updateFlag. The update of
the tire circumference error is performed only when certain
conditions are met. These conditions are:
1)
small GPS data error: eGPS
max = 0.15 m
s ,
74
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

Algorithm 1: Estimation of the tire circumference error.
procedure 𝑇𝐶𝐸𝑟𝑟𝑜𝑟(𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
, 𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡, 𝑒𝐺𝑃𝑆, 𝑎𝑙𝑜𝑛𝑔, 𝑎𝑙𝑎𝑡, 𝛼𝑟𝑜𝑎𝑑)
𝑢𝑝𝑑𝑎𝑡𝑒𝐹𝑙𝑎𝑔 ← 𝑈𝑝𝑑𝑎𝑡𝑒𝐹𝑙𝑎𝑔 𝑒𝐺𝑃𝑆, 𝑎𝑙𝑜𝑛𝑔, 𝑎𝑙𝑎𝑡, 𝛼𝑟𝑜𝑎𝑑
Δ𝑇𝐶𝑖𝑛𝑖𝑡 ←
2.5
𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡 ⋅
1000
3.6
Δ𝑇𝐶𝑚𝑎𝑥 ←
5
𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡 ⋅
1000
3.6
Δ𝑇𝐶𝑙𝑒𝑎𝑟𝑛𝑒𝑑 ← Δ𝑇𝐶𝑖𝑛𝑖𝑡
if 𝑢𝑝𝑑𝑎𝑡𝑒𝐹𝑙𝑎𝑔 ≠ 𝑓𝑎𝑙𝑠𝑒 then
Δ𝑇𝐶𝑢𝑝𝑑𝑎𝑡𝑒 ← 𝑇𝐶𝐸𝑟𝑟𝑜𝑟𝑈𝑝𝑑𝑎𝑡𝑒(𝑇𝐶𝑠𝑡𝑎𝑛𝑑𝑎𝑟𝑑, 𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
, 𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡, 𝑒𝐺𝑃𝑆, 𝛥𝑇𝐶𝑚𝑎𝑥)
Δ𝑇𝐶𝑙𝑒𝑎𝑟𝑛𝑒𝑑 ← 1 − 𝑤 ⋅ Δ𝑇𝐶𝑙𝑒𝑎𝑟𝑛𝑒𝑑 + 𝑤 ⋅ Δ𝑇𝐶𝑢𝑝𝑑𝑎𝑡𝑒
end if
return 𝛥𝑇𝐶𝑙𝑒𝑎𝑟𝑛𝑒𝑑
end procedure
Figure 3. Algorithm for the estimation of the tire circumference error.
2)
longitudinal acceleration limited by an upper bound:
along
max = 0.001 m
s2 ,
3)
small lateral acceleration to avoid skidding scenar-
ios: alat
max = 0.0001 m
s2 , and
4)
small road gradient: αroad
max = 12%.
The computation of the update ﬂag is depicted in Algorithm
2 (see Figure 4).
Algorithm 2: Computation of the update flag.
procedure 𝑈𝑝𝑑𝑎𝑡𝑒𝐹𝑙𝑎𝑔(𝑒𝐺𝑃𝑆, 𝑎𝑙𝑜𝑛𝑔, 𝑎𝑙𝑎𝑡, 𝛼𝑟𝑜𝑎𝑑)
𝑔𝑝𝑠𝐸𝑟𝑟𝑜𝑟𝐹𝑙𝑎𝑔 ← 𝑒𝐺𝑃𝑆 ≤ 𝑒𝑚𝑎𝑥
𝐺𝑃𝑆
𝑟𝑜𝑎𝑑𝑆𝑙𝑜𝑝𝑒𝐹𝑙𝑎𝑔 ← 𝛼𝑟𝑜𝑎𝑑 ≤ 𝛼𝑚𝑎𝑥
𝑟𝑜𝑎𝑑
𝑙𝑜𝑛𝑔𝐴𝑐𝑐𝑒𝑙𝐹𝑙𝑎𝑔 ← 𝑎𝑙𝑜𝑛𝑔 ≤ 𝑎𝑚𝑎𝑥
𝑙𝑜𝑛𝑔
𝑙𝑎𝑡𝐴𝑐𝑐𝑒𝑙𝐹𝑙𝑎𝑔 ← 𝑎𝑙𝑎𝑡 ≤ 𝑎𝑚𝑎𝑥
𝑙𝑎𝑡
if (𝑔𝑝𝑠𝐸𝑟𝑟𝑜𝑟𝐹𝑙𝑎𝑔 = 𝑓𝑎𝑙𝑠𝑒 or 𝑟𝑜𝑎𝑑𝑆𝑙𝑜𝑝𝑒𝐹𝑙𝑎𝑔 = 𝑓𝑎𝑙𝑠𝑒 or
𝑙𝑜𝑛𝑔𝐴𝑐𝑐𝑒𝑙𝐹𝑙𝑎𝑔 = 𝑓𝑎𝑙𝑠𝑒 or 𝑙𝑎𝑡𝐴𝑐𝑐𝑒𝑙𝐹𝑙𝑎𝑔 = 𝑓𝑎𝑙𝑠𝑒)
then
return 𝑓𝑎𝑙𝑠𝑒
else
return 𝑡𝑟𝑢𝑒
end if
end procedure
Figure 4. Algorithm for the computation of the update ﬂag.
Observe that in the ﬁrst iteration of TCERROR procedure,
the tire circumference error ∆TClearned is initialised with an
initial value ∆TCinit. Due to the NCAP requirement, the error
∆TClearned has the upper bound ∆TCmax. Notice that the
upper bound ∆TCmax necessarily depends on the maximum
vehicle speed error permitted by the NCAP requirement.
In every subsequent iteration of the estimation algorithm
TCERROR, the tire circumference error is updated on-the-ﬂy
based on current GPS measurements. Thus, the estimated tire
circumference error is a function of previous estimations and
updates based on current GPS data, as depicted in (7):
∆TClearned = (1 − w) · ∆TClearned + w · ∆TCupdate
(7)
where w = 0.1 is an application parameter.
In order to comply with the NCAP requirements, the up-
dates to the tire circumference error are computed exclusively
with adequate GPS data. Such data carries a maximum error
of eGPS
max = 0.15 and can be used for further computations.
Any other received GPS data, which bears a larger error than
the deﬁned maximum threshold, is discarded. It is therefore
necessary to deﬁne a mechanism by which intervals of good
GPS data can be identiﬁed and selected from the entire GPS
data batch received by the vehicle sensors. The mechannism
for the selection of the GPS data is illustrated visually in Figure
5. Based on the selected GPS data, Algorithm 3 computes the
update of the tire circumference error (see Figure 6).
𝑇𝐶𝑚𝑎𝑥
𝐺𝑃𝑆 + Δ𝑇𝐶𝑚𝑎𝑥
𝑇𝐶𝑚𝑖𝑛
𝐺𝑃𝑆
𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
Δ𝑇𝐶𝐺𝑃𝑆
𝑇𝐶𝑚𝑎𝑥
𝐺𝑃𝑆
𝑇𝐶𝑚𝑖𝑛
𝐺𝑃𝑆 + Δ𝑇𝐶𝑚𝑎𝑥
Δ𝑇𝐶𝐺𝑃𝑆
𝑻𝑪𝑮𝑷𝑺
Δ𝑇𝐶𝑚𝑎𝑥
Δ𝑇𝐶𝑚𝑎𝑥
Figure 5. A visual intuition for the selection of adequate GPS data.
Algorithm 3: Computation of the tire circumference error update.
procedure 𝑇𝐶𝐸𝑟𝑟𝑜𝑟𝑈𝑝𝑑𝑎𝑡𝑒(𝑇𝐶𝑠𝑡𝑎𝑛𝑑𝑎𝑡𝑑, 𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
, 𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡, 𝑒𝐺𝑃𝑆 , Δ𝑇𝐶𝑚𝑎𝑥)
Δ𝑇𝐶𝐺𝑃𝑆 ←
𝑒𝑚𝑎𝑥
𝐺𝑃𝑆⋅1000
𝑛𝑐𝑢𝑟𝑟𝑒𝑛𝑡
𝑇𝐶𝑚𝑎𝑥
𝐺𝑃𝑆 ← 𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
+ Δ𝑇𝐶𝐺𝑃𝑆
𝑇𝐶𝑚𝑖𝑛
𝐺𝑃𝑆 ← 𝑇𝐶𝑚𝑒𝑎𝑠𝑢𝑟𝑒𝑑
𝐺𝑃𝑆
− Δ𝑇𝐶𝐺𝑃𝑆
𝑇𝐶𝐺𝑃𝑆 ←
𝑇𝐶𝑚𝑎𝑥
𝐺𝑃𝑆+(𝑇𝐶𝑚𝑖𝑛
𝐺𝑃𝑆+Δ𝑇𝐶𝑚𝑎𝑥)
2
Δ𝑇𝐶𝑢𝑝𝑑𝑎𝑡𝑒 ← 𝑇𝐶𝐺𝑃𝑆 − 𝑇𝐶𝑠𝑡𝑎𝑛𝑑𝑎𝑟𝑑
end procedure
Figure 6. Algorithm for the computation of the tire circumference error
update.
The proposed algorithm takes further errors into consider-
ation, e.g., errors due to the road gradient and rounding of the
instrument display. We employ several mechanisms in order to
compensate for these errors. Due to space restrictions, these
mechanisms are not explained in this paper.
C. Plausibility Check of the Tire Circumference
For each tire proﬁle, there are speciﬁc lower and upper
limits, which constitute the physical boundaries of the real
and of the estimated tire circumferences. Plausibility checks
are necessary in order to eliminate any outliers.
However, before making any plausibility checks, we use
a ﬁlter on the newly estimated tire circumference, in order
to make sure that the difference between the new value and
the old value estimated in the previous iteration does not
exceed the threshold P = 20 mm in 3 s. An overshoot of
the threshold P usually means that some of the data necessary
for the estimation of the tire circumference has been missing,
e.g., due to the vehicle not running. In this case, the old
75
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

data is not useful anymore, and therefore must be discarded.
The computation continues only with the newly estimated tire
circumference. Afterwards, the plausibility checks ﬁlter out
the physically implausible values, i.e., values situated outside
the interval spanned by the predeﬁned physical boundaries
[TC min, TC max], as shown in (8):
TC plausible = max(TC min, min(TC learned, TC max)) (8)
D. Computation and Roundoff of the Vehicle Speed
The instanteneous vehicle speed is then computed based
on the tire circumference and current wheel speed measured
by the wheel speed sensors of the vehicle, as shown (9).
v = 3.6
1000 · ncurrent · TCplausible
(9)
The speedometer dial in every vehicle displays a range
of natural numbers from zero to an upper limit, which varies
by make and model of the car. The displayed speed vdisplay
is computed by rounding off the vehicle speed v, so that it
matches the numbers on the speedometer range.
E. Smoothing of the Vehicle Speed Curve
A smoothing function is applied to the resulting curve of
the vehicle speed, in order to avoid the pointer needle of the
speedometer bouncing back and forth at every small change
in the estimation of the vehicle speed.
V.
EXPERIMENTS
We implemented the proposed vehicle speed estimation
algorithm using MATLAB/SIMULINK and performed the eval-
uation on two driving scenarios. The data in both driving
scenarios has been collected and provided by our industrial
project partner, who collected the data using its own ﬁeld
test platform. The two scenarios are depicted in Figure 7 and
in Figure 8 respectively, along with the algorithm evaluation.
In both scenarios, the travelling time bears 1000 seconds,
approximately 16.7 minutes. In each scenario, the ﬁrst graph
illustrates the evolution over time of three variables:
1)
the 2D GPS speed measured with the GPS device of
the test vehicle,
2)
the actual vehicle speed, considered to be the ground
truth and which is measured by ADMA sensors, and
3)
the NCAP upper bound, which is the maximum speed
allowed by the NCAP requirement.
The second graph shows the performance of our algorithm with
respect to the maximum vehicle speed deviation permitted by
the NCAP requirement.
The ﬁrst scenario illustrates the ideal situation, speciﬁed
also by the NCAP requirements and preconditions. The value
range of the actual vehicle speed is situated between 50 km
h and
130 km
h . The ADMA speed curve depicts a relatively smooth
driving style, with clear-cut acceleration and decceleration
segments and continuous periods of time with constant driving.
It is fairly easy to see that in this scenario the vehicle speed
deviation, vdisplay − vreal is between cca 0.5 km
h
and cca 3.0
km
h , which satisﬁes the NCAP requirement speciﬁed in (3).
The second scenario depicts a more dynamic situation. The
ADMA speed curve, with a value range between 0 km
h
and
180 km
h , illustrates a more sporty driving style, with abrupt
speed-ups and sharp brakes, which alternate frequently. Notice
that, after 100 s, the estimation of vehicle speed deviation
2D GPS Speed [km/h]
ADMA Speed [km/h]
NCAP Upper Bound [km/h]
50
60
70
80
90
100
110
120
130
Vehicle Speed [km/h]
Travel Time [s]
Travel Time [s]
Vehicle Speed Deviation [km/h]
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
Algorithm Performance [km/h]
Vehicle Deviation 
NCAP Upper Bound
[km/h]
NCAP Upper Bound
Algorithm Performance Evaluation
Test Data (2D GPS Speed and ADMA Speed ) and NCAP Upper Bound
100
200
300
400
500
600
700
800
900
0
1000
100
200
300
400
500
600
700
800
900
0
1000
Figure 7. First scenario: smooth driving.
vdisplay − vreal is stabilized between a minimum of cca 0.5
km
h and a maximum of cca 3.5 km
h , thus satisfying the NCAP
requirement.
2D GPS Speed [km/h]
ADMA Speed [km/h]
NCAP Upper Bound [km/h]
Travel Time [s]
Travel Time [s]
Algorithm Performance [km/h]
Vehicle Deviation 
NCAP Upper Bound
[km/h]
NCAP Upper Bound
Algorithm Performance Evaluation
Test Data (2D GPS Speed and ADMA Speed) and NCAP Upper Bound
-20
0
20
40
60
80
100
120
140
Vehicle Speed [km/h]
160
180
Vehicle Speed Deviation [km/h]
-1
0
2
3
4
5
1
6
100
200
300
400
500
600
700
800
900
0
1000
100
200
300
400
500
600
700
800
900
0
1000
Figure 8. Second scenario: dynamic driving.
However, in this second scenario, the time period of the ﬁrst
100 s is of particularly interest to us. Notice that the estimated
vehicle speed deviation drops down to −1
km
h
around the
middle of this time interval, meaning that the actual vehicle
speed is underestimated. This occurrence can be attributed to
the fact that, at that time, the ADMA speed decreases down
to 0 km
h , i.e., the vehicle has stopped. It is obvious that no
valid wheel speed measurements and GPS sensor data can be
collected while the vehicle is stopped.
VI.
SUMMARY AND CONCLUSIONS
We proposed an algorithm for the estimation of the ego-
vehicle speed displayed on the dashboard instrument. Our
approach is built upon the concepts of Short-Term Memory
and Long-Termy Memory introduced by Atkinson and Shiffrin
[3], which have been further developed in the Self-Adjusting
Memory architectural pattern by Losing et al. [2]. We estimate
the ego-vehicle speed by approximating its actual tire circum-
ference.
76
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

In our approach, long-term estimation is used for the
approximation of a standard tire circumference on the basis of
current measurements of the wheel speed sensors. The wheel
speed readings depend directly on the vehicle conﬁguration,
i.e., the proﬁle of the tires mounted on the vehicle, which
remains rather stable over time. An accurate approximation
of the tire circumference is critical for a precise estimation
of the displayed vehicle speed. Therefore, we use short-term
estimation mechanisms to estimate a tire circumference error,
with which the standard tire circumference is corrected. The
short-term estimation method makes use of the sensor data
collected with the ego-vehicle’s GPS device, during the vehicle
travel time. Not every received GPS data is used for the short-
term estimation. Instead, we deﬁne a mechanism by which only
the adequate data is selected and used for the estimation of the
tire circumference error. We deﬁne several constraints, which
specify in what sort of situations the short-term mechanism
can be triggered. These criteria take into account the error of
the GPS data, the vehicle’s longitudinal and lateral acceleration
and the road gradient. Through this approach, we are able to
better control the process for the tire circumference approxi-
mation and, by extension, that of the vehicle speed estimation.
Furthermore, our algorithm compensates for errors of the tire
circumference estimation occurring due to the road gradient
and the rounding off necessary for the speedometer dial. An
experimental validation of the algorithm on two scenarios with
real-world test data shows that the proposed approach performs
well within the limits of the Euro NCAP requirements.
Nevertheless, there is potential for further optimization,
which we intend to investigate in future research work. This
optimization potential refers to the possible deviations, which
may occur due to slippage, since slippage errors have a direct
inﬂuence on the wheel speed measurements. For this, we
need to perform an extensive analysis on a larger test data
set. Moreover, it would be interesting to apply the presented
vehicle speed estimation approach on test data gathered in
more difﬁcult driving conditions, e.g. patches of wet roadway
alternating with dry road areas. Furthermore, we plan to
extend our case study and investigate mechanisms for long-
term estimation and short-term estimation, which can be used
interchangeably in support of each other, i.e., use LTM to pro-
vide reference values for STM and STM to correct previously
approximated values by LTM.
Since the speedometer is a critical vehicle instrument,
experimental validation and testing are not enough to provide
adequate conﬁdence in the correct functioning of the vehicle
speed estimation method. For this, we plan to use formal
veriﬁcation methods, since they are especially suitable to
provide a mathematical proof that a system conforms to the
legal and and the customer requirements. Furthermore, formal
veriﬁcation methods can be used to construct a solid argument
for the system certiﬁcation.
REFERENCES
[1]
M. Kwiatkowska, G. Norman, and D. Parker, “PRISM 4.0: Veriﬁca-
tion of Probabilistic Real-time Systems,” in Proc. 23rd International
Conference on Computer Aided Veriﬁcation (CAV’11), ser. LNCS,
G. Gopalakrishnan and S. Qadeer, Eds., vol. 6806.
Springer, 2011,
pp. 585–591.
[2]
V. Losing, B. Hammer, and H. Wersing, “Self-Adjusting Memory:
How to Deal with Diverse Drift Types,” in Proceedings of the 26th
International Joint Conference on Artiﬁcial Intelligence, IJCAI-17, 19-
25 August 2017, Melbourne, Australia.
IJCAI, Aug. 2017, pp.
4899–4903, Sierra, C. Ed., ISBN: 978-0-9992411-0-3, URL: https:
//www.ijcai.org/proceedings/2017/690 [accessed: 2020-01-07].
[3]
R. C. Atkinson and R. M. Shiffrin, Human memory: A proposed system
and its control processes.
Academic Press, Jan. 1968, chapter 3, pp.
89–198, in Spence, K. W. and Spence, J. T. The Psychology of Learning
and Motivation, ISBN: 0079-7421.
[4]
W.
Harris,
“How
Speedometers
Work,”
2007,
URL:
https:
//auto.howstuffworks.com/car-driving-safety/safety-regulatory-devices/
speedometer.htm [accessed: 2020-01-09].
[5]
“Richtlinie 75/443/EWG des Rates vom 26. Juni 1975 zur An-
gleichung
der
Rechtsvorschriften
der
Mitgliedstaaten
¨uber
den
R¨uckw¨artsgang und das Geschwindigkeitsmeßger¨at in Kraftfahrzeu-
gen,” 1975, URL: https://eur-lex.europa.eu/LexUriServ/LexUriServ.do?
uri=CELEX:31975L0443:DE:HTML [accessed: 2020-01-06].
[6]
K. Huang and C. Stachniss, “Joint Ego-motion Estimation Using a
Laser Scanner and a Monocular Camera Through Relative Orientation
Estimation and 1-DoF ICP,” in 2018 IEEE/RSJ International Conference
on Intelligent Robots and Systems (IROS), 1-5 October 2018, Madrid,
Spain.
IEEE, Oct. 2018, pp. 671–677, Maciejewski, A. A. Ed., ISBN:
978-1-5386-8095-7, ISSN: 2153-0858, URL: https://doi.org/10.1109/
IROS.2018.8593965 [accessed: 2020-01-08].
[7]
S. Nedevschi, C. Golban, and C. Mitran, “Improving accuracy for
Ego vehicle motion estimation using epipolar geometry,” in 2009 12th
International IEEE Conference on Intelligent Transportation Systems,
4-7 October 2009, St. Louis, MO, USA.
IEEE, Oct. 2009, pp. 1–7,
ISBN: 978-1-4244-5519-5 ISSN: 2153-0017, URL: https://doi.org/10.
1109/ITSC.2009.5309610 [accessed: 2020-01-08].
[8]
G. H. Lee, F. Fraundorfer, and M. Pollefeys, “Motion Estimation for
Self-Driving Cars with a Generalized Camera,” in 2013 IEEE Confer-
ence on Computer Vision and Pattern Recognition, 23-28 June 2013,
Portland, OR, USA.
IEEE, Jun. 2013, pp. 2746–2753, Kellenberger,
P. Ed., ISSN: 1063-6919, URL: https://doi.org/10.1109/CVPR.2013.354
[accessed: 2020-01-08].
[9]
X. Qimin, L. Xu, W. Mingming, L. Bin, and S. Xianghui, “A
methodology of vehicle speed estimation based on optical ﬂow,” in
Proceedings of 2014 IEEE International Conference on Service Op-
erations and Logistics, and Informatics, 8-10 October 2014, Qingdao,
China.
IEEE, Oct. 2014, pp. 33–37, ISBN: 978-1-4799-6058-3, URL:
https://doi.org/10.1109/SOLI.2014.6960689 [accessed: 2020-01-09].
[10]
R.-A. Rill, “Speed estimation evaluation on the kitti benchmark based
on motion and monocular depth information,” 2019.
[11]
A. Geiger, P. Lenz, and R. Urtasun, “Are we ready for autonomous
driving? the kitti vision benchmark suite,” in Conference on Computer
Vision and Pattern Recognition (CVPR), 2012.
[12]
A. Geiger, P. Lenz, C. Stiller, and R. Urtasun, “Vision meets robotics:
The kitti dataset,” International Journal of Robotics Research (IJRR),
2013.
77
Copyright (c) IARIA, 2020.     ISBN:  978-1-61208-771-9
ICONS 2020 : The Fifteenth International Conference on Systems

