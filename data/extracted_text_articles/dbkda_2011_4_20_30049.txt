Symbolic Representation and Reasoning for Rectangles
with Superposition
Takako Konishi
Graduate School of Science & Technology
Kwansei Gakuin University
2-1, Gakuen, Sanda, 669-1337, JAPAN
Email: t.konishi@kwansei.ac.jp
Kazuko Takahashi
School of Science & Technology
Kwansei Gakuin University
2-1, Gakuen, Sanda, 669-1337, JAPAN
Email: ktaka@kwansei.ac.jp
Abstract—This paper discusses the superposition of qualita-
tive rectangles so that some parts are visible and other parts are
hidden based on the user’s requirements. Qualitative rectangles
are rectangles whose size and edge ratios are not ﬁxed. We
investigate the conditions under which such a superposition
succeeds as well as the manner in which such superposition
occurs. We also show an algorithm for superposing a multiple
number of qualitative rectangles. It is applicable to construct
qualitative spatial database for multiple window placement
systems.
Keywords-qualitative
knowledge
representation;
rectangle
packing; spatial database.
I. INTRODUCTION
This work was inspired by an issue which occurs during
multiple window placement. When working on PCs, we
often open multiple windows in a superposed manner within
the restricted space of a monitor. At that time, we seldom
need all the content displayed in the windows; rather, we
pick up the necessary portions by frequent use of mouse
operations, such as clicking or dragging. Efﬁcient placement
of windows such that only the necessary parts are visible
could serve as a useful tool to reduce our annoying mouse
operations. To achieve this, we should specify the parts of
each window to be visible and ﬁnd the superposition of
the windows that satisﬁes the speciﬁcation as well as the
simple positional relationship on the two-dimensional plane.
In general, efﬁcient placement of objects has been studied
as a type of packing problem to which an optimal solution
is searched [1]. Much work has been undertaken in several
application areas, such as VLSI design [2], label-placement
problems [3], [4] and more. In these studies, the problem of
how multiple objects are located in a two-dimensional plane
has been approached under circumstances not involving
superposition. To the best of the authors’ knowledge, no
study has been performed on the location of objects with
superposition.
In this study, we discuss rectangle placement with super-
position. We treat rectangles using qualitative representation:
their sizes and the ratios of their edges are unﬁxed. In each
rectangle, the desired visible part of a rectangle is speciﬁed.
We discuss a manner of superposing them so that all desired
visible parts are in the foreground and all desired hidden
parts are in the background. Figure 1 illustrates several
examples. Assume that three rectangles A, B, and C are
given with a requirement of visibility speciﬁed by a user.
The white indicates the parts that one wants to be visible,
and the black indicates the parts that one wants to be hidden.
In this ﬁgure, (a), (b), and (c) are successful cases, whereas
(d) is not. In (c), ﬁrst reduce B’s width to ﬁt the vertically-
long-size subpart of the black part of A, then C is put on
the black part in the lower left part of the resultant ﬁgure.
In (d), visible black parts remain after superposing A and
B cannot be hidden by C in any superposition of A and
B. In this paper, we show how we evaluate the success of
superposition and placement in these cases.
Considering multiple window placement, a window is
divided into several frames in most application software
and their dividing patterns are restricted. An automatic
window placement can be accomplished by the following
mechanism: add the attribute value on visibility to each
frame of each window, store in the database the list of pairs
of a combination of multiple windows with the attribute
values and their best placement; retrieve the best placement
from the database for the combination of windows on their
invocation, and display them. Attribute value on each frame
can be decided through learning from lots of examples,
however, this issue is beyond the scope of this paper.
Here, we assume that it is given in advance and discuss
reasoning about the best placement for a given combination
of windows.
We take a qualitative approach. One reason for this is
that it enables symbolic handling of objects. In general,
spatial data can be inconveniently large to store and handle.
Symbolic handling reduces this computational complexity.
Another reason is that it is enough to know the relative
positional relationship of objects on a two-dimensional plane
and their foreground/background relationship, ignoring the
exact size or position of each object. Such an idea is
considered to be a type of qualitative spatial reasoning
(QSR) in the ﬁeld of artiﬁcial intelligence [5], [6], [7], [8].
71
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

A
B
C
C
A
B
B1
A1
A1
B1
A
B
C
C
B1
A1
B1
A1
A
B
C
C
A1
A2
A1 A2
B1
B1
A
B
C
fail
A1
B1
(a)
(b)
(c)
(d)
Figure 1.
Examples of superposing rectangles
There are several studies on qualitative spatial database. For
example, Wang and Liu showed an application of QSR to
geospatial semantic web by constructing qualitative spatial
database, in which objects and their qualitative relations
are stored instead of coordinates, from the Geography
Markup Language (GML) [9]. Santos and Amaral proposed
an approach to make qualitative database, by introducing
qualitative identiﬁer such as direction and relative distance,
and apply it to data mining [10]. Although these studies
showed effectiveness of qualitaive spatial database, further
studies are required. This paper aims at enlarging possible
application areas of qualitative spatial database.
This paper is organized as follows. In Section II, we deﬁne
the target object and describe its qualitative representation.
In Section III, we describe the operations of superposing a
pair of qualitative rectangles, and discuss reasoning about
superposition. In Section IV, we discuss the result of su-
perposition and show an algorithm for superposing multiple
qualitative rectangles. Finally, in Section V, we show the
conclusion.
II. DESCRIPTION
We call a superposing entity a unit. A unit is divided into
WHITE which should be visible, and BLACK, which should
be hidden. BLACK is divided into a core region and a non-
core region, which will be deﬁned later. The outer side of a
unit is called GRAY. The length of edges and the ratios of a
unit and of each region are unﬁxed. On the other hand, the
orientation of a unit should be ﬁxed. We only use rectangles
situated in an upright position and do not consider those
in an inclined orientation. These means that (a) and (b) in
Figure 2 are regarded as equivalent, while (a) and (c) are
regarded as different.
Each connected WHITE is called a white region, the core
region and each connected non-core region are called black
regions, and GRAY is called a gray region. The white, black,
and gray regions have attribute values related to visibility,
denoted by ’w,’ ’b,’ and ’g.’ ’w’ and ’b’ denote that the
region should be visible and hidden, respectively. ’g’ denotes
there is no requirement with respect to visibility.
(a)
(b)
(c)
Figure 2.
Qualitative rectangles
Considering a structure of frames of WEB pages or
a style of dividing a window into sub-windows in many
applications, we restrict the type of unit to those in Figure 4.
Any unit can be deﬁned as a qualitative rectangle obtained
by the following operation that ﬁts black plates into a white
rectangle. Conversely, a qualitative rectangle obtained by this
operation is only the units shown in Figure 4. Let a ∗ b
represent a size of a unit whose length is a and height
is b. Consider the two black plates whose sizes are x ∗ b
(0 ≤ x ≤ a) and a ∗ y (0 ≤ y ≤ b). Fit these plates into a
white rectangle while preserving their orientations in either
of the following manners. Symbols enclosed in parentheses
denote names of unit types.
(0) No plate is ﬁt (W).
(1) Only one of the plates is ﬁt (B, I1, I2).
(2) Both plates are ﬁt (L1, T1, PLUS).
(3) Extend L1 and T1, respectively, where the white region
is added to the part on which the edge of a size a or b is
connected to the outer part (L2, T2).
Deﬁnition 1. The unit obtained in this manner is said to be
valid.
Types I1 and I2 are called straight-plate-units. Types L1,
L2, T1, T2, and PLUS are called cross-plates-units. All units
of the same type are called a pattern.
For all units other than the W-type unit, the core region is
deﬁned. For B-type and straight-plate-units, the core region
is deﬁned as the entire BLACK. For cross-plates-units, the
core region is deﬁned as the intersection of the two plates,
and the region not included in the core region is called the
non-core region (Figure 3).
In a valid unit, all white regions are convex, and there
72
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

non-core
core
Figure 3.
Core region and non-core region of cross-plates-unit
B
W
I1
I2
T2
PLUS
T1
L1
L2
Figure 4.
All units
exists only one connected BLACK.
We denote the core region of a unit X by CoreX.
The valid unit can be uniquely represented as a quadruple
of attribute values composed of CoreX’s upper region,
right region, lower region, and left region. We call this
representation a representation for a unit. For example, the
representation for a unit in Figure 3 is ⟨b, b, g, g⟩, since the
core region has black regions in its upper side and right side,
whereas it is connected to the outside in its lower side and
left side. Note that the positional relationships of regions are
preserved even if the size of a unit is changed.
Let V, R and TY PE indicate a set of attribute values, a
set of representations for units, and a set of types, that is:
V = {b, w, g}
R = {⟨r1, r2, r3, r4⟩ | ri ∈ V (i = 1, . . . , 4)}
TY PE = {’B’,’W’,’I1’,’I2’,’L1’,’L2’,’T1’,’T2’,’PLUS’}
Then, the function type that deﬁnes the type for a represen-
tation r ∈ R is deﬁned as follows.
type : R → TY PE
type(⟨g, g, g, g⟩)
= ’B’
type(⟨w, w, w, w⟩)
= ’W’
type(⟨w, g, g, g⟩)
= ’I1’
type(⟨w, g, w, g⟩)
= ’I2’
type(⟨b, g, g, b⟩)
= ’L1’
type(⟨b, g, w, b⟩)
= ’L2’
type(⟨b, b, g, b⟩)
= ’T1’
type(⟨b, b, w, b⟩)
= ’T2’
type(⟨b, b, b, b⟩)
= ’PLUS’
Note that type W is deﬁned with the assumption that there
exists a tiny core region surrounded by white regions, as
CoreX does not exist.
The projections from r ∈ R to its elements are deﬁned as
follows.
up/dn/lt/rt : R → V
Let r be ⟨r1, r2, r3, r4⟩.
up(r)
= r1
rt(r)
= r2
dn(r)
= r3
lt(r)
= r4
Moreover, the function rotate(r) that denotes a π/2
clockwise rotation of a unit r and the function symm(r) that
denotes a symmetric transformation of a unit r are deﬁned
as follows:
Let r be ⟨r1, r2, r3, r4⟩.
rotate : R → R
rotate(⟨r1, r2, r3, r4⟩) = ⟨r2, r3, r4, r1⟩
symm : R → R
symm(⟨r1, r2, r3, r4⟩) = ⟨r1, r4, r3, r2⟩
Note that type(r) = type(rotate(r)) and type(r) =
type(symm(r)) hold.
III. REASONING ABOUT SUPERPOSITION
A. The principle
When n (n ≥ 3) units are given, we consider the manner
of their superposition in which all white regions are visible
and all black regions are hidden.
Here, we place units sequentially. k-th unit (n ≥ k ≥ 2)
should be placed on the ﬁgure composed of k − 1 units
so that at least one region of the former is placed on at
least one region of the latter. That is, we do not consider
the placement in which, after two units are placed in a
disconnected manner, the third unit is placed onto the black
region of the two rectangles simultaneously. Thus, there
should be at least one W-type unit, and only one connected
rectangular BLACK should be visible when superposition of
n − 1 units is completed.
Here, we assume that there is one W-type unit. When
more than one W-type unit exists, the scenario can be
considered similarly.
73
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

merge two regions encircled
 by white dotted line
<w,b,g,g>
Z
<w,g,g,g>
Y
<w,g,g,g>
change the ratio
of edges
superpose 
Y on X
X
<b,b,g,g>
white region
core region
non-core region
Figure 5.
The case in which merge is necessary
B. Superposing the core regions
Deﬁnition 2. Suppose that a unit X and an straight-plate-
unit Y are given. Let CoreX and CoreY be the core regions
of X and Y , respectively. The superposition in which CoreY
is placed exactly on CoreX is called puton operation.
Let Z be the resultant ﬁgure of puton, and let CoreZ be
the superposed region of CoreX and CoreY . We extend a
representation for a unit to be available as a representation
for Z. A representation for Z is a quadruple of the attribute
values of visible regions surrounding CoreZ.
First, we compute the attribute values of the regions
around CoreZ. We deﬁne the function on, which computes
the attribute value of the visible region when one region
is placed exactly on another region, from those of the two
regions.
on : V × V → V ∪ {U}
on(b, b) =
b
on(b, w) =
w
on(w, w) =
U
on(w, b) =
U
on(g, v) =
v where v ∈ V
on(v, g) =
v where v ∈ V
’U’ means that the operation is undeﬁned for that case.
It sometimes occurs that X’s black regions are visible
in Z. If they are connected with CoreZ by lines, it is
necessary to merge them to deﬁne the merged region as new
CoreZ. For example, in Figure 5, X and Y are represented
as ⟨b, b, g, g⟩ and ⟨w, g, g, g⟩, respectively. When we place
Y on X such that CoreY is placed on CoreX, the resultant
ﬁgure Z is represented as ⟨w, b, g, g⟩. X’s non-core region
is visible, which is connected with CoreZ by a line. Then,
this region is merged with CoreZ. This function merge is
deﬁned as follows.
Let r = ⟨r1, r2, r3, r4⟩. If it satisﬁes (c1), then merge(r)
succeeds. When merge succeeds, its value is deﬁned as
follows.
(c1)
∧
i=1,...,4(ri ̸= U).
merge : R → R
merge(r) =



















⟨g, r2, g, r4⟩
if r1 = b ∧ r2 ̸= b ∧ r3 = b ∧ r4 ̸= b
⟨r1, g, r3, g⟩
if r1 ̸= b ∧ r2 = b ∧ r3 ̸= b ∧ r4 = b
⟨g, r2, r3, r4⟩
if r1 = b ∧ r2 ̸= b ∧ r3 ̸= b ∧ r4 ̸= b
⟨r1, g, r3, r4⟩
if r1 ̸= b ∧ r2 = b ∧ r3 ̸= b ∧ r4 ̸= b
⟨r1, r2, g, r4⟩
if r1 ̸= b ∧ r2 ̸= b ∧ r3 = b ∧ r4 ̸= b
⟨r1, r2, r3, g⟩
if r1 ̸= b ∧ r2 ̸= b ∧ r3 ̸= b ∧ r4 = b
⟨r1, r2, r3, r4⟩
otherwise
Success of puton operation
For representations r=⟨r1, r2, r3, r4⟩ and r′=⟨r′
1, r′
2, r′
3, r′
4⟩,
if merge(on(r1, r′
1), on(r2, r′
2), on(r3, r′
3), on(r4, r′
4)) suc-
ceeds, puton succeeds and its value is deﬁned as follows.
puton : R × R → R
puton(r, r′) =
merge(on(r1, r′
1), on(r2, r′
2), on(r3, r′
3), on(r4, r′
4))
The following property clearly holds due to the deﬁnition
of puton.
Theorem 3. If the puton operation succeeds, Z’s BLACK is
connected, and all of its white regions are convex.
Next, consider that we superpose the third unit on Z.
There are two necessary conditions for this operation to
succeed. First, if Z’s BLACK is not rectangular, superposing
the W-type on Z will not succeed. Second, if Z is not valid,
continuous superposition cannot be considered. We describe
how to verify these two conditions.
Shape veriﬁcation of BLACK
Let r be a representation for Z. If r satisﬁes both (c2)
and (c3), then Z’s BLACK is rectangular.
(c2)
(up(r) = b ∨ dn(r) = b) →
(lt(r) ̸= b ∧ rt(r) ̸= b)
(c3)
(lt(r) = b ∨ rt(r) = b) →
(up(r) ̸= b ∧ dn(r) ̸= b)
Deﬁnition 4. For a ﬁgure Z obtained by superposing n
(n ≥ 2) units, if there exists only one connected BLACK that
is visible and rectangular, then Z is said to be effective.
Shape veriﬁcation of the whole ﬁgure
Let r = ⟨r1, r2, r3, r4⟩ and r′
= ⟨r′
1, r′
2, r′
3, r′
4⟩ be
representations for units X and Y , respectively. For the
entire shape of Z to be rectangular, the white region of Y
should not be placed on GRAY of X. Therefore, if r and r′
satisfy (c4), then the shape of Z is a rectangle.
(c4)
If there does not exist i (1 ≤ i ≤ 4) such that
ri = g, r′
i = w.
C. Superposition by embedding
We can consider another superposition operation of
embed.
Deﬁnition 5. If we place the whole unit on the entirety or
on a part of BLACK of the other unit, this operation is called
an embed operation.
74
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

white
β2
β1
CoreX
Figure 6.
The regions to be hidden in L1
IV. RESULT OF SUPERPOSITION
In Deﬁnition 2, we deﬁned puton operation for a super-
position of a straight-plate-unit and a unit. In this section,
we extend this operation for any pair of unit types. And we
discuss the effectiveness and validity of the resulting ﬁgures
of the operation puton and embed for each pair of unit
types.
A. Superposition on B/W type
Assume that we superpose some unit on the B-type. The
resultant ﬁgure is effective if and only if we superpose the
straight-plate-unit, and it is valid for any type.
On the other hand, it is impossible to place any unit on
the W-type.
B. Superposition of straight-plate-units
Assume that we superpose the straight-plate-unit on the
straight-plate-unit. The resultant ﬁgure obtained by the
puton operation is not always valid, as its entire shape
may not be a rectangle. The resultant ﬁgure obtained by
the embed operation is not always valid, as a white region
may not be convex. On both operations, the resultant ﬁgure
is effective.
C. Superposition of the straight-plate-unit on the cross-
plates-unit
Assume that we superpose the straight-plate-unit on the
cross-plates-unit. The resultant ﬁgure obtained by any oper-
ation is not always valid and not always effective. However,
the following property holds.
Theorem 6. When we superpose the straight-plate-unit on
the cross-plates-unit, the effective ﬁgure cannot be obtained
by any operation other than the puton operation.
Proof:
Consider the puton operation that places a straight-plate-
unit Y on an L1-type unit X shown in Figure 6. In this
case, BLACK is divided into three regions: one core region
CoreX and two non-core regions β1 and β2. Let CoreY be
Y ’s core region.
One or two of the CoreX, β1, β2 should be hidden so that
the resultant superposed ﬁgure is effective.
(i) Only one region is hidden.
If only CoreX is hidden, β1 and β2, which are discon-
nected, are visible. Therefore, the result is not effective.
If only β1 is hidden, CoreX, β2 and CoreY are visible
CoreY
white1
white2
g
w
b
b
Figure 7.
Representation of locations of white regions
in the resultant ﬁgure. Considering the relative position of
CoreX, β1 and β2, it is impossible to make a rectangle by
merging CoreX, β2 and CoreY and to hide β1 at the same
time. Therefore, the result is not effective. Similarly, the
result is not effective if only β2 is hidden.
(ii) Two regions are hidden.
Since β1 and β2 are disconnected, they are not simul-
taneously hidden by a single unit. If both CoreX and β1
are hidden, β2 and CoreY are visible. We must place Y ’s
regions onto both CoreX and β1 to make them hidden.
Moreover, we must make a rectangle by merging β2 and
CoreY . The only place where CoreY should be placed
to satisfy both conditions is CoreX, and this placement is
identical to the puton operation.
Based on the above analysis, the resultant ﬁgure is not
effective by operations other than the puton operation.
Other cases can be similarly proven.
D. Superposition of the cross-plates-unit on any type
Assume that we place the cross-plates-unit on any type
of unit.
In this case, the resultant ﬁgure is always ineffective with
any operation. However, the puton operation succeeds for
several cases.
In general, when the puton operation is performed on X
and Y , WHITE should not be placed on X’s WHITE. When
Y is a cross-plates-unit, we have to consider its white region
located in the inclined orientation from CoreY . The location
of white region is represented as the occurrence either of b
in adjacent elements or of b and w in adjacent elements
in the representation for Y . For example, a representation
for a unit in Figure 7 is ⟨b, b, w, g⟩. The sequence b, b
represents the location of white1, the upper left of CoreY ,
and the sequence b, w represents that of white2, the lower.
Therefore, the condition on WHITE can be represented as
(c5).
(c5)
Let ⟨r1, r2, r3, r4⟩ and ⟨r′
1, r′
2, r′
3, r′
4⟩ be represen-
tations for X and Y , respectively. There exists
some i (i = 1, . . . , 4) such that both ri = r′
i ̸= g
and ri+1 = r′
i+1 ̸= g, where r5 is regarded as r1.
Success of extended puton operation
In any pair of units X and Y , if (c1) and (c5) are satisﬁed,
the puton operation succeeds.
On the other hand, we can get valid ﬁgures by the embed
operation in some cases. Table I shows the result of the
75
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

fg\ bk
L1
L2
T1
T2
PLUS
I1
L1 L2
L1 L2
T1 T2
T1 T2
U∗
I2
U
U
T1
T2
U
L1
L1
L2 T2
T1
T2
U∗
L2
L2
L2
U∗
U∗
U
T1
T1
T2
T1
T2
U∗
T2
U
U
T2
T2
U
PLUS
U
U
PLUS
U
PLUS
Table I
RESULT OF embed FOR CROSS-PLATES-UNITS
(2)
(1)
Figure 8.
U∗: Invalid example
embed operation. In this table, the row shows the unit
in the background, and the column shows the unit in the
foreground. We show the obtained types when the embed
operation succeeds for each pair of patterns of each type.
U means there is no solution. In case of U∗, it appears to
be successful at ﬁrst glance, but there is no solution. For
example, Figure 8 shows the resultant ﬁgure obtained by the
operation of embed for L2 on T1. It is not valid because it
is impossible to align line (1) and line (2).
E. Algorithm for multiple units superposition
Let Ω be a ﬁnite set of valid units where |Ω| ≥ 2, and
ω is a W-type unit. Then, an algorithm for superposing the
units in Ω is shown below.
In the following algorithm, superposition indicates either
the puton or embed operation.
Let Ω be a sequence obtained by setting the elements of
Ω in an arbitrary order.
(1) Let X be a head element X1 of Ω,
and set Ω = Ω − {X1}.
(2) Let Y be a head element X2 of Ω,
and set Ω = Ω − {X2}.
(3) Let Z be the resulting ﬁgure of superposing Y on X.
(4) If Ω = ∅,
if Z is effective, then success
else failure
else
if Z is valid, then set X = Z, and goto (2)
else failure.
If there exists a sequence Ω that succeeds in this proce-
dure, then the superposition of Ω ∪ {ω} succeeds.
V. CONCLUSION
We have discussed superposition of a pair of units and
investigated the conditions that satisfy the result where all
white regions are visible while all black regions are hidden
in the resultant ﬁgure when visibility is speciﬁed by a user.
• A pair of straight-plate-units always produces an ef-
fective solution either by the puton operation or the
embed operation.
• The straight-plate-unit on cross-plates-unit can produce
an effective solution only by the puton operation.
• The cross-plates-unit on any type can produce no
effective solution.
As for the last case, we have shown which pairs can
generate valid solutions.
We also show an algorithm for superposing a set of units.
This is the ﬁrst study to address object placement with
superposition.
Qualitative approach enables the reduction of compu-
tational complexity and provides intelligent reasoning by
symbolic treatment of spatial data. Although it is effective
on spatial database, there have been few works so far. Our
contribution is to enlarge possibile application areas of quali-
tative spatial database by showing qualitative representation
and reasoning to construct database for multiple window
placement systems.
In the future, we are considering weakening the conditions
of the unit, such as allowing disconnected black regions.
REFERENCES
[1] G. Birgin, R. D. Lobato, and R. Morabito, “An effective
recursive partitioning approach for the packing of identical
rectangles in a rectangle,” Journal of the Operational Re-
search Society, vol. 61, pp. 306-320, 2010.
[2] A. S. Lapaugh, “Layout algorithm for VLSI design,” ACM
Computing Surveys, vol. 28, no. 1, pp. 59-61, 1996.
[3] H. Freeman, “Computer name placement,” in Geographical
Information Systems 1, D. J. Maguire, M. F. Goodchild, and
D. W. Rhind, Eds. John Wiley, 1991, pp. 449-460.
[4] J. Li, C. Plaisant, and B. Shneriderman, “Data object and
label placement for information abundant visualizations,” in
Proceedings of the Workshop of New Paradigms Information
Visualization and Manipulation (NPIV98), 1998, pp. 41-48.
[5] M. Aliello, I. E. Pratt-Hartmann, and J. F. A. K.Van Benthem,
Eds., Handbook of Spatial Logics. Springer-Verlag, 2007.
[6] A. Cohn and S. Hazarika, “Qualitative spatial representa-
tion and reasoning: an overview,” Fundamental Informaticae,
vol. 46, no. 1, pp. 1-29, 2001.
[7] M. Egenhofer and R. Franzosa, “On the equivalence of
topological relations,” International Journal of Geographical
Information Systems, vol. 9, no. 2, pp. 133-152, 1995.
[8] S. Kumokawa and K. Takahashi, “Rectangle reasoning: a
qualitative spatial reasoning with superposition,” in Proceed-
ings of 23rd Florida Artiﬁcial Intelligence Research Society
Conference (FLAIRS23), 2010, pp. 150-151.
[9] S. Wang and D. Liu, “Qualitative spatial relation database
for semantic web,” in First Asian Semantic Web Conference
(ASWC), 2006, pp. 387-399.
[10] M. Santos and L. Amaral, “Geo-spatial data mining in the
analysis of a demographic database,” Soft Computing - A Fu-
sion of Foundations, Methodologies and Applications, vol. 9,
no. 5, pp. 374-384, 2005.
76
DBKDA 2011 : The Third International Conference on Advances in Databases, Knowledge, and Data Applications
Copyright (c) IARIA, 2011              ISBN:978-1-61208-115-1

