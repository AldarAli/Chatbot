Bandwidth-Efﬁcient Parallel Visualization for Mobile Devices
Andreas Helfrich-Schkarbanenko, Vincent Heuveline, Roman Reiner, Sebastian Ritterbusch
Engineering Mathematics and Computing Lab (EMCL)
Karlsruhe Institute of Technology (KIT)
Karlsruhe, Germany
{andreas.helfrich-schkarbanenko, vincent.heuveline, roman.reiner, sebastian.ritterbusch}@kit.edu
Abstract—For visual analysis of large numerical simulations
on mobile devices, we introduce a remote parallelizable visual-
ization method for low-bandwidth and high-latency networks.
Based on a mathematical model for multi-layered planar
impostor representation of arbitrary complex and unbounded
scenes, we derive optimal impostor placement from a derived
metric. Using stochastic usage models, we prove the optimal
bandwidth consumption order for choosing corresponding
viewport impostor sets, leading to bandwidth-efﬁcient remote
visualization concepts for high performance computing simu-
lation results.
Keywords-Remote Visualization; Mobile Visualization; Optimal
Impostor Placement.
I. INTRODUCTION
Remote visualization is vital wherever local storage, data
transfer rates or graphical capabilities are limited. Even
though the capabilities of modern smartphones are increas-
ing rapidly, many desirable applications are impeded by
limitations of the current hardware [1].
Image-based rendering techniques [2] are widely used to
reduce the geometric complexity of virtual environments by
replacing parts of a scene with a textured representation
approximating the original geometry. Since these so-called
impostors have a signiﬁcantly simpliﬁed geometry, parallax
errors [3] occur when rendering the approximation. An
impostor is generated for an initial viewport (that is, a
position and viewing direction) and is said to be valid as
long as the visual difference to the (hypothetically rendered)
original geometry is below a certain threshold.
In our application, these impostors are rendered remotely
on render servers and streamed to a mobile device where
they are used to approximate the scene. One substantial
advantage of the impostor approach [4] is that the render
time on the device only depends on the number of impostors
and the resolution of the textures, not on the amount of data
they display. As long as servers can generate and transfer the
impostor textures sufﬁciently fast, every scene can be dis-
played remotely, regardless of its actual complexity. In this
setting, network bandwidth is the bottleneck and a careful
analysis of bandwidth consumption becomes mandatory.
We develop a mathematical model that allows to quantify
the display error and propose an approximation method that
proves to be optimal with respect to the derived error metric.
We can show that our method signiﬁcantly reduces the total
amount of image data that needs to be transferred. The
key aspects of our method are illustrated in Figure 1: In
this simpliﬁed two-dimensional case, a traditional remote
visualization using one layer would need at least 32 images
to provide the same visual accuracy as one layer set of 5
images. This effect is ampliﬁed by each additional degree
of freedom of the viewer.
In the following Section II, we discuss related work. Then
we introduce the underlying mathematical model in Sec-
tion III, on which we derive the fundamental error metrics. In
Section IV, this leads us to the optimal impostor placement
and directly corresponding bounds for the visualization error
of one impostor set. The practical outcome of the ﬁndings,
using as many impostor sets as needed, is proven and
evaluated in Section V, which is leading us to the conclusions
in Section VI.
II. RELATED WORK
A variety of image-based rendering techniques are re-
viewed in [4] and [2]. The ﬁrst paper focuses mainly on
techniques using planar impostors but also mentions more
exotic approaches like depth images (planar impostors with
per-pixel depth information) and light ﬁelds. These and other
techniques, such as view morphing and view dependent
textures, are examined in more detail in the second paper.
In the majority of cases, planar impostors stacked with
increasing distance to the observer are used (see [3], [5],
[6]), usually to approximate distant parts of the scene or
single objects. In contrast, our approach uses impostors to
represent the full scene.
For large objects, different parts of continuous surfaces
can end up on different impostors which makes them tear
apart when viewed from a shallow angle. Avoiding this
particular problem was one focus of the method developed in
[3]. Another interesting use of planar impostors is [7], which
treats the rendering of volume data on mobile phones.
Several approaches using geometrically more complex
impostors can be found in [6], [8] and [9]. In [4], so-called
billboard clouds are used to approximate the shape of an
object using several intersecting planar impostors. While
the impostor creation process for this approach is quite
106
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

(a) 32 impostor sets with one layer each
(b) Four impostor sets with three layers each
(c) One impostor set with ﬁve layers
Figure 1.
An impostor representation is only valid inside a small region around the initial viewport for which it was originally created. For observer
viewports within this validity region (indicated by the dotted line) the display error does not exceed a given maximum value. To faithfully approximate
the scene for all observer viewports inside the shaded area, several impostor sets have to be transmitted.
The validity regions can be enlarged (while keeping the maximum error unaltered) by increasing the number of layers per impostor set. As the number
of required impostor sets decreases faster than the number of layers per set increases, this signiﬁcantly reduces the total number of layers needed to
approximate the scene to a given accuracy .
costly, the result allows examination from different viewing
directions.
A very current example is Street Slide [10]. Street Slide
sticks photos of front facades of urban environments to
“panorama strips” that can be browsed by sliding sideways.
The need for accurate analysis of bandwidth and accuracy
estimates is discussed in [4], [5], without further specifying
how to choose which viewports to load. A more in-depth
analysis on the subject of pre-fetching is given in [11] and
[12]. The former deﬁnes a so-called beneﬁt integral, indicat-
ing which parts of the scene – quality-wise – contribute most
to the ﬁnal image, the latter deals with rendering an indoor
scene remotely. The task of remote rendering on mobile
devices is addressed in [13] and [14], which mostly focuses
on the technical aspects of the server-client communication.
Usually, depending on the complexity of the approxima-
tion, an impostor is either easy to generate but only valid
inside a small region and thus needs to be updated very
often, or it is valid inside a large domain but complex and
difﬁcult to generate and display [2]. Since the former strains
bandwidth and the latter strains render speed, any image-
based rendering approach is usually a trade-off between
these limiting factors.
III. VISUALIZATION MODEL AND ERROR METRICS
To begin with, a mathematical model describing viewports
and projections thereon needs to be established, with which
the rendering and approximation processes can be described.
This yields an error function describing the maximum paral-
lax error of a scene as a function of the observer movement,
called domain error.
Finally, modelling the observer movement as a probability
distribution, we can describe the expected value of this error.
This interaction error will be the cost function that we intend
to minimize.
A. Perspective projection
Using homogeneous coordinates and projective transfor-
mations [15], we can express perspective projection as a
4 × 4 matrix multiplication on the projective space P3:
Deﬁnition 1. The perspective projection onto the plane x3 =
d towards the origin is a function
πd :
(
P3\{(0, 0, 0, 1)⊤}
−→
x
7−→
P3
Pdx
with the parameter d > 0 deﬁning the proximity of the
projection plane.
From the intercept theorems, one can easily see that
the perspective projection of a point v = (v1, v2, v3)⊤ ∈
R3, v3
̸=
0 onto the plane x3
=
d is given by
( d
v3 v1, d
v3 v2, d)⊤ which, using homogeneous coordinates,
equals (v1, v2, v3, v3
d )⊤. This yields the projection matrix
Pd :=




1
0
0
0
0
1
0
0
0
0
1
0
0
0
1/d
0



 .
B. Viewports
Any viewport can be described by ﬁve values c1, c2, c3 ∈
R, ϑ ∈ [−π/2, π/2], ϕ ∈ [−π, π), deﬁning an afﬁne transfor-
mation χ, which is the combination of a translation by the
vector (c1, c2, c3)⊤ followed by a rotation around the x1-
axis with the angle ϑ and a rotation around the x2-axis with
the angle ϕ (cf. Figure 2). Actually, there is a sixth value
which represents a rotation around the viewing direction.
107
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

Such a rotation, however, does not change the image besides
rotating it. We assume the rotation to be lossless, which is
why we do not need it for our purposes.
Figure 2.
The angles ϕ and ϑ of a viewport χ
We
condense
all
ﬁve
values
into
a
single
vector
c := (c1, c2, c3, ϑ, ϕ)⊤. When describing viewports, we
will use this vector c and the associated transformation
χc interchangeably. In particular, we will identify sets of
viewports with subsets of R5:
Deﬁnition 2. The set
X := R3 × [−π/2, π/2] × [−π, π) ⊂ R5
will be called the viewport set. For all practical purposes,
however, we want to restrict to viewports inside a given set
of feasible viewports Λ ⊂ X.
Projective matrix representations of χc and its inverse are
Qc =

 Bϑ,ϕ
Bϑ,ϕc
0
1


and
Q−1
c
=

 B⊤
ϑ,ϕ
−c
0
1


where
Bϑ,ϕ :=


cos ϕ
− sin ϕ sin ϑ
− sin ϕ cos ϑ
0
cos ϑ
− sin ϑ
sin ϕ
cos ϕ sin ϑ
cos ϕ cos ϑ

 .
We can now calculate a matrix representation of a projec-
tion onto an arbitrary viewport, by combining the matrices
above with the matrix representations of the default projec-
tion πd.
Deﬁnition 3. Let χ be a viewport with an associated matrix
representation Q and let πχ denote a projection onto the
viewport χ. Then, a matrix representation of πχ is given
by Pχ,d = QPdQ−1, where Pd is the perspective projection
matrix deﬁned in Deﬁnition 1.
C. Rendering process
Let renderable objects be located in a domain Ω. We aim
to simplify the scene by dividing Ω into m disjoint parts
Ωi called cells, replacing each with a planar representation
of their contained objects. These so-called impostors will be
created for the same initial viewport(s), that is, for a certain
viewport we will create an impostor set with one impostor
per cell, all for that particular viewport. This will be done
for n initial viewports resulting in n impostor sets with m
impostors each.
As long as the current viewport matches the initial view-
port for which the impostors have been created, the impostor
representation coincides with the image of the actual scene.
Changing the viewport, however, will introduce parallax er-
rors, since depth information is lost in the impostor creation
process.
To determine this error, we will ﬁrst regard a single cell
Ωi and a single vertex v ∈ Ωi. For a ﬁxed initial viewport χ1
we calculate the impostor representation v of the actual point
v. Then we consider a variable viewport χ and calculate the
screen coordinates v′ of v and v′ of v as functions of the
viewports χ and χ1 (cf. Figure 3).
Figure 3.
Rendering process for changed viewport
D. The domain error
If we reiterate the procedure above, we obtain two images
for each point in Ω: one image of itself (v′, depending on
χ) and one of its impostor representation (¯v′, depending on
both χ and χ1). The screen distance of these two, measured
in (sub-)pixels is called the screen space error. As we are
not interested in the error of a single point, but rather in
error functions expressing the error of the entire scene, for
example the mean error or the maximum error, we aggregate
the screen space error over all point in Ω. As the distribution
of vertices inside Ω is supposed to be unknown, we assume
a uniform distribution and integrate the screen space error
over the entire domain Ω. We will be using the maximum
error which replaces the integral with a supremum.
Deﬁnition 4. Denote the number of cells with m. For an
initial viewport χ1 we deﬁne the domain error
D(χ, χ1)
:=
sup
v∈Ω
v′(χ) − ¯v′(χ, χ1)

2
=
max
0≤i≤m
n
sup
v∈Ωi
v′(χ) − ¯v′(χ, χ1)

2
o
.
This domain error depends on a variable observer view-
port χ and the ﬁxed viewport χ1, for which the displayed
impostor set was initially created. The dependence on χ
108
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

implies that we cannot evaluate our impostor approximation
without knowledge of the observer movement. Clearly, we
want to optimize our setup a priori, and hence we need to
ﬁnd a way to evaluate it without knowledge of χ.
E. The interaction error
Assume that we have n impostor sets at hand for view-
ports χ1, . . . , χn ∈ Λ ⊂ X. As before, we denote the
observer’s viewport with χ ∈ Λ. Since we can choose
from several impostor sets, we display that set whose initial
viewport χk satisﬁes
D(χ, χk) = min
1≤j≤n D(χ, χj).
For 1 ≤ k ≤ n let Ξk denote that subset of Λ, on which
D(χ, χk) is the smallest of all domain errors:
Ξk :=

χ ∈ Λ
 D(χ, χk) = min
1≤j≤n D(χ, χj)
	
.
(1)
Next, we deﬁne a probability distribution P with an asso-
ciated probability density function µ on Λ, for instance,
a uniform distribution over Λ or a normal distribution
around the current viewport χ. These distributions represent
the probability for the respective viewport to occur, thus
modeling the expected observer movement. We can then
calculate the expected value of the error by integrating
the domain error D over Λ with respect to the probability
distribution P.
Deﬁnition 5. Let n ≥ 1. We deﬁne the interaction error
I : Λn → R, where
I(χ1, . . . , χn)
:=
Z
Λ
min
1≤j≤n D(χ, χj) dP(χ)
(2)
=
n
X
j=1
Z
Ξj
D(χ, χj) dP(χ).
The following Lemma shows that the interaction error will
decrease as we add more viewports.
Lemma 1. Let χ1, . . . , χn ∈ Λ. Then
I(χ1) ≥ I(χ1, χ2) ≥ · · · ≥ I(χ1, . . . , χn).
Proof: For 1 ≤ k ≤ n, it is
I(χ1, . . . , χk)
=
Z
Λ
min
1≤j≤k D(χ, χj) dP(χ)
≤
Z
Λ
min
1≤j≤k−1D(χ, χj) dP(χ)
=
I(χ1, . . . , χk−1).
IV. IMPOSTOR PLACEMENT AND ERROR BOUNDS
The efﬁciency of the proposed method is based on an
optimal choice of initial viewports for the impostor sets, as
well as an optimized cell partition for each set.
Theorem 2. Given renderable objects located in
Ω :=

(x1, x2, x3, 1)⊤ ∈ P3  0 < a0 < x3 < am+1 ≤ ∞
	
,
the optimal cell boundaries for viewport translations are
given by ai = (1/a0 − iδ)−1, i = 1, . . . , m for a suitable
δ(m) > 0, and the optimal impostor placement with respect
to the error metric is
di = 2aiai+1
ai + ai+1
.
Note that m is ﬁnite even for domains with inﬁnite depth,
that is, when am+1 = ∞ for which dm = 2am.
Proof: For viewport translations the minimum of the
domain error D with respect to the projection plane distance
d ∈ [a, b] can be found analytically. For details see [16,
Theorem 3.2].
With this impostor placement, we have the following
asymptotic behaviour of the error with respect to viewport
translations:
Theorem 3. For a ﬁxed maximal screen space error
ε > 0, the radius r of maximal permissible viewport change
is proportional to the number of impostors per set m.
Proof: This property emerges during the proof of The-
orem 2. For details see [16, Remark 3.5].
This Theorem shows that increasing the number of im-
postors per set will strongly decrease the interaction error,
but the number of displayable impostors is bounded by
the graphical capabilities of mobile devices. Due to such
limitations, several impostors sets have to be transmitted.
Denote the number of impostor sets with n. Under certain
assumptions we can show that the inspection error can be
bounded by
C1n−1/5 ≤ I(χ1, . . . , χn) ≤ C2n−1/5,
for constants C1/2 = C1/2(Λ, m). Proving these bounds will
be the endeavor of the next section.
V. MODEL EVALUATION
Proposition 1. Using the R5-parametrization of the view-
port space, we can regard the domain error D(χ, χk) as a
continuous function f : R5 × R5 → R which, for moderate
viewport changes, behaves almost linear.
More precisely, we can ﬁnd positive constants a1, . . . a5
and ¯a1, . . . , ¯a5 such that
∥A1(x − y)∥ ≤ f(x, y) ≤ ∥A2(x − y)∥
(3)
where A1 := diag(a1, . . . , a5) and A2 := diag(¯a1, . . . , ¯a5).
109
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

Proposition 2. The matrices A1 and A2 depend on the
number of cells m. For viewport translations they are
proportional to m−1 as a direct consequence of Theorem 3.
Before proceeding, we need the following Lemmata.
Remark 1. In the following A = B+C means that the set A
is the direct sum of the sets B and C, that is, A = B∪C and
B ∩ C = ∅. In particular, vol (A + B) = vol (A) + vol (B) .
Similarly, A = B − C means that B = A + C, that is,
C ⊂ B and vol (B − C) = vol (B) − vol (C).
Lemma 4. Let G be a bounded, measurable, d-dimensional
subset of Rd and let B be a d-dimensional ball (with respect
to a norm ∥·∥) of equal volume (cf. Figure 4a). Then
Z
G
∥x∥ dx ≥
Z
B
∥x∥ dx.
Proof: Denote the radius of B with R. Due to G =
G ∩ B + G\B and B = G ∩ B + B\G, we can express G
as G = (B − B\G) + G\B. As the volumes of G and B
are equal, this also implies vol (G\B) = vol (B\G).
Moreover, the distance from the origin to all points in
G\B is larger than R while for all points in B\G it is
smaller. Hence,
Z
G\B
∥x∥ dx ≥
Z
G\B
R dx = R vol (G\B)
and, conversely,
Z
B\G
∥x∥ dx ≤
Z
B\G
R dx = R vol (B\G) .
This implies
Z
G
∥x∥ dx
=
Z
B
∥x∥ dx −
Z
B\G
∥x∥ dx +
Z
G\B
∥x∥ dx
≥
Z
B
∥x∥ dx − R

where
vol (B)
=
1
n
n
X
k=1
vol (Bk) = 1
n
n
X
k=1
vol (Φk(Ξk))
=
1
n det(A1)vol (Λ) .
(6)
With this, the estimation (5) yields
I(χ1, . . . , χn) ≥ (det(A1)vol (Λ))−1 n
Z
B
∥x∥ dx
(7)
Now, we choose to use the Euclidean norm ∥·∥ = ∥·∥2 for
which a 5-dimensional ball with radius R has the volume
vol (B) =
8
15π2R5. Then, (6) implies
R =
 15
8nπ2 det(A1)vol (Λ)
1/5
.
Hence, using Lemma 6,
Z
B
∥x∥ dx = 5
6n det(A1)vol (Λ)
 15
8nπ2 det(A1)vol (Λ)
1/5
.
Inserting this into (7) we ﬁnally obtain
I(χ1, . . . , χn) ≥ 5
6
 15
8nπ2 det(A1)vol (Λ)
1/5
.
This theorem shows, that the efﬁciency of any choice of
impostor sets cannot be better than the given estimate. The
following theorem constructively proves, that a choice of
impostor sets with the desired asymptotic dependence exists,
that is, that this estimate is actually achievable.
Theorem 8. Let Λ be bounded with a uniform distribution
and let ˜Λ ⊃ Λ be an enclosing cuboid. Then, there is a set of
viewports χ1, . . . χn for which the interaction error satisﬁes
I(χ1, . . . , χn) ≤ C2n−1/5,
with the constant
C2 := π2
36
(max{¯a1, . . . , ¯a5}diam(˜Λ))6
det(A2)vol (Λ)
,
where A2 := diag(¯a1, . . . , ¯a5) with constants ¯ai > 0 as in
Proposition 1.
Proof: To begin with, we will proof the assertion for
those n which are the ﬁfth power of a whole number, that
is, for n
1/5 ∈ N. The general case will be derived from this
case later.
First, a bounded set Λ can be embedded into a cuboid ˜Λ.
For an n chosen as above, there is a regular decomposition
of ˜Λ into ﬁve-dimensional cuboids Ξk with initial viewports
χk at their respective centers.
Using the estimation f(x, y) ≤ ∥A2(x − y)∥ = ∥Ψ(x)∥
with the same arguments as in the proof of Theorem 7, we
obtain
I(χ1, . . . , χn) ≤ vol (Λ)−1
n
X
k=1
Z
Ξk
D(χ, χk) dχ
≤ (det(A2)vol (Λ))−1
n
X
k=1
Z
Ψk(Ξk)
∥x∥ dx
≤ (det(A2)vol (Λ))−1 n
Z
B
∥x∥ dx,
(8)
where we used that all cuboids Ψk(Ξk) are identical and
can be embedded into a ball B in the last step. For this the
radius needs to be at least
R = 1
2diam(Ψk(Ξk)) ≥ max{¯a1, . . . , ¯a5}diam(˜Λ)
2n
1/5
.
With this and Lemma 6 we ﬁnally obtain from (8)
I(χ1, . . . , χn) ≤ π2
72
(max{¯a1, . . . , ¯a5}diam(˜Λ))6
det(A2)vol (Λ)
n−1/5.
Now, for the general case, we divide ˜Λ into ˜n :=
⌊n
1/5⌋5 ≤ n cubes. This is possible because ˜n is the ﬁfth
power of a whole number (˜n
1/5 ∈ N). Moreover,
˜n−1/5
n−1/5 =
n
1/5

n
1/5 ≤

n
1/5
+ 1

n
1/5
= 1 +
 1
n
1/5 ≤ 2,
that is, ˜n−1/5 ≤ 2n−1/5. Hence, by this and Lemma (1)
I(χ1, . . . , χn)
≤
I(χ1, . . . , χ˜n)
≤
π2
72
(max{¯a1, . . . , ¯a5}diam(˜Λ))6
det(A2)vol (Λ)
˜n−1/5
≤
π2
36
(max{¯a1, . . . , ¯a5}diam(˜Λ))6
det(A2)vol (Λ)
n−1/5.
Remark 2. As stated earlier, the matrices A1, A2 depend on
the number of cells m. With the assumptions in Proposi-
tion 2, it follows that I = O(m−1n−1/5).
VI. CONCLUSION
In this paper, we developed a mathematical model which
allows to measure, analyze and optimize the display error
of image-based approximation techniques. The error asymp-
totics derived for our method based on parallelized rendering
shows a clear advantage over traditional remote visualization
concepts like Virtual Network Computing (VNC) which,
under ideal conditions, represent the scene by one image
m = 1. In contrast to this, m = 10 impostors with n = 1
viewport cover the same volume of permissible viewports
as m = 1 impostors for n = 10000 optimally chosen
viewport sets. Considering the bandwidth O(mn) needed for
111
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

transmission of impostors compared with the error contribu-
tion O(m−1n−1/5), the method offers signiﬁcant decrease of
bandwidth consumption, and low latency rendering for the
user.
The proposed method strongly beneﬁts from graphical
capabilities of clients, such as mobile devices, and will
increase its efﬁciency for each new generation providing
increased graphical performance. Due to the parallelization
of server-sided image generation, and the proven efﬁciency
thereof, the method is applicable to large and distributed data
sets for visualization on mobile devices and thin clients, also
including augmented reality applications [17].
ACKNOWLEDGMENT
The authors appreciate the support of the ’Federal Min-
istry of Education and Research’ and ’Eurostars’ within the
Project E! 5643 MobileViz. The Eurostars Project is funded
by the European Union.
REFERENCES
[1] F. Lamberti and A. Sanna, “A streaming-based solution for
remote visualization of 3d graphics on mobile devices,”
Visualization and Computer Graphics, IEEE Transactions on,
vol. 13, no. 2, pp. 247 –260, march-april 2007.
[2] H.-Y. Shum and S. B. Kang, “A review of image-based
rendering techniques,” in IEEE/SPIE Visual Communications
and Image Processing, 2000.
[3] S. Jeschke and M. Wimmer, “An error metric for layered
environment map impostors,” Tech. Rep. TR-186-2-02-04,
2002.
[4] S. Jeschke, M. Wimmer, and W. Purgathofer, “Star: Image-
based representations for accelerated rendering of complex
scenes,” Proc. of Eurographics, 2005.
[5] S.
Jeschke,
M.
Wimmer,
and
H.
Schuman,
“Layered
environment-map impostors for arbitrary scenes,” Graphics
Interface, May 2002.
[6] W.-C. Wang, K.-Y. Li, X. Zheng, and E.-H. Wu, “Layered
textures for image-based rendering,” Journal of Computer Sci-
ence and Technology, vol. 19, no. 5, pp. 633–642, September
2004.
[7] M. Moser and D. Weiskopf, “Interactive volume rendering
on mobile devices,” in 13th Fall Workshop: Vision, modeling,
and visualization 2008, O. Deussen, D. Keim, and D. Saupe,
Eds.
Akademische Verlagsgesellschaft AKA GmbH, 2008,
p. 217.
[8] J. Cohen, D. Manocha, and M. Olano, “Simplifying polygonal
models using successive mappings,” in VIS ’97: Proceedings
of the 8th conference on Visualization ’97.
Los Alamitos,
CA, USA: IEEE Computer Society Press, 1997, p. 395ff.
[9] P. Debevec, Y. Yu, and G. Boshokov, “Efﬁcient view-
dependent image-based rendering with projective texture-
mapping,” Berkeley, CA, USA, Tech. Rep., 1998.
[10] J. Kopf, B. Chen, R. Szeliski, and M. Cohen, “Street slide:
browsing street level imagery,” ACM Trans. Graph., vol. 29,
no. 4, pp. 1–8, 2010.
[11] J. Shade, D. Lischinski, D. H. Salesin, T. DeRose, and
J. Snyder, “Hierarchical image caching for accelerated walk-
throughs of complex environments,” in SIGGRAPH ’96: Pro-
ceedings of the 23rd annual conference on Computer graphics
and interactive techniques.
New York, NY, USA: ACM,
1996, pp. 75–82.
[12] T. A. Funkhouser, “Database management for interactive
display of large architectural models,” in GI ’96: Proceedings
of the conference on Graphics interface ’96.
Toronto, Ont.,
Canada, Canada: Canadian Information Processing Society,
1996, pp. 1–8.
[13] M. Hoffmann and J. Kohlhammer, “A generic framework for
using interactive visualization on mobile devices,” Communi-
cations in Computer and Information Sciene, vol. 53, no. 4,
pp. 131–142, 2009.
[14] F.
Lamberti,
C.
Zunino,
A.
Sanna,
A.
Fiume,
and
M. Maniezzo, “An accelerated remote graphics architecture
for PDAs,” in Web3D ’03: Proceedings of the eighth inter-
national conference on 3D Web technology.
New York, NY,
USA: ACM, 2003, p. 55ff.
[15] A. Beutelspacher and U. Rosenbaum, Projective Geometry:
From Foundations to Applications.
Cambridge University
Press, February 1998.
[16] R. Reiner, “Numerical methods for optimal impostor pre-
fetching in scientiﬁc visualization,” Diploma Thesis, Karls-
ruhe Institute of Technology, 2011.
[17] V. Heuveline, S. Ritterbusch, and S. Ronnas, “Augmented
reality for urban simulation visualization,” in INFOCOMP
2011, The First International Conference on Advanced Com-
munications and Computation.
IARIA, 2011, pp. 115–119.
112
Copyright (c) IARIA, 2012.     ISBN:  978-1-61208-226-4
INFOCOMP 2012 : The Second International Conference on Advanced Communications and Computation

