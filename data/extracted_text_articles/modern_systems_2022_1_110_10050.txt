Implementation of the RAM Analyses into a Discrete Event Simulation of a Process 
in Early Stages of its Development 
Martin Kubic, Maurice Pendola 
Axone 
Meyreuil, France 
m.kubic@axonegroup.com 
 
 
Abstract — Modeling complex systems has become a common 
tool in many fields, especially in engineering, mathematics, 
military, and transport sciences. It provides a relatively 
inexpensive way to gather information for comprehensive and 
decision-making purposes. Since the size and complexity of real 
systems in these areas rarely allow analytical solutions to 
provide the information, simulation has become the method of 
choice. One difficulty in the engineering design processes of the 
designed system is to introduce this powerful tool in presence of 
all the design uncertainties that arise due to the early stage of 
the design knowing the fact that it will be useful for verification 
purposes and is to today widely used for that. This paper aims 
at given issues in order to introduce combined intention to use 
simulation tool for allocation purposed during the architecting 
process in order to help to perform decomposition and 
architecture tradeoffs during early stages of the design. Further, 
it illustrates the benefits of using simulation through an 
implementation of the aspects of Reliability, Availability, and 
Maintainability (RAM) into a Discrete Event Simulation (DES) 
tool in order to perform architecture tradeoffs and 
performances allocation based on both physical behavior and 
RAM considerations in the early design phase of a complex 
storage plant.  
Keywords - RAMS analyses, Discrete event simulation, 
Allocation process, System Engineering 
I.  INTRODUCTION 
Recent studies have shown that engineers continue to 
spend an enormous amount of time researching information 
and assembling reports. This trend has only grown with the 
increase of scale and complexity of systems, resulting in a 
dramatic increase in system requirements. Thus, managing 
requirements using simplistic methods is no longer enough. 
With increasing system complexity, document-centric 
approaches have become increasingly difficult to manage due 
to the increased risk of overlooking critical information and 
key interfaces. This has given rise of the Model Based System 
Engineering (MBSE) in order to replace the document 
centered management by a management centered around the 
models all along the life cycle of a system starting early in the 
design phase up the verification and validation phases ([1]).  
Although the modelling of complex system has recently 
become a common practice in many industrial projects, the 
simulation methods are used primary in the later phases of the 
projects as a verification tool (Figure 1) [2][3]. The absence of 
the application of the simulations methods from the very 
beginning of a system life leads often to unpredicted 
additional costs and delays of the projects [4]. Although, there 
exist attempts to implement the simulation in the decision-
making stage [6], several challenges are faced including 
constant evolution of the system’s design or input data 
uncertainties. Very often, especially in the French nuclear 
environment, these obstacles overweight the potential 
outcome the simulation at the large scale of a system can 
provide. The aim of this paper to provide an example of the 
implementation of a simulation method at the very beginning 
of the design-phase of an industrial process to support the 
decision-making at the highest architect level. 
The paper is structured as follows. Firstly, an introduction 
to modeling from a system engineering point of view, 
particularly in the design phase, supplemented by the 
principles of discrete event modeling is provided with the 
emphasis on the SimEvents tool. The body of the paper is then 
devoted to the description of the implementation of the RAM 
elements into a case study model applied to a high-
performance process installation. Finally, the study is put in 
context with the implementation of the RAM analysis in early 
stages of a project as a decision-making support at the overall 
architect level to aim to improve the system design, to perform 
RAM requirements allocation based on the sensitivity of the 
subsystems, in order to put the efforts on important 
subsystems and then minimizing the design and operational 
costs over the system’s life cycle. 
II. MODELLING OF A COMPLEX SYSTEM 
As mentioned above, there are simulation methods, tools 
implementing these methods, but they are generally not 
applied correctly. Many system engineers start modeling with 
the goal of modeling, overdoing it, going too deep (with the 
focus more on using simulation to verify or validate 
performance) or simply to model the bad things. Model-based 
systems engineering is essential in the efforts to design 
increasingly complicated and complex systems in an era of 
unprecedented change. However, it is a tool and a technique 
in many systems engineering toolbox. Nevertheless, the focus 
should be on applying systems engineering to deliver the 
required value to the customer and stakeholders effectively 
and efficiently. 
Detailed models are not always desirable, especially in the 
early phases of the life cycle (the pre-study phase and the 
descending phase of the V-cycle). At this stage, the systems 
are not yet fully defined. The contribution of the models 
should provide a broader insight into the behavior of the 
system, giving directions and insights. The interest is not to 
56
Copyright (c) IARIA, 2022.     ISBN:  978-1-68558-021-6
MODERN SYSTEMS 2022 : International Conference of Modern Systems Engineering Solutions

chase the precise values as the result of the model (which is 
already quite difficult given the complexity of the systems). In 
many cases, orders of magnitude are enough to understand it. 
At the same time, the models must be able to provide the 
flexibility to model various scenarios and possibilities of the 
system configuration. 
The objective of this paper is to demonstrate whether it is 
possible to build a recursive development of modeling as it is 
done elsewhere in system engineering on design in general by 
building à Simulation Breakdown Structure (SBS) and a 
corresponding Simulation Architecture in such way 
• 
From the most general (system performance) to the 
specific (component performance) while changing 
the 
paradigm 
on 
precision. 
To 
favor 
the 
approximately right at the general level in the 
upstream phase to the detriment of the precisely 
wrong. 
• 
Use this approximative modeling to develop and 
enrich the system engineering requirements model. 
 
 
Figure 1. Example of a V cycle. Very often there is a lack of simulation 
methods in the decision-making phase. 
 
In order to verify the above objectives, a simple test case 
is used consisting of a storage plant system which will be 
modeled as a discrete event system. The main principles of 
discrete event modeling are summarized in the following 
section. 
 
III. DESCRETE EVENT SIMULATION 
Discrete-event simulation is a method that allows to 
simulate the behavior and to quantify the performance of a 
process consisting of a series of ordered sequences. Unlike 
continuous 
systems 
whose 
state 
variable(s) 
change 
continuously over time, the state variable(s) of a discrete 
system varies only at a discrete set of points in time. A discrete 
system can be imagined as a set of entities that are connected 
and communicate when an event or activity occurs. Each 
entity is characterized by a set of properties (attributes) that 
describe their current state and affect their behavior. Entities 
representing components of the system under investigation 
must be explicitly modeled in order to capture the behavior of 
the system in relation to the simulation study. As the 
simulation time evolves, entities can change their state in 
consequence of activities that happened during a given 
simulation period. The time in the simulation at which such a 
state change occurs is called an event. The relationship 
between events and activities are defined by user and are 
based on the objectives of the studied system [5]-[9]. This 
includes in particular the specification of activity durations, 
which can be modeled as deterministic and based on 
stochastically influenced parameters (simulation of failures of 
the system’s elements).  
Discrete event simulation methods can be used in different 
fields of application. In this paper, the focus area is related a 
logistics process. The history of discrete event simulations 
goes back into the early 1960’s, but it was only towards the 
end of the last century the DES application has spread widely 
as the information technologies boomed [12]. Currently, there 
exist many discrete event simulation tools [10][11]. 
 
IV. MATLAB SIMEVENTS TOOL 
For the case study presented in this paper, it was decided 
to use the SimEvents software of the MathWorks company, 
because the SimEvents provides a wide range of predefined 
tools for the DES and in combination with Matlab Simulink 
allows the user to develop and customize the model according 
to his needs. 
From a practical point of view, while the SimEvents 
library contains all the crucial types of blocks needed for basic 
simulations, it is obvious that the development of add-on 
blocks might be unavoidable if the system becomes more 
complicated, for example, by adding the possibility of 
machinery breakdowns in a manufacturing/processing line. 
Matlab Simulink can be a tool for reliability calculations [14], 
but objective here was to model a process line, for which the 
SimEvents module is adopted to.  
However, in addition to the SimEvents library, Matlab 
contains a few exemplary models that users can test. The 
Matlab 2019a release provides an example of a Machine block 
that attempts to incorporate principles of failures, reliability, 
and maintainability into SimEvents simulations. 
The main downside to the native form of the Machine 
block is that it simply does not model properly the case of a 
failure. Firstly, the random failures are characterized by an 
exponential law rather than a gaussian law. Another problem 
was related to the management of the resources needed to 
maintain a failed block that were not use at all causing serious 
consequences for the optimization studies of the installation 
resources. The last limitation of the default version of the 
machine block was related to the preventive maintenance. The 
theory of dependability studies considers the components 
undertaken a maintenance task as new which translates in 
simulation by resetting the internal component clock to zero. 
The default block configuration omitted this fact yielding the 
maintenance as it has never happened. One by one, all these 
issues have been treated by authors and the associated 
problems eliminated as well as some additional features were 
added allowing to switch properly between the block’s 
internal states.   
V. ILLUSTRATION CASE STUDY 
This section is devoted to a demonstration of how a real 
system (which is in the design phase) can be modeled using 
57
Copyright (c) IARIA, 2022.     ISBN:  978-1-68558-021-6
MODERN SYSTEMS 2022 : International Conference of Modern Systems Engineering Solutions

SimEvents. The case study concerns the modeling of the flow 
of storage / removal of items of a future installation in order 
to be stored.  For the policy reason, some details cannot be 
shared. However, the aim is to focus on the benefits of the 
simulation method as a decision-making support at the overall 
architect level in order to improve the design and minimize 
the operational costs over the system’s life cycle. 
The items storage process can be viewed as a 
manufacturing process that transforms an object into another 
object. To take this into account, and due to certain Matlab 
limitations (existing pre-programmed objects), a single type 
of entity is used to represent the different objects appearing in 
the process (convoys with full or empty items, wagons, the 
secondary elements to be stored, or waste products. The 
entities themselves have no graphical representation. Their 
flow is represented by arrows connecting the blocks. On the 
other hand, entities can transport data in the form of attributes. 
 
The installation is composed of several systems (that are 
denoted for simplicity as System1, System2 etc.) and some 
auxiliary systems to support the main systems (Figure 2). As the 
items advance through the storage line, each item undergoes a 
process of manipulation and transformation until it is 
temporary stored in the System3 (red lines). 
 
 
Figure 2. Illustration of the main elements of the storage facility. 
 
Each of the system is composed of several subsystems 
(workstations). At the design phase, the composition of the 
subsystems is not yet defined, and the performance allocations 
are made at the subsystems and system levels (level 0 and 
level 1 of a traditional Product Breakdown Structure, PBS). 
The items to be stored arrive to System1 by a convoy at a 
predefined rate and are processed through the installation line. 
Inversely, the stored items can be also evacuated as the new 
ones arrive. The requirements impose a certain number of 
items to be stored over a given period.  As can be seen, no 
detailed input data are provided and in fact there are not 
needed at this stage to model the system and its capabilities as 
is described next.  
 
A. 
Model Description 
In the model, each of the subsystem is represented by the 
improved block Machine which can transition between three 
predefined states that are defined in the operational phase of 
the considered system lifecycle 
• 
Operation state 
• 
Maintenance 
• 
Breakdown 
In the regular operation state, the machine acquires a 
working resource and processes a given task. In the scheduled 
maintenance state, the machine switches to service mode and 
the processing of a task is interrupted. After a fixed service 
time, the machine resumes regular operation. The machine 
can also break down sporadically following an exponential 
probability law and enter a breakdown state. The time to repair 
faults is defined through a mean time to repair and the 
machine resumes regular operation once the repair is 
completed. 
The main structure of the flow model in the SimEvents 
interface is shown in Figure 3. As can be seen, the model 
contains several distinct blocks. The blocks are built 
according to the principle of Russian dolls which has the 
advantage of being able to look at and analyze the model at 
different scales. It also allows building a progressive 
validation. 
 
 
Figure 3. Main structure of the model in the SimEvents interface. 
 
As the entity representing the treated object advance in the 
process, different events occur and trigger another subsystems 
and elements like resources.  
 
B. 
Model Validation 
The good performance of the model was systematically 
and incrementally validated. In addition, non-regression 
checks were carried out each time the model was upgraded 
(implementation of a new block, a control function, etc.): an 
immediate check in the simulation data inspector was 
performed in order to check if the behavior of the model was 
correct. 
To demonstrate that the flow inside the installation is 
correct, the case of a convoy transporting three objects 
arriving at the installation was considered. The Gantt chart 
representing the progress of the transformation of the arriving 
items into its stored location is shown on the Figure 4. 
58
Copyright (c) IARIA, 2022.     ISBN:  978-1-68558-021-6
MODERN SYSTEMS 2022 : International Conference of Modern Systems Engineering Solutions

 
Figure 4. Gantt diagram of the flow of three items. 
 
 
Figure 4 shows that the flow of the objects inside the 
installation is continuous and in order. This shows that the 
flow is controlled meaning that the entity (object) cannot 
advance if the next position is occupied by treating another 
object.  
In principle such a simple case can be modelled manually 
if some average values were considered reinforcing the model 
validation. However, if the random failures are considered, the 
situation changes dramatically. Figure 5 gives an example of the 
delay necessary to treat one convoy. As can be seen, that the 
delays are now becoming irregular as some subsystems break 
down and processing is delayed due to the time required for 
repair.  
 
 
Figure 5. Example of the delays necessary to treat the content of one 
convoy. Red line represents the mean delay.  
 
In addition to possibility to model the random breakdown 
of the various subsystems, the model allows to manage and to 
size the need of the resources. With regard to the resources 
involved in the operation of the installation, their rate of use is 
shown in Figure 6. Information on the rate of use of the 
resources allows to optimize the pace of work. For example, 
it does not appear necessary for the teams to be always present 
at the installation. In addition, their presence must be carefully 
planned, because some subsystems may break down, which 
would delay the flow. The model as it stands assumes that 
resources are available when needed. 
 
Figure 6. Resources use rate for various subsystems.  
 
VI. SUMMARY 
The model presented here was developed to simulate the 
storage process of a future installation. Model validity was 
performed systematically and incrementally. Non-regression 
checks were carried out at each evolution of the model in order 
to check whether the behavior of the model was correct. The 
model is based on decision parameters and model version for 
a given configuration state of the design with its associated 
definition 
artefacts 
(functional 
architecture, 
physical 
architecture, etc.)  
The line process is not difficult to imagine for simple 
cases, but the model becomes very useful when the 
introduction of workstations availability is applied. The model 
clearly shows that it can be considered as a reliable source for 
predictions of various scenarios. 
The results obtained with the model show that the 
installation is able to meet the requirement of receiving a 
given number of objects even if considering the availability of 
workstations. Failure modeling is completely random, which 
makes each simulation unique from the standpoint of 
workstation availability. The impact of the reliability of 
workstations on the flow can be visible over longer periods 
(mitigated by regular maintenance).  
The paper presents only certain scenario, but due to the 
wide variety of model parameters, the model allows the study 
of other scenarios as well. The modeling strategy adopted 
(starting from the most general or more specific) will allow to 
refine the model and gradually allocate performances 
/objectives to lower-level subsystems / components in the 
physical breakdown structure as the progress of the design 
advances and thus be able to simulate more precisely and 
progressively what is happening inside each subsystem up to 
the desired level of detail. 
 
VII. CONCLUSION 
Although models are not a perfect representation of a 
system, MBSE can provide insight and feedback earlier and at 
lower cost than implementation alone. This approach tested in 
this case study has clearly shown that the use of the simulation 
method is suitable for managing the development of the 
59
Copyright (c) IARIA, 2022.     ISBN:  978-1-68558-021-6
MODERN SYSTEMS 2022 : International Conference of Modern Systems Engineering Solutions

system by showing the weak points of the system and 
therefore the points for its improvement and adaptation. It has 
been shown that there is not always a need to go into deep 
detail when modeling a system. Parameters describing 
performance could be sufficient and subsystems could be 
treated as black boxes. In addition, when such a model is 
deployed early in the design phase, it can always be updated 
as the design studies progressively refine the physical 
breakdown structure and can finally serve as a validation / 
verification tool in the ascending phase of the V-cycle.  
Regarding the perspectives, it would be interesting to find 
out how accurately SimEvents can manage the management 
of human resources, especially if the pace of work is not 
continuous. Currently, the “Resource Pool” block does not 
offer the option to specify whether resources will only be 
available for a fraction of the time. On the other hand, it allows 
the use of a fraction of a resource. However, further 
investigation would be required to answer this question. 
 
REFERENCES 
[1] INCOSE, “Systems Engineering Handbook, A Guide for 
System Life Cycle Processes and Activities”, 4th edn. Wiley, 
New York, 2015. 
[2] A. Hazle and J. Towers, “Good Practice in MBSE Model 
Verification and Validation”, INCOSE UK Annual Systems 
Engineering Conference (ASEC), 2020. 
[3] D. Cook and W. Schindel, “Utilizing MBSE Patterns to 
Accelerate System Verification”, Insightm vol. 20m pp. 32-41, 
2017. 
[4] M. J. Simões-Marques, “Modeling and Simulation in system 
life cycle”, Procedia Manufacturing, vol. 3, pp. 785 – 792, 
2015. 
[5] O. Ullrich and D. Lückerath, “An Introduction to Discrete-
Event Modeling and Simulation”, Simulation Notes Europe 
SNE 27(1), pp. 9-16, 2017. 
[6] T. Han, Q. Huang, A. Zhang, and Q. Zhang, “Simulation-Based 
Decision Support Tools in the Early Design Stages of a Green 
Building”, Sustainability, vol. 10(10), pp. 3696, 2018. 
[7] D. Antonelli, P. Litwin, and D. Stadnicka, “Multiple System 
Dynamics and Discrete Event Simulation for manufacturing 
system performance evaluation”, Procedia CIRP, Volume 78, 
Pages 178-183, 2018. 
[8] G. S. Fishman, “Discrete-Event Simulation: Modeling, 
Programming, and Analysis”, Springers series in operations 
research, 2001. 
[9] B. Babulak and M. Wang, “Discrete Event Simulation: State of 
the Art”, Int. Journal Online Engineering (iJOE), vol. 4, No 2, 
2008. 
[10] L. Dias, A. Vieira, G. Pereira, and J. Oliveira, “Discrete 
Simulation Software Ranking – A Top List of the Worldwide 
Most Popular and Used Tools”, Proceedings of the 2016 
Winter Simulation Conference, 2016. 
[11] J. J. Swain, “Simulation Software Survey”, OR/MS Today 
magazine from Institute for Operations Research and the 
Management Sciences (INFORMS). Lionheart Publishing. 
1991-2009. 
[12] R. E. Nance, “A history of discrete event simulation 
programming languages”, In: Proceedings of the 2nd ACM 
SIGPLAN conference on History of programming languages, 
pp. 149-175,1993. 
[13] R. F. Stapelberg, “Handbook of reliability, availability, 
maintainability and safety in engineering design”, Springer-
Verlag London Limited, 2009. 
[14] S. Kadwane, J. Kumbharem and D. Mohanta, “A 
Matlab/Simulink modeling for reliability analysis of inverter 
applied to MPPT based PV system”, 2015 Annual IEEE India 
Conference (INDICON), pp. 1-6, 2015. 
 
 
 
 
60
Copyright (c) IARIA, 2022.     ISBN:  978-1-68558-021-6
MODERN SYSTEMS 2022 : International Conference of Modern Systems Engineering Solutions

