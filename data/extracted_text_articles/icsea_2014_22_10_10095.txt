Software Relialibility Markovian Model Based on Phase-Type Distribution 
Mindaugas Brazenas, Eimutis Valakevicius 
Department of Mathematical Modeling 
Kaunas University of Technology 
Kaunas, Lithuania 
e-mail: mindaugas.brazenas@yahoo.com; eimval@ktu.lt 
 
 
Abstract‚Äî The paper focuses on creating of a software 
reliability model based on phase type distribution. Usually, the 
length of intervals between the moments of fault detection and 
correction have unknown distributions. In this paper, a new 
approach how to approximate any distribution of positive 
random variable by mixture and convolution of exponential 
phases, known as the general type of phase-type distribution, is 
proposed. The optimization algorithm of Local Unimodal 
Sampling (LUS) is applied to estimate parameters of phase-
type distribution. After such procedure, the dynamics of a 
software reliability model can be described by a continuous 
time absorbing Markov chain. The probabilities of the 
resulting absorbing Markov chain are used to compute 
performance measures of the software reliability model. 
Keywords-software reliability model; phase‚Äìtype distribution; 
absorbing Markov chain; performance measures. 
 
I. 
INTRODUCTION 
Software reliability is the failure probability of the 
software under investigation. The situation on creating 
software reliability models is clearly explained in the 
following citation from the Wikipedia: ‚ÄúOver 225 models 
have been developed since early 1970s, but how to quantify 
reliability still remains unsolved. There is no single model 
which can be used in every situation. There is no model 
which is either complete or fully developed‚Äù [1]. 
A software reliability model allows forecasting the  
software reliability at any moment of time. One of the 
important problems in creating models is an assumption 
about distribution of the length of intervals between the 
moments of fault detection. Some of authors assumes that 
the length of intervals is distributed according to the 
exponential law [2][3]. For example, the model developed by 
Moranda and Jelinski [4] assumes an exponential time 
between failures having parameter that time intervals of 
detection software faults follow exponential law with the 
parameter proportional to the number of faults remaining in 
the system. The similar assumptions are used in [5][6]. 
Recently, non-homogenous Poisson processes became 
popular for describing stochastic behavior of the number of 
detected faults, because of their simplicity [7][8][9]. Beside 
the mentioned distributions, other models that are based on 
Weibull [10], hyper geometric [11], Pareto [12] and other 
distributions [13] are investigated. 
The use in the software reliability model of any non-
exponential distributions is complicated from the computing 
point of view. Therefore, in this paper, a novel approach to 
apply a convolution and mixture of exponential distributions, 
called the Phase-Type (PH) distribution, to approximate time 
distributions of fault detection and fixing is suggested. It is 
known that the PH distribution can approximate an arbitrary 
probability distribution of a positive random variable with an 
arbitrary accuracy by adjusting the phase structure [14]. 
Some authors use concrete structure of PH distributions, 
such as Erlang and hyper exponential [15], Cox [16], or 
others. The concrete structure of the PH distribution may not 
approximate the desired distribution with the required 
accuracy. Many models have been utilised for evaluating  the 
quality of a software using reliability but very little focus on 
general type of three phase  distribution. Hence, this paper 
mainly focuses on this direction. Using such distribution, the 
performance of the model can be described by an absorbing 
Markov chain [14]. 
The paper is organized as follows. Section II gives 
description of software reliability model under consideration. 
Section III describes the algorithm for finding the structure 
and parameters of approximating PH distribution. The 
algorithm for constructing the set of all possible states of the 
system and transition matrix between states is given in 
Section IV. The modelling results are presented in Section V. 
The paper is concluded in Section VI. 
II. 
DESCRIPTION OF THE MODEL 
Let us describe the conceptual model of a software 
reliability model. Say, that the software contains a fixed 
number of faults Fc (fault count). Assume that the fault 
detection time follows some distribution  and fixing 
time of detected faults obeys another distribution law 
. The modelling process can be represented as the 
queuing system (see Figure 1).  
 
Figure 1. The process of identifying and fixing faults in software. 
It is proposed to approximate any general distribution of 
a positive random variable by the general phase-type 
distribution (GPH). The phase-type (PH) distribution is 
defined as the absorbing time distribution of Continuous-
Time Markov Chain (CTMC). The detected fault enters the 
591
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

queue if the previously detected one is not fixed yet. The 
process of detecting and fixing faults ends when all the faults 
are identified and fixed. The developed software reliability 
model gives probabilistic measures of the process. 
III. 
PARAMETER  ESTIMATION OF THE PHASE-TYPE 
DISTRIBUTIONS 
Parameter estimation of general phase-type distribution is 
one of the most challenging problems. 
The precision of approximation of non-markovian model 
 by markovian one ‚àó depends on how well distributions 
 ,  are approximated by phase-type distributions 
	
, 	
 . There are several methods to search for 
optimal 
phase-type 
distribution 
parameters: 
moment 
matching method [17][18], expectation maximization 
method [19][20][21][22], and others. We will search for the 
optimal parameters by employing a vector optimization 
algorithm. 
The phase-type distribution  	
, , which has three 
exponential phases (see Figure 2),  
 
 
Figure 2. The general structure of PH distribution with three phases. 
 
is determined by 12 variables : 
 
  , , ,   









 
(1) 
 
The coordinate ,   1,2,3 of the vector   (1) denotes 
the probability of process starting in ith phase. The intensity 
rates of transition from one phase to other are defined in 
matrix . For example, the value  indicates the average 
transition number from the first phase to the third one per 
unit of time. The auxiliary vector   , ,  :  
  ! denotes rates the absorbing state (black circle) 
from each phase is reached. For example, the value  
indicates the rate of transition from second phase to 
absorbing state. The transition rates satisfy the following 
equalities and unequalities  
 
, ,  " 0,
, , , , , , , ,  $ 0,
    %  % ,
    %  % ,
    %  % .
 
(2) 
 
The problem of finding optimal parameters of  	
,  
is transformed to a problem of finding the vector '‚àó ‚àà ), *, 
such that ‚àÄ' ‚àà ), * ‚à∂ -'‚àó . -' . Here -‚àô  is an 
objective function; ), * ‚Äì lower and upper bounds of vector 
'. The mapping of vector '  to the set of parameters of the 
phase-type distribution 	
,   is carried out in the 
following way  
'  , , ‚Ä¶ ,  ‚Üí  ‚âî
34,35,36
34735736 ,
 ‚âî 8,  ‚âî 9,  ‚âî :,
 ‚âî ;,  ‚âî <,  ‚âî =,
 ‚âî >,  ‚âî ,  ‚âî . 
 
(3) 
 
The objective function, to be minimized, is defined as an 
area 
between 
the 
density 
functions 
?;  A
and 
?BCD;  , , as 
 
E  F |?BH;  ,   ?;  A|
I
>
J 
(4) 
 
The estimation of E  (4) is obtained by the following 
expression  
 
EKLMN, ‚àÜ; ,   ‚àë
|?BHQ;  ,   ?Q;  A|‚àÜ
M
QR
, 
 
Q  S  0.5‚àÜ,  U  V
3WXY
‚àÜ3 Z 
(5) 
 
where: LMN denotes the end value of discretization and ‚àÜ ‚Äì 
the step of discretization. After the discretization the 
objective function (4) has the form  
 
-' ‚âî EKLMN, ‚àÜ; , ;  ' ‚Üí , . 
(6) 
 
The lower and upper bounds of ' are defined as  
 
)  [0,0, ‚Ä¶ ,0
\]^]_

` ,
*  1,1,1, Œªb3, Œªb3, ‚Ä¶ , Œªb3
\]]]]]^]]]]]_
=
 ,
 
(7) 
 
where Œªb3  ‚Äì is the maximal transition rate. Using the 
mapping ' ‚Üí , , the optimal parameters of the phase-type 
distribution are obtained from solution '‚àó, which is given by 
a certain optimization algorithm. 
592
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

IV. 
SYSTEM STATE GRAPH CONSTRUCTION ALGORITHM 
The scheme of the process of detecting and fixing faults 
in software after approximating the arbitrary distributions by 
PH distributions is represented in Figure 3. 
 
 
 
Figure 3.The process  of detecting and fixing faults in software after 
distribution approximation. 
 
The algorithm for constructing the set of states and the 
transition matrix for markovian model ‚àó is described in 
this section. The set of states of the system is defined by  the 
vector c  S, S, S, S8, where S ‚àà d1,2,3e denotes the 
index of an active phase of 	
 and S  0 indicates that 
there is any active phase in 	
; S ‚àà d0,1, ‚Ä¶ , f  1e 
denotes a number of detected faults which are waiting in the 
queue; S ‚àà d1,2,3e denotes the index of an active phase of  
	
, S  0 indicates that there is any active phase in 
	
;S8 ‚àà d0,1, ‚Ä¶ , fe ‚Äì denotes a number of fixed faults. 
The number of detected faults in the state c  is defined 
according the formula  
 
fc  !dQ4g>e % S % !dQ6g>e % S8. 
(8) 
 
All the states are enumerated by the mapping  
 
h   ic ‚àà d0,1, ‚Ä¶ , jb3  1e, 
(9) 
  
where 
jb3
 denotes 
the 
number 
of 
states: 
jb3  16ff % 1. The mapping ic is defined as  
 
ic  f % 14Sf % 4S % S % S8. 
(10) 
 
The inverse mapping imh is obtained by the formulas  
 
imh  nf, o%f, q%4, h%f % 1r, 
(11) 
 
where: q 
stmst%uv7
uv7
, o 
m%8
8
, f 
m%uv
uv
, and % is a 
reminder operator.  
The vector *  nw>, w, ‚Ä¶ , wxyz{mr of boolean variables 
(false or true) are used to determine all the possible states of 
the system. The following sets of states are used: |M} 
contains initial states of the system; | contains all possible 
states of the system; |M~ includes states which are going to 
be investigated in the next iteration and |}b~  is the 
temporary set of states obtained from the investigated states 
after one iteration. Each state contained in these sets is 
represented by its index  h. 
The transitions rates between all states are stored in the 
matrix 7  ¬Ä¬Å¬Ç
7¬É;  , ¬Ñ  0, jb3  1.  
The algorithm for generating the set of possible states of 
the system consists of the following   steps: 
1) Mark all the states as not investigated: 
wst
‚âî ?q¬Ö¬Ü¬á  ¬à¬á ¬Üq¬á ¬Ü U¬â U¬ä¬á¬Ü-q¬áJ ¬ã¬á,  
h  0, jb3  1 
 
2) Calculate the initial probability vector : 
 
st
7 ‚âî 0, h  0, jb3  1 
¬ån,>,>,>r
7
‚âî 
,   1,2,3 
 
3) Determine the initial states of the system: 
 
  1,2,3: 
 ¬é 0 ‚áí |M} ‚âî |M} ‚à™ in, 0,0,0r 
 
4)  Determine the initial values of the sets: 
 
| ‚âî |M}, |}b~ ‚âî |M} 
¬Ä¬Å¬Ç
7¬É ‚âî 0;  , ¬Ñ  0, jb3  1 
 
5) Determine 
the 
states 
that 
have 
to 
be 
investigated: 
 
|M~ ‚âî |}b~ 
 
     Clear the temporary set |}b~ ‚âî ‚àÖ 
 
     Let d|M~e~ be an ¬í-th element of the set |M~. 
¬í ‚âî 1 
6) Find the coordinates of the state vector to be 
investigated: 
 
c ‚âî imnd|M~e~r, h:  ic 
 
7) Let us denote the set of the state vectors, that can 
be reached from the state  c, by |‚àó ‚âî ‚àÖ and the 
set of transition rates, at which all states in set 
|‚àó are reached from the  state c, by Œª‚àó  ‚àÖ. 
 
8) Find 
the 
elements 
of 
the 
sets 
|‚àó  dc, c, ‚Ä¶ , cQe  and Œª‚àó  dŒª, Œª, ‚Ä¶ , ŒªQe . 
The algorithm will be described later. 
 
9) Update the transition rates matrix: 
 
¬Åstst¬ì
7
‚âî Œª; h¬ì  ic,   1, S 
 
10) Include not yet investigated states into the sets 
|and |}b~ (see Figure 4) 
 
    for i from 1 to k 
        h ‚âî ic 
593
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

        if wsh  ?q¬Ö¬Ü¬á then 
            |}b~ ‚âî |}b~ ‚à™ ¬Äh¬É, | ‚âî | ‚à™ ¬Äh¬É 
        endif 
    endfor 
 
Figure 4. Pseudocode for including not investigated states into the sets 
|and |}b~. 
 
11)  Mark the current state c as investigated: 
 
wst ‚âî jw¬á 
 
12) If  ¬í < fqjJ|M~ then  ¬í ‚âî ¬í + 1 and go to 
step 6.  
 
13) If  |}b~ ‚â† ‚àÖ go to step 5. 
 
14) Create the final transition rates matrix  =
¬Ä¬Å¬Ç¬É and the initial probability vector 0 from 
7and70 (see Figure 5). 
 
    for i from 0 to fqjJ| ‚àí 1 
         ‚âî id|e, 
         ‚âî s
7 
        for j from  0 fqjJ| ‚àí 1 
            ¬ï ‚âî ind|e¬Çr, 
            ¬Å¬Ç ‚âî ¬Ås¬ñ
7 
        endfor 
    endfor 
 
Figure 5. Pseudocode for creating final transition rates matrix and initial 
probability vector. 
 
15) The end of the algorithm.  
 
The explanation of the step 8 in detail follows. 
Denote by the vector c = S, S, S, S8 the state of the 
system. There are four events that make the system to 
change the state: e1 ‚Äì the change of an active phase in 
	
, e2 ‚Äì the detection of fault, e3 ‚Äì the change of an 
active phase in 	
 and e4 ‚Äì the correction of fault. The 
pseudocode needed to process these events is shown in the 
Figures 6, 7, 8, and 9. 
 
    for  from 1 to 3 
        if S > 0, Q4
 > 0 then 
            |‚àó ‚âî |‚àó ‚à™ d, S, S, S8e, 
            ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ4
¬ô 
        endif 
    endfor 
 
Figure 6. Pseudocode for processing the e1 event. 
 
    if S = 0 then 
        if fc < f then 
            for ¬Ñ from 1 to 3 
                for ¬Ü from 1 to 3 
                    if S > 0, Q4
 > 0, ¬Ç
 > 0, ¬ö
 > 0 then 
                        |‚àó ‚âî |‚àó ‚à™ d¬Ü, 0, ¬Ñ, S8e,  
                        ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ4
¬Ç
¬ö
¬ô 
                    endif 
                endfor 
            endfor 
        else 
            for ¬Ñ from 1 to 3 
                if S > 0, Q4
 > 0, ¬Ç
 > 0 then 
                    |‚àó ‚âî |‚àó ‚à™ d0, 0, ¬Ñ, S8e, 
                    ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ4
¬Ç
¬ô 
                endif 
            endfor 
        endif 
    elseif S > 0 then 
        if fc < ¬õf then 
            for ¬Ü from 1 to 3 
                if S > 0, Q4
 > 0, ¬ö
 > 0  then 
                    |‚àó ‚âî |‚àó ‚à™ d¬Ü, S + 1, S, S8e,  
                    ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ4
¬ö
¬ô 
                endif 
            endfor 
        else 
            if S > 0, Q4
 > 0 then 
                |‚àó ‚âî |‚àó ‚à™ d0, S + 1, S, S8e,  
                ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ4
¬ô 
            endif 
        endif 
    endif 
 
Figure 7. Pseudocode for processing the e2 event. 
 
    for  from 1 to 3 
        if S > 0, Q6
 > 0 then 
            |‚àó ‚âî |‚àó ‚à™ dS, S, , S8e, 
            ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ6
¬ô 
        endif 
    endfor 
 
Figure 8. Pseudocode for processing the e3 event. 
 
594
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

    if S = 0 then 
        if S > 0, Q6
 > 0 then 
            |‚àó ‚âî |‚àó ‚à™ dS, 0,0, S8 + 1e, 
            ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ6
¬ô 
        endif 
    else 
        for ¬Ü from 1 to 3 
            if S > 0, Q6
 > 0, ¬ö
 > 0 then 
                |‚àó ‚âî |‚àó ‚à™ dS, S ‚àí 1, ¬Ü, S8 + 1e, 
                ¬ó‚àó ‚âî ¬ó‚àó ‚à™ ¬òQ6
¬ö
¬ô 
            endif 
        endfor 
    endif 
 
Figure 9. Pseudocode for processing the e4 event  
 
V. 
MODELING RESULTS 
Assume that a software program contains 10 faults 
(Fc=10) and suppose that the length of intervals between the 
moments of fault detection has the following Weibull 
density function  
 
? 
8
  ¬ú
8
 ¬ù
m>.
¬ám {
¬û.¬ü,  $ 0. 
(12) 
 
The distribution of the length of intervals between the 
moments of fixing faults has the following Weibull density 
function  
 
? 
.
 .9 ¬ú
.
 .9¬ù
>.
¬ám {
4.6,  $ 0. 
(13) 
 
The discretization parameters are LMN  8 , ‚àÜ 
0.0625. 
The distributions ?, ?  are approximated by the 
phase-type 
distributions 
?BH
n; , r
, 
 ?BH
n; , r  with three phases. The following 
optimal 
parameters 
for 
?BHzn; , r
and 
?BH
n; , r density functions are estimated using the 
optimization algorithm LUS [23] and parameter mapping 
given in Section III. 
 
EK  0.012693,  ¬¢ 3.456 ‚ãÖ 10m8, 0.767,0.233, 
 
 ¬¢ 
 1.516
0.002
1.509
0.584
 2.348
0.005
1.782
7.819
 15.604
, 
 
EK  0.010634,  ¬¢ 0.008, 1.397 ‚ãÖ 10m8, 0.992,  
 
 ¬¢ 
 1.236
0
0
1.913
 16.338
6.770
0.897
0.331
 1.402
 
 
The comparision of means and standard deviations 
between original and approximated distributions are given 
in the Tables 1 and 2.  
TABLE I.  
MEAN AND STANDARD DEVIATION OF ORIGINAL, 
DISCRETIZED AND APPOXIMATING DISTRIBUTIONS OF TIME FOR FAULT 
DETECTION 
 
Distri-
bution 
¬•¬¶ 
Discretized 
distribution 
¬•¬ß¬¶(deviation,%) 
Phase-type 
distribution 
¬®¬©¬¶(deviation,%) 
Mean 
0.6798 
0.6769 
(0.43%) 
0.6958 (2. 35%) 
Standard 
deviation 
0.8569 
0.8364 
(2. 39%) 
0.8588 (0.22%) 
TABLE II.  
MEAN AND STANDARD DEVIATION OF ORIGINAL, 
DISCRETIZED AND APPOXIMATING DISTRIBUTIONS OF TIME FOR FAULT 
CORRECTION 
 
Distri-
bution 
¬•¬™ 
Discretized 
distribution 
¬•¬ß¬™(deviation,%) 
Phase-type 
distribution 
¬®¬©¬™(deviation,%) 
Mean 
1.3854 
1.3841 
(0.09%) 
1.4000 (1. 05%) 
Standard 
deviation 
1.0747 
1.0719 
(0. 26%) 
1.1126 (3. 53%) 
 
The graphs of the original and approximated density 
functions  are represented in Figures 10 and 11. 
 
 
 
Figure 10. The density functions ? (blue) and ?BH
 (red). 
 
 
 
Figure 11. The density functions ? (blue) and ?BH
 (red). 
 
The markovian software reliability model has 466 states. 
The state probabilities are computed by the following 
formula  
 
595
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

  0¬á¬´}.  
(14) 
 
All possible states are grouped according the number of 
detected faults that are placed in the queue. The values  
¬¨M, that there is a certain number n of faults waiting in 
the queue, are obtained by probability summation within 
each state group  
 
¬¨M  ‚àë
,Q5RM ,
imd|e  S, S, S, S8, U  0, f  1,
 
(15) 
 
where d|e is the ith element in the set |. The graph of the 
values ¬¨M is shown in Figure 12. 
 
 
 
 
 
 
 
Figure 12. The probability functions (of time) of certain number of 
faults waiting in the queue. 
 
Similarly, all possible states of the system are grouped 
according the number of fixed faults. The values ¬õM, that 
there is a certain number n of fixed faults, are obtained by 
probability summation within each state group  
 
¬õM  ‚àë
,Q¬≠RM ,   
imd|e  S, S, S, S8, U  0, f,
 
(16) 
 
where d|e is the ith element  in the set |. 
The graph of values  ¬õM  is shown in Figure 13. 
 
 
 
 
Figure 13. The probabilitiy functions (of time) of a certain number of 
fixed faults. 
 
The density function of time of fixing all errors is shown 
in Figure 14. 
 
Figure 14. Density function of distribution of time necessary to fix all 
10 faults. 
 
The most probable that the time needed to fix all 10 faults 
is about 16 units of time. 
VI. 
CONCLUSION AND FUTURE WORKS 
In this article, a continuous time absorbing Markov chain 
model of software reliability was proposed. Non-markovian 
distributions of the length of intervals between the moments 
of fault detection and correction are approximated by the 
general phase-type distributions with three phases. The 
model generalizes other software reliability models in which 
various types of distributions are used. The probabilistic 
measures of detecting and fixing faults of created software 
are presented. The proposed model can be useful in 
estimating and monitoring software reliability, which is 
viewed as a measure of software quality. Therefore, it can 
be concluded that this model is more realistic then others for 
a detection of software faults. 
 In the future, the following modified software reliability 
model will be created and investigated. The detected fault 
must be fixed before searching for the next one with the 
assumption that the distributions can change depending on 
number of detected/fixed faults. Examples of the application 
how a model help to have better software will be added.  
REFERENCES 
[1] List, ‚ÄúList of software reliability models‚Äù, available: 
http://en.wikipedia.org/wiki/List_of_software_reliability 
_models [retrieved: July, 2014]. 
[2]    B. Zachariah and R. N. Rattihalli, ‚ÄúFailure size proportional  
models and an analysis of failure detection abilities of 
software 
testing 
strategies,‚Äù 
IEEE 
Transactions 
on 
Reliability, vol. 56, n. 2, 2007, pp. 246-253. 
 [3]  Y. P. Wu, Q. P. Hu, M. Xie, and S. H. Ng, ‚ÄúModeling and 
analysis of software fault detection and correction process by 
considering time dependency,‚Äù IEEE Transactions on 
Reliability, vol. 56, n. 4, 2007, pp. 629-642. 
[4] P. Moranda and Z. Jelinski, ‚ÄúFinal report on software 
reliability study, MADC report number 63921,‚Äù McDonnell 
Douglas Astronautics Company, 1972. 
 [5]   J. Musa, A. Iannino, and K. Okumoto, ‚ÄúSoftware reliability 
measurement, prediction, application,‚Äù McGraw Hill, 
NewYork, 1987. 
[6]   A. Goel and K. Okumoto, ‚ÄúTime-dependent error-detection 
rate model for software reliability and other performance 
596
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

measures,‚Äù IEEE Transactions on Reliability, R‚Äì28 (3), 
1979,  pp. 206‚Äì211.  
[7]  A. L. Goel, ‚ÄúSoftware reliability models: assumptions, 
limitations and applicability,‚Äù IEEE Trans. Software Eng., 
SE-11, 1985,  pp. 1411‚Äì1423. 
[8]  S. S. Gokhale and K. S. Trivedi, ‚ÄúLog-logistic software 
reliability growth model,‚Äù Proc. 3rd IEEE Int‚Äôl. High-
Assurance Systems Eng., Symp IEEE CS Press, 1998, pp. 
34‚Äì41. 
[9]  M. Ohba, ‚ÄúInflection S-shaped software reliability growth 
model,‚Äù Stochastic Models in Reliability Theory, (S. Osaki 
and Y. Hatoyama, eds.), Springer-Varlag, Berlin, Germany, 
1984, pp. 144‚Äì165. 
[10] S. Quadri and N. Ahmad, ‚ÄúSoftware reliability growth 
modeling with new modified Weibul testing-effort and 
optimal release policy,‚Äù International Journal of Computer 
Applications, Vol. 6, No.2, 2010, pp. 1-10. 
[11] Y. Tohma, R. Jacoby, Y. Murata, and M. Yamamoto, 
‚ÄúHypergeometric distribution model to estimate the number 
of residual software faults,‚Äù Proceedings of the 13th Annual 
International 
Computer 
Software 
and 
Applications, 
Conference (COMPSAC‚Äô89), 1989, pp. 610-617. 
[12] Y. Aamsidhar, Y. Srinivas, and A. Brahmini, ‚ÄúSoftware 
reliability growth model based on Pareto type III 
distribution,‚Äù International Journal of Advanced Research in 
Electrical, Electronics and Instrumentation Engineering, Vol. 
2, No.6, 2013, pp. 2694-2698. 
[13] S. Inoue and S. Yamada, ‚ÄúLognormal process software 
reliability modeling with testing-effort,‚Äù Journal of Software 
Engineering and Application, Vol. 6, 2013, pp. 8-14. 
[14] M. F. Neuts, ‚ÄúMatrix-Geometric Solutions in Stochastic 
Models: an Algorithmic Approach‚Äù, Dover Publications Inc., 
1981. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
[15] H. Okamara and T. Dohi, ‚ÄúBuilding Phase-Type software 
reliability models‚Äô, 17th International Symposium on 
Software Reliability Engineering (ISSRE'06), November 
2007, pp. 289-298. 
[16] V. Bubnov, A. Tyrva, and A. Khomonenko, ‚ÄúModel of 
reliability of the software with Coxian distribution of length 
of intervals between the moments of detection errors,‚Äù  IEEE 
35th 
Annual 
Computer 
Software 
and 
Applications 
Conference Workshops, COMPSACW,  2011, pp. 310-314. 
[17] A. Bobbio, A. Horv√°th, and M. Telek, ‚ÄúMatching three 
moments with minimal acyclic phase type distributions,‚Äù 
Stochastic Models, 21, 2005, pp. 303-326.  
 [18] H. Andr√°s and T. Mikl√≥s, ‚ÄúMatching More Than Three 
Moments 
with 
Acyclic 
Phase 
Type 
Distributions,‚Äù  
Stochastic Models, 23, 2007, pp. 167-194. 
 [19]  S. Asmussen, O. Nerman, and M. Olsson, ‚ÄúFitting Phase-
Type Distributions via the EM Algorithm,‚Äú Scandinavian 
Journal of Statistics, Vol. 23, No. 4, December 1996, pp. 
419-441. 
[20]  R. Sadre and B. R. Haverkort, ‚ÄúFitting Heavy-Tailed HTTP 
Traces with the New Sratified EM-Algoritm,‚Äù  IT-NEWS 
2008 ‚Äì 4th International Telecommunication Networking 
Workshop on QoS Multiservice IP Networks, 2008, pp. 256-
261. 
[21]  A. Risha, V. Diev, and E. Smirni, ‚ÄúAn EM-based technique 
for 
approximating 
long-tailed 
data 
sets 
with 
PH 
distributions,‚Äù Performance Evaluation, 55 (2), 2004, pp. 
147‚Äì164. 
[22]  L. J. R. Esparza, ‚ÄúMaximum likelihood estimation of pahse-
type distributions,‚Äù Kongens Lyngby 2010, IMM-PHD-
2010-245. 
[23] E. Pedersen and A. J.  Chipperfield, ‚ÄúLocal Unimodal 
Sampling‚Äù, Hvass Laboratories Technical Report no. 
HL0801, 2008. 
597
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-367-4
ICSEA 2014 : The Ninth International Conference on Software Engineering Advances

