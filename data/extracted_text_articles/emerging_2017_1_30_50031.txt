Optimization of Power Consumption in SDN Networks
Adri´an Flores de la Cruz, Juan Pedro Mu˜noz-Gea, Pilar Manzanares-Lopez, Josemaria Malgosa-Sanahuja
Department of Information and Communication Technologies
Universidad Polit´ecnica de Cartagena
Campus Muralla del Mar, 30202. Cartagena, Spain
Email: {adrian.ﬂores, juanp.gea, pilar.manzanares, josem.malgosa}@upct.es
Abstract—Software-Deﬁned Networking (SDN) offers the possi-
bility to carry out a more direct control of network behavior
and to interact directly with the elements of the network. In this
paper, the problem of optimizing the power consumption in SDN
networks is addressed by looking for the most appropriate set of
active switches and links, their associated rates, and the number
of ﬂow entries at each SDN switch. We present a formulation for
this optimization problem and a heuristic algorithm to reduce
time complexity in large topologies. Energy saving values of more
than 40% are reached using real trafﬁc demands data.
Keywords–SDN; Energy efﬁciency; Optimization.
I.
INTRODUCTION
Nowadays, the optimization of network power consump-
tion is considered as one promising ﬁeld of application for
Software-Deﬁned Networking (SDN). This new networking
technology offers the possibility to carry out a more direct
control of network behavior and it gives us the possibility to
interact directly with the elements of the network. Considering
that strategies, such as turning off network switches, links, or
reducing the link rate, can result in energy savings without
affecting the service quality, SDN appears as a proper tool to
act over network devices and conﬁgure them following these
prerequisites.
It is known that the highest energy saving is achieved when
entire interconnection devices are turned off. However, the
energy consumption of data networks can also be minimized
by reducing the number of other active elements. For example,
this feature can be implemented by putting into a low-power
sleep state (sleep mode) elements, such as line cards or port
interfaces whenever a link is not tranferring data.
In addition to this, the link rate can also be conﬁgured
by the controller. Taking into account that a higher link rate
means a higher power consumption, ports can be conﬁgured
with the most appropriate rate considering the trafﬁc rate that
is transferred by the link. Finally, it is also necessary to take
into account the power consumption associated to ﬂow routing.
In this case, this power consumption directly depends on the
number of ﬂows conﬁgured in the ﬂow table of a switch, as a
higher number of ﬂow entries represents a higher number of
ﬂows that traverse the corresponding switch.
Different from previous works [1][2], which focus on
power-minimization in SDN considering only the number of
active links, in this work, we also consider all the previous
factors that affect the switch power consumption. That is, in
this paper, the problem of optimizing the power consumption
in an SDN network is addressed by looking for the most
appropriate set of active switches and links, their associated
rates, and the number of ﬂow entries at each SDN switch.
The major contributions of this paper are as follows:
•
It has been developed an optimization program that
minimizes the total switch power consumption con-
sidering all the previously presented factors.
•
A heuristic algorithm to optimize the network power
consumption is also implemented.
•
The implemented heuristic is evaluated in different
topologies.
The rest of this paper is structured as follows. In Section II,
we introduce previous works about the use of SDN technology
to reduce the network power consumption. In Section III,
we introduce our model and present the formulation of our
ILP model. The developed heuristic algorithm is presented in
Section IV. Then, the simulation results are analyzed in Section
V. Finally, in Section VI we present the conclusions.
II.
RELATED WORKS
In [1], the authors faced the problem of optimizing the
energy consumption of SDN networks. Such goal is achieved
by an energy-aware routing approach that minimizes the num-
ber of active links used to route a given trafﬁc demand in
SDN. They propose an Integer Linear Program (ILP) model, as
well as a heuristic considering the trafﬁc routing requirements.
In [2], the previous model is improved. In addition, results
showed that the heuristic algorithm converges much faster and
it can handle larger network sizes for which the exact model
cannot ﬁnd solutions in reasonable time.
A state-of-the-art study of energy efﬁciency strategies in
SDN is presented in [3]. Some research works, such as [4]
and [5] investigate the power consumption of SDN-related
system through measurement studies. For instance, the authors
of [4] derived power consumption models based on the mea-
surements of two OpenFlow switches, considering the effect
of conﬁguration, management, and the managed trafﬁc. In [5],
the authors analyze the implications of different software data
planes on the power efﬁciency, as part of Network Function
Virtualization (NFV) implementations.
On the other hand, other research works [6][7] explore en-
ergy eﬁciency in SDN-enabled Data Center Networks (DCN).
In a typical data center, energy consumption mainly consists
of two parts: servers and network devices. In [6] authors inves-
tigate how to minimize the energy consumption by carefully
scheduling the multi-path routing, according to the data center
trafﬁc demands. They take into account the TCAM (Ternary
Content-Addressable Memory) size limitation and formulate
the problem into an Integer Linear Problem. In [7], the authors
study data center energy optimization with joint consideration
of Virtual Machine placement and forwarding rule placement.
They also formulate the problem in the form of ILP and
propose a low-complexity two-phase heuristic algorithm.
12
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-602-6
EMERGING 2017 : The Ninth International Conference on Emerging Networks and Systems Intelligence

III.
ENERGY-AWARE APPROACH
According to [8], the power consumption of an OpenFlow
switch (Pswitch) is modeled as:
Pswitch =
Pbase + Pconfig + Pcontrol + POF
(1)
It consists of the base power Pbase, the power of the
conﬁguration of the switch Pconfig (it depends on the number
of active ports and the conﬁgured rates), the power consump-
tion of the control trafﬁc Pcontrol (it depends on the rate of
outgoing PacketIn messages -they are a way for the switch to
send a captured packet to the controller-, the rate of incoming
FlowMod messages -they allow the controller to modify the
state of an OpenFlow switch-, and their respective energy
consumption per packet), and the power consumption of the
processed OpenFlow trafﬁc POF (it depends on the matches
and actions of active OpenFlow rules).
A. Network Model
In this paper, we consider a topology as an undirected graph
G = (N, E), where N includes both the host set H and the
set V of candidate SDN-enabled switches, i.e., N = H ∪ V,
and edge set E represents the set of candidate links between
the nodes in N.
We also consider a set of offered unicast demands D
between the hosts in H. For each demand d, hd denotes its
known offered trafﬁc.
B. Formulation
We are interested in creating an algorithm that solves
the problem that ﬁnds (i) the SDN-enabled switches to be
activated in the network, (ii) the links to be installed, (iii)
their capacities, and (iv) how the trafﬁc must be routed over
the links. The optimization target is to minimize the total power
consumption of SDN switches in the network.
The problem is formulated as follows:
•
Input parameters:
◦
H: Set of network hosts.
◦
V: Set of candidate SDN-enabled switches.
◦
E: Set of candidate network links. From this
information, δ+(v) denotes the set of candidate
links outgoing from node v, and δ−(v) the set
of candidate links to v.
◦
D: Set of offered unicast demands.
◦
hd, d ∈ D: Offered trafﬁc of a demand d. From
this information, a(d) denotes the origin host
of a demand d and b(d) the destination host.
◦
Pbase:
The
base
power
of
SDN-enabled
switches.
◦
Pconfig−port: The power associated to the ac-
tivation of both extreme switches ports of a
link. It is a term of contributing to the overall
Pconfig.
◦
Pconfig−speed: The power associated with the
conﬁgured speed rate. It is a term of contribut-
ing to the overall Pconfig.
◦
POF −control: The power associated to the con-
trol and OpenFlow trafﬁc.
◦
U: Maximum capacity of a link.
◦
M: An auxiliary really big number.
•
Decision variables:
◦
ze, e ∈ E: 1 if candidate link e is actually
installed, and 0 otherwise (there is no link
there, and then the capacity of this candidate
link must be zero).
◦
ue, e ∈ E: Capacity of candidate link e.
◦
xde, d ∈ D, e ∈ E: Trafﬁc of demand d that
traverses candidate link e.
◦
ˆxde, d ∈ D, e ∈ E: 1 if demand d traverses
candidate link e, and 0 otherwise.
◦
xv, v ∈ V: 1 if candidate node v is actually
installed, and 0 otherwise.
◦
dv, v ∈ V: Number of OpenFlow ﬂows in-
stalled in candidate switch v.
•
Formulation:
min
(Pbase
X
v
xv + Pconfig−port
X
e
ze+
(2a)
+ Pconfig−speed
X
e
ue + POF −control
X
v
dv),
subject to:
X
e∈δ+(v)
xde −
X
e∈δ−(v)
xde =



hd, if v = a(d)
−hd, if v = b(d)
0, otherwise
,
∀d ∈ D, ∀v ∈ V
(2b)
X
d
xde ≤ ue,
∀e ∈ E
(2c)
ue ≤ Uze,
∀e ∈ E
(2d)
X
e∈δ+(v)
ue +
X
e∈δ−(v)
ue ≤ Mxv,
∀v ∈ V
(2e)
xde ≤ M ˆxde,
∀d ∈ D, ∀e ∈ E
(2f)
X
e∈δ+(v)
X
d
ˆxde = dv,
∀v ∈ V
(2g)
ue ≥ 0, xde ≥ 0, dv ≥ 0,
∀d ∈ D, e ∈ E, v ∈ V
(2h)
ze, ˆxde, xv ∈ {0, 1}
∀d ∈ D, e ∈ E, v ∈ V
(2i)
The objective function (2a) minimizes the total power
consumption of SDN switches in the network.
Constraints (2b) are the ﬂow conservation constraints.
Constraints (2c) mean that for each link, the trafﬁc carried in
the link is less or equal than its capacity (and thus, no link is
oversubscribed). Constraints (2d) make that (i) if a candidate
link e is off (ze = 0), then there cannot be a capacity in it
(ue = 0), and (ii) if a candidate link is on (ze = 1), the link
capacity is limited to U.
Constraints (2e) make that if a candidate switch v is off
(xv = 0), then the capacity of its outgoing and incoming links
has to be equal to zero (ue = 0). Constraints (2f) make that
if a demand d does not traverse a link e, then the associated
trafﬁc of the demand has to be equal to zero (xde = 0).
Constraints (2g) set the number of OpenFlow ﬂows in-
stalled in candidate switch v. Finally, constraints (2h) forbid
that a link carries a negative amount of trafﬁc of a demand,
since this has no physical meaning.
13
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-602-6
EMERGING 2017 : The Ninth International Conference on Emerging Networks and Systems Intelligence

Require: G = (N, E) network graph, D data trafﬁc demands
Ensure: V active switches, X active links, U links capacity,
F ﬂows in each switch
1: for all demands ∈ D do
2:
if ﬁrst demand then
3:
path=SHORTESTPATH(demand)
4:
CALCULATEPOWER(path, demand)
5:
UPDATE(V, X, U, F)
6:
else
7:
P=ALLPOSSIBLEPATHS(demand)
8:
for all paths ∈ P do
9:
if AVAILABLECAPACITY(path) then
10:
CALCULATEPOWER(path, demand)
11:
end if
12:
end for
13:
SELECTMINIMUMPOWERPATH(P)
14:
UPDATE(V, X, U, F)
15:
end if
16: end for
Figure 1. Heuristic algorithm
1: for all links ∈ path do
2:
UPDATEACTIVELINKS(link, demand)
3:
UPDATEINSTALLEDFLOWS(demand)
4:
if origin(link) or destination(link) /∈ V then
5:
UPDATEACTIVESWITCHES( )
6:
end if
7:
UPDATETOTALPOWER(demand)
8: end for
9: return totalPower
Figure 2. CALCULATEPOWER(path, demand)
This optimization problem has been implemented in a
network planning tool that is publicly available through GNU
public license, called Net2Plan [9]. The contributed Java
Optimization Modeler (JOM) library allows Java to interface
from Net2Plan with GLPK and IPOPT optimization engines.
In this way, it is possible to create and conﬁgure custom
optimization problems within the Net2Plan environment.
However, the previous optimization problem becomes chal-
lenging to be solved even on medium-scale topologies. This
is because the difﬁculty of this problem is NP-Hard, so the
consumption of resources grow exponentially with the network
size. To solve this problem in an alternative way, we develop
a heuristic algorithm in the next section.
IV.
HEURISTIC ALGORITHM
The proposed algorithm is shown in Figure 1. The main
loop of the algorithm consists in determining the minimum
power path for each trafﬁc demand, that is, the path that
suposses a minimum increment in the total power consumption
in the network. In the case of the ﬁrst demand (line 2), the
selected path is the shortest one. Then, the power consumption
associated to the conﬁguration of this path in the network is
calculated, and the sets of active switches (V), active links (X),
links capacities (X), and ﬂows in each switch (F) are updated.
For the rest of trafﬁc demands (line 6), ﬁrst of all, the set
of admissible paths associated with each demand is obtained.
Among all these paths with enough capacity to establish the
new connection, we select the path that has a lower increment
in the total power consumption in the network (line 13). Then,
the sets of active switches (V), active links (X), links capacity
(X), and ﬂows in each switch (F) are updated.
Figure 2 shows the method to obtain the power increment
that supposes the establishment of a speciﬁc demand in a
certain path. Line 2 considers if a new link must be activated or
an existing link needs to increment its conﬁgured speed. Line
3 considers the energy consumption required by the adding
of new ﬂow entries in the switches that form the path. Line
5 takes into account if it has been necessary to activate new
switches.
V.
SIMULATIONS AND RESULTS
To evaluate the performance of our algorithm, a simulator
in Python language has been developed. Network topologies
are obtained using the NetworkX [10] library. NetworkX is
a Python software package that is used for the creation and
study of the structure and performance of complex networks.
Our tests are performed in two different topologies, one with
|V| = 20 candidate switches and another with |V| = 70. On
the other hand, the trafﬁc demands have been obtained from
SNDlib library [11].
Figure 3 shows the total power consumption in a network
with 70 nodes, as a function of the number of demands. In
this ﬁgure, we can observe that the power consumption using
the heuristic is lower than the power consumed when all the
swiches and links are active. The saved power values are
between 25% and 50%. On the other hand, in this ﬁgure it is
clear that the increment in the number of demands represents
an increment in power consumption.
Figure 4 shows the total power consumption in a network
with 20 nodes. In this ﬁgure, we can observe the same patterns
as in Figure 3. In this ﬁgure we can see how the heuristic
continues to give us better performance regarding scenarios
where only the links that are not used are disconnected. When
the number of demands is small, the saved power values are
similar to those presented with |V| = 70. However, when
the number of demands increases, it can be seen that the
percentage of saved power is lower in the case |V| = 20.
This is due to the fact that in the case of |V| = 20, as
demand between nodes increases, most nodes in the network
must be activated to supply such demand. While in the case
of |V| = 70, having more nodes available, we can try to route
the demands in a higher number of available routes, giving us
a higher percentage of saved power.
Figure 6 shows the increment in the total power when new
demands are activated in the network. It can be seen that when
the ﬁrst demands are established, the increment in the total
power is high. This is because it is the necessary to activate
several switches to connect the source and the destination
nodes. As new demands are established, the switches have
already been activated, so the required power is not so high.
There are some peaks in the last demands, though. This is
because there is a new source or destination node that has not
been activated before, or that simply the links that were already
connected cannot give the necessary performance to satisfy the
demands and it is necessary to look for another route with a
new switch that was not connected.
14
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-602-6
EMERGING 2017 : The Ninth International Conference on Emerging Networks and Systems Intelligence

20
30
40
50
60
70
80
90
3000
4000
5000
6000
7000
8000
9000
Network Power Consumption (W)
Number of demands
Topology with 70 switches
 
 
Power consumption with heuristic
Power consumption with all switches
Power consumption with all switches and links
Figure 3. Total power consumption in a network with 70 nodes.
20
30
40
50
60
70
80
90
1000
1200
1400
1600
1800
2000
2200
2400
2600
2800
3000
Network Power Consumption (W)
Number of demands
Topology with 20 switches
 
 
Power consumption with heuristic
Power consumption with all switches
Power consumption with all switches and links
Figure 4. Total power consumption in a network with 20 nodes.
20
30
40
50
60
70
80
90
0
10
20
30
40
50
60
Total Saved Power %
Number of demands
 
 
Total Saved Power (%) 70 switches
Total Saved Power (%) 20 switches
Figure 5. Percentage of saved power.
VI.
CONCLUSION
In this paper, we have proposed an approach that minimizes
the total power consumption in SDN networks. To achieve
this, ﬁrst of all an optimization program has been formulated.
In this program, different constraints have been modeled and
implemented. We have also developed a heuristic algorithm
that has been evaluated in two different topologies with real
trafﬁc demands. Based on experimental simulations, we have
proved that our apporach achieves energy savings of up to
0
10
20
30
40
50
60
70
80
90
Number of demand
0
100
200
300
400
500
Network Power Consumption (W)
Power by demand (70 switches)
Figure 6. Increment in the total power when new demands are activated.
50%. As future work, we plan to implement this heuristic in
Smart Cities environments, where SDN is a key element.
ACKNOWLEDGMENT
This research has been supported by the AEI/FEDER,UE
Project Grant TEC2016-76465-C2-1-R (AIM). Adrian Flores
de la Cruz also thanks the Spanish Ministry of Economy,
Industry and Competitiveness for a FPI (BES-2014-069097)
pre-doctoral fellowship.
REFERENCES
[1]
A. Fernandez-Fernandez, C. Cervello-Pastor, and L. Ochoa-Aday, “Im-
proved energy-aware routing algorithm in software-deﬁned networks,”
in 2016 IEEE 41st Conference on Local Computer Networks (LCN),
Nov 2016, pp. 196–199.
[2]
——, “Achieving energy efﬁciency: An energy-aware approach in sdn,”
in 2016 IEEE Global Communications Conference (GLOBECOM), Dec
2016, pp. 1–7.
[3]
B. G. Assefa and O. Ozkasap, “State-of-the-art energy efﬁciency ap-
proaches in software deﬁned networking,” in SoftNetworking’15, April
2015, pp. 268–273.
[4]
F. Kaup, S. Melnikowitsch, and D. Hausheer, “Measuring and modeling
the power consumption of openﬂow switches,” in 10th International
Conference on Network and Service Management (CNSM) and Work-
shop, Nov 2014, pp. 181–186.
[5]
Z. Xu, F. Liu, T. Wang, and H. Xu, “Demystifying the energy efﬁciency
of network function virtualization,” in 2016 IEEE/ACM 24th Interna-
tional Symposium on Quality of Service (IWQoS), June 2016, pp. 1–10.
[6]
D. Zeng, G. Yang, L. Gu, S. Guo, and H. Yao, “Joint optimization
on switch activation and ﬂow routing towards energy efﬁcient software
deﬁned data center networks,” in 2016 IEEE International Conference
on Communications (ICC), May 2016, pp. 1–6.
[7]
H. Y. et al.i, “Joint optimization of vm placement and rule placement
towards energy efﬁcient software-deﬁned data centers,” in 2016 IEEE
International Conference on Computer and Information Technology
(CIT), Dec 2016, pp. 204–209.
[8]
F. Kaup, S. Melnikowitsch, and D. Hausheer, “Measuring and modeling
the power consumption of openﬂow switches,” in 10th International
Conference on Network and Service Management (CNSM) and Work-
shop, Nov 2014, pp. 181–186.
[9]
P. P.-M. et al., “Net2plan-aire: gained experience in an ad-hoc sdn
development for a metro carrier network,” in 17th International Network
Strategy and Planning Symposium (Networks 2016)p, 2016, pp. 181–
186.
[10]
“Networkx,” http://networkx.github.io/, accessed: June 2017.
[11]
“Sndlib,” http://sndlib.zib.de/, accessed: June 2017.
15
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-602-6
EMERGING 2017 : The Ninth International Conference on Emerging Networks and Systems Intelligence

