How to Synchronize Large-Scale Ultra-Fine-Grained
Processors in Optimum-Time
Hiroshi Umeo
School of Information Engineering
University of Osaka Electro-Communication
Neyagawa-shi, Hastu-cho, 18-8, Osaka
Email: umeo@cyt.osakac.ac.jp
Abstract—We introduce a new class of FSSP (ﬁring squad syn-
chronization problem) algorithms based on recursive-halving and
construct a survey on recent developments in FSSP algorithms for
one-dimensional cellular arrays. We present herein a comparison
of the quantitative aspects of the optimum-time FSSP algorithms
developed so far. Several state-efﬁcient new implementations
and new insights into synchronization algorithms and multi-
dimensional expansions are also given.
Keywords—cellular automata, synchronization
I.
INTRODUCTION
Synchronization of large-scale networks is an important
and fundamental computing primitive in parallel and dis-
tributed systems. The synchronization in ultra-ﬁne grained
parallel computational model of cellular automata, known
as ﬁring squad synchronization problem (FSSP), has been
studied extensively for more than ﬁfty years, and a rich
variety of synchronization algorithms has been proposed. In the
present paper, we introduce a new class of FSSP algorithms
based on recursive-halving and construct a survey on recent
developments in FSSP algorithms for one-dimensional cellular
arrays. The algorithms being compared are Balzer [1], Gerken
[2], Waksman [20], a number of revised versions thereof, and
their generalized versions such as Moore and Langdon [8],
Settle and Simon [10], Szwerinski [11], all included in the
proposed new class of FSSP algorithms. We present herein a
survey and a comparison of the quantitative aspects of the
optimum-time synchronization algorithms developed so far.
Several state-efﬁcient new implementations, new insights into
synchronization algorithms and multi-dimensional expansions
are also given.
Speciﬁcally, we attempt to answer the following questions:
•
First, are all previously presented transition rule sets
correct?
•
Do these sets contain redundant rules? If so, what is
the exact rule set?
•
How do the algorithms compare with each other?
•
Can we expand those 1D FSSP algorithms proposed
so far to 2D, 3D arrays, or more generally to multi-
dimensional arrays?
•
How can we synchronize multi-dimensional arrays in
optimum-time?
In Section 2 we give a description of the FSSP and review
some basic results on the FSSP for 1D arrays. Section 3
introduces a new class of FSSP algorithms based on recursive-
halving and presents multi-dimensional generalizations of the
algorithms. In the last section we give a summary of the paper.
II.
FIRING SQUAD SYNCHRONIZATION PROBLEM
In this section, we deﬁne the FSSP and introduce some
basic results on FSSP.
A. Firing Squad Synchronization Problem
Figure 1 illustrates a ﬁnite one-dimensional (1D) cellular
array consisting of n cells. Each cell is an identical ﬁnite-state
automaton. The array operates in lock-step mode in such a
way that the next state of each cell is determined by both its
own present state and the present states of its left and right
neighbors. All cells (soldiers), except one general, are initially
in the quiescent state at time t = 0 with the property that the
next state of a quiescent cell with quiescent neighbors is the
quiescent state again. At time t = 0, one general cell C1 is
in the ﬁre-when-ready state, which is the initiation signal for
the synchronization of the array. The FSSP is to determine
a description (state set and next-state function) for cells that
ensures all cells enter the ﬁre state at exactly the same time and
for the ﬁrst time. The set of states and the next-state function
must be independent of n.
C1
C2
C4
Cn
...
C3
Soldiers
Genaral
Fig. 1. One-dimensional cellular automaton
A formal deﬁnition of the FSSP is as follows: A cellular
automaton M is a pair M = (Q, δ), where
1)
Q is a ﬁnite set of states with three distinguished
states G, Q, and F. G is an initial general state, Q is
a quiescent state, and F is a ﬁring state, respectively.
2)
δ is a next state function such that δ : Q∪{∗}×Q×
Q ∪ {∗} → Q. The state * /∈ Q is a pseudo state of
the border of the array.
3)
The quiescent state Q must satisfy the following
conditions: δ(Q, Q, Q) = δ(∗, Q, Q) = δ(Q, Q, ∗) = Q.
A cellular automaton of length n, Mn consisting of n
copies of M is a 1D array of M, numbered from 1 to n.
81
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization

Each M is referred to as a cell and denoted by Ci, where
1 ≤ i ≤ n. We denote a state of Ci at time (step) t by St
i, where
t ≥ 0, 1 ≤ i ≤ n. A conﬁguration of Mn at time t is a function
Ct : [1, n] → Q and denoted as St
1St
2 .... St
n. A computation of
Mn is a sequence of conﬁgurations of Mn, C0, C1, C2, ...., Ct,
..., where C0 is a given initial conﬁguration. The conﬁguration
at time t + 1, Ct+1, is computed by synchronous applications
of the next transition function δ to each cell of Mn in Ct such
that:
St+1
1
= δ(∗, St
1, St
2), St+1
i
= δ(St
i−1, St
i, St
i+1), and St+1
n
=
δ(St
n−1, St
n, ∗).
A synchronized conﬁguration of Mn at time t is a conﬁg-
uration Ct, St
i = F, for any 1 ≤ i ≤ n.
The FSSP is to obtain an M such that, for any n ≥ 2,
1)
A synchronized conﬁguration at time t = T(n),
CT (n) =
n



F, · · · , F can be computed from an initial
conﬁguration C0 = G
 n−1


Q, · · · , Q.
2)
For any t, i such that 1 ≤ t ≤ T(n) − 1, 1 ≤ i ≤
n, St
i ̸= F.
The generalized FSSP (GFSSP) is to obtain an M such
that, for any n ≥ 2 and for any k such that 1 ≤ k ≤ n,
1)
A synchronized conﬁguration at time t = T(n),
CT (n) =
n



F, · · · , F can be computed from an initial
conﬁguration C0 =
 k−1


Q, · · · , Q G
 n−k


Q, · · · , Q.
2)
For any t, i, such that 1 ≤ t ≤ T(n) − 1, 1 ≤ i ≤
n, St
i ̸= F.
No cells ﬁre before time t = T(n). We say that Mn is
synchronized at time t = T(n) and the function T(n) is a
time complexity for the synchronization.
B. A Brief History of the Developments of Optimum-Time
FSSP Algorithms
The problem known as the ﬁring squad synchronization
problem was devised in 1957 by J. Myhill, and ﬁrst appeared
in print in a paper by E. F. Moore [7]. This problem has
been widely circulated, and has attracted much attention. The
ﬁring squad synchronization problem ﬁrst arose in connection
with the need to simultaneously turn on all parts of a self-
reproducing machine. The problem was ﬁrst solved by J.
McCarthy and M. Minsky who presented a 3n-step algo-
rithm. In 1962, the ﬁrst optimum-time, i.e., (2n − 2)-step,
synchronization algorithm was presented by Goto [3], with
each cell having several thousands of states. Waksman [20]
presented a 16-state optimum-time synchronization algorithm.
Afterward, Balzer [1] and Gerken [2] developed an eight-
state algorithm and a seven-state synchronization algorithm,
respectively, thus decreasing the number of states required
for the synchronization. In 1987, Mazoyer [5] developed a
six-state synchronization algorithm which, at present, is the
algorithm having the fewest states.
C. Complexity Measures for FSSP Algorithms
•
Time
Any solution to the original FSSP with a general at
one end can be easily shown to require (2n − 2) steps
for synchronizing n cells, since signals on the array
can propagate no faster than one cell per one step, and
the time from the general’s instruction until the ﬁnal
synchronization must be at least 2n − 2.
Theorem 1 The minimum time in which the ﬁring
squad synchronization could occur is 2n − 2 steps,
where the general is located on the left end.
Theorem 2 There exists a cellular automaton that can
synchronize any 1D array of length n in optimum 2n−
2 steps, where the general is located on the left end.
•
Number of States
The following three distinct states: the quiescent state,
the general state, and the ﬁring state, are required in
order to deﬁne any cellular automaton that can solve
the FSSP. Note that the boundary state for C0 and
Cn+1 is not generally counted as an internal state.
Balzer [1] and Sanders [9] showed that no four-state
optimum-time solution exists. Umeo and Yanagihara
[17], Yun`es [21], and Umeo, Kamikawa, and Yun`es
[14] gave some 5- and 4-state partial solutions that
can solve the synchronization problem for inﬁnitely
many sizes n, but not all, respectively. The solution
is referred to as partial solution, which is compared
with usual full solutions that can solve the problem for
all cells. Concerning the optimum-time full solutions,
Waksman [20] presented a 16-state optimum-time
synchronization algorithm. Afterward, Balzer [1] and
Gerken [2] developed an eight-state algorithm and
a seven-state synchronization algorithm, respectively,
thus decreasing the number of states required for the
synchronization. Mazoyer [5] developed a six-state
synchronization algorithm which, at present, is the
algorithm having the fewest states for 1D arrays.
Theorem 3 There exists a 6-state full solution to the
FSSP.
Theorem 4 There is no four-state full solution that
can synchronize n cells.
Yun`es [21] and Umeo, Yun`es, and Kamikawa [14]
developed 4-state partial solutions based on Wolfram’s
rules 60 and 150. They can synchronize any array/ring
of length n = 2k for any positive integer k. Details
can be found in Yun`es [21] and Umeo, Kamikawa,
and Yun`es [14].
Theorem 5 There exist 4-state partial solutions to the
FSSP.
•
Number of Transition Rules
Any k-state (excluding the boundary state) transition
table for the synchronization has at most (k − 1)k2
entries in (k − 1) matrices of size k × k. The number
of transition rules reﬂects a complexity of synchro-
nization algorithms.
82
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization

•
State-Change Complexity
Vollmar [18,19] introduced a state-change complexity
in order to measure the efﬁciency of cellular automata,
motivated by energy consumption in certain SRAM-
type memory systems. The state-change complexity
is deﬁned as the sum of proper state changes of
the cellular space during the computations. A formal
deﬁnition is as follows: Consider an FSSP algorithm
operating on n cells. Let T(n) be synchronization
steps of the FSSP algorithm. We deﬁne a matrix C
of size T(n)×n (T(n) rows, n columns) over {0, 1},
where each element ci,j on ith row, jth column of the
matrix is deﬁned:
ci,j =
1
Sj
i ̸= Sj−1
i
0
otherwise.
(1)
The state-change complexity SC(n) of the FSSP
algorithm is the sum of 1’s elements in C deﬁned
as:
SC(n) =
T (n)

j=1
n

i=1
ci,j.
(2)
Vollmar [19] showed that Ω(n log n) state-changes are
required for synchronizing n cells in (2n − 2) steps.
Theorem 6 Ω(n log n) state-change is necessary for
synchronizing n cells in minimum-steps.
Gerken [2] presented a minimum-time, Θ(n log n)
minimum-state-change FSSP algorithm with a general
at one end.
Theorem 7 Θ(n log n) state-change is sufﬁcient for
synchronizing n cells in 2n − 2 steps.
III.
A CLASS OF FSSP ALGORITHMS BASED ON
RECURSIVE-HALVING
Here we introduce a new class of FSSP algorithms based
on recursive halving.
A. Recursive-Halving Marking
In this section, we develop a marking schema for 1D arrays
referred to as recursive-halving marking. The marking schema
prints a special mark on cells in a cellular space deﬁned by
the recursive-halving marking. It is based on a 1D FSSP syn-
chronization algorithm. The marking will be effectively used
for constructing multi-dimensional FSSP algorithms operating
in optimum-time.
Let S be a 1D cellular space consisting of cells Ci, Ci+1,
..., Cj, denoted by [i...j], where j > i. Let |S| denote the
number of cells in S, that is |S| = j − i + 1. A center cell(s)
Cx of S is deﬁned by
x =
(i + j)/2
|S|: odd
(i + j − 1)/2, (i + j + 1)/2
|S|: even.
(3)
The recursive-halving marking for a given cellular space S
= [1...n] is deﬁned as follows:
Recursive-Halving Marking: RHM
Algorithm RHM(S)
begin
if |S| ≥ 2 then
if |S| is odd then
mark center cell Cx in S
SL:= [1...x]; SR:= [x...n]
RHML(SL); RHMR(SR);
else
mark center cells Cx and Cx+1 in S
SL:= [1...x]; SR:= [x + 1...n]
RHML(SL); RHMR(SR);
end
Left-Side Recursive-Halving Marking: RHML
Algorithm RHML(S)
begin
while |S| > 2 do
if |S| is odd then
mark center cell Cx in S
SL:= [1...x]; RHML(SL);
else
mark center cells Cx and Cx+1 in S
SL:= [1...x]; RHML(SL);
end
The marking RHMR for the right-side space can be deﬁned
in a similar way. As an example, we consider a cellular space
S = [1...15] consisting of 15 cells. The ﬁrst center cell is C8,
then the second one is C4, C5 and C11, C12, and the last one
is C2, C3, C13, C14, respectively. In case S = [1...17], we get
C9, C5, C13, C3, C15, and C2, C16 after four iterations.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
0
G
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
1
G
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
2
G
O
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
3
G
O
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
4
G
O
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
G
O
O
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
G
E
O
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
7
G
E
O
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
8
G
E
O
O
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
9
G
E
K
O
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
10
G
E
K
O
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
11
G
E
K
O
O
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
12
G
E
K
C
O
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
13
G
E
E
C
O
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
14
G
E
E
C
O
O
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
15
G
E
E
C
K
O
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
16
G
E
E
Q
K
O
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
17
G
E
E
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
18
G
E
E
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
19
G
E
E
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
20
G
E
E
E
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
21
G
E
K
E
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
22
G
E
K
E
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
23
G
E
K
E
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
24
G
E
K
E
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
25
G
E
K
E
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
26
G
E
K
E
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
27
G
E
K
E
E
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
28
G
E
K
C
E
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
29
G
E
E
C
E
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
30
G
E
E
C
E
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
31
G
E
E
C
E
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
32
G
E
E
C
E
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
33
G
E
E
C
E
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
34
G
E
E
C
E
E
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
35
G
E
E
C
K
E
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
36
G
E
E
Q
K
E
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
37
G
E
E
Q
K
E
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
38
G
E
E
Q
K
E
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
39
G
E
E
Q
K
E
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
40
G
E
E
Q
K
E
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
41
G
E
E
Q
K
E
E
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
42
G
E
E
Q
K
C
E
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
43
G
E
E
Q
C
C
E
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
44
G
E
E
E
C
C
E
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
45
G
E
K
E
C
C
E
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
46
G
E
K
E
C
C
E
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
47
G
E
K
E
C
C
E
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
48
G
E
K
E
C
C
E
E
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
49
G
E
K
E
C
C
K
E
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
50
G
E
K
E
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
51
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
52
G
E
K
E
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
53
G
E
K
E
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
54
G
E
K
E
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
55
G
E
K
E
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
56
G
E
K
E
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
57
G
E
K
E
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
58
G
E
K
E
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
59
G
E
K
E
E
C
C
C
E
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
60
G
E
K
C
E
C
C
C
E
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
61
G
E
E
C
E
C
C
C
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
62
G
E
E
C
E
C
C
C
E
E
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
63
G
E
E
C
E
C
C
C
K
E
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
64
G
E
E
C
E
C
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
65
G
E
E
C
E
C
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
66
G
E
E
C
E
Q
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
67
G
E
E
C
E
Q
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
68
G
E
E
C
E
Q
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
69
G
E
E
C
E
Q
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
70
G
E
E
C
E
Q
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
G
71
G
E
E
C
E
Q
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
G
72
G
E
E
C
E
Q
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
G
73
G
E
E
C
E
Q
C
C
C
C
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
E
G
74
G
E
E
C
E
E
C
C
C
C
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
E
G
75
G
E
E
C
K
E
C
C
C
C
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
E
E
G
76
G
E
E
Q
K
E
C
C
C
C
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
E
E
G
77
G
E
E
Q
K
E
C
C
C
C
K
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
E
E
G
78
G
E
E
Q
K
E
C
C
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
E
E
E
G
79
G
E
E
Q
K
E
C
C
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
E
K
E
G
80
G
E
E
Q
K
E
C
Q
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
E
K
E
G
81
G
E
E
Q
K
E
Q
Q
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
E
E
K
E
G
82
G
E
E
Q
K
E
Q
Q
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
E
D
K
E
G
83
G
E
E
Q
K
E
Q
Q
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
E
D
E
E
G
84
G
E
E
Q
K
E
Q
Q
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
E
E
D
E
E
G
85
G
E
E
Q
K
E
Q
Q
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
E
K
D
E
E
G
86
G
E
E
Q
K
E
Q
Q
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
E
K
Q
E
E
G
87
G
E
E
Q
K
E
Q
Q
C
C
C
C
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
E
E
G
88
G
E
E
Q
K
E
Q
C
C
C
C
C
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
E
E
G
89
G
E
E
Q
K
E
E
C
C
C
C
C
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
E
E
G
90
G
E
E
Q
K
C
E
C
C
C
C
C
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
E
E
E
G
91
G
E
E
Q
C
C
E
C
C
C
C
C
K
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
E
K
E
G
92
G
E
E
E
C
C
E
C
C
C
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
E
K
E
G
93
G
E
K
E
C
C
E
C
C
C
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
Q
E
K
E
G
94
G
E
K
E
C
C
E
C
C
Q
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
Q
E
K
E
G
95
G
E
K
E
C
C
E
C
Q
Q
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
Q
E
K
E
G
96
G
E
K
E
C
C
E
Q
Q
Q
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
D
Q
E
K
E
G
97
G
E
K
E
C
C
E
Q
Q
Q
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
D
E
E
K
E
G
98
G
E
K
E
C
C
E
Q
Q
Q
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
D
E
D
K
E
G
99
G
E
K
E
C
C
E
Q
Q
Q
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
Q
D
E
D
E
E
G
100
G
E
K
E
C
C
E
Q
Q
Q
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
Q
Q
E
D
E
E
G
101
G
E
K
E
C
C
E
Q
Q
Q
C
C
C
C
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
Q
Q
E
D
E
E
G
102
G
E
K
E
C
C
E
Q
Q
C
C
C
C
C
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
D
Q
Q
E
D
E
E
G
103
G
E
K
E
C
C
E
Q
C
C
C
C
C
C
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
B
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
D
D
Q
E
D
E
E
G
104
G
E
K
E
C
C
E
E
C
C
C
C
C
C
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
O
O
B
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
D
D
E
E
D
E
E
G
105
G
E
K
E
C
C
K
E
C
C
C
C
C
C
K
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
K
M
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
Q
D
D
E
K
D
E
E
G
106
G
E
K
E
C
Q
K
E
C
C
C
C
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
M
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
Q
Q
D
E
K
Q
E
E
G
107
G
E
K
E
Q
Q
K
E
C
C
C
C
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
M
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
Q
Q
Q
E
K
Q
E
E
G
108
G
E
K
E
Q
Q
K
E
C
C
C
Q
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
M
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
D
Q
Q
Q
E
K
Q
E
E
G
109
G
E
K
E
Q
Q
K
E
C
C
Q
Q
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
M
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
D
D
Q
Q
E
K
Q
E
E
G
110
G
E
K
E
Q
Q
K
E
C
Q
Q
Q
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
M
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
D
D
D
Q
E
K
Q
E
E
G
111
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
M
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
Q
D
D
D
E
E
K
Q
E
E
G
112
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
Q
Q
D
D
E
D
K
Q
E
E
G
113
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
Q
Q
Q
D
E
D
D
Q
E
E
G
114
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
D
Q
Q
Q
Q
E
D
D
E
E
E
G
115
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
E
Q
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
D
D
Q
Q
Q
E
D
D
E
K
E
G
116
G
E
K
E
Q
Q
K
E
Q
Q
Q
C
C
C
C
C
E
Q
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
D
D
D
Q
Q
E
D
D
E
K
E
G
117
G
E
K
E
Q
Q
K
E
Q
Q
C
C
C
C
C
C
E
Q
C
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
D
E
E
K
Q
Q
D
D
D
D
Q
E
D
D
E
K
E
G
118
G
E
K
E
Q
Q
K
E
Q
C
C
C
C
C
C
C
E
E
C
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
Q
E
D
K
Q
Q
Q
D
D
D
E
E
D
D
E
K
E
G
119
G
E
K
E
Q
Q
K
E
E
C
C
C
C
C
C
C
K
E
C
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
D
Q
E
D
D
Q
Q
Q
Q
D
D
E
K
D
D
E
K
E
G
120
G
E
K
E
Q
Q
K
C
E
C
C
C
C
C
C
Q
K
E
C
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
D
E
E
D
D
D
Q
Q
Q
Q
D
E
K
Q
D
E
K
E
G
121
G
E
K
E
Q
Q
C
C
E
C
C
C
C
C
Q
Q
K
E
Q
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
Q
E
K
D
D
D
D
Q
Q
Q
Q
E
K
Q
Q
E
K
E
G
122
G
E
K
E
Q
C
C
C
E
C
C
C
C
Q
Q
Q
K
E
A
C
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
D
A
E
K
Q
D
D
D
D
Q
Q
Q
E
K
Q
Q
E
K
E
G
123
G
E
K
E
E
C
C
C
E
C
C
C
Q
Q
Q
Q
K
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
K
Q
Q
D
D
D
D
Q
Q
E
K
Q
Q
E
K
E
G
124
G
E
K
C
E
C
C
C
E
C
C
Q
Q
Q
Q
Q
A
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
A
Q
Q
Q
D
D
D
D
Q
E
K
Q
Q
E
K
E
G
125
G
E
E
C
E
C
C
C
E
C
Q
Q
Q
Q
Q
A
C
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
D
A
Q
Q
Q
D
D
D
E
E
K
Q
Q
E
K
E
G
126
G
E
E
C
E
C
C
C
E
Q
Q
Q
Q
Q
A
C
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
D
A
Q
Q
Q
D
D
E
D
K
Q
Q
E
K
E
G
127
G
E
E
C
E
C
C
C
E
Q
Q
Q
Q
A
C
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
D
A
Q
Q
Q
D
E
D
D
Q
Q
E
K
E
G
128
G
E
E
C
E
C
C
C
E
Q
Q
Q
A
C
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
D
A
Q
Q
Q
E
D
D
D
Q
E
K
E
G
129
G
E
E
C
E
C
C
C
E
Q
Q
A
C
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
D
A
Q
Q
E
D
D
D
E
E
K
E
G
130
G
E
E
C
E
C
C
C
E
Q
A
C
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
D
A
Q
E
D
D
D
E
D
K
E
G
131
G
E
E
C
E
C
C
C
E
A
C
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
D
A
E
D
D
D
E
D
E
E
G
132
G
E
E
C
E
C
C
C
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
D
D
D
E
D
E
E
G
133
G
E
E
C
E
C
C
B
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
B
D
D
E
D
E
E
G
134
G
E
E
C
E
C
B
C
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
D
B
D
E
D
E
E
G
135
G
E
E
C
E
B
C
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
D
B
E
D
E
E
G
136
G
E
E
C
I
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
I
D
E
E
G
137
G
E
E
B
I
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
I
B
E
E
G
138
G
E
I
Q
I
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
I
Q
I
E
G
139
G
I
I
Q
I
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
I
Q
I
I
G
140
I
I
I
Q
I
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
M
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
Q
Q
Q
Q
U
U
Q
Q
Q
I
Q
I
I
I
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
0
G
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
1
G
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
2
G
O
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
3
G
O
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
4
G
O
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
5
G
O
O
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
6
G
E
O
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
7
G
E
O
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
8
G
E
O
O
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
9
G
E
K
O
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
10
G
E
K
O
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
11
G
E
K
O
O
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
12
G
E
K
C
O
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
13
G
E
E
C
O
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
14
G
E
E
C
O
O
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
15
G
E
E
C
K
O
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
16
G
E
E
Q
K
O
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
17
G
E
E
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
18
G
E
E
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
19
G
E
E
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
20
G
E
E
E
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
21
G
E
K
E
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
22
G
E
K
E
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
23
G
E
K
E
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
24
G
E
K
E
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
25
G
E
K
E
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
26
G
E
K
E
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
27
G
E
K
E
E
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
28
G
E
K
C
E
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
29
G
E
E
C
E
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
30
G
E
E
C
E
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
31
G
E
E
C
E
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
32
G
E
E
C
E
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
Q
Q
33
G
E
E
C
E
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
Q
Q
34
G
E
E
C
E
E
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
Q
Q
35
G
E
E
C
K
E
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
Q
Q
36
G
E
E
Q
K
E
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
Q
Q
37
G
E
E
Q
K
E
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
Q
Q
38
G
E
E
Q
K
E
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
Q
Q
39
G
E
E
Q
K
E
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
B
Q
Q
40
G
E
E
Q
K
E
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
K
C
B
Q
41
G
E
E
Q
K
E
E
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
K
G
42
G
E
E
Q
K
C
E
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
G
43
G
E
E
Q
C
C
E
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
G
44
G
E
E
E
C
C
E
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
K
E
G
45
G
E
K
E
C
C
E
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
K
E
G
46
G
E
K
E
C
C
E
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
K
D
E
E
G
47
G
E
K
E
C
C
E
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
K
Q
E
E
G
48
G
E
K
E
C
C
E
E
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
K
D
D
Q
E
E
G
49
G
E
K
E
C
C
K
E
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
K
Q
D
E
E
E
G
50
G
E
K
E
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
K
D
D
Q
Q
E
K
E
G
51
G
E
K
E
Q
Q
K
E
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
K
Q
D
D
Q
E
K
E
G
52
G
E
K
E
Q
Q
K
E
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
Q
C
C
Q
Q
C
C
Q
A
K
D
D
Q
Q
D
E
E
K
E
G
53
G
E
K
E
Q
Q
K
E
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
Q
C
C
Q
Q
C
C
Q
A
D
K
Q
D
D
Q
Q
E
D
K
E
G
54
G
E
K
E
Q
Q
K
E
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
Q
C
C
Q
Q
C
C
Q
A
K
D
D
Q
Q
D
D
Q
E
D
E
E
G
55
G
E
K
E
Q
Q
K
E
E
C
C
C
Q
Q
Q
Q
C
C
O
Q
C
C
Q
Q
C
C
Q
A
D
K
Q
D
D
Q
Q
D
E
E
D
E
E
G
56
G
E
K
E
Q
Q
K
C
E
C
C
Q
Q
Q
Q
C
C
C
O
O
C
Q
Q
C
C
Q
A
K
D
D
Q
Q
D
D
Q
Q
E
K
D
E
E
G
57
G
E
K
E
Q
Q
C
C
E
C
Q
Q
Q
Q
C
C
C
C
K
O
Q
Q
C
C
Q
A
D
K
Q
D
D
Q
Q
D
D
Q
E
K
Q
E
E
G
58
G
E
K
E
Q
C
C
C
E
Q
Q
Q
Q
C
C
C
C
Q
K
O
Q
C
C
Q
A
K
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
E
E
G
59
G
E
K
E
E
C
C
C
E
Q
Q
Q
C
C
C
C
Q
Q
K
O
O
C
Q
A
D
K
Q
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
E
E
G
60
G
E
K
C
E
C
C
C
E
Q
Q
C
C
C
C
Q
Q
Q
K
C
O
Q
A
K
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
D
D
Q
E
E
G
61
G
E
E
C
E
C
C
C
E
Q
C
C
C
C
Q
Q
Q
Q
C
C
O
A
D
K
Q
D
D
Q
Q
D
D
Q
Q
D
E
E
D
D
E
E
E
G
62
G
E
E
C
E
C
C
C
E
E
C
C
C
Q
Q
Q
Q
C
C
C
W
W
D
D
Q
Q
D
D
Q
Q
D
D
Q
Q
E
K
D
D
E
K
E
G
63
G
E
E
C
E
C
C
C
K
E
C
C
Q
Q
Q
Q
C
C
C
B
W
W
B
D
D
Q
Q
D
D
Q
Q
D
D
Q
E
K
Q
D
E
K
E
G
64
G
E
E
C
E
C
C
Q
K
E
C
Q
Q
Q
Q
C
C
C
B
C
W
W
D
B
D
D
Q
Q
D
D
Q
Q
D
E
E
K
Q
Q
E
K
E
G
65
G
E
E
C
E
C
Q
Q
K
E
Q
Q
Q
Q
C
C
C
B
C
Q
W
W
Q
D
B
D
D
Q
Q
D
D
Q
Q
E
D
K
Q
Q
E
K
E
G
66
G
E
E
C
E
Q
Q
Q
K
E
Q
Q
Q
C
C
C
B
C
Q
Q
W
W
Q
Q
D
B
D
D
Q
Q
D
D
Q
E
D
D
Q
Q
E
K
E
G
67
G
E
E
C
E
Q
Q
Q
K
E
Q
Q
C
C
C
B
C
Q
Q
Q
W
W
Q
Q
Q
D
B
D
D
Q
Q
D
E
E
D
D
D
Q
E
K
E
G
68
G
E
E
C
E
Q
Q
Q
K
E
Q
C
C
C
B
C
Q
Q
Q
Q
W
W
Q
Q
Q
Q
D
B
D
D
Q
Q
E
K
D
D
D
E
E
K
E
G
69
G
E
E
C
E
Q
Q
Q
K
E
E
C
C
B
C
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
D
B
D
D
Q
E
K
Q
D
D
E
D
K
E
G
70
G
E
E
C
E
Q
Q
Q
K
C
E
C
B
C
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
D
B
D
E
E
K
Q
Q
D
E
D
E
E
G
71
G
E
E
C
E
Q
Q
Q
C
C
E
B
C
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
D
B
E
D
K
Q
Q
Q
E
D
E
E
G
72
G
E
E
C
E
Q
Q
C
C
C
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
D
D
Q
Q
Q
E
D
E
E
G
73
G
E
E
C
E
Q
C
C
C
B
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
B
D
D
Q
Q
E
D
E
E
G
74
G
E
E
C
E
E
C
C
B
C
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
D
B
D
D
Q
E
D
E
E
G
75
G
E
E
C
K
E
C
B
C
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
D
B
D
E
E
D
E
E
G
76
G
E
E
Q
K
E
B
C
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
D
B
E
K
D
E
E
G
77
G
E
E
Q
K
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
K
Q
E
E
G
78
G
E
E
Q
A
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
A
Q
E
E
G
79
G
E
E
A
C
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
D
A
E
E
G
80
G
E
U
U
Q
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
Q
U
U
E
G
81
G
I
U
U
Q
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
Q
U
U
I
G
82
I
I
U
U
Q
I
Q
Q
Q
Q
I
Q
Q
Q
Q
Q
Q
Q
Q
Q
W
W
Q
Q
Q
Q
Q
Q
Q
Q
Q
I
Q
Q
Q
Q
I
Q
U
U
I
I
1
.  .  .  .
n
1/1
1/3
1/7
t  = 0
t = 2n-2
1/1
1/1
w1
w3
w2
w1
w2
w3
1/7
1/15
w4
1/3
1/1
1/1
1/1
t = n-1
t  = 
-1 
n+n1
Fig. 2. Recursive-halving marking
Figure 2 (left) shows a space-time diagram for the marking.
At time t = 0, the leftmost cell C1 generates a set of signals
w1, w2, ..., wk, .., each propagating in the right direction at
1/(2k −1) speed, where k = 1, 2, 3, ..., . The 1/1-speed signal
w1 arrives at Cn at time t = n − 1. Then, the rightmost cell
Cn also emits an inﬁnite set of signals w1, w2, ..., wk, .., each
propagating in the left direction at 1/(2k − 1) speed, where
k = 1, 2, 3, ..., . The readers can ﬁnd that each crossing of
two signals, shown in Figure 2 (left), enables the marking at
middle points deﬁned by the recursive-halving. A ﬁnite state
realization for generating the inﬁnite set of signals above is a
well-known technique employed in Balzer [1], Gerken [2], and
Waksman [20] for the implementations of the optimum-time
synchronization algorithms on 1D arrays.
We have developed a simple implementation of the
recursive-halving marking on a 13-state, 314-rule cellular
automaton. In Figure 2 (middle and right) we present several
83
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization

snapshots for the marking on 42 and 71 cells, respectively. We
have:
Lemma 8 There exists a 1D 13-state, 314-rule cellular au-
tomaton that can print the recursive-halving marking in any
cellular space of length n in 2n − 2 steps.
An optimum-time complexity 2n − 2 needed for synchro-
nizing cellular space of length n in the classical WBG-type
(Waksman [20], Balzer [1], and Gerken [2]) FSSP algorithms
can be interpreted as follows: Let S be a cellular space of
length n = 2n1+1, where n1 ≥ 1. The ﬁrst center mark in S is
printed on cell Cn1+1 at time t1D−center = 3n1. Additional n1
steps are required for the markings thereafter, yielding a ﬁnal
synchronization at time t1D−opt = 3n1 + n1 = 4n1 = 2n − 2.
In the case n = 2n1, where n1 ≥ 1, the ﬁrst center mark
is printed simultaneously on cells Cn1 and Cn1+1 at time
t1D−center = 3n1 − 1. Additional n1 − 1 steps are required
for the marking thereafter, yielding the ﬁnal synchronization
at time t1D−opt = 3n1 − 1 + n1 − 1 = 4n1 − 2 = 2n − 2.
t1D−center =
3n1
|S| = 2n1 + 1,
3n1 − 1
|S| = 2n1.
(4)
Thus, additional tsync steps are required for the synchro-
nization for a cellular space with the recursive-halving marks:
tsync =
n1
|S| = 2n1 + 1,
n1 − 1
|S| = 2n1.
(5)
1
࡮࡮࡮
n
1/1
1/1
t = 0
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
G
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
࡮࡮࡮
 t = tsync
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
0
G
I
I
Q
I
Q
Q
Q
M2
Q
Q
Q
I
Q
I
I
G
1
G
I
I
Q
I
Q
Q
Q2 M2 C2
Q
Q
I
Q
I
I
G
2
G
I
I
Q
I
Q
Q2 Q2 M2 C2
C2
Q
I
Q
I
I
G
3
G
I
I
Q
I
Q2
L2
Q2 M2 C2
R2
C2
I
Q
I
I
G
4
G
I
I
Q
M2 A2
L2
Q2 M2 C2
R2
B2
M2
Q
I
I
G
5
G
I
I
Q2 M2
B2
Q2 Q2 M2 C2
C2
A2 M2 C2
I
I
G
6
G
I
M2 Q2 M2 C2 M2 Q2 M2 C2 M2 Q2 M2 C2 M2
I
G
7
G
M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2
G
8
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
0
G
U
U
U
U
Q
Q
U
U
Q
Q
Q
Q
Q
Q
M2 M2
Q
Q
Q
Q
Q
Q
U
U
Q
Q
U
U
U
U
G
1
G
U
U
U
U
Q
Q
U
U
Q
Q
Q
Q
Q
Q2 M2 M2 C2
Q
Q
Q
Q
Q
U
U
Q
Q
U
U
U
U
G
2
G
U
U
U
U
Q
Q
U
U
Q
Q
Q
Q
Q2 Q2 M2 M2 C2
C2
Q
Q
Q
Q
U
U
Q
Q
U
U
U
U
G
3
G
U
U
U
U
Q
Q
U
U
Q
Q
Q
Q2
L2
Q2 M2 M2 C2
R2
C2
Q
Q
Q
U
U
Q
Q
U
U
U
U
G
4
G
U
U
U
U
Q
Q
U
U
Q
Q
Q2
A2
L2
Q2 M2 M2 C2
R2
B2
C2
Q
Q
U
U
Q
Q
U
U
U
U
G
5
G
U
U
U
U
Q
Q
U
U
Q
Q2
L2
A2
Q2 Q2 M2 M2 C2
C2
B2
R2
C2
Q
U
U
Q
Q
U
U
U
U
G
6
G
U
U
U
U
Q
Q
U
U
Q2
A2
L2
L2
Q2 Q2 M2 M2 C2
C2
R2
R2
B2
C2
U
U
Q
Q
U
U
U
U
G
7
G
U
U
U
U
Q
Q
U
MM L2
A2
A2
L2
Q2 Q2 M2 M2 C2
C2
R2
B2
B2
R2 MM
U
Q
Q
U
U
U
U
G
8
G
U
U
U
U
Q
Q
M2 M2
L2
L2
A2
Q2 Q2 Q2 M2 M2 C2
C2
C2
B2
R2
R2
M2 M2
Q
Q
U
U
U
U
G
9
G
U
U
U
U
Q
Q2 M2 M2 C2
L2
L2
Q2
L2
Q2 M2 M2 C2
R2
C2
R2
R2
Q2 M2 M2 C2
Q
U
U
U
U
G
10
G
U
U
U
U
Q2 Q2 M2 M2 C2
C2
L2
Q2
L2
Q2 M2 M2 C2
R2
C2
R2
Q2 Q2 M2 M2 C2
C2
U
U
U
U
G
11
G
U
U
U
MM L2
Q2 M2 M2 C2
R2
C2
Q2
L2
Q2 M2 M2 C2
R2
C2
Q2
L2
Q2 M2 M2 C2
R2 MM
U
U
U
G
12
G
U
U
M2 M2
L2
Q2 M2 M2 C2
R2
M2 M2
L2
Q2 M2 M2 C2
R2
M2 M2
L2
Q2 M2 M2 C2
R2
M2 M2
U
U
G
13
G
U
MM M2 M2 C2
Q2 M2 M2 C2
Q2 M2 M2 C2
Q2 M2 M2 C2
Q2 M2 M2 C2
Q2 M2 M2 C2
Q2 M2 M2 MM
U
G
14
G
M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2 M2
G
15
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
Fig. 3. Synchronization based on recursive-halving
In this way, it can be easily seen that any cellular space
of length n with the recursive-halving marking initially with
a general on a center cell or two generals on adjacent center
cells can be synchronized in ⌈n/2⌉ − 1 optimum-steps.
Lemma 9 Any 1D cellular space S of length n with the
recursive-halving marking initially with a general(s) on a
center cell(s) in S can be synchronized in ⌈n/2⌉−1 optimum-
steps.
In Figure 3, we illustrate a space-time diagram for synchro-
nizing a cellular space with recursive-halving marking (left)
and some snapshots for the synchronization on 17 (middle)
and 32 (right) cells, respectively.
As was seen, the ﬁrst marking of center cell(s) plays
an important role. In order to use the marking scheme for
the design of multi-dimensional FSSP algorithms, we print a
special mark only on the ﬁrst center cell(s) of a given cellular
space, where the center cells thereafter will be marked with a
different symbol from the ﬁrst one.





















2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

2 # 3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

2
$ # 3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

2
$
3 # 3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

2
$
4
3 # 3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

2
4
$
3
3 # 3
3
3
3
3
3
3
3
3
3
3
3
3
3

2
$
$
3
4
3 # 3
3
3
3
3
3
3
3
3
3
3
3
3

2
$
$
4
3
3
3 # 3
3
3
3
3
3
3
3
3
3
3
3

2
$
3
$
3
3
4
3 # 3
3
3
3
3
3
3
3
3
3
3

2
$
3
$
3
4
3
3
3 # 3
3
3
3
3
3
3
3
3
3

2
$
3
$
4
3
3
3
4
3 # 3
3
3
3
3
3
3
3
3

2
$
3
4
$
3
3
4
3
3
3 # 3
3
3
3
3
3
3
3

2
$
4
3
$
3
4
3
3
3
4
3 # 3
3
3
3
3
3
3

2
4
$
3
$
4
3
3
3
4
3
3
3 # 3
3
3
3
3
3

2
$
$
3
3
$
3
3
4
3
3
3
4
3 # 3
3
3
3
3

2
$
$
3
3
$
3
4
3
3
3
4
3
3
3 # 3
3
3
3

2
$
$
3
3
$
4
3
3
3
4
3
3
3
4
3 # 3
3
3

2
$
$
3
3
4
$
3
3
4
3
3
3
4
3
3
3 # 3
3

2
$
$
3
4
3
$
3
4
3
3
3
4
3
3
3
4
3 # 3

2
$
$
4
3
3
$
4
3
3
3
4
3
3
3
4
3
3
3
2

2
$
3
$
3
3
3
$
3
3
4
3
3
3
4
3
3
3 # 2

2
$
3
$
3
3
3
$
3
4
3
3
3
4
3
3
3 # 4
2

2
$
3
$
3
3
3
$
4
3
3
3
4
3
3
3 # 3
$
2

2
$
3
$
3
3
3
4
$
3
3
4
3
3
3 # 4
3
$
2

2
$
3
$
3
3
4
3
$
3
4
3
3
3 # 3
3
4
$
2

2
$
3
$
3
4
3
3
$
4
3
3
3 # 4
3
3
$
4
2

2
$
3
$
4
3
3
3
3
$
3
3 # 3
3
4
3
$
$
2

2
$
3
4
$
3
3
3
3
$
3 # 4
3
3
3
4
$
$
2

2
$
4
3
$
3
3
3
3
$ # 3
3
4
3
3
$
3
$
2

2
4
$
3
$
3
3
3
3
2
2
3
3
3
4
3
$
3
$
2

2
$
$
3
$
3
3
3 # 2
2 # 3
3
3
4
$
3
$
2

2
$
$
3
$
3
3 # 4
2
2
4 # 3
3
$
4
3
$
2

2
$
$
3
$
3 # 3
$
2
2
$
3 # 3
$
3
4
$
2

2
$
$
3
$ # 4
3
$
2
2
$
3
4 # $
3
$
4
2

2
$
$
3
2
2
3
4
$
2
2
$
4
3
2
2
3
$
$
2

2
$
$ # 2
2 # $
4
2
2
4
$ # 2
2 # $
$
2

2
$
2
$
2
2
$
2
$
2
2
$
2
$
2
2
$
2
$
2

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
 Q State 
1: Q
Q
Q
Q
2: Q
Q
B0
Q
3: Q
Q
B1
Q
4: Q
Q
R0
R0
5: Q
Q
R1
Q
6: Q
Q
P0
A000
7: Q
Q
P1
A100
8: Q
Q
A000
A001
9: Q
Q
A001
A000
10: Q
Q
A100
A101
11: Q
Q
A101
A100
12: Q
Q
A010
R0
13: Q
Q
A110
Q
14: Q
Q
*
Q
15: B0 Q
Q
Q
16: B0 Q
B0
Q
17: B0 Q
R0
R0
18: B0 Q
P1
A100
19: B0 Q
A000
A001
20: B0 Q
A101
A100
21: B0 Q
A010
R0
22: B0 Q
A110
Q
23: B1 Q
Q
Q
24: B1 Q
B1
Q
25: B1 Q
R0
R0
26: B1 Q
R1
Q
27: B1 Q
P0
A000
28: B1 Q
A001
A000
29: B1 Q
A100
A101
30: R0 Q
Q
Q
31: R0 Q
B1
Q
32: R0 Q
P0
A000
33: R0 Q
A000
A001
34: R0 Q
A001
A000
35: R0 Q
A011
Q
36: R1 Q
Q
R1
37: R1 Q
B0
R1
38: R1 Q
B1
R1
39: P0 Q
Q
A010
40: P0 Q
B1
A010
41: P0 Q
R1
A010
42: P0 Q
*
P1
43: P1 Q
Q
A110
44: P1 Q
B0
A110
45: A000Q
Q
R1
46: A000Q
B0
R1
47: A001Q
R1
Q
48: A100Q
Q
Q
49: A100Q
B0
Q
50: A010Q
Q
A011
51: A010Q
B0
A011
52: A010Q
R1
A011
53: A010Q
*
P0
54: A011Q
Q
A010
55: A011Q
B1
A010
56: A011Q
R1
A010
57: A011Q
*
P1
58: A110Q
Q
A111
59: A110Q
B1
A111
60: A111Q
Q
A110
61: A111Q
B0
A110
 B0 State 
62: Q
B0 Q
B0
63: Q
B0 R0
R0
64: Q
B0 P0
B0
65: Q
B0 P1
B0
66: Q
B0 A001
P1
67: Q
B0 A100
P1
68: B1 B0 P0
B0
69: B1 B0 P1
B0
70: R1 B0 Q
R1
71: R1 B0 P0
R1
72: R1 B0 P1
R1
73: P0 B0 Q
B0
74: P0 B0 B1
B0
75: P0 B0 R0
R0
76: P0 B0 P0
P0
77: P0 B0 P1
P0
78: P0 B0 A100
P1
79: P0 B0 A011
B0
80: P1 B0 Q
B0
81: P1 B0 B1
B0
82: P1 B0 R0
R0
83: P1 B0 P0
P0
84: P1 B0 A100
P1
85: A001B0 P0
B0
86: A011B0 Q
P1
87: A110B0 Q
P1
88: A110B0 P0
P1
89: A110B0 P1
P1
 B1 State 
90: Q
B1 Q
B1
91: Q
B1 B0
B1
92: Q
B1 R0
Q
93: Q
B1 R1
B1
94: Q
B1 A000
P0
95: Q
B1 A101
P0
96: B0 B1 Q
B1
97: B0 B1 R0
Q
98: B0 B1 A000
P0
99: B0 B1 A101
P0
100: R0 B1 Q
B1
101: R0 B1 A000
P0
102: R1 B1 Q
Q
103: R1 B1 B0
Q
104: A010B1 Q
P0
105: A010B1 B0
P0
106: A010B1 R1
P0
107: A111B1 Q
P0
108: A111B1 B0
P0
 R0 State 
109: Q
R0 Q
Q
110: Q
R0 B1
Q
111: Q
R0 A111
Q
112: B0 R0 Q
B1
113: B1 R0 Q
B0
114: P0 R0 B1
B0
115: P1 R0 B1
B0
116: P1 R0 A111
B0
 R1 State 
117: Q
R1 Q
Q
118: Q
R1 B0
B1
119: Q
R1 B1
B0
120: B1 R1 Q
Q
121: B1 R1 P0
B0
122: B1 R1 P1
B0
123: A101R1 Q
Q
124: A101R1 P1
B0
 P0 State 
125: Q
P0 Q
P0
126: Q
P0 P0
P0
127: Q
P0 *
P0
128: B0 P0 B0
P0
129: B0 P0 P0
P0
130: B0 P0 *
P0
131: R1 P0 R0
P0
132: R1 P0 P0
P0
133: R1 P0 *
P0
134: P0 P0 Q
P0
135: P0 P0 B0
P0
136: P0 P0 R0
P0
137: P0 P0 P0
T
138: P0 P0 P1
T
139: P0 P0 A010
P0
140: P0 P0 *
T
141: P1 P0 P0
T
142: P1 P0 P1
T
143: P1 P0 *
T
144: A000P0 P0
P0
145: A000P0 A010
P0
146: A000P0 *
P0
147: *
P0 Q
P0
148: *
P0 B0
P0
149: *
P0 R0
P0
150: *
P0 P0
T
151: *
P0 P1
T
152: *
P0 A010
P0
 P1 State 
153: Q
P1 Q
P1
154: Q
P1 P1
P1
155: Q
P1 *
P1
156: B0 P1 B0
P1
157: B0 P1 P1
P1
158: B0 P1 *
P1
159: R1 P1 R0
P1
160: R1 P1 P1
P1
161: R1 P1 *
P1
162: P0 P1 P0
T
163: P0 P1 P1
T
164: P0 P1 *
T
165: P1 P1 Q
P1
166: P1 P1 B0
P1
167: P1 P1 R0
P1
168: P1 P1 P0
T
169: P1 P1 P1
T
170: P1 P1 A110
P1
171: P1 P1 *
T
172: A100P1 P1
P1
173: A100P1 A110
P1
174: A100P1 *
P1
 A000 State 
175: Q
A000Q
Q
176: Q
A000P0
B0
177: B1 A000Q
Q
178: B1 A000P0
B0
 A001 State 
179: Q
A001Q
Q
180: Q
A001B0
Q
181: B0 A001Q
Q
182: B0 A001B0
Q
 A100 State 
183: Q
A100Q
R1
184: Q
A100P1
R1
185: B0 A100Q
P1
186: B0 A100P1
P1
 A101 State 
187: Q
A101R1
Q
188: B1 A101R1
P0
 A010 State 
189: Q
A010Q
Q
190: Q
A010B1
Q
191: P0 A010Q
B0
192: P0 A010B1
B0
 A011 State 
193: Q
A011Q
Q
194: Q
A011B0
Q
195: B0 A011Q
Q
196: B0 A011B0
Q
 A110 State 
197: Q
A110Q
R0
198: Q
A110B0
P1
199: P1 A110Q
R0
200: P1 A110B0
P1
 A111 State 
201: R0 A111Q
Q
202: R0 A111B1
P0
Fig. 4. Waksman’s FSSP





















/
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
%
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
4
%
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
4
$
%
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
%
$
4
%
.
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
%
4
4
$
%
.
.
.
.
.
.
.
.
.
.
.
.
.

/
%
%
4
$
$
4
%
.
.
.
.
.
.
.
.
.
.
.
.

/
%
%
%
$
4
4
$
%
.
.
.
.
.
.
.
.
.
.
.

/
%
4
%
4
4
$
$
4
%
.
.
.
.
.
.
.
.
.
.

/
%
4
%
4
$
$
4
4
$
%
.
.
.
.
.
.
.
.
.

/
%
4
%
%
$
4
4
$
$
4
%
.
.
.
.
.
.
.
.

/
%
4
$
%
4
4
$
$
4
4
$
%
.
.
.
.
.
.
.

/
%
%
$
%
4
$
$
4
4
$
$
4
%
.
.
.
.
.
.

/
%
%
$
%
%
$
4
4
$
$
4
4
$
%
.
.
.
.
.

/
%
%
$
4
%
4
4
$
$
4
4
$
$
4
%
.
.
.
.

/
%
%
4
4
%
4
$
$
4
4
$
$
4
4
$
%
.
.
.

/
%
%
4
4
%
%
$
4
4
$
$
4
4
$
$
4
%
.
.

/
%
%
4
4
$
%
4
4
$
$
4
4
$
$
4
4
$
%
.

/
%
%
4
$
$
%
4
$
$
4
4
$
$
4
4
$
$
4
/

/
%
%
%
$
$
%
%
$
4
4
$
$
4
4
$
$
4
3
/

/
%
4
%
$
$
4
%
4
4
$
$
4
4
$
$
4
3
3
/

/
%
4
%
$
4
4
%
4
$
$
4
4
$
$
4
3
.
3
/

/
%
4
%
4
4
4
%
%
$
4
4
$
$
4
3
#
.
3
/

/
%
4
%
4
4
4
$
%
4
4
$
$
4
3
.
#
3
3
/

/
%
4
%
4
4
$
$
%
4
$
$
4
3
#
.
.
3
3
/

/
%
4
%
4
$
$
$
%
%
$
4
3
.
#
#
.
3
3
/

/
%
4
%
%
$
$
$
4
%
4
3
#
.
.
#
3
3
3
/

/
%
4
$
%
$
$
4
4
%
3
.
#
#
.
.
3
.
3
/

/
%
%
$
%
$
4
4
4
/
/
.
.
#
#
.
3
.
3
/

/
%
%
$
%
4
4
4
3
/
/
%
.
.
#
3
3
.
3
/

/
%
%
$
%
4
4
3
3
/
/
%
%
.
.
3
#
.
3
/

/
%
%
$
%
4
3
.
3
/
/
%
4
%
.
3
#
3
3
/

/
%
%
$
%
3
#
.
3
/
/
%
4
$
%
3
#
3
3
/

/
%
%
$
/
/
#
3
3
/
/
%
%
$
/
/
#
3
3
/

/
%
%
#
/
/
$
3
3
/
/
%
%
#
/
/
$
3
3
/

/
%
/
3
/
/
%
/
3
/
/
%
/
3
/
/
%
/
3
/

/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/

(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
L
Right State
L A B C M Q R *
Left State
L L L
L
L
A A
Q
B
R Q
C C C
R Q C
M
M C C
C M C
M
Q L L
L
R A
B A Q
*
A
Right State
L A B C M Q R *
Left State
L
L
L
A A A
A
B C C
R C
C C C
Q C
M B B
B
Q A A
Q A
R
L
L
*
C
Right State
L A B C M Q R *
Left State
L
L
L
A
B R
C R
M C
C R M C R
M C
M C L
C M M C
Q
R B
C B
M C
*
M
Right State
L A B C M Q R *
Left State
L M M
M
A
M M M
M
B
M
M M
C
M M M M
M M M M M F M
F
Q
M M M
M
R M
M
M M
* M M M M F M
F
B
Right State
L A B C M Q R *
Left State
L
A
B R Q B B A Q R
C R Q B B A Q R
M
L
C
C
Q
R
Q B B A Q
*
Q
Right State
L A B C M Q R *
Left State
L Q Q
Q Q
A Q Q
Q
B
R M R
C M M
M M R
M
M
Q A L
Q L
R A L
Q L
*
R
Right State
L A B C M Q R *
Left State
L
A
B
R Q Q R
C C
C R Q Q R
M B C
M C
Q A L
Q L
R B
B R Q Q R
*
M M R
Fig. 5. Balzer’s FSSP
B. Waksman’s 16-state Algorithm
Waksman [20] proposed a 16-state ﬁring squad synchro-
nization algorithm. Umeo, Hisaoka, and Sogabe [13] corrected
all errors in Waksman’s original transition table. In Figure 4,
we give a snapshot of the synchronization processes on 20 cell
and a list of transition rules for Waksman’s algorithm. The list
is a revised version presented in Umeo, Hisaoka, and Sogabe
[13]. The state-change complexity of the algorithm is O(n2).
C. Balzer’s Eight-state Algorithm
Balzer [1] constructed an eight-state, 182-rule synchro-
nization algorithm and the structure of which is completely
identical to that of Waksman [20]. In Figure 5, we give
84
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization


4KIJV5VCVG
  ? @  = 
.GHV5VCVG
 
   
 ?
?
? 
?  
  
=
@ @ @
@ = 
 
 
= 


@
4KIJV5VCVG
  ? @  = 
.GHV5VCVG
  @
@ = 
 ? @
@

?  
@ @ =
@  @ @ @ = 
 
=

 
4KIJV5VCVG
  ? @  = 
.GHV5VCVG
 @
@  =
 
? @
@  =
@
@  =
  
 
(
(
=
  
 
(

4KIJV5VCVG
  ? @  = 
.GHV5VCVG
 


 ? (
?
? (
?
@


 

=  

 

?
4KIJV5VCVG
  ? @  = 
.GHV5VCVG

 ? ?
?

?
@  
?


= ? ?
?


=
4KIJV5VCVG
  ? @  = 
.GHV5VCVG
 =
=
=
=
 
?  
 
 
 
@ @
=
=
 @
=
=
=
=

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
0
>
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
1
>
]
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
2
>
]
>
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
3
>
]
^
]
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
4
>
]
^
/
>
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
5
>
]
>
^
^
]
/
/
/
/
/
/
/
/
/
/
/
/
/
/
6
>
]
>
^
^
/
>
/
/
/
/
/
/
/
/
/
/
/
/
/
7
>
]
>
^
/
^
^
]
/
/
/
/
/
/
/
/
/
/
/
/
8
>
]
>
]
^
^
^
/
>
/
/
/
/
/
/
/
/
/
/
/
9
>
]
^
]
^
^
/
^
^
]
/
/
/
/
/
/
/
/
/
/
10
>
]
^
]
^
/
^
^
^
/
>
/
/
/
/
/
/
/
/
/
11
>
]
^
]
>
^
^
^
/
^
^
]
/
/
/
/
/
/
/
/
12
>
]
^
/
>
^
^
/
^
^
^
/
>
/
/
/
/
/
/
/
13
>
]
>
^
>
^
/
^
^
^
/
^
^
]
/
/
/
/
/
/
14
>
]
>
^
>
]
^
^
^
/
^
^
^
/
>
/
/
/
/
/
15
>
]
>
^
^
]
^
^
/
^
^
^
/
^
^
]
/
/
/
/
16
>
]
>
^
^
]
^
/
^
^
^
/
^
^
^
/
>
/
/
/
17
>
]
>
^
^
]
>
^
^
^
/
^
^
^
/
^
^
]
/
/
18
>
]
>
^
^
/
>
^
^
/
^
^
^
/
^
^
^
/
>
/
19
>
]
>
^
/
^
>
^
/
^
^
^
/
^
^
^
/
^
^
<
20
>
]
>
]
^
^
>
]
^
^
^
/
^
^
^
/
^
^
[
<
21
>
]
^
]
^
^
^
]
^
^
/
^
^
^
/
^
^
<
[
<
22
>
]
^
]
^
^
^
]
^
/
^
^
^
/
^
^
[
/
[
<
23
>
]
^
]
^
^
^
]
>
^
^
^
/
^
^
<
^
/
[
<
24
>
]
^
]
^
^
^
/
>
^
^
/
^
^
[
/
/
<
[
<
25
>
]
^
]
^
^
/
^
>
^
/
^
^
<
^
/
/
<
[
<
26
>
]
^
]
^
/
^
^
>
]
^
^
[
/
/
^
/
<
[
<
27
>
]
^
]
>
^
^
^
^
]
^
<
^
/
/
/
[
<
[
<
28
>
]
^
/
>
^
^
^
^
]
[
/
/
^
/
/
[
/
[
<
29
>
]
>
^
>
^
^
^
^
<
>
/
/
/
^
/
[
/
[
<
30
>
]
>
^
>
^
^
^
[
<
>
]
/
/
/
<
[
/
[
<
31
>
]
>
^
>
^
^
<
[
<
>
]
>
/
/
<
^
/
[
<
32
>
]
>
^
>
^
[
/
[
<
>
]
^
]
/
<
/
<
[
<
33
>
]
>
^
>
<
^
/
[
<
>
]
^
/
>
<
/
<
[
<
34
>
]
>
^
[
]
/
<
[
<
>
]
>
^
[
]
/
<
[
<
35
>
]
>
<
[
]
>
<
[
<
>
]
>
<
[
]
>
<
[
<
36
>
]
[
]
[
]
[
]
[
<
>
]
[
]
[
]
[
]
[
<
37
>
<
>
<
>
<
>
<
>
<
>
<
>
<
>
<
>
<
>
<
38
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
Fig. 6. Gerken’s FSSP
a snapshot of the algorithm and a list of transition rules
for Balzer’s algorithm. The state-change complexity of the
algorithm is O(n2).
D. Gerken’s Seven-state Algorithm
Gerken [2] reduced the number of states realizing Balzer’s
algorithm and constructed a seven-state, 118-rule synchroniza-
tion algorithm. In Figure 6, we give a list of the transition rules
for Gerken’s algorithm and its snapshots. The state-change
complexity of the algorithm is O(n2).
E. An Optimum-Time 2D FSSP Algorithm A
We assume that an initial general G is on the north-west
corner cell C1,1 of a given array of size m×n. The algorithm
consists of three phases: a marking start phase for 2D arrays,
pre-synchronization phase and a ﬁnal synchronization phase.
An overview of the 2D synchronization algorithm A is as
follows:
Step 1. Start the recursive-halving marking for cells on each
row and column, ﬁnd a center cell(s) of the 2D array, and
generate a new general(s) on the center cell(s). Note that a
crossing(s) of the center column(s) with the center row(s) is a
center cell(s) of the array.
Step 2. Pre-synchronize the center column(s) using Lemma
6, which is initiated by the general in step 1. Every cell(s) on
the center column(s) acts as a general at the next Step 3.
Step 3. Synchronize each row using Lemma 6, initiated
by the general generated in Step 2. This yields the ﬁnal
synchronization of the array.
Thus, we have:
Theorem 10 The synchronization algorithm A can synchro-
nize any m × n rectangular array in optimum m + n +
max(m, n) − 3 steps.
Theorem 11 There exists an optimum-time synchronization
algorithm that can synchronize any three-dimensional array of
size m × n × ℓ with a general at C1,1,1 in optimum m + n +
ℓ + max(m, n, ℓ) − 4 steps.
Theorem 12 There exists an optimum-time synchronization
algorithm that can synchronize any kD array of size n1 ×
n2 × ... × nk with a general at C1,1,...,1 in optimum n1 +
n2+, ..., +nk + max(n1, n2, ..., nk) − k − 1 steps.
F. A Comparison of Quantitative Aspects of Optimum-Time
Synchronization Algorithms
Here, we present a table based on a quantitative comparison
of optimum-time synchronization algorithms and their tran-
sition tables discussed above with respect to the number of
internal states of each ﬁnite state automaton, the number of
transition rules realizing the synchronization, and the number
of state-changes on the array.
TABLE I.
COMPARISON OF FSSP ALGORITHMS
Algorithm
# of states
# of transition
State change
rules
complexity
Goto [3]
many thousands
—
Θ(n log n)
Waksman [20]
16
202
O(n2)
Balzer [1]
8
165
O(n2)
Gerken I [2]
7
105
O(n2)
Mazoyer [5]
6
119
O(n2)
Gerken II [2]
155
2371
Θ(n log n)
G. O(1)-bit vs. 1-bit Communication FSSP
In the study of cellular automata, the amount of bit-
information exchanged at one step between neighboring cells
has been assumed to be O(1)-bit data. An O(1)-bit CA is
a conventional CA in which the number of communication
bits exchanged at one step between neighboring cells is as-
sumed to be O(1)-bit, however, such inter-cell bit-information
exchange has been hidden behind the deﬁnition of conventional
automata-theoretic ﬁnite state description. On the other hand,
the 1-bit inter-cell communication model is a new CA in which
inter-cell communication is restricted to 1-bit data, referred
to as the 1-bit CA model. The number of internal states of
the 1-bit CA is assumed to be ﬁnite in the usual sense. The
next state of each cell is determined by the present state of
that cell and two binary 1-bit inputs from its left and right
neighbor cells. Thus, the 1-bit CA can be thought of as one
of the most powerless and the simplest models in a variety
of CA’s. A precise deﬁnition of the 1-bit CA can be found
in Umeo and Yanagihara [17]. Umeo and Yanagihara [17]
constructed an optimum-time synchronization algorithm on a
1-bit CA model, based on Waksman’s algorithm. In Figure 7,
we show a conﬁguration of the 1-bit synchronization algorithm
on 15 cells. Each cell has 78 internal states and 208 transition
rules. The small black triangles ▶ and ◀ indicate a 1-bit signal
transfer in the right or left direction, respectively, between
neighboring cells. A symbol in a cell shows internal state of
the cell.
[Theorem 13] There exists a 1-bit CA that can synchronize n
cells in optimum 2n − 2 steps.
85
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
0
PW
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
QW
1
PW
AR’
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
QW
2
PW
BR01
AR’
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
QW
3
PW
BR00
sub
AR’
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
QW
4
PW
BR0S
odd
sub
AR’
Q
Q
Q
Q
Q
Q
Q
Q
Q
QW
5
PW
QR0S
BR11
QRB
sub
AR’
Q
Q
Q
Q
Q
Q
Q
Q
QW
6
PW
BR0u1
BR10
QRC
odd
sub
AR’
Q
Q
Q
Q
Q
Q
Q
QW
7
PW
BR0u0
BR1S
QRD
QRC
QRB
sub
AR’
Q
Q
Q
Q
Q
Q
QW
8
PW
BR0uS
QR10
BR01
QRD
QRC
odd
sub
AR’
Q
Q
Q
Q
Q
QW
9
PW
BR0v0
QR11
BR00
QRA
QRD
QRC
QRB
sub
AR’
Q
Q
Q
Q
QW
10
PW
BR0v1
QR10
BR0S
QRB
QRA
QRD
QRC
odd
sub
AR’
Q
Q
Q
QW
11
PW
BR0v0
RL1
QR00
BR11
QRB
QRA
QRD
QRC
QRB
sub
AR’
Q
Q
QW
12
PW
BR0vS
QR1S
QR01
BR10
QRC
QRB
QRA
QRD
QRC
odd
sub
AR’
Q
QW
13
PW
QR0S
BR1u1
QR00
BR1S
QRD
QRC
QRB
QRA
QRD
QRC
QRB
sub
AR’
QW
14
PW
BR0u1
BR1u0
RL0
QR10
BR01
QRD
QRC
QRB
QRA
QRD
QRC
odd
sub
PW
15
PW
BR0u0
BR1uS
QR0S
QR11
BR00
QRA
QRD
QRC
QRB
QRA
QRD
QRC
AL0
PW
16
PW
BR0u1
BR1v0
QR01
QR10
BR0S
QRB
QRA
QRD
QRC
QRB
QRA
AL
BL01
PW
17
PW
BR0u0
BR1v1
QR00
RL1
QR00
BR11
QRB
QRA
QRD
QRC
AL
QLA
BL00
PW
18
PW
BR0u1
BR1v0
RL0
QR1S
QR01
BR10
QRC
QRB
QRA
AL
QLA
QLB
BL0S
PW
19
PW
BR0u0
BR1vS
QR0S
QR11
QR00
BR1S
QRD
QRC
AL
QLA
QLB
BL11
QL0S
PW
20
PW
BR0uS
QR10
BR0u1
QR10
RL0
QR10
BR01
AL
QLA
QLB
QLC
BL10
BL0u1
PW
21
PW
BR0v0
QR11
BR0u0
RL1
QR0S
QR11
P1s
QLA
QLB
QLC
QLD
BL1S
BL0u0
PW
22
PW
BR0v1
QR10
BR0uS
QR1S
QR01
AL
P1
AR
QLC
QLD
BL01
QL10
BL0uS
PW
23
PW
BR0v0
QR11
BR0v0
QR11
AL
QLA
P1
QRA
AR
QLA
BL00
QL11
BL0v0
PW
24
PW
BR0v1
QR10
BR0v1
AL
QLA
BL01
P1
BR01
QRA
AR
BL0S
QL10
BL0v1
PW
25
PW
BR0v0
QR11
P1d
PA
QLB
BL00
P1
BR00
QRB
PA
P1d
RR1
BL0v0
PW
26
PW
BR0v1
AL
P1
P1
AR
BL0S
P1
BR0S
AL
P1
P1
AR
BL0vS
PW
27
PW
P1
PA
P1
P1
PA
P1
P1
P1
PA
P1
P1
PA
P1
PW
28
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
Fig. 7. FSSP on 1-bit CA
IV.
CONCLUSION AND FUTURE WORK
In the present paper, we have given a survey on recent
developments in FSSP algorithms for one-dimensional cellular
arrays. We focus our attention on a new class of FSSP
algorithms based on recursive-halving. It is shown that the
recursive-halving marking has been used in the design of many
optimum-time FSSP algorithms and can be generalized and ex-
panded to multi-dimensional arrays. Several multi-dimensional
generalizations of the algorithms are also given. As a future
work an FSSP for growing multi-dimensional arrays would be
interesting.
REFERENCES
[1]
R. Balzer: An 8-state minimal time solution to the ﬁring squad synchro-
nization problem. Information and Control, vol. 10, pp. 22-42, 1967.
[2]
Hans-D. Gerken: ¨Uber Synchronisations - Probleme bei Zellularauto-
maten. Diplomarbeit, Institut f¨ur Theoretische Informatik, Technische
Universit¨at Braunschweig, pp. 50, 1987.
[3]
E. Goto: A minimal time solution of the ﬁring squad problem. Dittoed
course notes for Applied Mathematics 298, Harvard University, pp. 52-
59, with an illustration in color, 1962.
[4]
J. Mazoyer: An overview of the ﬁring squad synchronization problem.
Lecture Notes on Computer Science, Springer-Verlag, vol. 316, pp. 82-
93, 1986.
[5]
J. Mazoyer: A six-state minimal time solution to the ﬁring squad
synchronization problem. Theoretical Computer Science, vol. 50, pp.
183-238, 1987.
[6]
M. Minsky: Computation: Finite and inﬁnite machines. Prentice Hall,
pp. 28-29, 1967.
[7]
E. F. Moore: The ﬁring squad synchronization problem. in Sequential
Machines, Selected Papers (E. F. Moore, ed.), Addison-Wesley, Reading
MA., pp. 213-214, 1964.
[8]
F. R. Moore and G. G. Langdon: A generalized ﬁring squad problem.
Information and Control, 12, pp. 212-220, 1968.
[9]
P. Sanders: Massively parallel search for transition-tables of polyau-
tomata. In Proc. of the VI International Workshop on Parallel Process-
ing by Cellular Automata and Arrays, (C. Jesshope, V. Jossifov and W.
Wilhelmi (editors)), Akademie, 99-108, 1994.
[10]
A. Settle and J. Simon: Smaller solutions for the ﬁring squad. Theoret-
ical Computer Science, 276, 83-109, 2002.
[11]
H. Szwerinski: Time-optimum solution of the ﬁring squad synchro-
nization problem for n-dimensional rectangles with the general at an
arbitrary position. Theoretical Computer Science, vol. 19, pp. 305-320,
1982.
[12]
H. Umeo: Firing squad synchronization problem in cellular automata.
In Encyclopedia of Complexity and System Science, R. A. Meyers (Ed.),
Springer, Vol.4, pp.3537-3574, 2009.
[13]
H. Umeo, M. Hisaoka, and T. Sogabe: A survey on optimum-time
ﬁring squad synchronization algorithms for one-dimensional cellular
automata. Int. J. of Unconventional Computing, vol. 1, pp.403-426,
2005.
[14]
H. Umeo, N. Kamikawa, and J.-B. Yun`es: A family of smallest
symmetrical four-state ﬁring squad synchronization protocols for ring
arrays. Parallel Processing Letters, Vol.19, No.2, pp.299-313, 2009.
[15]
H. Umeo, N. Kamikawa, K. Nishioka, and S. Akiguchi: Generalized
Firing Squad Synchronization Protocols for One-Dimensional Cellular
Automata - A Survey. Acta Physica Polonica B, Proceedings Supple-
ment. Vol.3, pp.267-289, 2010.
[16]
H. Umeo, K. Kubo, and K. Nishide: A class of time-optimum FSSP
algorithms for multi-dimensional cellular arrays. Communications in
Nonlinear Science and Numerical Simulation, 21, pp.200-209, 2015.
[17]
H. Umeo and T. Yanagihara: Smallest implementations of optimum-
time ﬁring squad synchronization algorithms for one-bit-communication
cellular automata. Proc. of the 2011 International Conference on
Parallel Computing and Technology, PaCT 2011, LNCS 6873, pp. 210-
223, 2011.
[18]
R. Vollmar: On Cellular Automata with a Finite Number of State
Change. Computing, Supplementum, vol. 3, pp. 181-191, 1981.
[19]
R. Vollmar: Some remarks about the “Efﬁciency” of polyautomata.
International Journal of Theoretical Physics, vol. 21, no. 12, pp. 1007-
1015, 1982.
[20]
A. Waksman: An optimum solution to the ﬁring squad synchronization
problem. Information and Control, vol. 9, pp. 66-78, 1966.
[21]
J. B. Yun`es: A 4-states algebraic solution to linear cellular automata
synchronization. Information Processing Letters, Vol. 19, Issue 2, pp.71-
75, 2008.
86
Copyright (c) IARIA, 2016.     ISBN:  978-1-61208-460-2
CLOUD COMPUTING 2016 : The Seventh International Conference on Cloud Computing, GRIDs, and Virtualization

