Neuro-PID Control of Speed and Torque of Electric Vehicle
Sigeru Omatu, Michifumi Yoshioka, Toshihisa Kosaka, Hidekazu Yanagimoto
Department of Computer Science and Intelligent Systems
Osaka Prefecture University
Sakai, Osaka Japan
Email: omatu, yoshioka, kosaka, hidekazu@cs.osakafu-u.ac.jp
Jamal Ahamad Dargham
Department of Computer Engineering
University of Malaysia Sabah
Kota Kinabalu, Malaysia
Email: jamalad@ums.edu.my
Abstract—In this paper we consider the neuro-control
method and its application to control problems of an electric
vehicle. The neuro-control methods adopted here are based on
proportional-plus-integral-plus-derivative (PID) control, which
has been adopted to solve process control or intelligent control
problems. In Japan about eighty four per cent of the process
industries have used the PID control. After deriving the self-
tuning PID control scheme (neuro-PID) using the learning
ability of the neural network, we will show the control results
by using the speed and torque control of an electric vehicle.
Keywords-neuro-PID; electric vehicle control; speed control;
torque controlcomponent;
I. INTRODUCTION
In applying conventional control theory to practical prob-
lems, we have to model the plant or system. The modeling
is done by using a set of linear differential or difference
equations, in which unknown parameters are included. But
the range of applicability is not so wide to cover real control
problems. In real world, the plant and its environment
are too complex to describe them by such linear models.
For example, in a robotic control system, it may have
many sensors providing inputs that cannot necessarily be
interpreted as state variables. Furthermore, the models of
the system may be unknown and interact with unknown
changing environment.
Therefore, it is necessary to adopt new methods of control.
They may not be so rigorous mathematically so that it can
work in a wide range of domains and under more dynamic
and more realistic conditions. One of the powerful methods
is neuro-control based on the neural networks since the
neural networks have preferable properties to overcome the
difﬁcult problems stated above. Some of them are 1) learning
by experience (training), i.e., human-like learning behavior,
2) generalization ability, i.e., mapping ability of similar
inputs to similar outputs, 3) nonlinear mapping ability, 4)
parallel distributed processing, allowing fast computation for
large scale systems, 5) robustness for noise and environmen-
tal change, 6) self-organizing property, etc. These properties
make neuro-control suitable for applications to real control
problems.
In this paper, we will adopt the proportional-plus-integral-
plus-derivative (PID) control and tune the PID gains based
on neural networks, which will be called as neuro-PID
control. After deriving the neuro-PID controller, we will
show the real application to torque control and speed control
problems of an electrical vehicle [1].
II. HISTORICAL REVIEW OF NEURO-CONTROL
The ﬁrst neuro-control was discussed by Widrow and
Smith [2] who used ADALINE to stabilize and control
the pole balancing act. Other early research on neuro-
control could also found in Waltz and Fu [3], Michie and
Chambers [4], and Barto et al. [5].
Neuro-control research has begun sharp increase around
1987 when the ﬁrst IEEE Conference on Neural Networks
has held in San Diego. These papers have demonstrated that
neuro-control methods can be applied successfully to control
unknown nonlinear systems while conventional control ap-
proaches based on linear dynamical system theory could not
solve such control problems. Many neuro-control structures
were also proposed. Typical neuro-control methods are 1)
feedback error learning by Kawato et al. [6], 2) neuro-
internal model control by Hunt and Sbarbaro [7], 3) neuro-
predictive control by Willia et al. [8], 4) Forward and
inverse modelling by Jordan et al. [9]), 5) generalized and
specialized learning by Psaltis et al. [10], 6) Self-tuning
neuro-control by Omatu [11]. More information on neuro-
control could be obtained by the books by D.A. White and
D.A. Sofge [12], W. T. Miller III et al. [13], S. Omatu et
al. [14], P.M. Mills et al. [15], and N.W. NG [16].
III. ERROR BACK-PROPAGATION ALGORITHM
The error back-propagation (BP) algorithm has been well-
known since it was proposed by Rumerhart et al. [17] in
1985. As a neuro- PID control being described in detail later
is derived based on the similar method of BP algorithm, we
will explain the derivation of the BP algorithm in compact
way.
The form of a neural network described by Fig. 1 is called
a layered neural network since they have more than three
layers which are called input layer, hidden layer, and output
layer. Outputs of neurons in the input layer are the input
data which should be processed. We assume that numbers
of neurons in the input, hidden, and output layers are I, J,
82
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

+
−
Desired 
signal
Output
 signal
Error signal
∆w:Updated
       values        
Input layer
Hidden layer
Output layer
i
j
k
0
0 -1
-1
Oi
Oj
Ok
dk
ek
wji
wkj
θk
θj
1
I
1
J
K
1
+
−
+
−
Figure 1.
Structure of a layered neural network
and K, respectively. In Fig. 1, large circles denote neurons
and each neuron, for example, neuron j can be described by
the following nonlinear input-output relation:
Oj
=
f(netj),
(1)
netj
=
I
X
i=1
wjiOi − θj,
(2)
f(x)
=
1
1 + exp(−x) = sigmoid(x).
(3)
where Oj denotes the output of neuron j, wji denotes the
connection weight from a neuron i to a neuron j, θj is a
threshold value of neuron j.
Note that the output of a neuron is limited within 0 to
1 since f(x) ∈ [0, 1]. If we assume that O0 = −1 and
wj0 = θj, then we can rewrite netj as follows:
netj =
I
X
i=0
wjiOi.
(4)
From now on, we assume that threshold θj has been
included in the weighting function and use the expression
Eq.(4) instead of Eq.(2).
When the input data {Oi, i = 0, 1, . . . , I}, connection
weights wji from a neuron i in the input layer to a neuron j
in the hidden layer where {j = 1, 2, . . . , J, i = 0, 1, . . . , I},
and connection weights wkj from a neuron j in the hidden
layer to a neuron k in the output layer where {k
=
1, 2, . . . , K, j = 0, 1, . . . , J}, we can get the output values
of the neural network by the following equation:
Ok
=
f(netk),
netk
=
J
X
j=0
wkjOj.
Then we will compare the output {Ok} with the desired
value {dk} for each k, k = 1, 2, . . . , K and if there are
large discrepances, we will correct the weighting functions,
wji and wkj such that the following error function E will
be decreased.
FFC
FBC
Plant
FB element
y
u
e
d
Specification
Input
Output
Error
 +
−
 +
Figure 2.
General structure of control system
E = 1
2
K
X
k=1
e2
k,
ek = dk − Ok.
Using the gradient search, the minimizing cost of E is
given by the following relation(the error back-propagation
algorithm):
∆wkj = wkj(new) − wkj(old) = ηδkOj
δk = ekOk(1 − Ok).
∆wji = wji(new) − wji(old) = ηδjOi
δj
=
K
X
k=1
δkwkjOj(1 − Oj)
k
=
1, 2, . . . , K,
j = 0, 1, . . . , N.
Since the output Ok is limited within [0,1], we should
modify the form when we need the value of (-∞, ∞), for
example, f(x) = x, f(x) = A( 1
2 − sigmoid(x)), etc.
Furthermore, to speed up the convergence of the gradient
algorithm, we use an additional term as follows:
∆wkj(new)
=
ηδkOj + α∆wkj(old)
(5)
j
=
0, 1, . . . , N, k = 1, 2, . . . , K
∆wji(new)
=
ηδjOi + α∆wji(old)
(6)
i
=
0, 1, . . . , M, j = 1, 2, . . . , N
where the ﬁrst term and second terms of (5) and (6) are
called the learning term and the momentum terms, respec-
tively and η and α are called learning rate and momentum
rate, respectively.
IV. FEEDBACK CONTROL SYSTEM ALGORITHM
We will consider the neuro-control scheme. The general
control system can be described in Fig. 2 where FFC
and FFB stand for feed-forward controller and feedback
controller, respectively and FB is feedback. The aim of
the controller is to ﬁnd the suitable plant input u in order
to follow the plant output y to the plant speciﬁcation by
adjusting the FFB and FFD.
83
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Neural network
Plant
Input
Output
Reference signal
(a)
Neural network
Plant
Input
Output
Reference signal
(b)
r
u
y
Conventional
Controller
+
Plant
Input
Reference signal
Neural network
(c)
Output
Conventional
Controller
r
r
u
u
y
y
u 
u
1
2
Figure 3.
Three types of neuro-control system
s
Ti
1
1
s
Td
ck
+
+
−
Plant
error
input
output
reference
s = derivative action,
1 = integral action
s
proportional gain
derivative time, 
integral time, 
=
=
=
c
d
i
k
T
T
e(t)
u(t)
y(t)
d(t)
Figure 4.
PID control system
The neuro-control is to determine the control input by
using neural networks. Three types of neuro-controllers were
proposed [14], [18]. They are 1) series type, 2) parallel type,
and 3) self-tuning type as shown in Fig. 3.
Among them, we consider the third type. As a conven-
tional controller we adopt the PID controller as shown in
Fig. 4 and ﬁnd the PID gains by using the BP algorithms.
A. Series Type Neuro-Control
This is to use the neural network directly such that the
plant output will approach to reference signals as much as
possible. The basic conﬁguration is shown in Fig. 5 where
(a) is the original structure, (b) is the series neuro-controller
with an emulator, and (c) is the inverse dynamical structure.
More detail algorithms have been explained in [19], [20],
[21].
This approach is direct application of the layered neural
network to ﬁnd the control input and it is powerful for
process control without so many ﬂuctuations. But we need
Plant
Input
Output
Reference signal
r
u
y
Neural network
+
−
Plant
Input
Output
Reference signal
r
u
y
Neuro-Control
        NN2
+
−
Emulator
    NN1
+
−
Total error 
^y
Prediction error 
e
Plant
Input
Output
Reference signal
r
u
y
+
−
Neuro-Control
        NN2
Emulator
    NN1
Copy
(a)
(b)
(c)
Figure 5.
Series type neuro-control structure.
the emulator of the plant and it takes much time to ﬁnd a
stable parameter set of the neural network.
B. Parallel Type Neuro-Control
A parallel neuro-control architecture is shown in Fig. 3(b).
For any conventional control scheme, we can use this type
and the neural network works as the compensator of the
adopted control scheme. If we take a feedback controller,
this control becomes to the feedback error learning structure
proposed by Kawato et al. [6].
Control engineers design an excellent controller at the
laboratory or factory which is given by u1 but when it is set
at the real working place in an industrial factory, the control
engineers must adjust the control input level such that it
is suitable for real production under several environments.
The adjustment is u2 given by neuro-control in Fig. 3(b).
This means that a well-trained cook at the restaurant could
provide a delicious dinner for customers but on each table
there are pepper and salt to be added to suit the taste of each
individual dish. For detail algorithms see [14].
C. Self-Tuning Type Neuro-Control
The self-tuning neuro-control scheme is illustrated in
Fig. 3(c) where a neural network is used to tune the parame-
ters of a conventional control method like a human operator
in the factory. The transfer function of PID controller is
given by the following eauation.
Gc(s) = U(s)
E(s) = kc
·
1 + 1
Tis + Tds
¸
(7)
where U(s)and E(s) are input and error between the desired
value and output. Here, kc, Ti, and Td are called as propor-
84
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

tional gain, integral time, and derivative time, respectively.
In time domain, it can be written as follows:
u(t) = kc
·
e(t) + 1
Ti
Z t
−∞
e(τ)dτ + Td
d
dte(t)
¸
(8)
e(t) = d(t) − y(t)
(9)
Therefore, in the PID control it is essential to ﬁnd a suitable
PID gains. Many researchers have tried to determine them as
precise as possible. The most famous method was proposed
by Ziegler-Nichols and to determine them by the following
relations(Ziegler-Nichols method).
kc = 1.2
RL,
Ti = 2L,
Td = L
2
where R and L are maximum slope of the step response and
the equivalent delay of the step response, respectively.
By rapid progress of computer, digital control has be-
come common approach in control method and discrete
PID control is also discussed. By discritizing Eq.(8) using
trapezoidal rule for numerical integration, we obtain the
following relation.
u(t)
=
u(t − 1) + Kp
¡
(e(t) − e(t − 1)
¢
+ Kie(t)
+
Kd
¡
e(t) − 2e(t − 1) + e(t − 2)
¢
(10)
Kp = kc − 1
2Ki, Ki = kc
T
Ti
, Kd = kc
Td
T
As in the continuous-time case, Ziegler-Nichols method
in the discrete-time case has become as follows:
Kp
=
kc − Ki
2 ,
Ki
=
1.2
RL
T
2L =
0.6
( L
T )2(RT) =
0.6
G0L2
0
,
Kd
=
kc
Td
T = 0.6
G0
,
G0
=
max
n
¡
y(t) − y(t − 1)
¢
,
L0 = L
T
Ziegler-Nichols method is helpful to ﬁnd the rough estima-
tion of PID gains, it is not so good in any case. Therefore,
in the process control the operators are adjusting these gains
based on their experience and knowledge in trial and error
as shown in Fig. 6.
We have developed a self-tuning PID controller. The
control structure is shown in Fig. 7.
V. DERIVATION OF NEURO-PID CONTROL
Using the learning ability of the neural networks, we will
derive the neur-PID controller. Using (10), the output y(t+1)
of the plant is produced. Then the total error E(t + 1) is
deﬁned by
E(t + 1) = 1
2e(t + 1)2
(11)
L
R
y(t): Step response
y(t)
R: Maximum slope
L: Equivalet time-lag
t
t : Time 
0
Figure 6.
Ziegler-Nichols method
     PID
Controller
Plant Output
          NN
(neural network)
Input
Error
Reference
signal
+
−
PID gains : Kp,Ki,Kd
e
u
y
d
Figure 7.
Self-tuning PID control system
where
e(t + 1) = d(t + 1) − y(t + 1).
Let us consider the three layered neural network as shown
in Fig. 8 where we assume that the output function is
f(x) = x in the output layer to extend the range of the
PID gains over [0,1]. Using the three output neurons of the
neural network, we denote the PID gains by
Kp = Ok(1),
Ki = Ok(2),
Kd = Ok(3)
(12)
Ok(m) = netk(m) =
N
X
j=0
wkjOj,
m = 1, 2, 3
(13)
Ok(m) = netk(m) =
N
X
j=0
wkjOj,
m = 1, 2, 3
(14)
where Ok shows the output of the neuron in the output layer.
By the similar way to the derivation of the BP algorithm,
85
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

we deﬁne the incremental values of wkj, wji as
∆wkj(t + 1) = wkj(t + 1) − wkj(t)
= −η ∂E(t + 1)
∂wkj
¯¯¯¯
wkj=wkj(t)
+ α∆wkj(t)
(15)
where k = 1, 2, 3,
j = 0, 1, . . . , N.
∆wkj(t + 1) = wkj(t + 1) − wkj(t)
= −η ∂E(t + 1)
∂wkj
¯¯¯¯
wkj=wkj(t)
+ α∆wkj(t)
(16)
where j = 1, 2, . . . , N, i = 0, 1, . . . , M, .
Let deﬁne δk as follows:
δk = −∂E(t + 1)
∂netk
(17)
Then we have
−∂E(t + 1)
∂wkj
= −∂E(t + 1)
∂netk
∂netk
wkj
= δkOj.
(18)
By using the chain rule of the derivative, we have
δk = −∂E(t + 1)
∂y(t + 1)
∂y(t + 1)
∂u(t)
∂u(t)
∂Ok
∂Ok
∂netk
.
(19)
Taking into account of the deﬁnition of E(t+1) and e(t+1)
and the assumption of f(x) = x and using (10) and Kp =
O1, Ki = O2, Kd = O3, we obtain
∂u(t)
∂Ok
=



e(t) − e(t − 1)
(k = 1)
e(t)
(k = 2)
e(t) − 2e(t − 1) + e(t − 2)
(k = 3)
(20)
If we deﬁne the system Jacobian as
Jac(t) = ∂y(t + 1)
∂u(t)
,
(21)
we have
δk = e(t + 1)Jac(t + 1)∂u(t)
∂Ok
,
k = 1, 2, 3.
(22)
Therefore, we obtain the following relation.
∆wkj(t + 1) = wkj(t + 1) − wkj(t) = ηδkOj.
(23)
Similarly, we obtain the folowing relation.
∆wji(n + 1) = ηδjOi
(24)
δj =
K
X
i=1
δkwkjOj(1 − Oj).
(25)
From the above relation, we can adjust the PID gains step
by step such that the minimum E(t + 1) could be achieved.
In order to caluculate the system Jacobian given by
(21), we will propose the following approach by using the
Input data
M
M
M
M
−1
1
−
Oi
k (2)
O
)1(
k
O
k (3)
O
p
K
i
K
d
K
( − )1
u t
(t)
y
(t)
d
e(t)
+
−
2 ( 2)
1
min
e t
E =
Oj
k
O
wkj
ji
w
Input
3,...,
,2
( ), ( ), ( ),
−
= −
t
t
d
y
u
τ τ
τ
τ
Figure 8.
Neuro-PID structure
Plant
Emulator
Input
Output error
+
-
Figure 9.
Emulator structure.
emulator. The emulator is constructed such that the output
will become like the plant output for any input data as shown
in Fig. 9.
The emulator can be designed by using a layred neural
network as shown in Fig. 10. Using the neuro-emulator, we
can approximate the system Jacobian. If the error of the
neural network becomes small enough, the system Jacobian
is given by the following equation:
Jac(t + 1) ≈
N
X
j=1
WkjOj(1 − Oj)Wj1.
(26)
Here, Wj1 denotes the connection weight from the input
u(n) to the neuron j.
VI. APPLICATION TO ELECTRIC VEHICLE CONTROL
Due to environmental problems the automobile industry
is currently venturing into producing electric vehicles. At
the Shikoku Electric Power Company, Japan, a new type of
electric car which is called PIVOT has been developed in
1993. The speciﬁcation is shown in Table I and the overview
and speciﬁc characteristics are illustrated in Figs. 11 and 12.
This PIVOT has equipped four wheels and each wheel
has been made with in-wheel motor. Therefore, the wheels
Plant
Input
+
-
Neural
Network
Figure 10.
Neuro-emulator structure.
86
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

can be steered more than 90 degrees opposed to the body.
This newly developed function accounts for universal drive
performance such as lateral drive and rotation at a point.
Another advantage is high-accuracy residual battery capacity
indicator based on neural networks. A small and high
accurate indicator has been developed. The residual battery
capacity is calculated by a computer using voltage and
current while driving.
The third one is an automatic battery exchange system. By
the development of an automatic battery exchange system,
the battery, having little residual capacity, is removed and
a charged battery is installed within approximately ﬁve
minutes, making refueling as easy as a gasoline-engine
vehicle.
The fourth one is an energy-saving technology. Devel-
opment of a regenerative braking system to convert kinetic
energy to electrical energy and charge the battery during
deceleration. Adoption of a lightweight frame/body and
low air resistance body conﬁguration and development of
a lightweight heat-pump type air conditioning system are
also equipped.
Table I
SPECIFICATION OF PIVOT.
Speciﬁcation
Performance
length
4,126 mm
width
1,671 mm
height
1,603 mm
dry weight
2,200 Kg
passengers
4 persons
maximum speed
100 Km/h
range
200 Km(at a constant cruising spped of 40km/h
acceleration
Approximate 20 secs. from 0 m to 400 m
grand climb ability
30%
battery type
lead battery
equipment
power steering, heat-pump type sir conditioning
In 1993 when PIVOT was completed in Japan, there was
no permission to drive any electric vehicle on the road in
law and it is difﬁcult to do the real driving experiment
under various load change or load conditions, we have made
experimental simulator as shown in Fig. 13. This can be
written in Fig. 14 where DDC is direct digital controller
which has been equipped with PID controllers, ACM is an
alternative current motor which produces torque of OIVOT,
DC is a direct current motor which produces any load
with various speciﬁcations, T is a torque meter, and UFAS
denoted a universal factory automation system.
For training the neural networks for various loads and
various speeds, we have obtained the input and output
data using the physical simulator illustrated in Fig. 13. As
mentioned above, this simulator can be modeled as shown in
Fig. 14 where DCM produces any kinds of loads and ACM
outputs the corresponding control inputs by an AC motor.
From our many experiences, we have used the neuro-control
structure as shown in Fig. 15 where NNC means neuro-
controller to adjust the PID gains and NNM was used to
PIVOT
Fixed Stator
Rotation
Fixed Shaft
Rotating Wheel
Moprtor on PIVOT
Conventional Moprtor
New Challenge for the future
We took an innovative step toward
         global environmental inssues
Figure 11.
PIVOT system and its driving mechanism.
87
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Rotation at a point
Lateral drive
Figure 12.
Feature of PIVOT system.
Figure 13.
Experimental simulator.
UFAS
DDC
(C1)
DDC
(C2)
DCM
(M1)
ACM
(M2)
T
Load
Driving
Figure 14.
Experimental simulator model.
NNC
PID
Torque 
generator
NNM
Regression 
equation
d(t)
Kp
Ki
Kd
y(t)
d(t)
u(t-1)
d(t)
y(t)
or
R(t)
(rpm)
+
+
−
+
−
yr(t)
yn(t)
y(t)
y(t)
^
e(t)
e(t)
em(t)
TD1
TD2
TD2
TD1
TD1
Figure 15.
Experimental simulator where TD1 and Td2 are time-delay
elements with one and two steps delays, respectively.
model the system emulator which is necessary to ﬁnd the
PID gains in NNC. Here, we use the parallel type emulator
with regression model in order to speed up the modeling
convergence and also used rotation number of motors. The
notation
ˆ
y(t) means the estimated value of y(t), yr(t) and
yn(t) are estimated value of y(t) by regression method
and neural networks, respectively, e(t) = d(t) − y(t), and
em(t) = y(t) − ˆy(t).
Figs. 16 and
17 are simulation results for conventional
PID control case and proposed neuro-PID case. Fig. 18 is
the PID gains for various initial values of PID gains. From
these results we can see that the proposed neuro-PID torque
control is better that the conventional PID controller based
on the Ziegler-Nichols method. Furthermore, even if we start
any initial values of PID gains, the excellent control results
88
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

0
150s
time (a)
0
0
3
25
error
real, reference
(Nm)
(Nm)
0
150s
time (b)
0
0
25
error
real, reference
(Nm)
(Nm)
Figure 16.
Conventional control results.
could be achieved compared with the values recommended
by the company made of the physical simulator.
Figs. 19 and 20 are simulation results for speed control
results in case of four modes and eleven mode speed control
problems on-load. From these results we can see that the
control results in the ﬁnal stages are almost perfect even
for any mode even if control results in the initial stage are
not good. In these simulations, learning parameters are η =
0.001 ∼ 0.05.
VII. CONCLUSIONS
In this paper we have proposed the neuro-PID control
algorithms based on the neural network of layered type.
This control method is robust with parameter change and
noise as well as the environmental condition. Therefore, we
can apply the neuro-PID controller to many kinds of control
problems, for example, process control, regulator problem,
serbo-problem etc. Among them we have applied the torque
and speed control problems of PIVOT electrical vehicle
(PIVOT) which has been develped by Shikoku Electric
power Ltd, in Japan.
REFERENCES
[1] Omatu, S., Yoshioka, M., Kosaka, T.: PID Control of Speed and
Torque of Electric Vehicl. 2009 Third International Conference
on Advanced Engineering Computing and Applications in
Sciences Proceedings, Slima, Malta, pp. 157–162(2009)
150
0
0
0
15 Nm
25 Nm
)
(
)
(
t
y
t
d
(t)
e
tim e [s]
reference
control results
reference
control results
reference
control results
150
0
0
15 Nm
25 Nm
)
(
)
(
t
y
t
d
(t)
e
0
tim e [s]
reference
control results
reference
control results
reference
control results
(a)
(b)
Figure 17.
Torque control results by neuro-PID control
initial value
final value
recommended  
value by company
Suitable region
1.0
0
integral time      [s]
0.3
proportional gain
0
iT
ck
Figure 18.
PID control gains.
89
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

0
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
0
0
150
reference
control results
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
0
0
0
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
0
Time [s]
0
150
reference
control results
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
Time [s]
0
150
0
0
(a) Initial stage
(b) Final stage
Figure 19.
Speed control for four modes case.
[2] Widrow, B., F. W. Smith: Pattern-Recognizing Control Sys-
tems. Computer and Information Sciences Symposium Pro-
ceedings, 288– 317, Spartan, Washington, DC. (1963)
[3] Walt, M.D., Fu, K.S.: A Heuristic Approach to Reinforcement
Learning Control Systems. IEEE Transactions on Automatic
Control, AC-10, 4, 390–398 (1965)
[4] Michie, D., Chambers, R.A.: An Experiment in Adaptive
Control. In Tou J.T. and Wilcox R.H. (Eds.): Machine Intelli-
gence, Edinburgh, Oliver and Boyd, pp. 137-152 (1968)
[5] Barto, A.G., Sutton R.S., Anderson, C. W.:Neuronlike Adap-
tive Elements that Cn Solve Difﬁcult Learning Control Prob-
lems. IEEE Transactions on Systems Man and Cybernetics, 13,
5, 834–846 (1983)
[6] Kawato, M., Furukawa, K., Suzuki, R.: A Hierarchical Neural
Network Model for Control and Learning of Voluntary Move-
ment. Biological Cybernetics, 57, 169–185 (1978)
[7] Hunt, K.J., Sbarbaro, R.: Neural Networks for Non-Linear
Internal Model Control. IEE Proceedings Control Theory and
Applications, 138, 5, 431–438 (1991)
[8] Willis, M.J., Montague, G.A., Dimassimo, C. Tham, M.T.,
Morris, A.J.: Artiﬁcial Neural Networks in Process Estimation
and Control, Automatica, 28, 6, 1181–1187 (1992)
[9] Jordan M.I., Jacobs, R.A.: Learning to Control an Unstable
System with forward Modelling, In Lippmann R.P., Moody
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
0
0
5000 [rpm ]
200 [rpm ]
( )
( )
y t
t
d
(t)
e
0
0
Time [s]
0
150
Time [s]
0
150
reference
control results
reference
control results
(a) Initial stage
(b) Final stage
Figure 20.
Speed control for eleven mode case.
S.E., and Touretzky D.S. (Eds.), Advances in Neural Informa-
tion Processing Systems, San Mateo, Morgan Kaufmann, San
Francisco (1990)
[10] Psaltis, D., Sideris A., Yamamura A.: A Multilayered Neural
Network Controller, IEEE Control Systems Magazine, 8, 2,
17–21 (1988)
[11] Omatu, S.: Learning of Neural-Controllers in Intelligent
Control Systems, In Zurada, J.M., Marks II, R.J. , and Robin-
son, C.J. (Eds.): Computational Intelligence Imitating Life,
IEEE Press, New York (1994)
[12] White, D.A., Sofge, D.A. (Eds.): Handbok of Intelligent
Control, Van Nostrand Reinhold, New York (1992)
[13] Miller, III, W.T., Sutton, R.S., Werbos, P.J. (Eds.): Neural
Netoworks for Control, MIT Press, Massachusetts (1990)
[14] Omatu, S., Maruzuki, K., Rubiyah, Y.: Neuro-Control and Its
Applications, Springer, London (1996)
[15] Mills, P.M., Zomaya, A.Y., Tade, M.O.: Neuro-Adaptive Pro-
cess Control, John Wiley & Sons, Chichester, England (1996)
[16] Ng, G.W.: Application of Neural Networks to Adaptive
Control of Nonlinear Systems, Research Studies Press, New
York (1997)
90
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

[17] Rumelhart, D.E., McClelland, J.L., PDP Group: Parallel
Distributed Processing, Explorations in the Microsteucture of
Cognition Volume 1, MIT Press, Massachusetts, (1987)
[18] Omatu, S.: Neuro-Control Applications in Real-World Prob-
lems, Proceedings of the 10th Yale Workshop on Adaptive and
Learning Systems, 92– 97, Yale University, New Haven (1998)
[19] Tanomal, J., Omatu, S.: Process Control by On-Line Trained
Neural Controllers: IEEE Transactions on Industrial Electron-
ics, 39, 6, 511–521 (1992)
[20] Maruzuki, K., Omatu, S., Rubiyah, Y.: Temperature Regula-
tion with Neural Networks and Alternative Control Schemes:
IEEE Transactions on Neural Networks, 6, 3, 572–582 (1992)
[21] Maruzuki, K., Omatu, S., Rubiyah, Y.: MIMO Furnace
Control with Neural Networks: IEEE Transactions on Control
Systems Technology, 1, 4, 238–245 (1993)
91
International Journal on Advances in Systems and Measurements, vol 3 no 1 & 2, year 2010, http://www.iariajournals.org/systems_and_measurements/
2010, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

