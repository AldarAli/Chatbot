115
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Deduction System for Decision Logic Based on Many-valued Logics
Yotaro Nakayama∗ ‡, Seiki Akama† and Tetsuya Murai‡
∗Nihon Unisys, Ltd., 1-1-1, Toyosu, Koto-ku, Tokyo, 135-8560, Japan
Email: yotaro.nakayama@unisys.co.jp
†C-Republic, Inc., 1-20-1 Higashi-Yurigaoka, Asao-ku, Kawasaki-shi, 215-0012, Japan
Email: akama@jcom.home.ne.jp
‡Chitose Institute of Science and Technology, 758-65 Bibi, Chitose, Hokkaido, 066-865, Japan
Email: t-murai@photon.chitose.ac.jp
Abstract—Rough set theory has been extensively used both as
a mathematical foundation of granularity and vagueness in
information systems and in a large number of applications.
However, the decision logic for rough sets is based on classical
bivalent logic; therefore, it would be desirable to develop decision
logic for uncertain, ambiguous and inconsistent objects. In this
study, a deduction system based on partial semantics is proposed
for decision logic. We propose Belnap’s four-valued semantics as
the basis for three-valued and four-valued logics to extend the
deduction of decision logic since the boundary region of rough
sets is interpreted as both a non-deterministic and inconsistent
state. We also introduce the consequence relations to serve as
an intermediary between rough sets and many-valued semantics.
Hence, consequence relations based on partial semantics for
decision logic are deﬁned, and axiomatization by Gentzen-type
sequent calculi is obtained. Furthermore, we extend the sequent
calculi with a weak implication to hold for a deduction theorem
and also show a soundness and completeness theorem for the
four-valued logic for decision logic.
Keywords–rough set; decision logic; consequence relation;
many-valued logic; sequent calculi.
I.
INTRODUCTION
This research paper is an extended version of an earlier
paper [1] presented at the IARIA Conference on SEMAPRO
2017. Pawlak introduced the theory of rough sets for handling
rough (coarse) information [2]. Rough set theory is now used
as a mathematical foundation of granularity and vagueness in
information systems and is applied to a variety of problems.
In applying rough set theory, decision logic was proposed for
interpreting information extracted from data tables. However,
decision logic adopts the classical two-valued logic semantics.
It is known that classical logic is not adequate for reasoning
with indeﬁnite and inconsistent information. Moreover, the
paradoxes of the material implications of classical logic are
counterintuitive.
Rough set theory can handle the concept of approximation
by the indiscernibility relation, which is a central concept
in rough set theory. It is an equivalence relation, where all
identical objects of sets are considered elementary. Rough set
theory is concerned with the lower and upper approximations
of object sets. These approximations divide sets into three
regions, namely, the positive, negative, and boundary regions.
Thus, Pawlak rough sets have often been studied in a three-
valued logic framework because the third value is thought to
correspond to the boundary region of rough sets [3][4].
On the contrary, in this paper, we propose that the interpre-
tation of the boundary region is based on four-valued semantics
rather than three-valued since the boundary region can be
interpreted as both undeﬁned and overdeﬁned. For example,
a knowledge base K of a Rough set can be seen as a theory
KB whose underlying logic is L. KB is called inconsistent
when it contains theorems of the form A and ∼A (the negation
of A). If KB is not inconsistent, it is called consistent. Our
approach for a rough set proposes useful theory to handle such
inconsistent information without system failure. In this study,
non-deterministic features are considered the characteristic of
partial semantics. Undetermined objects in the boundary region
of rough sets have two interpretations of both undeﬁnedness
and inconsistency.
The formalization of both three-valued and four-valued
logics is carried out using a consequence relation based on
partial semantics. The basic logic for decision logic is assumed
to be many-valued, in particular, three-valued or four-valued
and some of its alternatives [5]. If such many-valued logics
are used as a basic deduction system for decision logic, it
can be enhanced to a more useful method for data analysis
and information processing. The decision logic of rough set
theory will be axiomatized using Gentzen sequent calculi and
a four-valued semantic relation as basic theory. To introduce
many-valued logic to decision logic, consequence relations
based on partial interpretation are investigated, and the sequent
calculi of many-valued logic based on them are constructed.
Subsequently, many-valued logics with weak implication are
considered for the deduction system of decision logic.
The deductive system of decision logic has been studied
from the granule computing perspective, and in [6], an ex-
tension of decision logic was proposed for handling uncertain
data tables by fuzzy and probabilistic methods. In [7], a natural
deduction system based on classical logic was proposed for
decision logic in granule computing. In [3], the sequent calculi
of the Kleene and Łukasiewicz three-valued logics were pro-
posed for rough set theory based on non-deterministic matrices
for semantic interpretation. The Gentzen-type axiomatization
of three-valued logics based on partial semantics for decision
logic is proposed in [1]. The reasoning for rough sets is
comprehensively studied in [8].
The paper is organized as follows. In Section II, we brieﬂy
review rough sets, the decision table, and decision logic. In
Section III, Belnap’s four-valued semantics is introduced as the
basis of the semantics interpretation presented in the paper. In
Section IV, we present a partial semantics model for rough sets
and decision logic based on four-valued semantics, and some
characteristics are presented. In Section V, an axiomatization
using Gentzen sequent calculus is presented according to
a consequence relation based on the previously discussed

116
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
partial semantics. In Section VI, we discuss the extension of
sequent calculi for many-valued logics with weak negation
and implication to enable a deduction theorem. In Section V
II, A soundness and completeness theorem is showed for a
four-valued sequent calculus GC4. Finally, in Section VIII, a
summary of the study and possible directions for future work
are provided.
II.
ROUGH SETS AND DECISION LOGIC
Rough set theory, proposed by Pawlak [2], provides a
theoretical basis of sets based on approximation concepts. A
rough set can be seen as an approximation of a set. It is denoted
by a pair of sets called the lower and upper approximations of
the set. Rough sets are used for imprecise data handling. For
the upper and lower approximations, any subset X of U can
be in any of three states according to the membership relation
of the objects in U. If the positive and negative regions on
a rough set are considered to correspond to the truth-value
of a logical form, then the boundary region corresponds to
ambiguity in deciding truth or falsity. Thus, it is natural to
adopt a three-valued logic.
Rough set theory is outlined below. Let U be a non-
empty ﬁnite set called a universe of objects. If R is an
equivalence relation on U, then U/R denotes the family of
all equivalence classes of R, and the pair (U, R) is called a
Pawlak approximation space. A knowledge base K is deﬁned
as follows:
Deﬁnition 1. A knowledge base K is a pair K = (U, R),
where U is a universe of objects, and R is a set of equivalence
relations on the objects in U.
Deﬁnition 2. Let R ∈ R be an equivalence relation of the
knowledge base K = (U, R) and X any subset of U. Then,
the lower and upper approximations of X for R are deﬁned
as follows:
RX = ∪{Y ∈ U/R | Y ⊆ X} = {x ∈ U | [x]R ⊆ X},
RX = ∪{Y ∈ U/R | Y ∩ X ̸= 0} = {x ∈ U | [x]R ∩ X̸= ∅}.
Deﬁnition 3. If K = (U,R), R ∈ R, and X ⊆ U, then the R-
positive, R-negative, and R-boundary regions of X with respect
to R are deﬁned respectively as follows:
POSR(X) = RX,
NEGR(X) = U − RX,
BNR(X) = RX − RX.
Objects included in an R-boundary are interpreted as the
truth-value gap or glut. The semantic interpretation for rough
sets is deﬁned later.
Here, we denote the language of rough sets.
A. Decision Tables
Decision tables can be seen as a special important class
of knowledge representation systems and can be used for
applications. Let K = (U, A) be a knowledge representation
system and C, D ⊂ A be two subsets of attributes called
condition and decision attributes, respectively.
A KR-system with a distinguished condition and decision
attributes is called a decision table, denoted T = (U, A, V, s) or
in short DC, where U is a ﬁnite and nonempty set of objects,
A is a ﬁnite and nonempty set of attributes, V is a nonempty
set of values for a ∈ A, and s is an information function that
assigns a value U × sx : A → V (for simplicity, the subscript
x will be omitted), where ∀x ∈ U, and ∀a ∈ C ∪ D ⊂ A.
Equivalence
classes
of
the
relations
IND(C)
and
IND(D), a subset of A, are called condition and decision
classes, respectively.
With every x ∈ U, we associate a function dx : A → V ,
such that dx(a) = a(x) for every a ∈ C ∪ D; the function dx
is called a decision rule (in T), and x is referred as a label of
the decision rule dx.
The decision rule dx is consistent (in T) if for every y ̸= x,
dx|C = dy|C implies dx|D = dy|D; otherwise the decision
rule is inconsistent.
A decision table is consistent if all of its decision rules
are consistent; otherwise the decision table is inconsistent.
Consistency (inconsistency) sometimes may be interpreted as
determinism (non-determinism).
U
a b c d e
1
1 0 2 2 0
2
0 1 1 1 2
3
2 0 0 2 2
4
1 0 2 2 0
5
1 0 2 0 1
6
2 2 0 1 1
7
2 1 1 1 2
8
0 1 1 0 1
TABLE I. Decision table
Proposition 1. A decision table T = (U, A, V, s) is consistent
iff C ⇒ D, where C and D are condition and decision
attributes.
From Proposition 1, it follows that the practical method
of checking the consistency of a decision table is by simply
computing the degree of dependency between the condition
and decision attributes. If the degree of dependency equals 1,
then we conclude that the table is consistent; otherwise, it is
inconsistent.
Consider Table I from Pawlak [2]. Assume that a, b, and c
are condition attributes and d and e are decision attributes. In
this table, for instance, decision rule 1 is inconsistent, whereas
decision rule 3 is consistent. Decision rules 1 and 5 have the
same condition, but their decisions are different.
B. Decision Logic
A decision logic language (DL-language) L is now intro-
duced [2]. The set of attribute constants is deﬁned as a ∈ A,
and the set of attribute value constants is V = ∪ Va. The
propositional variables are φ
and
ψ, and the propositional
connectives are ⊥, ∼, ∧, ∨, → and ≡.
Deﬁnition 4. The set of formulas of the decision logic lan-
guage (DL-language) L is the smallest set satisfying the
following conditions:
1)
(a, v), or in short av, is an atomic formula of L.
2)
If φ and ψ are formulas of the DL-language, then
∼φ, φ∧ψ, φ∨ψ, φ → ψ, and φ ≡ ψ are formulas.

117
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
The interpretation of the DL-language L is performed using
the universe U in S = (U, A) of the Knowledge Representation
System (KR-system) and the assignment function, mapping
from U to objects of formulas. Formulas of the DL-language
are interpreted as subsets of objects consisting of a value v
and an attribute a.
Atomic formulas (a, v) describe objects that have a value
v for the attribute a. Attribute a is a function from U to V ,
deﬁned by a(x) = sx(a), where x ∈ U, and sx(a) ∈ V .
If let sx(a) = v, then a can be viewed as a binary relation
on U, such that for ⟨x, v⟩ ∈ U × U, ⟨a, v⟩ ∈ a if and only
if a(x) = v. In this case, the atomic formula (a, v) can be
denoted by a(x, v), where x is a variable, and v is taken
as a constant; they are all terms in U. Thus, (a, v) can be
viewed as formula a(x, v) which is an atomic formula. The
semantics for DL is given by a model. For DL, the model
is the KR-system S = (U, A), which describes the meaning
of symbols of predicates (a, v) in U, and if we properly
interpret the formulas in the model, then each formula becomes
a meaningful sentence, expressing the properties of some
objects. An object x ∈ U satisﬁes a formula φ in S = (U, A),
denoted x |=S φ or in short x |= φ, iff the following conditions
are satisﬁed:
Deﬁnition 5. The semantic relations of a DL-language are
deﬁned as follows:
x |=S a(x, v) iﬀ a(x) = v,
x |=S ∼φ iﬀ x ⊭S φ,
x |=S φ ∨ ψ iﬀ x |=S φ or x |=S ψ,
x |=S φ ∧ ψ iﬀ x |=S φ and S |=S ψ,
x |=S φ → ψ iﬀ x |=S ∼φ ∨ ψ,
x |=S φ ≡ ψ iﬀ x |=S φ → ψ and s |=S ψ → φ.
If φ is a formula, then the set |φ|S deﬁned as follows:
|φ|S = {x ∈ U | x |=S φ}
and will be called the meaning of the formula φ in S. The
following properties are obvious:
Proposition 2. The meaning of an arbitrary formula satisﬁes
the following:
|¬φ|S = U − |φ|S,
|φ ∨ ψ|S = |φ|S ∪ |ψ|S,
|φ ∧ ψ|S = |φ|S ∩ |ψ|S,
|φ→ψ|S = (U − |φ|S) ∪ |ψ|S,
|φ ≡ ψ|S = |φ|S → |ψ|S ∩ |φ|S → |ψ|S.
Thus, the meaning of the formula φ is the set of all
objects having the property expressed by the formula φ, or
the meaning of the formula φ is the description in the KR-
language of the set objects |φ|. A formula φ is said to be
true in a KR-system S, denoted |=S φ, iff |φ|S = U, i.e., the
formula is satisﬁed by all objects of the universe in the system
S. Formulas φ and ψ are equivalent in S iff |φ|S = |ψ|S.
Proposition 3. The following are the simple properties of the
meaning of a formula.
|=S φ iﬀ |φ|S = U,
|=S ∼φ iﬀ |φ|S = ∅,
φ → ψ iﬀ |ψ|S ⊆ |ψ|S,
φ ≡ ψ iﬀ |ψ|S = |ψ|S.
To deal with deduction in DL, we need suitable axioms
and inference rules. Here, the axioms will correspond closely
to the axioms of classical propositional logic, but some speciﬁc
axioms for the speciﬁc properties of knowledge representation
systems are also needed. The only inference rule will be modus
ponens. We will use the following abbreviations:
φ ∧ ∼φ =def 0 and φ ∨ ∼φ =def 1.
A formula of the form
(a1, v1)∧ (a2, v2) ∧ . . . ∧ (an, vn),
where vai ∈ Va, P = {a1, a2, . . . , an}, and P ⊆ A, is
called a P-basic formula or in short P-formula. An atomic
formula is called an A-basic formula or in short a basic
formula.
Let P ⊆ A, φ be a P-formula, and x ∈ U. The set of all
A-basic formulas satisﬁable in the knowledge representation
system S = (U, A) is called the basic knowledge in S. We
write Σ
s (P) to denote the disjunction of all P-formulas satisﬁed
in S. If P = A, then Σ
s (A) is called the characteristic formula
of S.
The knowledge representation system can be represented
by a data table. Its columns are labeled by attributes, and its
rows are labeled by objects. Thus, each row in the table is
represented by a certain A-basic formula, and the whole table
is represented by the set of all such formulas. In DL, instead
of tables, we can use sentences to represent knowledge. There
are speciﬁc axioms of DL:
1. (a, v) ∧ (a, u) ≡ 0 for any a ∈ A, u, v ∈ V , and v ̸= u.
2.
∨
v∈Va
≡ 1 for every a ∈ A.
3. ∼ (a, v) ≡ ∨
a∈Va,u̸=v(a, u) for every a ∈ A.
We say that a formula φ is derivable from a set of formulas
Ω, denoted Ωφ, iff it is derivable from the axioms and formulas
of Ω by a ﬁnite application of modus ponens. Formula φ is a
theorem of DL, denoted φ, if it is derivable from the axioms
only. A set of formulas Ω is consistent iff the formula φ∧∼φ
is not derivable from Ω. Note that the set of theorems of DL
is identical with the set of theorems of classical propositional
logic with speciﬁc axioms (1)–(3), in which negation can be
eliminated.
Formulas in the KR-language can be represented in a
special form called a normal form, which is similar to that
in classical propositional logic. Let P ⊆ A be a subset of
attributes and let φ be a formula in the KR-language. We say
that φ is in a P-normal form in S, in short in P-normal form,
iff either φ is 0 or φ is 1, or φ is a disjunction of non-empty P-
basic formulas in S. (The formula φ is non-empty if |φ| ̸= ∅).
A-normal form will be referred to as normal form. The
following is an important property in the DL-language.
Proposition 4. Let φ be a formula in a DL-language, and let P
contain all attributes occurring in φ. Moreover, assume axioms
(1)–(3) and the formula Σ
s (A). Then, there is a formula ψ in
the P-normal form such that φ ≡ ψ.

118
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Deﬁnition 6. A translation τ from the propositional constant
L to an interpretation of a rough set language LRS of atomic
expressions in the KR-system S is combined with ¬, ∨, ∧ and
→ such that
τ(|φ|S) = |(a, v)|S,
τ(| ∼ φ|S) = −τ(|φ|S),
τ(|φ ∨ ψ|S) = τ(|φ|S) ∪ τ(|ψ|S),
τ(|φ ∧ ψ|S) = τ(|φ|S) ∩ τ(|ψ|S),
τ(|φ → ψ|S) = −τ(|φ|S) ∪ τ(|ψ|S),
τ(|φ ≡ ψ|S) =
(τ(|φ|S) ∩ τ(|ψ|S)) ∪ (−τ(|φ|S) ∩ −τ(|ψ|S)).
Let φ be an atomic formula of the DL-language, R ∈ C∪D
an equivalence relation, X any subset of U, and a valuation
v of propositional variables. Then, the truth-values of φ is
deﬁned as follows:
∥φ∥v =
{t if |φ|S ⊆ POSR(U /X )
f if |φ|S ⊆ NEGR(U /X )
This shows that decision logic is based on bivalent logic. In
the next section, an interpretation of decision logic based on
three-valued logics will be discussed.
III.
BELNAP’S FOUR-VALUED LOGIC
Belnap [9] ﬁrst claimed that an inference mechanism for
a database should employ a certain four-valued logic. The
important point in Belnap’s system is that we should deal with
both incomplete and inconsistent information in databases.
To represent such information, we need a four-valued logic
since classical logic is not appropriate for the task. Belnap’s
four-valued semantics can in fact be viewed as an intuitive
description of the internal states of a computer.
In Belnap’s four-valued logic B4, four kinds of truth-values
are used from the set 4 = {T, F, N, B}. These truth-values
can be interpreted in the context of a computer, namely T
means just told True, F means just told False, N means told
neither True nor False, and B means told both True and False.
Intuitively, N can be equated as ∅, and B as overdeﬁned.
Belnap outlined a semantics for B4 using logical connec-
tives. Belnap’s semantics uses a notion of set-ups mapping
atomic formulas into 4. A set-up can then be extended for any
formula in B4 in the following way:
s(A & B) = s(A) & s(B),
s(A ∨ B) = s(A) ∨ s(B),
s(∼A) = ∼s(A).
Belnap also deﬁned a concept of entailments in B4. We
say that A entails B just in case for each assignment of one
of the four values to variables, the value of A does not exceed
the value of B in B4, i.e., s(A) ≤ s(B) for each set-up s.
Here, ≤ is deﬁned as F ≤ B, F ≤ N, B ≤ T, N ≤ T.
Belnap’s four-valued logic in fact coincides with the system
of tautological entailments due to Anderson and Belnap [10].
Belnap’s logic B4 is one of the paraconsistent logics capable of
tolerating contradictions. Belnap also studied the implications
and quantiﬁers in B4 in connection with question-answering
systems. However, we will not go into detail here.
The structure that consists of these four elements and the ﬁve
basic operators is usually called B4.
Designated elements and models: The next step in using
B4 for reasoning is to choose its set of designated elements.
The obvious choice is D = {T, B} since both values intu-
itively represent a formula known to be true. The set D has
the property that a ∧ b ∈ D iff both a and b are in D, while
a ∨ b ∈ D iff either a or b is in D. From this point, various
semantics notions are deﬁned on B4 as natural generalizations
of similar classical notions.
IV.
ROUGH SETS AND PARTIAL SEMANTICS
Partial semantics for classical logic has been studied by
van Benthem in the context of the semantic tableaux [11][12].
This insight can be generalized to study consequence
relations in terms of a Gentzen-type sequent calculus. To
handle an aspect of vagueness on the decision logic, the forcing
relation for the partial interpretation is deﬁned as a four-valued
semantic.
As the proposed approach can replace the base bivalent
logic of decision logic, alternative versions of decision logic
based on many-valued logics are obtained.
The model S of decision logic based on four-valued
semantics consists of a universe U for the language L and
an assignment function s that provides an interpretation for
L. For the domain |S| of the model S, a subset is deﬁned
by S = ⟨S+, S−⟩. The ﬁrst term of the ordered pair denotes
the set of n-tuples of elements of the universe that verify the
relation S, whereas the second term denotes the set of n-tuples
that falsify the relation.
The interpretation of the propositional variables of L for
the model S is given by SS = ⟨(S)+
S , (S)−
S ⟩. An interpretation
function for a domain |S| in the standard way as a function
s with domain L such that s(x) ∈ |S|n if S is a relation
symbol. We need two interpretation functions for each model
here; a model for partial logic for a predicate symbol is a triple
⟨|S|, s+, s−⟩, where s+ and s− are interpretation functions
for |S|. The denotation of a relation symbol consists of those
tuples for which it is true that they stand in the relation; the
antidenotation consists of the tuples for which this is false. As
before, truth and falsity are neither true nor false, or it may be
both true and false that some tuple stands in a certain relation.
The following deﬁnition is modiﬁed from [13].
Deﬁnition 7. Partial Relation: An n-ary partial relation S on
the domain |S1|, . . . , |Sn| is a tuple ⟨S+, S−⟩ of the relations
S+, S− ⊆ |S1| × . . . × |Sn|. The relation S+ is called S’s
denotation; S− is called S’s antidenotation, |S1|×. . .×|Sn|/
(S+ ∪ S−) its gap, and S+ ∩ S− its glut. A partial relation is
coherent if its glut is empty, total if its gap is empty, incoherent
if it is not coherent and classical if it is both coherent and total.
A unary partial relation is called a partial set.
Deﬁnition 8. Partial Operation for 4: Let S1 = ⟨S+
1 , S−
1 ⟩ and
S2 = ⟨S+
2 , S−
2 ⟩ be partial relations. Deﬁne
−S1 := ⟨S+
1 , S−
1 ⟩ (partial complementation),
S1 ∩ S2 := ⟨S+
1 ∩ S−
2 , S+
1 ∪ S−
2 ⟩ (partial intersection),
S1 ∪ S2 := ⟨S+
1 ∪ S−
2 , S+
1 ∩ S−
2 ⟩ (partial union),
S1 ⊆ S2 := ⟨S+
1 ⊆ S−
2 , S+
1 ⊆ S−
2 ⟩ (partial inclusion).
Partial inclusion means S1 approximates S2. Let A be some
set of partial relations; then, following properties hold:

119
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
∩
A := ⟨
∩
{S+ | S ∈ A},
∪
{S− | S ∈ A }⟩,
∪
A := ⟨
∪
{S+ | S ∈ A},
∩
{S− | S ∈ A }⟩.
To handle three-valued and four-valued logic in a uniﬁed
manner, we adopt the four-value interpretation by Belnap [9].
Let 4 = {T, F, N, B} be the truth-values for the four-
valued semantics of L, where each value is interpreted as true,
false, neither true nor false, and both true and false.
A model S determines a four-valued assignment v on
atomic formula in the following way:
∥φ∥v =





T
F
N
B





if |φ, ∼φ|S ∩ S =





{φ}
{∼φ}
{∅}
{φ, ∼φ}





.
Then, the truth-values of φ on S = (U, A) is deﬁned as
follows:
∥φ∥v =





T if |φ|S ⊆ POSR(U /X )
F if |φ|S ⊆ NEGR(U /X )
N if |φ|S ̸⊆ POSR(U /X ) ∪ NEGR(U /X )
B if |φ|S ⊆ BNR(U /X )
Deﬁnition 9 (Partial Model). A partial model for a proposi-
tional DL-language L is a tuple M = (T , D, O), where
•
T is a non-empty set of truth-values.
•
∅ ⊂ D ⊆ T is the set of designated values.
•
For every n-ary connective ⋄ of L, O includes a
corresponding n-ary function
∼⋄ from T n to 4.
Let W be the set of well-formed formulas of L. A (legal)
valuation in a Partial Model S is a function V : W → 4 that
satisﬁes the following condition:
V (⋄(ψ1, · · · , ψn)) ∈
∼⋄(V (ψ1), · · · , V (ψn))
for every n-ary connective ⋄ of L and any ψ1, · · · , ψn ∈
W.
Let VM denote the set of all valuations in the partial model
D. The notions of satisfaction under a valuation, validity, and
consequence relation are deﬁned as follows:
•
A formula φ ∈ W is satisﬁed by a valuation v ∈ VM,
in symbols, M |=v φ, v(φ) ∈ D.
•
A sequent Σ = Γ ⇒ ∆ is satisﬁed by a valuation
v ∈ VM, in symbols, M |=v Σ, iff either v does not
satisfy some formula in Γ or v satisﬁes some formula
in ∆.
•
A sequent Σ is valid, in symbols, |= Σ, if it is satisﬁed
by all valuations V ∈ VM.
•
The consequence relation on W deﬁned by M is the
relation M ⊢ on sets of formulas in W such that,
for any T, S ⊆ W, T ⊢M S iff there exist ﬁnite sets
Γ ⊆ T, ∆ ⊆ S such that the sequent Γ ⇒ ∆ is valid.
Deﬁnition 10. (Tarski truth deﬁnition for partial propositional
logic) Let L be a set of propositional constants and let v : P →
{T, F, N, B} be a (valuation) function.
∥p∥v = v(p) if p ∈ P
The truth-values of φ on the information system S = (U, A)
are represented by forcing relations as follows:
∥φ∥v = T iﬀ M |=+
v φ and M ̸|=−
v φ,
∥φ∥v = F iﬀ M ̸|=+
v φ and M |=−
v φ,
∥φ∥v = N iﬀ M ̸|=+
v φ and M ̸|=−
v φ,
∥φ∥v = B iﬀ M |=+
v φ and M |=−
v φ.
A semantic relation for the model M is deﬁned following
[11][14][13]. The truth and falsehood of a formula of the DL-
language are deﬁned in a model M. The truth (denoted by
|=+
v ) and the falsehood (denoted by |=−
v ) of the formulas of
the decision logic in M are deﬁned inductively.
Deﬁnition 11. The semantic relations of M |=+
v
φ and
M |=−
v φ are deﬁned as follows:
M |=+
v φ iﬀ φ ∈ M +,
M |=−
v φ iﬀ φ ∈ M −,
M |=+
v ∼ φ iﬀ M |=−
v φ,
M |=−
v ∼ φ iﬀ M |=+
v φ,
M |=+
v φ ∨ ψ iﬀ M |=+
v φ or M |=+
v ψ,
M |=−
v φ ∨ ψ iﬀ M |=−
v φ and M |=−
v ψ,
M |=+
v φ ∧ ψ iﬀ M |=+
v φ and M |=+
v ψ,
M |=−
v φ ∧ ψ iﬀ M |=−
v φ or M |=−
v ψ,
M |=+
v φ → ψ iﬀ M |=−
v φ or M |=+
v ψ,
M |=−
v φ → ψ iﬀ M |=+
v φ and M |=−
v ψ.
The symbol ∼ denotes strong negation, in which ∼ is inter-
preted as true if the proposition is false.
Since validity in B4 is deﬁned in terms of truth preserva-
tion, the set of designated values is {T, B} of 4. We assume
that an interpretation of B4 satisﬁes the following constraint.
Deﬁnition 12. Exclusion and Exhaustion:
Exclusion: model M is exclusion iff S+ ∩ S− = ∅.
Exhaustion: model M is exhaustion iff S+ ∪ S− = S.
The model M is consistent if and only if S+ ∩ S− = ∅.
The relational domains of general models are closed under the
operations ∩, ∪.
The natural operation on the set of truth combinations 4 =
{T, F, N, B} that we have deﬁned in the previous section can
be extended to the class of partial relations.
Deﬁnition 13. A model of B4 for L is a pair M = (S, | · |),
where S is a non-empty set, and | · | is an interpretation of a
propositional symbol, with |p| : Sn → 4 for any p ∈ Pn, n ≤
0.
Example 1. Suppose the decision table below where the con-
dition and decision attributes are not considered.
U = {x1, x2, x3, x4, x5, x6, x7, x8}
Attribute: C = {c1, c2, c3, c4}
c1 = {x1, x4, x8}, c2 = {x2, x5, x7}, c3 = {x3},
c4 = {x6}
U/C = c1 ∪ c2 ∪ c3 ∪ c4
Any subset X = {x3, x6, x8}

120
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
POSC(X) = c3 ∪ c4 = {x3, x6}
BNC(X) = c1 = {x1, x4, x8}
NEGC(X) = c2 = {x2, x5, x7}
The evaluation of the truth-values of the formulas is as
follows:
If |Cc3|S ⊆ POSC(X) then ∥Cc3∥v = T,
If |Cc2|S ⊆ NEGC(X) then ∥Cc2∥v = F,
If |Cc2|S ̸⊆ POSC(X) ∪ NEGC(X) then ∥Cc2∥v = N,
If |Cc1|S ⊆ BNC(X) then ∥Cc1∥v = B.
Example 2. Consider Table I again. Assume that a, b, and
c are condition attributes and d and e are decision attributes.
Decision rules 1 and 5 are inconsistent. This means that 1 and
5 can be considered to have non-deterministic value, e.g., N
or B respectively.
V.
CONSEQUENCE RELATION AND SEQUENT CALCULUS
Partial semantics in classical logic is closely related to
the interpretation of the Beth tableau [12]. Van Benthem [11]
suggested the relationship of the consequence relation to a
Gentzen sequent calculus. We replace the bivalent logic of
the decision logic with many-valued logics based on partial
semantics.
A. Sequent Calculi for Many-valued Logics
We begin by recalling the basic idea of the Beth tableau.
The Beth tableau proves X → Y by constructing a coun-
terexample of X & ∼Y . The Beth tableaux has several partial
features. For instance, there may be counterexamples even if
a branch remains open. This insight led van Benthem [11] to
work out partial semantics for classical logic.
Here, we describe a brief introduction of sequent cal-
culi. For sequent calculi, formulas are constructed from
the propositional variables and logical connectives, e.g., ∼
, ¬, ∧, ∨, and →. Capital letters A, B, . . . are used for
formulas, and Greek capital letters Γ, ∆ are used for ﬁnite
sequences of formulas. A sequent is an expression of the form
Γ ⇒ A. We introduce some concepts of sequent calculi. If
a sequent Γ ⇒ A is provable in a system S, then we write
S ⊢ Γ ⇒ A. A rule R of inference holds for a system S if
the following condition is satisﬁed. For any instance of the
following sequent of R, if S ⊢ Γi ⇒ Ai for all i, then
S ⊢ ∆ ⇒ B.
Γ1 ⇒ A1 . . . Γn ⇒ An
∆ ⇒ B
Moreover, R is said to be derivable in S if there is a derivation
from Γ1 ⇒ A1, . . . , Γn ⇒ An to ∆ ⇒ B in S.
To accommodate the Gentzen system to partial logics, we
need some concepts of partial semantics. In the Beth tableau,
It is assumed that V is a partial valuation function assigning
the values 0 or 1 to an atomic formula p. We can then set
V (p) = 1 for p on the left-hand side and V (p) = 0 for p
on the right-hand side in an open branch of the tableau. To
deal with an uncertain concept in many-valued semantics, we
need to introduce the consequence relation [5]. Pre and Cons
represent the sequent premise and conclusion, respectively, and
1 represents true and 0 false. First, we deﬁne the following
concept of consequence relation C1.
(C1) for all V , if V (Pre) = 1, then V (Cons) = 1.
In C1, if Pre is evaluated as 1, then Cons preserves 1. Here,
we deﬁne a classical Gentzen system.
Deﬁnition 14. The sequent calculus for the classical proposi-
tional logic CL is deﬁned as follows:
Axiom:
A ⇒ A (ID)
Sequent rules:
Γ ⇒ ∆
A, Γ ⇒ ∆, A (Weakening)
Γ, A ⇒ ∆
Γ ⇒ A, ∆
Γ ⇒ ∆
(Cut)
A, Γ ⇒ ∆
Γ ⇒ ∆, ∼A (∼R)
Γ ⇒ ∆, A
∼A, Γ ⇒ ∆ (∼L)
Γ ⇒ ∆, A
Γ ⇒ ∆, B
Γ ⇒ ∆, A ∧ B
(∧R)
A, B, Γ ⇒ ∆
A ∧ B, Γ ⇒ ∆ (∧L)
Γ ⇒ ∆, A, B
Γ ⇒ ∆, A ∨ B (∨R)
A, Γ ⇒ ∆
B, Γ ⇒ ∆
A ∨ B, Γ ⇒ ∆
(∨L)
Γ ⇒ ∆, ∼A, B
Γ ⇒ ∆, A → B (→R)
Γ, ∼A ⇒ ∆
B, Γ ⇒ ∆
A → B, Γ ⇒ ∆
(→L)
Theorem 5. The logic for C1 is axiomatized by the Gentzen
sequent calculus CL.
Proof: See [12],[11],[15].
Next, we deﬁne the sequent calculus GC1 for C1 that
can be obtained by adding the following rules to CL without
(∼R) such as CL\{(∼ R)}, where, ”\” implies that the rule
following ”\” is excluded:
Γ ⇒ ∆, A
Γ ⇒ ∆, ∼∼A (∼∼R)
A, Γ ⇒ ∆
∼∼A, Γ ⇒ ∆ (∼∼L)
Γ ⇒ ∆, ∼ A, ∼ B
Γ ⇒ ∆, ∼(A ∧ B) (∼∧R)
∼A, Γ ⇒ ∆
∼B, Γ ⇒ ∆
∼ (A ∧ B), Γ ⇒ ∆
(∼∧L)
Γ ⇒ ∆, ∼A
Γ ⇒ ∆, ∼B
Γ ⇒ ∆, ∼ (A ∨ B)
(∼ ∨ R)
∼A, ∼B, Γ ⇒ ∆
∼(A ∨ B), Γ ⇒ ∆ (∼ ∨ L)
It is worth noting that the three-valued logic by Kleene has
no tautology. Thus, to deﬁne a consequence relation, a tableau
system for a three-valued logic is formalized [11] [15]. Then,
the consequence relation C2 is deﬁned as follows:
(C2) for all V , if V (Pre) = 1, then V (Cons) ̸= 0.
C2 is interpreted as exclusion; then, the consequence relation
C2 is regarded for Kleene’s strong three-valued logic K3. As
the semantics for C2, we deﬁne the extension of the valuation
function V C2(p) for an atomic formula p as follows:
T =def V C2(p) = 1 =def V C2(p) = 1 and V C2(p) ̸= 0,
F =def V C2(p) = 0 =def V C2(p) = 0 and V C2(p) ̸= 1,

121
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
N =def V C2(p) = {} =def V C2(p) ̸= 1 and V C2(p) ̸= 0.
The interpretation of C2 by the partial semantics is given
as follows:
Deﬁnition 15. Γ |=s φ iﬀ there is no φ that is not F under
V C2 (in the three-valued {T, F, N}) and for all γ ∈ Γ, γ is
T under V C2.
The Gentzen-type sequent calculus GC2 axiomatizes C2
[15][11]. We are now in a position to deﬁne GC2. For GC2,
the principle of explosion (ex falso quodlibet (EFQ)), deﬁned
below, is added to TG1\{(∼ L)}.
(EFQ) A, ∼ A ⇒
Deﬁnition 16. The sequent calculus GC2 is deﬁned as fol-
lows:
GC2 := {(ID), (Weakening), (Cut), (EFQ), (∧R), (∧L),
(∨R), (∨L), (→R), (→L), (∼∼R), (∼∼L),
(∼∧R), (∼∧L), (∼ ∨ R), (∼ ∨ L)}.
GC2
can
be
interpreted
as
truth
preserving
with
the
matrix
of
a
three-valued
logic
deﬁned
as
⟨{T, F, N}, {T}, {∼, ∨, ∧, →}⟩. For the rule (∼L) obtained
from (EFQ), GC2 and GC1 are equivalent.
Theorem 6. GC2 = GC1.
Proof: (EFQ) can be considered as (∼L); then, double
negation and the de Morgan laws in GC2 are obtained.
In the classical interpretation of CL, the law of excluded
middle (EM) holds but not in C2.
Then, the rule C2 for the Gentzen system is axiomatized
as GC2.
Theorem 7. C2 can be axiomatized by the sequent calculus
GC2.
Proof: See [11][15].
Theorem 8. In the model for C2, S, DL-language L, and
formula φ, it is not the case that M |=+
v φ and M |=−
v φ
hold.
Proof: Only the proof for ∼ and ∧ will be provided. It can
be carried out by induction on the complexity of the formula.
The condition of consistent implies that it is not the case that
φ ∈ S+ and φ ∈ S−. Then, it is not the case that M |=+
v φ
and M |=−
v φ.
∼: We assume that M |=+
v ∼ φ and M |=−
v ∼ φ hold.
Then, it follows that M |=+
v
φ and M |=−
v
φ. This is a
contradiction.
∧: We assume that M |=−
v φ ∧ ψ and M |=+
v φ ∧ ψ hold.
Then, it follows that M |=+
v φ, M |=+
v ψ and either M |=−
v φ
or M |=−
v ψ. In either case, there is a contradiction.
Next, we provide another consequence relation with a
different interpretation for the third-value below.
(C3) for all V , if V (Pre) ̸= 0, then V (Cons) = 0.
C3 is interpreted as exhaustion, then the consequence relation
C3 is for Logic for Paradox [16]. As the semantics for C3, we
deﬁne the extension of the valuation function V C3(p) for an
atomic formula p as follows:
T =def V C3(p) = 1 =def V C3(p) = 1 and V C3(p) ̸= 0,
F =def V C3(p) = 0 =def V C3(p) = 0 and V C3(p) ̸= 1,
B =def V C3(p) = {1, 0} =def V C3(p) = 1 and V C3(p) = 0.
The interpretation of C3 by the partial semantics is given
as follows:
Deﬁnition 17. Γ |=v φ iﬀ there is φ that is T under V C3
(in the three-valued {T, F, B}) and for all γ ∈ Γ, γ is not F
under V C3.
The Gentzen sequent calculus GC3 is obtained from GC2,
replacing EFQ with EM (excluded middle) as an axiom:
(EM) ⇒ A, ∼A
Deﬁnition 18. The sequent calculus GC3 is deﬁned as fol-
lows:
GC3 := {(ID), (Weakening), (Cut), (EM), (∧R), (∧L),
(∨R), (∨L), (→R), (→L), (∼∼R), (∼∼L),
(∼∧R), (∼∧L), (∼ ∨ R), (∼ ∨ L)}.
Theorem 9. C3 can be axiomatized by the Gentzen calculus
GC3.
Proof: GC3 can be obtained by deriving double negation
and two de Morgan laws in GC3. The (∼R) rule can be
provided as EM.
Next, we extend consequence relation C4 as follows:
(C4) for all V , if V (Pre) ̸= 0, then V (Cons) ̸= 0.
C4 is regarded as a four-valued logic since it allows for
an inconsistent valuation. We are now in a position to deﬁne
Belnap’s four-valued logic B4.
As the semantics for GC4, Belnap’s B4 is adopted here.
We deﬁne the extension of the valuation function V C4(p) for
an atomic formula p as follows:
T =def V C4(p) = 1 =def V C4(p) = 1 and V C4(p) ̸= 0,
F =def V C4(p) = 0 =def V C4(p) = 0 and V C4(p) ̸= 1,
N =def V C4(p) = {} =def V C4(p) ̸= 1 and V C4(p) ̸= 0,
B =def V C4(p) = {1, 0} =def V C4(p) = 1 and V C4(p) = 0.
The interpretation of C4 by the partial semantics is given as
follows:
Deﬁnition 19. Γ |=v φ iﬀ there is no φ that is not F under
V C4 (in 4) and for all γ ∈ Γ, γ is not F under V C4.
Deﬁnition 20. The sequent calculus GC4 is deﬁned as fol-
lows:
GC4 := {(ID), (Weakening), (Cut), (∧R), (∧L),
(∨R), (∨L), (∼∼R), (∼∼L),
(∼∧R), (∼∧L), (∼ ∨ R), (∼ ∨ L)}.
Theorem 10. C4 can be axiomatized by the sequent calculus
GC4.

122
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Proof: GC4 can be obtained by deriving double negation
and two de Morgan laws in GC4. The (F∼) rule can be
provided as EM.
VI.
EXTENSION OF MANY-VALUED SEMANTICS
We introduce three-valued logics and provide some rela-
tionship and properties between the consequence relations we
denotated in the previous section.
Kleene’s strong three-valued logic: Kleene proposed three-
valued logics to deal with undecidable sentences in connection
with recursive function theory [17]. Thus, the third truth-
value can be interpreted as undecided in the strong Kleene
logic K3, which is of special interest to describe a machine’s
computational state. K3 can give a truth value to a compound
sentence even if some of its parts have no truth value. Kleene
also proposed the weak three-valued logic in which the whole
sentence is undecided if any component of a compound
sentence is undecided.
The truth tables for K3 are deﬁned as follows:
∼
T
F
N
F
T
N
∧
T
F
N
T
T
F
N
F
F
F
F
N
N
F
N
∨
T
F
N
T
T
T
T
F
T
F
N
N
T
N
N
→
T
F
N
T
T
F
N
F
T
T
T
N
T
N
N
The implication → can be deﬁned in the following way:
A → B =def ∼A ∨ B
The axiomatization of K3 by a Gentzen-type sequent
calculus can be found in the literature [5].
Let |= be the consequence relation of K3. Then, we have
the following Gentzen-type sequent calculus GK3 for K3,
which contains an axiom of the form
X |= Y ifX ∩ Y ̸= ∅
and the rules (Weakening), (Cut), and
A |= ∼∼A,
∼∼A |= A,
A, ∼A |=,
A, B |= A ∧ B,
A ∧ B |= A,
A ∧ B |= B,
∼A |= ∼(A ∧ B),
∼B |= ∼(A ∧ B),
∼(A ∧ B) |= ∼A, ∼B.
GC2 is considered as Kleene’s strong three-valued logic
K3. The implication of K3 does not satisfy the deduction
theorem. In addition, A → A is not a theorem in K3.
Theorem 11. |=K3 = ⊢C2, where |=K3 denotes the conse-
quence relation of K3.
Proof: By induction on K3 and GC2. It is easy to trans-
form each proof of K3 into GC2. The converse transformation
can be also presented.
Łukasiewicz three-valued logic: Łukasiewicz’s (1920) three-
valued logic was proposed in order to interpret a future
contingent statement in which the third truth-value can be read
as indeterminate or possible. Thus, in Łukasiewicz’s three-
valued logic L3, neither the law of excluded middle nor the
law of non-contradiction holds. The difference between K3 and
L3 lies in the interpretation of implication, as the truth table
indicates.
It is also possible to describe the Hilbert presentation of L3.
Let ⊃ be the Łukasiewicz implication. Then, we can show the
following axiomatization of L3 due to Wajsberg. It has been
axiomatized by Wajsberg (1993) in [5] using a language based
on (∨, ⊃, ∼), the modus ponens rule and the following axioms:
(W1) (p ⊃ q) ⊃ ((p ⊃ r) ⊃ (p ⊃ r)),
(W2) (∼p ⊃ ∼q) ⊃ (q ⊃ p)),
(W3) (((p ⊃ ∼p) ⊃ p) ⊃ p).
They are closed under the rules of substitution and modus
ponens. Unlike in K3, A ⊃ A is a theorem in L3. It is noted,
however, that the philosophical motivation of L3 in connection
with Aristotelian logic can be challenged. For a review of
various three-valued logics, see Urquhart [5].
⊃
T
F
N
T
T
F
N
F
T
T
T
N
T
N
T
The deﬁnition of the semantic relation for the implication
of L3 is obtained by replacing the implication in Deﬁnition 11
with the following deﬁnition:
M |=+
v φ → ψ iﬀ M |=−
v φ or M |=+
v ψ or
(M ̸|=+
v φ and M ̸|=−
v φ and M ̸|=+
v ψ and M ̸|=−
v ψ).
M |=−
v φ → ψ iﬀ M |=+
v φ and M |=−
v ψ.
Logic of Paradox (LP): Logic of Paradox (LP) has been
studied by Priest [16], which is one of the paraconsistent
logics excluding EFQ. As motivation for paraconsistent logics
in general, LP can treat various logical paradoxes and Dialethe-
ism, which is a philosophical position that admits some true
contradictions. GC3 is taken as a sequent calculus of LP [18],
and the truth table of LP can be obtained K3’s truth value N
replaced with B.
The deﬁnition of the semantic relation for the implication of
GC3 is obtained by replacing the implication in Deﬁnition 11
with the following deﬁnition.
M |=+
v φ → ψ iﬀ M ̸|=+
v φ or M ̸|=−
v ψ or
(M |=+
v φ and M |=−
v φ and M |=+
v ψ and M |=−
v ψ).
M |=−
v φ → ψ iﬀ M |=+
v φ and M |=−
v ψ.
Belnap’s four-valued logic: In section III, we have already
seen the Belnap’s four-valued logic. In addition to section III,
we deﬁne the truth tables for ∼, ∧, and ∨.
In this paper, the implication of B4 is deﬁned with ∼ and
∨ and it does not hold for the rule of modus ponens because
the disjunctive syllogism does not hold.
∼
T
F
N
B
F
T
N
B
∧
T
F
N
B
T
T
F
N
B
F
T
T
T
T
N
T
T
T
T
B
T
F
N
B
∨
T
F
N
B
T
T
F
N
B
F
T
T
T
T
N
T
T
T
T
B
T
F
N
B

123
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
The aim of this paper is to present many-valued semantics
for the decision logic. There are three candidates of conse-
quence relations for the enhancement in the decision logic.
GC2, which was discussed above, is interpreted as strong
Kleene three-valued logic. The value of a proposition is neither
true nor false in GC2. In this case, the designated value of GC2
is deﬁned as {T, N}. GC3 is a paraconsistent logic, and its
designated valued is deﬁned as {T, B}. The paraconsistent
logic does not hold for the principle of explosion (ex falso
quodlibet); therefore, it is possible to interpret the consequence
relation by C3. GC4 is obtained from C4 based on four-
valued semantics and interpreted as both paracomplete and
paraconsistent.
Here, we present the extended version of many-valued
logics with weak negation ¬. Weak negation represents the
lack of truth. The assignment of weak negation is deﬁned as
follows:
∥¬φ∥s =
{T if ∥φ∥s ̸= T
F otherwise
Weak implication is deﬁned as follows:
A →w B =def ¬A ∨ B
The assignment of weak implication is deﬁned as follows:
∥A →w B∥s =
{∥B∥s if ∥A∥s ∈ D
T if ∥A∥s ̸∈ D
We represent the truth tables for ¬ and →w below.
¬
T
F
N
B
F
T
T
F
→w
T
F
N
B
T
T
F
N
B
F
T
T
T
T
N
T
T
T
T
B
T
F
N
B
The semantic relation for weak negation is as follows:
M |=+
v ¬φ
iﬀ
M ̸|=+
v φ,
M |=−
v ¬φ
iﬀ
M |=+
v φ.
We try to extend many-valued logics with weak negation
and weak implication. This regains some properties that some
many-valued logics lack, such as the rule of modus ponens and
the decision theorem. Obviously, L3 recovers some properties
that K3 lacks and L3’s implication and weak implication has
a close relationship.
Weak negation can represent the absence of truth. However,
∼ can serve as strong negation to express the veriﬁcation of
falsity. Note also that weak implication obeys the deduction
theorem. This means that it can be regarded a logical implica-
tion. We can also interpret weak negation in terms of strong
negation and weak implication:
¬A =def A →w ∼A
We deﬁne the sequent rules for (¬) and (→w) as follows:
Γ, A ⇒ ∆
Γ ⇒ ¬A, ∆ (¬R)
Γ ⇒ A, ∆
Γ, ¬A ⇒ ∆ (¬L)
A, Γ ⇒ ∆, B
Γ ⇒ ∆, A →w B (→wR)
B, Γ ⇒ ∆
Γ ⇒ ∆, A
A →w B, Γ ⇒ ∆
(→wL)
GC2, GC3, and GC4 have additional rules of weak negation
and weak implication, and we obtain GC2+, GC3+, and
GC4+. GC2+ is the same as the extended Kleene logic EKL,
that was proposed by Doherty [19] as the underlying three-
valued logic for the non-monotonic logic and is provided with
the deduction theorem.
GC4+ is interpreted as both paracomplete and paracon-
sistent. This prevents the paradox of material implication of
classical logic.
Here, it is observed that L3 can be naturally interpreted in
GC2+. The Łukasiewicz implication can be deﬁned as
A ⊃ B =def (A →w B) ∧ (∼B →w ∼A)
Next, we present the interpretation of weak negation for
consequence relations C2, C3, and C4, which are interpreted
as K3, LP, and B4, respectively.
∥¬A∥C2 =
{F if ∥A∥ = T
T if otherwise
∥¬A∥C3 =
{T if ∥A∥ = F
F if otherwise
∥¬A∥C4 =
{F if ∥A∥ = T or B
T if ∥A∥ = F or N
We consider an application of weak negation for the
interpretation of rough sets.
Example 3. Suppose the deﬁnition of a decision table is the
same as Example 1.
U = {x1, x2, x3, x4, x5, x6, x7, x8}
Attribute: C = {c1, c2, c3, c4}
c1 = {x1, x4, x8}, c2 = {x2, x5, x7}, c3 = {x3},
c4 = {x6}
U/C = c1 ∪ c2 ∪ c3 ∪ c4
Any subset X = {x3, x6, x8}
POSC(X) = c3 ∪ c4 = {x3, x6}
BNC(X) = c1 = {x1, x4, x8}
NEGC(X) = c2 = {x2, x5, x7}
The interpretation of the consequence relation C4 for weak
negation in the decision table is deﬁned as follows:
If |Cc3|S ⊆ POSC(X) then ¬∥Cc3∥v = F,
If |Cc2|S ⊆ NEGC(X) then ¬∥Cc2∥v = T,
If |Cc2|S ̸⊆ POSC(X)∪NEGC(X) then ¬∥Cc2∥v = T,
If |Cc1|S ⊆ BNC(X) then ¬∥Cc1∥v = F.

124
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
VII.
SOUNDNESS AND COMPLETENESS
The soundness and completeness theorem is shown for the
sequent system GC4+. Other systems can be adopted in a
similar way for GC4+. GC4+, which was discussed above, is
interpreted as one Belnap’s four-valued logic B4 extended with
weak negation and weak implication. The sequent calculus
GC4+ is deﬁned as follows:
GC4+ := {(ID), (Weakening), (Cut), (∧R), (∧L),
(∨R), (∨L), (∼∼R), (∼∼L), (∼∧R), (∼∧L),
(∼∨R), (∼∨L), (¬R), (¬L), (→wR), (→wL)}
It is assumed that GC4+ is the basic deduction system for
decision logic obtained from C4 with weak negation and weak
implication. This prevents the paradox of material implication
of classical logic.
As the semantics for GC4+, Belnap’s B4 is adopted here;
we obey the deﬁnition of the valuation function V C4(p).
Lemma 12. The validity of the inference rules
1)
The axioms of GC4+ are valid.
2)
For any inference rules of GC4+ and any valuation s,
if s satisﬁes all of the formulas of Pre, then s satisﬁes
Cons.
Proof: 1) In GC4+, the axiom (ID) and structural rules
(weakening) and (cut) preserve validity.
For 2), the proof for (¬R), (→wL), and (∼∧L) will be
provided.
(¬R):
Γ, A ⇒ ∆
Γ ⇒ ¬A, ∆ (¬R)
Suppose that |=GC4+ Γ, A ⇒ ∆. Then, either (1) v(γ) ̸=
T for some γ ∈ Γ or v(δ) ̸= F for some δ ∈ ∆ or (2)
v(A) ̸= T. If (1) holds, then clearly |=GC4+ Γ ⇒ ¬A, ∆
iff |=−
GC4+ Γ or |=+
GC4+ ∆, ¬A. If (2) holds, then from the
deﬁnition of ¬, it follows that v(¬A) = T and then |=GC4+
Γ ⇒ ¬A, ∆.
(→wL):
B, Γ ⇒ ∆
Γ ⇒ ∆, A
A →w B, Γ ⇒ ∆
(→wL)
Suppose that |=GC4+ B, Γ ⇒ ∆, and Γ ⇒ ∆, A. Then,
either (3) v(γ) ̸= T for some γ ∈ Γ or v(δ) ̸= F for some
δ ∈ ∆ or (4) v(B) ̸= F and v(A) ̸= T. If (3) holds, then
clearly |=GC4+ A→wB, Γ ⇒ ∆. If (4) holds, then from the
semantic relation of →w, it follows that v(A→wB) ̸= F and
again |=GC4+ A→wB, Γ ⇒ ∆.
(∼∧L):
∼A, Γ ⇒ ∆
∼B, Γ ⇒ ∆
∼ (A ∧ B), Γ ⇒ ∆
(∼∧L)
Suppose that |=GC4+ ∼A, Γ ⇒ ∆, and |=GC4+ ∼B, Γ ⇒
∆. Then, either (5) v(γ) ̸= T for some γ ∈ Γ or v(δ) ̸= F for
some δ ∈ ∆ or (6) v(∼A) ̸= F or v(∼B) ̸= F. If (5) holds,
then clearly |=GC4+ ∼(A ∧ B), Γ ⇒ ∆. If (6) holds, then
from the deﬁnition of ∧, it follows that v(A∧B) ̸= T, whence
v(∼(A ∧ B)) = T, and again |=GC4+ ∼(A ∧ B), Γ ⇒ ∆.
Lemma 13 (Soundness of GC4+). If ⊢GC4+
Γ ⇒ ∆ is
provable in GC4+, then |=GC4+ Γ ⇒ ∆.
Proof: If the sequent Γ ⇒ ∆ is an instance of axiom (ID),
then Γ ⇒ ∆ is valid in GC4+. By induction on the depth of a
derivation of Γ ⇒ ∆ in GC4+, it follows, by Lemma 12, that
the sequent Γ ⇒ ∆ is valid in GC4+.
We are now in a position to prove the completeness
of GC4+. The proof below is similar to the Henkin proof
described in Avron [3].
Theorem 14 (Completeness of GC4+). The sequent calcu-
lus GC4+ is sound and complete for |=GC4+.
Proof: Let us denote the provability in GC4+ by ⊢GC4+.
For any sequent Σ over the language of GC4+,
⊢GC4+ Σ if Σ has a proof in GC4+.
We have to prove that, for any sequent Σ over the language
of GB4+,
|=GC4+ Σ iﬀ
⊢GC4+ Σ.
The backward implication, representing the soundness of the
system, follows immediately from Lemma 13. To prove the
forward implication completeness, we argue by contradiction.
Suppose Σ is a sequent such that ̸⊢GC4+ Σ. We shall prove
that ̸|=GC4+ Σ. Let us assume that the inclusion and union of
sequents are deﬁned componetwise, i.e.,
(Γ′ ⇒ ∆′) ⊆ (Γ′′ ⇒ ∆′′) iff Γ′ ⊆ Γ′′ and ∆′ ⊆ ∆′′,
(Γ′ ⇒ ∆′) ∪ (Γ′′ ⇒ ∆′′) = Γ′, Γ′′ ⇒ ∆′, ∆′′.
A sequent Σ0 is called saturated if it is closed under all of
the rules in GC4+ applied backwards. More exactly, for any
rule r in GC4+ whose conclusion is contained in Σ0, one of
its premises must also be contained in Σ0 (for a single premise
rule, this means its only premise must be contained in Σ0). For
example, if Σ0 = (Γ0 ⇒ ∆0) is saturated and (A → B) ∈ ∆0,
then in view of the rules (→R), we must have both ∼A ∈ ∆
and B ∈ ∆. In turn, if (A → B) ∈ Γ0, then in view of the
rule (→L), we must have either ∼A ∈ Γ or B ∈ Γ.
Let Σ = (Γ ⇒ ∆) be any sequent. We shall ﬁrst prove that
Σ can be extended to a saturated sequent Σ∗ = (Γ∗ ⇒ ∆∗),
which is not provable in GC4+. If Σ is already saturated, we
are done. Otherwise, we start with the sequent Σ and expand it
step by step by closing it under the subsequent rules of GC4+
without losing the non-provability property. Speciﬁcally, we
deﬁne a sequence Σ0, Σ1, Σ2, . . . such that
1)
Σi−1 ⊆ Σi for each i ≥ 1,
2)
Σi is not provable.
We take Σ0 = Σ1 = Σ; then, conditions 1 and 2 above
are satisﬁed for i = 1. Assume that we have the constructed
sequents Σ0, Σ1, . . . , Σk satisfying those conditions, and Σk
is still not saturated. Then, there is a rule
r = Π1 · · · Πl
Π
in GC4+ such that Π ⊆ Σk but Πi ̸⊆ Σk for i = 1, . . . , l.
Since Σk is not provable, there must be an i such that
Σk ∪ Πi is not provable. Indeed, if Σi ∪ Πi were provable
for all i, 1 ≤ i ≤ l, then we could deduce Σk ∪ Π from the
provable sequents Σk ∪Πi, i = 1, . . . , l, using rule r, which in
view of Σk ∪ Π = Σk would contradict the fact that Σk is not
provable. Thus, there is an i0, 1 ≤ i0 ≤ l, such that Σk ∪ Πi0
is not provable, and we take Σk+1 = Σk ∪Πi0. Obviously, the
sequents Σ0, Σ1, . . . , Σk+1 satisfy conditions 1 and 2 above.

125
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Since all of the rules in GC4+ have the subformula
property, it is clear that after a ﬁnite number n of such steps,
we will have added all possible premises of the rules r in
GC4+ whose conclusions are contained in the original sequent
Σ or its descendants in the constructed sequence, obtaining a
saturated extension Σ∗ = Σn of Σ, which is not provable in
GC4+.
Thus, we have
•
Σ∗ = (Γ∗ ⇒ ∆∗) is closed under the rules in GC4+
applied backwards,
•
Γ ⊆ Γ∗, ∆ ⊆ ∆∗,
•
⊢GC4+ Σ∗.
We use Σ∗ to deﬁne a counter-valuation for Σ, i.e., a legal
valuation v under the model of GC4+ such that v |=GC4+
Σ. For any propositional symbol p ∈ P evaluated with the
function deﬁned in Deﬁnition 10, namely, we put:
v(p) =







T if p ∈ Γ and p ̸∈ ∆
F if ∼p ∈ Γ and ∼p ̸∈ ∆
B if {p, ∼p} ∈ Γ
N otherwise
(1)
For the valuation for the strong negation in GC4+, deﬁne
the following:
v(¬p) =
{T if v(p) ∈ {F, N}
F if v(p) ∈ {T, B}
(2)
For any A, B of the set of all well-formed formulas of
GC4+,
v(∼A) = ∼v(A)
(3)
v(A →w B) =



T if v(A) ̸= T or v(B) ̸= F
F if v(A) = T and v(B) = F
otherwise
(4)
It is easy to see that v deﬁned as above is a well-deﬁned
mapping of the formulas of GC4+ into 4. Indeed, as Σ∗ is not
provable in GC4+, then by (1), v(p) is uniquely deﬁned for
any propositional symbol p, whence by (2, 3), v(φ) is uniquely
deﬁned for any well-formed formula.
Moreover, by (2, 3), v is a legal interpretation of the
language of GC4+ under the interpretation of GC4+, for the
interpretations of ∼, →w under v are compliant with the truth
tables of those operations for this interpretation.
As Σ∗ is an extension of Σ, in order to prove that ̸|=GC4+
Σ, it sufﬁces to prove that ̸|=GC4+ Σ∗. We should prove for
any well-formed formulas φ,
|=GC4+ γ for any γ ∈ Γ∗, ̸|=GC4+ δ for any δ ∈ ∆∗.
(5)
Equation (5) is proved by structural induction on the
formulas in S = Γ∗ ∪ ∆∗.
We begin with literals in S, having the form of either p or
∼p, where p ∈ P. We have the following cases:
•
φ = p. Then, by (1) and the fact that Γ∗ and ∆∗
are disjoint (for otherwise Σ∗ would be provable), we
have: v(φ) ̸= F if φ ∈ Γ∗ and v(φ) ̸= T if φ ∈ ∆∗
•
φ = ∼p. If φ ∈ Γ∗, then by (1), v(p) ̸= T, whence
v(φ) = ∼F = T by (3). In turn, if φ ∈ ∆∗, then
φ ̸∈ Γ∗, whence v(p) ̸= F and v(φ) = ∼v(p) ̸= T.
•
φ = ¬p. If φ ∈ Γ∗, then by (1) v(p) ̸= {T, B},
whence v(φ) = T by (2). In turn, if φ ∈ ∆∗, then
φ ̸∈ Γ∗, whence v(p) ̸= {F, N} and v(φ) = ∼v(p) =
F.
Here, we deﬁne the rank ρ of formula φ by
ρ(p) = 1, ρ(∼φ) = ρ(φ) + 1, ρ(φ → ψ) = ρ(φ) + ρ(ψ) + 1
Now we assume that the deﬁnition in (5) is satisﬁed for the
formulas in S of rank up to n and suppose that A, B ∈ S are
at most of rank n. We prove that (5) holds for ∼B, B ∧ C
and B ∨ C.
We begin with negation. Let φ = ∼A. As the case of
A = p ∈ P has already been considered, it remains to consider
the following two cases:
•
A = ∼B. Then, we have φ = ∼∼B.
◦
If φ ∈ Γ∗, then by rule (∼∼L), we have B ∈
Γ∗, since Σ∗ is a saturated sequent. Hence, by
inductive assumption, v(B) = T, and by (3),
v(φ) = ∼∼T = T.
◦
In turn, if φ ∈ ∆∗, then by rule (∼∼R),
we have B ∈ ∆∗, whence by inductive as-
sumption, v(B) = F, and in consequence,
v(φ) = ∼∼F = F.
•
A = B ∧ C. We again have two cases:
◦
If φ ∈ Γ∗, then by rule (∼∧L), we have
∼B, ∼C ∈ Γ∗ since Σ∗ is saturated. Hence, by
inductive assumption, v(B) ̸= T and v(C) ̸=
T (because v(∼B) ̸= F and v(∼C) ̸= F).
Thus, by the truth table v(B ∧ C) ̸= T;
therefore, v(φ) = ∼F = T.
◦
If φ ∈ ∆∗, then by rule (∼∧R), we have either
∼B ∈ ∆∗ or ∼C ∈ ∆∗. By inductive assump-
tion, this yields either v(B) ̸= T or v(C) ̸= T.
Thus, by the truth table, v(B ∧ C) ̸= T,
whence v(φ) = ∼T = F.
•
A = B ∨ C. We again have two cases:
◦
If φ ∈ Γ∗, then by rule (∼∨L), we have
∼B, ∼C ∈ Γ∗ since Σ∗ is saturated. Hence, by
inductive assumption, v(B) ̸= T and v(C) ̸=
T (because v(∼B) ̸= F and v(∼C) ̸= F).
Thus, v(B ∨ C) ̸= T, and v(φ) = ∼F = T.
◦
If φ ∈ ∆∗, then by rule (∼∨R) we have
either ∼B ∈ ∆∗ or ∼C ∈ ∆∗. By inductive
assumption, this yields either v(B) ̸= F or
v(C) ̸= F. Thus, v(B ∨ C) ̸= F, whence
v(φ) ̸= T = F.
It remains to consider implication. Let φ = A →w B. We
have the following two cases:
•
φ ∈ Γ∗. Then, as Σ∗ is saturated, by rule (→wL), we
have either A ∈ ∆∗ or B ∈ Γ∗. In view of (1) and (3),
and the fact that φ ̸∈ ∆∗, this yields either v(A) ∈

126
International Journal on Advances in Intelligent Systems, vol 11 no 1 & 2, year 2018, http://www.iariajournals.org/intelligent_systems/
2018, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
{F, N} or v(B) ∈ {T, B}. Thus v(A →w B) ̸= F,
and v(φ) = T.
•
φ ∈ ∆∗. Then, as Σ∗ is saturated, by rules (→wR)
we have A ∈ Γ∗ and B ∈ ∆∗. In view of (1) and (3),
and the fact that φ ̸∈ Γ∗, this yields v(A) ∈ {T, B}
and v(B) ∈ {F, N}, thus, v(A →w B) ̸= T, and
v(φ) = F.
Thus, (5) holds, and |=GC4+ Σ, which ends the complete-
ness proof.
GC4+ may be one candidate for the extended version of
decision logic that is needed to handle uncertain information
and be tolerant to inconsistency.
VIII.
CONCLUSION AND FUTURE WORK
In this paper, we propose an extension of the decision logic
of rough sets to handle uncertainty, ambiguity and inconsistent
states in information systems based on rough sets. We inves-
tigate some properties of information system based on rough
sets and deﬁne some characteristics of a certain relationship for
the interpretation of truth values. We obtain some observations
for a relationship between the interpretation with four-valued
truth values and the regions deﬁned with rough sets. To handle
these characteristics we have introduced partial semantics with
consequence relations for the axiomatization with many-valued
logics and proposed a uniﬁed formulation of the decision logic
of rough sets and many-valued logics. We also extend the
language of many-valued logics with weak negation to enable
the deduction theorem or the rule of modus ponens. We have
shown that the system GC4+ is sound and complete with
Belnap’s four-valued semantics.
In future work, the extension of language should be
investigated, e.g., an operator to handle the granularity of
objects or the uncertainty of a proposition, which is related
to some kind of modal operators to recognize the crispness
of objects. In this paper, we introduce rules of weak negation
and weak implication to extend many-valued logics to handle a
deduction system more usefully. To grasp the information state
represented with information in detail, another extension of
language should be investigated, such as modal type operators
in a paraconsistent version of Łukasiewicz logic J3 [20].
Furthermore, we need to investigate another version of decision
logics based on an extended version of rough set theories, e.g.,
the variable precision rough set (VPRS) [21]. VPRS models
are an extension of rough set theory, which enables us to treat
probabilistic or inconsistent information in the framework of
rough sets. By these further investigations, a much more useful
version of extended decision logic is expected for practical
application and actual data analytics.
REFERENCES
[1]
Y. Nakayama, S. Akama, and T. Murai, “Deduction System for Decision
Logic based on Partial Semantics,” SEMAPRO 2017 The Eleventh
International Conference on Advances in Semantic Processing, 2017,
pp. 8–11.
[2]
Z. Pawlak, “Rough Sets: Theoretical Aspects of Reasoning about Data,”
Kluwer Academic Publishers, 1991.
[3]
A. Avron and B. Konikowska, “Rough Sets and 3-Valued Logics,”
Studia Logica, vol. 90, 2008, pp. 69–92.
[4]
D. Ciucci and D. Dubois, “Three-Valued Logics, Uncertainty Manage-
ment and Rough Sets,” in Transactions on Rough Sets XVII, Lecture
Notes in Computer Science book series (LNCS, volume 8375), 2001,
pp. 1–32.
[5]
A. Urquhart, “Basic Many-Valued Logic,” Handbook of Philosophical
Logic, vol. 2, 2001, pp. 249–295.
[6]
T.-F. Fan, W.-C. Hu, and C.-J. Liau, “Decision logics for knowledge
representation in data mining,” in 25th Annual International Computer
Software and Applications Conference. COMPSAC, 2001, pp. 626–631.
[7]
Y. Lin and L. Qing, “A Logical Method of Formalization for Granular
Computing,” IEEE International Conference on Granular Computing
(GRC 2007), 2007, pp. 22–22.
[8]
S. Akama, T. Murai, and Y. Kudo, “Reasoning with Rough Sets, Logical
Approaches to Granularity-Based Framework,” 2018.
[9]
J. Nuel D. Belnap, “A Useful Four-Valued Logic,” in Modern Uses of
Multiple-Valued Logic, vol. 2.
Reidel Publishing, 1977, pp. 5–37.
[10]
A. R. Anderson and J. Nuel D. Belnap, “Tautological Entailments,”
Philosophical Studies: An International Journal for Philosophy in the
Analytic Tradition, vol. 13, 1975, pp. 9–24.
[11]
J. Van Benthem, “Partiality and Nonmonotonicity in Classical Logic,”
Logique et Analyse, vol. 29, 1986, pp. 225–247.
[12]
R. Smullyan, “First-Order Logic,” Dover Books, 1995.
[13]
R. Muskens, “On Partial and Paraconsistent Logics,” Notre Dame J.
Formal Logic, vol. 40, 1999, pp. 352–374.
[14]
V. Degauquier, “Partial and paraconsistent three-valued logics,” Logic
and Logical Philosophy, vol. 25, 2016, pp. 143–171.
[15]
S. Akama and Y. Nakayama, “Consequence relations in DRT,” Proc.
of The 15th International Conference on Computational Linguistics
COLING 1994, vol. 2, 1994, pp. 1114–1117.
[16]
G. Priest, “The Logic of Paradox,” Journal of Philosophical Logic,
vol. 8, 1979, pp. 219–241.
[17]
S. Kleene, “Introduction to Meta-mathematics,” 1952.
[18]
G. Priest, “An Introduction to Non-Classical Logic From If to Is 2nd
Edition,” 2008.
[19]
P. Doherty, “NM3 - A three-valued cumulative non-monotonic formal-
ism,” in Logics in AI, European Workshop (JELIA), 1990, pp. 196–211.
[20]
R. L. Epstein, “The Semantic Foundations of Logic,” 1990.
[21]
W. Ziarko, “Variable precision rough set model,” Journal of Computer
and System Science 46, 1993, pp. 39–59.

