Design and Implementation of a BitTorrent Tracker
Overlay for Swarm Uniﬁcation
C˘alin-Andrei Burloiu, R˘azvan Deaconescu, Nicolae T, ˘apus,
Automatic Control and Computers Faculty
Politehnica University of Bucharest
Emails: calin.burloiu@cti.pub.ro,{razvan.deaconescu,nicolae.tapus}@cs.pub.ro
Abstract—The deployment of the BitTorrent protocol in the
early 2000s has meant a signiﬁcant shift in Peer-to-Peer tech-
nologies. Currently the most heavily used protocol in the Internet
core, the BitTorrent protocol has sparked numerous implementa-
tions, commercial entities and research interest. In this paper, we
present a mechanism that allows integration of disparate swarms
that share the same content. We’ve designed and implemented a
novel inter-tracker protocol, dubbed TSUP, that allows trackers
to share peer information, distribute it to clients and enable
swarm uniﬁcation. The protocol forms the basis for putting
together small swarms into large, healthy ones with reduced
performance overhead. Our work achieves its goals to increase
the number of peers in a swarm and proves that the TSUP
incurred overhead is minimal.
Index Terms—Peer-to-Peer, BitTorrent, tracker, uniﬁcation,
TSUP, swarm
I. INTRODUCTION
The continuous development of the Internet and the increase
of bandwidth capacity to end-users have ensured the context
for domination of content-distribution protocols in the Internet.
Currently, most Internet trafﬁc is content Peer-to-Peer traf-
ﬁc, mostly BitTorrent. Peer-to-Peer protocols have positioned
themselves as the main class of protocols with respect to
bandwidth usage.
The arrival of the BitTorrent protocol in the early 2000s has
marked a burst of interest and usage in P2P protocols, with the
BitTorrent protocol currently being accounted for the biggest
chunk in Internet trafﬁc [3]. Modern implementations, various
features, focused research and commercial entities have been
added to the protocol’s environment.
In this paper, we address the issue
of unifying separate
swarms that take part in a session sharing the same ﬁle. We
propose a tracker uniﬁcation protocol that enables disparate
swarms, using different .torrent ﬁles, to converge. We deﬁne
swarm uniﬁcation as enabling clients from different swarms to
communicate with each other. The basis for the uniﬁcation is a
“tracker-centric convergence protocol” through which trackers
form an overlay network send peer information to each other.
A. BitTorrent Keywords
A peer is the basic unit of action in any P2P system, and, as
such, a BitTorrent system. It is typically a computer system
or program that is actively participating in sharing a given
ﬁle in a P2P network. A peer is generally characterized by its
implementation, download/upload bandwidth capacity (or lim-
itation), download/upload speed, number of download/upload
slots, geolocation and general behavior (aggressiveness, entry–
exit time interval, churn rate).
The context in which a BitTorrent content distribution
session takes place is deﬁned by a BitTorrent swarm which is
the peer ensemble that participate in sharing a given ﬁle. It is
characterized by the number of peers, number of seeders, ﬁle
size, peers’ upload/download speed. swarm, one that allows
rapid content distribution to peers, is generally deﬁned by a
good proportion of seeders and stable peers. We deﬁne stable
peers as peers that are part of the swarm for prolonged periods
of time.
Communication of peers in a swarm is typically mediated
by a BitTorrent tracker or several trackers which are deﬁned
in the .torrent ﬁle. It is periodically contacted by the peers
to provide information regarding piece distribution within the
swarm. A peer would receive a list of peers from the tracker
and then connect to these peers in a decentralized manner. As
it uses a centralized tracker, the swarm may suffer if the tracker
is inaccessible or crashes. Several solutions have been devised,
such as PEX (Peer EXchange) [1] or DHT (Distributed Hash
Table) [11]. The tracker swarm uniﬁcation protocol presented
in this article enables redundancy by integrating multiple
trackers in a single swarm.
B. Tracker Swarm Uniﬁcation Protocol
The goal of the tracker swarm uniﬁcation protocol is the
integration of peers taking part in different swarms that share
the same ﬁle. These swarms, named common swarms, use
the same content but different trackers.
We have designed and implemented a tracker network
overlay that enables trackers to share information and integrate
peers in their respective swarms. The overlay is based on the
Tracker Swarm Uniﬁcation Protocol (TSUP) that allows up-
date notiﬁcation and delivery to trackers from the overlay. The
protocol design is inspired by routing protocols in computer
networks.
At this point, as proof of concept, the tracker overlay is
deﬁned statically. All trackers know beforehand the host/IP ad-
dresses and port of the neighboring trackers and contact them
to receive required information. The integration of dynamic
tracker discovery is set as future work. Each tracker may act
as a “router”, sending updates to neighboring trackers that may
themselves send them to other trackers.
217
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

II. TRACKER UNIFICATION
A. Motivation
It is also possible that different users create different .torrent
ﬁles, but with the same ﬁles for sharing. If the .torrent ﬁles
don’t refer the same tracker, each one will represent another
swarm. The peers from different swarms do not know each
other and integration is not accomplished.
By unifying swarms the communication between peers is
possible. Every client will have the opportunity of increased
connections to other peers, increasing the download speed and
decreasing the download time. By having more peers in the
swarm, the number of stable seeders also increases and the
client can approach its maximum potential.
B. Solution
The protocol proposed in this article, named Tracker
Swarm Uniﬁcation Protocol (TSUP), renders possible the
uniﬁcation of swarms which share the same ﬁles, by employ-
ing a tracker network overlay. A tracker which implements
this protocol will be referred here as an uniﬁed tracker.
Figure 1.
Uniﬁed trackers
Torrent ﬁles created for the same content have the same
info hash. So in swarms that share the same ﬁle(s) (common
swarms), peers will announce to the tracker the same info -
hash. Therefore, TSUP capable trackers can “unify” them by
communicating with each other in order to change information
about peers which contribute to shared ﬁles with the same
info hash. In order to accomplish this, uniﬁed trackers send
periodic updates to each other, containing information about
the peers from the network.
III. TSUP
As mentioned above, TSUP is the acronym for Tracker
Swarm Uniﬁcation Protocol. TSUP is responsible with the
communication between trackers for peer exchange informa-
tion in common swarms.
A. Protocol Overview
For transport layer communication, the protocol uses UDP
(User Datagram Protocol) to reduce resource consumption. A
tracker already possesses a lot of TCP (Transport Control
Protocol) connections with each other peers. Adding more
TCP connections to each neighboring tracker would increase
TSUP overhead too much for a big tracker overlay. The
messages passed from one tracker to another do not need
TCP’s ﬂow control and need a lower level of reliability than
TCP as it will be explained below. The simplicity of the
UDP protocol gives the advantage of a smaller communication
overhead.
In TSUP’s operation the following processes may be iden-
tiﬁed:
• Virtual connections establishment process: A three-
way-handshake responsible with establishing a UDP
“connection” between two linked trackers at the appli-
cation layer. The process is started by a SYN packet
(synchronization packet).
• Uniﬁcation process: The trackers exchange uniﬁcation
packets (named SUMMARY packets) during a three-way-
handshake in order to ﬁnd out which are the common
swarms.
• Updating process: The trackers exchange peers from
common swarms, encapsulated in UPDATE packets.
• Election process: The establishment of a swarm leader
which is responsible with receiving all updates from
the neighboring linked trackers, aggregating them and
sending the results back.
The uniﬁcation process includes an updating process in its
three-way-handshake, such that the two operations, uniﬁcation
and update, are run in pipeline. Whenever a new torrent ﬁle
is registered to the tracker, a new swarm is created. The
uniﬁcation process is triggered and a SUMMARY packet is
immediately sent to each neighboring tracker, informing the
others of the new swarm.
The updating process is started periodically, such that
UPDATE packets are sent at a conﬁgurable interval of time to
each tracker in a common swarm. A typical update interval is
30 seconds.
In order to maintain the virtual connections between track-
ers, HELLO packets are sent periodically, acting as a keep-
alive mechanism. A typical HELLO interval is 10 seconds,
but its value may be changed from protocol conﬁguration. If
no HELLO packet is received during a conﬁgurable interval,
called disconnect interval, the virtual connection is dropped
and the virtual connection establishment process is restarted
for that link by sending a SYN packet.
Some packets, such as UPDATE packets, must be acknowl-
edged. If no answer or acknowledgement is received, the
packet is retransmitted. For example, UPDATE packets are
resent at each hello interval until an acknowledgement is
received.
It is not a problem if some UPDATE packets are lost
and arrive later to destination. However they need to be
218
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

acknowledged and they are retransmitted in order to increase
the probability of their arrival. TCP, by offering reliability, pro-
vides a faster delivery of updates in case of a network failure
which is not needed in the case of TSUP. Lower overhead is
considered here more important that fast retransmission. Thus
TSUP implements a timer-driver retransmission, as opposed
to data-driven used by TCP [10].
Periodically sent packets, the keep-alive mechanism, ac-
knowledgements and retransmissions contribute to the low
reliability needed in TSUP. They help exceed the drawbacks
of the UDP transport protocol, and also give a more efﬁcient
communication than a TCP one.
B. Tracker Awareness
Tracker communication is conditioned by awareness. For
this purpose, in the current version of the protocol, each tracker
is conﬁgured statically with a list of other communicating
trackers. Each element of the list represents a link which
is identiﬁed by the tracker host name (URL or IP address)
and port. Other parameters for the link may be conﬁgured;
some of them may be speciﬁc to the implementation. If the
virtual connection establishment process is successful, the link
becomes a virtual connection, which is conserved with keep-
alive packets (HELLO packets).
A future version of the protocol will incorporate the design
of a tracker discovery mechanism capable of generating the list
of communicating trackers for each tracker dynamically, with
the beneﬁt of scalability and reduction of the administrative
overhead.
C. Tracker Networks
To improve TSUP’s scalability, trackers may be grouped
together in networks named tracker networks. Connections in
all tracker networks are full mesh. Two networks are connected
with the aid of border trackers (see Figure 2).
Figure 2.
Tracker Networks
To conﬁgure a topology which contains multiple networks,
each link of each tracker must be set as an internal link or an
external link (see Figure 2). Trackers connected with internal
links are part of the same tracker network; trackers connected
with external links are part of other networks. However, the
ones from the ﬁrst category may also be classiﬁed as belonging
to an internal network and the ones from the second category
as being from an external network. A complete graph,
using internal links as edges is an internal network, and a
complete graph with external links as edges is an external
network (see Figure 2). A tracker which has both internal and
external links is a border tracker. Peer information received
from an internal network originates from internal peers while
information received from an external network originates from
external peers. Peers connected to a tracker with TCP, via the
BitTorrent protocol, are called own peers. The links between
trackers in a network, whether internal or external, must be
full mesh.
In order to use a scalable and low resource consuming
communication within a network, trackers are organized in
groups depending on the uniﬁed swarm. Therefore a tracker
may belong to more than one group at the same time, the
number of groups it belongs being equal with the number of
swarms present on that tracker. Each group contains a swarm
leader responsible for sending peer updates to peers in the
group. The other group members, instead of sending updates
to other members on a full mesh graph, it sends updates to
the swarm leader on a tree graph, reducing updating overhead.
These updates propagate to other peers in the group.
In accordance to graph theory, the number of updates sent
in a swarm without the swarm leader mechanism (full mesh)
is computed by using the formula below:
UPDATESfullmesh = 2 · n(n − 1)
2
= n(n − 1)
(1)
The number of updates sent within a swarm using the swarm
leader mechanism (tree) are:
UPDATESswarmleader = 2(n − 1)
(2)
As may be observed from the formulas above the complex-
ity decreases from O(n2) in a full mesh update scheme to
O(n) with the swarm leader scheme.
Each swarm contains two swarm leaders, one for the internal
network (which sends updates through internal links), called
internal swarm leader and one for the external network (which
communicates updates through external links), named external
swarm leader.
As connections are full mesh in an internal network, the
internal peers (received from other trackers from the internal
network) are distributed to other internal trackers only by
the internal swarm leader and in no other circumstance by
another tracker. Through analogy, in an external network, peers
(received from other trackers from the external network) are
distributed to other external trackers only through the external
swarm leader. On the other hand, internal peers are distributed
to external trackers and external peers to the internal trackers.
219
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

Own tracker peers are distributed both to the internal and the
external network.
Swarm leaders are automatically chosen by trackers during
the election process which is started periodically. There are
metrics used in order to choose the most appropriate leader.
The ﬁrst and most important one prefers as swarm leader a
tracker which possesses the smallest number of swarm leader
mandates. The number of mandates is the number of swarms
where a tracker is swarm leader. This balances the load of the
trackers – as the number of mandates of a tracker increases,
its load also increases. In the current version of the protocol
the grouping of trackers into networks and the selection of
border trackers is done manually (statically) by the system
administrator.
When two network trackers A1 and A2 are connected
indirectly through other network trackers Bj, if A1 and A2 use
a common swarm and Bj doesn’t use this swarm, then the Ai
trackers cannot unify unless the border trackers are speciﬁed in
the conﬁguration. This happens because the conﬁgured border
trackers must unify with any swarm, although they do not have
peers connected from that swarm.
Grouping trackers in networks increases system scalability,
but also network convergence time. The update timers can be
set to a lower value for border trackers to limit convergence
overhead. The system administrator should opt between scal-
ability and convergence and adapt the protocol parameters to
the speciﬁc topology.
IV. IMPLEMENTATION DETAILS
TSUP is currently implemented in the popular XBT Tracker
[9], implemented in C++. The extended TSUP capable tracker
was dubbed XBT Uniﬁed Tracker.
The original tracker implements an experimental UDP Bit-
Torrent protocol known as UDP Tracker. Because TSUP also
uses UDP and communication takes place using the same port,
TSUP-speciﬁc packets use the same header structure as the
UDP Tracker, enabling compatibility.
XBT Tracker uses a MySQL database [8] for conﬁguration
parameters [7] and for communication with a potential front
end. XBT Uniﬁed Tracker adds parameters for conﬁgurations
that are speciﬁc for TSUP and uses a new table in order
to remember links with other trackers and their parameters.
Tracker awareness, as described in III-B, is implemented in
the database.
Besides the HTTP announce and scrape URLs, the original
tracker uses other web pages for information and debugging
purpose. The uniﬁed tracker adds two extra information web
pages for monitoring. The trackers web page shows details
about every link and the state of the connection for that link.
For every swarm, the swarms web page shows the list of peers
and the list of trackers connected for that swarm.
V. EXPERIMENTAL SETUP
TSUP testing activities used a virtualized infrastructure and
a Peer-to-Peer testing framework running on top of it. We
were able to deploy scenarios employing various swarms,
ranging from a 4-peer and 1-tracker swarm and a 48-peer
and 12-tracker swarm. Apart from testing and evalution, the
infrastructure has been used to compare the proposed tracker
overlay network with classical swarms using a single tracker
and the same number of peers. We will show that a uniﬁed
swarm has similar performance when compared to a single
tracker (classical) swarm.
In order to deploy a large number of peers we have used a
thin virtualization layer employing OpenVZ [5]. OpenVZ is a
lightweight solution that allows rapid creation of virtual ma-
chines (also called containers). All systems are identical with
respect to hardware and software components. The deployed
experiments used a single OpenVZ container either for each
tracker or peer taking part in a swarm. A virtualized network
has been build allowing direct link layer access between
systems – all systems are part of the same network; this allows
easy conﬁguration and interraction.
The experiments made use of an updated version of hrktor-
rent [2], a lightweight application built on top of libtorrent-
rasterbar [4]. Previous experiments [13] have shown libtorrent-
rasterbar outperforming other BitTorrent experiments leading
to its usage in the current experiments. The experiments we
conducted used a limitation typical to ADSL2+ connections
(24 Mbit download speed limitation, 3 Mbit upload speed
limitation).
Figure 3.
Sample Run Graphic
An automatically-generated sample output graphic, describ-
ing a 48 peer session (12 seeders, 36 leechers, 12 trackers)
sharing a 1024 MB ﬁle is shown in Figure 3. The image
presents download speed evolution for all swarm peers. All
of them are limited to 24 Mbit download speed and 3 Mbit
upload speed.
All peers use download speed between 2 Mbit and 5 Mbit on
the ﬁrst 2000 seconds of the swarm’s lifetime. As the leechers
become seeders, the swarm download speed increases rapidly
as seen in the last part of the swarm’s lifetime, with the last
leechers reaching the top speed of 24 Mbit.
220
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

VI. SCENARIOS AND RESULTS
In order to test the overhead added by TSUP to BitTorrent
protocol, we have made a set of test scenarios which compare
the average download speed for a swarm with uniﬁed trackers
and for another swarm with just one non-uniﬁed tracker, but
the same number of leechers and seeders. Each test scenario
is characterized by the shared ﬁle sizes, the number of peers
and, in the case of tests with uniﬁed trackers, by the number
of trackers. We shared 3 ﬁles of sizes 64MB, 256MB and
1024MB. In the test scenarios with uniﬁed trackers for each
ﬁle we tested the swarm with 1, 2, 4, 8 and 12 trackers. On
each tracker there were connected 4 peers, from which 1 is a
seeder and 3 are leechers. So, for example, in a scenario with
8 trackers there are 8 seeders and 24 leechers, totalizing 32
peers. Having 3 ﬁles and 12 trackers in the biggest scenario we
needed to create 36 .torrent ﬁles, because for each shared ﬁle
we made a .torrent ﬁle for each tracker. In the corresponding
test scenarios with non-uniﬁed trackers, there is just one
.torrent ﬁle for each shared ﬁle. We varied the numbers of
seeders and leechers connected to the tracker so that they have
the same cardinality with the corresponding uniﬁed trackers
scenarios.
Each test scenario has been repeated 20 times in order to
allow statistical relevance. The average download speed was
calculated as an average value from the 20 sessions.
Results may be seen in the table from Figure 4, which
depicts the results for each ﬁle size, in the top (64MB), middle
(256MB) and bottom part of it (1024MB), respectively. For
each of this two situations the mean download speed (“mean
dspeed”) and relative standard deviation (“rel.st.dev.”) is de-
picted. In the right part, titled “perf. Decrease” (performance
decrease), shows the percent of download speed decrease
induced by the overhead of the TSUP. In the left side of the
table the number of seeders and leechers for each scenario is
shown. The percentage value for download speed decrease is
computed using the standard formula:
d = 100% · dsSingleT racker − dsUnifiedT rackers
dsSingleT racker
,
(3)
where ds is an abbreviation from mean download speed.
All positive percentage values from the “perf. decrease”
header mark a decrease of performance caused by TSUP
overhead. A negative download speed decrease percentage
shows that there is an increase instead of a decrease.
The uniﬁcation which takes place in XBT Uniﬁed Tracker
introduces an overhead in the BitTorrent protocol in compari-
son to XBT Tracker. In theory the performance decrease must
always be positive. But there are situations where the percent-
ages are negative, which could suggest that TSUP increases the
speed, thus reducing the download time. But this performance
increase is not due to TSUP, but is caused by another fact.
In all scenarios, in the Single Tracker experiments, at the
beginning all peers are started almost simultaneously, creating
a ﬂash crowd. So in this situation the communication between
peers will start immediately, but when multiple trackers are
uniﬁed, the TSUP imposes a delay before each peer ﬁnds
out of all the others, because of the convergence time. It is
known that sometimes it is better when peers enter the swarm
later [12], explaining the presence of negative values for the
performance decrease.
Figure 4.
Tracker Networks
From results in Figure 4 several conclusions are drawn.
The TSUP overhead becomes more insigniﬁcant, on the ﬁrst
hand, when the number of peers increases (and proportionally
the number of seeders) and, on the other hand, when the
ﬁle size increases. When the overhead is insigniﬁcant, the
percentages have lower values. TSUP convergence time causes
221
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

the avoidance of a ﬂash crown at the beginning of each
scenario, thus inducing a small performance increase. Starting
from 8 seeders and more TSUP performance decrease becomes
smaller that the performance increase caused by avoiding
the ﬂash crowd. That is why some performance decrease
values are negative. The relative standard deviation is generally
increasing with the number of peers, but is decreasing when
the ﬁle size increases. The values can be considered normal,
taking into account the number of peers that are part of a
swarm.
Due to the small values of performance decrease and relative
standard deviation, we concluded that TSUP overhead is
insigniﬁcant for small to medium-sized swarms (less than 50
peers) which share big ﬁles (1GB). BitTorrent is generally
used for sharing large ﬁles and TSUP allows the increase of
swarms size; these two factors come as an advantage for this
technology.
Swarm uniﬁcation increases the number of peers for a
shared ﬁle, but this fact does not always grant a bigger
download speed, as it can be seen in Figure 4. However, having
a swarm with a bigger number of peers has three advantages.
First of all increases the chance that more seeders will later
be available and a big proportion of stable seeders increases
download speed. The second reason is that bigger swarms
increase shared ﬁle’s availability by making redundancy. The
third reason is that a bigger swarm is more attractive for new
users, giving the possibility of creating a big social network,
which is an important thing these days.
VII. CONCLUSION AND FURTHER WORK
A novel overlay network protocol on top of BitTorrent,
aiming at integrating peers in different swarms, has been pre-
sented. Dubbed TSUP (Tracker Swarm Uniﬁcation Protocol),
the protocol is used for creating and maintaining a tracker
network enabling peers in swarms to converge in a single
swarm. Each initial swarm is controlled by a different tracker;
trackers use the overlay protocol to communicate with each
other and, thus, take part in a greater swarm.
We have used an OpenVZ-based Peer-to-Peer testing infras-
tructure to create a variety of scenarios employing an updated
version of the XBT Tracker, dubbed XBT Uniﬁed Tracker. The
protocol incurs low overhead and overall performance. The
uniﬁed swarm is close to the performance of single-tracker
swarm consisting of the same number of seeders and leechers
with the beneﬁt of increased number of peers, which boosts
download speed. The increased number of peers provides the
basis for improved information for various overlays (such as
social networks) and allows a healthier swarm – given enough
peers, if some of them decide to leave the swarm, some peers
will still take part in the transfer session.
Experiments have involved different swarms, with respect
to the number of peers and trackers, and different ﬁle sizes
using simulated asymmetric links. The table at the end of the
article shows a summary of results, which prove the fact that
the protocol has a low overhead.
At this point each tracker uses a statically deﬁned pre-
conﬁgured list of neighboring trackers. One of the main
goals for the near future is to enable dynamic detection of
neighboring trackers and ensure extended scalability. We are
currently considering two approaches: the use of a tracker
index where trackers’ IP/host addresses and ports are stored or
the use of a completely decentralized tracker discovery overlay
similar to DHT’s discovery methods.
As proof of concept, our test scenarios have focused on
homogeneous swarms. All peers in swarms are using the same
implementation and the same bandwidth limitation. All peers
enter the swarm at about the same time, with some delay until
swarm convergence, in case of the uniﬁed tracker protocol.
We plan to create heterogeneous swarms that use different
clients with different characteristics. The number of seeders
and leechers in initial swarms are also going to be altered and
observe the changes incurred by using the uniﬁcation protocol.
ACKNOWLEDGMENT
This paper is suported from POSCCE project GEEA 226 -
SMIS code 2471, which is co-founded through the European
Found for Regional Development inside the Operational Sec-
toral Program ”Economical competivity improvement” under
contract 51/11.05.2009, and from the Sectoral Operational
Programme Human Resources Development 2007-2013 of the
Romanian Ministry of Labour, Family and Social Protection
through the Financial Agreement POSDRU/6/1.5/S/19.
Special thanks go the the P2P-Next [6] team who is working
enthusiastically to deliver the next generation peer-to-peer
content delivery platform. Their dedication, professionalism
and vision are a constant factor of motivation and focus for
our work.
REFERENCES
[1] DHT & PEX. http://lifehacker.com/5411311/bittorrents-future-dht-pex-
and-magnet-links-explained. [Online, accessed 31-March-2011].
[2] hrktorrent.
http://50hz.ws/hrktorrent/.
[Online, accessed 31-March-
2011].
[3] ipoque Internet Studies.
http://www.ipoque.com/resources/internet-
studies/internet-study-2008 2009. [Online, accessed 31-March-2011].
[4] libtorrent (Rasterbar).
http://www.rasterbar.com/products/libtorrent/.
[Online, accessed 31-March-2011].
[5] OpenVZ. http://wiki.openvz.org/. [Online, accessed 31-March-2011].
[6] P2P-Next. http://www.p2p-next.org/. [Online, accessed 31-March-2011].
[7] XBT
Conﬁguration
Options.
http://www.visigod.com/xbt-
tracker/conﬁguration. [Online, accessed 31-March-2011].
[8] XBT Table Documentation.
http://www.visigod.com/xbt-tracker/table-
documentation. [Online, accessed 31-March-2011].
[9] XBT Tracker by Olaf van der Spek. http://xbtt.sourceforge.net/tracker/.
[Online, accessed 31-March-2011].
[10] H. Balakrishnan. Lecture 3; Coping with Best-Effort: Reliable Transport.
2005.
[11] H. Balakrishnan, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica.
Looking up Data in P2P Systems. Commun. ACM, 46:43–48, February
2003.
[12] A. R. Bharambe, C. Herley, and V. N. Padmanabhan. Understanding
and Deconstructing BitTorrent Performance. Technical Report MSR-TR-
2005-03, Microsoft Research, 2005.
[13] R. Deaconescu, G. Milescu, B. Aurelian, R. Rughinis,, and N. T, ˘apus,. A
Virtualized Infrastructure for Automated BitTorrent Performance Testing
and Evaluation.
International Journal on Advances in Systems and
Measurements, 2(2&3):236–247, 2009.
222
ICNS 2011 : The Seventh International Conference on Networking and Services
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-133-5

