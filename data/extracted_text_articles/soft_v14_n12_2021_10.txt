107
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Methodology for Extracting Knowledge from a
Gaming Simulation Using Data Envelopment
Analysis
Akinobu Sakata
Department of Computational Intelligence and System Science
Tokyo Institute of Technology
Yokohama, Japan
e-mail: sakata.a.aa@m.titech.ac.jp
Takamasa Kikuchi
Graduate School of Business Administration
Keio University
Yokohama, Japan
e-mail: takamasa kikuchi@keio.jp
Ryuichi Okumura
Career Innovation Division
Mitsubishi Research Institute,Inc.
Tokyo, Japan
e-mail: okuty@mri.co.jp
Masaaki Kunigami
Department of Computer Science
Tokyo Institute of Technology
Yokohama, Japan
e-mail: mkunigami@gakushikai.jp
Atsushi Yoshikawa
Department of Computer Science
Tokyo Institute of Technology
Yokohama, Japan
e-mail: at sushi bar@dis.titech.ac.jp
Masayuki Yamamura
Department of Computer Science
Tokyo Institute of Technology
Yokohama, Japan
e-mail: my@c.titech.ac.jp
Takao Terano
Chiba University of Commerce
Ichikawa, Japan
e-mail: terano@cuc.ac.jp
Abstract—In this study, we propose a methodology for ex-
tracting knowledge about which play logs are superior (inferior)
to other play logs under certain criteria from the results of a
gaming simulation. Previous research has enabled facilitators to
know where players ’play logs output from gaming simulations
are positioned in all possible scenarios. However, facilitators have
no valid solution to encourage players to change their behavior
in gaming simulations. The proposed methodology enables a
facilitator to identify the players who show similar behavior
and performance to the target player under certain criteria, and
to present to the play logs which show superior performance
than the target player ’s play log to the target player. In order
to achieve our research objective, we created several software
agents instead of human players to play a gaming simulation
for career education, and analyzed the output play logs using
data envelopment analysis. As a result, the desired knowledge
was extracted. We argue that the extracted knowledge should
be applied for debrieﬁng. The proposed methodology is ﬂexible
enough to work under both conditions where all players are
human and where human and machine agents are mixed as
players.
Index Terms—Gaming simulation; data envelopment analysis;
knowledge extraction; debrieﬁng; facilitation.
I. INTRODUCTION
The objective of this study is to propose a methodology
to extract knowledge about which play logs are superior (or
inferior) to other play logs under certain criteria from the
results of a gaming simulation. In order to achieve our research
objective, we use a gaming simulation that is a modiﬁed
version of the Shin-Life Career Game [1] presented at eKNOW
2021, and the Data Envelopment Analysis (DEA) [2]. A
gaming simulation is a simulation in which humans participate
in the simulation situation as players and are inﬂuenced by the
decisions of those players [3]. DEA is a method that uses linear
programming to measure the efﬁciency of a decision-making
unit (DMU) by enveloping the observed input-output vectors
as tightly as possible [4].
Facilitation and debrieﬁng are important in gaming sim-
ulations [5]. Facilitation is that a facilitator takes care of
everything related to the progress of the game [6]. Debrieﬁng
is learning by reﬂecting on the simulation experience [7].
However, it is said that the effectiveness of facilitation and
debrieﬁng depends largely on the experience and skills of a
facilitator [6].
According to Kikuchi et al. [8], in order to evaluate a
player’s behavior in a gaming simulation, it is common to
focus on individual play logs, track a player’s decisions and
actions, and observe them in detail (e.g., [9], [10]) . The
approach of analyzing individual play logs requires a great
deal of effort and cost. It is therefore difﬁcult to compare and
evaluate the play logs of a large number of different players.
In contrast to the approach of analyzing individual play
logs, there is an approach of comprehensively analyzing the
results of gaming simulations. Kikuchi et al. point out the
following challenges in comprehensively analyzing the results
of business games [8]: (1) the collection of a large number of

108
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
play logs, (2) the possibility of a biased sample, and (3) the
difﬁculty of creating a list that covers all possibilities. Business
games are a type of gaming simulation. Business games
are a common means of studying business and management
principles under controlled and virtual situations [11]. Kikuchi
et al. point out that because of the difﬁculty in overcoming
issues raised above, methods for evaluating gaming outcomes
based on game wins and losses are overused.
Based on these arguments, Kikuchi et al. proposed a
framework for properly evaluating the behavior of players
in computer-based business games [8]. In the framework
proposed by Kikuchi et al., the following steps are taken: (1)
Agent-based Model is constructed based on the target business
game, computer simulations are run thoroughly, and the logs
are classiﬁed. (2) Identify the behavior of players in gaming
by locating the experimental results (play logs) generated by
players in the classiﬁed computational results. Kikuchi et al.
argue that by following these steps of analysis, it is possible to
visualize and present to the players and facilitators the position
of the players in the possible outcomes of business games.
The analytical framework proposed by Kikuchi et al. is
applicable to all gaming simulations. This is because the
arguments of Kikuchi et al. are derived from a structure that
is common to all gaming simulations, not just business games.
By applying the framework proposed by Kikuchi et al. to a
gaming simulation, players can know in which pattern their
behavior in their playing experience is included in all possible
gaming scenarios. This method provides an opportunity for
players to recognize what differences there are between their
own behavior and that of other players.
However, previous approaches are unlikely to encourage
players to improve their play. This is because even if players
know the position of their gaming outcome in possible sce-
narios, they do not know what they can refer to for changing
their behavior in their gaming.
Based on the above, we propose a methodology for ac-
quiring knowledge that facilitates a player to change his/her
behavior in a gaming simulation. Speciﬁcally, the following
steps are taken: (1) have players play the gaming simulation
and collect play logs, (2) classify the play logs, and (3)
evaluate the superiority or inferiority of the play logs under the
criteria speciﬁc to each group. By following these steps, we
can acquire knowledge, which play logs are superior (inferior)
to others under the same criteria. As a result, a facilitator will
be able to use the acquired knowledge to narrow down the play
log that can serve as a model for the players to be instructed,
and to give appropriate advice to the players. In addition,
players can learn effectively and efﬁciently by referring to the
facilitator’s advice. The above analysis procedures are also
valid if some of the players are replaced by machine agents.
The differences between our analytical approach and that
proposed by Kikuchi et al. [8] are as follows: (1) the players
in the gaming simulation can be either human-only or a
mixture of human and machine agents, (2) when the players
are human-only (which limits the number of experiments), the
superiority or inferiority among play logs among a limited
number of play logs can be helpful to the players. Of course, in
conditions where both humans and software agents are mixed,
a large number of play logs should be collected by computer
simulation, as in the study by Kikuchi et al..
In this study, we demonstrate our proposed methodology
with solving a example problem. Speciﬁcally, we assume
software agents to be human players, have them play a gaming
simulations, collect play logs, classify the play logs using
Charnes-Cooper-Rhodes model (CCR model) [2], which is the
basic model of DEA, and extract knowledge about which play
logs are better than other play logs under a speciﬁc objective
function, or which play logs are worse than other play logs
under the same objective function. The gaming simulation to
be used in this demonstration is the Shin-Life Career Game
version 2 developed for career education [12]. The Shin-Life
Career Game version 2 is a kind of typical life game that
allows players to experience a virtual life as a worker. The
Shin-Life Career Game version 2 consists of multiple rounds,
and in each round, players are forced to make life choices
and solve resource allocation problems according to their own
will. The details of this gaming simulation are described in
Section 2.
The rest of this paper is organized as follows: First, related
research (Sections 2 and 3) is described. Section 2 provides a
detailed description of the Shin-Life Career Game version 2
used in this research and Section 3 describes DEA. Sections 4
through 6 provide an example of applications of the proposed
methodology and ﬁnally, a summary and conclusions are
provided.
II. THE SHIN-LIFE CAREER GAME
In this study, a gaming simulation named the Shin-Life
Career Game version 2 [12] is used in the experiments. This
game was developed by adding new functional elements to the
original Shin-Life Career Game [1]. In the following, we ﬁrst
describe how and why the original Shin-Life Career Game
was developed, and then describe the Shin-Life Career Game
version 2.
A. The Shin-Life Career Game (Original Version)
The Shin-Life Career Game is an updated version of the
Life Career Game developed by Boocock [13][14] that reﬂects
modern work elements. To overcome the discrepancy between
the career world as seen by secondary school youth and the
career world as seen by adults, Boocock developed the Life
Career Game, which plays much like the original Life Game
[15]. The players of the game experience a hypothetical life,
playing various roles and spending their resources (money,
time, etc.) on various activities with the aim of maximizing
their present satisfaction and the possibility of a good life in
the future. As a result, they acquire knowledge related to career
development and develop understanding and conﬁdence. These
characteristics have been partially inherited by serious games
for career education that have been developed since then (e.g.,
[1], [16] [17] [18]).

109
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Resource Variable
Conventional Games
The Shin-Life Career Game
Number of labors a player can have at the same time
One
Multiple
Diversity of labor forms
Low
High
TABLE I: Difference in characteristics between the Shin-Life Career Game and traditional gaming simulations (Reprinted from [1])
The situation that the Life Career Game developed by
Boocock offers to players is somewhat unrealistic in today’s
working society. In the game, players are required to make a
living from only one job, and they cannot choose the type of
work they do when they enter the profession. It is natural for
a modern worker to have a variety of options, such as working
as an employee or as a freelance worker.
The Shin-Life Career Game was developed to solve this
problem. It is a modern version of the Life Career Game in
which players can choose any number of activities such as
work and skill development at the same time, as long as the
constraints are satisﬁed. Speciﬁcally, in the Shin-Life Career
Game, players can choose from various types of work, such
as permanent work, freelance work, and simple work. And,
they can also choose learning to develop their ability.
In the Shin-Life Career Game, players are asked to live out
their lives as virtual workers through game play. In the course
of their virtual lives, players determine their own goals in life,
decide what and how to spend their resources: earn money,
improve their abilities, and sometimes take a break. Just as in
real life, players may lose money or get into trouble. A table
describing the differences in characteristics between the Shin-
Life Career Game and previous career education games from
the study [1] is reproduced above (see Table I).
Munsen et al. is skeptical that the experiences of players
who participated in gaming simulations that imitate the life of
a worker adequately reﬂect real-life [19]. In response to these
negative views, Duke, the founder of the International Society
for Simulation and Gaming, said the following [20]: gaming
simulation is a useful method for representing dynamic models
that abstract complex realities; gaming simulation is appropri-
ate for gaining a holistic understanding of complex situations,
and; it helps to deepen the contemplation of multiple futures by
considering multiple alternatives in a gaming simulation. We
have supported Duke ’s position and developed the Shin-Life
Career Game (and version 2). Players who participate in the
Shin-Life Career Game will be assigned the role of a worker,
experience a virtual life from the perspective of a worker,
and interpret the life of a worker from their perspectives in
the course of the experience, gaining new knowledge and
perspectives through the exchange of opinions among the
players and facilitators.
B. The Shin-Life Career Game version 2
In this study, we use the Shin-Life Career Game version 2
[12], which is an extension of the original Shin Life Career
Game described above. In the Shin-Life Career Game, players
have a total of four types of resources (money, ability, time,
and health), which they can freely distribute among ﬁve types
of activities (permanent work, freelance work, simple work,
learning, and leisure). The main differences between Shin-
Life Career Game version 2 and the original Shin-Life Career
Game are: (1) the number of resource variables the player has
been increased by one (the health resource variable has been
added), (2) the number of activities that can be selected has
been increased by one (Leisure has been added), and (3) the
health resource variable affects the performance of work and
learning activities. With these new elements added to the game
model, the decision-making problem regarding the allocation
of resources handled by players becomes more complex, and
the behavior of the game system becomes more dynamic.
The differences in the speciﬁcations of the two games are
summarized in Table II.
Figure 1 depicts a model that represents which resources
are gained (or lost) when a player allocates certain resources
for his activities in the Shin-Life Career Game version 2. This
model, called MATH model, describes the four basic resource
variables of an agent: monetary assets (M: money), ability
(A: ability), time (T: time), and health and ﬁtness (H: health),
in N 2 diagram (duality) form, with each variable as input
and output [21]. This is a logical model in which the agent’s
activity is described as a region that crosses the corresponding
rows and columns [21].
Fig. 1: This ﬁgure shows the relationship between the resources
input to each activity and the resources output from each
one in the Shin-Life Career Game version 2. For example,
players input time resources and health ones to SW, and they
acquire money resources. In a given round, if a player inputs
extensive resources, such as money and time, into multiple
activities, the resources decrease with each resource input
because extensive resource is allocated competitively and
additively. Also, in a given round, if a player inputs intensive
resources, such as ability and health, into multiple activities,
the same amount of the resources are allocated to the target
activities because intensive resource is non-competitively
and multiplicatively. The amount of extensive and intensive
resources increase, decrease, or remain the same depending
on a result of a target activity. A detailed description of the
properties of resource variables and activities can be found
in ”1) Resource Variable” and ”2) Activity”, respectively.

110
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Category
Elements
The Shin-Life Career Game†
Original Version
Version 2
Resources
Money
⃝
⃝
Ability
⃝
⃝
Time
⃝
⃝
Health
×
⃝
Labors
Permanent work (PW)
⃝
⃝
Freelance work (FW)
⃝
⃝
Simple work (SW)
⃝
⃝
Learning (LN)
⃝
⃝
Leisure (LS)
×
⃝
Efﬁciency‡
Money
×
⃝
Ability
×
⃝
† ”⃝” means that the element is integrated into the game model. ”×” means that the element is not
integrated into the game model.
‡ Efﬁciency of increasing resources through activities.
TABLE II: Difference in composition elements between the Shin-Life Career Game (Original version) and the Shin-Life Career Game
version2
This logic diagram is interpreted as follows. When ability
resources, time resources, and health resources are input to
permanent work (PW), freelance work (FW), and simple work
(SW), money resources are output, and the player obtains
money resources. For permanent work (PW), ability resources
are also output, and the player’s ability increases. When ability
resources, time resources, and health resources are input to
learning (LN), ability resources are output, again increasing
the player’s ability. When time and health resources are input
to leisure (LS), health resources are output, and the player’s
health is restored. The last resource input/output to overload
(OL) means that when time and health resources are input to
permanent work, freelance work, simple work, and learning,
health resources are reduced. A detailed description of each
resource variable and each activity is left to the subsequent
sections.
1) Resource Variable: In the following, we explain the
resource variables according to the studies [12][21]. The
resource variable has two properties.
The ﬁrst property is whether a resource variable is extensive
or intensive. Extensive resource variables are additive and
competitively allocated in resource allocation. If a player
allocates his/her extensive resources for one objective, the
resources reduce. And then, there are fewer resources avail-
able to allocate for other objectives. On the other hand,
intensive resource variables are multiplicative and allocated
non-competitively in resource allocation. If a player allocates
his/her intensive resources for multiple objectives at the same
time, unlike extensive resources, his/her intensive resources
have the same effect on all objectives.
The second property is whether or not there is an upper
bound on the value of a resource variable. If there is no upper
limit to the value of a resource variable, it means that the
resource is able to increase without limit. On the other hand,
if there is an upper limit to the value of a resource variable,
it means that the resource is not able to increase beyond a
certain level. Here, a resource variable with no upper limit
on its value is called an unbounded resource variable, while a
resource variable with an upper limit on its value is called a
bounded resource variable.
In the Shin-Life Career Game version 2, a player has
a total of four types of resources (money resource, ability
resource, time resource, and health resource). Money resource
corresponds to an asset in the real life. Human beings use
monetary assets to support their lives. Money resource is
extensive and unbounded. Ability resource corresponds to
knowledge and skills for work in the real life. Human beings
use their skills and knowledge to engage in labor and get
paid for it. Ability resource is intensive and unbounded. Time
resource corresponds to time for real life. Human beings live
their lives by spending their time in a variety of activities.
Time resource is extensive and bounded. Health resource
corresponds to health or physical ﬁtness for real life. Health
and physical ﬁtness are the foundation of real life. Health
resource is intensive and bounded. Table III summarizes the
characteristics of these resource variables.
2) Activity: In the following, we describe the activities
of the agents according to the cited research [12]. In this
game, the player allocates his resources to several activities
(permanent work (PW), freelance work (FW), simple work
(SW), learning (LN), and leisure (LS)) in each round according
to the constraints of the game and his own will. The individual
activities are described below. Table IV summarizes the deﬁ-
nitions and characteristics of the various types of activities in
the Shin-Life Career Game version 2.
Permanent work (PW) is a labor form in which workers are
employed by an organization until they reach retirement age
and receive remuneration for their labor. The characteristics of
permanent work are described below. First, the remuneration
for permanent work is stable. In reality, formal workers are

111
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Resource Variables
Properties
Descriptions
Extensive / Intensive
Upper limit
Money resource
Extensive
No
The variable of money resource corresponds to an
asset in the real life.
Ability resource
Intensive
No
The variable of ability resource corresponds to kno-
wledge and skills for work in the real life.
Time resource
Extensive
Yes
The variable of time resource corresponds to time
for real life.
Health resource
Intensive
Yes
The variable of health resource corresponds to hea-
lth or physical ﬁtness for real life.
TABLE III: Properties of resource variables
Activity
Symbol
Deﬁnition
Permanent work
PW
Permanent work (PW) is a way of working in which a person is employed by an organi-
zation until retirement and receives remuneration for providing labor power.
Freelance work
FW
Freelance work (FW) is a form of work in which a worker is independent of a particular
organization and is paid for providing specialized knowledge and skills to a
contractor.
Simple work
SW
Simple work (SW) is a form of work in which a worker provides labor time to an emp-
loyer or contractor and is paid for it.
Learning
LN
Learning (LN) is the act of taking extra time to develop one’s skills in order to develop
one’s ability to do a job.
Leisure
LS
Leisure (LS) is an activity that workers set aside to restore their physical and mental he-
alth.
TABLE IV: Deﬁnition of activities implemented in the Shin-Life Career Game Version2
less likely to experience unemployment due to the effects of
the economy than non-formal workers [22]. Second, the remu-
neration for formal labor is higher than that for simple labor.
In reality, the income of full-time workers is much higher
than that of part-time workers [23]. Third, as a player’s ability
resources increase, his/her rewards of permanent work become
higher. In the personnel evaluation system of a company, it is
customary to reﬂect the medium- to long-term accumulation
of capabilities by permanent workers in the increase of their
basic salary and the promotion of their qualiﬁcation grade [24].
Fourth, engagement in permanent work increases a player’s
ability resources. Firms provide formal workers with education
or special jobs that encourage their growth [25]. Fifth, a
player needs to provide a certain amount of time resources
for permanent work. In general, the law sets minimum and
maximum working hours for permanent workers. Sixth, a
player cannot decide the amount of time resources to be
allocated to permanent work at will. In general, in formal
employment, workers are obligated to engage in overtime and
holiday work according to the orders of their supervisors.
Freelance work (FW) is a labor form in which workers
are independent of a particular organization and is paid by
providing expertise and skills to a contracted party. Freelance
labor has the following characteristics. First, the income of
workers who engage in freelance work is unstable. The income
of actual freelance workers is unstable as well [26]. Second, as
a player’s ability resources increase, the reward for freelance
labor increases. In the online job brokerage services used by
real freelance workers, workers with high value-added skills
have a chance to get high-paying jobs [27]. Third, a player’s
ability resources do not increase when the player engages in
freelance labor. Employers spend less time on training self-
employed workers than employees do [28]. Our model have
not been designed to take into account the experience through
freelance work based on the views obtained from interviews
with a real freelance worker. But, it is debatable whether the
experience of engaging in freelance work should be included
in ability resource. Fourth, the player is free to decide the
amount of time resources to be allocated to freelance labor.
Since freelance workers do not have an employment contract,
they do not have the obligation or responsibility to have their
working hours controlled by others [29].
Simple work (SW) is a labor form in which workers provide
their time to their employers or contractors and are paid for
it. In this game, simple work is the kind of work that manual
workers do in the real world, such as part-time jobs, day
labor, and gig work, which do not require any special skills or
qualiﬁcations. Simple work has the following characteristics.
First, the reward (the money resource) increases in proportion
to the amount of time resource the player allocates to simple
work. In general, the wages of part-timers are determined by
the length of time they work. Similarly, the wages of day
laborers and gig workers are determined by the unit cost and
number of jobs that can be completed in a relatively short
period of time. Regardless of the type of labor engaged in, the
longer the time spent in labor, the more the worker’s income

112
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
is expected to increase roughly proportionally. Second, the
amount of players’ ability resources does not affect the amount
of compensation for simple work. In fact, many managers do
not require part-time workers to have special job performance
skills [30]. Third, the income of players who engage in simple
labor is unstable. When economic conditions are favorable,
the income of simple workers is stable, but when economic
conditions worsen, simple workers’ jobs are reduced or they
are laid off [31]. Fourth, players’ ability resources do not
increase when the players engages in simple work. Many
ﬁrms keep the training costs they pay for part-timers to a
minimum [30]. Finally, workers have the ﬂexibility to adjust
their working hours to engage in simple labor. Workers who
earn money from one-time jobs, such as on-call work or gig
work, and part-time workers can ﬂexibly manage their working
hours [32].
Learning (LN) is the act of taking extra time to develop
competencies in order to nurture one’s work capacity. People
who hold core positions in organizations and those who
do business with expertise as freelancers engage in lifelong
learning to develop the professional skills needed to maintain
their employment status [33]. Self-employed individuals with
unstable incomes devote more time to work-related learning
than employees of ﬁrms [28].
Overload (OL) is an activity that involves an involuntary
phenomenon in which agents automatically lose health re-
sources in return for choosing to engage in these activities
(PW, FW, SW, and LN). In general, overwork in labor and
study impairs human health, which in turn leads to lower labor
productivity and reduced effectiveness in learning. OL is not
an activity to which the player directly allocates resources, but
executes automatically as a consequence of the allocation of
resources to activities (PW, FW, SW, and LN).
Leisure (LS) is an activity that workers engage in to restore
their physical and mental health. In general, workers use their
leisure time for rest and recuperation to maintain their health
condition.
Based on the characteristics of each activity described
above, equations (1) through (8) were designed to describe
the relationship between input and output resources for the
activities in the Shin-Life Career Game version 2 [12]. The
following sections describe the characteristics of the changes
in each output.
The amount of remuneration for permanent work is consid-
ered to increase monotonically in proportion to the product of
the length of working hours, the amount of basic wage, and the
level of a worker‘ s ability (corresponding to Equation (1)).
We set up Equation (1) from the following idea: the higher
the basic wage, the more a employer pay permanent workers
in his/her organization; the higher the level of permanent
workers’ professional competence, the more they earn; the
longer permanent workers work, the higher their income is;
and permanent workers are less likely to be dismissed if their
health suffers unlike other types of work (as they are protected
by law, and therefore their health status does not affect their
income).
The ability of permanent workers is considered to increase
monotonically in proportion to the product of the length of
the working hours, the level of ability, the learning effect
per working time, and the degree of inﬂuence from health
conditions (corresponding to Equation (2)). We set up Equa-
tion (2) from the following idea: the better permanent workers
are at learning through engagement in their work, the faster
they grow; the higher the competence level of permanent
workers, the more they grow on the job; the longer permanent
workers are on the job, the more experience and educational
opportunities they have, and the more they grow; and the worse
permanent workers’ health, the slower their growth.
The amount of remuneration for freelance work increases
monotonically in proportion to the product of the length of
working hours, the degree of inﬂuence from the worker’s
ability, the amount of the basic compensation per working
time, health condition, but there is uncertainty in the income
side. (corresponding to Equation (3)). We set up Equation
(3) from the following idea: freelance workers earn more if
they take on jobs with higher base compensation; if freelance
workers have higher job skills, they can get higher-paying jobs
and their income goes up; the more time freelance workers
spend on a job, the more income they earn; freelance workers
may not earn enough money due to unforeseen problems at
work, or maybe lucky enough to get a job that pays well; and
when freelance workers’ health deteriorates, they cannot work
efﬁciently and their income decreases.
The amount of remuneration for simple work is consid-
ered to increase monotonically in proportion to the product
of hourly pay rates, the length of working hours, and the
degree of inﬂuence from the state of health (corresponding
to Equation (4)). We set up Equation (4) from the following
idea: simple workers earn income more by working with a
good basic wage; simple workers earn more if they work
longer; and when simple workers’ health deteriorates, they
cannot work efﬁciently and their income decreases.
The degree of growth of a worker’s ability is considered
to increase monotonically in proportion to the product of the
length of learning time, the learning effect per learning time,
n power of learning cost, the level of working ability, and
the degree of inﬂuence from health conditions (corresponding
to Equation (5)). We set up Equation (5) from the following
idea: the efﬁciency of workers’ skill development depends
on whether they are good at it or not; money supports the
growth of workers (For example, it would be more effective
to spend the same amount of time at a preparatory school
and receive instruction from a professional teacher than to
study for a qualiﬁcation by oneself. However, the higher the
amount invested in education, the more effective the education
becomes, but at the same time, the worse the cost effective-
ness becomes. The quality of lectures offered by prestigious
universities that require students to pay very high tuition fees
is not necessarily better than the quality of lectures offered
by ordinary universities.); it is easier to grow if a worker’s
ability at the time of skill development is high (For example,
if an expert software engineer and a beginner spend the same

113
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
amount of time studying, the former will acquire much more
knowledge and skills than the latter.); the more time a worker
spends on skill development, the more he/she grows; and
health status generally affects the efﬁciency of a worker’s
performance.
The degree of deterioration in health status is considered to
increase monotonically in proportion to the time of the activity
(corresponding to Equation (6)). The more a worker devote
themselves to work and learning, the worse the worker ’s
health becomes. This is expressed in Equation (6).
The degree of recovery of the health state is considered to
increase monotonically in proportion to leisure time (corre-
sponding to Equation (7)). The more time a worker take to
rest, the better the worker’s health becomes. This is expressed
in Equation (7).
The degree of inﬂuence from the health condition will be
inﬂuenced by the past health condition after a time delay
(corresponding to Equation (8)). It takes a certain amount of
time for ordinary people without medical expertise or skills
to become aware of the deterioration of their own health
condition. Equation (8) expresses this.
The values of each resource variable are updated in Equa-
tions (9) through (12). The variables and constants used in
the equations are summarized in Table V. Range of values
for resource variables is listed in Table VI. Each equation is
explained the followings.
The amount of money resource in the latest round is
determined by adding the amount of money resource obtained
in the latest round to the amount of money resource in the
previous round and subtracting the amount of money resource
used in the latest round (see Equation (9)). A person’s wealth
can change depending on his/her ﬁnancial situation.
The amount of ability resource is determined by adding
the increase in ability resources in the latest round to ability
resources in the previous round (see Equation (10)). Everyone
grows after he/she has learned.
There is an upper limit to the time a worker can spend on
activities (see Equation (11)). For any human being, time is
ﬁnite.
The amount of health resource in the latest round are
determined by subtracting the amount of decreasing health
resource in the latest round from the amount of health resource
in the previous round and adding up the amount of increasing
health resource in the latest round (see Equation (12)). Real
workers take care of the negative health effects of high-impact
activities such as work by resting and treating illness.
IP W (t) = cP W × A(t − 1) × TP W (t)
(1)
GP W (t) = γH(t) × cgP W × TP W (t) × A(t − 1)
(2)
IF W (t) = γH(t) × ϵF W × cF W × TF W (t) × A(t − 1) (3)
ISW (t) = γH(t) × cSW × TSW (t)
(4)
GLN(t) = γH(t)×cgLN ×TLN(t)×MLN(t)n×A(t−1) (5)
Symbol
Description
M(t)
Player’s money resource as of round t
A(t)
Player’s ability resource as of round t
T(t)
Player’s time resource as of round t
H(t)
Player’s health resource as of round t
IP W (t)
Reward for PW in round t (money resource)
IF W (t)
Reward for FW in round t (money resource)
ISW (t)
Reward for SW in round t (money resource)
GP W (t)
Reward for PW in round t (ability resource)
GLN(t)
Reward for LN in round t (ability resource)
HRCV (t)
Reward for LS in round t (health resource)
HBRDW (t)
Penalty for activities (except LS) in round t
(health resource)
MLN(t)
Money allocated to LN in round t by a player
(money resource)
TP W (t)
Time spent working as a permanent worker
in round t (time resource)
TF W (t)
Time spent working as a freelance worker
in round t (time resource)
TSW (t)
Time spent working as a simple worker
in round t (time resource)
TLN(t)
Time spent developing ability in round t
(time resource)
TLS(t)
Time spent recovering health in round t
(time resource)
ϵF W (t)
A random number generated according to
a continuous distribution whose probability
density function is constant on a ﬁnite
interval (α,β) and zero outside the interval.
γH(t)
Inﬂuence of health status on performance of
each activity (0 ≤ γH(t) ≤ 1)
TMAX
Initial value of a player’s time resource
(time resource, constant)
HMAX
Initial value of a player’s health resource
(health resource, constant)
cP W
Reward per unit time for PW (constant)
cF W
Reward per unit time for FW (constant)
cSW
Reward per unit time for SW (constant)
cgP W
Growth per unit time for PW (constant)
cgLN
Growth per unit time for LN (constant)
cBRDW
Amount of health resources lost per unit
of time (constant)
cRCV
Amount of health resources recovered
per unit time (constant)
TABLE V: Variables and constants composing Equations (1)-(12)
(Reprinted from [12] and modiﬁed the table)
HBRDW (t) = cBRDW ×(TP W (t)+TF W (t)+TSW (t)+TLN(t))
(6)
HRCV (t) = cRCV × TLS(t)
(7)
γH(t) =
 1
(1 ≤ t ≤ 2)
H(t−2)
HMAX
(2 < t ≤ 40)
(8)
M(t) = M(t − 1) + IP W + IF W + ISW − MLN
(9)
A(t) = A(t − 1) + GP W + GLN
(10)

114
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Range of values
0 ≤ M(t)
0 ≤ A(t)
0 ≤ T(t) ≤ TMAX
0 ≤ H(t) ≤ HMAX
TABLE VI: Range of values for resource variables
Fig. 2: Flowchart for gameplay (Reprinted from [12])
T(t) = TMAX − (TP W + TF W + TSW + TLN + TLS) (11)
H(t) = H(t − 1) + HRCV (t) − HBRDW (t)
(12)
3) Unexpected Happenings: The Shin-Life Career Game
version 2 implements an event called an economic depres-
sion event. An economic depression event is a phenomenon
designed based on real-world global ﬁnancial crises such as
the Lehman Bankruptcy and the Pandemic Shock. A player
may experience an economic depression event. The occurrence
of an economic depression event is unpredictable and occurs
randomly in each round with a predetermined probability.
When an economic depression event occurs, it affects the
amount of resources the player allocates to various types of
labor. The amount of time resources allocated to PW, FW, and
SW is forcibly reset to the minimum amount, and all surplus
time resources are allocated to LS. In this study, the minimum
amount of time resources that a player can allocate to PW is
seventy, and the minimum amount of time resources that a
player can allocate to FW and SW is zero.
4) Instructions for Gameplay: In this section, we describe
the procedure for playing the game (see Figure 2), referring
to the description of the Shin-Life Career Game version 2. In
each round, a player make decisions and allocate resources
to activities. First, when a round starts, the player has the
opportunity to check the game information (history of the
amount of each resource, of the amount of resources allocated,
and of the occurrence of economic recession events). At this
phase, the player considers the policy of resource allocation
for the current round and subsequent rounds. Next, the player
allocates resources to each activity. After completing the
screen operations for resource allocation, the game system
updates the game information. At this time, if an economic
depression event occurs, the effects of the event are reﬂected
in the game information. Finally, the player is notiﬁed of the
updating game information, and the round ends. Thereafter, the
above procedure is repeated until the player has experienced
all rounds.
III. DEA
DEA, proposed by Charnes, Cooper, and Rhodes in 1978,
is an approach comparing the efﬁciency of organizational
units such as local authority departments, schools, hospitals,
shops, bank branches, and similar instances where there is a
relatively homogeneous set of units[4]. In an analysis using
the DEA, the observed input-output vectors are enveloped as
tightly as possible using linear programming to measure the
efﬁciency of decision-making units (DMUs) and compare the
efﬁciency of DMUs with each other. As a result, each DMU
is characterized by a reference set consisting of DMUs with
more optimal efﬁciency. In addition, the envelope generated by
connecting the reference sets reveals the relative positions of
each DMU. In addition to empirical studies of organizational
efﬁciency, the DEA has been applied to simulation studies
such as optimization of production systems (e.g., [34], [35],
[36], [37]).
In the following, we describe CCR model, which is the
basic model of the DEA. In the analysis using CCR model,
the following procedure is followed: ﬁrst, the input and output
of each DMU is observed and the data is collected; second,
the weights of the input and output vectors of each DMU
are optimized to obtain the efﬁciency; thirdly, which is then
compared among DMUs; and ﬁnally, the inefﬁcient DMUs
are characterized by a reference set of DMUs with higher
efﬁciency. One of the advantages of the DEA is that it au-
tomatically solves the problem of weighting when measuring
the efﬁciency of multi-input multi-output systems.
In the following explanation, we denote the N DMUs to be
evaluated by DMUj(j = 1, 2, . . . , N). DMUj has M input
variables xmj and L output variables ylj that have already been
observed. When these are described by matrix equations, they
can be regarded as data stored in an M by N matrix X and an
L by N matrix Y (see equations (13) and (14)).
X =


x11
x12
. . .
x1N
x21
x22
. . .
x2N
...
...
...
xM1
xM2
. . .
xMN


(xmj > 0
(∀j, ∀m))
(13)
Y =


y11
y12
. . .
y1N
y21
y22
. . .
y2N
...
...
...
yL1
yL2
. . .
yLN


(ylj > 0
(∀j, ∀l))
(14)
First, we brieﬂy deﬁne the efﬁciency of the simplest input-
output system with one type of input data and one type
of output data; the efﬁciency when M = 1 and L = 1

115
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
is expressed by the following equation, and the system is
evaluated as efﬁcient in the order of increasing efﬁciency
value.
Efficiency = output
input
More general input-output systems are characterized by
multiple input terms, output terms, or both. The efﬁciency
under such complex conditions is deﬁned as follows
Efficiency = weighted sum of outputs
weighted sum of inputs
In the above deﬁnition, a set of weights should be deﬁned,
but this is difﬁcult. In contrast, in CCR model, the efﬁciency
of DMUj, Θj, is formulated as the following fractional pro-
gramming problem. By solving this fractional programming
problem, the efﬁciency score of DMUj can be easily obtained.
<FPj>
maximize
Θj =
PL
l=1 ulylj
PM
m=1 vmxmj
(15)
subject to:
PL
l=1 ulylj
PM
m=1 vmxmj
≤ 1(j = 1, 2, . . . , N)
(16)
vm ≥ 0
(m = 1, 2, . . . , M)
(17)
ul ≥ 0
(l = 1, 2, . . . , L)
(18)
In this case, since the weights uj and vj can be moved in
any way, the value of the efﬁciency Θj also changes depending
on the values of the weights uj and vj, and is not uniquely
determined. Therefore, after commonizing the upper limit of
efﬁciency Θj at 1 (Θj ≤ 1), we select the weights uj and vj
that maximize the value of efﬁciency Θj for each DMUj. If
DMUj is efﬁcient compared to other DMUs, the value of Θj
is 1; conversely, if it is not efﬁcient, it takes a value smaller
than 1.
Here suppose that DMUo is inefﬁcient. Let the optimal
weight of the input of DMUo is v∗, the one of the output is
u∗, and the input-output efﬁciency calculated from v∗ and u∗
is Θ∗. If DMUj (j ̸= o) for which the left and right sides
of the equation (19) are equal exists, DMUj is called the
reference set of DMUo. This reference set Eo can be used as
a reference to improve the efﬁciency of DMUj.
Eo =
(
j

L
X
l=1
u∗
l ylj =
M
X
m=1
v∗
mxmj, j = 1, 2, . . . , N, j ̸= o
)
(19)
The optimization of efﬁciency in DEA that we have de-
scribed so far is formulated as a fractional programming prob-
lem (see equations (15) through (18)). However, in practice,
it is solved by converting it into an equivalent linear problem
(see equations (20) through (24)).
<LPj>
maximize
Θj =
L
X
l=1
ulylj
(20)
subject to:
M
X
m=1
vmxmj = 1
(21)
L
X
l=1
ulylj ≤
M
X
m=1
vmxmj(j = 1, 2, . . . , N)
(22)
vm ≥ 0
(m = 1, 2, . . . , M)
(23)
ul ≥ 0
(l = 1, 2, . . . , L)
(24)
One of the advantages of using the DEA is that the problem
of how to determine weights when comparing the efﬁciency of
multiple-input multiple-output systems is automatically solved
in the optimization process described above.
In the following, we will discuss DEA as a data classiﬁca-
tion method. As a methodology for data classiﬁcation, DEA
takes a different approach from distance-based classiﬁcation
methods such as cluster analysis.
In DEA, the reference set E of an inefﬁcient DMU is a target
that should be referred to in order to improve the efﬁciency of
the DMU. Also, the reference set of an efﬁcient DMU is itself.
If we draw a scatter plot of DMUs in the space of input/output
variables, the envelope of DMUs is formed by all the efﬁcient
DMUs (see Figure 3). The smallest convex region containing
the efﬁcient DMUs and the origin also contains the inefﬁcient
DMUs whose reference set is the efﬁcient DMUs. Therefore,
this set of DMUs is considered to share the same reference
set and is classiﬁed into the same group.
Fig. 3: Dividing the envelope by efﬁcient DMUs (reference set) al-
lows classiﬁcation of inefﬁcient DMUs by common reference
sets. (Reprinted from the study by Kunigami et al.[38])
Kunigami et al. list two advantages of using the DEA as
a classiﬁer [38]. One of the advantages of using the DEA as
a classiﬁer is that the superiority and inferiority relationships
between DMUs belonging to a certain group can be extracted
mechanically and endogenously. When an analyst uses the
DEA to optimize the efﬁciency of each DMU that has the
same reference set, a set of DMUs with weight sets that are

116
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Agent
ID
Action
#
Orientation
Allocated Resources †,∗,∗∗
Outcome‡
TP W
TF W
TSW
TLN
TLS
M
A
H
A1
0
Money-making
RD1
P W
Rest2
Rest2
+
(+)
+/-
A2
1
RD1
F W
Rest2
Rest2
+
(+)
+/-
A3
2
RD1
SW
Rest2
Rest2
+
(+)
+/-
A4
3
RD1
P W , RD1
F W , or RD1
SW
Rest2
Rest2
+
(+)
+/-
B1
4
Ability Development
RD1
P W
Rest2
RD1
LS
(+)
+
+/-
B2
5
RD1
F W
Rest2
RD1
LS
(+)
+
+/-
B3
6
RD1
SW
Rest2
RD1
LS
(+)
+
+/-
B4
7
RD1
P W , RD1
F W , or RD1
SW
Rest2
RD1
LS
(+)
+
+/-
C1
8
Enjoying Leisure
RD1
P W
RD1
LN
Rest2
(+)
(+)
+/-
C2
9
RD1
F W
RD1
LN
Rest2
(+)
(+)
+/-
C3
10
RD1
SW
RD1
LN
Rest2
(+)
(+)
+/-
C4
11
RD1
P W , RD1
F W , or RD1
SW
RD1
LN
Rest2
(+)
(+)
+/-
† RDP W , RDF W , RDSW , RDLN, and RDLS are randomly determined in increments of 10, from 70 to 100, 50 to
100, 90 to 100, 50 to 100, and 50 to 100 respectively.
‡ ”M” stands for money resource, ”A” for ability resource,and ”H” for health resource.”+” means resource increase, ”-”
means resource decrease, and ”+/-” means one of the two can happen. ”(+)” means resource may increase.
∗ ”Rest” is the maximum value of time resources available to the player in each round minus the total value of time re-
sources allocated to other activities. For example, if software agent A1 ﬁrst decides the amount of time resources to
allocate to PWs, and then decides to allocate resources to LNs, all remaining time resources are allocated to LNs.
∗∗ The player performs resource allocation in two steps. First, the player executes the resource allocation action1; if
there are two actions with 1, the player randomly executes one of them. Next, the player executes resource allocation
action2. If there are two actions marked with 2, the player executes one of them at random.
TABLE VII: List of Resource Allocation Actions to Be Selected by Software Agents
similar in composition to each other is mechanically output.
As a result, a relation representing the dominance of efﬁcient
DMUs belonging to a certain group (which is the reference set
and has the optimal weight set) and other inefﬁcient DMUs
is endogenously extracted. This is an advantage in using the
DEA as a classiﬁer.
Another advantage of using the DEA as a classiﬁer is that
it is easy to determine the similarity of groups. The number of
overlapping DMUs between DMUs belonging to two reference
sets indicates the high degree of similarity between the two
groups. The more reference sets in common between the two
groups, the closer the two groups are.
IV. DEMONSTRATION
In this section, we explain how to conduct a demonstration
experiment.
A. Gaming simulation
For this demonstration experiment, we decided to use the
Shin-Life Career Game version 2. This game is a gaming
simulation with a multi-input multi-output system. See Section
2 for details of the game.
B. Analysis Tools
To analyze the play logs output from the gaming simulation,
we use CCR model, which is the basic model of DEA; for
more information on DEA, see Section 3.
C. Participants
We made twelve software agents play the Shin-Life Career
Game version 2 in place of human players. Each software
agent chooses the same resource allocation rule for all rounds.
The characteristics of each software agent’s play policy and
resource allocation rules are described below. In addition,
Table VII summarizes the characteristics of the behavioral
rules of the software agents.
Software agents A1, A2, A3, and A4 always choose money-
making oriented behavioral rules. They always allocate re-
sources to labor every round, and allocate the extra time
resources to either learning or leisure. A1, A2, and A3 always
engage only in a speciﬁc type of labor, while A4 randomly
chooses one of the three types of labor in each round. Second,
software agents B1, B2, B3, and B4 always choose growth-
oriented behavioral rules. These software agents always allo-
cate resources to learning each round, and allocate the surplus
resources to either labor or leisure. When software agents B1,
B2, and B3 choose to allocate resources to labor, they always
engage in a speciﬁc labor only, while B4 randomly chooses
one labor among the three. Finally, the software agents C1, C2,
C3, and C4 always choose health-oriented behavioral rules.
When the software agents C1, C2, and C3 choose to allocate
resources to labor, they always engage in only one speciﬁc
labor, whereas C4 randomly chooses one labor from among
the three. These software agents always allocate resources to
leisure each round, and allocate the surplus resources to either

117
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
Fig. 4: Classiﬁcation Results
labor or learning.
D. System
The software for gaming is written in python. The gaming
simulation was carried out using Intel(R) core(TM) 4600U
CPU @ 2.10GHz PC with 16GB RAM, Windows10 Pro, 64bit
OS.
E. Procedures
The software agent was given 40 opportunities (rounds)
to make a decision per gaming session. For each gaming
session, the incidence of economic recession was ﬁxed at 10
percent. In all gaming rounds, a common random seed and
random number generator were used to determine the choice
of activities for resource allocation by each software agent,
the amount of resources allocated to each activity, whether
an economic depression event occurred, and the FW reward
correction rate. Each software agent played the game one time.
The initial values of the parameters common to all gaming are
listed in Table VIII.
Parameter
Initial Value
Parameter
Initial Value
M(0)
0
cgP W
2.0E-4
A(0)
1
cgLN
2.0E-4
TMAX
100
cRCV
2.8E-1
HMAX
100
cBRDW
5.0E-2
cP W
5.5
n
0.50
cF W
5.5
α
2.5E-1
cSW
5.5
β
2.0
TABLE VIII: Initial values of parameters
V. RESULTS
The input and output data of each software agent are
summarized in Table IXa. Basic statistics of input and output
are summarized in Table IXb. Note that AcmTW K represents
the accumulated value of time resources allocated to labors,
AcmTLN represents the accumulated value of time resources
allocated to learning, AcmTLS represents the accumulated
value of time resources allocated to leisure, and AcmINC
represents the accumulated value of money resources acquired.
In addition, a DEA tool pyDEA [39][40] was used to generate
the following DEA results (See Table IXc).
According to Table IXc, the most efﬁcient software agents
(DMUs) were DMU#0 and DMU#8. The DEA also classiﬁed
the play logs into Group X, Group Y, and Group Z. Group
X consisted of only DMU#3 with DMU#0 and DMU#2 as
the reference set. Group Y consisted of DMU#1, DMU#4,
DMU#6, and DMU#7 with DMU#0 and DMU#8 as the refer-
ence set. Group Z consisted of DMU#5, DMU#9, DMU#10,
and DMU#11 with DMU#8 as the reference set. The software
agents (DMUs) belonging to each group are summarized in
Table IXd.
The results of the analysis using DEA (Table IXc) are
schematically summarized in Figure 4. As a result of the
analysis by DEA, the value of the weight of the accumulated
value of time resources allocated to leisure for all play logs
was zero (this means that this factor has no effect on the
evaluation of the efﬁciency of each play log.), so the data was
plotted on a two-dimensional plane (see Figure 4). In Figure
4, multiple groups consisting of efﬁcient DMUs (reference
sets) and inefﬁcient DMUs that refer to them are depicted.
The similarity between the groups was easily determined by
whether or not the reference sets were shared. Speciﬁcally, it
was found that the similarity between Group X and Group
Y, which share the common reference set DMU#0, is higher
than the similarity between Group X and Group Z. Similarly,
we found that the similarity between Group Y and Group Z
with the common reference set, DMU#8, was higher than the
similarity between Group X and Group Z. Therefore, we also
found that Group Y is the group that was in the middle of
Group X and Group Z.

118
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
DMU
#
Agent
ID
Gaming Result†
INPUT
OUTPUT
AcmTW K
AcmTLN
AcmTLS
AcmINC
0
A1
3.39.E+03
3.60.E+02
2.50.E+02
2.67.E+04
1
A2
2.62.E+03
6.10.E+02
7.70.E+02
1.94.E+04
2
A3
3.61.E+03
1.00.E+02
2.90.E+02
1.10.E+04
3
A4
3.29.E+03
3.20.E+02
3.90.E+02
1.56.E+04
4
B1
1.89.E+03
7.00.E+02
1.41.E+03
2.01.E+04
5
B2
1.23.E+03
9.50.E+02
1.82.E+03
1.41.E+04
6
B3
1.41.E+03
5.90.E+02
2.00.E+03
7.60.E+03
7
B4
1.32.E+03
7.60.E+02
1.92.E+03
9.86.E+03
8
C1
1.84.E+03
1.28.E+03
8.80.E+02
3.01.E+04
9
C2
1.63.E+03
1.28.E+03
1.09.E+03
1.52.E+04
10
C3
1.31.E+03
1.76.E+03
9.30.E+02
7.04.E+03
11
C4
1.64.E+03
1.41.E+03
9.50.E+02
1.97.E+04
† AcmTW K and AcmTLN are the accmulated value of time resources allocated to works (PW, FW, and SW) and lea-
rning, respectively. AcmINC is the accumulated value of income (money resource).
(a) Gaming Results (Input-output data)
Statics
AcmTW K
AcmTLN
AcmTLS
AcmINC
Mean
2.10.E+03
8.43.E+02
1.06.E+03
1.64.E+04
S.D.
8.86.E+02
5.01.E+02
6.16.E+02
7.22.E+03
Variance
7.85.E+05
2.51.E+05
3.79.E+05
5.21.E+07
Median
1.74.E+03
7.30.E+02
9.40.E+02
1.54.E+04
Max
3.61.E+03
1.76.E+03
2.00.E+03
3.01.E+04
Min
1.23.E+03
1.00.E+02
2.50.E+02
7.04.E+03
(b) Basic statistics of input/output data
DMU
#
Agent
ID
DEA
Score
Θ
Reference
sets
Weights
INPUT
OUTPUT
vTW K
vTLN
vTLS
uI
0
A1
1.00
{0, 8}
2.38.E-04
5.38.E-04
0.00.E+00
3.74.E-05
1
A2
0.765
{0, 8}
2.50.E-04
5.66.E-04
0.00.E+00
3.93.E-05
2
A3
1.00
{0, 2}
1.21.E-04
5.63.E-03
0.00.E+00
9.12.E-05
3
A4
0.646
{0, 2}
5.51.E-05
2.56.E-03
0.00.E+00
4.15.E-05
4
B1
0.910
{0, 8}
2.88.E-04
6.51.E-04
0.00.E+00
4.53.E-05
5
B2
0.700
{8}
8.13.E-04
0.00.E+00
0.00.E+00
4.97.E-05
6
B3
0.436
{0, 8}
3.64.E-04
8.24.E-04
0.00.E+00
5.73.E-05
7
B4
0.510
{0, 8}
3.29.E-04
7.44.E-04
0.00.E+00
5.18.E-05
8
C1
1.00
{0, 8}
2.11.E-04
4.78.E-04
0.00.E+00
3.32.E-05
9
C2
0.571
{8}
6.13.E-04
0.00.E+00
0.00.E+00
3.75.E-05
10
C3
0.328
{8}
7.63.E-04
0.00.E+00
0.00.E+00
4.67.E-05
11
C4
0.736
{8}
6.10.E-04
0.00.E+00
0.00.E+00
3.73.E-05
(c) Analysis results by DEA
Groups
Reference sets
DMUs
X
{0, 2}
3
Y
{0, 8}
1, 4, 6, 7
Z
{8}
5, 9, 10, 11
(d) List of software agents (DMUs) belonging to each group
TABLE IX: Input-output data and basic statistics, and results of analysis by DEA

119
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
VI. DISCUSSIONS
As a result of DEA analysis of the play logs obtained from
the Shin-Life Career Game version 2, the play logs were
classiﬁed into three groups, and the reference sets and DMUs
composition of each group were revealed. The reference sets
of each group can be used as a reference to improve the
efﬁciency of inefﬁcient DMUs belonging to the same group.
In the following, we will clarify the structure of the evaluation
criteria for each group and discuss what methods can be used
to improve the evaluation of inefﬁcient DMUs belonging to
each group.
First, we discuss the experimental results for Group X.
The value of the weights of AcmTW K (vAcmTW K) and of
AcmTLN (vAcmTLN ) of DMU#3 (inefﬁcient DMU belonging
to Group X) are both positive. However, the value of the
weight of the former is about 2% of the one of the latter,
and the effect of vAcmTW K on the evaluation criteria is small.
Thus, it was found that in Group X, DMUs were evaluated
based on the efﬁciency of the accumulated income amount
(output) relative to the accumulated learning time (input).
The criterion for evaluating the efﬁciency of DMU#2, the
one of reference sets of group X, was similar to that of
DMU#3. As in the case of DMU#3, the value of vAcmTW K
and vAcmTLN in DMU#2 were both positive. However, the
former was only about 2% as large as the latter. Therefore,
the effect of AcmTW K is very small. In other words, DMU#2
was evaluated by DEA to be optimal in terms of its efﬁciency
under the same evaluation criteria as Group X.
In contrast, the evaluation criteria for DMU#0, the other
reference set of Group X, was different from the one for
DMU#2. For DMU#0, the value of vAcmTW K was about 44%
of vAcmTLN . In other words, the effect of AcmTW K on
AcmINC for DMU#0 was larger than the one for DMU#2.
Thus, DMU#0 was highly valued by DEA as having made a
lot of money despite the fact that the player had spent less
time on working and learning.
Given the above discussion on Group X, we found that
there were two options to improve the efﬁciency of inefﬁcient
DMU#3 belonging to Group X. The ﬁrst option is to learn
from the behavior of DMU#2 that performed better without
changing its current policy on resource allocations. The second
option is to modify the current policy on resource allocations
by referring to DMU#0 and change it to one that takes into
account the allocation of resources to both work and learning.
Next, we discuss the experimental results for Group Y. The
values of vAcmTW K and vAcmTLN of the DMUs belonging to
Group Y were both positive. The value of the former was about
44% of the one of the latter, indicating that the inﬂuence of
AcmTW K and AcmTLN on AcmINC was not negligible in
both factors. Therefore, it was found that in Group Y, DMUs
were evaluated based on the efﬁciency of AcmINC with
respect to AcmTW K and AcmTLN. In other words, in Group
Y, DMUs that earned a lot of money while spending less time
working and learning through gaming were highly valued.
In contrast, the efﬁciency metric of DMU#8, the one of
reference sets of Group Y, is different from that of Group Y.
For DMU#8, the value of vAcmTLN is zero, while the value
of vAcmTW K is positive. Thus, DMU#8 was highly valued
because he made a lot of money through gaming, even though
he did not spend much time on labor.
Given the above discussion on Group Y, we found that
there were two options to improve the efﬁciency of inefﬁcient
DMUs belonging to Group Y. The ﬁrst option is to learn
from the behavior of DMU#0 that performed better without
changing the current course of action. The second option is
to change the current course of action by referring to DMU#8
and orienting to a more active allocation of resources to labor.
Finally, we discuss the experimental results for Group Z.
The value of vAcmTW K for DMUs belonging to Group Z was
positive, while the value of vAcmTLN was zero. Therefore, we
knew that in Group Z, DMUs were evaluated based on the
high efﬁciency of AcmINC relative to AcmTW K. In other
words, in Group Z, DMUs that earned a lot of money through
gaming, even though they spent less time on labor, were highly
valued.
From the above discussion, by using DEA to analyze the
12 play logs output from the gaming simulation, it became
clear which play logs were superior to other play logs under
the same evaluation criteria. Based on the extracted knowl-
edge, the facilitator can develop instruction that encourages
players to improve their behavior. In addition, players can use
the facilitator’s guidance to narrow down the behaviors and
performances of others in the game that they need to learn,
and learn more efﬁciently (See Figure 5a).
As shown in the explanation of the example above, by
applying DEA to the analysis of the play logs output from a
gaming simulation, multiple play logs are automatically clas-
siﬁed under various criteria, and the superiority or inferiority
of the play logs within each group is revealed. Based on the
above knowledge obtained from the analysis, facilitators will
be able to provide speciﬁc guidance to players in debrieﬁng
to improve their behavior. And at the same time, the players
will be able to focus on speciﬁc play logs to learn effectively
and efﬁciently (see Figure 5a and Figure 5b). In order to
propose a new analysis methodology, we have presented an
example of analysis using a gaming simulation, the Shin-
Life Career Game version 2, and DEA, but this analysis
methodology can be applied to any gaming simulation that
its players operate a multiple-input, multiple-output system,
and the tools used in the analysis are not limited to DEA. In
addition, this analytical methodology can be applied to both
gaming simulations consisting only of humans and gaming
simulations in which humans and software agents are mixed
(see Figure 5a and Figure 5b).
VII. CONCLUDING REMARKS
In this study, we proposed a methodology to extract knowl-
edge from the results of a gaming simulation that explains
which play logs are superior (inferior) to other play logs
under a speciﬁc objective function. In order to propose the
new methodology, we had multiple software agents play the
gaming simulation instead of human players, and analyzed

120
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
(a) Gaming simulation with only human players
(b) Gaming simulation with human players and software agents
Fig. 5: Conceptual diagram of the proposed method: Play logs are collected in a gaming session with a large number of players, and DEA
is used to identify the superiority or inferiority among the play logs, so that each player has the opportunity to learn from the play
logs of players whose behavior is similar to and superior to his own.
the output multiple play logs with DEA to extract the desired
knowledge. As a result, the desired knowledge was obtained.
Finally, we proposed supporting players ’learning of gaming
by facilitators’ presenting the extracted knowledge to players
in debrieﬁng.
In past research, it was pointed out that life simulation
games such as the Life Career Game developed by Boocock
and the Shin-Life Career Game developed by us may not
express human decision-making problems in real life properly
[19]. Munson et al. pointed out that the social properties
and attitudes of players may affect the results of gaming
simulations. Based on Munson et al.’s consideration, we are
considering using the Shin-Life Career Game to analyze the
relationship between the lifestyles of people who have proven
to be successful in real life and the results of their gaming
(input-output efﬁciency). We think that lifestyle of people is a
reﬂection of their policies in their resource allocation in life.
This new approach may provide a new answer to the long-
standing criticism of gaming simulations.
REFERENCES
[1] A. Sakata, T. Kikuchi, R. Okumura, M. Kunigami, A. Yoshikawa,
M. Yamamura, and T. Terano, “The Shin-Life Career Game: Pursuing
Your New Life Style through Gaming Simulation,” in eKNOW 2021,
The Thirteenth International Conference on Information, Process,
and Knowledge Management, Nice, France, July 2021, pp. 14–
20. [Online]. Available: https://www.thinkmind.org/index.php?view=
instance&instance=eKNOW+2021[Accessed:2021-12-01]
[2] A. Charnes, W. W. Cooper, and E. Rhodes, “Measuring the efﬁciency
of decision making units,” European journal of operational research,
vol. 2, no. 6, pp. 429–444, 1978.
[3] C. S. Greenblat, Designing games and simulations: An illustrated
handbook.
SAGE Publications Inc., 1988.
[4] A. Boussoﬁane, R. G. Dyson, and E. Thanassoulis, “Applied data en-
velopment analysis,” European journal of operational research, vol. 52,
no. 1, pp. 1–15, 1991.
[5] T. Terano, “Learning business decisions through cases and games,” J.
Soc. Instrum. Control Eng, vol. 46, no. 1, pp. 44–50, 2007, (in Japanese).
[6] M. Nakamura, “ゲーミングシミュレーションにおけるファシリテー
ション (Facilitation in Gaming Simulations),” in Gaming Simulation.
Union of Japanese Scientists and Engineers (JUSE), 1998, pp. 169–206,
(in Japanese).
[7] D.
C.
Thatcher
and
M.
J.
Robinson,
“Me―The
Slow
Learner: Reﬂections Eight Years on from its Original Design,”
http://dx.doi.org/10.1177/1046878190213008, vol. 21, no. 3, pp. 291–
302, aug 2016. [Online]. Available: https://journals.sagepub.com/doi/
abs/10.1177/1046878190213008[Accessed:2021-12-01]
[8] T. Kikuchi, Y. Tanaka, M. Kunigami, T. Yamada, H. Takahashi, and
T. Terano, “Debrieﬁng framework for business games using simulation
analysis,” in General Conference on Emerging Arts of Research on
Management and Administration.
Springer, 2018, pp. 64–76.
[9] O. Koshiyama, M. Kunigami, A. Yoshikawa, and T. Terano, “Analyzing
Behaviors of Business Game Learners Using a Modiﬁed Performance
Sheet,” Simulation & Gaming, vol. 21, no. 2, pp. 86–95, 2011, (in
Japanese).
[10] A. Sakata, T. Kikuchi, R. Okumura, M. Kunigami, A. Yoshikawa,
M. YAMAMURA, and T. Terano, “Uncovering Users’ Decisions
through Serious Game Playing with A Formal Description Method,” in
Proceedings of the Thirteenth China-Japan International Workshop on
Information Technology and Control Applications (ITCA2020).
Enshi,
Hubei, China: 2020 The 13th China-Japan International Workshop on
Information Technology and Control Applications, 2020, pp. 221–228.
[Online].
Available:
https://ci.nii.ac.jp/naid/120006998456[Accessed:
2021-12-01]
[11] T. Terano, H. Suzuki, Y. Kuno, H. Fujimori, H. Shirai, C. Nishio,
N.
Ogura,
and
M.
Takahuashi,
“Understanding
Your
Business
through
Home-Made
Simulator
Development,”
Developments
in
Business
Simulation
and
Experiential
Learning:
Proceedings
of
the
Annual
ABSEL
conference,
vol.
26,
mar
1999.
[Online].
Available: https://absel-ojs-ttu.tdl.org/absel/index.php/absel/article/view/
930[Accessed:2021-12-01]
[12] A. Sakata, T. Kikuchi, R. Okumura, M. Kunigami, A. Yoshikawa,
M. Yamamura, and T. Terano, “A Basic Research to Develop a Method
to Classify Game Logs and Analyze them by Clusters,” in the 7th
International Workshop on Advanced Computational Intelligence and
Intelligent Informatics (IWACIII 2021), Beijing, China, 2021.
[13] S. S. Boocock, “The Life Career Game,” The Personnel and Guidance
Journal, vol. 46, no. 4, pp. 328–334, dec 1967.
[14] S. S. Boocock and J. S. Coleman, “Games with Simulated Environments
in Learning,” Sociology of Education, vol. 39, no. 3, p. 215, 1966.
[15] J. Ferrara, “Games for Persuasion: Argumentation, Procedurality, and
the Lie of Gamiﬁcation,” Games and Culture, vol. 8, no. 4, pp.
289–304, jul 2013. [Online]. Available: http://journals.sagepub.com/doi/
10.1177/1555412013496891[Accessed:2021-12-01]
[16] I. Dunwell, P. Lameras, S. De Freitas, P. Petridis, M. Hendrix, S. Arnab,
and K. Star, “Metycoon: A game-based approach to career guidance,”
in 2013 5th International Conference on Games and Virtual Worlds for
Serious Applications, VS-GAMES 2013, 2013.
[17] Tertiary
Education
Commission,
“The
Real
Game.”
[Online].
Available:
https://www.careers.govt.nz/resources/tools-and-activities/
the-real-game/[Accessed:2021-12-01]

121
International Journal on Advances in Software, vol 14 no 1 & 2, year 2021, http://www.iariajournals.org/software/
2021, © Copyright by authors, Published under agreement with IARIA - www.iaria.org
[18] I.
Tallman,
L.
R.
Wilson,
and
M.
A.
Straus,
“SIMCAR:
A
game
simulation
method
for
cross-national
family
research:,”
https://doi.org/10.1177/053901847401300207,
vol.
13,
no.
2,
pp.
121–144,
sep
2016.
[Online].
Available:
https://journals.sagepub.com/doi/abs/10.1177/
053901847401300207?journalCode=ssic[Accessed:2021-12-01]
[19] W. Munsen, J. Horan, L. Miano, and C. Stone, “Another look at the
life career game,” Pennsylvania Personnel and Guidance Association
Journal, vol. 4, pp. 36–38, 1976.
[20] R. D. Duke, Gaming: the future’s language, 1st ed. SAGE Publications
Inc., 1974.
[21] M. Kunigami, R. Okumura, T. Kikuchi, A. Sakata, and T. Terano,
“Agents’ Resources Allocation and Growth Modeling for Social
and Organizational Agent Simulations,” in JSAI Special Interest
Group on Business Informatics (SIG-BI #17), Online, 2021, pp.
55–58, (in Japanese). [Online]. Available: http://sig-bi.jp/meeting 17.
html[Accessed:2021-12-01]
[22] Statistics Bureau of Japan, “Monthly results,” https://www.stat.go.
jp/english/data/roudou/index.html[Accessed:
2021-12-01],
2021,
(in
Japanese).
[23] Statistics Bureau of Japan, “労働力調査（詳細集計）2020 年 平均結果
(Labour Force Survey (Detailed Tabulation) 2020 Average Results),”
https://www.stat.go.jp/data/roudou/sokuhou/nen/dt/[Accessed: 2021-12-
01], 2020, (in Japanese).
[24] H. Kakizawa and O. Umezaki, “Effect of performance appraisal,
compensation, and job characteristics on employees’ motivation: an
empirical analysis of ﬁrm microdata and a questionnaire survey,” JILPT
Research Report, vol. 52, no. 5, pp. 67–82, 2010, (in Japanese).
[25] Y. Zhu, “Responding to the challenges of globalization: human resource
development in japan,” Journal of World Business, vol. 39, no. 4, pp.
337–348, 2004.
[26] C. Brown and M. Reich, “Developing skills and pay through career lad-
ders: Lessons from japanese and us companies,” California Management
Review, vol. 39, no. 2, pp. 124–144, 1997.
[27] S. Horowitz, S. Buchanan, M. Alexandris, M. Anteby, N. Rothman,
S. Syman, and L. Vural, “The rise of the freelance class: a new
constituency of workers building a social safety net,” 2005.
[28] A. G. Kazi, R. M. Yusoff, A. Khan, and S. Kazi, “The freelancer: A
conceptual review,” Sains Humanika, vol. 2, no. 3, 2014.
[29] J. Kirchner and K. Wilhelm, “Employee or freelance worker,” in Key
Aspects of German Employment and Labour Law.
Springer, 2018, pp.
45–52.
[30] C. Inman and C. Enz, “Shattering the myths of the part-time worker,”
Cornell Hotel and Restaurant Administration Quarterly, vol. 36, no. 5,
pp. 70–73, 1995.
[31] Cabinet Ofﬁce, “日本経済 2010 (Japan Economy 2010),” https://www5.
cao.go.jp/keizai3/2010/1210nk/nk10.html[Accessed: 2021-12-01], 2021,
(in Japanese).
[32] J. Rubery, A. Keizer, and D. Grimshaw, “Flexibility bites back: the
multiple and hidden costs of ﬂexible employment policies,” Human
Resource Management Journal, vol. 26, no. 3, pp. 235–251, 2016.
[33] R. PRESTON and C. DYER, “Human capital, social capital and lifelong
learning: an editorial introduction,” Compare: A Journal of Comparative
and International Education, vol. 33, no. 4, pp. 429–436, 2003.
[34] A. Azadeh, T. Nazari, and H. Charkhand, “Optimisation of facility layout
design problem with safety and environmental factors by stochastic dea
and simulation approach,” International Journal of Production Research,
vol. 53, no. 11, pp. 3370–3389, 2015.
[35] D. Berre, J. Vayssi`eres, J.-P. Boussemart, H. Leleu, E. Tillard, and
P. Lecomte, “A methodology to explore the determinants of eco-
efﬁciency by combining an agronomic whole-farm simulation model
and efﬁcient frontier,” Environmental Modelling & Software, vol. 71,
pp. 46–59, 2015.
[36] H. Sameie and M. Arvan, “A simulation-based data envelopment anal-
ysis (dea) model to evaluate wind plants locations,” Decision Science
Letters, vol. 4, no. 2, pp. 165–180, 2015.
[37] E. Shadkam and M. Bijari, “Multi-objective simulation optimization for
selection and determination of order quantity in supplier selection prob-
lem under uncertainty and quality criteria,” The International Journal
of Advanced Manufacturing Technology, vol. 93, no. 1, pp. 161–173,
2017.
[38] M.
Kunigami,
T.
Kikuchi,
and
T.
Terano,
“A
knowledge
extraction
from
epidemic
control
simulation,”
eKNOW
2021,
The
Thirteenth
International
Conference
on
Information,
Process,
and
Knowledge
Management,
pp.
21–26.
[On-
line]. Available: https://www.iaria.org/conferences2021/ﬁleseKNOW21/
68005 eknow2021.pdf[accessed:2021-12-01]
[39] A. Raith, P. Rouse, and L. Seiford, “Benchmarking using data envelop-
ment analysis: Application to stores of a postand banking business,” in
Multiple Criteria DecisionMaking and Aiding, 2019, pp. 1–39.
[40] A. Raith, O. Perederieieva, F. Fauzi, K. Harton, A. Lee, K. Lin,
H. Priddey, and M. Rouse. pyDEA. [Online]. Available: https:
//github.com/araith/pyDEA[Accessed:2021-12-01]

