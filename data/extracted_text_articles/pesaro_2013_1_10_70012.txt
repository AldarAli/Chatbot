Developing Safe Control Systems using Patterns for Assurance
Andr´e Alexandersen Hauge
Institute for energy technology, Halden, Norway
University of Oslo, Norway
andre.hauge@hrp.no
Ketil Stølen
SINTEF ICT, Oslo, Norway
University of Oslo, Norway
ketil.stolen@sintef.no
Abstract—The Safe Control Systems (SaCS) method is a
pattern-based method supporting the development of concep-
tual designs for safety critical systems. A pattern language
offers support for the method by six different kinds of basic
patterns, operators for combining patterns, and a graphical
notation for visualising a pattern composition. Intended users
of SaCS are system developers, safety engineers and HW/SW
engineers. The method has so far been applied in two cases
within different industrial domains. This paper demonstrates
and presents experiences from the application of SaCS within
the railway domain. We consider an interlocking system that
controls the appliances of a railway station. We argue that
SaCS effectively supports the establishment of requirements, a
design satisfying the requirements, and an outline of a safety
demonstration for the design.
Keywords-conceptual design; pattern language; development
processes; safety;
I. INTRODUCTION
This paper demonstrates and presents experiences from
the use of a pattern-based method called Safe Control
Systems (SaCS) to develop a conceptual design for a railway
interlocking system.
SaCS has previously been tested out in the nuclear domain
for the development of a reactor control system design [1].
The six kinds of basic patterns offered by SaCS are cate-
gorised according to two development perspectives: Process
Assurance; and Product Assurance. Both perspectives detail
patterns according to three aspects: Requirement; Solution;
and Safety Case. We distinguish between basic and compos-
ite patterns. Each basic pattern contains an instantiation rule
that may be used to assess whether it is correctly instantiated.
The basic SaCS patterns captures design solutions as
well as commonly accepted safety engineering practices,
e.g., development processes and activities, risk assessment
methods, and other methods for providing safety assurance
as reﬂected in international safety standards and guidelines,
e.g., [2], [3], [4], [5]. Basic SaCS patterns are deﬁned in a
format inspired by classical literature on patterns [6], [7],
[8]. It differs with respect to its explicit deﬁnition of inputs,
outputs, and the instantiation rules that deﬁnes the transition
from input to output for each pattern. The explicitly deﬁned
parameters facilitate easy combination of several patterns.
The instantiation rules facilitate validation of the result of
pattern instantiation based on the pattern deﬁnition and the
A
X
Y
B
M
L
AY
BX
BY
L
M
O
N
AX
dA
dLN
mA
mM
mL
mO
mN
mB
dMO
mB
P1
P2
Figure 1.
Railway Station Overview
given inputs. The composite patterns are expressed graph-
ically and its notation is inspired by languages for system
modelling, e.g., the modelling of patterns by collaborations,
or modularisation of a speciﬁcation by decomposition in
UML [9], and literature related to visualisation, e.g., related
to risk analysis [10] and general literature on visualisation
of complex data [11].
The remainder of this article is structured as follows:
Section II outlines the railway case on design of an inter-
locking system. Section III gives a short background on the
SaCS method and its supporting pattern language. Section
IV presents our hypothesis and main prediction. Section
V to Section VIII exempliﬁes the stepwise application of
the SaCS method and supporting pattern language in an
example-driven manner for establishing a conceptual design
for the railway interlocking system. Section IX outlines the
results of applying SaCS. Section X presents related work,
while Section XI concludes.
II. THE SYSTEM: RAILWAY INTERLOCKING
Fig. 1 illustrates the main appliances of a train station
with two tracks.
The station in Fig. 1 is connected in both ends of the
station area to neighbouring stations with a single track. An
interlocking system controls the appliances associated with
the station in order to safely control the movements of trains
along deﬁned train routes. The train station that is used as
a case has a level crossing (Note: the level crossing is not
depicted). The annotations in Fig. 1 denote the following:
• The circles with a letter inside, i.e., M, A, X, Y, B, and
L denote the different track sections.
1
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

• All lines that end with two or three adjacent circles
represent either a distant light signal, i.e., dA, dB, dLN,
and dMO or a main light signal, i.e., mA, mB, mL, mM,
mN, and mO.
• There are two points for switching trafﬁc onto different
tracks, these are identiﬁed as P1 and P2.
• The arrows illustrate the eight train routes, i.e., AX,
AY, BX, BY, L, M, N, and O that are possible with the
depicted track conﬁguration.
The SaCS method was applied to develop a conceptual
design for an interlocking system to control the appliances
of a railway station with two tracks and a level crossing
such that trains may move safely according to deﬁned train
routes. The interlocking system is one of many sub-systems,
though the most critical to safety, in an overall system
for controlling train movements. The conceptual design is
intended to model a replacement of an existing system
governing the interlocking rules only.
III. BACKGROUND – SACS
A. The SaCS Method
The method interleaves three main activities, each of
which is divided into sub-activities:
S Pattern Selection – The purpose of this activity is
to support the conception of a design by selecting:
a) SaCS patterns for requirement elicitation; b) SaCS
patterns for establishing design basis; c) SaCS patterns
for establishing safety case.
C Pattern Composition – The purpose of this activity is to
specify the use of the selected patterns by specifying:
a) compositions of patterns; and b) instantiations of
patterns.
I Pattern Instantiation – The purpose of this activity is
to instantiate the composite pattern speciﬁcation by: a)
selecting pattern instantiation order; and b) conducting
stepwise instantiation.
Pattern selection is supported by a selection map that is
introduced in Section V-A. Pattern composition is supported
by a pattern language outlined in Section III-B. Pattern
instantiation is supported by instantiation rules deﬁned for
every basic pattern (deﬁned in [12]).
B. The SaCS Pattern Language
Fig. 2 presents the main graphical elements used to
illustrate the kind of patterns involved in a composite pattern.
The SaCS Pattern Language (SaCS PL) consists of pat-
terns (basic SaCS patterns) of different types, and annota-
tions for specifying how patterns are combined and applied
in order to derive a conceptual design.
Every basic SaCS pattern is deﬁned such that it may be
used stand-alone. Every pattern is also deﬁned such that
it is easy to use several patterns together as every input
and output parameter of a pattern is explicitly detailed.
Solu%on
Requirement
Safety1Case
(Design)
(Method)
Process1
Assurance
Product1
Assurance
Basic&Pa(ern
Composite&Pa(ern
Figure 2.
Icons for Visually Representing a Pattern
A composition of patterns (composite for short) may be
expressed by, e.g., mapping an output parameter of a pattern
to an input parameter of a second pattern and thereby
deﬁning a relationship between the patterns.
The different icons in Fig. 2 for representing a pattern
reﬂect the different types of patterns in SaCS PL. Operators
combine patterns. The operators will be introduced and ex-
plained by the examples provided in Section V to Section IX.
A composite pattern may contain any type of SaCS pattern,
i.e., basic patterns, composite patterns, or a combination of
composite and basic patterns.
IV. HYPOTHESIS
Success is evaluated based on the satisfaction of pre-
dictions. The hypothesis (H) and predictions (P) for the
application of SaCS is deﬁned below.
H: The SaCS method facilitates effective and efﬁcient de-
velopment of conceptual designs that are: 1) consistent;
2) complete; 3) correct; 4) comprehensible; 5) reusable;
and 6) implementable.
Deﬁnition A conceptual design is a triple consisting of a
speciﬁcation of requirements, a speciﬁcation of design, and
a speciﬁcation of a safety case. The design characterises
a system that satisﬁes the requirements. The safety case
characterises a strategy for demonstrating that the design
is safe with respect to safety requirements.
We deduce the following prediction from the hypothesis
with respect to the application of SaCS on the case described
in Section II:
P: Application of the SaCS method on the railway case
described in Section II results in a conceptual design
that uniquely characterises the railway case and is
easily instantiated from a composite SaCS pattern.
Furthermore, the conceptual design is 1) consistent; 2)
complete; 3) correct; 4) comprehensible; 5) reusable;
6) implementable.
Deﬁnition A conceptual design instantiates a SaCS com-
posite pattern if each element of the triple can be instan-
tiated from the SaCS composite pattern according to the
instantiation rules of the individual patterns and according
to the rules for composition.
2
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

Risk
Analysis
Safety.
Management
Quality.
Management
SIL
Classiﬁca9on
Technical
Safety
Code.of.
Prac9se
Safety.Requirements
Sa9sﬁed
Cross.Reference
FTA
FMEA
Trusted
Backup
Dual.Modular
Redundant
HAZOP
FMEA
HAZID
B
C
E
D
Overall
Safety
D
Establish
Concept
C
Hazard
Analysis
E
Hazard
Iden9ﬁca9on
Sta9on
Interlocking.
Simple.
Interlocking
Level.Crossing.
Interlocking
A
B
A
Establish
System.Safety.
Requirements
*
*
*
*
*
*
*
*
*
*
*
Figure 3.
Pattern Selection
V. ELICIT FUNCTIONAL REQUIREMENTS
A. Pattern Selection
Fig. 3 provides an overview of the patterns considered
in the railway interlocking case, organised into a pattern
selection map based on deﬁned relationships between pat-
terns. Due to space restrictions the pattern deﬁnitions are
not provided (described in [12]). The following abbrevations
are used in Fig. 3: HAZID – HAZard IDentiﬁcation; FMEA
– Failure Modes and Effects Analysis; HAZOP – HAZard
and OPerability Studies; FTA – Fault Tree Analysis; SIL –
Safety Integrity Level.
The selection process starts at the pattern referenced in
the upper left corner of Fig. 3 and follows the direction of
the arrows. Pattern selection ends when all patterns have
been considered. The diamond represents a choice; more
than one pattern may be selected. The letter above a choice
is a reference to a correspondingly named group of patterns
in the lower part of Fig. 3. The symbol “*” is used to
identify the patterns that are used in this article. Each pattern
deﬁnition clearly describes the problem addressed by the pat-
tern and its intended application, thus the pattern deﬁnitions
may be conferred for support in the selection process. The
application of the SaCS method and the selection process
as exempliﬁed in this article assures that relevant patterns
may be selected at each stage of development. The rationale
given by a user at each selection step on the selection of
patterns should give assurance for the correct set of patterns
being selected.
We assume in this article that the information provided
in Section II sufﬁciently details the development objectives
such that the pattern Establish Concept (supports clarifying
objectives) may be passed in the selection process.
The patterns Station Interlocking and Level Crossing
Interlocking associated with choice A in Fig. 3 capture the
problem of eliciting functional requirements for a system
that shall control the appliances available in a station with
several tracks and a level crossing, respectively. They were
chosen as support.
B. Pattern Instantiation
A pattern may have multiple input and output parameters.
The instantiation of the input parameters deﬁne the context
for interpreting the pattern, while the instantiation of the
output parameters deﬁne the result of pattern instantiation.
The pattern deﬁnition describes the transition from input to
output. The instantiation of the pattern Station Interlocking
produced a set of requirements. The following is one of these
requirements.
“FR.1: a train route AX may be locked (secured for train
movements) when: a) the train routes AY, M, O, N, BX and
BY are in the state not locked; and b) point P1 is aligned;
and c) track sections A, X and B are in the state vacant.”
C. Pattern Composition
Fig. 4 speciﬁes a composite pattern. Everything above the
horizontal line may be thought of as a kind of preamble.
The icon for a composite occurs in the upper left corner
underneath the name of the composite, which is Functional
Requirements. The inputs and outputs of the composite
are tagged by an arrow pointing either towards (indicating
input) or from (indicating output) a list of parameters. The
parameter list is visualised on the form [<parameter list>].
Everything below the horizontal line describes the actual
composition. The input and output of the patterns occurring
within the composite are distinguished in the same manner
as input and output in the preamble. The input parameter
Mch of the composite is used by both contained patterns.
The patterns Station Interlocking and Level Crossing In-
terlocking are related by the combines operator (symbolised
by two overlapping circles). Hence, the icon decorating the
line connecting the parameter lists in Fig. 4 symbolises a
combines relationship.
[LCR%%%%Req]
[2TR%%%%Req]
[Mch]
Level%Crossing
Interlocking
Func3onal
Requirements
Sta3on
Interlocking
[Mch]
[Mch]
[F/Req]
[F/Req]
Figure 4.
Functional Requirements – Composite
3
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

The annotation [2TR=Req] (the symbol = enclosed by a
circle represents an alias operator) found in Fig. 4 deﬁnes
an alias 2TR for the output parameter Req. The combines
operator creates an output parameter list named F-Req that
consists of 2TR and LCR.
The grey wide arrow in the background indicates the
recommended pattern instantiation order and gives guidance
to the process of applying the patterns.
VI. ELICIT SAFETY REQUIREMENTS
A. Pattern Selection
Once the main functional requirements have been elicited
based on selected patterns from choice A of Fig. 3, further
traversal leads to the pattern Hazard Identiﬁcation. This
pattern deﬁnes the process of identifying potential hazards.
In choice B, patterns describing methods for hazard identi-
ﬁcation are offered. We assume that the hazards associated
with the operation of the interlocking system, e.g., collision
train-train, collision train-object, and level crossing accident,
are identiﬁed such that the Hazard Identiﬁcation pattern
as well as the patterns in choice B may be passed in the
selection process.
The Hazard Analysis pattern however is selected as it
provides guidance on the process of deriving the potential
causes of hazards. In choice C of Fig. 3, different process
solution patterns (representing methods) supporting hazard
analysis may be selected. The FTA was selected as support
for Hazard Analysis under the assumption that a top-down
fault tree analysis is an acceptable and effective method for
identifying potential causes of failure.
Further traversal of Fig. 3 leads to the pattern Risk
Analysis. The pattern provides guidance on how to address
identiﬁed hazards and to establish a notion of risk. The SIL
Classiﬁcation pattern was selected as it deﬁnes the method
for classifying railway systems and their components with
respect to criticality.
The pattern Establish System Safety Requirements de-
scribes the process of establishing safety requirements based
on inputs from risk assessment. It was regarded as relevant
for the case and selected as support.
B. Pattern Instantiation
Safety requirements are deﬁned on the basis of risk assess-
ment. The process requirement patterns selected in Section
VI-A support the process of eliciting safety requirements
and may be applied subsequently in the following order:
1. Hazard Analysis – used to identify potential causes of
hazards based on input on applicable hazards.
2. Risk Analysis – used for addressing hazards with
respect to their severity and likelihood of occurring
combined into a notion of risk.
3. Establish System Safety Requirements – used for deﬁn-
ing requirements on the basis of identiﬁed risks.
When Establish System Safety Requirements was instan-
tiated on the basis of inputs provided by the instantiation of
its successors, the following safety requirement was among
those identiﬁed: “SR.1: A main signal belonging to a train
route may only signal a proceed aspect if the train route is
locked“.
Other results from the instantiation of the mentioned
patterns were a hazard log that traces identiﬁed hazards to
potential causes of these hazards, a fault tree analysis, and
a qualitative risk assessment. In the following we only refer
to the safety requirement exempliﬁed above.
C. Pattern Composition
Fig. 5 presents the Safety Requirements composite. The
pattern has two input parameters namely ToA (short for
Target of Assessment) and Haz (short for Hazards) and one
output parameter S-Req (short for Safety Requirements).
The hazards associated with the parameter Haz, e.g.,
collision train-train and collision train-object, consisted of a
set of relevant generic top events. The hazards were assessed
with respect to the intended operation of interlocking system
by the use of the Hazard Analysis pattern, supported by the
FTA pattern. The result of pattern instantiation is the output
HzLg (short for hazard log) containing an overview over
hazards and their potential causes.
The output HzLg from Hazard Analysis is an input of
the Risk Analysis pattern (illustrated by the assigns operator
that is drawn as an arrow from HzLg to Haz). The SIL
Classiﬁcation pattern was used as support for Risk Analysis.
The output Risks from Risk Analysis is used as input to
Establish System Safety Requirements.
The output S-Req of Establish System Safety Require-
ments (S-Req is deﬁned as an alias for the output parameter
Req) is an output of the composite.
Fig. 6 deﬁnes the Requirements composite. The composite
is deﬁned in order to make later illustrations simpler and
consists of the composite for establishing functional require-
ments (deﬁned in Fig. 4) and the composite for establishing
[Risks]
[HzLg]
[S,Req////Req]
[ToA]
Establish)
System)Safety)
Requirements
Hazard)
Analysis
[AnHaz]
[ToA,Haz]
FTA
SIL
Classiﬁca?on
Risk)
Analysis
[Risks]
[Haz]
[ToA,Haz]
[Risks]
[Haz]
[FncCat]
[CrCat]
[FT]
[ToA]
Safety
Requirements
[ToA,/Haz]
[S,Req]
Figure 5.
Safety Requirements – Composite
4
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

[S#Req]
[F#Req]
[Mch,,,,,Toa,,Haz]
Safety
Requirements
Func1onal
Requirements
[Mch]
Requirements
[Mch,,Haz]
[Req]
[Req]
Figure 6.
Requirements – Composite
safety requirements (deﬁned in Fig. 5).
VII. ESTABLISH DESIGN BASIS
A. Pattern Selection
At choice D of Fig. 3, there are two available design
patterns that may be selected.
The Trusted Backup pattern describes a system concept
where an adaptable controller may operate freely in a
delimited operational state space. Safety is assured by a
redundant non-adaptable controller that operates in a broader
state space and in parallel with the adaptable controller.
A control delegator grants control privileges to the most
suitable controller at any given time on the basis of switching
rules and information from safety monitoring.
The Dual Modular Redundant pattern describes a system
concept where two similar controllers operate in parallel.
The parallel operating redundant controllers and a voting
unit provides mitigations against random error.
The Dual Modular Redundant pattern was selected as
guidance for establishing the design on the basis of an
evaluation of the strengths and weaknesses of the two design
patterns with respect to the requirements.
B. Pattern Instantiation
Fig. 7 represents an excerpt (simpliﬁed) of the result,
fully described in [12], of applying the Dual Modular
Redundant pattern. The pattern was instantiated according to
its instantiation rule and the design was deﬁned to comply
with the requirements identiﬁed in Section V and Section
VI.
Fig. 7 illustrates the main parts of our interlocking system.
A component identiﬁed as Cmd is responsible for the
communication towards the operators of the system. Dual
controllers, identiﬁed as Ctrl1 and Ctrl2, are responsible
for providing interlocking functionality, e.g., lock a train
route upon request from an operator. A component identiﬁed
as IO is responsible for communicating with e.g., points,
lights, and track sections as presented in Fig. 1 in order
to communicate their states to the dual controllers. The IO
component is also responsible for safe application of the
output from the dual controllers (the IO component contains
a voter).
«component»
Interlocking System
iOperator
«component»
IO:InputOutput
«component»
Ctrl1:Interlocking
«component»
Ctrl2:Interlocking
«component»
Cmd:Command
iOperator
iCommand
iInterlocking
iInterlocking
iLights
iGates
iPoints
iLights
iPoints
iGates
iTracks
iTracks
Figure 7.
UML Component Diagram
Besides the presented excerpt, results from pattern instan-
tiation include a description of: the interaction between the
interlocking system and other systems; the functionality of
the internal components of the interlocking system; and the
interaction between the components within the interlocking
system. In the following when we refer to the system design
we mean the full design of the interlocking system. The
fulﬁlment of identiﬁed requirements, e.g., FR.1 deﬁned in
Section V-B and SR.1 deﬁned in Section VI-B, is manifested
in different decomposed models of the full design.
C. Pattern Composition
In Fig. 8, the output parameter S of Dual Modular
Redundant represents the abstract system design described
by the pattern, the instantiation of which is represented by
the design outlined in Section VII-B.
Fig. 8 speciﬁes that the instantiation of the output param-
eter S of the pattern Dual Modular Redundant shall satisfy
the instantiation of the output parameter Req of the pattern
Requirements. The relationship is captured by a satisﬁes
operator where the bullet is associated with the output that
describes what should be satisﬁed and the check mark is
associated with the output that is required to satisfy.
VIII. ESTABLISH SAFETY CASE
A. Pattern Selection
The Overall Safety pattern associated with choice E in
Fig. 3 was selected as a means to argue that the system is
[S]
[Req]
[S]
Dual%Modular%
Redundant
Requirements
[Mch,+Haz]
[Mch,+Haz]
[Req,+S]
Pa3ern%Solu5on%–%Intermediate
Figure 8.
Intermediate Solution – Composite
5
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

Interlocking system 
is sufficiently safe for 
its intended use 
Interlocking system:
Outlined in Section 7.2
The system is demonstrated safe 
by demonstrating proper quality 
management, safety 
management and technical safety
Quality management is 
sufficiently addressed
Technical safety is 
sufficiently addressed
Safety management is 
sufficiently addressed
G1
C1
S1
G2
G3
G4
Legend
C = Context
G = Goal
S = Strategy
Sufficiently safe:
Quality management, 
safety management, 
and technical safety 
sufficiently addressed
C2
Figure 9.
GSN Safety Case (excerpt)
sufﬁciently safe based on satisfactory quality management,
safety management and technical safety.
The Technical Safety pattern was selected for arguing sat-
isfactory technical safety. A strategy deﬁned by the pattern
is to explicitly address all risks associated with the system
(contrary to an implicit safety demonstration). The explicit
risk demonstration strategy is here intended to be detailed by
the Safety Requirements Satisﬁed pattern that may be used
to structure the argument that all requirements are satisﬁed.
B. Pattern Instantiation
Fig. 9 presents an excerpt expressed in GSN [13] of the
safety case provided upon instantiation of Overall Safety,
Technical Safety and Safety Requirements Satisﬁed according
to their instantiation rules.
The safety case provided upon pattern instantiation de-
scribes a decomposable safety demonstration, annotated in
GSN [13], arguing that the system design is sufﬁciently safe
for its intended purpose. One of the decomposed parts of the
safety case put forward a claim that the system is safe given
that the safety requirements are correct, suitable and satis-
ﬁed. Further, compliance to identiﬁed safety requirements is
shown by referring to the properties of the design as deﬁned
by the design models. The design models act as supporting
evidences to claims put forward in the safety case. The safety
case contains the claims that must be supported by evidences
and that once shown provides assurance that the design is
safe.
C. Pattern Composition
Fig. 10 deﬁnes the composite Safety Case. It speciﬁes
that the input to the composite is ToD (short for Target
of Demonstration) and Req (short for Requirements). The
output of the composite is identiﬁed as Case and represents
the output provided when the pattern Overall Safety is
instantiated.
A part identiﬁed as TechSaf (short for Technical Safety)
of the Overall Safety patterns is detailed (speciﬁed by the
details operator, the “black box” represents the output that is
detailed and the small icons represent the output that details)
by the Technical Safety Pattern. A part identiﬁed as ERE
[Case]
[TechSaf]
[Tod,/Req]
Safety'
Requirements
Sa0sﬁed
Overall
Safety
[Case]
[ToD]
Technical
Safety
[ERE]
[Case]
[ToD]
[ToD,/Req]
[Case]
Safety
Case
Figure 10.
Safety Case – Composite
(short for Explicit Risk Estimation) of Technical Safety is
detailed by Safety Requirements Satisﬁed.
IX. COMPOSITE PATTERN SOLUTION
A. Pattern Composition
Fig. 11 deﬁnes the composite Pattern Solution that com-
bines all patterns applied in the case.
Using the satisﬁes operator Pattern Solution speciﬁes
that the instantiation of output parameter S of the Dual
Modular Redundant shall satisfy the instantiation of Req
of the composite Requirements (deﬁned in Fig. 6). Further,
the demonstrates operator constrains the instantiation of
the output parameter Case of Safety Case to be a safety
demonstration for S of Dual Modular Redundant. It is
also speciﬁed that the instantiation of parameter S-Req
(representing an element of the parameter set named Req,
see Fig. 6) of the composite Requirements is assigned to
the input parameter Req of Safety Case. The instantiation
order of the patterns is deﬁned by the grey arrow in the
background that indicates that the Requirement composite
shall be instantiated ﬁrst, then the Dual Modular Redundant
and the Safety Case patterns may be instantiated in parallel.
B. Pattern Instantiation
The composite Pattern Solution described in Fig. 11 is
a pattern and may thus be applied on several cases, e.g.,
for developing an interlocking system for a station similar
[S]
[Req]
[S]
[S]
Dual%Modular%
Redundant
Requirements
Safety%Case
[S'Req]
[Req]
[Case]
[ToD]
[Mch,2Haz]
Pa7ern
Solu8on
[Mch,2Haz]
[Req,2S,2Case]
Figure 11.
Pattern Solution – Composite
6
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

Documenta*on+artefact
Design+artefact
Safety+Case+artefact
Requirement+artefact
Figure 12.
Icons for denoting different types of artefacts
to the one described in this article. In order to describe a
speciﬁc application of a composite pattern, annotations for
specifying the instantiation of parameters may be added to
the composite pattern diagram.
Fig. 12 illustrates the different icons and the respective
type of artefacts that they represent that are used to specify
parameter instantiation.
Fig. 13 is identical to Fig. 11 with the addition of
annotations specifying the instantiations of parameters. An
icon symbolising the type of artefact that is referred to and a
string identifying the referred artefact illustrates an artefact
reference. A dotted line connecting an artefact reference to
a parameter speciﬁes that the referred artefact instantiates
the parameter.
The instantiations illustrated in Fig. 13 refer to the arte-
facts that are described in this article rather than the full
version of these artefacts as provided in [12].
When every composite pattern diagram that is applied
during development is annotated with their instantiations,
the traceability between the input and output of every pattern
and between patterns are provided.
X. RELATED WORK
To the best of our knowledge, there exists no other
pattern-based method that combines diverse kinds of patterns
into compositions like SaCS. SaCS has been conceived to
Ref.%System%descrip0on
Sec0on%II
Ref.%Figure%7,%%
Sec0on%VII:B
Ref.%Safety%Case
Sec0on%VIII:B
Ref.%Requirement%
SR.1%Sec0on%VI:B
Ref.%Requirement%FR.1%Sec0on%V:B%
and%SR.1%Sec0on%VI:B
Ref.%Hazards
Sec0on%V:A
[S]
[Req]
[S]
[S]
Dual%Modular%
Redundant
Requirements
Safety%Case
[S'Req]
[Req]
[Case]
[ToD]
[Mch,2Haz]
Pa7ern
Solu8on
[Mch,2Haz]
[Req,2S,2Case]
Figure 13.
Pattern Solution – Composite (annotated with instantiations)
facilitate efﬁcient development by the support of patterns,
separation of concerns in the style of pattern languages,
a clearly deﬁned process and application of acceptable
development practices as required by safety standards, and at
the same time documentation and visualisation in the manner
of system modelling.
The concept of systematically applying a set of pat-
terns is inspired by the work of Alexander et. al [6] on
architecture of buildings. Important sources of inspiration
applicable to development of software based systems are
pattern approaches for: requirements elicitation [14], [15],
software design [7], [8], [16], and safety demonstration
[17], [13]. Two challenges associated with the referenced
pattern approaches are that: the integration of patterns is
detailed informally; each pattern approach only reﬂects on
one perspective important when developing critical systems,
e.g., software design [8]. SaCS offer the ability to combine
different kinds of patterns and detail the combination.
The notation for detailing the application of patterns and
the focus on establishing a complementing set of devel-
opment artefacts offered by SaCS are inspired by safety
domain needs on providing assurance. International safety
standards, e.g., [2], [4] express requirements related to
assurance. While safety standards to a large degree describe
what are the required practices to be performed during
development, SaCS provides guidance on applying accepted
safety engineering practices. The European railway regula-
tion [18] and the associated guideline [19] on common safety
methods for risk evaluation and assessment has inﬂuenced
the work on deﬁning SaCS patterns. While the guideline
[19] addresses the railway domain, SaCS may be applied in
different domains by selecting among the available patterns
those that are accepted within a given domain.
XI. CONCLUSIONS
We have demonstrated how the conceptual design is in-
stantiated from several SaCS basic patterns within a speciﬁc
SaCS composite (Fig. 13). Each constituent basic pattern
of the composite has clearly deﬁned inputs and outputs
and provides guidance on instantiation through deﬁned in-
stantiation rules (these are detailed in [12]). Operators for
composition deﬁne the combination of instantiation results
from several patterns. The composite pattern details: the
identiﬁer and type of every pattern applied in order to derive
the conceptual design; the pattern instantiation order; and
the ﬂow of data through the network of patterns giving
traceability between development artefacts.
The conceptual design is built systematically in manage-
able steps (exempliﬁed in Sections V to IX) by a clearly
deﬁned process for pattern selection, instantiation and merg-
ing of results (by pattern composition). The conceptual
design (fully described in [12]) is consistent (see Section
IV). The required triple is provided by the instantiation of
the parameters Req, S, and Case of the composite pattern
7
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

illustrated in Fig. 13. In [12] we argue that the triple
completely speciﬁes the required function. We also argue
that the design (instantiation of S in Fig. 13) correctly
speciﬁes the fulﬁlment of requirements (instantiation of Req
in Fig. 13). The conceptual design is expressed in a form that
we think is easy to understand (textual descriptions, UML
diagrams, and GSN [13] diagrams) and that is easy to detail
or reuse. We also claim that the conceptual design may be
easily detailed into an implementable system.
XII. ACKNOWLEDGMENTS
This work has been conducted and funded within the
OECD Halden Reactor Project, Institute for energy tech-
nology (IFE), Halden, Norway.
REFERENCES
[1] A. A. Hauge and K. Stølen, “A pattern-based method for
safe control systems exempliﬁed within nuclear power pro-
duction,” in Lecture Notes in Computer Science, vol. 7612,
September 2012, pp. 13–24.
[2] IEC 62278, “Railway Applications – Speciﬁcation and
Demonstration of Reliability, Availability, Maintainability and
Safety (RAMS),” IEC 62278, ed. 1.0, International Elec-
trotechnical Commission, 2002.
[3] IEC 62279, “Railway Applications – Communication, Sig-
nalling and Processing Systems – Software for Railway
Control and Protection Systems,” IEC 62279, ed. 1.0, Inter-
national Electrotechnical Commission, 2002.
[4] IEC 62425, “Railway Applications – Communication, Sig-
nalling and Processing Systems – Safety Related Electronic
Systems for Signalling,” IEC 62425, ed. 1.0, International
Electrotechnical Commission, 2007.
[5] IEC 61025, “Fault Tree Analysis (FTA),” IEC 61025, ed. 2.0,
International Electrotechnical Commission, 2006.
[6] C. Alexander, S. Ishikawa, M. Silverstein, M. Jacobson,
I. Fiksdahl-King, and S. Angel, A Pattern Language: Towns,
Buildings, Construction. New York: Oxford University Press,
1977.
[7] F. Buschmann, K. Henney, and D. Schmidt, Pattern-Oriented
Software Architecture: On Patterns and Pattern Languages,
Vol. 5. Wiley, 2007.
[8] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design
Patterns: Elements of Reusable Object-Oriented Software.
Addison-Wesley, 1995.
[9] OMG, “Uniﬁed Modeling Language Speciﬁcation, version
2.4.1,” Object Management Group, 2011.
[10] M. S. Lund, B. Solhaug, and K. Stølen, Model-Driven Risk
Analysis: The CORAS Approach, 1st ed. Springer, 2010.
[11] E. R. Tufte, The Visual Display of Quantitative Information,
2nd ed. Graphics Press, 5 2001.
[12] A. A. Hauge and K. Stølen, “A Pattern Based Method for
Safe Control Conceptualisation – Exempliﬁed Within Rail-
way,” Institute for energy technology, OECD Halden Reactor
Project, Halden, Norway, Tech. Rep. HWR-1037, 2013.
[13] GSN Working Group, “GSN Community Standard Version
1,” York, England, 2011.
[14] E. Hull, K. Jackson, and J. Dick, Requirements Engineering.
Springer, 2004.
[15] M. Jackson, Problem Frames: Analyzing and Structuring
Software Development Problems. Addison-Wesley, 2001.
[16] R. S. Hanmer, Patterns for Fault Tolerant Software. Wiley,
2007.
[17] R. Alexander, T. Kelly, Z. Kurd, and J. McDermid, “Safety
Cases for Advanced Control Software: Safety Case Patterns,”
University of York, York, UK, 2007.
[18] European Union, “Commission regulation (EC) No 352/2009
on the adoption of a common safety method on risk evaluation
and assessment as referred to in Article 6(3)(a) of Directive
2004/49/EC of the European Parliament and of the Council,”
Ofﬁcial journal of the European Union, 2009.
[19] ERA, “Guide for the application of the Commission Regu-
lation on the adoption of a common safety method on risk
evaluation and assessment as referred to in Article 6(3)(a)
of the Railway Safety Directive,” European Railway Agency,
2009.
8
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-268-4
PESARO 2013 : The Third International Conference on Performance, Safety and Robustness in Complex Systems and Applications

