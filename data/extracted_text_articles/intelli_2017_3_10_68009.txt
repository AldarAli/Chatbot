Distributed Sensor Network for Noise Monitoring in Industrial Environment with 
Raspberry Pi 
Natalia Blasco, María de Diego, Román Belda, Ismael de Fez, Pau Arce, Francisco José Martínez-Zaldívar, 
Alberto González, Juan Carlos Guerri 
Institute of Telecommunications and Multimedia Applications 
Universitat Politècnica de València 
Valencia, Spain 
e-mail: nablasu@iteam.upv.es, mdediego@dcom.upv.es, robelor@iteam.upv.es, isdefez@iteam.upv.es, 
paarvi@iteam.upv.es, fjmartin@dcom.upv.es, agonzal@dcom.upv.es, jcguerri@dcom.upv.es 
 
Abstract— Monitoring the noise in working places is essential 
to protect the health of workers. There are two main factors 
that must be taken into account, and thus controlled, when 
considering noise exposition during the working hours: the 
level of perceived noise and the time exposed to that level of 
noise. In industrial environments, these two factors represent a 
high priority due to the quantity of equipment inside the 
factory.  In this paper, we present a low cost system to measure 
and monitor noise conditions in an industrial environment. 
The proposed solution is based on ad hoc wireless probes and a 
server in the cloud, which acts as a centralized data sink. 
Specifically, the probes are based on Raspberry Pi 3, while the 
server may be placed anywhere on the Internet. The proposed 
system helps to detect critical levels of noise for workers, 
sending warning messages to predefined contacts by means of 
a text message or email when hazardous situations occur. 
Keywords- Wireless Acoustic Sensor Network (WASN); 
Raspberry Pi 3; Industrial environment; Monitoring; Ad hoc 
networks. 
I. 
INTRODUCTION 
According to the findings of the World Health 
Organization 
(WHO), 
noise 
is 
the 
second 
largest 
environmental cause of health problems, just after the impact 
of air quality (particulate matter) [1]. 
Different regulations about noise monitoring in working 
environments have appeared along the years. Among them, 
apart from the aforementioned [1], from the World Health 
Organization / Europe, we highlight [2], which was 
published by the International Labour Organization (ILO) in 
1977.  
Particularly, noise exposure is higher in industrial 
working environments due to ambient noise produced by 
machines. Possible side effects resulting from high noise 
exposure are due to both the amount of sound energy 
received and the duration of exposure. 
In this scenario, the levels and durations of the supported 
noise are difficult to predict because of the inherent 
characteristics of audio waves. Therefore, monitoring the 
real exposure to noise is very helpful to prevent negative 
health effects and to improve working conditions. 
In this sense, usually sound level meters are used to 
analyze workplaces exposure to noise. However, the 
measures collected by these devices are not in real time, but 
they are taken at certain intervals of time instead. In this 
paper, we propose the use of a low-cost Wireless Sensor 
Network (WSN) in order to continually monitor workplaces 
and, therefore, obtain a better picture of the noise exposure 
of workers. 
In the literature we can find several proposals about 
WSN. For instance, [3] presents a WSN for industrial 
environments and proposes different strategies to improve 
the link quality. Unlike [3], our solution is based on 
Raspberry Pi. In this sense, [4] presents an industrial 
application using Raspberry Pi in order to carry out the 
maintenance of a machine. Another use case for acoustic 
WSN with Raspberry Pi, apart from industrial environments, 
is the monitoring of noise in smart cities, as proposed in [5]. 
The rest of the paper is structured as follows. Section 2 
presents the system architecture, which is composed of three 
main blocks: sensor network, cloud and user interface. 
Section 3 explains the experimental results obtained. Finally, 
Section 4 presents the conclusions and the future work.  
II. 
SYSTEM ARCHITECTURE 
An example of the proposed system can be observed in 
Figure 1. As the figure depicts, there are three main elements 
in the architecture: the WSN system installed in the factory; 
the cloud; and the user interface, used to monitor the state of 
the network. 
 
Figure 1.  Example of the proposed system architecture. 
The figure shows a distributed sensor network composed 
of five nodes creating an ad hoc Wi-Fi network. As the 
figure depicts, there is a main node (in the example, the node 
51
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-576-0
INTELLI 2017 : The Sixth International Conference on Intelligent Systems and Applications (includes InManEnt)

2), which acts as a gateway. That is, the main node is in 
charge of communicating with the rest of nodes and with the 
server located in the cloud. To that extent, the main node has 
Internet connection (for instance, direct connection with the 
local area network of the building or by means of a 3G/4G 
connection). In an ad hoc network, each node is part of the 
routing by forwarding data to other nodes until finding the 
main node (the gateway), which will upload the data to the 
server. In this way, each node performs functions of router 
and host. 
On the other hand, the manager of the system will access 
the server located in the cloud to get the information 
provided by the sensor network. The manager will consult 
this information by means of a web user interface and will be 
able to change the audio recording configuration of the 
nodes. 
The following sections present the main details of each 
one of the three blocks that compose the system proposed. 
A. Overview of the sensor network 
The sensor network is in charge of continuously 
monitoring the noise levels and generating alerts when the 
measured noise levels exceed a certain limit. In the example 
shown in Figure 1, the noise source generates a critical noise 
that is detected by node 5. This node sends the information 
of the sound pressure level, which is routed by the ad hoc 
network until the main node (node 2). The gateway sends 
this information to the server. In addition, the server can 
generate an alert by means of a text message or email.  
As previously explained, the sensor system is an ad hoc 
network, which uses Optimized Link State Routing (OLSR) 
as a routing protocol. OLSR, defined in RFC 3626 [6] and 
updated in RFC 7181 [7], is a proactive link-state protocol. 
OLSR uses an optimized system to broadcast routing control 
and TC (Topology Control) messages by means of special 
nodes called MPRs (Multipoint Relays). The MPRs selection 
is carried out through metrics of willingness, connectivity 
and symmetry of the links with the neighbor nodes.  
The main advantages of this kind of deployment are the 
scalability and the fact that nodes can move freely 
maintaining 
the 
connectivity 
and 
updating 
routing 
information. As a drawback, we highlight the autonomy of 
the nodes, which makes them dependent on batteries or 
power supply. In the study case, nodes can be located in 
those places with potential risk noise situations. In this way, 
nodes are connected to the power line, thus avoiding the 
need to use batteries, although they can work with them, 
allowing location independence. 
Figure 2 shows the appearance of a node, in which the 
main components can be seen. The base component of each 
node is a Raspberry Pi 3 model B. This board has a built-in 
Wi-Fi 802.11n card to create the ad hoc network without 
needing an external antenna. 
As the Raspberry Pi models do not have an integrated 
microphone input, it has been necessary to use an external 
USB microphone, which provides its own sound card. Also, 
in order to provide geolocation, the GPS can be connected 
through the USB interface. Note that, in order to show the 
possibilities of the system, the GPS module has been added 
to the solution presented. The use of this module can be 
optional in static indoor installations if nodes are in fixed 
positions. 
In this way, a solution based on the use of low-cost 
components leads to a very cost efficient system. Sensors run 
Raspbian OS. It is important to note that the service executed 
on the boards, called agent, has been the focus of the main 
development carried out. Specifically, the agent has been 
developed using Python 3 language for the main tasks of the 
service (such as the application lifecycle, multithreading, 
recording and reporting the measurements). In addition, in 
order to process the recorded audio data, Octave through 
Oct2py interface has been used. 
 
Figure 2.  Picture of the node. 
Moreover, a piston phone is used to calibrate the 
microphone in the sensors. First, the difference between the 
measurement taken by the piston phone and the one obtained 
with the chosen microphone is calculated. Then, this 
difference is used in all audio samples to show the correct 
value of the sound pressure level in the application.  
The proposed system captures audio and processes the 
samples, calculating the sound pressure level in fragments of 
time. It is worth highlighting that this process is carried out 
by the Raspberry Pi 3, thus minimizing the data transmitted 
(and saving bandwidth) because only the processed data 
values are sent. 
B. Cloud 
Another block of the proposed system architecture (as 
shown in Figure 1) is the cloud. Data values of the audio 
recordings are stored on a server in the cloud. 
The server receives the sound pressure level from the 
raspberries in the ad hoc network and saves the data of each 
node in a database. Apart from the sound pressure level and 
the node identifier, the database also stores the timestamp of 
the beginning and the end of the recording. 
The database is composed of different tables that allow to 
organize the collected data in an appropriate way. Sensors 
can be classified into groups, which can be rather useful to 
interpret the information. For example, in the industrial 
environment each node can be assigned to different groups, 
such as the floor where the node is, the department, the type 
of machine, etc. Thus, each node can belong to more than 
one group and it is possible to add as many nodes and groups 
as required to the network. 
52
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-576-0
INTELLI 2017 : The Sixth International Conference on Intelligent Systems and Applications (includes InManEnt)

C. User interface 
The last block of the proposed system is related to the 
management of the architecture. A manager will be able to 
monitor the network, the audio configuration of the nodes 
and the database.  
To that extent, a web user interface was developed, 
which is used to consult and manage the data. The web page 
is structured in two different parts: the monitoring section, 
and the administration part. The former shows a page with a 
list of groups and, when selecting a specific group, a table 
with the properties of the sensors belonging to that group is 
shown. An example is depicted in Figure 3. Also, the web 
site shows a map with the geolocation of the nodes. As we 
can see in the figure, each marker referred to the position of 
each node has a certain color, depending on the noise level 
detected in that particular moment: green, for sound pressure 
levels among 0 and 65 dBSPL; yellow, for sound pressure 
levels higher than 65 dBSPL and lower than 100 dBSPL; and 
red, for sound pressure levels higher than 100 dBSPL. 
If a certain node collects a measure higher than a 
specified limit of the sound pressure level, a warning will be 
shown in the web page. In addition, it is possible to send an 
alert by means of a text message. 
On the other hand, the administration section is only for 
registered users. Apart from the functionalities of the 
monitoring section, registered users are able to interact with 
the database and modify the existing nodes or groups. 
Moreover, the section allows to load a specific configuration 
for a node, modifying the configuration table of the nodes. 
This table contains different parameters related to audio 
recording (such as the record time or period) and for 
calculating the audio sound pressure level (such as the 
integration time or the weighting mode). 
III. 
EXPERIMENTAL RESULTS 
The evaluation of the nodes for testing the Wireless 
Acoustic Sensor Network (WASN) with Raspberry Pi 3 have 
been carried out inside the Universitat Politècnica de 
València (Figure 4). The network is composed of three nodes 
located in a small area without obstacles and with direct 
view. As the figure depicts, there is a source of noise, 
specifically, noise coming from construction works. This 
noise source is found nearby of node 1, and further away 
from the two other nodes. 
 
 
Figure 3.  User interface of the monitoring section. 
 
53
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-576-0
INTELLI 2017 : The Sixth International Conference on Intelligent Systems and Applications (includes InManEnt)

 
Figure 4.  Detail of the network deployment at the Universitat Politècnica 
de València. 
In the evaluation carried out, each node has recorded 
each second the sound level pressure measured during more 
than 1 hour (specifically, 74 minutes). The sampling 
frequency has been 44.1 kHz. The noise level of the three 
nodes over time is shown in Figure 5. In the x axis, it is 
shown the hour in which the measure has been taken (from 
16:18 until 17:32 in intervals of 1 second). In the y axis, the 
sound pressure level in dB is displayed. This pressure level is 
also reflected in the figure by different colors: green 
tonalities indicate areas with acceptable sound pressure 
levels, whereas orange and red ones indicate dangerous areas 
in terms of noise level. 
As expected, the node 1 is the node that measures the 
highest noise level, since it is the nearest node to the source 
of noise. Specifically, the average sound pressure level 
measured by node 1 is 83.35 dB, which represents a rather 
high noise level. In this sense, node 2 and node 3 present a 
similar evolution over time, although with sound pressure 
levels much lower (an average noise level of 69.32 dB and 
62.46 dB, respectively). These results are in consonance with 
the distance from each node to the noise source.  
In the figure, we can see three alerts corresponding to 
instants of time when the noise level exceeds 100 dB 
(specifically, instants of time 16:18, 16:20 and 17:30). 
Although these noise peaks are detected by the three nodes, 
only node 1 considers these peaks as alarms, since the 
measured value exceeds the defined threshold, as the Figure 
5 depicts. As previously mentioned, these high sound 
pressure levels for a long time exposure can be harmful to 
the health of workers. In this way, the proposed system can 
help manage the noise level suffered by the employees 
during their working hours. 
IV. 
CONCLUSION AND FUTURE WORK 
This paper has presented a system for monitoring the 
noise exposure in industrial environments. The proposed 
system is based on an ad hoc network and the use of 
Raspberries Pi 3. The solution hereby presented represents a 
low-cost system for audio monitoring which can be 
considered as a general model that allows to be extended (by 
adding new functionalities) and used in other environments 
related to Internet of Things. 
As presented, one of the main advantages of the proposed 
system is the capacity to expand the WASN with more nodes 
in order to create a network tailored to users’ needs. In 
addition, the network deployment is autonomous and rather 
portable, because of node size. Finally, remote monitoring 
allows to manage the information in real time, such as 
configuring the nodes or checking the warnings. 
As a future work, in order to improve the benefits of the 
prototype proposed, further work to exploit data processing 
possibilities (such as machine learning for automatic noise 
classification) 
will 
be 
carried 
out. 
Among 
other 
improvements, we highlight the use of algorithms for 
classifying the audio in order to identify the source of the 
noise, thus better detecting certain alarming situations. 
 
 
Figure 5.  Evaluation of the sound pressure level, inside the UPV, measured outdoors. 
54
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-576-0
INTELLI 2017 : The Sixth International Conference on Intelligent Systems and Applications (includes InManEnt)

ACKNOWLEDGMENT 
This work is supported by the “Programa Estatal de 
I+D+i orientada a los Retos de la Sociedad” from the 
Government of Spain under the project “Smart Sound 
Processing for Digital Living (SSPressing)” (TEC2015-
67387-C4-4-R). 
REFERENCES 
[1] World Health Organization Europe, “Night noise guidelines for 
Europe,” 
2009, 
available 
online 
at:  
http://www.euro.who.int/__data/assets/pdf_file/0017/43316/E92845.p
df?ua=1, accessed: Jun. 2017.  
[2] International Labour Office, “Protection of workers against noise and 
vibration,” ILO Codes of Practice, 1977, avaible online at: 
http://www.ilo.org/wcmsp5/groups/public/---ed_protect/---protrav/---
safework/documents/normativeinstrument/wcms_107878.pdf, 
accessed: Jun. 2017. 
[3] K. S. Low, W. N. N. Win, and M. J. Er, “Wireless Sensor Networks 
for 
Industrial Environments,” 
Int. Conf. on Computational 
Intelligence for Modelling, Control and Automation and Int. Conf. on 
Intelligent Agents, Web Technologies and Internet Commerce 
(CIMCA-IAWTIC), Vienna, Austria, Nov. 2005, pp. 271-276, ISBN: 
0-7695-2504-0. 
[4] T. A. Onkar and P. T. Karule, “Web based Maintenance for Industrial 
Application using Raspberry-pi,” Online Int. Conference on Green 
Engineering and TEchnologies (IC-GET), Coimbatore, India, Nov. 
2016, pp. 1-4, ISBN: 978-1-5090-4556-3. 
[5] J. Segura-Garcia, S. Felici-Castell, J. J. Pérez-Solano, M. Cobos, and 
J. M. Navarro, “Low-cost Alternatives for Urban Noise Nuisance 
Monitoring using Wireless Sensor Networks,” IEEE Sensors Journal, 
vol. 15, no. 2, pp. 836-844, 2015. 
[6] T. Clausen and P. Jacquet, “Optimized Link State Routing Protocol 
(OLSR),” IETF RFC, vol. 3626, Oct. 2003.  
[7] T. Clausen, C. Dearlove, P. Jacquet, and U. Herberg, “The Optimized 
Link State Routing Protocol (OLSR) version 2,” IETF RFC, vol. 
7181, Apr. 2014. 
 
55
Copyright (c) IARIA, 2017.     ISBN:  978-1-61208-576-0
INTELLI 2017 : The Sixth International Conference on Intelligent Systems and Applications (includes InManEnt)

