Middleware Supporting Net-Ready Applications for Enhancing Situational 
Awareness on Rotorcraft 
 
Gustavo L. B. Baptista, Markus Endler 
Department of Informatics 
PUC-Rio 
Rio de Janeiro, Brazil 
gbaptista, endler @inf.puc-rio.br 
Thomas A. DuBois 
Technical Fellow – Software, Avionics and Systems 
The Boeing Company 
Ridley Park, PA 
thomas.a.dubois@boeing.com 
José Viterbo Filho 
Computing Institute 
UFF 
Niteroi, Brazil 
viterbo@ic.uff.br 
Randall L. Johnson 
Associate Technical Fellow – Avionics Software 
Bell Helicopter Textron 
Fort Worth, TX 
RJohnson@bellhelicopter.textron.com 
 
 
Abstract—This work presents middleware to support network 
ready applications that enhance Situational Awareness (SA) on 
rotorcraft operations. SA of pilots, command and control 
teams and other participants collaborating in missions, is 
critical for rotorcraft operational performance, mission 
success, safety and survivability. Applications and systems that 
aim to enhance SA impose requirements of real-time 
communication and processing of data streams with high 
throughput and low latency. The presented middleware 
provides capabilities such as real-time data-centric publish-
subscribe communication with Quality of Service (QoS) 
contracts, Semantic Interoperability, and Distributed Complex 
Event Processing for real-time detection of situations. An 
illustrative Situation of Interest (SoI) is presented, based on a 
realistic scenario of helicopter rescue missions for offshore 
drilling. Simulation results are presented that compare 
different event processing distribution models and abstraction 
levels, regarding their impact on performance and scalability. 
* 
Keywords-middleware; data distribution service; complex 
event processing; data stream processing; situational awareness. 
I. 
 INTRODUCTION 
Mission 
critical 
scenarios, 
typical 
of 
rotorcraft 
operations, demand effective communication, coordination, 
                                                             
* This project was funded by the Vertical Lift Consortium, formerly the 
Center for Rotorcraft Innovation and the National Rotorcraft Technology 
Center 
(NRTC), 
U.S. 
Army 
Aviation 
and 
Missile 
Research, 
Development and Engineering Center (AMRDEC) under Technology 
Investment Agreement W911W6-06-2-0002, entitled National Rotorcraft 
Technology Center Research Program. The authors would like to 
acknowledge that this research and development was accomplished with 
the support and guidance of the NRTC and VLC. The views and 
conclusions contained in this document are those of the authors and 
should not be interpreted as representing the official policies, either 
expressed or implied, of the AMRDEC or the U.S. Government. The 
U.S. Government is authorized to reproduce and distribute reprints for 
Government purposes notwithstanding any copyright notation thereon. 
decision-making and response under temporal and resource 
constraints. The burden of the workload on pilots associated 
with flying rotorcraft, conducting difficult missions with 
operational risks and environmental hazards [1] has to be 
lightened by tools that provide useful and instantaneous 
insight over many aspects and dimensions. 
A. Situational Awareness 
Situational Awareness (SA), a term coined in the aviation 
and military domains, according to [2], is “the perception of 
the elements in the environment within a volume of time and 
space, the comprehension of their meaning, and the 
projection of their status in the near future”. In order to 
enhance such awareness, systems shall capture real-world 
events and entities (i.e., by using sensors), communicate 
them to all interested parties, perceive and process them to 
detect situations that are relevant to the mission at hand. 
Since the elements to be perceived are both local to rotorcraft 
(e.g., local health and monitoring systems, geographical 
location and many other types of context data on a 
helicopter) but also spread out over other mission 
participants and the environment, a large set of sensors and 
communication technologies have to be combined. 
B. Net-Ready Applications 
Emerging communication technologies, such as IP-based 
radio Mobile Adhoc Networks (MANETS), which are 
becoming 
mature 
enough 
for 
use 
on 
rotorcraft, 
publish/subscribe middleware and common operating picture 
displays are being used as base for the development of 
network-ready (a.k.a. net-ready) applications that result in 
better pilot SA for improved safety and survivability [1]. For 
example, these applications provide the pilots with more 
awareness of the current location of other aircraft, vehicles, 
objectives, weather, uncharted obstacles that may impact the 
mission, and aids for difficult landing situations. 
46
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

C. Coordination Models 
SA is critical for safety and survivability of rotorcraft, but 
it also plays a larger role in establishing means for more 
effective coordination and collaboration between many 
participants involved in a flight or mission [3]. In centralized 
command and control, a control station typically receives 
information about the monitored assets in real-time, allowing 
rapid decisions and actions to be taken by control teams, 
such as modifying objectives, new targets, re-routing of task-
force team members, and other major operational or tactical 
changes in a mission. Another way to allow timely 
collaboration among the team members is to support 
decentralized, network centric mission communication and 
coordination. In this approach, each individual agent of the 
team performs its specific mission, but continuously shares 
data as needed with others so as to provide a more complete 
and accurate representation of the environment and better 
define its current role in a task force group. This type of 
coordination appears suitable for emergency search-and-
rescue missions (e.g., natural disasters) or tactical 
coordination (e.g., police or military patrol). In fact, such 
centralized and decentralized types of coordination can both 
be supported by command-and-control and decentralized 
collaboration systems at the same time, depending on the 
types of scenarios and missions. 
D. Situations of Interest (SoIs) 
In order to address SA enhancements, it is necessary to 
have the scope of specific Situations of Interest (SoIs) that 
are important for the accomplishment of missions. We 
consider as a Situation of Interest (SoI) a description of a 
spatio-temporal condition with regard to the context of 
monitored elements (e.g., their geographical position) and/or 
the environment state (e.g., the weather condition). The 
detection of a SoI usually demands a notification to 
interested parties (e.g., users or systems), either because it 
represents a desirable or undesirable/dangerous overall 
situation. A SoI can have a global or local focus, which can 
be respectively regarded as global SoI or local SoI. An 
example of global SoI is providing control station operators 
(or pilots on rotorcraft) overall situations related to a group 
of nodes (e.g., too many/too few helicopters in a region). An 
example of local SoI is showing a pilot combined local 
information from remaining fuel, weather data, obstacles and 
mission objectives. 
E. Visualization 
Visualization techniques play a central role in enhancing 
SA [4]. In the context of military and rescue missions, it 
generally involves the representation of geographic areas in 
maps or 3D environments, with the elements that are 
important to be monitored and considered for decisions in 
missions, or aiding individuals to perform specific tasks, for 
example, providing visual signals to a pilot during landing 
approaches. Appropriate visualization requires showing 
users the right information, at the right time, building a 
common picture of the operational area. Since the 
complexity and potential large number of elements and data 
sources (e.g., sensors and monitored nodes) can cause clutter 
to visualization, showing aggregations that combine large 
amounts of raw data is necessary. 
F. Goals 
In order to implement systems that support coordination 
and visualization enhancing SA, support is necessary from 
underlying middleware with mechanisms for real-time 
communication and processing of data streams with high 
throughput and low latency. In this work, we present a 
middleware architecture with such features, giving focus to 
its capabilities that allow the real time monitoring of nodes 
(e.g., rotorcraft) and the evaluation of general relations 
among mobile and stationary nodes, or virtual entities (e.g., 
arbitrary geographical points), in a scalable manner. The 
work in this paper has been developed in the context of a 
project 
called 
“Net-Ready 
Applications 
to 
Improve 
Rotorcraft Safety and Survivability”, sponsored by The 
National Rotorcraft Technology Center / Vertical Lift 
Consortium (NRTC/VLC). The goals of this project are to 
make rotorcraft more safe and survivable through the 
application of emerging net-ready technologies.  
After the description of base technologies in Section II, 
the middleware architecture is presented in Section III. A 
realistic scenario of helicopter emergency response missions 
in the offshore drilling domain is presented in Section IV, 
and Section V describes the application of this architecture to 
the context of the presented scenario. Performance results are 
then presented in Section VI that compares simulations with 
different 
event 
processing 
distribution 
models 
and 
granularities for data abstraction levels, regarding their 
impact on scalability and performance. 
II. 
BASE TECHNOLOGIES 
This section presents the technologies for event-based 
communication and processing, which have been used as 
base for the middleware presented in this work. 
A. OMG Data Distribution Service (DDSTM)  
The Data Distribution Service for Real-Time Systems 
(DDSTM) [5] standard determines a peer-to-peer (i.e.,  fully 
distributed 
and 
without 
broker 
nodes) 
data-centric 
publish/subscribe communication model. It provides high 
performance real-time communication, scalability and 
availability, and supports the specification of Quality of 
Service (QoS) contracts between data producers and 
consumers. It allows interoperability across different DDS 
implementations, programming languages and platforms, as 
well as automatic discovery of DDS publishers/subscribers. 
DDS is based on a Data Centric Publish/Subscribe model, 
where DDS Topics are logical entities defined to compose a 
distributed relational data model, also known as Global 
Shared Data Space. The Topics are the first class entities of 
information, which applications can publish or subscribe to, 
and can be regarded as distributed relational database tables. 
The DDS Domain, which contains all shared data, is fully 
distributed over the participating network nodes, without any 
intermediate broker or centralized management entity. 
47
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

Several commercial and open-source implementations of 
DDS are available, such as [6], [7]. 
B. Distributed Complex Event Processing 
Complex Event Processing (CEP) [8] extends the 
capabilities of the content-based publish subscribe model [9], 
with the capacity to specify relationships not only over event 
properties, but also relationships between different events, 
causality, 
temporality, 
sequencing, 
aggregation 
and 
composition. A complex event is thus a higher-level 
abstraction representing a situation derived from the 
occurrence of more elementary events. Causal maps can be 
associated to these events, allowing a complete tracking of 
the event causes (i.e., the sequence of events that caused an 
event to happen). The temporal relationships between events 
allow the processing of event sequences within specified 
time windows. It is also possible to evaluate aggregation 
functions over event properties observed in sets of events, 
such as the average, maximum or minimum property values 
of the observed event set.  All these features allow the 
definition of powerful event processing rules that express 
application-relevant patterns of events and their relationships 
[10]. Many commercial and open-source implementations of 
CEP are available, such as [11]–[15]. 
1) Event Processing Agents and Event Processing 
Networks 
An Event Processing Network (EPN) is a conceptual 
representation of an event processing system in a platform 
independent way. An EPN is composed of Event Processing 
Agents (EPAs), which receive event streams as input and 
process these events with different operations (e.g., filtering, 
aggregation, transformation, pattern detection, etc) producing 
events as output, as the result of this processing (The concept 
of Event Processing Agent is not related to, and shall not be 
confused with, the concept of “agent” in Agent-Based 
Models or Multi-Agent Systems). In an EPN, the EPAs are 
conceptually connected to each other (i.e., output events 
from one EPA are received and further processed by other 
EPAs), without regard to the particular details and type of 
the underlying communication mechanism (e.g., push- or 
pull-based) used to transfer events between each other. The 
EPAs organized in an EPN implement the whole processing 
logic of situation detection through event processing [8], 
[16]. 
2) EPNs Distribution Models 
Event processing systems (e.g., CEP systems) implement 
the concepts of EPNs in slightly different ways, but one 
important aspect that has the largest impact on scalability is 
the deployment model of the EPN (centralized vs. 
distributed). The distribution of the event processing 
architecture is a key aspect to allow scalability on the 
number of data producers and data consumers, and also 
scalability in the number of SoIs to be detected from large 
amounts of events flowing through the system [17]. Different 
academic and commercial distributed event-processing 
systems are available. The majority of them use a distributed 
clustered deployment model, e.g., [11], [12], [15], with few 
implementing a distributed networked deployment model 
[13], [18]. 
C. SoIs Expressed as CEP Rules 
The capabilities of processing event streams and the 
recognition of event patterns on real time provided by the 
CEP model make it very well suitable for the detection of 
SoIs, to enhance SA. Rules can be deployed on EPAs to 
compose EPNs, which trigger complex events representing 
the detected SoIs. These complex events can be captured by 
applications, systems or used by other rules to detect many 
abstraction levels of SoIs. 
III. 
MIDDLEWARE ARCHITECTURE 
In the context of this NTRC/VLC project, a set of 
capabilities 
for 
applications 
was 
prioritized 
for 
implementation, all with a network-centric approach for real-
time data sharing among rotorcraft nodes [1], [19]. 
Middleware APIs, encapsulating the use of DDS for data-
centric publish/subscribe communication, were developed 
supporting capabilities, such as Networked Weather, 
Uncharted Obstacles, Own Ship Position Reporting, and 
Aids for Landing Operations. The API methods allow 
applications to interact with the DDS Global Shared Data 
Space synchronously or asynchronously, without requiring 
the application programmer to deal with DDS-specific 
entities or to have deep knowledge about the DDS 
specification. Figure 1 shows an overview of the Middleware 
for Net-Ready Applications, with the communication APIs 
for the different net-ready applications, and modules for 
managing QoS, Semantic Interoperability and Distributed 
Complex Event Processing, explained in sections A, B and C 
respectively. 
We 
implemented 
the 
middleware 
for 
OpenSplice DDS [6] and RTI Connext DDS [7] commercial 
DDS products, in C++ and Java. The DCEP module is 
currently implemented in Java with instances of the Esper 
CEP open-source engine. 
 
Figure 1.  Middleware for Net-Ready Applications Overview, built on top 
of a DDS implementation. 
A. Quality of Service Management 
The DDS specification provides a rich set of Quality of 
Service (QoS) parameters, features and enforcement 
48
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

mechanisms (e.g., communication reliability, latency, 
transport priority, data persistence, etc.). However, the 
configuration and association of these QoS parameters with 
the different DDS entities (i.e., Domain participant, 
Publisher, Subscriber, DataReader/Writer and Topics) is 
usually restricted to be done at application development 
time, and is work-intensive. Therefore, a QoS Management 
API was developed to provide direct means of defining DDS 
QoS parameters dynamically through configuration files, 
which also serve as QoS templates that can be used by the 
other components of our middleware. 
Using the QoS Management API, important QoS settings 
can be set, depending on the scenario of usage, for example: 
Defining prioritized event flows for meeting real-time 
requirements, in accordance to the level of priority required 
by SoIs. Setting the level reliability for data delivery to 
ensure delivery or the discarding of certain types of events in 
the case of network failures. Setting the persistence level of 
different Topics to allow late joiners to receive events 
already published into the system, or to make data volatile. 
B. Semantic Interoperability Support 
When systems operated by different groups, belonging to 
different organizations, need to interact and exchange 
information, the use of different data standards and formats 
may become a hurdle. Although much shared data are 
conceptually of same type, e.g., position, speed, cargo 
weight, etc., they may be represented in different units and 
formats. In the specific case of geographic location, it may 
be described by different projection, datum and coordinate 
systems [20]. To tackle this problem, we implemented a 
semantic interoperability service, where a node in the DDS 
Domain assumes the mediator role. Whenever a new node 
joins the system, it informs the mediator which model it 
adopts to represent the data to be shared. This mediator is 
capable of querying an Ontology Manager to obtain further 
semantic information about how to deal with different data 
models adopted by the peers. The Ontology Manager stores 
ontologies that represent known semantic models and 
conversion rules between them, and delivers these rules to 
the mediator. As to the data conversion process, it may be 
performed by two different approaches. In a centralized 
approach, upon receiving the conversion rules from the 
Ontology Manager, the mediator will be responsible for 
converting all data among the different models. Of course, 
this is only feasible if the amount/frequency of data 
exchange is low. In a translation-on-receiving approach, the 
mediator will forward the conversion rules to all nodes, and 
each one will produce data using its original model. When a 
node then receives data represented in a different model, it 
will itself perform the translation. 
C. Distributed Complex Event Processing Management 
The Distributed Complex Event Processing Management 
(DCEPM) module, as shown in Figure 1, implements the 
distributed complex event processing architecture, which 
allows the creation of EPNs to detect SoIs. The EPAs use 
DDS to send and receive events from/to monitored nodes, 
and to exchange events with each other. In the former case, 
the middleware APIs for Net-Ready Applications, in 
addition as being used by applications, are used by the EPAs 
to subscribe and publish to the DDS Topics that share data 
from monitored nodes and applications. On the latter case, 
the EPAs provide and use additional DDS Topics that are 
specific for them, which can also be used by applications to 
consume events. 
Each EPA contains a DDS Subscriber for subscribing to 
events from the desired sources. For example, an EPA can 
subscribe to events from rotorcraft nodes or other EPAs. A 
CEP engine is instantiated inside each EPA, with deployed 
rules that process events received from the DDS layer. Since 
the communication APIs are separated from the CEP Engine, 
EPAs can use any desired internal CEP engine for processing 
events (the current implementation uses the open-source 
Esper CEP engine). An internal DDS Publisher allows the 
EPA to publish events into the DDS Domain, after 
processing input events with the internal CEP Engine. 
D. Net-Ready Applications With Visualization 
The middleware presented in this work provides many 
benefits for the development of applications that enhance SA 
in rotorcraft missions. We developed applications with 
capabilities for monitoring Own Ship positions, Weather 
Reports and Obstacles, showing a common operational 
picture on a map (using instances of FalconView [21] and 
Google EarthTM). In [1] we presented details about the 
development of those applications, and in Section VII we 
show simple functional evaluation with a visualization tool 
to show the detection of a SoI. Several other benefits are 
provided 
to 
applications 
from 
the 
decoupling, 
interoperability and QoS management provided by this 
middleware. Network ready visualization applications can be 
quickly adapted to select and present data of interest 
particular to the mission or aircraft. Implementation across 
varied operating systems and visualization systems provides 
broader accessibility to different aircraft cockpits and 
avionics suites [1]. This allows interoperability between 
civilian and military providing similar views of the 
emergency scenario to all enabled responders. QoS settings 
and security implementations can segregate unnecessary or 
sensitive information from individual responders. If a 
responder is a rescue unit, it could filter on medical needs, 
landing area obstacles, weather, etc. Fire suppression units 
could filter on reported fire zones, wind, and elevated 
obstacles. Security forces could filter on possible incursion 
treats from outside the evacuation zone, etc. Each individual 
responder, depending on their current role, could select 
preconfigured event sets or custom event sets. Tactical 
command centers observing all operations could quickly 
respond to changing conditions. 
IV. 
REPRESENTATIVE SCENARIO AND SITUATION OF 
INTEREST 
In Brazil, the offshore regions of the states of Rio de 
Janeiro, São Paulo and Espírito Santo are areas of intense oil 
exploration, and are responsible for up to 80% of the 
Brazilian oil production. Therefore, many offshore oil 
drilling and extraction platforms are deployed in this region, 
49
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

and can be located as far as 100km from the coast. Because 
of this exploration activity there are ships and helicopters 
transporting employees, cargo and equipment between land 
bases and the offshore platforms. However, both the oil 
extraction activities of the offshore platforms, and the traffic 
of ships and aircraft impose operational risks. Employees 
working on oil platforms are exposed to risks of fire or 
explosions and the inherent risks of helicopter air 
transportation. Several emergency incidents occurred during 
the last several years, such as fire and explosions on 
platforms. Also, helicopter crashes have been reported. The 
large distances these helicopters have to fly, without any 
close emergency landing spots, expose them to unexpected 
and severe weather and also make them vulnerable to 
mechanical failures. These risk factors and recent incidents 
show that the capacity of effectively performing emergency 
response operations in these regions is very important, to 
respond to incidents involving oil platforms, ships and 
helicopters. 
A. Situation of Interest 
In order to show how the proposed system is able to 
support applications that enhance SA, we describe a 
hypothetical SoI to be detected by the system. The example 
SoI is characterized by the generation of an alert notification 
when a significant percentage of monitored nodes is out of 
range from a set of previously defined stationary set of 
Points of Interest (PoIs). An application of this inference 
could be, for example, to detect when a set of helicopters, 
which cover routes between support bases (e.g., land bases, 
oil extraction platforms, military support bases, etc.), are too 
far from all these points at the same time, characterizing an 
exposure to high operational risk. For instance, if rescue 
helicopters are all away from support bases at the same time, 
an unexpected emergency situation that requires their 
reallocation can be difficult to manage. Applying this 
situation to the aforementioned scenario, we define that the 
helicopters are the monitored nodes, and the land bases are 
the PoIs. Considering all the operational risk involved, it is 
important to have a minimum number of rescue helicopters 
close to support bases, so they can return and reload with the 
required resources (e.g., fuel, medicine or cargo). This SoI 
was chosen because it presents characteristics that allow us 
to explore its detection with multiple granularities of event 
abstraction levels (explained in Section III). 
V. 
DISTRIBUTED COMPLEX EVENT PROCESSING 
INSTANTIATION 
In order to implement the detection of the SoI described 
in Section IV.A, an EPN with a specific hierarchical 
topology is used. We define three main kinds of EPAs, as 
shown in Figure 2. Node EPAs are deployed in the mobile 
monitored nodes, containing CEP rules (i.e., event 
correlation and patterns rules) that detect primitive events 
locally at the node (e.g., from local sensors), and generate 
events that represent abstractions of situations detected 
locally on that node.  
 
Figure 2.  Example of an EPN Hierarchical Topology with Node EPAs, 
Network EPAs, and a Global EPA. 
Network EPAs are deployed in the fixed network and 
receive events from a set of Node EPAs in their 
responsibility (the sets of Node EPAs in the responsibility of 
a Network EPA can be defined following any desired 
criteria, like geographical regions). The Network EPAs 
contain CEP rules that detect events related to all the nodes 
in their responsibility. The Network EPAs process the events 
received from Node EPAs and generate events with a higher 
level of abstraction (e.g., summarizations, aggregations of 
primitive events). Global EPAs are also deployed in the 
fixed network, and receive events from a set of Network 
EPAs. The Global EPA contain CEP rules that detect events 
related to all Network EPAs, and produce events with an 
even 
higher 
level 
of 
abstraction/aggregation, 
that 
characterize the detected overall SoI. This hierarchical 
organization of agents is general enough to be used for the 
detection of many other similar SoIs, since it reflects an 
organization that promotes scalability. Event Abstraction 
Levels Different granularities and abstraction levels can be 
used to define CEP events, and there’s subjectivity on this 
choice. For example, considering the SoI presented in 
Section A, the Own Ship Position Report event sent by 
rotorcraft nodes is considered to be at a fine-grained 
abstraction level. Other events considered as having a 
coarser-grained 
abstraction 
level 
(i.e., 
generated 
by 
aggregation of events with lower abstraction levels) can be 
defined. On our example situation, a node has knowledge 
about existing PoIs, and calculates if it is within a defined 
distance range from all of them. So instead of sending fine-
grained Own Ship Position Report events, it can send a 
coarse-grained event representing whether the node is within 
or out of range from PoIs, called “RangeStateFromPoIs”, 
bringing to the monitored nodes the processing effort, and 
reducing the load on the Network EPAs. Section VI shows 
performance results of simulations with different abstraction 
levels of events exchanged between processing agents, and 
how they impact performance and scalability. 
VI. 
PERFORMANCE RESULTS 
This section describes tests performed with the detection 
of the SoI presented in Section A, to assess how using 
multiple distributed EPAs may improve overall scalability in 
50
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

the rate of events processed by the system, comparing to the 
use of a single centralized EPA. The tests compare different 
settings of events abstraction levels and EPN distribution 
models, to assess how they influence performance and how 
they scale in the number of monitored nodes and PoIs. 
Although the SoI presented in Section A does not require 
processing a large number of PoIs (as the number of offshore 
platforms and land bases is not large), other different SoIs 
may require the processing of a large set of virtual entities 
(e.g., an aircraft monitoring obstacles on real time). Two 
settings for the abstraction levels of events were used; (A1) 
Fine-grained Abstraction of Events – Rotorcraft nodes send 
Own Ship Position Report events (with their current 
position), and Network EPAs perform all processing to 
verify which nodes are out of range from PoIs. (A2) Coarse-
grained Abstraction of Events - Each rotorcraft node has 
knowledge of the geographical coordinates of all PoIs and 
publishes a coarse-grained abstraction event indicating 
whether or not it is on range from all PoIs at a given moment 
(“RangeStateFromPoIs”). This local processing removes the 
processing burden from the Network EPAs, transferring it to 
the nodes to promote overall system scalability. Two settings 
for deployment models of EPNs were used: (B1) Centralized 
Event Processing - All monitored nodes send events to a 
single Network EPA. (B2) Distributed Event Processing - 
Monitored nodes send events to distributed Network EPAs. 
Each Network EPA processes events from nodes in its 
responsibility and disseminates consolidated reports (i.e., 
coarse-grained events) with this data. A Global EPA 
aggregates data from all Network EPAs, counting the overall 
percentage of nodes out of range from PoIs, and generating 
an event indicating the global situation. The tests were 
performed 
with 
an 
infrastructure 
of 
6 
machines 
interconnected in a Local Area Network (LAN) by a Gigabit 
Ethernet switch. Up to 3 Network EPAs and 1 Global EPA, 
were deployed in four different machines with Quad-Core 
Intel i5 processors and 8GB RAM, running Fedora Linux 15, 
64 bits. A load generator application, simulating rotorcraft 
nodes, Node EPAs, and an instance of Google EarthTM 
application, were respectively deployed in two laptop 
computers. For each setting (A1, A2, B1 and B2), 1000, 
2000 and 3000 rotorcraft nodes, and 100, 500 and 1000 PoIs 
were simulated. A maximum range distance from PoIs of 10 
kilometers was specified, and each rotorcraft node was 
positioned in a fixed location outside the range of all POIs. 
Figure 3 shows a chart comparing the throughput of the 
system for the different settings (A1, A2, B1 and B2). As 
expected, the coarse-grained abstraction of events removed 
the processing effort from the Network EPAs, improving 
the overall system throughput. Since each monitored node 
sends data to a specific Network EPA, the overall system 
average throughput is the sum of the average throughput of 
all Network EPAs. 
 
Figure 3.  Overall system average throughput with different event 
abstraction levels and EPN distribution models 
This demonstrates the benefits of the distributed deployment 
of Network EPAs. Regarding network bandwidth usage (not 
addressed in this test), it is reasonable to assume that the 
periodicity of events with coarser-grained abstraction levels 
is in general lower than the frequent sending of events with 
finer-grained abstraction levels. In applications where the 
fine-grained events are still necessary for other inferences or 
system functionalities (e.g., the Own Ship Position is 
necessary for a control station to show the location of nodes 
in a map), these events will be propagated through the DDS 
domain peer-to-peer network only to the interested parties, 
not affecting the other nodes. 
VII. VISUALIZATION 
This work is primarily focused on the middleware aspects 
to support applications and visualization techniques at a 
higher level and it is not the goal of this paper to evaluate the 
level of SA provided to users, or its actual impact on 
operational performance. In [1], we presented a measurement 
on the value of integrating the underlying communication 
infrastructure and the network-ready applications, on 
rotorcraft for improving operational performance. A test with 
a visualization tool was used to serve as a functional 
evaluation of the capabilities provided by the underlying 
middleware architecture. In the context of the representative 
scenario presented in Section IV, we illustrate the use of a 
visualization tool which benefits from the middleware 
architecture, and how it shows the example SoI. Figure 4 
shows a screenshot of a Google EarthTM application, 
showing the coast of Rio de Janeiro state and rotorcraft 
nodes (represented in MIL-STD-2525A symbology) flying 
between land bases and offshore platforms. The nodes in 
green are inside the specified range from PoIs (i.e., land 
bases), and the ones in red are out of range from PoIs. 
VIII. RELATED WORK 
The use of middleware to support applications that 
enhance SA (e.g., visualization applications) is addressed by 
other work, such as [4] and [22]. Feibush et al. [4] present a 
visualization tool and a middleware architecture, based on 
CORBA for client-server communication between monitored 
51
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

nodes and an infrastructure of services. Commercial 
solutions, like Solipsys Tactical Display Framework (TDF) 
[22] provide middleware and advanced visualization 
solutions for many types of mission-critical systems. In 
general, the integration of pure visualization applications 
(e.g., FalconView [21]) with any type of middleware has the 
potential to benefit users with enhanced SA. Many different 
academic and commercial middleware implementations 
provide event-based communication and distributed event 
processing, such as [11]–[15], [17], [18], [22]. 
 
Figure 4.  Real-time visualization, showing simulated rotorcraft nodes 
The benefits of our middleware architecture come from 
the combination of using real-time data-centric publish-
subscribe communication model with advanced QoS features 
provided 
by 
the 
DDS 
Specification, 
Semantic 
Interoperability, and Distributed CEP, provided by the 
modules and APIs presented in this work. To the best of our 
knowledge, none of the distributed event processing 
middleware solutions combines all these features. The 
middleware presented in this work can be integrated in any 
desired visualization tool or framework, and the use of 
Google EarthTM was due to its simplicity in providing an 
initial experimentation. 
IX. 
CONCLUSION 
In this work, we presented a middleware architecture to 
support net-ready applications that can enhance SA, with 
capabilities such as real-time peer-to-peer data-centric 
publish/subscribe 
communication, 
QoS 
Management, 
Semantic Interoperability and Distributed Complex Event 
Processing. A representative scenario and a SoI instantiation 
to be detected by the system were presented. Simulations 
with the detection of the SoI were performed, and a 
visualization tool was used to illustrate the capabilities of the 
proposed architecture, in the context of the representative 
scenario. Performance results show that the distribution of 
EPAs and the use of coarse-grained event abstractions 
improve the overall system scalability regarding the 
throughput in processing events. The use of coarse grained 
event abstraction levels partially removed the processing 
load from the infrastructure, taking advantage of the 
processing power present in nodes, and also potentially 
reducing network bandwidth usage, which is very important 
in resource constrained mobile networks. 
REFERENCES 
[1] 
T.A. DuBois, B. Blanton, F. Reetz III, M. Endler, W. Kinahan, 
G.L.B. Baptista, and R. L. Johnson, “Open Networking Technologies 
for the Integration of Net-Ready Applications on Rotorcraft,” Annual 
conference of the American Helicopter Society. 2012. 
[2] 
M. R. Endsley, “Toward a theory of situation awareness in dynamic 
systems,” Human Factors: The Journal of the Human Factors and 
Ergonomics Society, vol. 37, no. 1, pp. 32–64, 1995. 
[3] 
D. S. Alberts, J. Garstka, and F. P. Stein, Network Centric Warfare: 
Developing and Leveraging Information Superiority. Washington 
DC: C3I Command and Control Research Program, 2000. 
[4] 
E. Feibush, N. Gagvani, and D. Williams, “Visualization for 
situational awareness,” Computer Graphics and Applications, IEEE, 
vol. 20, no. 5, pp. 38–45, 2000. 
[5] 
OMG, “Data-Distribution Service for Real-Time Systems (DDS).” 
2006. 
[6] 
PrismTech, 
“OpenSplice 
DDS.” 
[Online]. 
Available: 
www.prismtech.com [retrieved: January, 2013]. 
[7] 
RTI, “RTI Connext DDS.” [Online]. Available: www.rti.com 
[retrieved: January, 2013]. 
[8] 
D. C. Luckham, The power of events: an introduction to complex 
event processing in distributed enterprise systems. Addison-Wesley 
Longman Publishing Co., Inc. Boston, MA, USA, 2001. 
[9] 
P. T. H. Eugster, P. A. Felber, R. Guerraoui, and A. M. Kermarrec, 
“The Many Faces of Publish/Subscribe,” ACM Computing Surveys, 
vol. 35, no. 2, pp. 114–131, 2003. 
[10] G. Cugola and A. Margara, “Processing flows of information: From 
data stream to complex event processing,” Technical report, 
Politecnico di Milano, 2010. 
[11] SYBASE, “SAP Sybase Event Stream Processor CEP.” [Online]. 
Available: 
http://www.sybase.com/products/financialservicessolutions/complex-
event-processing [retrieved: January, 2013]. 
[12] Esper, “Esper.” [Online]. Available: http://esper.codehaus.org/ 
[retrieved: January, 2013]. 
[13] TIBCO, 
“TIBCO 
Business 
Events.” 
[Online]. 
Available: 
http://www.tibco.com/products/event-processing/complex-event-
processing/default.jsp [retrieved: January, 2013]. 
[14] Oracle, 
“Oracle 
CEP.” 
[Online]. 
Available: 
http://www.oracle.com/technetwork/middleware/complex-event-
processing [retrieved: January, 2013]. 
[15] StreamBase, 
“StreamBase 
CEP.” 
[Online]. 
Available: 
http://www.streambase.com [retrieved: January, 2013]. 
[16] O. Etzion and P. Niblett, Event processing in action. Manning 
Publications Co., 2010. 
[17] O. Papaemmanouil, U. Cetintemel, and J. Jannotti, “Integrating Pub-
Sub and Stream Processing for Internet-Scale Monitoring,” 2009. 
[18] E. Fidler, H. A. Jacobsen, G. Li, and S. Mankovski, “The PADRES 
Distributed 
Publish/Subscribe 
System,” 
in 
8th 
International 
Conference on Feature Interactions in Telecommunications and 
Software Systems, 2005. 
[19] G. Baptista, M. Endler, and J. Viterbo, “Middleware Supporting 
Situational Awareness in Mission-Critical Scenarios with Rotorcraft,” 
PUC-Rio, Rio de Janeiro, 2012. 
[20] D. H. Mahlinh, Coordinate Systems and Map Projections. London: 
George Philip and Sons Publishers, 1973. 
[21] “FalconView.” 
[Online]. 
Available: 
http://www.falconview.org/trac/FalconView 
[retrieved: 
January, 
2013]. 
[22] Raytheon, “Solipsys Tactical Display Framework (TDF).” [Online]. 
Available: http://www.solipsys.com/tdf/ [retrieved: January, 2013].
 
52
Copyright (c) IARIA, 2013.     ISBN:  978-1-61208-257-8
ICAS 2013 : The Ninth International Conference on Autonomic and Autonomous Systems

