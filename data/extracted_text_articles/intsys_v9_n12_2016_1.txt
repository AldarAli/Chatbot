Reliable Document-centric Processing and Choreography Policy
in a Loosely Coupled Email-based System
Magdalena Godlewska
University of Gdansk
Faculty of Mathematics, Physics and Informatics
Institute of Informatics
Gdansk, Poland
Email: maggod@inf.ug.edu.pl
Abstract—Email is a simple way to exchange digital documents of
any kind. The Mobile INteractive Document architecture (MIND)
enables self-coordination and self-steering of document agent
systems based on commonly available email services. In this
paper, a mechanism for providing integrity and reliability of such
an email based agent system is proposed to cope with message
soft or hard bounces, user interrupts, and other unexpected
events. This mechanism consists of a system acting as a ”ground
control” for migrating documents and a set of protocols that
improve the implementation of document coordination patterns.
It allows for an estimation of the global state of a distributed
loosely coupled agent system and making top-down decisions
in unforeseen situations. In complex human organizations, it is
important to determine who can make decisions and what is their
scope in the process. The choreography policy allows for deﬁning
communication tactics and assigning permissions of workﬂow
editing to participants of the process.
Keywords–multi-agent systems; collaborative work; electronic
documents; email-based systems; knowledge-based organization;
choreography
I.
INTRODUCTION
This paper extends the previous work describing ”ground
control” service to ensure reliability of workﬂow processes in
a loosely coupled email system [1].
A knowledge-based organization is a management idea,
describing an organization in which cooperating people use
knowledge resources to achieve organizational goals. People
are the key intellectual resource but only collaboration with
other workers in accordance with the organizational procedures
enables converting knowledge of individuals to knowledge
of organization [2]. Section II outlines main features of the
knowledge-based organization from the perspective of the
knowledge resources and the interaction between them. This
section is new from the previous paper [1] and presents the
motivation for the work of the MIND architecture.
Knowledge workers communicate through the exchange
of documents constituting units of information. Nowadays,
email has a dominant position in the computer mediated
communication and document exchange in the workplace [3].
Email messaging provides an easy to use simple textual form
and allows to disseminate attachments in any format to one or
multiple recipients.
The MIND architecture [4] is a proposition of a document-
centric uniform interface to provide both effective communi-
cation of content and coordination of activities performed on
documents. MIND is a solution that augments email messag-
ing with proactive documents, capable of initiating process
activities, interacting with individual workers on their personal
devices and migrating on their own between collaborators.
Thus, each MIND document is a mobile agent. Document-
agents have built-in migration policy to control their own work-
ﬂow and services to proper processing contained information.
Section III contains a more detailed overview of the MIND
architecture.
The migration path of the document-agent contains all
information and status of the workﬂow process to perform it
locally on users’ devices. An email client installed on each
worker’s device participating in the process needs to be ex-
tended with functionality to activate the document-agents and
switch documents between the activity and transition phases of
the workﬂow. This special email client with workﬂow enact-
ment capability has been implemented as a Local Workﬂow
Engine (LWE) [5]. All LWEs participating in the process
and performing independently form together both a loosely-
coupled agent system and a distributed workﬂow enactment
service. Section IV outlines generic functionality of LWE and
the idea of distributed workﬂow enactment service.
In the LWE-based MIND system, individual knowledge
workers perform activities on documents independently, using
their personal devices, and yet collaborate on achieving a
common goal. This is possible owing to the migration policy
embedded in each document. This policy deﬁnes for each
document a workﬂow process composed of speciﬁc document-
ﬂow patterns that provide process wide coordination. The
document-ﬂow patterns [5] are the result of analysis of the
coordination patterns proposed by van der Aaalst [6] under
the assumption that email is the transport layer for document
migration. The work of van der Aaalst shows that a relatively
small and well deﬁned set of collaboration patterns con-
tains building blocks of arbitrary complex workﬂow processes
in real organizations. Thus, the document-ﬂow patterns that
directly follow the collaborations patterns for the proposed
MIND architecture enable modeling and coordination of any
workﬂow process.
The crucial services for MIND implementation are ex-
ecutability and mobility. The former involves activating
document-agents to enable their autonomous execution, while
the latter involves transporting them between users’ devices
in accordance with the migration policy. These services have
already been implemented and described before [4][5]. In the
1
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

prototype system, mobility has been implemented based on
email as the transport layer.
In most cases, these mentioned services are sufﬁcient to
properly perform the MIND agent system. However, in human
organizations, some situations unforeseen by the designer of
the process may occur and the reliable system should be able
to cope with them. For a distributed loosely coupled and
interactive system it is impossible to determine a global state
of all document-agents. Consequently, it is not possible to
determine where all documents are located at a speciﬁc time.
A document may be lost and it often remains beyond the
knowledge of the authors, who have edited it earlier. There
are various reasons why documents may be lost: a problem
with a transport layer, an error of a local environment or
an unexpected user behavior. The initial workﬂow process
deﬁnition makes it possible to search for documents in the
speciﬁed places. However, the process may be modiﬁed during
its execution. Therefore, a document may take a path that
was not originally designed and a document originator has
not information about its deﬁnition.
Thus, the reliability of the MIND agent system is a service
that makes the system more useful and trustworthy than the
typical email-based communication. It allows for an estimation
of the global state of a distributed loosely coupled system,
taking into account transport layer errors, unforeseen actions
of users and process modiﬁcations.
Thus, Section V identiﬁes problems associated with dis-
tributed workﬂow execution. Section V-A focuses on the
problems associated with email as the transport layer for the
MIND documents, while Section V-B presents problems that
may occur in speciﬁc document-ﬂow patterns. In particular, it
is interesting the canceling pattern due to the loosely-coupling
principle at operating of the MIND agent system.
Section VI presents a concept of a ”ground control” ser-
vice, which introduces the ability to track document-agents
globally and solve some of the problems associated with the
documents ﬂow. The service is designed to receive signals
containing the status of the document from the LWE clients
and send control signals to LWEs that resolve situations incom-
patible with the designed workﬂow. The proposed syntax of a
notiﬁcation sending to the ”ground control” service is adapted
to document-ﬂow patterns. Further, this section outlines two
pilot implementations of the ”ground control” service – one
using the Handle System [7], and another based on an email-
based notiﬁcation system. It also presents assumptions for
tracing tool and its possible implementation.
The ”ground control” service enables a global monitoring
of the process and extends communication by message-based
interactions among the participants. But it would be very
impractical if the whole complex process of the organization
was tracked only by one worker. Thus, there are important
questions: which workers can monitor or change workﬂow
process and how should be speciﬁed messaging behavior of
the workﬂow participants. The impact of many workers on
the process execution, interaction and communication between
them from a global perspective is deﬁned by a concept called a
choreography [8]. The choreography policy allows for deﬁning
communication tactics and editing workﬂow strategy. It can
be added to the MIND architecture as a new policy, which is
presented in Section VII. This section is new from the previous
paper [1].
workers
tacit knowledge
procedures
implicit knowledge
repositories
explicit knowledge
MIND
Figure 1. The knowledge resources in the knowledge-based organization.
Section VIII presents real use-cases based on business
scenarios. Section IX surveys previous work related to a
document-centric processing and a reliability of workﬂow
enactment in distributed loosely-coupled systems.
II.
A KNOWLEDGE-BASED ORGANIZATION
Data are deﬁned as symbols that represent properties of
objects, events and their environment. They are the products
of some ”observation”. But are of no use until they are in
a relevant form. Information can be deﬁned as ordering and
interpretation of data based on some patterns. The set of
patterns in a certain context creates knowledge. Knowledge is
know-how, and is what makes possible the transformation of
information into instructions. New knowledge is built through
the creation of new patterns [9].
Knowledge-based organizations focus on processes based
on collection, transfer and use of knowledge. Such processes
are called knowledge processes. Knowledge workers play an
important role in the knowledge process. They generate new
knowledge based on current information, their own knowledge
and knowledge transferred by other workers mostly through the
documents. The purpose of the knowledge-based organization
is to implement the knowledge process, in which the human
mind is an important element [2][4].
The literature on knowledge management distinguishes
three types of knowledge: explicit, implicit and tacit [10].
These terms reﬂect the knowledge resources use in the knowl-
edge process and presented in Figure 1.
–
repositories with explicit knowledge that has been ar-
ticulated, encoded mostly in documents and organized
in a form enabling accessibility, such as databases,
libraries or knowledge bases.
–
procedures are mostly implicit knowledge that is not
written down yet but locked in processes, products,
culture, routines, artifacts, or structures and not de-
pendent on an individuals context. It is known also as
embedded or procedural knowledge.
–
workers with their tacit knowledge, i.e., the knowledge
in their heads that is made up from personal learning
and experience. It is not written down and is often
hard or impossible to articulate.
These knowledge resources and the interaction between
them are essential in processes of the knowledge-based or-
ganization. Workers are the key knowledge resource of an
organization and there are some interfaces enable them to
access the three types of knowledge resources mentioned
above. These interfaces are often independent of each other
and they push most of the work on workers, i.e., workers
2
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

document
templates
repository
migration policy
services
hub
document
final
document
other policies
ground control
service
dynamic component
dynamic component
dynamic component
choreography 
policy
Figure 2. The MIND document lifecycle.
hub-document
+id
+title
+security
service
+id
+name
+uri
worker
+id
+name
+email-address
part
+id
+content-type
+content
path
+id
+current-activity
transition
+id
+from
+to
activity
+id
+name
0..*
1..*
1..*
1..*
1..*
1
id
id
Figure 3. Dynamic form of the MIND architecture [5].
can query repositories, workers often must know procedures
or sometimes they are supported by workﬂow tools, and
workers initiate communication with coworkers. Thus, people
do simultaneously: creative work, which is their goal, and
bureaucratic work, which can be largely automated.
The MIND architecture, outlined in the next section, en-
ables to direct the attention of workers to their creative work,
through the coordination of process activities and simpliﬁca-
tion of interaction with the knowledge resources.
III.
THE MIND ARCHITECTURE
The MIND architecture enables the new agent-based dis-
tributed processing model. Traditionally, electronic documents
have been static objects downloaded from a server or sent by
email. MIND allows static documents to be converted into a set
of dynamic components that can migrate between collaborative
workers according to their migration policy.
The concept of the MIND document life cycle is illustrated
in Figure 2. At the beginning of the knowledge process,
some originator forms a hub document based on document
templates that includes migration policy, which speciﬁes the
steps of the process and services that will be performed
on different parts of the document during the process. The
hub document is changing to mobile components that meet
their mission in the distributed agent system. Each component
performs its migration policy and interacts with workers of the
organization.
The MIND architecture makes possible a radical shift
from data-centric distributed systems, with hard-coded func-
tionality, to ﬂexible document-centric ones, where specialized
functionality is embedded in migrating document components
and some generic or supporting services are provided by
local devices or external servers. The essence of the MIND
architecture is that the documents have capability of self-
organization and self-steering during the process execution.
Figure 3 outlines the dynamic form of the MIND architec-
ture. It includes ﬁve components: hub-document is the main
component and it contains basic information about all MIND
document and is common to all other components, worker
component contains data about workers who participate in
the process, part component deﬁnes parts of the document,
service component contains information about services that
can be performed on different parts of the document during
the process, and path component deﬁnes migration policy of
each part of the document. It speciﬁes the steps of the process
and activities that should be performed at each step of the
process.
The service objects provide document functionality that
makes it proactive. Three types of services are possible: em-
bedded that are transferred together with the document, local,
which may be acquired by the document components from
local worker’s device, and external, called on the remote hosts
by the worker’s system at the request of arriving document.
The components of the MIND dynamic form reﬂect the
knowledge resources presented in Section II. The worker
component deﬁnes the participants of the process, who bring
to the organization their tacit knowledge. The part component
deﬁnes parts of whole MIND document, each of which con-
tains a constituent document migrates independently between
the participants in the process. The constituent document is
a speciﬁc document with a speciﬁed format, structure and
purpose, e.g., an Excel document with attendance list. Thus,
parts reﬂect explicit knowledge. They are created based on
templates available in organization, accumulate knowledge
obtained from workers during the process, and ﬁnally, they are
archived in repository for future use. The path component is an
implementation of organizational procedures. The path com-
ponent may be modiﬁed during the process, thus knowledge
remains implicit in general. The service component, which
activates the MIND document, allows interaction between
other components.
The MIND architecture can be considered as a knowledge
organization system in its general deﬁnition. Generally, the
term knowledge organization systems (KOSs) is intended to
encompass all types of schemes for organizing information
and promoting knowledge management [11]. Originally, KOSs
were used in digital libraries, but they are mechanisms for
organizing information, so the term may be used in the context
of knowledge management systems in all knowledge-based
organizations. Especially, MIND has the following character-
istics of the KOS [11]:
–
in the static form, MIND is a set of schemes for or-
ganizing information, promoting knowledge manage-
ment and deﬁning migration policy of the documents.
–
serves as a bridge between the users information need
and a document contained this information. User are
able to receive a relevant document without prior
knowledge of its existence.
–
adapts to the requirements of a particular organization
through the ability to add services and editing work-
ﬂow.
–
adapts to the speciﬁc case, using the same document
templates in a variety of ways.
–
does not impose a ﬁxed structure, but supports the
knowledge of users, adapting to their requirements.
3
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

LWE
LWE
LWE
email
server
email
server
email
server
LWE
Figure 4. Distributed workﬂow enactment service based on LWE clients and
email transport layer (LWEs are symbolized as gear wheels).
–
supports knowledge workers with their creative work,
through the coordination of process activities and
simpliﬁcation of interaction with the knowledge re-
sources. In this manner, it facilitates the generation of
new knowledge of organization.
The MIND architecture may be extended with new services
and politics. The bold line rectangles in Figure 2 depict
additional functions, which are not necessary to properly
perform the MIND agent system, but allow for improving it
and adapting to the characteristics of human organization. The
ground control service makes system more reliable by tracing
documents globally. It is also used in new choreography policy
that enables enhanced workﬂow management by knowledge
workers.
IV.
DISTRIBUTED WORKFLOW ENACTMENT
A key feature of the MIND architecture is physical distri-
bution of business process activities, performed dynamically
on a system of independent personal devices. MIND docu-
ments have built-in process deﬁnition and functionality (the
respective path and embedding service components mentioned
in the previous section). This makes them agents, which are
autonomous and mobile. Especially, they are independent of
any particular platform supporting workﬂow enactment and
they are capable of launching individual activities onto various
workers’ devices, which maintain process coordination across
the organization.
Workﬂow enactment service interprets the process descrip-
tion and control sequencing of activities through one or more
cooperating workﬂow engines [12]. Even if the workﬂow
engines are distributed, workﬂow enactment is centralized in
most of the implementations, because the control data must be
available for all engines. In the MIND architecture, all data
needed for workﬂow enactment are embedded in documents
[5]. This allows for implementation of distributed workﬂow
enactment service consisting of LWEs.
The idea of the distributed workﬂow enactment service
built on top of LWE clients and email transport layer is
illustrated in Figure 4. In the prototype system, LWE was
implemented as lightweight email client installed on personal
devices of each worker. Each LWE is independent of other
LWEs, so it can be implemented in any technology and adapted
LWE of sender
email
server
of sender
email
server
of recipient
LWE of recipient
1
2
3
4
5
Figure 5. LWE to LWE connection. The numbers indicate points, where
some problems with the transport of the document may occur.
to requirements of particular devices, especially mobile devices
such as tablets and smartphones. Also, it may be implemented
as a plug-in to existing email clients.
States of the LWE correspond to the phases of a document
lifetime and the initial state is when a message with a document
is received, i.e., noticed by LWE in the worker’s mailbox. The
LWE downloads the document on the local device and activates
it, which means launching its embedded functionality. The
activated document may interact with the knowledge worker,
his/her local system and some external services. The inter-
action begins with obtaining the document path component
and determining the current activity that should be performed
in this particular step of the process. If the next activity is
intended for another worker, the document is serialized, packed
and sent as an attachment to the next worker’s email address.
LWE is capable of recognizing and executing all document-
ﬂow patterns contained in the path component. More details
about the document-ﬂow patterns are in Section V-B, which
presents a discussion about their execution in a loosely-coupled
distributed system consisting of the LWE clients.
V.
PROBLEMS OF RELIABLE WORKFLOW EXECUTION
MIND and LWE clients form a distributed workﬂow enact-
ment system, in which the coordination of activities is based
on control data contained in the documents. In most cases, it
ensures that the documents arrive at a speciﬁc location at a
speciﬁc time. Nevertheless, some situations unforeseen by the
designer of the process may occur in loosely-coupled system.
First of all, the document may be lost: during the transfer
by email, due to failure of the local system, accidentally
deleted by the user. The transfer of the document may also
be delayed to miss the designed deadline. The knowledge
worker may also make a decision unforeseen by the workﬂow,
e.g., cancel some document ﬂow or modify the workﬂow path,
which is just not possible in typical message passing via email.
Figure 5 shows the path of the document from a sender
to a recipient and indicates points where some problems may
occur. Points 2⃝– 4⃝ are associated with several well known
email transport layer problems brieﬂy described in Section
V-A, while points 1⃝ and 5⃝ indicate problems with document-
ﬂow patterns execution by LWE clients, detailed in Section
V-B.
A. Email transport layer problems
Email message is a simple textual form combined with
attachments in any format. It can be sent to one or multiple
recipients and supports asynchronous work. Email mechanisms
have a reputation of being robust and trustworthy since its
invention a few decades ago, as email messages reach their
recipients in most cases without problems. Nevertheless, there
is a list of problems associated with the delivery of messages.
4
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

The ﬁrst step in the email processing model is to submit
email message by an email client (Mail User Agent – MUA)
to a sender Simple Mail Transfer Protocol (SMTP) server
(Mail Transfer Agent – MTA) [13]. Figure 5 indicates it
as point 2⃝. This step may fail due to the lack of network
connection, incorrect SMTP server conﬁguration or SMTP
server failure. The message usually remains in the sender
outbox and the email client tries to send it again. Conﬁguration
of SMTP server for LWE client does not differ from the
conﬁguration of other email clients and does not require any
special functionality. Temporary lack of network connection is
a typical situation for mobile devices. SMTP server failure is
a rather transient situation that can be solved by resending the
email message.
In the next step, sender MTA transfers messages to the
receiver MTA mostly by SMTP protocol (point 3⃝ in Figure
5). SMTP server should deliver the message or notify about
any problem [13]. The SMTP reply consists of a three digit
number often followed by some text for the human user. The
message may be rejected, however, in a transient or permanent
way. In transient situations, the SMTP client should try to
send the message again. In the case of permanent errors, the
SMTP client should not repeat the exact request. After a failed
attempt to send a message, the sender SMTP agent sends a
notiﬁcation message to the mail user agent. This notiﬁcation
message is known as a Delivery Status Notiﬁcation (DSN) or
email bounce [14].
Nevertheless, receiving of email bounces does not nec-
essarily mean that the message has not been delivered and,
conversely, the lack of notice does not necessarily mean that a
message has arrived to the recipient. For instance, the receiver
SMTP server may silently drop message to protect themselves
from attacks [13]. Many SMTP servers are conﬁgured to block
messages categorized as spam based on DNS blacklists or anti-
spam ﬁlters [15].
Receiving a message by the SMTP server and placing it in
a user’s mailbox does not imply that the user will read it. Point
4⃝ in Figure 5 indicates the problem of the recipient’s email
server – email client communication. Firstly, some messages
may be marked as spam and placed in the spam folder in
user’s mailbox. In this case, the frameworks to build mail
applications (like Java Mail [16] and IMAP – Internet Message
Access Protocol [17] used in the LWE implementation) often
enable access to the spam folder. In fact, also the email client
may have its own spam ﬁlters and other solutions to manage
received messages automatically, like the automatic responses
software (e.g., ”out of ofﬁce” message) [18].
Next to email bounces and automatic responses there
is one more type of notiﬁcations, the Message Disposition
Notiﬁcations (MDNs) [19]. These notiﬁcations are intended
to report of the disposition of a message after it successfully
reaches a recipient’s mailbox. The MDN can be used to notify
the sender of any of several conditions that may occur after
successful delivery such as display, printing or deletion of the
message. Allow mail user agents to keep track of the message
(only) in its subsequent step of the ﬂow. The sending of the
response depends on the functionality of recipient email client
and often on the decision of the recipient.
Message tracking is also possible through email tracking
services like ReadNotify [20] or WhoReadMe [21]. These
services add to the message some hidden information: picture,
or pieces of HyperText Markup Language (HTML) code (like
IFRAMEs). Tracking is hidden from the recipient and not too
elegant.
There is yet another reason for which the message may not
reach the mail user agent - the human action. The recipient may
accidentally or intentionally delete the message from his/her
mailbox, move it to a different folder or mark it as a spam.
Also, his/her email client or a local system may fail.
B. Document-ﬂow patterns execution
In mailing systems, notiﬁcation mechanisms can provide
the status of messages in their the next step of ﬂow, but never
any further. It can be said that the email message can store
history of its own ﬂow, inform about its next step, but does not
”know” its future ﬂow. The MIND document has an embedded
workﬂow path, thus it has information about whole its ﬂow
and about ﬂow of other documents in the process. However, a
worker that ﬁnished his activity has no control on further ﬂow
of document – this knowledge is built in document, which has
left his device.
In some cases, the location of the document may be
required for the proper execution of the workﬂow process,
especially in unexpected situations, like a lost document. LWE
temporarily stores copy of documents in the worker’s mailbox,
in case the process has to be recreated from a certain place.
Searching for a document in all places indicated by a workﬂow
is possible but often time-consuming and costly, and may
not take into account the modiﬁcation of the path during the
process execution.
This paper proposes a ”ground control” external service for
receiving and storing notiﬁcations from LWEs about status of
documents. Each notiﬁcation from LWEs contains information
about: process id, document id, current activity id, and sender
of the notiﬁcation. This section presents what other informa-
tion about the document should be included in the notiﬁcations
for reliable coordination of all document-ﬂow patterns.
Based on the work of van der Aaalst [6] and the result
of previous research [5], three categories of document-ﬂow
patters have been identiﬁed: distributed state patterns, coupled
state patterns, and embedded state patterns.
1) Distributed state patterns: These patterns describe situ-
ations in which the next activity or activities can be determined
solely on the state of the current activity. Four patterns of this
type have been distinguished: sequencer, splitter, merger, and
iterator.
a) Document sequencer: This pattern involves a knowl-
edge worker sending a document to another worker. The
document may be sent in its entirety in one message or it may
be partitioned into several messages. In this basic situation, the
following problems may occur: a sender may receive bounce
notiﬁcations from each sent message and recipient may not
receive all messages. However, a bounce notiﬁcation does not
always mean that the recipient has not received the message in
a timely manner. In this pattern, the notiﬁcation should contain
one of the three route-status: sent (sends from sender’s LWE
after sending the document), received (sends from recipient’s
LWE - after receiving the document) or bounced (sends from
sender’s LWE - after receiving the bounce notiﬁcation). It is
possible that some notiﬁcation does not reach to the ”ground
5
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

control” service or arrives in the wrong order. Thus, in all
patterns, the received status and the subsequent sent status
are considered to more important then previous bounced and
received.
b) Document splitter: This pattern creates identical
copies of the document or partitions it into separate frag-
ments. The resulting documents are next sent to the respective
knowledge workers speciﬁed in the migration policy. These
documents, either copies or fragments, get new document IDs.
The parent document is considered to be delivered if all its
child documents have been delivered. Thus, the sent route-
status is given to each parent and child documents. The parent
document has also assigned a splitted document-status and
references to the child documents are indicated. Each arrived
child document gets the received status individually. Once all
the child documents have the received status (or the subsequent
sent status), the ”ground control” service gives automatically
the received status to the parent document. The child docu-
ments are determined by the references. The bounced status is
also assigned to each child document separately.
c) Document merger: This pattern complementing the
document splitter pattern merges all received documents in
one. Of course, this pattern may involve various document
functionality, depending on whether the preceding splitter has
been cloning or decomposing. But before merging, all the
expected documents must be delivered. The LWE client on
the basis of path component of the ﬁrst received document
determines the number of expected documents that have to
be merged. Each of the arrived document gets the received
status. When all documents are collected, they are merged and
a new document gets the received route-status and constitutes
documents get the merged document-status and reference to
this new merged document. The document merger fails when at
least one child document has been not received. In exceptional
situations, decision about completing merger before receiving
all child document may be made.
d) Document iterator: This pattern enables repeated
execution of some sequence of activities controlled by a con-
dition speciﬁed in the respective document migration policy.
The route-status is assigned as in document sequencer, but
the activities can be performed several times and notiﬁcation
may be received by ”ground control” service in incorrect order.
Thus, the activity id and route-status is not enough to determine
where the document resides. To solve this problem, some
basic partial ordering mechanism, like Lamport’s timestamps
[22], has been used. The path component of the document
has a timestamp attribute that is incremented by LWE. When
the documents are merged, the new one gets a maximum
value of all merged documents’ timestamps plus 1. Thus, each
notiﬁcation contains also a timestamp value.
2) Coupled state patterns: Sometimes completion of an
activity performed by one worker may require a notiﬁcation
on a state of some activity performed by another worker
somewhere in the organization. That involves the notion of
asynchronous signals, sent between different parts of the
workﬂow process. Three document-ﬂow patterns of this kind
have been distinguished: deferred choice, milestone and cancel
activity.
a) Deferred choice and milestone: These patterns are
used to deal with situations when the current activity of one
worker has to be blocked until a signal notifying on some
sent
sent
cancelled
cancelled
A
B
a)
sent
sent
sent
waiting
waiting
sent
sent
waiting
cancelled
A
B
b)
sent
sent
sent
waiting
waiting
?
sent
sent
sent
cancelled
A
B
c)
sent
sent
sent
waiting
waiting
Figure 6. Cancellation of the document.
external event has been received from another worker. Both
patterns require a proactive document to provide a worker’s
device with a semaphore and embedded functionality to handle
it. Initial value of the semaphore is closed, so if the signal
from another worker has not been received, the current activity
is blocked. Upon receiving a signal, the waiting activity is
resumed. Deferred choice is used when sending a given docu-
ment has to be postponed until the worker gets information to
whom it should be sent. Milestone just blocks some activity of
one worker by another. The problem appears, if the signal does
not arrive within the speciﬁed time and the received document
activity can not be proceed. In this case, the route-status of the
document is received but the signal-status is waiting.
b) Cancelling pattern: Implementation of this pattern
depends on what exactly should be cancelled. If a particular
activity should be cancelled, a cancellation signal is sent only
to the LWE client responsible for its performance. The decision
on canceling the activity is immediate for the receiving device
or does not make sense any more if the document has been
sent to another worker.
More problematic situation is to cancel the document,
because it requires the designation of its location. It is possible
to search for a document in all places indicated by the
workﬂow, but the ”ground control” service can signiﬁcantly
reduce this set of places. If the route-status of document is
received, the cancellation signal is sent only to the sender of
that notiﬁcation. After a successful cancellation, LWE sends
the cancelled route-status.
If instead the cancelled route-status, the ”ground control”
service receives the sent status, it can start chasing the doc-
ument. This situation is shown in Figure 6. To increase the
chance of success, a cancellation signal is sent to, say, three
subsequent activities for each possible path of the document
ﬂow. The three cases are possible for each activity: an activity
was ﬁnished, an activity is currently being preformed or
waiting for a document. Figure 6a) shows successful cancel-
lation, i.e., the ”ground control” service received a cancelled
notiﬁcation from all possible paths of the document. Figure
6b) shows cancellation potentially successful but not yet
completed. While Figure 6c) shows the failed cancellation -
the cancelling process should be continued for the subsequent
6
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

 notification
 attributes
 workflow_process_id
 document_id
 current_activity_id
 sender_of_notification
 timestamp
 deadline
statuses_type
sources_type
notifocation_type
Figure 7. Schema of notiﬁcation.
activities on this particular path.
It is worth mentioning that the rate of the document ﬂow
is measured in minutes or hours, even days, rather than sec-
onds. For example, the Intel’s Email Service Level Agreement
deﬁnes the acceptable time frame for replying to emails to 24
hours [23]. Thus, chasing the document will not be so much
demanding as it might appear to be.
3) Embedded state patterns: Performing an activity by
some worker may require a subprocess delegated to someone
else, with activities not speciﬁed originally in the migration
policy of the arriving document. States of such a subprocess
are embedded in the state of the current activity enabling that.
a) Internal subprocess: If the current worker is autho-
rized to extend the original migration policy of a document
with new activities, they constitute an internal subprocess.
Neither the structure of the internal subﬂow nor identity of
added workers have to be known earlier to the workﬂow
designer. The notiﬁcation from the subﬂow activities are the
same like from other activities, but the ”ground control”
service has only the structure of the designed workﬂow. Thus,
for reliable coordination of subﬂow, its structure and identity
of added workers must be sent to the ”ground control” service.
If the ”ground control” does not have the current data of
the subprocesses, tracing a document, and in particular, the
cancellation may not be possible.
b) External subprocess: The performed activity may
call some external subprocess, which structure are unknown
for both, workﬂow designer and the performer of the current
activity. The external subprocess is often performed outside of
the organization, thus, it is not traced by the ”ground control”
service. Only the lack of received notiﬁcation at the end of the
subprocess within the speciﬁed time may indicate troubles.
The document-ﬂow patterns analysis allowed for formu-
lating the syntax of notiﬁcations, which schema is presented
in Figure 7. The route-status type should be one of the:
sent, received, bounced, cancelled and ﬁnished, the optional
document-status can be one of the: splitted or merged. The
signal-status can be waiting or just indeﬁnite. Each notiﬁcation
TABLE I. RELIABILITY OF PATTERNS EXECUTION
PATTERN
PROBLEMS TO SOLVE
Sequencer
Check whether the document has reached the recipient.
Route-status: sent, received, bounced.
Splitter
Check whether all constituents of the splitted document have
reached the recipients.
Route-status: sent, received, bounced.
Document-status: splitted (for splitted document + references to
constituents).
Merger
Check whether all documents that should be merged into one
have reached the recipient.
Route-status: sent, received, bounced.
Document-status: merged (for merged documents + references to
new document).
Iterator
Check whether the document has reached the recipient as many
times as it has been established in the loop.
Route-status: sent, received, bounced.
Timestamp to determine the order of the activities.
Deffered choice
Milestone
Check whether both the document and the signal have reached
the recipient.
Route-status: sent, received, bounced.
Signal-status: waiting (or indeﬁnite).
Cancelling
Check whether the document has been cancelled.
Route-status: cancelled (when it succeeded).
Internal
subprocess
Track a subprocess added during the workﬂow process execution.
Attach subprocess sources to the notiﬁcation.
External
subprocess
This pattern is not tracked by the ”ground control” service.
ground
contol
service
distributed
worklow
enactment
service
notification
receiver
notification
database
tracing
application
signal
sender
LWE
LWE
LWE
Figure 8. The Ground control service architecture.
contains also timestamp value. LWE performed a ﬁrst activity
adds to the notiﬁcation a migration path and information about
workers. If it notices a modiﬁcation of the path component by
adding a subprocess, it also sends deﬁnition of subprocess and
information about new workers to provide the most recent data
of the process. Table I summarizes the problems associated
with the reliable execution of presented patterns.
VI.
GROUND CONTROL SERVICE
This is an external service intended for a central docu-
ment tracing to ensure the reliability of distributed workﬂow
execution. The workﬂow enactment remains distributed and
may be still performed without it, however. The intention of
the ”ground control” service is to collect notiﬁcations from
LWEs in order to determine the approximate global state of
the distributed document ﬂow and to make top-down decisions
in some unforeseen cases. The document policy component
decides whether the notiﬁcation has to be sent or not.
Figure 8 presents the concept of this service. It constitutes
a notiﬁcation receiver, i.e., a service receiving notiﬁcations
from the LWEs via the particular transport layer. Then, the
notiﬁcations are parsed and placed in the database. The notiﬁ-
cation database has some functionality, e.g., trigger that gives
automatically the received status to the splitted document, after
all its child documents have also got this status.
7
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

A tracing application visualizes the workﬂow process and
marks the currently executing activities, designated on the
basis of the notiﬁcations. It is also an interface for some users
allows for monitoring the process and/or makes some top-down
decisions. Some decisions may require sending the notiﬁcation
signal to the particular LWE. Signals are generated by the
tracing application and transfered by the signal sender service.
A. Implementation
Two possible implementations of transferring and storing
notiﬁcations were taken into account. The former uses the Han-
dle System, while the latter uses an email-based notiﬁcation
system.
1) Handle System [7]: is a solution for assigning, man-
aging, storing and resolving persistent identiﬁers for digital
objects on the Internet. It includes a set of protocols enabling
a distributed computer system to store identiﬁers of digital
resources and resolve those identiﬁers into the information nec-
essary to locate and access the resources. This information can
be changed to reﬂect the current state of the identiﬁed resource
without changing the identiﬁer. The most popular system based
on Handle System is DOI (Digital Object Identiﬁer) [24] used
for persistent citations in scholarly materials, research datasets
or European Union ofﬁcial publications.
The Handle System deﬁnes a hierarchical service model.
The top level consists of a single handle service, known as
the Global Handle Registry. The lower level consists of all
other handle services, known as Local Handle Services. The
Handle System provides the Java-based Handle Server and a
set of tools needed for the Local Handle Service installation.
The Global Handle Registry is used to manage any handle
namespace and provides the service used to manage naming
authorities. The Local Handle Service and its responsible set
of local handle namespaces must be registered with the Global
Handle Registry and gets a unique preﬁx.
The Handle System provides unique persistent identiﬁers
called handles for digital objects, such as the MIND document.
The handle is a character string that consists of two parts:
its naming authority and a local name separated by the
ASCII (American Standard Code for Information Interchange)
character ”/”. Each handle may have a set of values assigned
to it. A handle value may be thought as a record that consists
of a group of data ﬁelds. Every handle value must have a data
type. The Handle System predeﬁnes a set of data types and
allows for deﬁning another.
Thus, the ”ground control” service can use the Handle Sys-
tem to create an unique handle for each migrating document
(see Figure 9). Each handle has a set of values corresponding
to the syntax of the LWE notiﬁcations. The LWE modiﬁes it
at each change of document status.
Nevertheless, this solution has some disadvantages. Mod-
iﬁcations of handles occur frequently, and each time they
require a connection with Global Handle Registry. Besides,
the Local Handle Service administration requires additional
skills and needs control of other than email transport layer. The
Handle System indicates the current location of the document.
However, extraction of the list of all the documents in given
process requires additional functionality. The Handle System
tracks each document separately.
Figure 9. A handle for the MIND document.
2) Email-based notiﬁcation system: The ”ground control”
service has been also implemented as the email-based notiﬁca-
tion system on basis of email transport layer. Email is intended
for frequent passing of messages so that it can easily receive
multiple notiﬁcations and does not require any additional users
skills in the installation, conﬁguration and operation. It does
not require unlocking new ports for the transport layer, which
affects the security of the organization.
The LWE notiﬁcations are sent to one or more email
addresses. The notiﬁcation receiver services run on some
organizational server check dedicated mailboxes frequently,
parse attached LWE notiﬁcations and insert new records to
a database.
There are three main tables in the database: Notiﬁcations,
Documents, and WorkﬂowProcesses. Each new notiﬁcation
is inserted into the Notiﬁcations table. The new notiﬁcation
is distinguished by the address of the mailbox and email’s
Unique Identiﬁer (UID - a unique number referencing an email
in a mailbox). Only those notiﬁcations are inserted to the
Documents table, which have higher value of logical timestamp
than the already registered. The last record for each document
ID refers to the current state of this document.
When a notiﬁcation for a new process appears or process
was modiﬁed, a new record is inserted to the Workﬂow-
Processes table. This table stores workﬂow process IDs, the
migration path ﬁles and workers data ﬁles.
Thus, the WorkﬂowProcesses table stores structure of the
process, while the Documents table stores the states of doc-
uments ﬂow. The tracing application selects only the most
recent records from Documents and WorkﬂowProcesses tables
and constructs a current workﬂow process structure with its
approximate global state.
In contrast to the LWE, which has been implemented
in Java, the ”ground control” service has been implemented
based on PHP (Personal Home Page) and Postgresql database
[25]. PHP technology has been chosen in order to test it for
email messaging and XML (Extensible Markup Language)
manipulating. PHP provides classes to access mailbox, e.g.,
by IMAP protocol and functions to XML manipulation. PiBX
(XML-Data-Binding framework for PHP) is similar to JAXB
(Java Architecture for XML Binding), but it is in the alpha-
state at the moment. PHP technology has been good enough
for the rapid implementation of the ”ground control” service,
but many other technologies could be used for this purpose.
8
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

Figure 10. GUI of the email based ”ground control” service.
In fact, the syntax of notiﬁcations is essential for the ”ground
control” service, since implementation does not require any
new or advanced technology.
Figure 10 shows information about one MIND document
selected from the database. An interface allows the user to view
all documents related to the process and to view a history of
document ﬂow.
During the experiments, emails were received from the
dedicated mailbox every minute (for this purpose, the ”Cron”
software was used). So, emails often appear in mailbox in
the different order than they were sent. First sent notiﬁcation
provides a workﬂow process resources (process deﬁnitions,
data about workers) to the ”ground control” service. However,
sometimes this notiﬁcation is received later then subsequent
notiﬁcations. In such a situation, only worﬂow process ID
is inserted to the WorkﬂowProcesses table and the table is
updated at a later time.
Emails with notiﬁcations generally were delivered to the
inbox without any problems. However, the service does not
require to deliver all notiﬁcations. There was a problem during
testing that emails have been received from mailbox and
deleted, but the service crashed while writing data to the
database. To prevent such situations, emails are stored in the
inbox for a month.
VII.
THE CHOREOGRAPHY POLICY
Orchestration and choreography terms are used most fre-
quently in the context of web services composition and
collaboration [8] [26]. In this paper, they are meant more
generally as strategies for business processes enactment in
a knowledge-based organization. Orchestration addresses the
situation when the business process is controlled by one of
the workers/services and another workers/services just perform
their activities. Similarly as in an orchestra, where the conduc-
tor manages played music, while the musicians perform their
parts. Choreography is more collaborative in nature, where
workers involved in the process perform their activities but
also may manage some part of the process and interact with
another workers. As in dance, the choreographer writes the
descriptions down and gives it to the dancers and works with
them to make sure they learn their parts, but he/she is not on the
stage when it is happening. The dancers are co-responsible for
1
2
4
3
5
originator
performer
performer
2
5
Figure 11. The orchestration of MIND.
the execution of the choreography and they must communicate
with each other to achieve a success [27].
In the MIND architecture, the path component (see Figure
3) is implemented as a XML Process Deﬁnition Language
(XPDL) [28] ﬁle. It is an XML-based orchestration language
from the Workﬂow Management Coalition (WfMC), which is
executable and enables task sharing for a distributed collabo-
ration [29]. There are three main roles that can be assigned to
workers in XPDL:
–
Author – name of the author of this process deﬁnition.
The one who put it into the repository.
–
Responsible(s) – participant, who is responsible for
the process. It is assumed that the responsible is the
supervisor during execution of the process.
–
Performer(s) – the particular resource (not necessarily
refer to a human), which can be assigned to perform
a speciﬁc activity.
In a knowledge-based organization, an author is a document
designer. He/She combines the knowledge of the procedural
steps, required documents and participants or services, thus
creating a MIND document template. This template can be
used many times in the organization, and every time it is
customized to the speciﬁc situation. The designer does not
have to participate in the process execution.
A special and important role in the process execution
has participant called a document originator. He/She forms
a hub document based on document templates (see Figure
2) and is responsible for the execution of the main (root)
process. In simple processes, it is sufﬁcient that the originator
is the only person responsible for the process execution. Other
participants or services only perform their activities deﬁned in
the migration path. Figure 11 shows the orchestration of the
MIND document ﬂow applicable in such simple processes.
The originator, like a conductor in orchestra, tracks the entire
process, e.g., using ”ground control” service and makes some
top-down decisions by sending signals to performers. Perform-
ers fulﬁll their tasks in interaction with the document and
sometimes receives signals from the originator. The possible
interaction between workers and possible directions of that
interaction are indicated by the dashed arrows The ﬂow of
documents is indicated by the solid arrows and can be tracked
by the ”ground control” service.
However, in real organizations, such simple processes are
a rarity. In complex processes, it is very impractical, when
one person is responsible for each step in the entire process.
In XPDL, for each WorkﬂowProcess element, there can be
9
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

1
2
4
3
5
originator
responsible
2
21
22
performer
22
responsible
5
52
51
performer
51
Figure 12. The choreography of MIND.
speciﬁed the participant (or participants) responsible for its
execution [28]. The WorkﬂowProcess elements are used to
deﬁne both the main process and all subprocesses. In Figure
12, the originator is responsible for the main process. The
nodes 2 and 5 are Subﬂow activities, which invoke another
WorkﬂowProcess elements. Participants other than the origi-
nator are responsible for these subprocesses.
In the MIND architecture, subprocesses can be either pre-
deﬁned by a document designer or added during the execution
of workﬂow by a privileged activity performer (see internal
and external subprocess in Section V-B). The latter allows
for dynamic modiﬁcation of the migration path during its
execution. In Figure 12, the activities 2 and 5 can be initially
deﬁned as tasks to be performed by the workers manually.
In the RedeﬁnableHeader element, an author and persons
responsible for the current workﬂow process can be speciﬁed.
This is optional, but in MIND, the document originator is
always responsible for the main process. The activities 2
and 5 has no implementation, i.e., implementation by manual
procedures [28]. The extended attribute enables to expand the
activities properties with modiﬁcation rules. The Subﬂow value
of the ModiﬁcationRule attribute allows performer to change
the selected activity in the subﬂow and add a new Work-
ﬂowProcess element. In this case, the activity implementation
alternative is changed from No to SubFlow, which refers to the
new WorkﬂowProcess element. The Performers element is not
available for subﬂow activities. The participant, who modiﬁed
the activity 2, becomes responsible for the subprocess and can
track it using ”ground control” service.
The ability to add subprocesses with different responsibles
is not yet the choreography policy. It is rather a ”set of the
orchestrations”.
The ﬁrst step to the choreography is to set different permis-
sions to the participants of the process. As already mentioned,
in the MIND architecture, the path component is implemented
as XPDL ﬁle [28]. The entire migration path (a main process
and all subprocesses) deﬁnition is bounded together in a
model deﬁnition, which is contained in one Package element.
This element groups together a number of individual process
deﬁnitions and associated entity data, which is applicable to all
the contained process deﬁnitions. In particular, the Participant
elements can be deﬁned for the Package element and for each
WorkﬂowProcess element separately. Participants deﬁned for
the Package can take part in all processes in this Package
and, of course, participants deﬁned for WorkﬂowProcess can
take part only in this particular process. Details of the workers
participated in the migration path are contained in the worker
component (see Figure 3). The Participant element refers
to these data and additionally sets the permissions on the
migration path.
The document originator is always deﬁned for the Package
and, by default, he/she has the permissions: to control the
entire migration path using ”ground control” service, to cancel
the document and to modify the ﬂow. The set of extended
attributes allow for indicating permissions and rules on the
migration path. The ModiﬁcationPermission attribute speciﬁes
whether and how the participant can modify workﬂow during
the process execution. The value of that attribute should be
one of the: All, Responsible, Performer and No. The All value
means the participant can modify activities contained in all
processes in this Package, the Responsible value means the
participant can modify activities contained in processes for
which he/she is assigned as a responsible person, the Performer
value means the participant can modify an activity for which
he/she is assigned as a performer, and the No value means the
participant can not modify any activities in any processes.
The ControlPermission attribute indicates, which process
can be tracked and controlled by this participant using the
”ground control” service. Possible values of this attribute (All,
Responsible, No) have a similar meaning like values of the
ModiﬁcationPermission attribute. The CancellationPermission
attribute is introduced specially for the cancelling pattern
(see Section V-B) to separate the permission to cancel the
activities or processes from the rest of the permissions that
gives the ”ground control” service. The privileged participant
can cancel the entire document ﬂow (”All”), the subﬂow for
which he/she is responsible (”Responsible”) or only particular
activities (”Activity”).
The permissions delegated to participants are detailed by
special rules set to particular activities. The ModiﬁcationRule
attribute speciﬁes whether and how this activity may be
modiﬁed. The Subﬂow value was presented above. It allows
for changing the activity in the subﬂow and add an internal
subprocess (see Section V-B). The External rule is wider than
the Subﬂow. It allows for adding an external, internal or mixed
subprocess. In this case, the current activity is changed in the
subﬂow, a new WorkﬂowProcess element is added as well
as for the internal subprocess. The external subprocess can
be deﬁned as a special activity in this new WorkﬂowProcess
element. Thus, together with this special activities, other activ-
ities can be added. The Service value of the ModiﬁcationRule
attribute allows the performer to use some service to complete
this activity. If the activity’s ModiﬁcationRule attribute has
value ”No” or it is not speciﬁed, even privileged participant is
not able to modify this activity. The CancellationRule attribute
speciﬁes if, the activity can be canceled. In this case, ”Yes” is
default, if the attribute is unspeciﬁed.
Table II summarizes permission and rule attributes associ-
ated with modiﬁcation and control of the migration path.
The second step to the choreography is deﬁning communi-
cation tactics between participants. Each participant, allowed
to track process by ”ground control” service, can send some
signals to performers of activities. Participant, after log in
”ground control” service, can track all the processes for which
10
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

TABLE II. PERMISSIONS AND RULES ON THE MIGRATION PATH
XPDL ELEMENT
EXTENDED ATTRIBUTE
NAME
VALUE
Participant
ModiﬁcationPermission
All, Responsible, Performer, No
ControlPermission
All, Responsible, No
CancellationPermission
All, Responsible, Activity, No
Activity
ModiﬁcationRule
Subﬂow, External, Service, No
CancellationRule
Yes, No
he/she is responsible. A tracing application (see Figure 8)
marks the currently executing activities and allows for making
some top-down decisions by sending appropriate signals to par-
ticular LWE. The signals can be either the notiﬁcation signals
required by patterns or some text messages sent to participants
via email or other available communicator. Also, LWE is
required to have the ability to send and receive messages not
directly related to the document but needed to communicate
with other workers. Figure 12 shows the communication tactic,
that allows the performer to send messages to the immediate
responsible and receive messages from all responsibles over
this activity. This tactic can be changed, because LWE has
access to information about all responsible persons in the
process tree.
XPDL is an orchestration language that coordinates multi-
ple tasks and allows for specifying the participants responsible
for executing the process. The ”ground control” service and
LWE enable entering interaction between the participants of
the document workﬂow. Extended attributes enable setting
different permissions and rules for deﬁning editing and control
strategy. This allows for shifting orchestration idea to more
global, multiparty and collaborative choreography policy.
VIII.
CASE STUDY AND VALIDATION
The MIND architecture was created for facilitate knowl-
edge management in complex knowledge processes, in which
the ﬂow of electronic documents and extracting knowledge
from them is crucial. Coordination of document workﬂows
may be often enforced by law, especially when the procedures
are implemented manually by knowledge workers – as it takes
place in court trials, crush investigations or complex medical
cases.
The ﬁrst studied case was the large-scale problem of
judicial proceedings. Document in the form of complete ﬁles
can reach an enormous size. The experiment took place to
verify the adequacy of use the proposed document-ﬂow pat-
terns and the required functionality. In court trials, there are
many documents (parts of the whole ﬁles) that have speciﬁed
structure. The workﬂow of the ﬁles is precisely deﬁned by the
legal proceedings. Therefore, the use of the MIND architecture
is justiﬁed. It enables to direct the attention of workers to the
essence of court trial, through the coordination of complex
legal proceedings.
The second case study involved the issue of evaluation of
students in a typical university grading process. It allowed to
test the validation of implementing the MIND architecture in
a real environment. The idea is outlined in Figure 13.
An originator of the grade roster document is the Registrars
Ofﬁce, which recipient is the Course Leader. The Course
Leader runs his/her own subprocess of collecting credits from
Course
leader
Registrar's
office
Lecturers
(lecture)
Tutors
(tutorial)
Moderators
(seminar)
Supervisors
(project)
Assistants
(lab)
Registrar's 
office DB
Cource
archive
course enrollment list
course syllabus
schedule of classes
grade 
roster
test/exam
forms
homeworks
evaluation
forms
project
documentation
lab reports
fetch
fetch
fetch
appendices
print
store
store
instructors
Figure 13. A course grading example [5].
instructors throughout the entire semester; structure and im-
plementation of that subprocess is irrelevant to the Regis-
trars Ofﬁce. While the Registrars Ofﬁce may use an online
grade system for one-time roster submission and approval, the
Course Leader is responsible for all subprocess of collecting
credits. He/She has modiﬁcation, control and cancellation
permissions. Instructors receive only a class roster of their
students, and it can be ﬁlled at any time, taking into account
the designated deadline.
The ”ground control” service enables the Course Leader
tracking the class rosters ﬂow and deadlines, and making
decisions in some unforeseen situation. It is not necessary that
the Registrars Ofﬁce has the permission to control the entire
process with all subprocesses. In this case, it is sufﬁcient to
be able to control the Course Leader work.
The system based on e-mail has been worked satisfactorily
and has been accepted by users. The Course Leader is free
to implement his/her evaluation process in any way and
control the workﬂow of it. Course instructors can perform their
activities using their personal mobile devices in any time, even
if they are out of the campus network. The grading process
involves both scheduled and unpredictable events, such as
project assessment or homework collection for the former, and
grade correction or disciplinary actions in a case of academic
misconduct. These events may be effectively handled with the
document-ﬂow patters outlined in Section V-B, and tracked by
”ground control” service presented in Section VI.
IX.
RELATED WORK
The presented proposal combines existing technologies and
new idea to extract some new functionality in the topics of
the distributed electronic document and collaborative environ-
ments.
The ﬁrst signiﬁcant step in the document-based process-
ing was the Multivalent Document architecture MVD [30]
that introduced active functionality to manipulate a document
content with dynamically loaded objects called behaviors.
The concept of behaviors is similar to the MIND embedded
services, however MIND expands this concept with local and
external services, which can also affect a document behavior,
but are not components of the document. This gives documents
more ﬂexibility on opening, suiting them better to exploit
11
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

local resources of visiting devices and to easily add a new
functionality.
The Placeless Documents [31] implements document func-
tionality with active properties that cannot only manipulate a
document content but also manage of a document structure
and workﬂow. The Placeless Documents are reactive, i.e.,
they respond to external events, while MIND documents are
proactive – they initiate their own behavior.
The concept of a proactive document, capable of traveling
between computers under its own control has been introduces
with a document-agent platform MobiDoc [32]. This platform
was, however, closely related to the particular technology,
and thus lacked forward compatibility. On the other hand,
solutions proposed by MIND found document-agent mobility
on stable email messaging standards. Owing to proactive
MIND attachments, any email system could be almost like
an agent platform with all the beneﬁts of multi-agent systems,
but without a need to implement a full-size agent platform
that would have to be updated regularly and require additional
skills from administrators to run it.
Workﬂows have been also implemented by WADE (Work-
ﬂow and Agents Development Environment) [33] agent plat-
form based on JADE (Java Agent DEvelopment framework)
[34]. WADE agents embed a micro-workﬂow engine, capable
of executing workﬂows and compiled before launching the
workﬂow. Performing of activities may be delegated by one
agent to another and in principle is not related to agent
mobility. This solution follows the classic central workﬂow
enactment philosophy, and differs from it only in decentral-
ization of a global process state into local process states
controlled by micro-workﬂow engines running inside agents.
In the MIND architecture, workﬂow as a XPDL ﬁle is a part
of the whole document and it contains its internal state. LWEs
run outside of agents as local workﬂow engines. Workﬂow, in
the form of plain XPDL, may be also modiﬁed during the
process execution. Moreover, a document-agent is the only
communication interface, making MIND based platforms tech-
nologically independent and truly loosely coupled distributed
systems.
The reliability of distributed workﬂows processing is as-
sociated with the assurance that the object would not be lost
and would arrive to the designated location. It requires some
tracking service that in distributed loosely-coupled systems
may only estimate the real states of migrating objects. The
JADE platform provides some control remote agents (Agent
Management System – AMS, Remote Monitoring Agent –
RMA) that receives messages from JADE agents, while the
”ground control” service has a similar task - it receives
messages from the MIND documents to tracking their states.
Contrary to JADE control agents, the ”ground control” is an ex-
ternal, technologically independent service that communicates
with the MIND documents through notiﬁcations. Document
determines whether the notiﬁcation has to be sent or not. A
syntax of the notiﬁcations includes also all document-ﬂow
patterns.
A process orchestration focuses on the ﬂow of activities
performed by participants or services. In contrast, choreogra-
phy formalizes the way participants coordinate their interac-
tions. Thus, the focus is not on orchestrations of the work
performed by these participants, but rather on the exchange
of information (messages) between these participants [35].
There are a number of choreography languages, like: Web
Services Choreography Description Language (WS-CDL) [36],
Business Process Model and Notation (BPMN) [37] or Chore-
ography Extension for Business Process Execution Language
(BPEL4Chor) [38]. Many languages try to simultaneously
deﬁne a meta-model for service choreography and a syntax for
orchestration. It creates some limits in the implementation of
the choreography with workﬂow together. For example, BPMN
enables put the choreography Message Flow only between the
Pools, which means that messages can be sent only between
the participants of independent workﬂows. In the MIND archi-
tecture, participants communicate mostly by document - this
is the assumption of this architecture. The ”ground control”
service and LWE enable adding the choreography policy with
adjusted communication to workﬂow enactment.
X.
CONCLUSION
Reliable workﬂow execution of distributed mobile doc-
ument must be able to handle unforeseen situation when
migrating documents fail to reach their destination or get
stuck in some worker’s device. The ”ground control” service,
proposed in this paper, is a track and trace service that enables
observation of the current document location and stores the
history of migration. It allows for checking if the document
has reached the recipient LWE or is processed too long on the
current device, i.e., if passed the appointed deadline and sent
notiﬁcation has not received, it may indicate that the document
got stuck in some place. The service does not ”tighten” the
idea of loosely-coupled distributed system, because it can still
execute without this service and the MIND document may
decide in which steps the notiﬁcations should be sent and in
which should not.
The ”ground control” service provides new possibilities to
MIND, although its introduction was associated primarily with
the need of users. Workers report that despite a system based
on MIND works, they still does not know what is happening
with the document. Without the ability to control the ﬂow, they
feel as if they sent an email and been waiting for a response.
The limited trust of users was not connected with malfunction
of the system. The human naturally wants to have control over
the cases, especially those important.
The ”ground control” service together with LWE also
enables communication between the persons responsible for
executing of the process and the activity performers. Ad-
ditional permissions and rules allow for determining, which
participant can control the process execution and make some
decision in unforeseen or conﬂict situations. That allows for
introducing the choreography policy into process enactment.
The ”ground control” service was created for the purpose
of the MIND architecture. However, it may be used to track
the workﬂow of any loosely coupled system. It is only required
for the system to send signals via email about its state and to
receive and interpret signals from the ”ground control” service.
It can be also used to track emails in email systems.
Next to reliability and choreography, there is also a security
issue, which answers the question: what to do if lost document
will get to an unauthorized person? The LWE may require
authentication of the worker before unpacking and activating
document components. The LWE also veriﬁes if the performer
assigned to the current activity is the same person as the
12
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

recipient of the document. The interesting idea has been
proposed in [39] by the MENAID (Methods and Tools for Next
Generation Document Engineering) project [40]. It introduces
a security by the face recognition algorithm built in the MIND
documents.
REFERENCES
[1]
M. Godlewska, “Reliable document-centric processing in a loosely
coupled email-based system,” in ICDS 2015 : The Ninth International
Conference on Digital Society.
IARIA, 2015, pp. 38–45.
[2]
G. D. Bhatt, “Organizing knowledge in the knowledge development
cycle,” Journal of Knowledge Management, vol. 4, 2000, pp. 15–26.
[3]
L. A. Dabbish and R. E. Kraut, “Email overload at work: an analysis of
factors associated with email strain,” in Proceedings of the 2006 20th
Anniversary Conference on Computer Supported Cooperative Work, ser.
CSCW’06.
New York, USA: ACM, 2006, pp. 431–440.
[4]
M. Godlewska, “Agent system for managing distributed mobile inter-
active documents in knowledge-based organizations,” in Transactions
on Computational Collective Intelligence VI, ser. LNCS 7190, N. T.
Nguyen, Ed.
Berlin: Springer-Verlag, 2012, pp. 121–145.
[5]
M. Godlewska and B. Wiszniewski, “Smart email - almost an agent
platform,” in Innovations and Advances in Computing, Informatics,
Systems Sciences, Networking and Engineering, ser. LNEE, S. Tarek
and E. Khaled, Eds.
Berlin: Springer-Verlag, 2015, pp. 581–589.
[6]
N. Russell, A. Hofstede, W. Aalst, and N. Mulyar, “Workﬂow control-
ﬂow patterns: A revised view,” 2006, BPM Center Report BPM-06-22.
[7]
Corporation for National Research Initiatives, “Handle.net (version 7.0):
Technical manual,” 2010.
[8]
C. Peltz, “Web services orchestration and choreography,” Computer,
vol. 36, no. 10, Oct. 2003, pp. 46–52.
[9]
J. Rowley, “The wisdom hierarchy: Representations of the DIKW
hierarchy,” J. Inf. Sci., vol. 33, no. 2, Apr. 2007, pp. 163–180.
[10]
J. Cortada and J. Woods, Eds., The Knowledge Management Yearbook
2000-2001.
Boston &c.: Butterworth Heinemann, 2000.
[11]
G. Hodge, “Systems of knowledge organization for digital libraries:
Beyond traditional authority ﬁles,” Council on Library and Information
Resources, Washington, D.C., Tech. Rep. 91, April 2000.
[12]
WfMC. Workﬂow Management Coalition, “Terminology and glossary,”
WfMC, Winchester, UK, Tech. Rep. WFMC-TC-1011, Issue 3.0, 1999.
[13]
J. Klensin, “Simple Mail Transfer Protocol,” RFC 5321, IETF, 2008.
[14]
K. Moore, “Simple Mail Transfer Protocol (SMTP) Service Extension
for Delivery Status Notiﬁcations (DSNs),” RFC 3461, 2003.
[15]
C. Lewis, “Overview of Best Email DNS-Based List (DNSBL) Opera-
tional Practices,” RFC 6471, 2012.
[16]
“Java Mail,” URL: http://www.oracle.com/ [retrieved: Dec., 2014].
[17]
M. Crispin, “Internet message access protocol - version 4rev1,” RFC
3501, 2003.
[18]
K. Moore, “Recommendations for Automatic Responses to Electronic
Mail,” RFC 3834, IETF, 2004.
[19]
T. Hansen and G. Vaudreuil, “Message Disposition Notiﬁcation,” RFC
3798, IETF, 2004.
[20]
“Readnotify,” URL: http://www.readnotify.com [retrieved: Dec., 2014].
[21]
“Whoreadme,” URL: http://www.whoreadme.com [retrieved: Dec.,
2014].
[22]
G. Coulouris, J. Dollimore, T. Kindberg, and G. Blair, Distributed
Systems: Concepts and Design, 5th ed.
USA: Addison-Wesley
Publishing Company, 2011.
[23]
J. Spira and C. Burke, “Intel’s war on information overload: A case
study,” 2009.
[24]
International DOI Foundation, “DOI Handbook,” 2013.
[25]
The PostgreSQL Global Development Group, “PostgreSQL 9.4.0 Doc-
umentation,” 2014.
[26]
G. Decker, O. Kopp, F. Leymann, and M. Weske, “BPEL4Chor:
Extending BPEL for modeling choreographies.” in ICWS.
IEEE
Computer Society, 2007, pp. 296–303.
[27]
S.
Ross-Talbot
and
N.
Bharti,
“Dancing
with
web
services:
W3C
chair
talks
choreography,”
2005,
URL:
http://searchsoa.techtarget.com/news/1066118/Dancing-with-Web-
services-W3C-chair-talks-choreography [retrieved: Aug., 2015].
[28]
WfMC. Workﬂow Management Coalition Workﬂow Standard, “Process
Deﬁnition Interface - XML Process Deﬁnition Language (Version 2.2),”
Workﬂow Management Coalition, Tech. Rep. WFMC-TC-1025, 2012.
[29]
R. Shapiro, A Technical Comparison of XPDL, BPML and BPEL4WS.
Cape Visions, 2002.
[30]
T. A. Phelps and R. Wilensky, “Multivalent documents: A new model
for digital documents,” EECS Department, University of California,
Berkeley, Tech. Rep. UCB/CSD-98-999, 1998.
[31]
P. Dourish, W. K. Edwards, A. LaMarca, J. Lamping, K. Petersen,
M. Salisbury, D. B. Terry, and J. Thornton, “Extending document
management systems with user-speciﬁc active properties,” ACM Trans.
Inf. Syst., vol. 18, no. 2, 2000, pp. 140–170.
[32]
I. Satoh, “Mobile agent-based compound documents,” in Proceedings
of the 2001 ACM Symposium on Document engineering, ser. DocEng
’01.
New York, USA: ACM, 2001, pp. 76–84.
[33]
Telecom Italia, “Workﬂows and Agents Development Environment,”
2014, URL: http://jade.tilab.com/wade [retrieved: Dec., 2014].
[34]
Telecom Italia, “Java Agent Development Framework,” 2014, URL:
http://jade.tilab.com [retrieved: Dec., 2014].
[35]
G.
Polani,
“Conversation
vs
collaboration
vs
choreography,”
2014,
URL:
http://blog.goodelearning.com/bpmn/conversation-vs-
collaboration-vs-choreography [retrieved: Mar., 2016].
[36]
W3C, “Web Services Choreography Description Language: Primer,”
2006.
[37]
Object Management Group, “Business Process Model and Notation
(BPMN),” Object Management Group, Tech. Rep. formal/2011-01-03,
January 2011.
[38]
G. Decker, O. Kopp, F. Leymann, and M. Weske, “BPEL4Chor:
Extending BPEL for Modeling Choreographies,” in Proceedings of the
IEEE 2007 International Conference on Web Services (ICWS 2007),
I. C. Society, Ed.
Salt Lake City: IEEE Computer Society, Juli 2007,
pp. 296–303.
[39]
J. Siciarek, M. Smiatacz, and B. Wiszniewski, “For your eyes only –
biometric protection of pdf documents,” in EEE’13 - The 2013 Inter-
national Conference on e-Learning, e-Business, Enterprise Information
Systems, and e-Government, Las Vegas, USA, 2013, pp. 212–217.
[40]
MeNaID, “http://menaid.org.pl/,” 2012-2014, National Science Center,
Poland, grant DEC1-2011/01/B/ST6/06500 [retrieved: Dec., 2014].
13
International Journal on Advances in Intelligent Systems, vol 9 no 1 & 2, year 2016, http://www.iariajournals.org/intelligent_systems/
2016, © Copyright by authors, Published under agreement with IARIA - www.iaria.org

