A Conﬁgurable FPGA-Based Trafﬁc Generator for High-Performance Tests of
Packet Processing Systems
Andreas Tockhorn, Peter Danielis, Dirk Timmermann
University of Rostock
Institute of Applied Microelectronics and Computer Engineering
18051 Rostock, Germany
Tel./Fax: +49 (381) 498-7269 / -1187251
Email: {andreas.tockhorn;peter.danielis;dirk.timmermann}@uni-rostock.de
Abstract—For the evaluation of high-speed packet processing
systems, high performance trafﬁc generators are needed. They
have to be conﬁgurable to produce various trafﬁc patterns and
achieve preferably full Gigabit link utilization. The evaluation
of packet processing systems has become a critical task as
current open-source—especially software—tools have a lack
of throughput and suitable hardware generators are very
expensive. Thus, an FPGA-based testing framework containing
a trafﬁc generator and a performance monitor, each of them
based on an FPGA, was developed. In order to evaluate
different packet processing systems, this framework maintains
a high level of conﬁgurability. Summarized, this paper presents
an FPGA-based trafﬁc generator, dedicated to high throughput
testing of packet processing systems.
Keywords-Trafﬁc
Generator,
Performance
Measurement,
Network Testing
I. INTRODUCTION
Today, an increasing number of users subscribe for an
Internet connection. Due to their increasing bandwidth de-
mands, Packet Processing Systems (PPS), which execute
tasks like packet classiﬁcation, manipulation, and forwarding
have to process packets at very high rates. To guarantee their
correct functionality, they have to be tested under worst-case
conditions i.e., with maximum trafﬁc load. Consequently,
trafﬁc generators are needed for generating trafﬁc to fully
utilize links in order to evaluate a PPS’s performance under
these conditions. At the same time, trafﬁc generators have
to to be conﬁgurable to generate various patterns of traf-
ﬁc occurring in practice. Software-based trafﬁc generators
provide high conﬁgurability but have limited performance.
Trafﬁc generators implemented in hardware e.g., on a Field
Programmable Gate Array (FPGA) are able to generate
trafﬁc at very high rates. However, they often lack a high
degree of conﬁgurability as providing high conﬁgurability
in hardware results in enourmous hardware costs or are too
expensive for the proposed use.
Thus, this work has been inspired by the need of an
affordable and conﬁgurable trafﬁc generator offering full
Gigabit Ethernet link utilization. The developed framework
consists of an FPGA-based trafﬁc generator, an FPGA-
based trafﬁc monitor to measure Gigabit link utilization,
and a software tool to conﬁgure the trafﬁc generator. An
unique selling proposition of the proposed architecture is its
integration in the hardware design process of PPS by reusing
the therefore developed testbenches.
The trafﬁc generator’s performance is compared to that
of the open-source software based trafﬁc generator pack-
ETH [1]. PackETH provides convenient handling to carry
out extensive tests and, to the best of our knowledge, its
performance has not been evaluated before. We exemplarily
derive the necessary level of conﬁgurability from tests to
evaluate the performance of a recently published PPS called
IPclip (IP Calling Line Identiﬁcation Presentation) [2].
Brieﬂy summarized, the main contributions of this paper
are the following:
• Investigations on requirements for a conﬁgurable trafﬁc
generator are carried out.
• A combined hardware-software framework consisting
of a conﬁguration tool, trafﬁc generator, and trafﬁc
monitor is proposed.
• The trafﬁc generator’s performance results for the IP-
clip use case are presented. They are compared to the
performance results achieved for the trafﬁc generator
packETH.
• Integration of the framework into the hardware design
process of PPS is illustrated.
The remainder of this paper is organized as follows:
Section II contains an overview of related work. Section III
investigates requirements for a conﬁgurable trafﬁc generator.
Section IV introduces a combined hardware-software proto-
type for the developed trafﬁc generator. Section V presents
performance results for both the proposed packet generator
and packETH. The paper concludes in Section VI.
II. RELATED WORK
There is a wide variety of tools to generate trafﬁc—both
commercial and open-source solutions.
One example for a commercial software solution is a
highly conﬁgurable trafﬁc generator offered by ZTI for
Windows XP and Vista [3]. It achieves a link utilization
of up to 97.4 % for 1 Gbit/s Ethernet links. However, for
14
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

testing PPS as in the authors’ targeted use case, ZTI’s trafﬁc
generator is both too complex, does not offer full Gigabit
Ethernet link utilization, and is not complimentary.
Most of available open-source software trafﬁc generators
are designed for Linux, either as Linux kernel modules
or user space tools. Compared to kernel modules, user
space tools have a limited performance as kernel modules
directly operate on the network device driver bypassing
the kernel networking subsystem. The Kernel-based Trafﬁc
Engine (KUTE) is an example for a Linux kernel module
[4]. KUTE is able to send UDP packets and approximately
achieves up to 41.4 % link utilization for Gigabit Ethernet
links in the authors’ investigated test cases. Examples for
user space tools are the Brawny and RobUst Trafﬁc Engine
(BRUTE), the Real-time UDP Data Emitter (RUDE), the
Multi-Generator (MGEN), and the Internet Trafﬁc Genera-
tor (ITG) [5][6][7][8]. None of them achieves higher link
utilization rates than KUTE does.
Hardware trafﬁc generators mostly base on Field Pro-
grammable Gate Arrays due to their ﬂexibility and high
performance [9][10]. In [9], the authors state their archi-
tecture is scalable from 50 Mbit/s up to 2.5 Gbit/s but do
not carry out performance evaluations. The work proposed in
[10] aims at evaluating high performance QoS trafﬁc servers
rather than achieving full link utilization. There are some
approaches combining general-purpose PCs with network
processors such as BRUte on Network prOcessor (BRUNO)
[11]. However, the authors do not carry out performance
evaluations either.
In contrast to the authors’ approach, none of the open-
source packet generators’ performance is sufﬁcient to test
PPS with full link utilization. Furthermore, most FPGA-
based trafﬁc generators are designed for dedicated purposes
or, in the authors’ opinion, lack a detailed evaluation of
performance for extensive test cases.
Another group of trafﬁc generators are commercial Hard-
ware based generators e.g., from IXIA [12]. Depending
on the trafﬁc patterns to be sent, these generators are
suitable for testing PPSs with high loads. Most of them can
easily be extended for higher generation loads, by adding
extension cards with further generation engines. However,
these systems are very expensive. Depending on the desired
conﬁguration, thousands of dollars up to more than 100,000
dollars have to be spent. Therefore, these well-performing
trafﬁc generators are not appropriate for the proposed sce-
nario.
III. REQUIREMENTS FOR A CONFIGURABLE TRAFFIC
GENERATOR
On the one hand, trafﬁc generators for testing PPS have to
provide a high level of conﬁgurability to be able to conﬁgure
extensive test cases. To exactly reproduce practical trafﬁc
conditions, it is necessary to be able to adjust all necessary
parameters. Preferably, every single frame should be deﬁn-
able. Thereby, a frame’s adjustable parameters depend on the
PPS’ use case. On the other hand, trafﬁc generators should
achieve high trafﬁc rates anyway. Especially if the perfor-
mance of a PPS shall be evaluated, achievable throughput of
the trafﬁc generator is of high importance. Since an optimal
combination of these two requirements can only be satisﬁed
by expensive hardware based trafﬁc generators, an FPGA-
based trafﬁc generator was developed.
Before the speciﬁc requirements for the presented trafﬁc
generator will be worked out, its use case shall be brieﬂy
explained. The PPS to be tested, is the recently invented
IPclip mechanism [2][13]. IPclip is implemented on the ac-
cess nodes of an internet service provider. It is a mechanism
providing Trust-by-Wire in IP-based networks by adding
trustworthy location information to IPv4 and IPv6 packets.
Thereby, IPclip adds some additional header options to the
IP header. These options include location information e.g., a
GPS position and some information about the access node.
Since the IPclip prototype has already been functionally ver-
iﬁed [14], further investigations concerning its performance
and the stability of its implementation under very high trafﬁc
loads shall be made. Since it inserts additional information
to the IP headers and therefore increases packet lengths, it
can be necessary to drop a certain percentage of frames in
case of full link load. To reproduce these real scenarios, it
is mandatory to use test equipment capable of generating
trafﬁc fully utilize a 1 Gbit/s Ethernet link. As exposed in
the preceding section, only hardware-based trafﬁc generators
are able to provide appropriate trafﬁc patterns in conjunction
with high conﬁgurability.
Link utilization denotes the quotient of achieved through-
put (TP) divided by the theoretically possible TP for a link
as stated in Formula 1:
Link Utilization =
Achieved TP
Theoretically Max. TP
(1)
Thereby, TP is the number of bytes traversing a link per
second (see Formula 2).
TP = Number of Bytes
1s
(2)
When generating frames with a trafﬁc generator, the fra-
me size in bytes is an important parameter, since it directly
determines the maximum number of frames i.e., headers,
which have to be generated. The total number of bytes on a
1 Gbit/s link is calculated as the sum of following values:
• 12 bytes Inter Frame Gap (IFG)
• 7 bytes preamble and 1 byte Start-of-Frame-Delimiter
(SFD)
• frame size in bytes
• 4 bytes Frame Check Sequence (FCS)
15
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

PC
Configuration
Config.
Stream
FPGA
Traffic 
Generator
Packet 
Processing 
System
(PPS)
FPGA
Traffic 
Monitor
PC
Monitoring
1 Gbit/s
Counter
1 Gbit/s
Figure 1.
Test setup consisting of PC running the conﬁguration PC, hardware trafﬁc generator, PPS under test, and monitoring HW and PC.
The IFG, preamble, SFD, and FCS are added by
transceiver chips and cannot be inﬂuenced by the trafﬁc
generator. Thus, to calculate the total number of bytes per
link, 24 bytes have to be added to the size of each sent
frame.
The smallest size an Ethernet frame can have is 60 bytes
(without IFG, preamble, SFD, and FCS). That is, 84 bytes
are occupied on a 1 Gbit/s Ethernet link for each frame.
As we focus on PPS, which take their decisions solely
based on header information of frames, processing minimum
length frames represents the worst-case. On a 1 Gbit/s
Ethernet link, at most approximately 1.5 million smallest
size frames can be transmitted per second. That is, the
corresponding maximum number of headers to be processed
by the PPS. Contrary, only the headers of 81,000 frames have
to be processed when sending maximum length frames of
1,514 bytes. Consequently, achieving full link utilization for
smallest size frames is a critical task for trafﬁc generators.
To enable the proposed trafﬁc generator to fully utilize
a Gigabit link for minimum sized frames, some limitations
concerning the conﬁgurability of header options had to be
made. Considering the IPclip use case, header options have
been deﬁned to be conﬁgurable based on their relevance
for the IPclip mechanism. These ﬁelds include IP source
address, two VLAN tags, and the length of the to be
generated frame.
Summarized, the proposed architecture for a conﬁgurable
trafﬁc generator shall be able to fully utilize a 1 Gbit/s
Ethernet link and be conﬁgurable in regard to the IPclip use
case. A further major requirement was to be able to reuse
the hardware testbench of the developement process of the
IPclip system.
IV. PROTOTYPE REALIZATION
To fullﬁll the above mentioned requirements, an architec-
ture divided into a HW and a SW part was developed.
The software part enables convenient and ﬂexible con-
ﬁguration and only generates values for header options,
which shall be variable. The hardware, implemented on
an FPGA ensuring throughput of 1 Gbit/s, is conﬁgured
by this software running on a PC. The main task of the
hardware is to generate standard conform frames i.e., IP
packets based on these variable header options send from the
conﬁguration software. To clarify, the hardware implements
a kind of trafﬁc ampliﬁcation. From a small conﬁguration
set, it generates a larger complete frame.
Figure 1 depicts the general setup for the usage of the
proposed system architecture and a monitor to measure the
output of the PPS to be tested. In the ﬁrst phase, a software
on a PC generates sets of values for the conﬁgurable header
options. Following, these sets are transmitted via an Ethernet
link to the FPGA, which implements the HW part of the
trafﬁc generator. The therefore sent frames (see Figure 2)
consist of one byte, which determines the operation for the
HW. This byte is followed by as many conﬁguration sets as
a maximum length frame can contain. The HW implemented
on this FPGA is the main functional part of the generator. It
receives these conﬁguration sets. From each set it generates
one Ethernet frame. These generated frames are mostly ﬁxed
in their composition. Only the options, which have to be
conﬁgurable in order to test the PPS, are generated and sent
from the PC. The resulting frames are transmitted on the link
to the PPS. After the previously mentioned steps, the task of
trafﬁc generation is ﬁnished. The PPS under test receives the
generated frames. It processes them and transmits the trafﬁc
to another FPGA. This one implements a trafﬁc monitor able
to count the number of received frames and bytes and collect
other information about the incoming data stream. These
values are transmitted via a second Ethernet link to a PC. On
this PC, a software determines performance metrics of the
PPS e.g., regarding frame rate, bandwidth, and packet drops.
Only a HW-based monitor was able to correctly measure the
trafﬁc under high loads. This especially applies for trafﬁc
streams consisting of many minimum length frames.
During the evaluation of the trafﬁc generator itself, nearly
the same setup has been used. It only differs in the HW being
directly connected with the monitor. Thereby, the parameters
of the generated trafﬁc could be measured conveniently. The
implemented trafﬁc monitor is not capable of evaluating ﬁne
grained statistical information about the trafﬁc. It does not
bother with timing data e.g., jitter etc., since this is out of
Src IP
VLAN
Length
Index
Control
OpCode
Config 
Set 1
Config 
Set 2
. . .
Config 
Set n
Figure 2.
Structure of a conﬁguration frame containing an operation byte
followed by as many conﬁguration sets as possible.
16
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

the scope for this work and the envisaged use case of IPclip.
The fundamental idea of this architecture is an ampliﬁca-
tion of the conﬁguration stream to a data stream of 1 Gbit/s.
In order to reduce the amount of data to be generated by
and sent from the PC, the conﬁgurable header options are
as small as possible. An example trafﬁc stream shall be
generated, in which frames are 500 bytes long on average.
Each frame has a speciﬁc frame length (2 byte), source IP
address (4 bytes), and include one VLAN tag (2 byte). One
control byte is needed to deﬁne, which options of the header
to be conﬁgured with this set. Therefore, a conﬁguration set
for one single frame consists of 9 bytes. Resulting from
this scenario, ampliﬁcation of link utilization by a factor of
55 is realized. This example only clariﬁes the fundamental
mechanism. It does not take into account values like inter
frame gap, preamble, and start of frame and FCS.
A. Hardware
This section illustrates the hardware architecture of the
trafﬁc generator (see Figure 3). Fundamentally it consists of
two ﬁnite state machines (FSM). At the input of the trafﬁc
generator, an FSM receives frames from the conﬁguration
software running on a PC. These frames contain commands
from the software part and conﬁguration sets, respectively.
All conﬁguration sets are stored into a ﬁrst in ﬁrst out
memory (FIFO). Since the link to the PPS shall only be
fully utilized and no deterministic trafﬁc patterns shall be
sent, it does not matter if this memory is full resulting in
dropped conﬁguration sets. However, it is more important
that the FIFO never runs empty to maintain highest load on
the PPS under test. Consequently, the generation of frames
does not start until the FIFO is ﬁlled for the ﬁrst time.
The second FSM depicted in Figure 3 generates frames.
Therefore, it reads a set from the FIFO. First of all, it
processes the control byte determining, which header options
to be conﬁgured. Based on this information, a frame of
the desired length and the conﬁgured header options is
generated. Consequently, all header options as well as the
payload of the frame, which are not conﬁgured by the
conﬁguration set, are determined statically or randomly.
Whether these ﬁelds shall be ﬁlled with random or static
data is determined by the conﬁguration software. Since, the
proposed trafﬁc generator shall be able to build frames of
many different protocols, there exists corresponding state
machines to implement the needed header structures.
Although the proposed architecture is able to realize
an enourmous ampliﬁcation in link utilization, the FIFO
containing the conﬁguration sets can run empty. Therefore,
two solutions were implemented. The ﬁrst one is to repeat
the last generated frame. To conﬁgure this solution, the
conﬁguration PC sends a frame before the actual test run
starts, which determines how often generated frames shall be
repeated. For the envisaged IPclip use case the same frame
can be repeated immediately. However, when testing PPSs,
Config.
Stream
Generate
FSM
1 Gbit/s
Config.
Sets
Preconfigured Data
Index
Preconfiguration
Receive
FSM
FIFO
Lookup
Table
Figure 3.
Architecture of the conﬁgurable trafﬁc generator’s HW.
which implement some caching functionalities, repetition of
frames is no appropriate action. This would probably falsify
the performance evaluation of those systems. Therefore, a
second solution was implemented. Before the generation of
frames starts, a conﬁguration stage is introduced. In this
phase the conﬁguration software sends frames containing
predeﬁned data for long header options or a set of several
header options. These predeﬁned data is stored in a buffer
within the trafﬁc generator’s hardware. During the process
of generating frames, these sets of preconﬁgured data can
be selected by an even smaller index, which is part of the
variable conﬁguration sets generated by the PC. A possible
application of this solution might be the preconﬁguration of
IPv6 addresses. IPv6 addresses would take 16 byte to be
transmitted if they were entirely conﬁgurable. It is much
more efﬁcient to transmit just an index for a preconﬁgured
lookup table. With a two byte long index, a 65,536 deep
table of IPv6 addresses can already be addressed.
B. Conﬁguration Software
As mentioned at the beginning of this section, a software
running on a host PC is used to transmit variable sets
of conﬁgurable header options to the hardware part of
the trafﬁc generator. Therefore, a C++ program using the
WinPcap library [15] to transmit the conﬁguration sets over
an Ethernet link to the described hardware was implemented.
First of all, a protocol for these conﬁguration frames had
to be deﬁned. Since the hardware of the trafﬁc generator
is directly connected to the conﬁguration PC and therefore
receives any frame sent from it, no addressing scheme is
needed. Hence, no Ethernet header is required. Thus, it is
possible to use as many bytes as possible for conﬁguration
sets. However, it is possible to implement an Ethernet and an
IP header in order to be able to realize a spatial separation of
the conﬁguration PC and the hardware part of the generator.
Figure 2 depicts the structure of the conﬁguration frames.
The ﬁrst byte of a frame deﬁnes how the receiving state
machine handles a frame. For example, a frame sets the
replay counter, or writes a preconﬁgured table, or contains
17
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

Table I
THEORETICAL CONFIGURATION THROUGHPUT (TP) FOR VARIOUS SETS
OF CONFIGURABLE PARAMETERS. THE NUMBERS IN THE FRAME
LENGTH FIELD DEFINE THE AVERAGE LENGTH OF THE RESULTING
FRAMES.
Set 1
Set 2
Set 3
Frame length (2 Bytes)
X
X
X
IPv4 Address (4 Bytes)
X
X
IPv6 Address (16 Bytes)
X
VLAN Tag (2 Bytes)
2X
LUT Index (2 Bytes)
X
X
Set Size in Bytes
7
25
9
Conﬁg. TP [Mbit/s]
85
303
109
(avg. length 60 Bytes)
Conﬁg. TP [Mbit/s]
14
49
18
(avg. length 500 Bytes)
a set of conﬁgurable options to generate frames. In the usual
case of sending conﬁgurable options, this operation byte is
followed by conﬁguration sets to be written in the afore
mentioned operation FIFO. The length of each conﬁguration
set depends on the header options it determines. Hence, each
set starts with the control byte that indicates the structure
of the conﬁguration set i.e., which options it conﬁgures. A
variable number of conﬁguration sets can be transmitted.
Conﬁguration sets are always transmitted using maximum
length frames as each Ethernet frame implies an overhead.
This overhead results from the inter frame gap, preamble,
start of frame delimiter, and the frame check sequence.
Since the mechanism of amplifying conﬁguration band-
width to full 1 Gbit/s bandwidth was brieﬂy summarized in
the beginning of this section, the following description shall
investigate it more detailed. To simplify the examinations,
a conﬁguration frame is assumed to include parameter sets
of the same length. Table I depicts different scenarios of
conﬁgurable header options.
Each column of the table illustrates a possible conﬁgura-
tion set for the IPclip use case. Header options marked with
a cross are determined by the conﬁguration PC and therefore
transmitted to the FPGA. The table also depicts the length
of the resulting conﬁguration set in bytes. The control byte
of each conﬁguration set has to be considered for the length
of the set as well. Based on the length of a conﬁguration
set, the bandwidth of the conﬁguration stream is evaluated,
which is necessary to maintain a trafﬁc stream of 1 Gbit/s at
the output of the hardware part. Further overhead that has to
be considered consists of inter frame gap, preamble, start of
frame, and the FCS. Since the length of frames within the
generated Ethernet stream has the most important inﬂuence
on the required conﬁguration bandwidth Table I depicts the
required bandwidth once for minimum length frame and
as a second example for a resulting Ethernet stream with
an average frame length of 500 bytes. As apparent in a
trafﬁc stream consisting of longer frames on average, the
demands to the conﬁguration bandwidth and therefore to
the conﬁguration PC dramatically decreases.
Following, we describe the trafﬁc generator’s integration
into the hardware development process of PPS. During the
functional test of the PPS, before it is synthesized for an
FPGA, it has to be functionally veriﬁed. Therefore, a test-
bench, which generates several different frames has already
been implemented. This testbench is standard C respectively
C++ code enriched with some SystemC code to connect it
to the VHDL design process. The testbench’s algorithmic
part, determining the test patterns, can be reused for the
conﬁguration software of the proposed trafﬁc generator.
This part generates variable header options to test the PPS.
Instead of further building frames from these information
transmitted to the PPS’s VHDL description within a simula-
tor, variable header options are stored into the previously
described conﬁguration sets. These conﬁguration sets are
transmitted to the described hardware, where corresponding
frames are transmitted to the physical prototype of the PPS.
V. EVALUATION
In this section, the achieved results for different scenarios
are discussed. Furthermore, these results shall be compared
with results achieved with packETH. In advance, the main
parts of the test equipment have to be mentioned. The de-
scribed hardware is synthesized for a Xilinx Virtex 4 FPGA
(XC4VFX20). As a host PC for running the conﬁguration
software a Pentium D at 2.8 GHz with 2 GB RAM running
Windows XP SP3 was used. To evaluate the performance
of packETH, version 1.6 running on the same PC executing
Ubuntu 8.04 is used.
First of all, throughput the software generator packETH
achieves was measured for different frame length. As de-
picted in Table II, the longer the generated frames the higher
the throughput of packETH on the Linux PC. As apparent
from Table II, packETH does not achieve absolutely full
link utilization even for maximum frames. However, for all
these cases the proposed trafﬁc generator reaches full link
utilization independent from the length of generated frames.
As pointed out in Section III, the most important requirement
for our use case is to ensure full link utilization. This was
not possible with packETH even with an increased process
priority to minimize scheduling interrupts.
Further tests for several different conﬁguration scenarios
implied by the chosen IPclip use case achieved the same
results. Since all the frames transmitted with packETH are
conﬁgured before it starts transmitting frames, its throughput
solely depends on the length of created frames. Therefore,
the authors do not illustrate any other packETH results.
The output of the trafﬁc generator only depends on a suf-
ﬁcient conﬁguration bandwidth. Though, performance of the
conﬁguration software was evaluated for the worst case of
25 bytes long conﬁguration sets (control byte, IPv6 address,
18
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

Table II
LINK UTILIZATION OF A 1 GBIT/S ETHERNET LINK.
Frame Size
Link Utilization in %
packETH
Trafﬁc Generator
60
18.8
100
120
28.8
100
240
48.1
100
500
81.7
100
1000
99.3
100
1514
99.0
100
2 VLAN tags, frame length, index). As the host PC was
able to achieve this theoretically evaluated throughput, the
trafﬁc generator is able to reach full utilization of a Gbit link
for all other scenarios of the IPclip use case. However, the
performance of the proposed architecture heavily depends on
performance of the conﬁguration PC. First attempts to test
the conﬁguration software show that the PC was capable of
providing the required conﬁguration bandwidth. However,
the hardware part of the trafﬁc generator was not able to
constantly generate the desired trafﬁc. Further investigations
show that scheduling delays on the conﬁguration PC inter-
rupt the conﬁguration stream for short periods so that the
FIFO, which buffers the conﬁguration sets on the FPGA,
runs empty. This issue could be solved by increasing the
process priority of the conﬁguration software on the PC.
VI. CONCLUSION
This paper has introduced an architecture for a trafﬁc
generator for high throughput performance tests of packet
processing systems. To ensure ﬂexibility and a guaranteed
full link utilization, the proposed architecture consists of
a combination of hardware and software. Furthermore, this
architecture integrates well into the hardware design process
of packet processing systems by reusing an the therefore
implemented testbench. Compared to already existing high
performance test equipment, the proposed solution is signif-
icantly cheaper as it only requires a medium efﬁcient PC
and an FPGA development board including two Ethernet
interfaces. As exemplarily shown for packETH, ﬂexible and
free software solutions cannot fulﬁll the authors’ require-
ments to link utilization. This especially applies to the
generation of minimum length frames. It could be shown
that the developed packet generator achieves full 1 Gbit/s
link utilization even for all scenarios implied by the IPclip
use case.
REFERENCES
[1] M. Jemec, “packETH – Ethernet Packet Generator,” 2011.
[Online]. Available: http://packeth.sourceforge.net/
[2] S. Kubisch, H. Widiger, P. Danielis, J. Schulz, D. Timmer-
mann, T. Bahls, and D. Duchow, “Trust-by-Wire in Packet-
switched IP Networks: Calling Line Identiﬁcation Presenta-
tion for IP,” in Proc. of 1st ITU-T Kaleidoscope Conference,
May 2008, pp. 375–382.
[3] ZTI, “Trafﬁc Generator and Measurement Tool for IP Net-
works (IPv4 & IPv6),” 2008.
[4] S. Zander, D. Kennedy, and G. Armitag, “KUTE – A High
Performance Kernel-based UDP Trafﬁc Engine,” Swinburne
University of Technology, Tech. Rep. 050118A, January
2005.
[5] N. Bonell, S. Giordano, and G. Procissi, “BRUTE: A High
Performance and Extensible Trafﬁc Generator,” in Proc. of
SPECTS, ser. 37 (3), 2005, p. 839845.
[6] J. Laine, S. Saaristo, and R. Prior, “RUDE & CRUDE:
Real-time UDP Data Emitter and Collector,” 2008. [Online].
Available: http://rude.sourceforge.net/
[7] Naval
Research
Laboratory,
“The
Multi-Generator
(MGEN)
Toolset,”
2008.
[Online].
Available:
http://cs.itd.nrl.navy.mil/work/mgen/
[8] S. Avallone, A. Pescape, and G. Ventre, “Analysis and
Experimentation of Internet Trafﬁc Generator,” in Proc. of
New2an’04, 2005, pp. 70–75.
[9] A. Abdo and T. J. Hall, “Programmable Trafﬁc Generator with
Conﬁgurable Stochastic Distributions,” in Proc. of Canadian
Conference on Electrical and Computer Engineering, 2005,
pp. 747–750.
[10] J. M. Claver, P. Agust, G. Len, and M. Canseco, “A
Reprogrammable and Scalable Multimedia Trafﬁc Genera-
tor/Monitor on FPGA,” in Proc. of International Conference
on Field Programmable Logic and Applications, 2007, pp.
567–570.
[11] G. Antichi, A. D. Pietro, D. Ficara, S. Giordano, G. Procissi,
and F. Vitucci, “Design of a High Performance Trafﬁc Gen-
erator on Network Processor,” in Proc. of 11th EUROMICRO
Conference on Digital System Design Architectures, Methods
and Tools, 2008, pp. 438–441.
[12] “Ixia - Leader in Converged IP Testing,” 2011. [Online].
Available: http://www.ixiacom.com/
[13] H. Widiger, S. Kubisch, P. Danielis, J. Schulz, D. Duchow,
T. Bahl, and D. Timmermann, “IPclip: An Architecture to
restore Trust-by-Wire in Packet-switched Networks.”
Mon-
treal, Quebec, Canada: The 33rd IEEE Conference on Local
Computer Networks (LCN), October 2008.
[14] P. Danielis, S. Kubisch, H. Widiger, J. Schulz, D. Duchow,
T. Bahls, D. Timmermann, and C. Lange, “Trust-by-wire in
packet-switched ip networks: Calling line identiﬁcation pre-
sentation for ip (hardware prototype demonstration).”
Uni-
versity Booth, Munich, Germany: DATE 2008, March 2008.
[15] G.
Varenni,
L.
Degioanni,
F.
Risso,
and
J.
Bruno,
“WinPcap,
The
Packet
Capture
Library
and
Network
Monitoring Library for Windows,” 2010. [Online]. Available:
http://www.winpcap.org/
19
ICIMP 2011 : The Sixth International Conference on Internet Monitoring and Protection
Copyright (c) IARIA, 2011.     ISBN: 978-1-61208-125-0

