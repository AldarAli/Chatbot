Reconﬁguration Patterns for Goal-Oriented
Monitoring Adaptation
Antoine Toueir, Julien Broisin, Michelle Sibilla
IRIT, Universit´e Paul Sabatier
Toulouse, France
Email: {toueir,broisin,sibilla}@irit.fr
Abstract—This paper argues that autonomic systems need to
make their distributed monitoring adaptive in order to improve
their “comprehensive” resulting quality; that means both the
Quality of Service (QoS), and the Quality of Information (QoI). In
a previous work, we proposed a methodology to design monitoring
adaptation based on high level objectives related to the manage-
ment of quality requirements. One of the advantages of adopting a
methodological approach is that monitoring reconﬁguration will
be conducted through a consistent adaptation logic. However,
eliciting the appropriate quality goals remains an area to be
investigated. In this paper, we tackle this issue by proposing
some monitoring adaptation patterns falling into reconﬁguration
dimensions. Those patterns aim at facilitating the adaptation
design of monitoring behavior of the whole set of distributed
monitoring modules part of autonomic systems. The utility of
those patterns is illustrated through a case-study dealing with
monitoring adaptation based on high level quality objectives.
Keywords–Quality requirements; adaptive monitoring; auto-
nomic systems; goal-oriented adaptation.
I.
INTRODUCTION
Autonomic systems that are implemented by virtue of their
four characteristics self-conﬁguration, self-optimization, self-
healing and self-protection, are serving the ultimate objective
of making them self-managed to achieve high level objectives
[1]. These objectives are strongly related to the quality level
provided by autonomic systems. When large and complex sys-
tems are targeted, the self-management characteristic (self-*) is
a key issue to deal with. Basically, self-management is thought
as the auto-adaptation capability that brings the system to reach
an absolute or preferable state. Concretely, the four self-*
characteristics are realized by implementing the Monitoring,
Analyzing, Planning, Executing - Knowledge (MAPE-K) loop
modules. This implementation is either embedded within a
resource, or distributed over several resources.
In MAPE-K loop, the monitoring module plays a crucial
role, since wrong decisions might be taken by the analyzing
& planning modules. Therefore, autonomic systems need to
ensure the quality of information (e.g., correctness, freshness,
timeliness, accuracy, etc.) exposed by the distributed monitor-
ing modules. Moreover, within autonomic systems, monitoring
is usually QoS-oriented. Thus, the services implemented by the
functional system must respect the required QoS level that is
determined through the Service Level Agreements (SLAs) that
have been agreed with clients. Since the management system
(managing the functional system) could provide the possibility
to renegotiate or modify the QoS speciﬁcation afterward, the
monitoring system has to adapt its behavior according to these
new requirements and constraints.
To summarize, the monitoring of autonomic systems has to
be capable of conﬁguring the underlying mechanisms carrying
the monitoring functions (e.g., measuring, gathering, calculat-
ing, evaluating, ﬁltering, etc.) starting from QoS speciﬁcation,
as well as reconﬁguring those mechanisms based on quality
requirements.
Most of the time, reconﬁguration is held through ad-hoc
logic (proposing solutions for particular scenarios dealing with
speciﬁc issues). But, this approach is not suitable for reuse
in other scenarios, and it also does not satisfy high level
objectives extended over the whole scale of the autonomic
system. To overcome these issues, we adopted a Requirements
Engineering methodology to design monitoring adaptation; it
starts from high level goals, and ends up with the conﬁguration
of monitoring mechanisms [2].
Right now, the key question is: how to identify goals
representing the ”starting point” for deriving monitoring
(re)conﬁguration? In other words, reconﬁguration questions
such as: why to delay launching some monitoring mecha-
nisms? Why to substitute remote agents? How to aggregate
alarms? What determines the monitoring of this set of met-
rics and not another one? Why to exchange metrics among
distributed management entities? This paper deals with these
questions by proposing monitoring adaptation patterns that as-
sist human administrators in designing meaningful adaptations
and thus increase the overall quality of the autonomic systems.
The work presented here relies on both a 3-layered adaptive
monitoring framework [3][4][5] and our goal-oriented adapta-
tion methodology [2]. We pursue this research by focusing on
adaptation patterns dedicated to the identiﬁcation of high level
goals, together with their reﬁnement. The paper is organized
as follows: the next section gives an overview of the studied
monitoring framework; the monitoring adaptation patterns are
discussed in Section III; and then applied to a case-study in
Section IV; before concluding, Section V enumerates other
monitoring adaptation approaches and points out their weak-
nesses.
II.
THE STUDIED ADAPTIVE MONITORING FRAMEWORK
Our approach is based on a 3-layered framework [3][4][5]
illustrated in Figure 1, and deﬁnes three fundamental capa-
bilities required to control monitoring: being conﬁgurable,
adaptable and governable.
22
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

Figure 1: Adaptation Methodology & Monitoring Framework
The conﬁgurability layer relies on the Distributed Man-
agement Task Force (DMTF) Common Information Model
(CIM) standard. In addition to the managed resources, this
low level layer aims at representing the metrics [6] and the
gathering mechanisms [3] that are required to monitor both
the QoS provided by the functional system and the QoI
of the monitoring system itself; this layer deals with both
mechanisms. The adaptability layer provides an interface
encapsulating operations to be applied on the lower layer
models. Thus, the behavior of the underlying monitoring
mechanisms will be reconﬁgured during runtime by invoking
these operations. Finally, the governability layer is the top
level layer representing the ”intelligence” of the monitor-
ing adaptation. To express the quality requirements, it uses
Event/Condition/Action (ECA) policies to describe when and
how adaptation should take place, that is, in which contexts
those operations of the adaptability layer should be invoked.
We exploit the Requirements Engineering (RE) to propose
monitoring adaptation methodology, and to build conﬁgura-
bility and adaptability models [2]. RE iterates activities of
”eliciting, evaluating, documenting, consolidating and chang-
ing the objectives, functionalities, assumptions qualities and
constraints that the system-to-be should meet based on the
opportunities and capabilities provided by new technologies”
[7]. Keep All Objectives Satisﬁed (KAOS) is adopted as RE
goal-oriented method, due to its formal assertion layer that
proves correctness and completeness of goals [8]. In KAOS,
the system-to-be is divided into various models. Goals Model
determines the objectives to be realized through that system
(e.g., minimizing monitoring cost). Agents Model comprises
the agents (e.g., human automated component) responsible
for realizing the reﬁned elicited goals. Notice that the term
Agents in networks and systems management represents enti-
ties responding to management requests coming from other
management entities called Managers; therefore, the term
Agent in RE has a different meaning. Operations Model deals
with the internal operations to be carried by agents (e.g.,
updating polling period). Object Model identiﬁes the system-
to-be objects (e.g., entities, agent, relationships).
Therefore, based on KAOS, our methodology identiﬁes the
TABLE I: Patterns Reﬁning Achieve Goals (P ⇒ ♦Q)
Pattern
Subgoal 1
Subgoal 2
Subgoal 3
Milestone
P ⇒ ♦R
R ⇒ ♦Q
Case
P ∧ P 1 ⇒ ♦Q1
P ∧ P 2 ⇒ ♦Q2
□(P 1 ∨ P 2)
Q1 ∨ Q2 ⇒ Q
Guard
P ∧ ¬R ⇒ ♦R
P ∧ R ⇒ ♦Q
P ⇒ P WQ
high level quality objectives the monitoring framework carries
on. By iterating a reﬁnement process, we ﬁnally identify what
it is called leaf goals or requirements (see Figure 1). Once
the leaf goals are determined, both policies (to be inserted
into the governability layer) and agents (invoking operations
of the adaptability layer) will be recognized. Thus, monitoring
system adaptation is automatically handled. However, human
administrators have to manually identify the leaf goals accord-
ing to the high level objectives they want to reach. To facilitate
this task, we conducted an investigation about the monitoring
aspects that could be subject to adaptation. As a result, we have
identiﬁed various leaf goals belonging to four dimensions (i.e.,
Spatial, Metric, Temporal, Exchange) [2]. Hereafter, in the next
section, we propose monitoring adaptation patterns falling into
those dimensions.
III.
MONITORING ADAPTATION PATTERNS
With regard to the reﬁnement process, besides the basic
AND/OR-decompositions, we rely on some predetermined cor-
rect and complete reﬁnement patterns proved mathematically
[9]. Those patterns reﬁne Achieve goals of the form P ⇒ ♦Q
(see Table I), and are written in Linear Temporal Logic (LTL)
classical operators where ♦, □ and W mean some time in
the future, always in the future, and always in the future
unless, respectively. Starting from a given goal (P), milestone
pattern identiﬁes one (various) intermediate goal(s) (R, [...])
that must be reached orderly before reaching the ultimate one
(Q). Rather, case pattern identiﬁes the set of different and
complete cases (P1, P2) for reaching ﬁnal goals (Q1, Q2)
that OR-decompose the ultimate goal (Q). Finally, the guard
pattern requires the recognition of a speciﬁc condition (R)
before achieving the ultimate goal (Q).
In order to clarify the exploitation contexts, pattern goals
and requirements, as well as some application situations, our
pattern structure encompasses: context, pattern reﬁnement, and
examples. Notice that we are focusing on adaptation actions
taken at the autonomic manager side only. Thus, investigating
adaptations at the agent side is out of scope. In addition, the
patterns are reﬁned using KAOS graphical language [7].
A. Exchange Dimension Pattern
Context. Relying on IBM blueprint reference architecture
[10], autonomic systems could distribute self-management
(MAPE) loops over multiple collaborating autonomic man-
agers. Each of them is responsible for managing a particular
scope of managed resources. Patterns belonging to this dimen-
sion are useful to overcome metrics gathering/delivering prob-
lems. Those problems could manifest either on metrics values,
reliability of communication between information sources &
destinations, or even on their trustworthiness.
23
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

Figure 2: Exchange Dimension Pattern
Pattern Reﬁnement. Communications inside autonomic
system could be classiﬁed according to the entities in-
volved in information exchange (i.e., managers, agents,
shared databases). Therefore, we identify three communication
classes: Manager-2-Agent, Manager-2-Manager, and Manager-
2-Shared Database (see Figure 1). Besides identifying commu-
nication classes, we need to deal with pull & push communi-
cation modes. In pull, the entity needing information solicits
the one possessing it, which responds with the queried infor-
mation; where in push, the entity possessing the information
reports it to other entities. By taking into consideration push
and pull modes, along with previous communications classes,
we use case pattern for the ﬁrst two reﬁnement levels to cover
all possible cases (see Figure 2).
Based on the triplet ⟨ Information Source, Communi-
cation Protocol, Information Destination ⟩, the Manager-2-
Agent pull mode will be OR-decomposed into Substitute
Agent and Substitute Protocol leaf goals. Rather, Substi-
tute Protocol and Substitute Destination OR-decompose both
Manager-2-(Manager/Shared DB) push mode. Besides, Acti-
vate/Deactivate Polling & Exporting leaf goals are elicited to
launch and stop polling & exporting.
Notice that in both Manager-2-(Manager/Shared DB) pull
mode communications, the manager responding to requests is
considered as agent (because it is the information source);
therefore, this case becomes identical to Manager-2-Agent
pull mode. Moreover, adaptation actions related to Manager-
2-Agent push mode are not treated because they need to be
held at the agent side.
Examples. This pattern is suitable for the following cases:
(1) Increasing accuracy or precision of pulled/pushed metrics
values, by replacing information source. (2) Querying more
available agents, or blocking fake agents trying to integrate the
distributed management system. (3) Securing the communica-
tion between information sources and destinations. (4) Modi-
fying information destination when changing the topology of
collaborating autonomic managers.
B. Metric Dimension Pattern
Context. The main idea behind building autonomic sys-
tems is to delegate decisions, that human administrators are
used to make, to autonomic systems themselves. Thus, to be
Figure 3: Metric Dimension Pattern
able to make ”wise” decisions, the monitoring system needs to
instrument speciﬁc metrics that could be activated/deactivated
according to the management needs during runtime. Patterns
belonging to this dimension are useful to control the trade-
off between constructing more knowledge and monitoring the
information that is necessary for management.
Pattern
Reﬁnement. Metric instrumentation must be
thought at the whole management system level. In other words,
a given autonomic manager could activate/deactivate instru-
mentation of particular metrics, but when deactivating metrics
on that manager, it doesn’t mean necessarily that those metrics
are ”abandoned”, because they could be transferred to other
collaborating autonomic manager on which they are activated.
These two cases are OR-decomposing the ﬁrst reﬁnement level
(see Figure 3).
Regarding metrics manipulation inside an autonomic man-
ager, the second reﬁnement level uses case pattern to cover
metric classes. Our research exploits both CIM Metric Model
classifying metrics into Base, Discrete & Aggregation, as well
as our mathematical extension [6] classifying base metrics into
Resource, Measurable & Mathematical. Each of these classes
is OR-decomposed using Add Aspects and Remove Aspects leaf
goals. On the other hand, the transfer of metrics among auto-
nomic managers could be reﬁned through milestone pattern,
when metrics are activated on the collaborating manager (Add
Aspects in Figure 3, as Subgoal 1 in Table I) ﬁrst, and then
removed from the delegating one (Remove Aspects, as Subgoal
2).
It is worth noting that previously mentioned aspects are
representing ”metric deﬁnitions”, rather than ”metric values”.
The former encompasses attributes related to the nature of
metric (e.g., data type, unit), where the latter attributes describe
the instrumented values and their relevant contexts. For further
information, the reader is referred to the DMTF Base Metric
Proﬁle [11].
Examples. This pattern can be applied in the following
cases: (1) Performing troubleshooting, or applying root cause
analysis algorithms, because they require the instrumentation
of additional metrics. (2) Modifying the hierarchical topol-
ogy of the management system by instrumenting aggregated
metrics to be exported to other managers or shared DBs. (3)
”Engineering” the distribution of monitored metrics among
autonomic managers.
24
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

Figure 4: Spatial Dimension Pattern
C. Spatial Dimension Pattern
Context. As mentioned earlier, in an autonomic system,
each manager is responsible for managing a set of managed
resources. In many cases, the number of users consuming the
autonomic system services may oscillate rapidly, or even be-
come quite important in term of size. Thus, managed resources
are subject to be joined/withdrawn during the runtime. Patterns
belonging to this dimension are useful to react in regard with
important changes concerning the scope of managed resources.
Pattern Reﬁnement. Management of autonomic systems
is orchestrated by the collaboration of multiple autonomic
managers, each of which can act on its own perimeter, as
well as the perimeters of its collaborating peers. Thus, the ﬁrst
reﬁnement level uses case pattern to cover these two cases (see
Figure 4).
In fact, acting on its own perimeter is OR-decomposed
using Expand and Shrink Monitoring Perimeter leaf goals.
Rather, acting on others perimeters is reﬁned using case
pattern into deploying a new manager, or soliciting an existing
one. First, the case of deploying a new manager is reﬁned using
milestone pattern into launching manager (Launch Delegated
Manager in Figure 4, as Subgoal 1 in Table I), and then,
delegating perimeter (Delegation, as Subgoal 2). In turn, the
delegation goal is also reﬁned though milestone pattern into
joining delegated perimeter on the delegated manager (Expand
Perimeter, as Subgoal 1), and then, deleting this perimeter from
the delegating manager (Shrink Perimeter, as Subgoal 2).
In the second case, where acting is held on an existing
manager, the reﬁnement is done twice, ﬁrst using milestone
pattern, into delegating the whole perimeter to the delegated
manager (Delegation, as Subgoal 1), and then shutting down
the delegating one (Shutdown Delegating Manager, as Subgoal
2).
Examples. This pattern is suitable for the following cases:
(1) Load balancing of monitoring among autonomic managers.
(2) Supporting scalability of the autonomic systems. (3) Min-
imizing the overall monitoring charge in terms of dedicated
monitoring entities.
D. Temporal Dimension Pattern
Context. Temporal aspects are decisive factors in adapt-
ing monitoring behavior. Notice that previous patterns are
explained without time considerations, but in fact, they imply
some temporal aspects. Patterns belonging to this dimension
are useful either to overcome both temporal violations and
scheduling problems, or to tune the analysis over the instru-
mented metrics.
Pattern Reﬁnement. Regarding information exchange,
once again, we use case pattern to represent the same cases
identiﬁed in Exchange dimension. Obviously, dealing with
information exchange temporal aspects means that the ex-
change is done iteratively and not once. Thus, Manager-2-
Agent case is OR-decomposed into periodic poll, and both
Manager-2-(Manager/Shared DB) cases are OR-decomposed
into periodic export (see Figure 5). Note that Manager-2-Agent
push mode and Manager-2-(Manager/Shared DB) pull mode
are not mentioned for the reasons explained in Section III-A.
We distinguish two levels of temporal granularity: the ﬁne-
grained level deals with an individual polling (exporting),
whereas the coarse-grained level addresses a collective polling
(exporting). Based on this distinction, we identify six leaf
goals OR-decomposing periodic poll (export), namely: Update
Polling (Exporting) Period to update the frequency of a given
polling (exporting), Align Polling (Exporting) to launch a set
of synchronized parallel pollings (exported metrics) at the
same time, and Misalign Polling (Exporting) to launch pollings
(exported metrics) according to a given/adjustable offset.
Regarding metrics calculation, we identify the case of
modifying the temporal interval covered by the metric value.
However, the validity of a metric value that is not instantaneous
(e.g., throughput) is equal to the temporal interval through
which that value was measured. Therefore, case pattern is used
twice to cover all possible metric classes previously mentioned.
We reﬁne only the measurable, mathematical & aggregation
metrics, because time has a sense in their calculation, but not
the other metrics. Thus, at the fourth reﬁnement level, we OR-
decompose measurable & mathematical metrics using Update
Time Scope Interval. Rather, Update Time Series Interval OR-
decomposes aggregation metrics.
Examples. This pattern is suitable for the following cases:
(1) Controlling (e.g., relaxing, stressing) the monitoring load
on autonomic managers, network paths among autonomic
managers and shared DBs, as well as remote agents. (2) Tuning
temporal parameters of metrics analysis.
Notice that all previous patterns are subject to be updated
and enriched, in order to integrate new monitoring adaptation
actions. For instance, we can address temporal aspects of
alarms ﬁltering by delaying delivery of redundant alarms [12],
as well as alarms correlation by modifying the stream interval
time during which Complex Event Processing engines (e.g.,
Esper & Drools) perform correlations. OR-decomposition into
Update Waiting Time & Update Window Time could be used
for these two cases respectively.
IV.
CASE-STUDY
Context. Our scenario takes place in a cloud data center
hosting a large number of virtual machines (VMs), and pro-
25
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

Align Polling
Update Polling
Period
Misalign Polling
Align Exporting
Update Exporting
Period
Misalign Exporting
Base
Case Pattern
Mathematical
Resource OR
Measurable OR
Mathematical
Measurable
OR Decomposition
OR Decomposition
Update Time
Scope Interval
Update Time
Series Interval
OR Decomposition
in Exchange
Temporal Dimension
in Metrics
Manager-2-Manager
Manager-2-Agent
Case Pattern
Mgr-2-Agt OR
Mgr-2-Mgr OR
Mgr-2-Sh DB
Manager-2-Shared DB
Periodic Poll
Periodic Export
OR Decomposition
Case Pattern
Aggregation
Base OR
Discrete OR
Aggregation
Discrete
Resource
Figure 5: Temporal Dimension Pattern
viding its clients with a continuous monitoring of the enforced
SLAs metrics. Each VM integrates an agent providing prede-
termined metrics reﬂecting VM healthiness. In most large scale
systems, distributed agents periodically push their metrics; in
our case, agents push those metrics every 10 seconds to speciﬁc
pre-conﬁgured autonomic managers. To facilitate the case-
study, we assume that our studied SLA template encapsulates
the same metrics pushed by agents. Besides, this SLA template
distinguishes two time-slots: metrics are to be refreshed at the
client side with a freshness falling into the range of 3-6 seconds
during the ﬁrst time-slot, and a range of 30-40 seconds for
the second one. The SLAs metrics values are instrumented
and delivered automatically through polling and exporting,
respectively. Once a new SLA is enforced, the autonomic
managers use pull mode to collect VMs metrics with the lowest
freshness value (3 seconds).
Objectives. Human administrators identify two high level
goals to be satisﬁed during the monitoring system runtime:
Respect Metrics Freshness makes sure that SLAs are monitored
appropriately, and Minimize Monitoring Cost aims at limiting
the resources dedicated to monitoring as much as possible.
Patterns. We can exploit several patterns to deal with
the ﬁrst objective. During the ﬁrst time-slot, we use the
temporal pattern to relax polling & exporting by updating
their periods (Update Polling & Exporting Period in Figure
6) with respect to the highest freshness range (6 seconds). If
delivering freshness violates the highest freshness, that would
be a result of overloading manager [2], thus we apply the
spatial pattern as a second alternative, and consequently, a
new autonomic manager will be deployed to assist the over-
loaded one (Launch Delegated Manager, Expand Perimeter
& Shrink Perimeter). As a third alternative, and in case that
the overloaded autonomic manager monitors non-SLAs metrics
(e.g., physical servers healthiness), the metric pattern could be
applied to transfer them to other manager, in order to relax the
ﬁrst one (Add & Remove Aspects). Since the second time-slot
freshness (30-40 seconds) is greater than agents push period
(10 seconds), there is no need to poll metrics, nor to export
all received metrics. Rather, we apply the temporal pattern to
update the exporting period from 3-4 to 30-40 seconds (Up-
date Exporting Period). This adaptation necessitates applying
another one belonging to exchange pattern to stop the pollings
that are launched during the ﬁrst time-slot (Deactivate Polling).
The second objective is reﬁned using spatial pattern in
order to shutdown recently deployed managers, during the
ﬁrst time-slot. Thus, an underloaded manager delegates its
whole perimeter to another one, and shutdowns itself (Ex-
pand Perimeter, Shrink Perimeter & Shutdown Delegating
Manager). During the second time-slot, autonomic managers
already deliver to clients around one-third of the metrics
pushed by agents, thus no adaption actions are to be taken
in regard with minimizing monitoring resources.
Autonomic managers would be able to adapt their mon-
itoring, if they recognize adaptation stimuli. Therefore, we
exploit guard pattern to apply adaptation actions (Adaptation
in Figure 6, as Subgoal 2 in Table I) as response to speciﬁc
stimulus (Guard, as Subgoal 1), while maintaining the current
monitoring behavior unless adaptation takes place (Unless, as
Subgoal 3).
V.
RELATED WORK
In this section, we try to align our approach of adapting
monitoring using goal-oriented dimensional patterns with other
existing trends focusing on monitoring of QoS in autonomic
systems [13][14][15][16][17][18].
In order to manage QoS in autonomic systems, the latter
applies adaptation actions. In many cases, for instance [13],
this adaptation doesn’t concern the monitoring system itself,
but precisely, is applied on the managed system services
and infrastructure (i.e., reconﬁguring resource allocation). Cer-
tainly, this adaptation will result in increased quality, but this
way, the knowledge of the management system won’t exceed a
”maximum ceiling” and management will be limited in terms
of treating new situations.
Monitoring more metrics or managed resources is ad-
dressed in [14][16][18] either to deal with the managed scope
changes, or to operate a ”minimal” monitoring that is able
to be extended in case of SLA violations, or even to adapt
monitoring to meet SLA modiﬁcations. Indeed, it is important
to scale up/down monitored metrics and resources. But it isn’t
clear whether this capability could be applied in other scenarios
for other objectives, if so, how that could be feasible.
Runtime deployment of monitoring resources (i.e., man-
agers, probes) is discussed in [14][15][17] either to integrate
monitoring into the SLA management life-cycle of large scale
systems, or to replace failed managers, or even to monitor
some metrics concerning particular paths or segments. But
here also, besides the undeniable gains of deploying moni-
toring resources during runtime, we don’t see how the system
administrators can orchestrate the monitoring adaptation (i.e.,
planning & executing) of the distributed monitoring among
several collaborating managers.
Inspired from the autonomic computing reference archi-
tecture proposed in [10], patterns regarding the distribution
of the MAPE loop modules were proposed in [19][20]. Those
patterns are useful in terms of design reuse as well as clarifying
26
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

Milestone Pattern
Expand
Perimeter
Shrink
Perimeter
Launch
Delegated
Manager
Expand
Perimeter
Shrink
Perimeter
Milestone Pattern
Shutdown
Delegating
Manager
Guard
Adaptation
Unless
Guard Pattern
Minimize Monitoring Cost
Acting on Spatial Dimension
Guard
Adaptation
Unless
Guard
Pattern
Add
Aspects
Remove
Aspects
Mileston Pattern
Update
Exporting
Period
Milestone Pattern
Deactivate
Polling
Update
Exporting
Period
Milestone Pattern
Update
Polling
Period
Guard
Adaptation
Unless
Guard
Pattern
Guard
Adaptation
Unless
Guard
Pattern
Acting on
Temporal Dimension
Respect Metric Freshness
Acting on
Spatial Dimension
Acting on
Metric Dimension
Acting on Exchange &
Temporal Dimensions
Guard
Adaptation
Unless
Guard
Pattern
Figure 6: Respect Metrics Freshness & Minimize Monitoring Cost Reﬁnement
the application contexts and beneﬁts, but they target mainly
the deployment of the monitoring modules rather than the
monitoring behavior itself. In addition, they don’t treat the
monitoring adaptation in regard with quality requirements.
VI.
CONCLUSION & PERSPECTIVES
We proposed a goal-oriented approach for designing self-
managed monitoring in autonomic systems. This approach
assists human administrators to adapt the monitoring system
behavior regarding quality requirements. It means that mon-
itoring is conﬁgured starting from quality speciﬁcation (e.g.,
SLA), and reconﬁgured based on adaptation patterns, that are
exploited to achieve high level quality objectives. We designed
four monitoring adaptation patterns according to dimensions
that represent various aspects on which adaptation actions can
apply to. Thus, each dimension represents a ”starting point”
reﬂection to elicit monitoring goals that are reﬁned till reaching
leaf goals.
About perspectives, we are currently investigating how
monitoring adaptations could inﬂuence the stability at the
autonomic system whole scale, in case of applying many over-
lapped adaptation leaf goals over several autonomic managers.
In addition, the agent side adaptations need to be investigated,
and orchestrated with those applied at the autonomic manager
side.
REFERENCES
[1]
J. O. Kephart and D. M. Chess, “The vision of autonomic computing,”
Computer, vol. 36, no. 1, Jan. 2003, pp. 41–50.
[2]
A. Toueir, J. Broisin, and M. Sibilla, “A goal-oriented approach for
adaptive sla monitoring: a cloud provider case study,” in LATINCLOUD
2013, Macei´o, Brazil, December 2013.
[3]
A. Moui, T. Desprats, E. Lavinal, and M. Sibilla, “A cim-based
framework to manage monitoring adaptability,” in Network and ser-
vice management (cnsm), 2012 8th international conference and 2012
workshop on systems virtualiztion management (svm), 2012, pp. 261–
265.
[4]
A. Moui, T. Desprats, E. Lavinal, and M. Sibilla, “Information models
for managing monitoring adaptation enforcement,” in International
Conference on Adaptive and Self-adaptive Systems and Applications
(ADAPTIVE), Nice, 22/07/2012-27/07/2012, 2012, pp. 44–50.
[5]
A. Moui, T. Desprats, E. Lavinal, and M. Sibilla, “Managing polling
adaptability in a cim/wbem infrastructure,” in 2010 4th International
DMTF Academic Alliance Workshop on Systems and Virtualization
Management (SVM), 2010, pp. 1–6.
[6]
A. Toueir, J. Broisin, and M. Sibilla, “Toward conﬁgurable perfor-
mance monitoring: Introduction to mathematical support for metric
representation and instrumentation of the cim metric model,” in 2011
5th International DMTF Academic Alliance Workshop on Systems and
Virtualization Management (SVM), 2011, pp. 1–6.
[7]
A. Van Lamsweerde, Requirements Engineering: From System Goals
to UML Models to Software Speciﬁcations.
Wiley, 2009.
[8]
A. Van Lamsweerde, “Requirements engineering in the year 00: A
research perspective,” in Proceedings of the 22Nd International Con-
ference on Software Engineering, ser. ICSE ’00, 2000, pp. 5–19.
[9]
R. Darimont and A. Van Lamsweerde, “Formal reﬁnement patterns
for goal-driven requirements elaboration,” in ACM SIGSOFT Software
Engineering Notes, vol. 21, no. 6.
ACM, 1996, pp. 179–190.
[10]
IBM Corp., “An architectural blueprint for autonomic computing,” IBM
White Paper, June 2005.
[11]
A. Merkin, “Base metrics proﬁle,” December 2009, document Number:
DSP1053.
[12]
A. Clemm, Network Management Fundamentals.
Cisco Press, 2006,
ch. 5, pp. 138–141.
[13]
G. Katsaros, G. Kousiouris, S. V. Gogouvitis, D. Kyriazis, A. Meny-
chtas, and T. Varvarigou, “A self-adaptive hierarchical monitoring
mechanism for clouds,” Journal of Systems and Software, vol. 85, no. 5,
2012, pp. 1029–1041.
[14]
D. Roxburgh, D. Spaven, and C. Gallen, “Monitoring as an sla-oriented
consumable service for saas assurance: A prototype,” in 2011 IFIP/IEEE
International Symposium on Integrated Network Management (IM),
2011, pp. 925–939.
[15]
P. Thongtra and F. Aagesen, “An adaptable capability monitoring
system,” in 2010 Sixth International Conference on Networking and
Services (ICNS), 2010, pp. 73–80.
[16]
M. Munawar, T. Reidemeister, M. Jiang, A. George, and P. Ward,
“Adaptive monitoring with dynamic differential tracing-based diagno-
sis,” in Managing Large-Scale Service Deployment, ser. Lecture Notes
in Computer Science, F. Turck, W. Kellerer, and G. Kormentzas, Eds.
Springer Berlin Heidelberg, 2008, vol. 5273, pp. 162–175.
[17]
J. Nobre, L. Granville, A. Clemm, and A. Prieto, “Decentralized
detection of sla violations using p2p technology,” in Proceedings of
the 8th International Conference on Network and Service Management,
2012, pp. 100–107.
[18]
P. Grefen, K. Aberer, H. Ludwig, and Y. Hoffner, “Crossﬂow: Cross-
organizational workﬂow management in dynamic virtual enterprises,”
International Journal of Computer Systems Science & Engineering,
vol. 15, 2000, pp. 277–290.
[19]
D. Weyns, B. Schmerl, V. Grassi, S. Malek, R. Mirandola, C. Prehofer,
J. Wuttke, J. Andersson, H. Giese, and K. G¨oschka, “On patterns for
decentralized control in self-adaptive systems,” in Software Engineering
for Self-Adaptive Systems II, R. Lemos, H. Giese, H. M¨uller, and
M. Shaw, Eds.
Springer Berlin Heidelberg, 2013, vol. 7475, pp. 76–
107.
[20]
A. J. Ramirez and B. H. C. Cheng, “Design patterns for developing
dynamically adaptive systems,” in Proceedings of the 2010 ICSE
Workshop on Software Engineering for Adaptive and Self-Managing
Systems, ser. SEAMS ’10, 2010, pp. 49–58.
27
Copyright (c) IARIA, 2014.     ISBN:  978-1-61208-343-8
PATTERNS 2014 : The Sixth International Conferences on Pervasive Patterns and Applications

